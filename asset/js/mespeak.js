/*
	meSpeak  v.1.9.7.1
	based on speak.js, https://github.com/kripken/speak.js
	eSpeak and other code here are under the GNU GPL.
	meSpeak (Modular eSpeak) is a mod of 'speak.js' by N.Landsteiner (2011-2015), www.masswerk.at
	adding support for Webkit/Safari and external voice-modules
	v.1.1 and later default to play via the Web Audio API and uses the HTMLAudioElement as a second option.
	official project page: http://www.masswerk.at/mespeak
*/
var meSpeak = (function () {
	"use strict";

	function ESpeak() {
		var vprint = (self.console) ? console.log : function () {};
		var Module = {
			noInitialRun: true
		};
		"use strict";
		if (!Module.arguments) {
			try {
				Module.arguments = arguments;
			} catch (e) {
				Module.arguments = [];
			}
		}
		var Runtime = {
			stackSave: function () {
				return STACKTOP;
			},
			stackRestore: function (stackTop) {
				STACKTOP = stackTop;
			},
			forceAlign: function (target, quantum) {
				quantum = quantum || 4;
				if (isNumber(target) && isNumber(quantum)) {
					return Math.ceil(target / quantum) * quantum;
				} else {
					return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
				}
			},
			isNumberType: function (type) {
				return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
			},
			isPointerType: function isPointerType(type) {
				return pointingLevels(type) > 0;
			},
			isStructType: function isStructType(type) {
				if (isPointerType(type)) return false;
				if (new RegExp(/^\[\d+\ x\ (.*)\]/g).test(type)) return true;
				if (new RegExp(/<?{ [^}]* }>?/g).test(type)) return true;
				return !Runtime.isNumberType(type) && type[0] == '%';
			},
			INT_TYPES: {
				"i1": 0,
				"i8": 0,
				"i16": 0,
				"i32": 0,
				"i64": 0
			},
			FLOAT_TYPES: {
				"float": 0,
				"double": 0
			},
			or64: function (x, y) {
				var l = (x | 0) | (y | 0);
				var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
				return l + h;
			},
			and64: function (x, y) {
				var l = (x | 0) & (y | 0);
				var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
				return l + h;
			},
			xor64: function (x, y) {
				var l = (x | 0) ^ (y | 0);
				var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
				return l + h;
			},
			getNativeFieldSize: function getNativeFieldSize(type) {
				return Math.max(Runtime.getNativeTypeSize(type), 4);
			},
			getNativeTypeSize: function getNativeTypeSize(type) {
				if (4 == 1) return 1;
				var size = {
					'_i1': 1,
					'_i8': 1,
					'_i16': 2,
					'_i32': 4,
					'_i64': 8,
					"_float": 4,
					"_double": 8
				}['_' + type];
				if (!size && type[type.length - 1] == '*') {
					size = 4;
				}
				return size;
			},
			dedup: function dedup(items, ident) {
				var seen = {};
				if (ident) {
					return items.filter(function (item) {
						if (seen[item[ident]]) return false;
						seen[item[ident]] = true;
						return true;
					});
				} else {
					return items.filter(function (item) {
						if (seen[item]) return false;
						seen[item] = true;
						return true;
					});
				}
			},
			set: function set() {
				var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
				var ret = {};
				for (var i = 0; i < args.length; i++) {
					ret[args[i]] = 0;
				}
				return ret;
			},
			calculateStructAlignment: function calculateStructAlignment(type) {
				type.flatSize = 0;
				type.alignSize = 0;
				var diffs = [];
				var prev = -1;
				type.flatIndexes = type.fields.map(function (field) {
					var size, alignSize;
					if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
						size = Runtime.getNativeTypeSize(field);
						alignSize = size;
					} else if (Runtime.isStructType(field)) {
						size = Types.types[field].flatSize;
						alignSize = Types.types[field].alignSize;
					} else {
						dprint('Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]));
						assert(0);
					}
					alignSize = type.packed ? 1 : Math.min(alignSize, 4);
					type.alignSize = Math.max(type.alignSize, alignSize);
					var curr = Runtime.alignMemory(type.flatSize, alignSize);
					type.flatSize = curr + size;
					if (prev >= 0) {
						diffs.push(curr - prev);
					}
					prev = curr;
					return curr;
				});
				type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
				if (diffs.length == 0) {
					type.flatFactor = type.flatSize;
				} else if (Runtime.dedup(diffs).length == 1) {
					type.flatFactor = diffs[0];
				}
				type.needsFlattening = (type.flatFactor != 1);
				return type.flatIndexes;
			},
			generateStructInfo: function (struct, typeName, offset) {
				var type, alignment;
				if (typeName) {
					offset = offset || 0;
					type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
					if (!type) return null;
					if (!struct) struct = (typeof Types === 'undefined' ? Runtime : Types).structMetadata[typeName.replace(/.*\./, '')];
					if (!struct) return null;
					assert(type.fields.length === struct.length, 'Number of named fields must match the type for ' + typeName + '. Perhaps due to inheritance, which is not supported yet?');
					alignment = type.flatIndexes;
				} else {
					var type = {
						fields: struct.map(function (item) {
							return item[0]
						})
					};
					alignment = Runtime.calculateStructAlignment(type);
				}
				var ret = {
					__size__: type.flatSize
				};
				if (typeName) {
					struct.forEach(function (item, i) {
						if (typeof item === 'string') {
							ret[item] = alignment[i] + offset;
						} else {
							var key;
							for (var k in item) key = k;
							ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
						}
					});
				} else {
					struct.forEach(function (item, i) {
						ret[item[1]] = alignment[i];
					});
				}
				return ret;
			},
			stackAlloc: function stackAlloc(size) {
				var ret = STACKTOP;
				_memset(STACKTOP, 0, size);
				STACKTOP += size;
				STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
				return ret;
			},
			staticAlloc: function staticAlloc(size) {
				var ret = STATICTOP;
				STATICTOP += size;
				STATICTOP = Math.ceil((STATICTOP) / 4) * 4;;
				return ret;
			},
			alignMemory: function alignMemory(size, quantum) {
				var ret = size = Math.ceil((size) / (quantum ? quantum : 4)) * (quantum ? quantum : 4);;
				return ret;
			},
			__dummy__: 0
		}
		var CorrectionsMonitor = {
			MAX_ALLOWED: 0,
			corrections: 0,
			sigs: {},
			note: function (type, succeed, sig) {
				if (!succeed) {
					this.corrections++;
					if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
				}
			},
			vprint: function () {
				var items = [];
				for (var sig in this.sigs) {
					items.push({
						sig: sig,
						fails: this.sigs[sig][0],
						succeeds: this.sigs[sig][1],
						total: this.sigs[sig][0] + this.sigs[sig][1]
					});
				}
				items.sort(function (x, y) {
					return y.total - x.total;
				});
				for (var i = 0; i < items.length; i++) {
					var item = items[i];
					vprint(item.sig + ' : ' + item.total + ' hits, %' + (Math.ceil(100 * item.fails / item.total)) + ' failures');
				}
			}
		};

		function cRound(x) {
			return x >= 0 ? Math.floor(x) : Math.ceil(x);
		}
		var __globalConstructor__ = function globalConstructor() {};
		var __THREW__ = false;
		var __ATEXIT__ = [];
		var ABORT = false;
		var undef = 0;
		var tempValue, tempInt, tempBigInt;

		function abort(text) {
			vprint(text + ':\n' + (new Error).stack);
			ABORT = true;
			throw "Assertion: " + text;
		}

		function assert(condition, text) {
			if (!condition) {
				abort('Assertion failed: ' + text);
			}
		}

		function setValue(ptr, value, type) {
			if (type[type.length - 1] === '*') type = 'i32';
			switch (type) {
				case 'i1':
					HEAP8[(ptr)] = value;;
					break;
				case 'i8':
					HEAP8[(ptr)] = value;;
					break;
				case 'i16':
					HEAP16[((ptr) >> 1)] = value;;
					break;
				case 'i32':
					HEAP32[((ptr) >> 2)] = value;;
					break;
				case 'i64':
					HEAP32[((ptr) >> 2)] = value;;
					break;
				case 'float':
					HEAPF32[((ptr) >> 2)] = value;;
					break;
				case 'double':
					HEAPF32[((ptr) >> 2)] = value;;
					break;
				default:
					abort('invalid type for setValue: ' + type);
			}
		}
		Module.setValue = setValue;

		function getValue(ptr, type) {
			if (type[type.length - 1] === '*') type = 'i32';
			switch (type) {
				case 'i1':
					return HEAP8[(ptr)];
				case 'i8':
					return HEAP8[(ptr)];
				case 'i16':
					return HEAP16[((ptr) >> 1)];
				case 'i32':
					return HEAP32[((ptr) >> 2)];
				case 'i64':
					return HEAP32[((ptr) >> 2)];
				case 'float':
					return HEAPF32[((ptr) >> 2)];
				case 'double':
					return HEAPF32[((ptr) >> 2)];
				default:
					abort('invalid type for setValue: ' + type);
			}
			return null;
		}
		Module.getValue = getValue;
		var ALLOC_NORMAL = 0;
		var ALLOC_STACK = 1;
		var ALLOC_STATIC = 2;
		Module.ALLOC_NORMAL = ALLOC_NORMAL;
		Module.ALLOC_STACK = ALLOC_STACK;
		Module.ALLOC_STATIC = ALLOC_STATIC;

		function allocate(slab, types, allocator) {
			var zeroinit, size;
			if (typeof slab === 'number') {
				zeroinit = true;
				size = slab;
			} else {
				zeroinit = false;
				size = slab.length;
			}
			var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][typeof allocator === 'undefined' ? ALLOC_STATIC : allocator](Math.max(size, 1));
			var singleType = typeof types === 'string' ? types : null;
			var i = 0,
				type;
			while (i < size) {
				var curr = zeroinit ? 0 : slab[i];
				if (typeof curr === 'function') {
					curr = Runtime.getFunctionIndex(curr);
				}
				type = singleType || types[i];
				if (type === 0) {
					i++;
					continue;
				}
				setValue(ret + i, curr, type);
				i += Runtime.getNativeTypeSize(type);
			}
			return ret;
		}
		Module.allocate = allocate;

		function Pointer_stringify(ptr) {
			var ret = "";
			var i = 0;
			var t;
			var nullByte = String.fromCharCode(0);
			while (1) {
				t = String.fromCharCode(HEAPU8[(ptr + i)]);
				if (t == nullByte) {
					break;
				} else {}
				ret += t;
				i += 1;
			}
			return ret;
		}
		Module.Pointer_stringify = Pointer_stringify;

		function Array_stringify(array) {
			var ret = "";
			for (var i = 0; i < array.length; i++) {
				ret += String.fromCharCode(array[i]);
			}
			return ret;
		}
		Module.Array_stringify = Array_stringify;
		var FUNCTION_TABLE;
		var PAGE_SIZE = 4096;

		function alignMemoryPage(x) {
			return Math.ceil(x / PAGE_SIZE) * PAGE_SIZE;
		}
		var HEAP;
		var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32;
		var STACK_ROOT, STACKTOP, STACK_MAX;
		var STATICTOP;
		var HAS_TYPED_ARRAYS = false;
		var TOTAL_MEMORY = Module.TOTAL_MEMORY || 52428800;
		var FAST_MEMORY = Module.FAST_MEMORY || 2097152;
		HAS_TYPED_ARRAYS = false;
		try {
			HAS_TYPED_ARRAYS = !!Int32Array && !!Float32Array && !!(new Int32Array(1).subarray);
		} catch (e) {}
		if (HAS_TYPED_ARRAYS) {
			var buffer = new ArrayBuffer(TOTAL_MEMORY);
			HEAP8 = new Int8Array(buffer);
			HEAP16 = new Int16Array(buffer);
			HEAP32 = new Int32Array(buffer);
			HEAPU8 = new Uint8Array(buffer);
			HEAPU16 = new Uint16Array(buffer);
			HEAPU32 = new Uint32Array(buffer);
			HEAPF32 = new Float32Array(buffer);
			HEAP32[0] = 255;
			assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');
		} else {
			abort('Cannot fallback to non-typed array case in USE_TYPED_ARRAYS == 2: Code is too specialized');
		}
		var base = intArrayFromString('(null)');
		for (var i = 0; i < base.length; i++) {
			HEAP8[(i)] = base[i];
		}
		Module.HEAP = HEAP;
		Module.HEAP8 = HEAP8;
		Module.HEAP16 = HEAP16;
		Module.HEAP32 = HEAP32;
		Module.HEAPU8 = HEAPU8;
		Module.HEAPU16 = HEAPU16;
		Module.HEAPU32 = HEAPU32;
		Module.HEAPF32 = HEAPF32;
		STACK_ROOT = STACKTOP = alignMemoryPage(10);
		var TOTAL_STACK = 1024 * 1024;
		STACK_MAX = STACK_ROOT + TOTAL_STACK;
		STATICTOP = alignMemoryPage(STACK_MAX);

		function __shutdownRuntime__() {
			while (__ATEXIT__.length > 0) {
				var atexit = __ATEXIT__.pop();
				var func = atexit.func;
				if (typeof func === 'number') {
					func = FUNCTION_TABLE[func];
				}
				func(typeof atexit.arg === 'undefined' ? null : atexit.arg);
			}
			CorrectionsMonitor.vprint();
		}

		function Array_copy(ptr, num) {
			if (HAS_TYPED_ARRAYS) {
				return Array.prototype.slice.call(HEAP8.subarray(ptr, ptr + num));
			} else {
				return HEAP8.slice(ptr, ptr + num);
			}
			return HEAP.slice(ptr, ptr + num);
		}
		Module.Array_copy = Array_copy;

		function String_len(ptr) {
			var i = 0;
			while (HEAP8[(ptr + i)]) i++;
			return i;
		}
		Module.String_len = String_len;

		function String_copy(ptr, addZero) {
			var len = String_len(ptr);
			if (addZero) len++;
			var ret = Array_copy(ptr, len);
			if (addZero) ret[len - 1] = 0;
			return ret;
		}
		Module.String_copy = String_copy;
		if (typeof self.console === 'object' && typeof console.log === 'function') {
			this.vprint = function (x) {
				console.log(x)
			};
		} else if (typeof vprint === 'undefined') {
			this.vprint = function () {};
		}

		function intArrayFromString(stringy, dontAddNull) {
			var ret = [];
			var t;
			var i = 0;
			while (i < stringy.length) {
				var chr = stringy.charCodeAt(i);
				if (chr > 0xFF) {
					chr &= 0xFF;
				}
				ret.push(chr);
				i = i + 1;
			}
			if (!dontAddNull) {
				ret.push(0);
			}
			return ret;
		}
		Module.intArrayFromString = intArrayFromString;

		function intArrayToString(array) {
			var ret = [];
			for (var i = 0; i < array.length; i++) {
				var chr = array[i];
				if (chr > 0xFF) {
					chr &= 0xFF;
				}
				ret.push(String.fromCharCode(chr));
			}
			return ret.join('');
		}
		Module.intArrayToString = intArrayToString;

		function unSign(value, bits, ignore, sig) {
			if (value >= 0) {
				return value;
			}
			return bits <= 32 ? 2 * Math.abs(1 << (bits - 1)) + value : Math.pow(2, bits) + value;
		}

		function reSign(value, bits, ignore, sig) {
			if (value <= 0) {
				return value;
			}
			var half = bits <= 32 ? Math.abs(1 << (bits - 1)) : Math.pow(2, bits - 1);
			if (value >= half && (bits <= 32 || value > half)) {
				value = -2 * half + value;
			}
			return value;
		}
		Runtime.QUANTUM_SIZE = 4
		var $struct___sFILE___SIZE = 104;
		var $struct___sFILE___FLATTENER = [0, 4, 8, 12, 14, 16, 24, 28, 32, 36, 40, 44, 48, 56, 60, 64, 67, 68, 76, 80, 84, 88, 92, 100];
		var $struct___sbuf___SIZE = 8;
		var $struct__reent___SIZE = 1060;
		var $struct__reent___FLATTENER = [0, 4, 8, 12, 16, 20, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 328, 332, 732, 736, 748];
		var $struct__Bigint___SIZE = 24;
		var $union_anon_0___SIZE = 240;
		var $struct_anon_1___SIZE = 240;
		var $struct__atexit___SIZE = 400;
		var $struct__atexit___FLATTENER = [0, 4, 8, 136];
		var $struct__on_exit_args___SIZE = 264;
		var $struct__on_exit_args___FLATTENER = [0, 128, 256, 260];
		var $struct__glue___SIZE = 12;
		var $struct__mbstate_t___SIZE = 8;
		var $union_anon___SIZE = 4;
		var $struct_option___SIZE = 16;
		var $struct_MNEM_TAB___SIZE = 8;
		var $struct_MatchRecord___SIZE = 16;
		var $struct_TUNE___SIZE = 68;
		var $struct_TUNE___FLATTENER = [0, 12, 16, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64];
		var $struct_SYLLABLE___SIZE = 6;
		var $struct_TONE_HEAD___SIZE = 16;
		var $struct_TONE_HEAD___FLATTENER = [0, 1, 2, 3, 4, 8, 9, 10, 12];
		var $struct_SSML_STACK___SIZE = 76;
		var $struct_SSML_STACK___FLATTENER = [0, 4, 8, 12, 16, 56];
		var $struct_PARAM_STACK_45___SIZE = 64;
		var $struct_ACCENTS___SIZE = 8;
		var $struct_MBROLA_TAB___SIZE = 24;
		var $struct_PHONEME_TAB___SIZE = 16;
		var $struct_PHONEME_TAB___FLATTENER = [0, 4, 8, 10, 11, 12, 13, 14, 15];
		var $struct_PHONEME_TAB_LIST_106___SIZE = 48;
		var $struct_PHONEME_TAB_LIST_106___FLATTENER = [0, 32, 36, 40, 44];
		var $struct_frameref_t___SIZE = 8;
		var $struct_frame_t___SIZE = 64;
		var $struct_frame_t___FLATTENER = [0, 2, 16, 17, 18, 26, 32, 35, 39, 44, 49, 56, 63];
		var $struct_PHONEME_DATA___SIZE = 152;
		var $struct_PHONEME_DATA___FLATTENER = [0, 4, 68, 88, 108, 124, 128, 132];
		var $struct_PHONEME_LIST___SIZE = 24;
		var $struct_PHONEME_LIST___FLATTENER = [0, 1, 2, 3, 4, 6, 8, 12, 14, 15, 16, 17, 18, 19, 20, 21];
		var $struct_SPEED_FACTORS___SIZE = 64;
		var $struct_voice_t___SIZE = 1344;
		var $struct_voice_t___FLATTENER = [0, 40, 44, 48, 52, 56, 60, 64, 68, 72, 76, 80, 84, 88, 92, 96, 100, 104, 108, 112, 144, 162, 180, 198, 216, 234, 252, 272, 308, 344];
		var $struct_SOUND_ICON___SIZE = 16;
		var $struct_Translator___SIZE = 8328;
		var $struct_Translator___FLATTENER = [0, 280, 284, 288, 292, 332, 632, 652, 656, 660, 668, 676, 692, 696, 700, 704, 708, 964, 968, 1000, 1048, 1052, 1056, 5152, 5256, 6280, 6792, 7272, 7752, 7756, 8012, 8268, 8272, 8276, 8280, 8284, 8288, 8292, 8296, 8300, 8304, 8308, 8312, 8316, 8320, 8324];
		var $struct_LANGUAGE_OPTIONS___SIZE = 280;
		var $struct_LANGUAGE_OPTIONS___FLATTENER = [0, 4, 8, 12, 16, 20, 24, 100, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 240, 244, 248, 249, 250, 251, 252, 256, 260, 264, 268, 272, 276];
		var $struct_PHONEME_LIST2___SIZE = 8;
		var $struct_PHONEME_LIST2___FLATTENER = [0, 1, 2, 3, 4, 6];
		var $struct_REPLACE_PHONEMES___SIZE = 3;
		var $struct_datablock___SIZE = 16;
		var $struct_espeak_VOICE___SIZE = 24;
		var $struct_espeak_VOICE___FLATTENER = [0, 4, 8, 12, 13, 14, 15, 16, 20];
		var $struct_wavegen_peaks_t___SIZE = 80;
		var $struct_wavegen_peaks_t___FLATTENER = [0, 4, 8, 12, 16, 24, 32, 40, 48, 56, 64, 72];
		var $struct_RESONATOR___SIZE = 40;
		var $struct_WGEN_DATA___SIZE = 64;
		var $struct_sonicStreamStruct___SIZE = 88;
		var $struct_klatt_frame_t___SIZE = 288;
		var $struct_klatt_frame_t___FLATTENER = [0, 4, 8, 48, 88, 128, 168, 172, 176, 180, 184, 188, 192, 196, 200, 204, 208, 248];
		var $struct_klatt_global_t___SIZE = 2748;
		var $struct_klatt_global_t___FLATTENER = [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 64, 72, 80, 88, 96, 104, 112, 120, 128, 136, 144, 152, 160, 164, 172, 176, 180, 184, 188, 1468];
		var $struct_resonator_t___SIZE = 64;
		var $struct_klatt_peaks_t___SIZE = 80;
		var $struct_klatt_peaks_t___FLATTENER = [0, 4, 8, 12, 16, 24, 32, 40, 48, 56, 64, 72];
		var $struct_frame_t_199___SIZE = 64;
		var $struct_frame_t_199___FLATTENER = [0, 2, 16, 17, 18, 26, 32, 35, 39, 44, 49, 56, 63];
		var $struct_stat___SIZE = 80;
		var $struct_stat___FLATTENER = [0, 8, 12, 16, 20, 24, 28, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72];
		var $struct_PARAM_STACK___SIZE = 64;
		var $struct_PHONEME_TAB_LIST___SIZE = 48;
		var $struct_PHONEME_TAB_LIST___FLATTENER = [0, 32, 36, 40, 44];
		var $struct_PHONEME_TAB_11___SIZE = 16;
		var $struct_PHONEME_TAB_11___FLATTENER = [0, 4, 8, 10, 11, 12, 13, 14, 15];
		var $struct_RGROUP___SIZE = 28;
		var $struct_RGROUP___FLATTENER = [0, 16, 20, 24];
		var $struct_WORD_TAB___SIZE = 12;
		var $struct_WORD_TAB___FLATTENER = [0, 4, 6, 8, 9, 10];
		var $struct_PHONEME_TAB_LIST_25___SIZE = 48;
		var $struct_PHONEME_TAB_LIST_25___FLATTENER = [0, 32, 36, 40, 44];
		var $struct_WORD_TAB_29___SIZE = 12;
		var $struct_WORD_TAB_29___FLATTENER = [0, 4, 6, 8, 9, 10];
		var $struct_Translator_33___SIZE = 8328;
		var $struct_Translator_33___FLATTENER = [0, 280, 284, 288, 292, 332, 632, 652, 656, 660, 668, 676, 692, 696, 700, 704, 708, 964, 968, 1000, 1048, 1052, 1056, 5152, 5256, 6280, 6792, 7272, 7752, 7756, 8012, 8268, 8272, 8276, 8280, 8284, 8288, 8292, 8296, 8300, 8304, 8308, 8312, 8316, 8320, 8324];
		var $struct_LANGUAGE_OPTIONS_32___SIZE = 280;
		var $struct_LANGUAGE_OPTIONS_32___FLATTENER = [0, 4, 8, 12, 16, 20, 24, 100, 176, 180, 184, 188, 192, 196, 200, 204, 208, 212, 216, 220, 224, 228, 232, 240, 244, 248, 249, 250, 251, 252, 256, 260, 264, 268, 272, 276];
		var $struct_TONE_NUCLEUS___SIZE = 16;
		var $struct_TONE_NUCLEUS___FLATTENER = [0, 1, 2, 3, 4, 5, 8, 12, 13, 14];
		var $struct_PARAM_STACK_54___SIZE = 64;
		var $struct_FMT_PARAMS___SIZE = 48;
		var $struct_FMT_PARAMS_111___SIZE = 48;
		var $struct_SPECT_SEQ___SIZE = 1104;
		var $struct_SPECT_SEQ___FLATTENER = [0, 2, 3, 4];
		var $struct_frame_t2___SIZE = 44;
		var $struct_frame_t2___FLATTENER = [0, 2, 16, 17, 18, 26, 32, 35, 39];
		var $struct_SPECT_SEQK___SIZE = 1604;
		var $struct_SPECT_SEQK___FLATTENER = [0, 2, 3, 4];
		var $struct_pollfd___SIZE = 8;
		var $struct_pollfd___FLATTENER = [0, 4, 6];
		var $struct_dirent___SIZE = 1040;
		var $struct_dirent___FLATTENER = [0, 4, 1028, 1032, 1036];
		var $struct_getopt_data___SIZE = 20;
		var _path_home;
		var _filetype;
		var _wavefile;
		var _uri_callback;
		var _phoneme_callback;
		var _f_wave;
		var _quiet;
		var _samples_total;
		var _samples_split;
		var _wavefile_count;
		var _end_of_sentence;
		var _voice_pcnt;
		var __impure_ptr;
		var __ZZ13DisplayVoicesP7__sFILEPcE7genders;
		var __str1;
		var __str3;
		var __str4;
		var __str5;
		var __ZZ4mainE12long_options;
		var __str6;
		var __str7;
		var __str8;
		var __str9;
		var __str10;
		var __str11;
		var __str12;
		var __str13;
		var __str14;
		var __str15;
		var __str16;
		var __str17;
		var __str18;
		var __str19;
		var __str21;
		var __str23;
		var __str25;
		var __str27;
		var __str28;
		var __str29;
		var __str30;
		var __ZZL12OpenWaveFilePKciE8wave_hdr;
		var __str32;
		var __str33;
		var __str35;
		var __str36;
		var __str37;
		var __str38;
		var __str39;
		var __str40;
		var __str41;
		var __ZL5f_log;
		var __str42;
		var __str143;
		var __str244;
		var __str345;
		var __str446;
		var __str547;
		var __str648;
		var _mnem_rules;
		var __str749;
		var __str850;
		var __str951;
		var __str1052;
		var __str1153;
		var __str1254;
		var __str1355;
		var __str1456;
		var __str1557;
		var __str1658;
		var __str1759;
		var __str1860;
		var __str1961;
		var __str2062;
		var __str2163;
		var __str2264;
		var __str2365;
		var __str2466;
		var __str2567;
		var __str2668;
		var __str2769;
		var __str2870;
		var __str2971;
		var __str3072;
		var __str3173;
		var __str3274;
		var __str3375;
		var __str3476;
		var __str3577;
		var __str3678;
		var __str3779;
		var __str3880;
		var __str3981;
		var __str4082;
		var __str4183;
		var __str4284;
		var __str43;
		var __str44;
		var __str45;
		var __str46;
		var __str47;
		var __str48;
		var __str49;
		var __str50;
		var __str51;
		var __str52;
		var __str53;
		var __str54;
		var __str55;
		var __str56;
		var __str57;
		var _mnem_flags;
		var __ZZ22print_dictionary_flagsPjE3buf;
		var __str59;
		var __ZZ10DecodeRulePKciPciE6output;
		var __ZZ10DecodeRulePKciPciE7symbols;
		var __ZZ10DecodeRulePKciPciE10symbols_lg;
		var __str60;
		var __str61;
		var __str62;
		var __str64;
		var __str65;
		var __ZL11error_count;
		var __ZL21error_need_dictionary;
		var __ZL19letterGroupsDefined;
		var __ZL10debug_flag;
		var __str66;
		var __str67;
		var __str69;
		var __str71;
		var __str72;
		var __str73;
		var __str74;
		var __str75;
		var __str76;
		var __str77;
		var __str78;
		var __ZL7linenum;
		var __ZL10group_name;
		var __str79;
		var __ZL9group3_ix;
		var __str81;
		var __str82;
		var __str83;
		var __str84;
		var __str85;
		var __str89;
		var __ZL9rule_cond;
		var __ZL8rule_pre;
		var __ZL9rule_post;
		var __ZL10rule_match;
		var __ZL13rule_phonemes;
		var __str90;
		var __str91;
		var __str92;
		var __str93;
		var __str94;
		var __str95;
		var __ZZL16copy_rule_stringPcRiE6outbuf;
		var __ZZL16copy_rule_stringPcRiE10next_state;
		var __ZZL16copy_rule_stringPcRiE16lettergp_letters;
		var __str97;
		var __str98;
		var __str99;
		var __str100;
		var __str101;
		var __str102;
		var __str103;
		var __ZL11hash_chains;
		var __ZL11hash_counts;
		var __ZL9text_mode_b;
		var __str104;
		var __str106;
		var __str107;
		var __ZZL12compile_linePcS_PiE10nullstring;
		var __str108;
		var __str109;
		var __str110;
		var __str111;
		var __str112;
		var __str113;
		var __str114;
		var __str115;
		var _dictionary_skipwords;
		var _dictionary_name;
		var __ZL13remove_accent;
		var __str116;
		var __str2118;
		var __str3119;
		var __str4120;
		var __str5121;
		var __str7123;
		var _ipa1;
		var __str8124;
		var __str9125;
		var __ZL15stress_phonemes;
		var __ZZ13SetWordStressP10TranslatorPcPjiiE15consonant_types;
		var __ZZ13SetWordStressP10TranslatorPcPjiiE8guess_ru;
		var __ZZ13SetWordStressP10TranslatorPcPjiiE10guess_ru_v;
		var __ZZ13SetWordStressP10TranslatorPcPjiiE10guess_ru_t;
		var __ZZ14TranslateRulesP10TranslatorPcS1_iS1_iPjE9str_pause;
		var __str10126;
		var __str11127;
		var __ZL13diereses_list;
		var __ZZ14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TABE16word_replacement;
		var __str15131;
		var __str16132;
		var __ZZ11LookupFlagsP10TranslatorPKcE5flags;
		var __ZZ12RemoveEndingP10TranslatorPciS1_E6ending;
		var __ZZ12RemoveEndingP10TranslatorPciS1_E16add_e_exceptions;
		var __str17133;
		var __ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions;
		var __str18134;
		var __str19135;
		var __str20136;
		var __str21137;
		var __str22138;
		var __str23139;
		var __str24140;
		var __str25141;
		var __str27143;
		var __str28144;
		var __str29145;
		var __str30146;
		var __str31147;
		var __ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best;
		var __str32148;
		var __str34150;
		var _env_fall;
		var _env_rise;
		var _env_frise;
		var __ZL11env_r_frise;
		var __ZL10env_frise2;
		var __ZL12env_r_frise2;
		var __ZL12env_risefall;
		var __ZL13env_fallrise3;
		var __ZL13env_fallrise4;
		var __ZL9env_fall2;
		var __ZL9env_rise2;
		var __ZL16env_risefallrise;
		var _envelope_data;
		var __ZL18tone_nucleus_table;
		var _punctuation_to_tone;
		var _n_tunes;
		var _tunes;
		var __ZL12syllable_tab;
		var __ZL8no_tonic_b;
		var __ZL15tone_head_table;
		var __ZL10number_pre;
		var __ZL10tone_posn2;
		var __ZL9tone_posn;
		var __ZL11number_tail;
		var __ZL14tone_pitch_env;
		var __ZZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSiiE12continue_tab;
		var __ZL8min_drop;
		var __ZL7drops_0;
		var __ZL5oflow;
		var __ZL9oflow_emf;
		var __ZL10oflow_less;
		var __ZL12last_primary;
		var _namedata;
		var __ZL7f_input;
		var _p_textinput;
		var _p_wchar_input;
		var __ZL10ungot_word;
		var _count_characters;
		var __ZL10ssml_stack;
		var __ZL16current_voice_id;
		var _param_stack;
		var _param_defaults;
		var _walpha_tab;
		var __ZL10ungot_char;
		var __ZL12end_of_input_b;
		var __str167;
		var __str1168;
		var __str2169;
		var __str3170;
		var __str4171;
		var __str5172;
		var __str6173;
		var __str7174;
		var __str8175;
		var __str9176;
		var __str10177;
		var __str11178;
		var __str12179;
		var __str13180;
		var __str14181;
		var __str15182;
		var __str16183;
		var __str17184;
		var __str18185;
		var __str19186;
		var __str20187;
		var __str21188;
		var __str22189;
		var __str23190;
		var __str24191;
		var __str25192;
		var __str26193;
		var __str27194;
		var __str28195;
		var __str29196;
		var __str30197;
		var __str31198;
		var __ZL8ssmltags;
		var __ZL10n_namedata;
		var __ZL11namedata_ix;
		var __str32199;
		var __str33200;
		var __str34201;
		var __str35202;
		var __str36203;
		var __str37204;
		var __ZL18xml_char_mnemonics;
		var __ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E12ungot_string;
		var __ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix;
		var __ZL19clear_skipping_text_b;
		var __ZL11ungot_char2;
		var __ZL19ssml_ignore_l_angle;
		var __str38205;
		var __ZL10sayas_mode;
		var __ZL11ignore_text_b;
		var __ZL11punct_chars;
		var __ZL16punct_attributes;
		var __str41208;
		var __ZL12chars_ignore;
		var __str42209;
		var __ZL10audio_text_b;
		var __ZL17speech_parameters;
		var __ZL12n_ssml_stack;
		var __ZL13n_param_stack;
		var __ZL7xmlbase;
		var __ZZL14LookupCharNameP10TranslatoriiE3buf;
		var __str47214;
		var __str48215;
		var __str49216;
		var __ZZL13WordToString2jE3buf;
		var __str50217;
		var __str51218;
		var __str52219;
		var __str53220;
		var __str54221;
		var __str55222;
		var __str57224;
		var __str58225;
		var __str59226;
		var __str60227;
		var __ZZL14ProcessSsmlTagPwPcRiiiE10mnem_punct;
		var __str61228;
		var __str62229;
		var __str63230;
		var __ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals;
		var __str64231;
		var __str65232;
		var __str66233;
		var __ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as;
		var __str68235;
		var __str69236;
		var __str70237;
		var __str71238;
		var __str72239;
		var __ZZL14ProcessSsmlTagPwPcRiiiE17mnem_sayas_format;
		var __str73240;
		var __ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break;
		var __str74241;
		var __str75242;
		var __str76243;
		var __str77244;
		var __ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis;
		var __str78245;
		var __str79246;
		var __ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr;
		var __str80247;
		var __str81248;
		var __str82249;
		var __ZL22ignore_if_self_closing;
		var __str83250;
		var __str84251;
		var __str85252;
		var __str86253;
		var __str87254;
		var __ZZL14ProcessSsmlTagPwPcRiiiE23emphasis_to_pitch_range;
		var __ZZL14ProcessSsmlTagPwPcRiiiE18emphasis_to_volume;
		var __str88255;
		var __str89256;
		var __str90257;
		var __str91258;
		var __ZL11sayas_start;
		var __str92259;
		var __str94261;
		var __str95262;
		var __str96263;
		var __str97264;
		var __str98265;
		var __str99266;
		var __ZZL14ProcessSsmlTagPwPcRiiiE11break_value;
		var __str100267;
		var __str101268;
		var __str102269;
		var __ZZL18GetVoiceAttributesPwiE11mnem_gender;
		var __str105272;
		var __str106273;
		var __str108275;
		var __ZZL14LoadSoundFile2PKcE4slot;
		var __str111278;
		var __str112279;
		var __str113280;
		var __str114281;
		var __ZZL14ReplaceKeyNamePciRiE8keynames;
		var __ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume;
		var __str115282;
		var __str116283;
		var __str117;
		var __str118;
		var __str119;
		var __ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate;
		var __str120;
		var __str121;
		var __str122;
		var __str123;
		var __ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch;
		var __str124;
		var __str125;
		var __str126;
		var __str127;
		var __ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range;
		var __ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs;
		var __ZZL17ProcessParamStackPcRiE10cmd_letter;
		var __str128;
		var __ZZL16GetSsmlAttributePwPKcE5empty;
		var __ZZL4GetCvE6ungot2;
		var __ZZL4GetCvE5mask2;
		var __ZL6speed1;
		var __ZL6speed2;
		var __ZL6speed3;
		var __ZL12speed_lookup;
		var __ZL14wav_factor_350;
		var __ZL16pause_factor_350;
		var __ZZ11CalcLengthsP10TranslatorE14more_syllables;
		var __str294;
		var __ZL18letter_accents_0e0;
		var __ZL18letter_accents_250;
		var __ZL13non_ascii_tab;
		var __ZL11accents_tab;
		var __str297;
		var __str1298;
		var __str2299;
		var __ZZ12LookupLetterP10TranslatorjiPciE13single_letter;
		var __str5302;
		var __str6303;
		var __str7304;
		var __str8305;
		var __str9306;
		var __str10307;
		var __str11308;
		var __str12309;
		var __ZZ14TranslateRomanP10TranslatorPcS1_P8WORD_TABE12roman_values;
		var __str13310;
		var __str14311;
		var __ZZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABiE9str_pause;
		var __ZL14n_digit_lookup;
		var __ZL12digit_lookup;
		var __ZL14number_control;
		var __ZL23speak_missing_thousands;
		var __ZL11ph_ordinal2;
		var __str15312;
		var __str16313;
		var __str17314;
		var __str18315;
		var __str19316;
		var __str20317;
		var __str21318;
		var __str22319;
		var __str23320;
		var __str24321;
		var __str25322;
		var __str26323;
		var __str27324;
		var __str28325;
		var __str29326;
		var __str30327;
		var __str31328;
		var __str32329;
		var __str33330;
		var __str35332;
		var __str36333;
		var __str37334;
		var __str39336;
		var __str40337;
		var __str41338;
		var __str42339;
		var __str43340;
		var __str44341;
		var __str45342;
		var __str46343;
		var __str47344;
		var __str48345;
		var __str49346;
		var __str50347;
		var __str51348;
		var __str52349;
		var __str53350;
		var __str54351;
		var __str55352;
		var __str56353;
		var __str57354;
		var __str58355;
		var __str59356;
		var __str60357;
		var __str61358;
		var __str62359;
		var __str63360;
		var __str64361;
		var __str65362;
		var __str66363;
		var __str67364;
		var __str68365;
		var __str69366;
		var __str70367;
		var __str71368;
		var __str72369;
		var __str73370;
		var __str74371;
		var __str75372;
		var __str76373;
		var __str77374;
		var __str78375;
		var _option_mbrola_phonemes;
		var __ZL10mbrola_tab;
		var __ZL15mbr_name_prefix;
		var __str382;
		var __str1383;
		var __str2384;
		var __str3385;
		var __str4386;
		var __ZL14mbrola_control;
		var __ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix;
		var __ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE11embedded_ix;
		var __ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE10word_count;
		var __str6388;
		var __str8390;
		var __str9391;
		var __str10392;
		var __str11393;
		var __str12394;
		var __ZZ10MbrolaFilliiE9n_samples;
		var __ZZL10WritePitchiiiiiE6output;
		var __str13395;
		var __str14396;
		var __str15397;
		var __str16398;
		var __ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem;
		var __str399;
		var _version_string;
		var _version_phdata;
		var _option_device_number;
		var _f_logespeak;
		var _logging_type;
		var _n_phoneme_tab;
		var _current_phoneme_table;
		var _phoneme_tab;
		var _phoneme_tab_flags;
		var _phoneme_index;
		var _phondata_ptr;
		var _wavefile_data;
		var __ZL16phoneme_tab_data;
		var _n_phoneme_tables;
		var _phoneme_tab_list;
		var _phoneme_tab_number;
		var _wavefile_ix;
		var _wavefile_amp;
		var _wavefile_ix2;
		var _wavefile_amp2;
		var _seq_len_adjust;
		var _vowel_transition;
		var _vowel_transition0;
		var _vowel_transition1;
		var __str1412;
		var __str2413;
		var __str3414;
		var __str4415;
		var __ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf;
		var __str5416;
		var __str7418;
		var __str9420;
		var __str10421;
		var __str11422;
		var __str13424;
		var __str15426;
		var __str16427;
		var _this_ph_data;
		var __ZZL13NumInstnWordsPtE7n_words;
		var __ZZL18InterpretConditionP10TranslatoriP12PHONEME_LISTiE11ph_position;
		var __ZZL15StressConditionP10TranslatorP12PHONEME_LISTiiE15condition_level;
		var __str17428;
		var __str18429;
		var __str19430;
		var _n_phoneme_list;
		var _phoneme_list;
		var _mbrola_delay;
		var _mbrola_name;
		var _speed;
		var __ZL9new_voice;
		var _n_soundicon_tab;
		var _soundicon_tab;
		var __ZZ12WordToStringjE3buf;
		var __ZL14last_pitch_cmd;
		var __ZL12last_amp_cmd;
		var __ZL10last_frame;
		var __ZL15syllable_centre;
		var __ZZ18FormantTransition2P10frameref_tRijjP11PHONEME_TABiE10vcolouring;
		var __ZL10modn_flags;
		var __ZZ8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTiE9wave_flag_b;
		var __ZL13fmt_amplitude;
		var __ZL10last_wcmdq;
		var __ZL12pitch_length;
		var __ZL10amp_length;
		var __ZZ8GenerateP12PHONEME_LISTPiiE2ix;
		var __ZZ8GenerateP12PHONEME_LISTPiiE11embedded_ix;
		var __ZZ8GenerateP12PHONEME_LISTPiiE10word_count;
		var __ZZ8GenerateP12PHONEME_LISTPiiE8sourceix;
		var __ZL14syllable_start;
		var __ZL12syllable_end;
		var __ZL8timer_on_b;
		var __ZL6paused_b;
		var __ZZ15SpeakNextClauseP7__sFILEPKviE6f_text;
		var __ZZ15SpeakNextClauseP7__sFILEPKviE6p_text;
		var __str459;
		var __str1460;
		var __ZZL13set_frame_rmsP7frame_tiE8sqrt_tab;
		var __ZZL10AllocFramevE2ix;
		var __ZZL10AllocFramevE10frame_pool;
		var _translator;
		var _translator2;
		var __ZL20translator2_language;
		var _f_trans;
		var _option_tone2;
		var _option_tone_flags;
		var _option_phonemes;
		var _option_phoneme_events;
		var _option_quiet;
		var _option_endpause;
		var _option_capitals;
		var _option_punctuation;
		var _option_sayas;
		var _option_ssml;
		var _option_phoneme_input;
		var _option_phoneme_variants;
		var _option_wordgap;
		var _skip_sentences;
		var _skip_words;
		var _skip_characters;
		var _skip_marker;
		var _skipping_text;
		var _end_character_position;
		var _count_sentences;
		var _count_words;
		var _clause_start_char;
		var _clause_start_word;
		var _new_sentence;
		var _pre_pause;
		var _word_phonemes;
		var _n_ph_list2;
		var _ph_list2;
		var _option_punctlist;
		var _ctrl_embedded;
		var _option_multibyte;
		var _option_linelength;
		var _embedded_list;
		var _n_replace_phonemes;
		var _replace_phonemes;
		var __ZL10ISO_8859_1;
		var __ZL10ISO_8859_2;
		var __ZL10ISO_8859_3;
		var __ZL10ISO_8859_4;
		var __ZL10ISO_8859_5;
		var __ZL10ISO_8859_7;
		var __ZL10ISO_8859_9;
		var __ZL11ISO_8859_14;
		var __ZL6KOI8_R;
		var __ZL5ISCII;
		var _charsets;
		var __ZL15length_mod_tabs;
		var __ZZ7IsAlphajE18extra_indic_alphas;
		var __ZL8brackets;
		var __ZZ8utf8_outjPcE4code;
		var __ZZ8utf8_in2PiPKciE4mask;
		var __str543;
		var __str1544;
		var __ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_zz;
		var __ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_iz;
		var __ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_ss;
		var __str2545;
		var __str4547;
		var __str5548;
		var __str6549;
		var __ZL18any_stressed_words_b;
		var __ZZ15TranslateClauseP10TranslatorP7__sFILEPKvPiPPcE17voice_change_name;
		var __ZL11embedded_ix;
		var __ZL13embedded_read;
		var __ZL6source;
		var __str7550;
		var __str8551;
		var __ZL16max_clause_pause;
		var __ZL13option_sayas2;
		var __ZL18count_sayas_digits;
		var __ZL6breaks;
		var __ZL13word_emphasis_b;
		var __ZL15option_emphasis;
		var __ZL13embedded_flag_b;
		var __str9552;
		var __str10553;
		var __str11554;
		var __ZZL13TranslateCharP10TranslatorPcijjPiE20hangul_compatibility;
		var __ZZL14SubstituteCharP10TranslatorjjPiE11ignore_next_b;
		var __str12555;
		var __ZL14length_mods_en;
		var __ZL15length_mods_en0;
		var __ZL17length_mods_equal;
		var __str580;
		var __str1581;
		var __str2582;
		var __str3583;
		var __str4584;
		var __ZL14mbr_samplerate;
		var __ZL14mbr_voice_path;
		var __ZL10mbr_volume;
		var __ZL9mbr_state;
		var __ZL7mbr_pid;
		var __ZL10mbr_cmd_fd;
		var __str5585;
		var __ZL12mbr_audio_fd;
		var __ZL12mbr_errorbuf;
		var __ZL12mbr_error_fd;
		var __str7587;
		var __str8588;
		var __str9589;
		var __str10590;
		var __str11591;
		var __str12592;
		var __str13593;
		var __str14594;
		var __str15595;
		var __str16596;
		var __str17597;
		var __ZL21mbr_pending_data_head;
		var __ZL21mbr_pending_data_tail;
		var __str18598;
		var __str19599;
		var __str20600;
		var __str21601;
		var __ZL13mbr_proc_stat;
		var __str22602;
		var __str23603;
		var __str24604;
		var __str25605;
		var __str27607;
		var __str28608;
		var __str30610;
		var __str31611;
		var __str32612;
		var __str33613;
		var __str34614;
		var __str35615;
		var __ZZ15SetIndicLettersP10TranslatorE15dev_consonants2;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_fr;
		var __ZZ16SelectTranslatorPKcE14stress_amps_fr;
		var __ZZ16SelectTranslatorPKcE14stress_amps_sk;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_sk;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_ta;
		var __ZZ16SelectTranslatorPKcE14stress_amps_ta;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_af;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_bn;
		var __ZZ16SelectTranslatorPKcE14stress_amps_bn;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_cy;
		var __ZZ16SelectTranslatorPKcE14stress_amps_cy;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_da;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_de;
		var __ZZ16SelectTranslatorPKcE14stress_amps_de;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_en;
		var __str630;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_el;
		var __ZZ16SelectTranslatorPKcE14stress_amps_el;
		var __ZZ16SelectTranslatorPKcE9el_vowels;
		var __ZZ16SelectTranslatorPKcE10el_fvowels;
		var __ZZ16SelectTranslatorPKcE12el_voiceless;
		var __ZZ16SelectTranslatorPKcE13el_consonants;
		var __ZZ16SelectTranslatorPKcE18el_char_apostrophe;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_eo;
		var __ZZ16SelectTranslatorPKcE14stress_amps_eo;
		var __ZZ16SelectTranslatorPKcE18eo_char_apostrophe;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_es;
		var __ZZ16SelectTranslatorPKcE14stress_amps_es;
		var __ZZ16SelectTranslatorPKcE20ca_punct_within_word;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_eu;
		var __ZZ16SelectTranslatorPKcE14stress_amps_eu;
		var __ZZ16SelectTranslatorPKcE14stress_amps_fi;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_fi;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_hi;
		var __ZZ16SelectTranslatorPKcE14stress_amps_hi;
		var __ZZ16SelectTranslatorPKcE14stress_amps_hr;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_hr;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_sr;
		var __ZL22replace_cyrillic_latin;
		var __ZZ16SelectTranslatorPKcE14stress_amps_hu;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_hu;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_hy;
		var __ZZ16SelectTranslatorPKcE9hy_vowels;
		var __ZZ16SelectTranslatorPKcE13hy_consonants;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_id;
		var __ZZ16SelectTranslatorPKcE14stress_amps_id;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_is;
		var __ZZ16SelectTranslatorPKcE16is_lettergroup_B;
		var __str1631;
		var __str2632;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_it;
		var __ZZ16SelectTranslatorPKcE14stress_amps_it;
		var __ZZ16SelectTranslatorPKcE18stress_lengths_jbo;
		var __ZZ16SelectTranslatorPKcE21jbo_punct_within_word;
		var __ZZ16SelectTranslatorPKcE9ka_vowels;
		var __ZZ16SelectTranslatorPKcE13ka_consonants;
		var __ZZ16SelectTranslatorPKcE10ko_ivowels;
		var __ZZ16SelectTranslatorPKcE9ko_voiced;
		var __ZZ16SelectTranslatorPKcE14stress_amps_ku;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_ku;
		var __ZZ16SelectTranslatorPKcE14stress_amps_lv;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_lv;
		var __ZZ16SelectTranslatorPKcE15vowels_cyrillic;
		var __ZZ16SelectTranslatorPKcE14stress_amps_mk;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_mk;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_nl;
		var __str3633;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_no;
		var __ZZ16SelectTranslatorPKcE14stress_amps_om;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_om;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_pl;
		var __ZZ16SelectTranslatorPKcE14stress_amps_pl;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_pt;
		var __ZZ16SelectTranslatorPKcE14stress_amps_pt;
		var __str4634;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_ro;
		var __ZZ16SelectTranslatorPKcE14stress_amps_ro;
		var __str5635;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_sq;
		var __ZZ16SelectTranslatorPKcE14stress_amps_sq;
		var __ZZ16SelectTranslatorPKcE14stress_amps_sv;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_sv;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_sw;
		var __ZZ16SelectTranslatorPKcE14stress_amps_sw;
		var __ZZ16SelectTranslatorPKcE14stress_amps_tr;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_tr;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_vi;
		var __ZZ16SelectTranslatorPKcE14stress_amps_vi;
		var __ZZ16SelectTranslatorPKcE9vowels_vi;
		var __ZZ16SelectTranslatorPKcE17stress_lengths_zh;
		var __ZZ16SelectTranslatorPKcE14stress_amps_zh;
		var __ZZL18Translator_RussianP10TranslatorE14stress_amps_ru;
		var __ZZL18Translator_RussianP10TranslatorE17stress_lengths_ru;
		var __ZZL18Translator_RussianP10TranslatorE11ru_ivowels2;
		var __ZZL18SetCyrillicLettersP10TranslatorE9ru_vowels;
		var __ZZL18SetCyrillicLettersP10TranslatorE13ru_consonants;
		var __ZZL18SetCyrillicLettersP10TranslatorE7ru_soft;
		var __ZZL18SetCyrillicLettersP10TranslatorE7ru_hard;
		var __ZZL18SetCyrillicLettersP10TranslatorE10ru_nothard;
		var __ZZL18SetCyrillicLettersP10TranslatorE9ru_voiced;
		var __ZZL18SetCyrillicLettersP10TranslatorE10ru_ivowels;
		var __ZL8pairs_ru;
		var __ZZL13NewTranslatorvE12stress_amps2;
		var __ZZL13NewTranslatorvE15stress_lengths2;
		var __ZZL13NewTranslatorvE13empty_wstring;
		var __ZZL13NewTranslatorvE13punct_in_word;
		var __ZZL13NewTranslatorvE13default_tunes;
		var __str6636;
		var __str7637;
		var __str8638;
		var __str9639;
		var __str10640;
		var __str11641;
		var __str12642;
		var __str13643;
		var __str646;
		var __str1647;
		var __str2648;
		var _genders;
		var _tone_points;
		var _formant_rate;
		var _voice_selected;
		var __str3653;
		var __str4654;
		var __ZL11options_tab;
		var __str5655;
		var __str6656;
		var __str7657;
		var __str8658;
		var __str9659;
		var __str10660;
		var __str11661;
		var __str12662;
		var __str13663;
		var __str14664;
		var __str15665;
		var __str16666;
		var __str17667;
		var __str18668;
		var __str19669;
		var __str20670;
		var __str21671;
		var __str22672;
		var __str23673;
		var __str24674;
		var __str25675;
		var __str26676;
		var __str27677;
		var __str28678;
		var __str29679;
		var __str30680;
		var __str31681;
		var __str32682;
		var __str33683;
		var __str34684;
		var __str35685;
		var __str36686;
		var __str37687;
		var __str38688;
		var __str39689;
		var __str40690;
		var __str41691;
		var __str42692;
		var __str43693;
		var __ZL11keyword_tab;
		var __ZL15variants_either;
		var __ZL13variants_male;
		var __ZL15variants_female;
		var _variant_lists;
		var __ZL9voicedata;
		var _voice;
		var __str44696;
		var __ZZ10VoiceResetiE15default_heights;
		var __ZZ10VoiceResetiE14default_widths;
		var __ZZ10VoiceResetiE13breath_widths;
		var __ZL18formant_rate_22050;
		var __ZZ9LoadVoicePKciE16voice_identifier;
		var __ZZ9LoadVoicePKciE10voice_name;
		var __ZZ9LoadVoicePKciE15voice_languages;
		var __str45697;
		var __str46698;
		var __str47699;
		var __str48700;
		var __str49701;
		var __str50702;
		var __str51703;
		var __str52704;
		var __str53705;
		var __str54706;
		var __str55707;
		var __str56708;
		var __str57709;
		var __str58710;
		var __str59711;
		var __str60712;
		var __str61713;
		var __str62714;
		var __str63715;
		var __str64716;
		var __str65717;
		var __str66718;
		var __str67719;
		var __str68720;
		var __str69721;
		var __ZL13n_voices_list;
		var __ZL11voices_list;
		var __str70722;
		var __ZZ11SelectVoiceP12espeak_VOICEPiE14voice_variants;
		var __ZZ11SelectVoiceP12espeak_VOICEPiE8voice_id;
		var __ZZ11SelectVoiceP12espeak_VOICEPiE3buf;
		var __str71723;
		var __ZZ14SetVoiceByNamePKcE3buf;
		var __ZZ17espeak_ListVoicesE6voices;
		var __str72724;
		var __ZL15len_path_voices;
		var __str73725;
		var __str74726;
		var __str75727;
		var __ZZL23ExtractVoiceVariantNamePciE12variant_name;
		var __str76728;
		var __str77729;
		var __str78730;
		var __str79731;
		var __str80732;
		var __str81733;
		var __str82734;
		var _sin_tab;
		var _wvoice;
		var _f_log;
		var _option_waveout;
		var _option_log_frames;
		var _embedded_value;
		var _samplerate;
		var _samplerate_native;
		var __ZL5peaks;
		var _echo_head;
		var _echo_tail;
		var _echo_amp;
		var _echo_buf;
		var __ZL7rbreath;
		var _wdata;
		var __ZL13amplitude_env;
		var _out_ptr;
		var _out_start;
		var _out_end;
		var _outbuf_size;
		var _wcmdq;
		var _wcmdq_head;
		var _wcmdq_tail;
		var _embedded_default;
		var _current_source_index;
		var __ZL18sonicSpeedupStream;
		var _sonicSpeed;
		var _pitch_adjust_tab;
		var _pk_shape1;
		var __ZL16PHASE_INC_FACTOR;
		var __ZL11Flutter_inc;
		var __ZL11samplecount;
		var __ZL8nsamples;
		var __ZL9wavephase;
		var __ZL12wavemult_max;
		var __ZL15wavemult_offset;
		var __ZL8wavemult;
		var __ZL9pk_shape2;
		var __ZL8pk_shape;
		var __ZZ12GetAmplitudevE12amp_emphasis;
		var __ZL17general_amplitude;
		var __ZL11peak_height;
		var __ZL13peak_harmonic;
		var __ZL16option_harmonic1_b;
		var __ZL9harmspect;
		var __ZL8harm_inc;
		var __ZL10minus_pi_t;
		var __ZL8two_pi_t;
		var __ZZ7WavegenvE4maxh;
		var __ZZ7WavegenvE5maxh2;
		var __ZZ7WavegenvE3agc;
		var __ZZ7WavegenvE13h_switch_sign;
		var __ZZ7WavegenvE11cycle_count;
		var __ZZ7WavegenvE10amplitude2;
		var __ZL8end_wave_b;
		var __ZL7hswitch;
		var __ZL6hspect;
		var __ZL8phaseinc;
		var __ZL13cycle_samples;
		var __ZL9hf_factor;
		var __ZL6cbytes;
		var __ZL12glottal_flag;
		var __ZL14glottal_reduce;
		var __ZL6amp_ix;
		var __ZL15modulation_type;
		var __ZL14modulation_tab;
		var __ZL7voicing;
		var __ZL12embedded_max;
		var __ZZ15WavegenSetVoiceP7voice_tE2v2;
		var __ZL13consonant_amp;
		var __ZL11flutter_amp;
		var __ZZ8SetSynthiiP7frame_tS0_P7voice_tE19glottal_reduce_tab1;
		var __ZZ8SetSynthiiP7frame_tS0_P7voice_tE19glottal_reduce_tab2;
		var __ZL17samplecount_start;
		var __ZZ12WavegenFill2iE6resume;
		var __ZZ12WavegenFill2iE13echo_complete;
		var __ZL11echo_length;
		var __ZL7amp_inc;
		var __ZZL8PlayWaveiiPhiiE9n_samples;
		var __ZZL8PlayWaveiiPhiiE2ix;
		var __ZZL11PlaySilenceiiE9n_samples;
		var __ZZL17AdvanceParametersvE10Flutter_ix;
		var __ZL11Flutter_tab;
		var _pause_phonemes;
		var __ZZ15MakePhonemeListP10TranslatoriiE12types_double;
		var __ZL8kt_frame;
		var __ZL10kt_globals;
		var __ZL5peaks801;
		var __ZL12sample_count;
		var __ZL8nsamples802;
		var __ZL6klattp;
		var __ZL10klattp_inc;
		var __ZL7klattp1;
		var __ZL8end_wave803;
		var __ZZ14SetSynth_KlattiiP7frame_tS0_P7voice_tiE7prev_fr;
		var __ZL13scale_wav_tab;
		var __ZZ9KlattInitvE15natural_samples;
		var __ZZ9KlattInitvE10formant_hz;
		var __ZZ9KlattInitvE9bandwidth;
		var __ZZ9KlattInitvE12parallel_amp;
		var __ZZ9KlattInitvE11parallel_bw;
		var __ZZL7parwaveP13klatt_frame_tE5noise;
		var __ZZL7parwaveP13klatt_frame_tE5voice;
		var __ZZL7parwaveP13klatt_frame_tE5vlast;
		var __ZZL7parwaveP13klatt_frame_tE8glotlast;
		var __ZZL7parwaveP13klatt_frame_tE5sourc;
		var __ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew;
		var __ZZL21pitch_synch_par_resetP13klatt_frame_tE2B0;
		var __ZZL7DBtoLINlE8amptable;
		var __ZZL14natural_sourcevE5vwave;
		var __ZZL16impulsive_sourcevE7doublet;
		var __ZZL16impulsive_sourcevE5vwave;
		var __ZZL9gen_noisedE5nlast;
		var __ZZL7flutterP13klatt_frame_tE10time_count;
		var __ZZL10frame_initP13klatt_frame_tE14amp_par_factor;
		var __str810;
		var __str1811;
		var _optarg;
		var _optind;
		var _opterr;
		var _optopt;
		var __ZL8optwhere;
		var __str831;
		var __str1832;
		var __str2833;
		var __str3834;
		var __str4835;
		var __str5836;
		var __str6837;
		var _llvm_dbg_declare;
		var ERRNO_CODES = {
			E2BIG: 7,
			EACCES: 13,
			EADDRINUSE: 98,
			EADDRNOTAVAIL: 99,
			EAFNOSUPPORT: 97,
			EAGAIN: 11,
			EALREADY: 114,
			EBADF: 9,
			EBADMSG: 74,
			EBUSY: 16,
			ECANCELED: 125,
			ECHILD: 10,
			ECONNABORTED: 103,
			ECONNREFUSED: 111,
			ECONNRESET: 104,
			EDEADLK: 35,
			EDESTADDRREQ: 89,
			EDOM: 33,
			EDQUOT: 122,
			EEXIST: 17,
			EFAULT: 14,
			EFBIG: 27,
			EHOSTUNREACH: 113,
			EIDRM: 43,
			EILSEQ: 84,
			EINPROGRESS: 115,
			EINTR: 4,
			EINVAL: 22,
			EIO: 5,
			EISCONN: 106,
			EISDIR: 21,
			ELOOP: 40,
			EMFILE: 24,
			EMLINK: 31,
			EMSGSIZE: 90,
			EMULTIHOP: 72,
			ENAMETOOLONG: 36,
			ENETDOWN: 100,
			ENETRESET: 102,
			ENETUNREACH: 101,
			ENFILE: 23,
			ENOBUFS: 105,
			ENODATA: 61,
			ENODEV: 19,
			ENOENT: 2,
			ENOEXEC: 8,
			ENOLCK: 37,
			ENOLINK: 67,
			ENOMEM: 12,
			ENOMSG: 42,
			ENOPROTOOPT: 92,
			ENOSPC: 28,
			ENOSR: 63,
			ENOSTR: 60,
			ENOSYS: 38,
			ENOTCONN: 107,
			ENOTDIR: 20,
			ENOTEMPTY: 39,
			ENOTRECOVERABLE: 131,
			ENOTSOCK: 88,
			ENOTSUP: 95,
			ENOTTY: 25,
			ENXIO: 6,
			EOVERFLOW: 75,
			EOWNERDEAD: 130,
			EPERM: 1,
			EPIPE: 32,
			EPROTO: 71,
			EPROTONOSUPPORT: 93,
			EPROTOTYPE: 91,
			ERANGE: 34,
			EROFS: 30,
			ESPIPE: 29,
			ESRCH: 3,
			ESTALE: 116,
			ETIME: 62,
			ETIMEDOUT: 110,
			ETXTBSY: 26,
			EWOULDBLOCK: 11,
			EXDEV: 18
		};

		function ___setErrNo(value) {
			if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
			HEAP32[((___setErrNo.ret) >> 2)] = value;
			return value;
		}
		var _stdin = 0;
		var _stdout = 0;
		var _stderr = 0;
		var __impure_ptr = 0;
		var FS = {
			currentPath: "/",
			nextInode: 2,
			streams: [null],
			ignorePermissions: true,
			absolutePath: function (relative, base) {
				if (typeof relative !== 'string') return null;
				if (typeof base === 'undefined') base = FS.currentPath;
				if (relative && relative[0] == '/') base = '';
				var full = base + '/' + relative;
				var parts = full.split('/').reverse();
				var absolute = [''];
				while (parts.length) {
					var part = parts.pop();
					if (part == '' || part == '.') {} else if (part == '..') {
						if (absolute.length > 1) absolute.pop();
					} else {
						absolute.push(part);
					}
				}
				return absolute.length == 1 ? '/' : absolute.join('/');
			},
			analyzePath: function (path, dontResolveLastLink, linksVisited) {
				var ret = {
					isRoot: false,
					exists: false,
					error: 0,
					name: null,
					path: null,
					object: null,
					parentExists: false,
					parentPath: null,
					parentObject: null
				};
				path = FS.absolutePath(path);
				if (path == '/') {
					ret.isRoot = true;
					ret.exists = ret.parentExists = true;
					ret.name = '/';
					ret.path = ret.parentPath = '/';
					ret.object = ret.parentObject = FS.root;
				} else if (path !== null) {
					linksVisited = linksVisited || 0;
					path = path.slice(1).split('/');
					var current = FS.root;
					var traversed = [''];
					while (path.length) {
						if (path.length == 1 && current.isFolder) {
							ret.parentExists = true;
							ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
							ret.parentObject = current;
							ret.name = path[0];
						}
						var target = path.shift();
						if (!current.isFolder) {
							ret.error = ERRNO_CODES.ENOTDIR;
							break;
						} else if (!current.read) {
							ret.error = ERRNO_CODES.EACCES;
							break;
						} else if (!current.contents.hasOwnProperty(target)) {
							ret.error = ERRNO_CODES.ENOENT;
							break;
						}
						current = current.contents[target];
						if (current.link && !(dontResolveLastLink && path.length == 0)) {
							if (linksVisited > 40) {
								ret.error = ERRNO_CODES.ELOOP;
								break;
							}
							var link = FS.absolutePath(current.link, traversed.join('/'));
							return FS.analyzePath([link].concat(path).join('/'), dontResolveLastLink, linksVisited + 1);
						}
						traversed.push(target);
						if (path.length == 0) {
							ret.exists = true;
							ret.path = traversed.join('/');
							ret.object = current;
						}
					}
					return ret;
				}
				return ret;
			},
			findObject: function (path, dontResolveLastLink) {
				FS.ensureRoot();
				var ret = FS.analyzePath(path, dontResolveLastLink);
				if (ret.exists) {
					return ret.object;
				} else {
					___setErrNo(ret.error);
					return null;
				}
			},
			createObject: function (parent, name, properties, canRead, canWrite) {
				if (!parent) parent = '/';
				if (typeof parent === 'string') parent = FS.findObject(parent);
				if (!parent) {
					___setErrNo(ERRNO_CODES.EACCES);
					throw new Error('Parent path must exist.');
				}
				if (!parent.isFolder) {
					___setErrNo(ERRNO_CODES.ENOTDIR);
					throw new Error('Parent must be a folder.');
				}
				if (!parent.write && !FS.ignorePermissions) {
					___setErrNo(ERRNO_CODES.EACCES);
					throw new Error('Parent folder must be writeable.');
				}
				if (!name || name == '.' || name == '..') {
					___setErrNo(ERRNO_CODES.ENOENT);
					throw new Error('Name must not be empty.');
				}
				if (parent.contents.hasOwnProperty(name)) {
					___setErrNo(ERRNO_CODES.EEXIST);
					throw new Error("Can't overwrite object.");
				}
				parent.contents[name] = {
					read: (typeof canRead === 'undefined') ? true : canRead,
					write: (typeof canWrite === 'undefined') ? false : canWrite,
					timestamp: Date.now(),
					inodeNumber: FS.nextInode++
				};
				for (var key in properties) {
					if (properties.hasOwnProperty(key)) {
						parent.contents[name][key] = properties[key];
					}
				}
				return parent.contents[name];
			},
			createFolder: function (parent, name, canRead, canWrite) {
				var properties = {
					isFolder: true,
					isDevice: false,
					contents: {}
				};
				return FS.createObject(parent, name, properties, canRead, canWrite);
			},
			createPath: function (parent, path, canRead, canWrite) {
				var current = FS.findObject(parent);
				if (current === null) throw new Error('Invalid parent.');
				path = path.split('/').reverse();
				while (path.length) {
					var part = path.pop();
					if (!part) continue;
					if (!current.contents.hasOwnProperty(part)) {
						FS.createFolder(current, part, canRead, canWrite);
					}
					current = current.contents[part];
				}
				return current;
			},
			createFile: function (parent, name, properties, canRead, canWrite) {
				properties.isFolder = false;
				return FS.createObject(parent, name, properties, canRead, canWrite);
			},
			createDataFile: function (parent, name, data, canRead, canWrite) {
				if (typeof data === 'string') {
					var dataArray = [];
					for (var i = 0; i < data.length; i++) dataArray.push(data.charCodeAt(i));
					data = dataArray;
				}
				var properties = {
					isDevice: false,
					contents: data
				};
				return FS.createFile(parent, name, properties, canRead, canWrite);
			},
			createLazyFile: function (parent, name, url, canRead, canWrite) {
				var properties = {
					isDevice: false,
					url: url
				};
				return FS.createFile(parent, name, properties, canRead, canWrite);
			},
			createLink: function (parent, name, target, canRead, canWrite) {
				var properties = {
					isDevice: false,
					link: target
				};
				return FS.createFile(parent, name, properties, canRead, canWrite);
			},
			createDevice: function (parent, name, input, output) {
				if (!(input || output)) {
					throw new Error('A device must have at least one callback defined.');
				}
				var ops = {
					isDevice: true,
					input: input,
					output: output
				};
				return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
			},
			forceLoadFile: function (obj) {
				if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
				___setErrNo(ERRNO_CODES.EIO);
				return false;
			},
			ensureRoot: function () {
				if (FS.root) return;
				FS.root = {
					read: true,
					write: false,
					isFolder: true,
					isDevice: false,
					timestamp: Date.now(),
					inodeNumber: 1,
					contents: {}
				};
			},
			init: function (input, output, error) {
				if (FS.init.initialized) return;
				FS.init.initialized = true;
				FS.ensureRoot();
				if (!input) input = function () {
					if (!input.cache || !input.cache.length) {
						var result;
						if (typeof readline == 'function') {
							result = readline();
						}
						if (!result) result = '';
						input.cache = intArrayFromString(result + '\n', true);
						input.cache = intArrayFromString('\n', true);
					}
					return input.cache.shift();
				};
				if (!output) output = function (val) {
					if (val === null || val === '\n'.charCodeAt(0)) {
						output.printer(output.buffer.join(''));
						output.buffer = [];
					} else {
						output.buffer.push(String.fromCharCode(val));
					}
				};
				if (!output.printer) output.printer = vprint;
				if (!output.buffer) output.buffer = [];
				if (!error) error = output;
				FS.createFolder('/', 'tmp', true, true);
				var devFolder = FS.createFolder('/', 'dev', true, false);
				var stdin = FS.createDevice(devFolder, 'stdin', input);
				var stdout = FS.createDevice(devFolder, 'stdout', null, output);
				var stderr = FS.createDevice(devFolder, 'stderr', null, error);
				FS.createDevice(devFolder, 'tty', input, output);
				FS.streams[1] = {
					path: '/dev/stdin',
					object: stdin,
					position: 0,
					isRead: true,
					isWrite: false,
					isAppend: false,
					error: false,
					eof: false,
					ungotten: []
				};
				FS.streams[2] = {
					path: '/dev/stdout',
					object: stdout,
					position: 0,
					isRead: false,
					isWrite: true,
					isAppend: false,
					error: false,
					eof: false,
					ungotten: []
				};
				FS.streams[3] = {
					path: '/dev/stderr',
					object: stderr,
					position: 0,
					isRead: false,
					isWrite: true,
					isAppend: false,
					error: false,
					eof: false,
					ungotten: []
				};
				_stdin = allocate([1], 'void*', ALLOC_STATIC);
				_stdout = allocate([2], 'void*', ALLOC_STATIC);
				_stderr = allocate([3], 'void*', ALLOC_STATIC);
				FS.streams[_stdin] = FS.streams[1];
				FS.streams[_stdout] = FS.streams[2];
				FS.streams[_stderr] = FS.streams[3];
				__impure_ptr = allocate([allocate([0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0], 'void*', ALLOC_STATIC)], 'void*', ALLOC_STATIC);
				FS.ignorePermissions = false;
			},
			quit: function () {
				try {
					if (FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
					if (FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
				} catch (e) {
					recoverFromFSError(e);
				}
			}
		};
		var ___stat_struct_layout = {
			__size__: 80,
			st_dev: 0,
			st_ino: 8,
			st_mode: 12,
			st_nlink: 16,
			st_uid: 20,
			st_gid: 24,
			st_rdev: 28,
			st_size: 36,
			st_atime: 40,
			st_spare1: 44,
			st_mtime: 48,
			st_spare2: 52,
			st_ctime: 56,
			st_spare3: 60,
			st_blksize: 64,
			st_blocks: 68,
			st_spare4: 72
		};

		function _stat(path, buf, dontResolveLastLink) {
			var obj = FS.findObject(Pointer_stringify(path), dontResolveLastLink);
			if (obj === null || !FS.forceLoadFile(obj)) return -1;
			var offsets = ___stat_struct_layout;
			HEAP32[((buf + offsets.st_nlink) >> 2)] = 1;
			HEAP32[((buf + offsets.st_uid) >> 2)] = 0;
			HEAP32[((buf + offsets.st_gid) >> 2)] = 0;
			HEAP32[((buf + offsets.st_blksize) >> 2)] = 4096;
			HEAP32[((buf + offsets.st_ino) >> 2)] = obj.inodeNumber;
			var time = Math.floor(obj.timestamp / 1000);
			if (typeof offsets.st_atime === 'undefined') {
				offsets.st_atime = offsets.st_atim.tv_sec;
				offsets.st_mtime = offsets.st_mtim.tv_sec;
				offsets.st_ctime = offsets.st_ctim.tv_sec;
				var nanosec = (obj.timestamp % 1000) * 1000;
				HEAP32[((buf + offsets.st_atim.tv_nsec) >> 2)] = nanosec;
				HEAP32[((buf + offsets.st_mtim.tv_nsec) >> 2)] = nanosec;
				HEAP32[((buf + offsets.st_ctim.tv_nsec) >> 2)] = nanosec;
			}
			HEAP32[((buf + offsets.st_atime) >> 2)] = time;
			HEAP32[((buf + offsets.st_mtime) >> 2)] = time;
			HEAP32[((buf + offsets.st_ctime) >> 2)] = time;
			var mode = 0;
			var size = 0;
			var blocks = 0;
			var dev = 0;
			var rdev = 0;
			if (obj.isDevice) {
				dev = rdev = obj.inodeNumber;
				size = blocks = 0;
				mode = 0x2000;
			} else {
				dev = 1;
				rdev = 0;
				if (obj.isFolder) {
					size = 4096;
					blocks = 1;
					mode = 0x4000;
				} else {
					var data = obj.contents || obj.link;
					size = data.length;
					blocks = Math.ceil(data.length / 4096);
					mode = (typeof obj.link === 'undefined') ? 0x8000 : 0xA000;
				}
			}
			HEAP32[((buf + offsets.st_dev) >> 2)] = dev;
			HEAP32[((buf + offsets.st_rdev) >> 2)] = rdev;
			HEAP32[((buf + offsets.st_size) >> 2)] = size;
			HEAP32[((buf + offsets.st_blocks) >> 2)] = blocks;
			if (obj.read) mode |= 0x16D;
			if (obj.write) mode |= 0x92;
			HEAP32[((buf + offsets.st_mode) >> 2)] = mode;
			return 0;
		}

		function _malloc(size) {
			var ret = STATICTOP;
			STATICTOP += size;
			STATICTOP = Math.ceil((STATICTOP) / 4) * 4;;
			return ret;
		}

		function _pwrite(fildes, buf, nbyte, offset) {
			var stream = FS.streams[fildes];
			if (!stream || stream.object.isDevice) {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			} else if (!stream.isWrite) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else if (stream.object.isFolder) {
				___setErrNo(ERRNO_CODES.EISDIR);
				return -1;
			} else if (nbyte < 0 || offset < 0) {
				___setErrNo(ERRNO_CODES.EINVAL);
				return -1;
			} else {
				var contents = stream.object.contents;
				while (contents.length < offset) contents.push(0);
				for (var i = 0; i < nbyte; i++) {
					contents[offset + i] = HEAP8[(buf + i)];
				}
				stream.object.timestamp = Date.now();
				return i;
			}
		}

		function _write(fildes, buf, nbyte) {
			var stream = FS.streams[fildes];
			if (!stream) {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			} else if (!stream.isWrite) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else if (nbyte < 0) {
				___setErrNo(ERRNO_CODES.EINVAL);
				return -1;
			} else {
				if (stream.object.isDevice) {
					if (stream.object.output) {
						for (var i = 0; i < nbyte; i++) {
							try {
								stream.object.output(HEAP8[(buf + i)]);
							} catch (e) {
								___setErrNo(ERRNO_CODES.EIO);
								return -1;
							}
						}
						stream.object.timestamp = Date.now();
						return i;
					} else {
						___setErrNo(ERRNO_CODES.ENXIO);
						return -1;
					}
				} else {
					var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
					if (bytesWritten != -1) stream.position += bytesWritten;
					return bytesWritten;
				}
			}
		}

		function _fwrite(ptr, size, nitems, stream) {
			var bytesToWrite = nitems * size;
			if (bytesToWrite == 0) return 0;
			var bytesWritten = _write(stream, ptr, bytesToWrite);
			if (bytesWritten == -1) {
				if (FS.streams[stream]) FS.streams[stream].error = true;
				return -1;
			} else {
				return Math.floor(bytesWritten / size);
			}
		}

		function __formatString(format, varargs) {
			var textIndex = format;
			var argIndex = 0;
			var getNextArg = function (type) {
				var ret;
				if (type === 'float' || type === 'double') {
					ret = HEAPF32[((varargs + argIndex) >> 2)];
				} else {
					ret = HEAP32[((varargs + argIndex) >> 2)];
				}
				argIndex += Runtime.getNativeFieldSize(type);
				return Number(ret);
			};
			var ret = [];
			var curr, next, currArg;
			while (1) {
				var startTextIndex = textIndex;
				curr = HEAP8[(textIndex)];
				if (curr === 0) break;
				next = HEAP8[(textIndex + 1)];
				if (curr == '%'.charCodeAt(0)) {
					var flagAlwaysSigned = false;
					var flagLeftAlign = false;
					var flagAlternative = false;
					var flagZeroPad = false;
					flagsLoop: while (1) {
						switch (next) {
							case '+'.charCodeAt(0):
								flagAlwaysSigned = true;
								break;
							case '-'.charCodeAt(0):
								flagLeftAlign = true;
								break;
							case '#'.charCodeAt(0):
								flagAlternative = true;
								break;
							case '0'.charCodeAt(0):
								if (flagZeroPad) {
									break flagsLoop;
								} else {
									flagZeroPad = true;
									break;
								}
							default:
								break flagsLoop;
						}
						textIndex++;
						next = HEAP8[(textIndex + 1)];
					}
					var width = 0;
					if (next == '*'.charCodeAt(0)) {
						width = getNextArg('i32');
						textIndex++;
						next = HEAP8[(textIndex + 1)];
					} else {
						while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
							width = width * 10 + (next - '0'.charCodeAt(0));
							textIndex++;
							next = HEAP8[(textIndex + 1)];
						}
					}
					var precisionSet = false;
					if (next == '.'.charCodeAt(0)) {
						var precision = 0;
						precisionSet = true;
						textIndex++;
						next = HEAP8[(textIndex + 1)];
						if (next == '*'.charCodeAt(0)) {
							precision = getNextArg('i32');
							textIndex++;
						} else {
							while (1) {
								var precisionChr = HEAP8[(textIndex + 1)];
								if (precisionChr < '0'.charCodeAt(0) || precisionChr > '9'.charCodeAt(0)) break;
								precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
								textIndex++;
							}
						}
						next = HEAP8[(textIndex + 1)];
					} else {
						var precision = 6;
					}
					var argSize;
					switch (String.fromCharCode(next)) {
						case 'h':
							var nextNext = HEAP8[(textIndex + 2)];
							if (nextNext == 'h'.charCodeAt(0)) {
								textIndex++;
								argSize = 1;
							} else {
								argSize = 2;
							}
							break;
						case 'l':
							var nextNext = HEAP8[(textIndex + 2)];
							if (nextNext == 'l'.charCodeAt(0)) {
								textIndex++;
								argSize = 8;
							} else {
								argSize = 4;
							}
							break;
						case 'L':
						case 'q':
						case 'j':
							argSize = 8;
							break;
						case 'z':
						case 't':
						case 'I':
							argSize = 4;
							break;
						default:
							argSize = undefined;
					}
					if (typeof argSize !== 'undefined') textIndex++;
					next = HEAP8[(textIndex + 1)];
					if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
						var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
						argSize = argSize || 4;
						var currArg = getNextArg('i' + (argSize * 8));
						if (argSize <= 4) {
							var limit = Math.pow(256, argSize) - 1;
							currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
						}
						var currAbsArg = Math.abs(currArg);
						var argText;
						var prefix = '';
						if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
							argText = reSign(currArg, 8 * argSize, 1).toString(10);
						} else if (next == 'u'.charCodeAt(0)) {
							argText = unSign(currArg, 8 * argSize, 1).toString(10);
							currArg = Math.abs(currArg);
						} else if (next == 'o'.charCodeAt(0)) {
							argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
						} else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
							prefix = flagAlternative ? '0x' : '';
							if (currArg < 0) {
								currArg = -currArg;
								argText = (currAbsArg - 1).toString(16);
								var buffer = [];
								for (var i = 0; i < argText.length; i++) {
									buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
								}
								argText = buffer.join('');
								while (argText.length < argSize * 2) argText = 'f' + argText;
							} else {
								argText = currAbsArg.toString(16);
							}
							if (next == 'X'.charCodeAt(0)) {
								prefix = prefix.toUpperCase();
								argText = argText.toUpperCase();
							}
						} else if (next == 'p'.charCodeAt(0)) {
							if (currAbsArg === 0) {
								argText = '(nil)';
							} else {
								prefix = '0x';
								argText = currAbsArg.toString(16);
							}
						}
						if (precisionSet) {
							while (argText.length < precision) {
								argText = '0' + argText;
							}
						}
						if (flagAlwaysSigned) {
							if (currArg < 0) {
								prefix = '-' + prefix;
							} else {
								prefix = '+' + prefix;
							}
						}
						while (prefix.length + argText.length < width) {
							if (flagLeftAlign) {
								argText += ' ';
							} else {
								if (flagZeroPad) {
									argText = '0' + argText;
								} else {
									prefix = ' ' + prefix;
								}
							}
						}
						argText = prefix + argText;
						argText.split('').forEach(function (chr) {
							ret.push(chr.charCodeAt(0));
						});
					} else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
						var currArg = getNextArg(argSize === 4 ? 'float' : 'double');
						var argText;
						if (isNaN(currArg)) {
							argText = 'nan';
							flagZeroPad = false;
						} else if (!isFinite(currArg)) {
							argText = (currArg < 0 ? '-' : '') + 'inf';
							flagZeroPad = false;
						} else {
							var isGeneral = false;
							var effectivePrecision = Math.min(precision, 20);
							if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
								isGeneral = true;
								precision = precision || 1;
								var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
								if (precision > exponent && exponent >= -4) {
									next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
									precision -= exponent + 1;
								} else {
									next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
									precision--;
								}
								effectivePrecision = Math.min(precision, 20);
							}
							if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
								argText = currArg.toExponential(effectivePrecision);
								if (/[eE][-+]\d$/.test(argText)) {
									argText = argText.slice(0, -1) + '0' + argText.slice(-1);
								}
							} else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
								argText = currArg.toFixed(effectivePrecision);
							}
							var parts = argText.split('e');
							if (isGeneral && !flagAlternative) {
								while (parts[0].length > 1 && parts[0].indexOf('.') != -1 && (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
									parts[0] = parts[0].slice(0, -1);
								}
							} else {
								if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
								while (precision > effectivePrecision++) parts[0] += '0';
							}
							argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
							if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
							if (flagAlwaysSigned && currArg >= 0) {
								argText = '+' + argText;
							}
						}
						while (argText.length < width) {
							if (flagLeftAlign) {
								argText += ' ';
							} else {
								if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
									argText = argText[0] + '0' + argText.slice(1);
								} else {
									argText = (flagZeroPad ? '0' : ' ') + argText;
								}
							}
						}
						if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
						argText.split('').forEach(function (chr) {
							ret.push(chr.charCodeAt(0));
						});
					} else if (next == 's'.charCodeAt(0)) {
						var arg = getNextArg('i8*');
						var copiedString;
						if (arg) {
							copiedString = String_copy(arg);
							if (precisionSet && copiedString.length > precision) {
								copiedString = copiedString.slice(0, precision);
							}
						} else {
							copiedString = intArrayFromString('(null)', true);
						}
						if (!flagLeftAlign) {
							while (copiedString.length < width--) {
								ret.push(' '.charCodeAt(0));
							}
						}
						ret = ret.concat(copiedString);
						if (flagLeftAlign) {
							while (copiedString.length < width--) {
								ret.push(' '.charCodeAt(0));
							}
						}
					} else if (next == 'c'.charCodeAt(0)) {
						if (flagLeftAlign) ret.push(getNextArg('i8'));
						while (--width > 0) {
							ret.push(' '.charCodeAt(0));
						}
						if (!flagLeftAlign) ret.push(getNextArg('i8'));
					} else if (next == 'n'.charCodeAt(0)) {
						var ptr = getNextArg('i32*');
						HEAP32[((ptr) >> 2)] = ret.length;
					} else if (next == '%'.charCodeAt(0)) {
						ret.push(curr);
					} else {
						for (var i = startTextIndex; i < textIndex + 2; i++) {
							ret.push(HEAP8[(i)]);
						}
					}
					textIndex += 2;
				} else {
					ret.push(curr);
					textIndex += 1;
				}
			}
			return ret;
		}

		function _fprintf(stream, format, varargs) {
			var result = __formatString(format, varargs);
			var stack = Runtime.stackSave();
			var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
			Runtime.stackRestore(stack);
			return ret;
		}

		function _free() {}

		function _strlen(ptr) {
			return String_len(ptr);
		}

		function _strcpy(pdest, psrc) {
			var i = 0;
			do {
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = psrc + i;
				$dest$ = pdest + i;
				$stop$ = $src$ + 1;
				if (($dest$ % 4) == ($src$ % 4) && 1 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				i++;
			} while (HEAP8[(psrc + i - 1)] != 0);
			return pdest;
		}

		function _snprintf(s, n, format, varargs) {
			var result = __formatString(format, varargs);
			var limit = (typeof n === 'undefined') ? result.length : Math.min(result.length, n - 1);
			for (var i = 0; i < limit; i++) {
				HEAP8[(s + i)] = result[i];;
			}
			HEAP8[(s + i)] = 0;;
			return result.length;
		}

		function _sprintf(s, format, varargs) {
			return _snprintf(s, undefined, format, varargs);
		}

		function _fputc(c, stream) {
			var chr = unSign(c & 0xFF);
			HEAP8[(_fputc.ret)] = chr;
			var ret = _write(stream, _fputc.ret, 1);
			if (ret == -1) {
				if (stream in FS.streams) FS.streams[stream].error = true;
				return -1;
			} else {
				return chr;
			}
		}

		function __scanString(format, get, unget, varargs) {
			format = Pointer_stringify(format);
			var formatIndex = 0;
			var argsi = 0;
			var fields = 0;
			var argIndex = 0;
			for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
				if (next <= 0) return fields;
				var next = get();
				if (next <= 0) return fields;
				if (format[formatIndex] === '%') {
					formatIndex++;
					var maxSpecifierStart = formatIndex;
					while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) && format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
						formatIndex++;
					}
					var max_;
					if (formatIndex != maxSpecifierStart) {
						max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
					}
					var type = format[formatIndex];
					formatIndex++;
					var curr = 0;
					var buffer = [];
					while ((curr < max_ || isNaN(max_)) && next > 0) {
						if ((type === 'd' && next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) || (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) || next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) || next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0))) || (type === 's') && (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) {
							buffer.push(String.fromCharCode(next));
							next = get();
							curr++;
						} else {
							break;
						}
					}
					if (buffer.length === 0) return 0;
					var text = buffer.join('');
					var argPtr = HEAP32[((varargs + argIndex) >> 2)];
					argIndex += Runtime.getNativeFieldSize('void*');
					switch (type) {
						case 'd':
							HEAP32[((argPtr) >> 2)] = parseInt(text, 10);
							break;
						case 'x':
							HEAP32[((argPtr) >> 2)] = parseInt(text, 16);
							break;
						case 's':
							var array = intArrayFromString(text);
							for (var j = 0; j < array.length; j++) {
								HEAP8[(argPtr + j)] = array[j];
							}
							break;
					}
					fields++;
				} else {
					if (format[formatIndex].charCodeAt(0) !== next) {
						unget(next);
						return fields;
					}
				}
			}
			return fields;
		}

		function _sscanf(s, format, varargs) {
			var index = 0;
			var get = function () {
				return HEAP8[(s + index++)];
			};
			var unget = function () {
				index--;
			};
			return __scanString(format, get, unget, varargs);
		}

		function _printf(format, varargs) {
			var stdout = HEAP32[((_stdout) >> 2)];
			return _fprintf(stdout, format, varargs);
		}

		function __exit(status) {
			__shutdownRuntime__();
			ABORT = true;
			throw 'exit(' + status + ') called, at ' + new Error().stack;
		}

		function _exit(status) {
			__exit(status);
		}

		function _isspace(chr) {
			return chr in {
				32: 0,
				9: 0,
				10: 0,
				11: 0,
				12: 0,
				13: 0
			};
		}

		function _isdigit(chr) {
			return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
		}

		function _atoi(s) {
			var c;
			while ((c = HEAP8[(s)]) && _isspace(c)) s++;
			if (!c || !_isdigit(c)) return 0;
			var e = s;
			while ((c = HEAP8[(e)]) && _isdigit(c)) e++;
			return Math.floor(Number(Pointer_stringify(s).substr(0, e - s)));
		}
		var ___dirent_struct_layout = {
			__size__: 1040,
			d_ino: 0,
			d_name: 4,
			d_off: 1028,
			d_reclen: 1032,
			d_type: 1036
		};

		function _open(path, oflag, varargs) {
			var mode = HEAP32[((varargs) >> 2)];
			var accessMode = oflag & 3;
			var isWrite = accessMode != 0;
			var isRead = accessMode != 1;
			var isCreate = Boolean(oflag & 512);
			var isExistCheck = Boolean(oflag & 2048);
			var isTruncate = Boolean(oflag & 1024);
			var isAppend = Boolean(oflag & 8);
			var origPath = path;
			path = FS.analyzePath(Pointer_stringify(path));
			if (!path.parentExists) {
				___setErrNo(path.error);
				return -1;
			}
			var target = path.object || null;
			var finalPath;
			if (target) {
				if (isCreate && isExistCheck) {
					___setErrNo(ERRNO_CODES.EEXIST);
					return -1;
				}
				if ((isWrite || isCreate || isTruncate) && target.isFolder) {
					___setErrNo(ERRNO_CODES.EISDIR);
					return -1;
				}
				if (isRead && !target.read || isWrite && !target.write) {
					___setErrNo(ERRNO_CODES.EACCES);
					return -1;
				}
				if (isTruncate && !target.isDevice) {
					target.contents = [];
				} else {
					if (!FS.forceLoadFile(target)) {
						___setErrNo(ERRNO_CODES.EIO);
						return -1;
					}
				}
				finalPath = path.path;
			} else {
				if (!isCreate) {
					___setErrNo(ERRNO_CODES.ENOENT);
					return -1;
				}
				if (!path.parentObject.write) {
					___setErrNo(ERRNO_CODES.EACCES);
					return -1;
				}
				target = FS.createDataFile(path.parentObject, path.name, [], mode & 0x100, mode & 0x80);
				finalPath = path.parentPath + '/' + path.name;
			}
			var id = FS.streams.length;
			if (target.isFolder) {
				var entryBuffer = 0;
				if (___dirent_struct_layout) {
					entryBuffer = _malloc(___dirent_struct_layout.__size__);
				}
				var contents = [];
				for (var key in target.contents) contents.push(key);
				FS.streams[id] = {
					path: finalPath,
					object: target,
					position: -2,
					isRead: true,
					isWrite: false,
					isAppend: false,
					error: false,
					eof: false,
					ungotten: [],
					contents: contents,
					currentEntry: entryBuffer
				};
			} else {
				FS.streams[id] = {
					path: finalPath,
					object: target,
					position: 0,
					isRead: isRead,
					isWrite: isWrite,
					isAppend: isAppend,
					error: false,
					eof: false,
					ungotten: []
				};
			}
			return id;
		}

		function _fopen(filename, mode) {
			var flags;
			mode = Pointer_stringify(mode);
			if (mode[0] == 'r') {
				if (mode.indexOf('+') != -1) {
					flags = 2;
				} else {
					flags = 0;
				}
			} else if (mode[0] == 'w') {
				if (mode.indexOf('+') != -1) {
					flags = 2;
				} else {
					flags = 1;
				}
				flags |= 512;
				flags |= 1024;
			} else if (mode[0] == 'a') {
				if (mode.indexOf('+') != -1) {
					flags = 2;
				} else {
					flags = 1;
				}
				flags |= 512;
				flags |= 8;
			} else {
				___setErrNo(ERRNO_CODES.EINVAL);
				return 0;
			}
			var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));
			return (ret == -1) ? 0 : ret;
		}

		function _memset(ptr, value, num) {
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = ptr;
			$stop$ = $dest$ + num;
			$value4$ = value;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = value;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = value;
			}
		}
		var _llvm_memset_p0i8_i32 = _memset;

		function _strrchr(ptr, chr) {
			var ptr2 = ptr + _strlen(ptr);
			do {
				if (HEAP8[(ptr2)] == chr) return ptr2;
				ptr2--;
			} while (ptr2 >= ptr);
			return 0;
		}

		function _close(fildes) {
			if (FS.streams[fildes]) {
				if (FS.streams[fildes].currentEntry) {
					_free(FS.streams[fildes].currentEntry);
				}
				delete FS.streams[fildes];
				return 0;
			} else {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			}
		}

		function _fsync(fildes) {
			if (FS.streams[fildes]) {
				return 0;
			} else {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			}
		}

		function _fclose(stream) {
			_fsync(stream);
			return _close(stream);
		}

		function _fflush(stream) {
			var flush = function (filedes) {
				if (filedes in FS.streams && FS.streams[filedes].object.output) {
					FS.streams[filedes].object.output(null);
				}
			};
			try {
				if (stream === 0) {
					for (var i in FS.streams) flush(i);
				} else {
					flush(stream);
				}
				return 0;
			} catch (e) {
				___setErrNo(ERRNO_CODES.EIO);
				return -1;
			}
		}

		function _ftell(stream) {
			if (stream in FS.streams) {
				stream = FS.streams[stream];
				if (stream.object.isDevice) {
					___setErrNo(ERRNO_CODES.ESPIPE);
					return -1;
				} else {
					return stream.position;
				}
			} else {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			}
		}

		function _lseek(fildes, offset, whence) {
			if (FS.streams[fildes] && !FS.streams[fildes].isDevice) {
				var stream = FS.streams[fildes];
				var position = offset;
				if (whence === 1) {
					position += stream.position;
				} else if (whence === 2) {
					position += stream.object.contents.length;
				}
				if (position < 0) {
					___setErrNo(ERRNO_CODES.EINVAL);
					return -1;
				} else {
					stream.ungotten = [];
					stream.position = position;
					return position;
				}
			} else {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			}
		}

		function _fseek(stream, offset, whence) {
			var ret = _lseek(stream, offset, whence);
			if (ret == -1) {
				return -1;
			} else {
				FS.streams[stream].eof = false;
				return 0;
			}
		}

		function _strncmp(px, py, n) {
			var i = 0;
			while (i < n) {
				var x = HEAP8[(px + i)];
				var y = HEAP8[(py + i)];
				if (x == y && x == 0) return 0;
				if (x == 0) return -1;
				if (y == 0) return 1;
				if (x == y) {
					i++;
					continue;
				} else {
					return x > y ? 1 : -1;
				}
			}
			return 0;
		}

		function _strcmp(px, py) {
			return _strncmp(px, py, TOTAL_MEMORY);
		}

		function _setlocale(category, locale) {
			if (!_setlocale.ret) _setlocale.ret = allocate([0], 'i8', ALLOC_NORMAL);
			return _setlocale.ret;
		}
		var _environ = null;
		var ___environ = null;

		function ___buildEnvironment(env) {
			var MAX_ENV_VALUES = 64;
			var TOTAL_ENV_SIZE = 1024;
			var poolPtr;
			var envPtr;
			if (_environ === null) {
				ENV.USER = 'root';
				ENV.PATH = '/';
				ENV.PWD = '/';
				ENV.HOME = '/';
				ENV.LANG = 'en_US.UTF-8';
				ENV._ = './this.program';
				poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
				envPtr = allocate(MAX_ENV_VALUES * 4, 'i8*', ALLOC_STATIC);
				HEAP32[((envPtr) >> 2)] = poolPtr;
				_environ = allocate([envPtr], 'i8**', ALLOC_STATIC);
				___environ = _environ;
			} else {
				envPtr = HEAP32[((_environ) >> 2)];
				poolPtr = HEAP32[((envPtr) >> 2)];
			}
			var strings = [];
			var totalSize = 0;
			for (var key in env) {
				if (typeof env[key] === 'string') {
					var line = key + '=' + env[key];
					strings.push(line);
					totalSize += line.length;
				}
			}
			if (totalSize > TOTAL_ENV_SIZE) {
				throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
			}
			var ptrSize = 4;
			for (var i = 0; i < strings.length; i++) {
				var line = strings[i];
				for (var j = 0; j < line.length; j++) {
					HEAP8[(poolPtr + j)] = line.charCodeAt(j);
				}
				HEAP8[(poolPtr + j)] = 0;
				HEAP32[((envPtr + i * ptrSize) >> 2)] = poolPtr;
				poolPtr += line.length + 1;
			}
			HEAP32[((envPtr + strings.length * ptrSize) >> 2)] = 0;
		}
		var ENV = {};

		function _getenv(name) {
			if (name === 0) return 0;
			name = Pointer_stringify(name);
			if (!ENV.hasOwnProperty(name)) return 0;
			if (_getenv.ret) _free(_getenv.ret);
			_getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
			return _getenv.ret;
		}

		function _access(path, amode) {
			path = Pointer_stringify(path);
			var target = FS.findObject(path);
			if (target === null) return -1;
			if ((amode & 2 && !target.write) || ((amode & 1 || amode & 4) && !target.read)) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else {
				return 0;
			}
		}

		function _strcat(pdest, psrc) {
			var len = _strlen(pdest);
			var i = 0;
			do {
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = psrc + i;
				$dest$ = pdest + len + i;
				$stop$ = $src$ + 1;
				if (($dest$ % 4) == ($src$ % 4) && 1 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				i++;
			} while (HEAP8[(psrc + i - 1)] != 0);
			return pdest;
		}

		function _pread(fildes, buf, nbyte, offset) {
			var stream = FS.streams[fildes];
			if (!stream || stream.object.isDevice) {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			} else if (!stream.isRead) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else if (stream.object.isFolder) {
				___setErrNo(ERRNO_CODES.EISDIR);
				return -1;
			} else if (nbyte < 0 || offset < 0) {
				___setErrNo(ERRNO_CODES.EINVAL);
				return -1;
			} else {
				var bytesRead = 0;
				while (stream.ungotten.length && nbyte > 0) {
					HEAP8[(buf++)] = stream.ungotten.pop();
					nbyte--;
					bytesRead++;
				}
				var contents = stream.object.contents;
				var size = Math.min(contents.length - offset, nbyte);
				for (var i = 0; i < size; i++) {
					HEAP8[(buf + i)] = contents[offset + i];
					bytesRead++;
				}
				return bytesRead;
			}
		}

		function _read(fildes, buf, nbyte) {
			var stream = FS.streams[fildes];
			if (!stream) {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			} else if (!stream.isRead) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else if (nbyte < 0) {
				___setErrNo(ERRNO_CODES.EINVAL);
				return -1;
			} else {
				var bytesRead;
				if (stream.object.isDevice) {
					if (stream.object.input) {
						bytesRead = 0;
						while (stream.ungotten.length && nbyte > 0) {
							HEAP8[(buf++)] = stream.ungotten.pop();
							nbyte--;
							bytesRead++;
						}
						for (var i = 0; i < nbyte; i++) {
							try {
								var result = stream.object.input();
							} catch (e) {
								___setErrNo(ERRNO_CODES.EIO);
								return -1;
							}
							if (result === null || typeof result === 'undefined') break;
							bytesRead++;
							HEAP8[(buf + i)] = result;
						}
						return bytesRead;
					} else {
						___setErrNo(ERRNO_CODES.ENXIO);
						return -1;
					}
				} else {
					var ungotSize = stream.ungotten.length;
					bytesRead = _pread(fildes, buf, nbyte, stream.position);
					if (bytesRead != -1) {
						stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
					}
					return bytesRead;
				}
			}
		}

		function _fgetc(stream) {
			if (!(stream in FS.streams)) return -1;
			var streamObj = FS.streams[stream];
			if (streamObj.eof || streamObj.error) return -1;
			var ret = _read(stream, _fgetc.ret, 1);
			if (ret == 0) {
				streamObj.eof = true;
				return -1;
			} else if (ret == -1) {
				streamObj.error = true;
				return -1;
			} else {
				return HEAP8[(_fgetc.ret)];
			}
		}

		function _fgets(s, n, stream) {
			if (!(stream in FS.streams)) return 0;
			var streamObj = FS.streams[stream];
			if (streamObj.error || streamObj.eof) return 0;
			var byte_;
			for (var i = 0; i < n - 1 && byte_ != '\n'.charCodeAt(0); i++) {
				byte_ = _fgetc(stream);
				if (byte_ == -1) {
					if (streamObj.error) return 0;
					else if (streamObj.eof) break;
				}
				HEAP8[(s + i)] = byte_;
			}
			HEAP8[(s + i)] = 0;
			return s;
		}

		function _strstr(ptr1, ptr2) {
			var str1 = Pointer_stringify(ptr1);
			var str2 = Pointer_stringify(ptr2);
			var ret = str1.search(str2);
			return ret >= 0 ? ptr1 + ret : 0;
		}

		function _memcmp(p1, p2, num) {
			for (var i = 0; i < num; i++) {
				var v1 = HEAP8[(p1 + i)];
				var v2 = HEAP8[(p2 + i)];
				if (v1 != v2) return v1 > v2 ? 1 : -1;
			}
			return 0;
		}

		function _memcpy(dest, src, num, idunno) {
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = src;
			$dest$ = dest;
			$stop$ = $src$ + num;
			if (($dest$ % 4) == ($src$ % 4) && num > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
		}

		function _qsort(base, num, size, comparator) {
			if (num == 0 || size == 0) return;
			comparator = FUNCTION_TABLE[comparator];
			var keys = [];
			for (var i = 0; i < num; i++) keys.push(i);
			keys.sort(function (a, b) {
				return comparator(base + a * size, base + b * size);
			});
			var temp = _malloc(num * size);
			_memcpy(temp, base, num * size);
			for (var i = 0; i < num; i++) {
				if (keys[i] == i) continue;
				_memcpy(base + i * size, temp + keys[i] * size, size);
			}
			_free(temp);
		}

		function _unlink(path) {
			path = FS.analyzePath(Pointer_stringify(path));
			if (!path.parentExists || !path.exists) {
				___setErrNo(path.error);
				return -1;
			} else if (path.object.isFolder) {
				___setErrNo(ERRNO_CODES.EISDIR);
				return -1;
			} else if (!path.object.write) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else {
				delete path.parentObject.contents[path.name];
				return 0;
			}
		}

		function _rmdir(path) {
			path = FS.analyzePath(Pointer_stringify(path));
			if (!path.parentExists || !path.exists) {
				___setErrNo(path.error);
				return -1;
			} else if (!path.object.write || path.isRoot) {
				___setErrNo(ERRNO_CODES.EACCES);
				return -1;
			} else if (!path.object.isFolder) {
				___setErrNo(ERRNO_CODES.ENOTDIR);
				return -1;
			} else {
				for (var i in path.object.contents) {
					___setErrNo(ERRNO_CODES.ENOTEMPTY);
					return -1;
				}
				if (path.path == FS.currentPath) {
					___setErrNo(ERRNO_CODES.EBUSY);
					return -1;
				} else {
					delete path.parentObject.contents[path.name];
					return 0;
				}
			}
		}

		function _remove(path) {
			var ret = _unlink(path);
			if (ret == -1) ret = _rmdir(path);
			return ret;
		}
		var _llvm_memcpy_p0i8_p0i8_i32 = _memcpy;

		function _isalnum(chr) {
			return (chr >= 48 && chr <= 57) || (chr >= 97 && chr <= 122) || (chr >= 65 && chr <= 90) || (chr >= 0xC0 && chr <= 0xD6) || (chr >= 0xDF && chr <= 0xF6) || (chr >= 0xD8 && chr <= 0xDE) || (chr >= 0xF8 && chr <= 0xFF);
		}

		function _strchr(ptr, chr) {
			ptr--;
			do {
				ptr++;
				var val = HEAP8[(ptr)];
				if (val == chr) return ptr;
			} while (val);
			return 0;
		}

		function _strncpy(pdest, psrc, num) {
			var padding = false,
				curr;
			for (var i = 0; i < num; i++) {
				curr = padding ? 0 : HEAP8[(psrc + i)];
				HEAP8[(pdest + i)] = curr;
				padding = padding || HEAP8[(psrc + i)] == 0;
			}
			return pdest;
		}

		function _fread(ptr, size, nitems, stream) {
			var bytesToRead = nitems * size;
			if (bytesToRead == 0) return 0;
			var bytesRead = _read(stream, ptr, bytesToRead);
			var streamObj = FS.streams[stream];
			if (bytesRead == -1) {
				if (streamObj) streamObj.error = true;
				return -1;
			} else {
				if (bytesRead < bytesToRead) streamObj.eof = true;
				return Math.floor(bytesRead / size);
			}
		}

		function _tolower(chr) {
			if ((chr >= 65 && chr < 90) || (chr >= 0xC0 && chr <= 0xD6) || (chr >= 0xD8 && chr <= 0xDE)) return chr - 65 + 97;
			return chr;
		}

		function _isalpha(chr) {
			return (chr >= 97 && chr <= 122) || (chr >= 65 && chr <= 90) || (chr >= 0xC0 && chr <= 0xD6) || (chr >= 0xDF && chr <= 0xF6) || (chr >= 0xD8 && chr <= 0xDE) || (chr >= 0xF8 && chr <= 0xFF);
		}

		function _isupper(chr) {
			return (chr >= 65 && chr <= 90) || (chr >= 0xC0 && chr <= 0xD6) || (chr >= 0xD8 && chr <= 0xDE);
		}

		function _islower(chr) {
			return (chr >= 97 && chr <= 122) || (chr >= 0xDF && chr <= 0xF6) || (chr >= 0xF8 && chr <= 0xFF);
		}

		function _ispunct(chr) {
			return (chr >= 33 && chr <= 47) || (chr >= 58 && chr <= 64) || (chr >= 91 && chr <= 96) || (chr >= 123 && chr <= 126);
		}
		var _atof;

		function _realloc(ptr, size) {
			if (!size) {
				if (ptr) _free(ptr);
				return 0;
			}
			var ret = _malloc(size);
			if (ptr) {
				_memcpy(ret, ptr, size);
				_free(ptr);
			}
			return ret;
		}
		var _mkstemp;

		function _system(command) {
			___setErrNo(ERRNO_CODES.EAGAIN);
			return -1;
		}

		function _ungetc(c, stream) {
			if (stream in FS.streams) {
				c = unSign(c & 0xFF);
				FS.streams[stream].ungotten.push(c);
				return c;
			} else {
				return -1;
			}
		}

		function _strdup(ptr) {
			var len = String_len(ptr);
			var newStr = _malloc(len + 1);
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = ptr;
			$dest$ = newStr;
			$stop$ = $src$ + len;
			if (($dest$ % 4) == ($src$ % 4) && len > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			HEAP8[(newStr + len)] = 0;;
			return newStr;
		}

		function _kill(pid, sig) {
			___setErrNo(ERRNO_CODES.EPERM);
			return -1;
		}

		function ___errno_location() {
			return ___setErrNo.ret;
		}
		var ___errno = ___errno_location;
		var ERRNO_MESSAGES = {
			1: "Operation not permitted",
			2: "No such file or directory",
			3: "No such process",
			4: "Interrupted system call",
			5: "Input/output error",
			6: "No such device or address",
			8: "Exec format error",
			9: "Bad file descriptor",
			10: "No child processes",
			11: "Resource temporarily unavailable",
			12: "Cannot allocate memory",
			13: "Permission denied",
			14: "Bad address",
			16: "Device or resource busy",
			17: "File exists",
			18: "Invalid cross-device link",
			19: "No such device",
			20: "Not a directory",
			21: "Is a directory",
			22: "Invalid argument",
			23: "Too many open files in system",
			24: "Too many open files",
			25: "Inappropriate ioctl for device",
			26: "Text file busy",
			27: "File too large",
			28: "No space left on device",
			29: "Illegal seek",
			30: "Read-only file system",
			31: "Too many links",
			32: "Broken pipe",
			33: "Numerical argument out of domain",
			34: "Numerical result out of range",
			35: "Resource deadlock avoided",
			36: "File name too long",
			37: "No locks available",
			38: "Function not implemented",
			39: "Directory not empty",
			40: "Too many levels of symbolic links",
			42: "No message of desired type",
			43: "Identifier removed",
			60: "Device not a stream",
			61: "No data available",
			62: "Timer expired",
			63: "Out of streams resources",
			67: "Link has been severed",
			71: "Protocol error",
			72: "Multihop attempted",
			74: "Bad message",
			75: "Value too large for defined data type",
			84: "Invalid or incomplete multibyte or wide character",
			88: "Socket operation on non-socket",
			89: "Destination address required",
			90: "Message too long",
			91: "Protocol wrong type for socket",
			92: "Protocol not available",
			93: "Protocol not supported",
			95: "Operation not supported",
			97: "Address family not supported by protocol",
			98: "Address already in use",
			99: "Cannot assign requested address",
			100: "Network is down",
			101: "Network is unreachable",
			102: "Network dropped connection on reset",
			103: "Software caused connection abort",
			104: "Connection reset by peer",
			105: "No buffer space available",
			106: "Transport endpoint is already connected",
			107: "Transport endpoint is not connected",
			110: "Connection timed out",
			111: "Connection refused",
			113: "No route to host",
			114: "Operation already in progress",
			115: "Operation now in progress",
			116: "Stale NFS file handle",
			122: "Disk quota exceeded",
			125: "Operation canceled",
			130: "Owner died",
			131: "State not recoverable"
		};

		function _strerror_r(errnum, strerrbuf, buflen) {
			if (errnum in ERRNO_MESSAGES) {
				if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
					return ___setErrNo(ERRNO_CODES.ERANGE);
				} else {
					var msg = ERRNO_MESSAGES[errnum];
					for (var i = 0; i < msg.length; i++) {
						HEAP8[(strerrbuf + i)] = msg.charCodeAt(i);
					}
					HEAP8[(strerrbuf + i)] = 0;
					return 0;
				}
			} else {
				return ___setErrNo(ERRNO_CODES.EINVAL);
			}
		}

		function _strerror(errnum) {
			if (!_strerror.buffer) _strerror.buffer = _malloc(256);
			_strerror_r(errnum, _strerror.buffer, 256);
			return _strerror.buffer;
		}

		function _memmove(dest, src, num, idunno) {
			if (num === 0) return;
			var tmp = _malloc(num);
			_memcpy(tmp, src, num);
			_memcpy(dest, tmp, num);
			_free(tmp);
		}
		var _llvm_memmove_p0i8_p0i8_i32 = _memmove;
		var _llvm_va_start;
		var _vfprintf = _fprintf;

		function _llvm_va_end() {}

		function _wait(stat_loc) {
			___setErrNo(ERRNO_CODES.ECHILD);
			return -1;
		}
		var _waitpid = _wait;
		var _vsnprintf = _snprintf;
		var ___pollfd_struct_layout = null;

		function _poll(fds, nfds, timeout) {
			var offsets = ___pollfd_struct_layout;
			var nonzero = 0;
			for (var i = 0; i < nfds; i++) {
				var pollfd = fds + ___pollfd_struct_layout.__size__ * i;
				var fd = HEAP32[((pollfd + offsets.fd) >> 2)];
				var events = HEAP16[((pollfd + offsets.events) >> 1)];
				var revents = 0;
				if (fd in FS.streams) {
					var stream = FS.streams[fd];
					if (events & 1) revents |= 1;
					if (events & 2) revents |= 2;
				} else {
					if (events & 4) revents |= 4;
				}
				if (revents) nonzero++;
				HEAP16[((pollfd + offsets.revents) >> 1)] = revents;
			}
			return nonzero;
		}

		function _memchr(ptr, chr, num) {
			chr = unSign(chr);
			for (var i = 0; i < num; i++) {
				if (HEAP8[(ptr)] == chr) return ptr;
				ptr++;
			}
			return 0;
		}

		function _fork() {
			___setErrNo(ERRNO_CODES.EAGAIN);
			return -1;
		}
		var ___flock_struct_layout = null;

		function _fcntl(fildes, cmd, varargs) {
			if (!(fildes in FS.streams)) {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			}
			var stream = FS.streams[fildes];
			switch (cmd) {
				case 0:
					var arg = HEAP32[((varargs) >> 2)];
					if (arg < 0) {
						___setErrNo(ERRNO_CODES.EINVAL);
						return -1;
					}
					var newStream = {};
					for (var member in stream) {
						newStream[member] = stream[member];
					}
					if (arg in FS.streams) arg = FS.streams.length;
					FS.streams[arg] = newStream;
					return arg;
				case 1:
				case 2:
					return 0;
				case 3:
					var flags = 0;
					if (stream.isRead && stream.isWrite) flags = 2;
					else if (!stream.isRead && stream.isWrite) flags = 1;
					else if (stream.isRead && !stream.isWrite) flags = 0;
					if (stream.isAppend) flags |= 8;
					return flags;
				case 4:
					var arg = HEAP32[((varargs) >> 2)];
					stream.isAppend = Boolean(arg | 8);
					return 0;
				case 7:
				case 20:
					var arg = HEAP32[((varargs) >> 2)];
					var offset = ___flock_struct_layout.l_type;
					HEAP16[((arg + offset) >> 1)] = 3;
					return 0;
				case 8:
				case 9:
				case 21:
				case 22:
					return 0;
				case 6:
				case 5:
					___setErrNo(ERRNO_CODES.EINVAL);
					return -1;
				default:
					___setErrNo(ERRNO_CODES.EINVAL);
					return -1;
			}
			return -1;
		}

		function _dup2(fildes, fildes2) {
			if (fildes2 < 0) {
				___setErrNo(ERRNO_CODES.EBADF);
				return -1;
			} else if (fildes === fildes2 && FS.streams[fildes]) {
				return fildes;
			} else {
				_close(fildes2);
				return _fcntl(fildes, 0, allocate([fildes2, 0, 0, 0], 'i32', ALLOC_STACK));
			}
		}

		function _signal(sig, func) {
			return 0;
		}

		function _execl() {
			___setErrNo(ERRNO_CODES.ENOEXEC);
			return -1;
		}
		var _execlp = _execl;

		function _pipe(fildes) {
			___setErrNo(ERRNO_CODES.ENOSYS);
			return -1;
		}

		function _opendir(dirname) {
			var path = FS.absolutePath(Pointer_stringify(dirname));
			if (path === null) {
				___setErrNo(ERRNO_CODES.ENOENT);
				return 0;
			}
			var target = FS.findObject(path);
			if (target === null) return 0;
			if (!target.isFolder) {
				___setErrNo(ERRNO_CODES.ENOTDIR);
				return 0;
			} else if (!target.read) {
				___setErrNo(ERRNO_CODES.EACCES);
				return 0;
			}
			var id = FS.streams.length;
			var contents = [];
			for (var key in target.contents) contents.push(key);
			FS.streams[id] = {
				path: path,
				object: target,
				position: -2,
				isRead: true,
				isWrite: false,
				isAppend: false,
				error: false,
				eof: false,
				ungotten: [],
				contents: contents,
				currentEntry: _malloc(___dirent_struct_layout.__size__)
			};
			return id;
		}

		function _readdir_r(dirp, entry, result) {
			if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
				return ___setErrNo(ERRNO_CODES.EBADF);
			}
			var stream = FS.streams[dirp];
			var loc = stream.position;
			var entries = 0;
			for (var key in stream.contents) entries++;
			if (loc < -2 || loc >= entries) {
				HEAP32[((result) >> 2)] = 0;
			} else {
				var name, inode;
				if (loc === -2) {
					name = '.';
					inode = 1;
				} else if (loc === -1) {
					name = '..';
					inode = 1;
				} else {
					name = stream.contents[loc];
					inode = stream.object.contents[name].inodeNumber;
				}
				stream.position++;
				var offsets = ___dirent_struct_layout;
				HEAP32[((entry + offsets.d_ino) >> 2)] = inode;
				HEAP32[((entry + offsets.d_off) >> 2)] = stream.position;
				HEAP32[((entry + offsets.d_reclen) >> 2)] = name.length + 1;
				for (var i = 0; i < name.length; i++) {
					HEAP8[(entry + offsets.d_name + i)] = name.charCodeAt(i);
				}
				HEAP8[(entry + offsets.d_name + i)] = 0;
				var type = stream.object.isDevice ? 2 : stream.object.isFolder ? 4 : (typeof stream.object.link !== 'undefined') ? 10 : 8;
				HEAP8[(entry + offsets.d_type)] = type;
				HEAP32[((result) >> 2)] = entry;
			}
			return 0;
		}

		function _readdir(dirp) {
			if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
				___setErrNo(ERRNO_CODES.EBADF);
				return 0;
			} else {
				if (!_readdir.result) _readdir.result = _malloc(4);
				_readdir_r(dirp, FS.streams[dirp].currentEntry, _readdir.result);
				if (HEAP32[((_readdir.result) >> 2)] === 0) {
					return 0;
				} else {
					return FS.streams[dirp].currentEntry;
				}
			}
		}

		function _closedir(dirp) {
			if (!FS.streams[dirp] || !FS.streams[dirp].object.isFolder) {
				return ___setErrNo(ERRNO_CODES.EBADF);
			} else {
				_free(FS.streams[dirp].currentEntry);
				delete FS.streams[dirp];
				return 0;
			}
		}

		function _calloc(n, s) {
			var ret = _malloc(n * s);
			_memset(ret, 0, n * s);
			return ret;
		}
		var _cos = Math.cos;
		var ___rand_state = 42;

		function _rand() {
			___rand_state = (1103515245 * ___rand_state + 12345) % 0x100000000;
			return ___rand_state & 0x7FFFFFFF;
		}
		var _exp = Math.exp;
		var _sin = Math.sin;
		var _vsprintf = _sprintf;

		function _fputs(s, stream) {
			return _write(stream, s, _strlen(s));
		}

		function _exp2(x) {
			return Math.pow(2, x);
		}

		function __Z13GetFileLengthPKc($filename) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 80;
			_memset(__stackBase__, 0, 80);
			var __label__;
			var $retval;
			var $filename_addr;
			var $statbuf = __stackBase__;
			$filename_addr = $filename;
			var $0 = $filename_addr;
			var $call = _stat($0, $statbuf);
			var $cmp = ((($call)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $st_mode = (($statbuf + 12) & 4294967295);
				var $1 = HEAP32[(($st_mode) >> 2)];
				var $and = ($1) & 61440;
				var $cmp1 = ((($and)) | 0) == 16384;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = -2;;
				} else if (__label__ == 4) {
					var $st_size = (($statbuf + 36) & 4294967295);
					var $2 = HEAP32[(($st_size) >> 2)];
					$retval = $2;;
				}
			}
			var $3 = $retval;
			STACKTOP = __stackBase__;
			return $3;
			return null;
		}

		function __Z5Alloci($size) {;
			var __label__;
			var $size_addr;
			var $p;
			$size_addr = $size;
			var $0 = $size_addr;
			var $call = _malloc($0);
			$p = $call;
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__impure_ptr) >> 2)];
				var $_stderr = (($1 + 12) & 4294967295);
				var $2 = HEAP32[(($_stderr) >> 2)];
				var $3 = _fwrite(((__str106) & 4294967295), 22, 1, $2);;
			}
			var $4 = $p;;
			return $4;
			return null;
		}

		function __Z4FreePv($ptr) {;
			var __label__;
			var $ptr_addr;
			$ptr_addr = $ptr;
			var $0 = $ptr_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $ptr_addr;;;
			};
			return;
			return;
		}

		function __Z13DisplayVoicesP7__sFILEPc($f_out, $language) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 36;
			_memset(__stackBase__, 0, 36);
			var __label__;
			var $f_out_addr;
			var $language_addr;
			var $ix;
			var $p;
			var $len;
			var $count;
			var $scores;
			var $v;
			var $lang_name;
			var $age_buf = __stackBase__;
			var $voices;
			var $voice_select = __stackBase__ + 12;
			$f_out_addr = $f_out;
			$language_addr = $language;
			$scores = 0;
			var $0 = $language_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$land_lhs_true$$if_else$2: do {
				if (__label__ == 1) {
					var $1 = $language_addr;
					var $arrayidx = (($1) & 4294967295);
					var $2 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp1 = ((($conv)) | 0) != 0;
					if (!($cmp1)) {
						__label__ = 3;
						break $land_lhs_true$$if_else$2;
					}
					var $3 = $language_addr;
					var $languages = (($voice_select + 4) & 4294967295);
					HEAP32[(($languages) >> 2)] = $3;
					var $age = (($voice_select + 13) & 4294967295);
					HEAP8[($age)] = 0;
					var $gender = (($voice_select + 12) & 4294967295);
					HEAP8[($gender)] = 0;
					var $name = (($voice_select) & 4294967295);
					HEAP32[(($name) >> 2)] = 0;
					var $call = _espeak_ListVoices($voice_select);
					$voices = ((__ZZ17espeak_ListVoicesE6voices) & 4294967295);
					$scores = 1;
					__label__ = 4;
					break $land_lhs_true$$if_else$2;
				}
			} while (0);
			if (__label__ == 3) {
				var $call2 = _espeak_ListVoices(0);
				$voices = ((__ZZ17espeak_ListVoicesE6voices) & 4294967295);;
			}
			var $4 = $f_out_addr;
			var $5 = _fwrite(((__str1) & 4294967295), 64, 1, $4);
			$ix = 0;
			var $6 = $ix;
			var $7 = $voices;
			var $arrayidx43 = (($7 + 4 * $6) & 4294967295);
			var $8 = HEAP32[(($arrayidx43) >> 2)];
			$v = $8;
			var $cmp54 = ((($8)) | 0) != 0;
			if ($cmp54) {
				__label__ = 5;;
			} else {
				__label__ = 15;;
			}
			$for_body_lr_ph$$for_end$8: do {
				if (__label__ == 5) {
					var $arraydecay = (($age_buf) & 4294967295);
					var $arraydecay26 = (($age_buf) & 4294967295);;
					$for_body$10: while (1) {
						$count = 0;
						var $9 = $v;
						var $languages6 = (($9 + 4) & 4294967295);
						var $10 = HEAP32[(($languages6) >> 2)];
						$p = $10;
						var $11 = $p;
						var $12 = HEAP8[($11)];
						var $conv71 = (tempInt = (($12)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp82 = ((($conv71)) | 0) != 0;
						if ($cmp82) {
							__label__ = 7;;
						} else {
							__label__ = 14;;
						}
						$while_body$$while_end$12: do {
							if (__label__ == 7) {
								while (1) {
									var $13 = $p;
									var $add_ptr = (($13 + 1) & 4294967295);
									var $call9 = _strlen($add_ptr);
									$len = $call9;
									var $14 = $p;
									var $add_ptr10 = (($14 + 1) & 4294967295);
									$lang_name = $add_ptr10;
									var $15 = $v;
									var $age11 = (($15 + 13) & 4294967295);
									var $16 = HEAPU8[($age11)];
									var $conv12 = ((($16)) & 255);
									var $cmp13 = ((($conv12)) | 0) == 0;
									if ($cmp13) {
										__label__ = 8;;
									} else {
										__label__ = 9;;
									}
									if (__label__ == 8) {
										var $src$, $dest$, $stop$, $stop4$, $fast$;
										$src$ = ((__str41208) & 4294967295);
										$dest$ = $arraydecay;
										$stop$ = $src$ + 4;
										if (($dest$ % 4) == ($src$ % 4) && 4 > 8) {
											while ($src$ % 4 !== 0 && $src$ < $stop$) {;
												HEAP8[$dest$++] = HEAP8[$src$++];
											}
											$src$ >>= 2;
											$dest$ >>= 2;
											$stop4$ = $stop$ >> 2;
											while ($src$ < $stop4$) {;;;
												HEAP32[$dest$++] = HEAP32[$src$++];
											}
											$src$ <<= 2;
											$dest$ <<= 2;
										}
										while ($src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										};;
									} else if (__label__ == 9) {
										var $17 = $v;
										var $age18 = (($17 + 13) & 4294967295);
										var $18 = HEAPU8[($age18)];
										var $conv19 = ((($18)) & 255);
										var $call20 = _sprintf($arraydecay, ((__str3) & 4294967295), allocate([$conv19, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));;
									}
									var $19 = $count;
									var $cmp22 = ((($19)) | 0) == 0;
									var $20 = $f_out_addr;
									if ($cmp22) {
										__label__ = 11;;
									} else {
										__label__ = 12;;
									}
									if (__label__ == 11) {
										var $21 = $p;
										var $arrayidx24 = (($21) & 4294967295);
										var $22 = HEAP8[($arrayidx24)];
										var $conv25 = (tempInt = (($22)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $23 = $lang_name;
										var $24 = $v;
										var $gender27 = (($24 + 12) & 4294967295);
										var $25 = HEAPU8[($gender27)];
										var $idxprom = ((($25)) & 255);
										var $arrayidx28 = ((__ZZ13DisplayVoicesP7__sFILEPcE7genders + $idxprom) & 4294967295);
										var $26 = HEAP8[($arrayidx28)];
										var $conv29 = (tempInt = (($26)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $27 = $v;
										var $name30 = (($27) & 4294967295);
										var $28 = HEAP32[(($name30) >> 2)];
										var $29 = $v;
										var $identifier = (($29 + 8) & 4294967295);
										var $30 = HEAP32[(($identifier) >> 2)];
										var $call31 = _fprintf($20, ((__str4) & 4294967295), allocate([$conv25, 0, 0, 0, $23, 0, 0, 0, $arraydecay26, 0, 0, 0, $conv29, 0, 0, 0, $28, 0, 0, 0, $30, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
									} else if (__label__ == 12) {
										var $31 = $lang_name;
										var $32 = $p;
										var $arrayidx33 = (($32) & 4294967295);
										var $33 = HEAP8[($arrayidx33)];
										var $conv34 = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $call35 = _fprintf($20, ((__str5) & 4294967295), allocate([$31, 0, 0, 0, $conv34, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
									}
									var $34 = $count;
									var $inc = ((($34) + 1) & 4294967295);
									$count = $inc;
									var $35 = $len;
									var $add = ((($35) + 2) & 4294967295);
									var $36 = $p;
									var $add_ptr37 = (($36 + $add) & 4294967295);
									$p = $add_ptr37;
									var $37 = $p;
									var $38 = HEAP8[($37)];
									var $conv7 = (tempInt = (($38)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp8 = ((($conv7)) | 0) != 0;
									if ($cmp8) {
										__label__ = 7;
										continue;
									} else {
										__label__ = 14;
										break $while_body$$while_end$12;
									}
								}
							}
						} while (0);
						var $39 = $f_out_addr;
						var $call38 = _fputc(10, $39);
						var $40 = $ix;
						var $inc39 = ((($40) + 1) & 4294967295);
						$ix = $inc39;
						var $41 = $ix;
						var $42 = $voices;
						var $arrayidx4 = (($42 + 4 * $41) & 4294967295);
						var $43 = HEAP32[(($arrayidx4) >> 2)];
						$v = $43;
						var $cmp5 = ((($43)) | 0) != 0;
						if ($cmp5) {
							__label__ = 6;
							continue $for_body$10;
						} else {
							__label__ = 15;
							break $for_body_lr_ph$$for_end$8;
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z13WVoiceChangedP7voice_t($wvoice) {;
			var __label__;;
			return;
			return;
		}

		function __Z11MarkerEventijiPh($type, $char_position, $value, $out_ptr) {;
			var __label__;
			var $type_addr;
			var $char_position_addr;
			var $value_addr;
			var $out_ptr_addr;
			$type_addr = $type;
			$char_position_addr = $char_position;
			$value_addr = $value;
			$out_ptr_addr = $out_ptr;
			var $0 = $type_addr;
			var $cmp = ((($0)) | 0) == 2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((_end_of_sentence) >> 2)] = 1;;
			};
			return;
			return;
		}

		function _main($argc, $argv) {;
			var __label__;
			var __lastLabel__ = null;
			var $_ZL9help_text;
			$_ZL9help_text = ((__str37) & 4294967295);
			var $_ZZ4mainE8err_load;
			$_ZZ4mainE8err_load = ((__str18) & 4294967295);
			var $retval;
			var $argc_addr;
			var $argv_addr;
			var $f_text;
			var $p_text;
			var $data_path;
			var $option_index = STACKTOP;
			_memset(STACKTOP, 0, 4);
			STACKTOP += 4;
			STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
			var $c;
			var $value = STACKTOP;
			_memset(STACKTOP, 0, 4);
			STACKTOP += 4;
			STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
			var $speed;
			var $ix;
			var $optarg2;
			var $amp;
			var $wordgap;
			var $speaking;
			var $flag_stdin;
			var $flag_compile;
			var $pitch_adjustment;
			var $voice_select = STACKTOP;
			_memset(STACKTOP, 0, 24);
			STACKTOP += 24;
			STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
			var $filename = STACKTOP;
			_memset(STACKTOP, 0, 200);
			STACKTOP += 200;
			STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
			var $voicename = STACKTOP;
			_memset(STACKTOP, 0, 40);
			STACKTOP += 40;
			STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
			var $dictname = STACKTOP;
			_memset(STACKTOP, 0, 40);
			STACKTOP += 40;
			STACKTOP = Math.ceil((STACKTOP) / 4) * 4;;
			var $extn;
			$retval = 0;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$f_text = 0;
			$p_text = 0;
			$data_path = 0;
			HEAP32[(($option_index) >> 2)] = 0;
			$speed = 175;
			$amp = 100;
			$wordgap = 0;
			$speaking = 0;
			$flag_stdin = 0;
			$flag_compile = 0;
			$pitch_adjustment = 50;
			var $arrayidx = (($voicename) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			HEAP8[(((_mbrola_name) & 4294967295))] = 0;
			var $arrayidx1 = (($dictname) & 4294967295);
			HEAP8[($arrayidx1)] = 0;
			HEAP8[(((_wavefile) & 4294967295))] = 0;
			var $arrayidx2 = (($filename) & 4294967295);
			HEAP8[($arrayidx2)] = 0;
			HEAP32[((_option_linelength) >> 2)] = 0;
			HEAP32[((_option_phonemes) >> 2)] = 0;
			HEAP32[((_option_waveout) >> 2)] = 0;
			HEAP32[((_option_wordgap) >> 2)] = 0;
			HEAP32[((_option_endpause) >> 2)] = 1;
			HEAP32[((_option_phoneme_input) >> 2)] = 1;
			HEAP32[((_option_multibyte) >> 2)] = 0;
			var $0 = HEAP32[((__impure_ptr) >> 2)];
			var $_stdout = (($0 + 8) & 4294967295);
			var $1 = HEAP32[(($_stdout) >> 2)];
			HEAP32[((_f_trans) >> 2)] = $1;
			var $2 = $argc_addr;
			var $3 = $argv_addr;
			var $call6 = _getopt_long($2, $3, ((__str19) & 4294967295), ((__ZZ4mainE12long_options) & 4294967295), $option_index);
			$c = $call6;
			var $cmp7 = ((($call6)) | 0) == -1;
			if ($cmp7) {
				__label__ = 43;;
			} else {
				__label__ = 1;;
			}
			$while_end71$$if_end_lr_ph$2: do {
				if (__label__ == 1) {
					var $arraydecay = (($filename) & 4294967295);
					var $arraydecay32 = (($voicename) & 4294967295);
					var $arraydecay41 = (($voicename) & 4294967295);
					var $_pr8 = $c;
					__lastLabel__ = 1;;
					$if_end$4: while (1) {
						var $4 = __lastLabel__ == 1 ? $_pr8 : ($call);
						var $5 = HEAP32[((_optarg) >> 2)];
						$optarg2 = $5;
						if ($4 == 98) {
							__lastLabel__ = 2;
							__label__ = 3;;
						} else if ($4 == 104) {
							__lastLabel__ = 2;
							__label__ = 5;;
						} else if ($4 == 107) {
							__lastLabel__ = 2;
							__label__ = 6;;
						} else if ($4 == 120) {
							__lastLabel__ = 2;
							__label__ = 7;;
						} else if ($4 == 88) {
							__lastLabel__ = 2;
							__label__ = 8;;
						} else if ($4 == 109) {
							__lastLabel__ = 2;
							__label__ = 9;;
						} else if ($4 == 112) {
							__lastLabel__ = 2;
							__label__ = 10;;
						} else if ($4 == 113) {
							__lastLabel__ = 2;
							__label__ = 12;;
						} else if ($4 == 102) {
							__lastLabel__ = 2;
							__label__ = 13;;
						} else if ($4 == 108) {
							__lastLabel__ = 2;
							__label__ = 14;;
						} else if ($4 == 97) {
							__lastLabel__ = 2;
							__label__ = 15;;
						} else if ($4 == 115) {
							__lastLabel__ = 2;
							__label__ = 16;;
						} else if ($4 == 103) {
							__lastLabel__ = 2;
							__label__ = 17;;
						} else if ($4 == 118) {
							__lastLabel__ = 2;
							__label__ = 18;;
						} else if ($4 == 119) {
							__lastLabel__ = 2;
							__label__ = 19;;
						} else if ($4 == 122) {
							__lastLabel__ = 2;
							__label__ = 20;;
						} else if ($4 == 256) {
							__lastLabel__ = 2;
							__label__ = 21;;
						} else if ($4 == 261) {
							__lastLabel__ = 2;
							__label__ = 22;;
						} else if ($4 == 257) {
							__lastLabel__ = 2;
							__label__ = 23;;
						} else if ($4 == 258) {
							__lastLabel__ = 2;
							__label__ = 23;;
						} else if ($4 == 259) {
							__lastLabel__ = 2;
							__label__ = 26;;
						} else if ($4 == 260) {
							__lastLabel__ = 2;
							__label__ = 32;;
						} else if ($4 == 262) {
							__lastLabel__ = 2;
							__label__ = 33;;
						} else if ($4 == 263) {
							__lastLabel__ = 2;
							__label__ = 36;;
						} else if ($4 == 264) {
							__lastLabel__ = 2;
							__label__ = 37;;
						} else if ($4 == 265) {
							__lastLabel__ = 2;
							__label__ = 40;;
						} else if ($4 == 266) {
							__lastLabel__ = 2;
							__label__ = 41;;
						} else {
							__lastLabel__ = 2;
							__label__ = 42;;
						}
						$sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6: do {
							if (__label__ == 42) {
								_exit(0);
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 3) {
								HEAP32[((_option_multibyte) >> 2)] = 2;
								var $6 = $optarg2;
								var $call3 = _sscanf($6, ((__str63715) & 4294967295), allocate([$value, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
								var $cmp4 = ((($call3)) | 0) == 1;
								var $7 = HEAP32[(($value) >> 2)];
								var $cmp5 = ((($7)) | 0) <= 4;
								var $or_cond = ($cmp4) & ($cmp5);
								if (!($or_cond)) {
									__label__ = 38;
									break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
								}
								var $8 = HEAP32[(($value) >> 2)];
								HEAP32[((_option_multibyte) >> 2)] = $8;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 5) {
								var $9 = $argv_addr;
								var $arrayidx9 = (($9) & 4294967295);
								var $10 = HEAP32[(($arrayidx9) >> 2)];
								var $11 = $data_path;
								__ZL9init_pathPcS_($10, $11);
								var $12 = HEAP32[((_version_string) >> 2)];
								var $13 = $_ZL9help_text;
								var $call10 = _printf(((__str21) & 4294967295), allocate([$12, 0, 0, 0, ((_path_home) & 4294967295), 0, 0, 0, $13, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
								_exit(0);
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 6) {
								var $14 = $optarg2;
								var $call12 = _atoi($14);
								HEAP32[((_option_capitals) >> 2)] = $call12;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 7) {
								HEAP32[((_option_phonemes) >> 2)] = 1;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 8) {
								HEAP32[((_option_phonemes) >> 2)] = 2;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 9) {
								HEAP32[((_option_ssml) >> 2)] = 1;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 10) {
								var $15 = $optarg2;
								var $call17 = _atoi($15);
								$pitch_adjustment = $call17;
								var $16 = $pitch_adjustment;
								var $cmp18 = ((($16)) | 0) > 99;
								if (!($cmp18)) {
									__label__ = 38;
									break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
								}
								$pitch_adjustment = 99;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 12) {
								HEAP32[((_quiet) >> 2)] = 1;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 13) {
								var $17 = $optarg2;
								__Z8strncpy0PcPKci($arraydecay, $17, 200);
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 14) {
								HEAP32[(($value) >> 2)] = 0;
								var $18 = $optarg2;
								var $call24 = _atoi($18);
								HEAP32[(($value) >> 2)] = $call24;
								var $19 = HEAP32[(($value) >> 2)];
								HEAP32[((_option_linelength) >> 2)] = $19;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 15) {
								var $20 = $optarg2;
								var $call26 = _atoi($20);
								$amp = $call26;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 16) {
								var $21 = $optarg2;
								var $call28 = _atoi($21);
								$speed = $call28;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 17) {
								var $22 = $optarg2;
								var $call30 = _atoi($22);
								$wordgap = $call30;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 18) {
								var $23 = $optarg2;
								__Z8strncpy0PcPKci($arraydecay32, $23, 40);
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 19) {
								HEAP32[((_option_waveout) >> 2)] = 1;
								var $24 = $optarg2;
								__Z8strncpy0PcPKci(((_wavefile) & 4294967295), $24, 200);
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 20) {
								HEAP32[((_option_endpause) >> 2)] = 0;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 21) {
								$flag_stdin = 1;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 22) {
								HEAP32[((_option_waveout) >> 2)] = 1;
								var $src$, $dest$, $stop$, $stop4$, $fast$;
								$src$ = ((__str12) & 4294967295);
								$dest$ = ((_wavefile) & 4294967295);
								$stop$ = $src$ + 7;
								if (($dest$ % 4) == ($src$ % 4) && 7 > 8) {
									while ($src$ % 4 !== 0 && $src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									}
									$src$ >>= 2;
									$dest$ >>= 2;
									$stop4$ = $stop$ >> 2;
									while ($src$ < $stop4$) {;;;
										HEAP32[$dest$++] = HEAP32[$src$++];
									}
									$src$ <<= 2;
									$dest$ <<= 2;
								}
								while ($src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								};
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 23) {
								var $cmp39 = ((($5)) | 0) != 0;
								if ($cmp39) {
									__label__ = 24;;
								} else {
									__label__ = 25;;
								}
								if (__label__ == 24) {
									var $25 = $optarg2;
									__Z8strncpy0PcPKci($arraydecay41, $25, 40);;
								}
								var $26 = $c;
								$flag_compile = $26;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 26) {
								HEAP32[((_option_punctuation) >> 2)] = 1;
								var $27 = $optarg2;
								var $cmp44 = ((($27)) | 0) != 0;
								if (!($cmp44)) {
									__label__ = 38;
									break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
								}
								$ix = 0;
								__lastLabel__ = 27;;
								while (1) {
									var $28 = __lastLabel__ == 30 ? $inc : (0);
									var $cmp47 = ((($28)) | 0) < 60;
									if (!($cmp47)) {
										__label__ = 31;
										break;
									}
									var $29 = $ix;
									var $30 = $optarg2;
									var $arrayidx48 = (($30 + $29) & 4294967295);
									var $31 = HEAP8[($arrayidx48)];
									var $conv = (tempInt = (($31)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $32 = $ix;
									var $arrayidx49 = ((_option_punctlist + $32 * 4) & 4294967295);
									HEAP32[(($arrayidx49) >> 2)] = $conv;
									var $cmp50 = ((($conv)) | 0) != 0;
									if (!($cmp50)) {
										__label__ = 31;
										break;
									}
									var $33 = $ix;
									var $inc = ((($33) + 1) & 4294967295);
									$ix = $inc;
									__lastLabel__ = 30;
									__label__ = 28;
									continue;
								}
								HEAP32[((((_option_punctlist + 236) & 4294967295)) >> 2)] = 0;
								HEAP32[((_option_punctuation) >> 2)] = 2;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 32) {
								var $34 = $argv_addr;
								var $arrayidx54 = (($34) & 4294967295);
								var $35 = HEAP32[(($arrayidx54) >> 2)];
								var $36 = $data_path;
								__ZL9init_pathPcS_($35, $36);
								var $37 = HEAP32[((__impure_ptr) >> 2)];
								var $_stdout55 = (($37 + 8) & 4294967295);
								var $38 = HEAP32[(($_stdout55) >> 2)];
								var $39 = $optarg2;
								__Z13DisplayVoicesP7__sFILEPc($38, $39);
								_exit(0);
								var $_pr = $optarg2;
								__lastLabel__ = 32;
								__label__ = 33;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 36) {
								var $42 = $optarg2;
								$data_path = $42;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 37) {
								var $43 = $optarg2;
								var $call63 = _fopen($43, ((__str11422) & 4294967295));
								HEAP32[((_f_trans) >> 2)] = $call63;
								var $cmp64 = ((($call63)) | 0) == 0;
								if (!($cmp64)) {
									__label__ = 38;
									break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
								}
								var $46 = HEAP32[((__impure_ptr) >> 2)];
								var $_stderr = (($46 + 12) & 4294967295);
								var $47 = HEAP32[(($_stderr) >> 2)];
								var $48 = $optarg2;
								var $call66 = _fprintf($47, ((__str23) & 4294967295), allocate([$48, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								var $49 = HEAP32[((__impure_ptr) >> 2)];
								var $_stderr67 = (($49 + 12) & 4294967295);
								var $50 = HEAP32[(($_stderr67) >> 2)];
								HEAP32[((_f_trans) >> 2)] = $50;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 40) {
								HEAP32[((_option_mbrola_phonemes) >> 2)] = 16;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							} else if (__label__ == 41) {
								HEAP32[((_option_phonemes) >> 2)] = 3;
								__label__ = 38;
								break $sw_default$$sw_bb$$sw_bb8$$sw_bb11$$sw_bb13$$sw_bb14$$sw_bb15$$sw_bb16$$sw_bb21$$sw_bb22$$sw_bb23$$sw_bb25$$sw_bb27$$sw_bb29$$sw_bb31$$sw_bb33$$sw_bb34$$sw_bb35$$sw_bb36$$sw_bb38$$sw_bb43$$sw_bb53$$sw_bb56$$sw_bb61$$sw_bb62$$sw_bb69$$sw_bb70$6;
							}
						} while (0);
						if (__label__ == 33) {
							var $40 = __lastLabel__ == 32 ? $_pr : ($5);
							var $cmp57 = ((($40)) | 0) == 0;
							if ($cmp57) {
								__label__ = 34;;
							} else {
								__label__ = 35;;
							}
							if (__label__ == 34) {
								HEAP32[((_samples_split) >> 2)] = 30;;
							} else if (__label__ == 35) {
								var $41 = $optarg2;
								var $call59 = _atoi($41);
								HEAP32[((_samples_split) >> 2)] = $call59;;
							}
						}
						var $44 = $argc_addr;
						var $45 = $argv_addr;
						var $call = _getopt_long($44, $45, ((__str19) & 4294967295), ((__ZZ4mainE12long_options) & 4294967295), $option_index);
						$c = $call;
						var $cmp = ((($call)) | 0) == -1;
						if ($cmp) {
							__lastLabel__ = 38;
							__label__ = 43;
							break $while_end71$$if_end_lr_ph$2;
						} else {
							__lastLabel__ = 38;
							__label__ = 2;
							continue $if_end$4;
						}
					}
				}
			} while (0);
			var $51 = $argv_addr;
			var $arrayidx72 = (($51) & 4294967295);
			var $52 = HEAP32[(($arrayidx72) >> 2)];
			var $53 = $data_path;
			__ZL9init_pathPcS_($52, $53);
			__ZL10initialisev();
			var $54 = $flag_compile;
			var $tobool = ((($54)) | 0) != 0;
			if ($tobool) {
				__label__ = 44;;
			} else {
				__label__ = 45;;
			}
			if (__label__ == 44) {
				var $arraydecay75 = (($voicename) & 4294967295);
				var $call76 = __Z9LoadVoicePKci($arraydecay75, 5);
				var $55 = $flag_compile;
				var $and = ($55) & 1;
				var $call77 = __Z17CompileDictionaryPKcS0_P7__sFILEPci(0, ((_dictionary_name) & 4294967295), 0, 0, $and);
				_exit(0);;
			}
			var $arrayidx79 = (($voicename) & 4294967295);
			var $56 = HEAP8[($arrayidx79)];
			var $conv80 = (tempInt = (($56)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp81 = ((($conv80)) | 0) == 0;
			if ($cmp81) {
				__label__ = 46;;
			} else {
				__label__ = 47;;
			}
			if (__label__ == 46) {
				var $arraydecay83 = (($voicename) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = ((__str45697) & 4294967295);
				$dest$ = $arraydecay83;
				$stop$ = $src$ + 8;
				if (($dest$ % 4) == ($src$ % 4) && 8 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};;
			}
			var $arraydecay86 = (($voicename) & 4294967295);
			var $call87 = __Z14SetVoiceByNamePKc($arraydecay86);
			var $cmp88 = ((($call87)) | 0) != 0;
			if ($cmp88) {
				__label__ = 48;;
			} else {
				__label__ = 50;;
			}
			$if_then89$$if_end98$58: do {
				if (__label__ == 48) {
					var $57 = $voice_select;
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $57;
					$stop$ = $dest$ + 24;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $arraydecay90 = (($voicename) & 4294967295);
					var $languages = (($voice_select + 4) & 4294967295);
					HEAP32[(($languages) >> 2)] = $arraydecay90;
					var $call91 = __Z20SetVoiceByPropertiesP12espeak_VOICE($voice_select);
					var $cmp92 = ((($call91)) | 0) != 0;
					if (!($cmp92)) {
						__label__ = 50;
						break $if_then89$$if_end98$58;
					}
					var $58 = HEAP32[((__impure_ptr) >> 2)];
					var $_stderr94 = (($58 + 12) & 4294967295);
					var $59 = HEAP32[(($_stderr94) >> 2)];
					var $60 = $_ZZ4mainE8err_load;
					var $arraydecay95 = (($voicename) & 4294967295);
					var $call96 = _fprintf($59, ((__str25) & 4294967295), allocate([$60, 0, 0, 0, $arraydecay95, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					_exit(2);;
				}
			} while (0);
			var $61 = $speed;
			__Z12SetParameteriii(1, $61, 0);
			var $62 = $amp;
			__Z12SetParameteriii(2, $62, 0);
			var $63 = HEAP32[((_option_capitals) >> 2)];
			__Z12SetParameteriii(6, $63, 0);
			var $64 = HEAP32[((_option_punctuation) >> 2)];
			__Z12SetParameteriii(5, $64, 0);
			var $65 = $wordgap;
			__Z12SetParameteriii(7, $65, 0);
			var $66 = $pitch_adjustment;
			var $cmp99 = ((($66)) | 0) != 50;
			if ($cmp99) {
				__label__ = 51;;
			} else {
				__label__ = 52;;
			}
			if (__label__ == 51) {
				var $67 = $pitch_adjustment;
				__Z12SetParameteriii(3, $67, 0);;
			}
			var $68 = HEAP32[((_voice) >> 2)];
			__Z13DoVoiceChangeP7voice_t($68);
			var $arrayidx102 = (($filename) & 4294967295);
			var $69 = HEAP8[($arrayidx102)];
			var $conv103 = (tempInt = (($69)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp104 = ((($conv103)) | 0) == 0;
			if ($cmp104) {
				__label__ = 53;;
			} else {
				__label__ = 59;;
			}
			$if_then105$$if_else116$65: do {
				if (__label__ == 53) {
					var $70 = HEAP32[((_optind) >> 2)];
					var $71 = $argc_addr;
					var $cmp106 = ((($70)) | 0) < ((($71)) | 0);
					var $72 = $flag_stdin;
					if ($cmp106) {
						__label__ = 54;;
					} else {
						__label__ = 57;;
					}
					if (__label__ == 54) {
						var $cmp108 = ((($72)) | 0) == 0;
						if ($cmp108) {
							__label__ = 56;;
						} else {
							__label__ = 55;;
						}
						if (__label__ == 56) {
							var $75 = HEAP32[((_optind) >> 2)];
							var $76 = $argv_addr;
							var $arrayidx110 = (($76 + 4 * $75) & 4294967295);
							var $77 = HEAP32[(($arrayidx110) >> 2)];
							$p_text = $77;;
						} else if (__label__ == 55) {
							var $73 = HEAP32[((__impure_ptr) >> 2)];
							var $_stdin3 = (($73 + 4) & 4294967295);
							var $74 = HEAP32[(($_stdin3) >> 2)];
							$f_text = $74;
							__lastLabel__ = 55;
							__label__ = 61;
							break $if_then105$$if_else116$65;
						}
					} else if (__label__ == 57) {
						var $78 = HEAP32[((__impure_ptr) >> 2)];
						var $_stdin = (($78 + 4) & 4294967295);
						var $79 = HEAP32[(($_stdin) >> 2)];
						$f_text = $79;
						var $cmp112 = ((($72)) | 0) == 0;
						if ($cmp112) {
							__lastLabel__ = 57;;
						} else {
							__lastLabel__ = 57;
							__label__ = 61;
							break $if_then105$$if_else116$65;
						}
						HEAP32[((_option_linelength) >> 2)] = -1;;
					}
					var $_pr5 = $f_text;
					__lastLabel__ = 60;;
				} else if (__label__ == 59) {
					var $arraydecay117 = (($filename) & 4294967295);
					var $call118 = _fopen($arraydecay117, ((__str51703) & 4294967295));
					$f_text = $call118;
					__lastLabel__ = 59;;
				}
			} while (0);
			var $80 = __lastLabel__ == 60 ? $_pr5 : (__lastLabel__ == 55 ? $74 : (__lastLabel__ == 57 ? $79 : ($call118)));
			var $cmp120 = ((($80)) | 0) == 0;
			if ($cmp120) {
				__label__ = 62;;
			} else {
				__label__ = 64;;
			}
			$land_lhs_true121$$if_end127$77: do {
				if (__label__ == 62) {
					var $81 = $p_text;
					var $cmp122 = ((($81)) | 0) == 0;
					if (!($cmp122)) {
						__label__ = 64;
						break $land_lhs_true121$$if_end127$77;
					}
					var $82 = HEAP32[((__impure_ptr) >> 2)];
					var $_stderr124 = (($82 + 12) & 4294967295);
					var $83 = HEAP32[(($_stderr124) >> 2)];
					var $84 = $_ZZ4mainE8err_load;
					var $arraydecay125 = (($filename) & 4294967295);
					var $call126 = _fprintf($83, ((__str27) & 4294967295), allocate([$84, 0, 0, 0, $arraydecay125, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					_exit(1);;
				}
			} while (0);
			var $85 = HEAP32[((_option_waveout) >> 2)];
			var $tobool128 = ((($85)) | 0) != 0;
			var $86 = HEAP32[((_quiet) >> 2)];
			var $tobool129 = ((($86)) | 0) != 0;
			var $or_cond1 = ($tobool128) | ($tobool129);
			if ($or_cond1) {
				__label__ = 65;;
			} else {
				__label__ = 79;;
			}
			$if_then130$$if_else168$81: do {
				if (__label__ == 65) {
					var $87 = HEAP32[((_quiet) >> 2)];
					var $tobool131 = ((($87)) | 0) != 0;
					var $88 = HEAP32[((_samplerate) >> 2)];
					if ($tobool131) {
						__label__ = 66;;
					} else {
						__label__ = 67;;
					}
					$if_then132$$if_else134$83: do {
						if (__label__ == 66) {
							var $call133 = __ZL12OpenWaveFilePKci(0, $88);
							HEAP32[((_option_waveout) >> 2)] = 1;;
						} else if (__label__ == 67) {
							var $89 = HEAP32[((_samples_split) >> 2)];
							var $mul = ((($88) * 60) & 4294967295);
							var $mul135 = ((($mul) * ($89)) & 4294967295);
							HEAP32[((_samples_split) >> 2)] = $mul135;
							var $90 = HEAP32[((_samples_split) >> 2)];
							var $tobool136 = ((($90)) | 0) != 0;
							if ($tobool136) {
								__label__ = 68;;
							} else {
								__label__ = 71;;
							}
							if (__label__ == 68) {
								var $call138 = _strrchr(((_wavefile) & 4294967295), 46);
								$extn = $call138;
								var $91 = $extn;
								var $cmp139 = ((($91)) | 0) != 0;
								if (!($cmp139)) {
									__label__ = 73;
									break $if_then132$$if_else134$83;
								}
								var $call141 = _strlen(((_wavefile) & 4294967295));
								var $add_ptr = ((((_wavefile) & 4294967295) + $call141) & 4294967295);
								var $92 = $extn;
								var $sub_ptr_lhs_cast = ($add_ptr);
								var $sub_ptr_rhs_cast = ($92);
								var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
								var $cmp142 = ((($sub_ptr_sub)) | 0) <= 4;
								if (!($cmp142)) {
									__label__ = 73;
									break $if_then132$$if_else134$83;
								}
								var $93 = $extn;
								var $call144 = _strcpy(((_filetype) & 4294967295), $93);
								var $94 = $extn;
								HEAP8[($94)] = 0;;
							} else if (__label__ == 71) {
								var $95 = HEAP32[((_samplerate) >> 2)];
								var $call147 = __ZL12OpenWaveFilePKci(((_wavefile) & 4294967295), $95);
								var $cmp148 = ((($call147)) | 0) != 0;
								if (!($cmp148)) {
									__label__ = 73;
									break $if_then132$$if_else134$83;
								}
								var $96 = HEAP32[((__impure_ptr) >> 2)];
								var $_stderr150 = (($96 + 12) & 4294967295);
								var $97 = HEAP32[(($_stderr150) >> 2)];
								var $call151 = _fprintf($97, ((__str28) & 4294967295), allocate([((_wavefile) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								_exit(3);;
							}
						}
					} while (0);
					__Z8InitTexti(0);
					var $98 = $f_text;
					var $99 = $p_text;
					var $call155 = __Z15SpeakNextClauseP7__sFILEPKvi($98, $99, 0);
					$ix = 1;;
					while (1) {
						var $call156 = __ZL11WavegenFilev();
						var $cmp157 = ((($call156)) | 0) != 0;
						if ($cmp157) {
							__label__ = 75;;
						} else {
							__label__ = 76;;
						}
						if (__label__ == 75) {
							var $100 = $ix;
							var $cmp159 = ((($100)) | 0) == 0;
							if ($cmp159) {
								__label__ = 78;
								break;
							}
						}
						var $call163 = __Z8GenerateP12PHONEME_LISTPii(((_phoneme_list) & 4294967295), _n_phoneme_list, 1);
						var $cmp164 = ((($call163)) | 0) == 0;
						if (!($cmp164)) {
							__label__ = 74;
							continue;
						}
						var $call166 = __Z15SpeakNextClauseP7__sFILEPKvi(0, 0, 1);
						$ix = $call166;
						__label__ = 74;
						continue;
					}
					__ZL13CloseWaveFilev();
					__label__ = 83;
					break $if_then130$$if_else168$81;
				} else if (__label__ == 79) {
					__Z8InitTexti(0);
					var $101 = $f_text;
					var $102 = $p_text;
					var $call170 = __Z15SpeakNextClauseP7__sFILEPKvi($101, $102, 0);
					var $103 = HEAP32[((_option_quiet) >> 2)];
					var $tobool171 = ((($103)) | 0) != 0;
					if ($tobool171) {
						__label__ = 80;;
					} else {
						__label__ = 82;;
					}
					if (__label__ == 80) {
						while (1) {
							var $call173 = __Z15SpeakNextClauseP7__sFILEPKvi(0, 0, 1);
							var $cmp174 = ((($call173)) | 0) != 0;
							if ($cmp174) {
								__label__ = 80;
								continue;
							} else {
								__label__ = 81;
								break;
							}
						}
						$retval = 0;
						__label__ = 87;
						break $if_then130$$if_else168$81;
					} else if (__label__ == 82) {
						var $104 = HEAP32[((__impure_ptr) >> 2)];
						var $_stderr178 = (($104 + 12) & 4294967295);
						var $105 = HEAP32[(($_stderr178) >> 2)];
						var $106 = _fwrite(((__str29) & 4294967295), 79, 1, $105);
						__label__ = 83;
						break $if_then130$$if_else168$81;
					}
				}
			} while (0);
			if (__label__ == 83) {
				var $107 = HEAP32[((_f_trans) >> 2)];
				var $108 = HEAP32[((__impure_ptr) >> 2)];
				var $_stdout181 = (($108 + 8) & 4294967295);
				var $109 = HEAP32[(($_stdout181) >> 2)];
				var $cmp182 = ((($107)) | 0) != ((($109)) | 0);
				if ($cmp182) {
					__label__ = 84;;
				} else {
					__label__ = 86;;
				}
				$land_lhs_true183$$if_end188$108: do {
					if (__label__ == 84) {
						var $110 = HEAP32[((_f_trans) >> 2)];
						var $111 = HEAP32[((__impure_ptr) >> 2)];
						var $_stderr184 = (($111 + 12) & 4294967295);
						var $112 = HEAP32[(($_stderr184) >> 2)];
						var $cmp185 = ((($110)) | 0) != ((($112)) | 0);
						if (!($cmp185)) {
							__label__ = 86;
							break $land_lhs_true183$$if_end188$108;
						}
						var $113 = HEAP32[((_f_trans) >> 2)];
						var $call187 = _fclose($113);;
					}
				} while (0);
				$retval = 0;;
			}
			var $114 = $retval;;
			return $114;
			return null;
		}
		Module["_main"] = _main;

		function __ZL9init_pathPcS_($argv0, $path_specified) {;
			var __label__;
			var $argv0_addr;
			var $path_specified_addr;
			var $env;
			$argv0_addr = $argv0;
			$path_specified_addr = $path_specified;
			var $0 = $path_specified_addr;
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					var $1 = $path_specified_addr;
					var $call = _sprintf(((_path_home) & 4294967295), ((__str38) & 4294967295), allocate([$1, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
				} else if (__label__ == 2) {
					var $call1 = _getenv(((__str39) & 4294967295));
					$env = $call1;
					var $cmp = ((($call1)) | 0) != 0;
					if ($cmp) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $2 = $env;
						var $call3 = _snprintf(((_path_home) & 4294967295), 150, ((__str38) & 4294967295), allocate([$2, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
						var $call4 = __Z13GetFileLengthPKc(((_path_home) & 4294967295));
						var $cmp5 = ((($call4)) | 0) == -2;
						if ($cmp5) {
							__label__ = 6;
							break $if_then$$if_end$2;
						}
					}
					var $call9 = _getenv(((__str40) & 4294967295));
					var $call10 = _snprintf(((_path_home) & 4294967295), 150, ((__str38) & 4294967295), allocate([$call9, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					var $call11 = _access(((_path_home) & 4294967295), 4);
					var $cmp12 = ((($call11)) | 0) != 0;
					if (!($cmp12)) {
						__label__ = 6;
						break $if_then$$if_end$2;
					}
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = ((__str41) & 4294967295);
					$dest$ = ((_path_home) & 4294967295);
					$stop$ = $src$ + 23;
					if (($dest$ % 4) == ($src$ % 4) && 23 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};;
				}
			} while (0);;
			return;
			return;
		}

		function __ZL10initialisev() {;
			var __label__;
			var $param;
			var $result;
			var $call = _setlocale(2, ((__str32) & 4294967295));
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end5$2: do {
				if (__label__ == 1) {
					var $call1 = _setlocale(2, ((__str33) & 4294967295));
					var $cmp2 = ((($call1)) | 0) == 0;
					if (!($cmp2)) {
						__label__ = 3;
						break $if_then$$if_end5$2;
					}
					var $call4 = _setlocale(2, ((__str13643) & 4294967295));;
				}
			} while (0);
			__Z11WavegenInitii(22050, 0);
			var $call6 = __Z10LoadPhDatav();
			$result = $call6;
			var $cmp7 = ((($call6)) | 0) != 1;
			if ($cmp7) {
				__label__ = 4;;
			} else {
				__label__ = 7;;
			}
			if (__label__ == 4) {
				var $0 = $result;
				var $cmp9 = ((($0)) | 0) == -1;
				var $1 = HEAP32[((__impure_ptr) >> 2)];
				var $_stderr = (($1 + 12) & 4294967295);
				var $2 = HEAP32[(($_stderr) >> 2)];
				if ($cmp9) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $3 = _fwrite(((__str35) & 4294967295), 27, 1, $2);
					_exit(1);;
				} else if (__label__ == 6) {
					var $4 = $result;
					var $call13 = _fprintf($2, ((__str36) & 4294967295), allocate([$4, 0, 0, 0, 83200, 0, 0, 0, ((_path_home) & 4294967295), 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
				}
			}
			__Z10LoadConfigv();
			__Z13SetVoiceStackP12espeak_VOICE(0);
			__Z14SynthesizeInitv();
			$param = 0;;
			while (1) {
				var $5 = $param;
				var $arrayidx = ((_param_defaults + $5 * 4) & 4294967295);
				var $6 = HEAP32[(($arrayidx) >> 2)];
				var $7 = $param;
				var $arrayidx17 = ((((_param_stack + 4) & 4294967295) + $7 * 4) & 4294967295);
				HEAP32[(($arrayidx17) >> 2)] = $6;
				var $8 = $param;
				var $inc = ((($8) + 1) & 4294967295);
				$param = $inc;
				var $cmp16 = ((($inc)) | 0) < 15;
				if ($cmp16) {
					__label__ = 8;
					continue;
				} else {
					__label__ = 9;
					break;
				}
			};
			return;
			return;
		}

		function __ZL12OpenWaveFilePKci($path, $rate) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $path_addr;
			var $rate_addr;
			$path_addr = $path;
			$rate_addr = $rate;
			var $0 = $path_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 2;;
			} else if (__label__ == 2) {
				var $1 = $path_addr;
				var $call = _strcmp($1, ((__str12) & 4294967295));
				var $cmp1 = ((($call)) | 0) == 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $2 = HEAP32[((__impure_ptr) >> 2)];
					var $_stdout = (($2 + 8) & 4294967295);
					var $3 = HEAP32[(($_stdout) >> 2)];
					HEAP32[((_f_wave) >> 2)] = $3;
					__lastLabel__ = 3;;
				} else if (__label__ == 4) {
					var $4 = $path_addr;
					var $call3 = _fopen($4, ((__str79) & 4294967295));
					HEAP32[((_f_wave) >> 2)] = $call3;
					__lastLabel__ = 4;;
				}
				var $5 = __lastLabel__ == 4 ? $call3 : ($3);
				var $cmp5 = ((($5)) | 0) != 0;
				if ($cmp5) {
					__label__ = 6;;
				} else {
					__label__ = 7;;
				}
				if (__label__ == 6) {
					var $6 = HEAP32[((_f_wave) >> 2)];
					var $call7 = _fwrite(((__ZZL12OpenWaveFilePKciE8wave_hdr) & 4294967295), 1, 24, $6);
					var $7 = HEAP32[((_f_wave) >> 2)];
					var $8 = $rate_addr;
					__Z11Write4BytesP7__sFILEi($7, $8);
					var $9 = HEAP32[((_f_wave) >> 2)];
					var $10 = $rate_addr;
					var $mul = ((($10) * 2) & 4294967295);
					__Z11Write4BytesP7__sFILEi($9, $mul);
					var $11 = HEAP32[((_f_wave) >> 2)];
					var $call8 = _fwrite(((__ZZL12OpenWaveFilePKciE8wave_hdr + 32) & 4294967295), 1, 12, $11);
					$retval = 0;;
				} else if (__label__ == 7) {
					$retval = 1;;
				}
			}
			var $12 = $retval;;
			return $12;
			return null;
		}

		function __ZL11WavegenFilev() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 1236;
			_memset(__stackBase__, 0, 1236);
			var __label__;
			var $retval;
			var $finished;
			var $wav_outbuf = __stackBase__;
			var $fname = __stackBase__ + 1024;
			var $arraydecay = (($wav_outbuf) & 4294967295);
			HEAP32[((_out_start) >> 2)] = $arraydecay;
			HEAP32[((_out_ptr) >> 2)] = $arraydecay;
			var $arraydecay1 = (($wav_outbuf) & 4294967295);
			var $add_ptr = (($arraydecay1 + 1024) & 4294967295);
			HEAP32[((_out_end) >> 2)] = $add_ptr;
			var $call = __Z11WavegenFilli(0);
			$finished = $call;
			var $0 = HEAP32[((_quiet) >> 2)];
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					var $1 = $finished;
					$retval = $1;;
				} else if (__label__ == 2) {
					var $2 = HEAP32[((_f_wave) >> 2)];
					var $cmp = ((($2)) | 0) == 0;
					if ($cmp) {
						__label__ = 3;;
					} else {
						__label__ = 5;;
					}
					$if_then2$$if_end10$5: do {
						if (__label__ == 3) {
							var $arraydecay3 = (($fname) & 4294967295);
							var $3 = HEAP32[((_wavefile_count) >> 2)];
							var $inc = ((($3) + 1) & 4294967295);
							HEAP32[((_wavefile_count) >> 2)] = $inc;
							var $call4 = _sprintf($arraydecay3, ((__str30) & 4294967295), allocate([((_wavefile) & 4294967295), 0, 0, 0, $inc, 0, 0, 0, ((_filetype) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							var $arraydecay5 = (($fname) & 4294967295);
							var $4 = HEAP32[((_samplerate) >> 2)];
							var $call6 = __ZL12OpenWaveFilePKci($arraydecay5, $4);
							var $cmp7 = ((($call6)) | 0) != 0;
							if (!($cmp7)) {
								__label__ = 5;
								break $if_then2$$if_end10$5;
							}
							$retval = 1;
							__label__ = 12;
							break $if_then$$if_end$2;
						}
					} while (0);
					var $5 = HEAP32[((_end_of_sentence) >> 2)];
					var $tobool11 = ((($5)) | 0) != 0;
					if ($tobool11) {
						__label__ = 6;;
					} else {
						__label__ = 9;;
					}
					$if_then12$$if_end17$9: do {
						if (__label__ == 6) {
							HEAP32[((_end_of_sentence) >> 2)] = 0;
							var $6 = HEAPU32[((_samples_split) >> 2)];
							var $cmp13 = ((($6)) >>> 0) > 0;
							if (!($cmp13)) {
								__label__ = 9;
								break $if_then12$$if_end17$9;
							}
							var $7 = HEAPU32[((_samples_total) >> 2)];
							var $8 = HEAPU32[((_samples_split) >> 2)];
							var $cmp14 = ((($7)) >>> 0) > ((($8)) >>> 0);
							if (!($cmp14)) {
								__label__ = 9;
								break $if_then12$$if_end17$9;
							}
							__ZL13CloseWaveFilev();
							HEAP32[((_samples_total) >> 2)] = 0;;
						}
					} while (0);
					var $9 = HEAP32[((_f_wave) >> 2)];
					var $cmp18 = ((($9)) | 0) != 0;
					if ($cmp18) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					if (__label__ == 10) {
						var $10 = HEAP32[((_out_ptr) >> 2)];
						var $arraydecay20 = (($wav_outbuf) & 4294967295);
						var $sub_ptr_lhs_cast = ($10);
						var $sub_ptr_rhs_cast = ($arraydecay20);
						var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
						var $div = ((((($sub_ptr_sub)) | 0) / 2) | 0);
						var $11 = HEAP32[((_samples_total) >> 2)];
						var $add = ((($11) + ($div)) & 4294967295);
						HEAP32[((_samples_total) >> 2)] = $add;
						var $arraydecay21 = (($wav_outbuf) & 4294967295);
						var $12 = HEAP32[((_out_ptr) >> 2)];
						var $arraydecay22 = (($wav_outbuf) & 4294967295);
						var $sub_ptr_lhs_cast23 = ($12);
						var $sub_ptr_rhs_cast24 = ($arraydecay22);
						var $sub_ptr_sub25 = ((($sub_ptr_lhs_cast23) - ($sub_ptr_rhs_cast24)) & 4294967295);
						var $13 = HEAP32[((_f_wave) >> 2)];
						var $call26 = _fwrite($arraydecay21, 1, $sub_ptr_sub25, $13);;
					}
					var $14 = $finished;
					$retval = $14;;
				}
			} while (0);
			var $15 = $retval;
			STACKTOP = __stackBase__;
			return $15;
			return null;
		}

		function __ZL13CloseWaveFilev() {;
			var __label__;
			var $pos;
			var $0 = HEAP32[((_f_wave) >> 2)];
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 1;;
			}
			$return$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((_f_wave) >> 2)];
					var $2 = HEAP32[((__impure_ptr) >> 2)];
					var $_stdout = (($2 + 8) & 4294967295);
					var $3 = HEAP32[(($_stdout) >> 2)];
					var $cmp1 = ((($1)) | 0) == ((($3)) | 0);
					if ($cmp1) {
						__label__ = 3;
						break $return$$lor_lhs_false$2;
					}
					var $4 = HEAP32[((_f_wave) >> 2)];
					var $call = _fflush($4);
					var $5 = HEAP32[((_f_wave) >> 2)];
					var $call2 = _ftell($5);
					$pos = $call2;
					var $6 = HEAP32[((_f_wave) >> 2)];
					var $call3 = _fseek($6, 4, 0);
					var $7 = HEAP32[((_f_wave) >> 2)];
					var $8 = $pos;
					var $sub = ((($8) - 8) & 4294967295);
					__Z11Write4BytesP7__sFILEi($7, $sub);
					var $9 = HEAP32[((_f_wave) >> 2)];
					var $call4 = _fseek($9, 40, 0);
					var $10 = HEAP32[((_f_wave) >> 2)];
					var $11 = $pos;
					var $sub5 = ((($11) - 44) & 4294967295);
					__Z11Write4BytesP7__sFILEi($10, $sub5);
					var $12 = HEAP32[((_f_wave) >> 2)];
					var $call6 = _fclose($12);
					HEAP32[((_f_wave) >> 2)] = 0;;
				}
			} while (0);;
			return;
			return;
		}

		function __Z8isspace2j($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			var $c2;
			$c_addr = $c;
			var $0 = $c_addr;
			var $and = ($0) & 255;
			$c2 = $and;
			var $cmp = ((($and)) | 0) == 0;
			var $1 = $c_addr;
			var $cmp1 = ((($1)) >>> 0) > 32;
			var $or_cond = ($cmp) | ($cmp1);
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				$retval = 1;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function __Z14LookupMnemNameP8MNEM_TABi($table, $value) {;
			var __label__;
			var $retval;
			var $table_addr;
			var $value_addr;
			$table_addr = $table;
			$value_addr = $value;;
			while (1) {
				var $0 = $table_addr;
				var $mnem = (($0) & 4294967295);
				var $1 = HEAP32[(($mnem) >> 2)];
				var $cmp = ((($1)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $table_addr;
				var $value1 = (($2 + 4) & 4294967295);
				var $3 = HEAP32[(($value1) >> 2)];
				var $4 = $value_addr;
				var $cmp2 = ((($3)) | 0) == ((($4)) | 0);
				var $5 = $table_addr;
				if ($cmp2) {
					__label__ = 3;
					break;
				}
				var $incdec_ptr = (($5 + 8) & 4294967295);
				$table_addr = $incdec_ptr;
				__label__ = 1;
				continue;
			}
			if (__label__ == 5) {
				$retval = ((__str13643) & 4294967295);;
			} else if (__label__ == 3) {
				var $mnem3 = (($5) & 4294967295);
				var $6 = HEAP32[(($mnem3) >> 2)];
				$retval = $6;;
			}
			var $7 = $retval;;
			return $7;
			return null;
		}

		function __Z22print_dictionary_flagsPj($flags) {;
			var __label__;
			var $flags_addr;
			$flags_addr = $flags;
			var $0 = $flags_addr;
			var $arrayidx = (($0) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			var $and = ($1) & 15;
			var $add = ((($and) + 64) & 4294967295);
			var $call = __Z14LookupMnemNameP8MNEM_TABi(((_mnem_flags) & 4294967295), $add);
			var $2 = $flags_addr;
			var $arrayidx1 = (($2) & 4294967295);
			var $3 = HEAP32[(($arrayidx1) >> 2)];
			var $4 = $flags_addr;
			var $arrayidx2 = (($4 + 4) & 4294967295);
			var $5 = HEAP32[(($arrayidx2) >> 2)];
			var $call3 = _sprintf(((__ZZ22print_dictionary_flagsPjE3buf) & 4294967295), ((__str59) & 4294967295), allocate([$call, 0, 0, 0, $3, 0, 0, 0, $5, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
			return ((__ZZ22print_dictionary_flagsPjE3buf) & 4294967295);
			return null;
		}

		function __Z10DecodeRulePKciPci($group_chars, $group_length, $rule, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 140;
			_memset(__stackBase__, 0, 140);
			var __label__;
			var __lastLabel__ = null;
			var $group_chars_addr;
			var $group_length_addr;
			var $rule_addr;
			var $control_addr;
			var $rb;
			var $c;
			var $p;
			var $ix;
			var $match_type;
			var $finished;
			var $value;
			var $linenum;
			var $flags;
			var $suffix_char;
			var $condition_num;
			var $at_start;
			var $name;
			var $buf = __stackBase__;
			var $buf_pre = __stackBase__ + 60;
			var $suffix = __stackBase__ + 120;
			$group_chars_addr = $group_chars;
			$group_length_addr = $group_length;
			$rule_addr = $rule;
			$control_addr = $control;
			$finished = 0;
			$linenum = 0;
			$condition_num = 0;
			$at_start = 0;
			$match_type = 0;
			var $arrayidx = (($buf_pre) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			$ix = 0;
			var $0 = $ix;
			var $1 = $group_length_addr;
			var $cmp9 = ((($0)) | 0) < ((($1)) | 0);
			var $2 = $ix;
			if ($cmp9) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = __lastLabel__ == 1 ? $10 : ($2);
						var $4 = $group_chars_addr;
						var $arrayidx1 = (($4 + $3) & 4294967295);
						var $5 = HEAP8[($arrayidx1)];
						var $6 = $ix;
						var $arrayidx2 = (($buf + $6) & 4294967295);
						HEAP8[($arrayidx2)] = $5;
						var $7 = $ix;
						var $inc = ((($7) + 1) & 4294967295);
						$ix = $inc;
						var $8 = $ix;
						var $9 = $group_length_addr;
						var $cmp = ((($8)) | 0) < ((($9)) | 0);
						var $10 = $ix;
						if ($cmp) {
							__lastLabel__ = 1;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 1;
							__label__ = 2;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			var $_lcssa8 = __lastLabel__ == 0 ? $2 : ($10);
			var $arrayidx3 = (($buf + $_lcssa8) & 4294967295);
			HEAP8[($arrayidx3)] = 0;
			var $arraydecay = (($buf) & 4294967295);
			var $call = _strlen($arraydecay);
			var $arrayidx4 = (($buf + $call) & 4294967295);
			$p = $arrayidx4;
			var $11 = $finished;
			var $tobool6 = ((($11)) | 0) != 0;
			var $lnot7 = ($tobool6) ^ 1;
			if ($lnot7) {
				__label__ = 3;;
			} else {
				__label__ = 38;;
			}
			$while_body_lr_ph$$while_end$6: do {
				if (__label__ == 3) {
					var $arraydecay9 = (($buf_pre) & 4294967295);
					var $arraydecay11 = (($buf) & 4294967295);
					var $arraydecay13 = (($buf) & 4294967295);
					var $arraydecay58 = (($suffix) & 4294967295);
					var $arraydecay70 = (($suffix) & 4294967295);
					var $arraydecay80 = (($suffix) & 4294967295);
					var $arraydecay82 = (($suffix) & 4294967295);;
					$while_body$8: while (1) {
						var $12 = $rule_addr;
						var $incdec_ptr = (($12 + 1) & 4294967295);
						$rule_addr = $incdec_ptr;
						var $13 = HEAP8[($12)];
						$rb = $13;
						var $14 = $rb;
						var $conv = ((($14)) & 255);
						var $cmp5 = ((($conv)) | 0) <= 9;
						var $15 = $rb;
						var $conv6 = ((($15)) & 255);
						if ($cmp5) {
							__label__ = 5;;
						} else {
							__label__ = 12;;
						}
						$if_then$$if_end$10: do {
							if (__label__ == 5) {
								if ($conv6 == 0) {
									__label__ = 6;;
								} else if ($conv6 == 3) {
									__label__ = 6;;
								} else if ($conv6 == 8) {
									__label__ = 7;;
								} else if ($conv6 == 1) {
									__label__ = 8;;
								} else if ($conv6 == 2) {
									__label__ = 9;;
								} else if ($conv6 == 9) {
									__label__ = 11;;
								} else if ($conv6 == 5) {
									__label__ = 10;;
								} else {
									__label__ = 37;
									break $if_then$$if_end$10;
								}
								if (__label__ == 6) {
									$finished = 1;
									__label__ = 37;
									break $if_then$$if_end$10;
								} else if (__label__ == 7) {
									$at_start = 1;;
								} else if (__label__ == 9) {
									$match_type = 2;
									var $17 = $p;
									HEAP8[($17)] = 0;
									var $strlen = _strlen($arraydecay11);
									var $endptr = (($arraydecay11 + $strlen) & 4294967295);
									var $src$, $dest$, $stop$, $stop4$, $fast$;
									$src$ = ((__str60) & 4294967295);
									$dest$ = $endptr;
									$stop$ = $src$ + 3;
									if (($dest$ % 4) == ($src$ % 4) && 3 > 8) {
										while ($src$ % 4 !== 0 && $src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										}
										$src$ >>= 2;
										$dest$ >>= 2;
										$stop4$ = $stop$ >> 2;
										while ($src$ < $stop4$) {;;;
											HEAP32[$dest$++] = HEAP32[$src$++];
										}
										$src$ <<= 2;
										$dest$ <<= 2;
									}
									while ($src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									};
									var $call14 = _strlen($arraydecay13);
									var $arrayidx15 = (($buf + $call14) & 4294967295);
									$p = $arrayidx15;
									__label__ = 37;
									break $if_then$$if_end$10;
								} else if (__label__ == 11) {
									var $20 = $rule_addr;
									var $arrayidx20 = (($20 + 1) & 4294967295);
									var $21 = HEAP8[($arrayidx20)];
									var $conv21 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $and = ($conv21) & 255;
									var $sub = ((($and) - 1) & 4294967295);
									$value = $sub;
									var $22 = $rule_addr;
									var $arrayidx22 = (($22) & 4294967295);
									var $23 = HEAP8[($arrayidx22)];
									var $conv23 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $and24 = ($conv23) & 255;
									var $24 = $value;
									var $mul = ((($24) * 255) & 4294967295);
									var $sub25 = ((($mul) - 1) & 4294967295);
									var $add = ((($sub25) + ($and24)) & 4294967295);
									$linenum = $add;
									var $25 = $rule_addr;
									var $add_ptr = (($25 + 2) & 4294967295);
									$rule_addr = $add_ptr;
									__label__ = 37;
									break $if_then$$if_end$10;
								} else if (__label__ == 10) {
									var $18 = $rule_addr;
									var $incdec_ptr17 = (($18 + 1) & 4294967295);
									$rule_addr = $incdec_ptr17;
									var $19 = HEAP8[($18)];
									var $conv18 = (tempInt = (($19)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									$condition_num = $conv18;
									__label__ = 37;
									break $if_then$$if_end$10;
								}
								$match_type = 1;
								var $16 = $p;
								HEAP8[($16)] = 0;
								$p = $arraydecay9;;
							} else if (__label__ == 12) {
								var $cmp27 = ((($conv6)) | 0) == 28;
								if ($cmp27) {
									__label__ = 13;;
								} else {
									__label__ = 17;;
								}
								if (__label__ == 13) {
									var $26 = $rule_addr;
									var $incdec_ptr29 = (($26 + 1) & 4294967295);
									$rule_addr = $incdec_ptr29;
									var $27 = HEAP8[($26)];
									var $conv30 = (tempInt = (($27)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $and31 = ($conv30) & 255;
									$value = $and31;
									var $28 = $value;
									var $cmp32 = ((($28)) | 0) != 1;
									if ($cmp32) {
										__label__ = 15;;
									} else {
										__label__ = 14;;
									}
									$if_then35$$lor_lhs_false$22: do {
										if (__label__ == 14) {
											var $29 = $control_addr;
											var $and33 = ($29) & -2147483648;
											var $tobool34 = ((($and33)) | 0) != 0;
											if ($tobool34) {
												__label__ = 15;
												break $if_then35$$lor_lhs_false$22;
											} else {
												__label__ = 16;
												break $if_then35$$lor_lhs_false$22;
											}
										}
									} while (0);
									if (__label__ == 15) {
										var $30 = $p;
										var $arrayidx36 = (($30) & 4294967295);
										HEAP8[($arrayidx36)] = 36;
										var $31 = $value;
										var $call37 = __Z14LookupMnemNameP8MNEM_TABi(((_mnem_rules) & 4294967295), $31);
										$name = $call37;
										var $32 = $p;
										var $arrayidx38 = (($32 + 1) & 4294967295);
										var $33 = $name;
										var $call39 = _strcpy($arrayidx38, $33);
										var $34 = $name;
										var $call40 = _strlen($34);
										var $add41 = ((($call40) + 1) & 4294967295);
										var $35 = $p;
										var $add_ptr42 = (($35 + $add41) & 4294967295);
										$p = $add_ptr42;;
									}
									$c = 32;;
								} else if (__label__ == 17) {
									var $36 = $rb;
									var $conv44 = ((($36)) & 255);
									var $cmp45 = ((($conv44)) | 0) == 14;
									if ($cmp45) {
										__label__ = 18;;
									} else {
										__label__ = 25;;
									}
									if (__label__ == 18) {
										var $37 = $rule_addr;
										var $arrayidx47 = (($37) & 4294967295);
										var $38 = HEAP8[($arrayidx47)];
										var $conv48 = (tempInt = (($38)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $and49 = ($conv48) & 127;
										var $shl = ((($and49) * 256) & 4294967295);
										var $39 = $rule_addr;
										var $arrayidx50 = (($39 + 1) & 4294967295);
										var $40 = HEAP8[($arrayidx50)];
										var $conv51 = (tempInt = (($40)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $and52 = ($conv51) & 127;
										var $add53 = ((($and52) + ($shl)) & 4294967295);
										$flags = $add53;
										$suffix_char = 83;
										var $41 = $flags;
										var $and54 = ($41) & 4;
										var $tobool55 = ((($and54)) | 0) != 0;
										if ($tobool55) {
											__label__ = 19;;
										} else {
											__label__ = 20;;
										}
										if (__label__ == 19) {
											$suffix_char = 80;;
										}
										var $42 = $suffix_char;
										var $43 = $rule_addr;
										var $arrayidx59 = (($43 + 2) & 4294967295);
										var $44 = HEAP8[($arrayidx59)];
										var $conv60 = (tempInt = (($44)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $and61 = ($conv60) & 127;
										var $call62 = _sprintf($arraydecay58, ((__str62) & 4294967295), allocate([$42, 0, 0, 0, $and61, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $45 = $rule_addr;
										var $add_ptr63 = (($45 + 3) & 4294967295);
										$rule_addr = $add_ptr63;
										$ix = 0;;
										while (1) {
											var $46 = $flags;
											var $and67 = ($46) & 1;
											var $tobool68 = ((($and67)) | 0) != 0;
											if ($tobool68) {
												__label__ = 22;;
											} else {
												__label__ = 23;;
											}
											if (__label__ == 22) {
												var $call71 = _strlen($arraydecay70);
												var $arrayidx72 = (($suffix + $call71) & 4294967295);
												var $47 = $ix;
												var $arrayidx73 = ((((__str61) & 4294967295) + $47) & 4294967295);
												var $48 = HEAP8[($arrayidx73)];
												var $conv74 = (tempInt = (($48)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $char = ((($conv74)) & 255);
												HEAP8[($arrayidx72)] = $char;
												var $nul = (($arrayidx72 + 1) & 4294967295);
												HEAP8[($nul)] = 0;;
											}
											var $49 = $flags;
											var $shr = ($49) >> 1;
											$flags = $shr;
											var $50 = $ix;
											var $inc78 = ((($50) + 1) & 4294967295);
											$ix = $inc78;
											var $cmp65 = ((($inc78)) | 0) < 9;
											if ($cmp65) {
												__label__ = 21;
												continue;
											} else {
												__label__ = 24;
												break;
											}
										}
										var $51 = $p;
										var $call81 = _strcpy($51, $arraydecay80);
										var $call83 = _strlen($arraydecay82);
										var $52 = $p;
										var $add_ptr84 = (($52 + $call83) & 4294967295);
										$p = $add_ptr84;
										$c = 32;;
									} else if (__label__ == 25) {
										var $53 = $rb;
										var $conv86 = ((($53)) & 255);
										var $cmp87 = ((($conv86)) | 0) == 17;
										if ($cmp87) {
											__label__ = 26;;
										} else {
											__label__ = 27;;
										}
										if (__label__ == 26) {
											var $54 = $rule_addr;
											var $incdec_ptr89 = (($54 + 1) & 4294967295);
											$rule_addr = $incdec_ptr89;
											var $55 = HEAP8[($54)];
											var $conv90 = (tempInt = (($55)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $sub91 = ((($conv90) - 65) & 4294967295);
											var $arrayidx92 = ((__ZZ10DecodeRulePKciPciE10symbols_lg + $sub91) & 4294967295);
											var $56 = HEAP8[($arrayidx92)];
											$c = $56;;
										} else if (__label__ == 27) {
											var $57 = $rb;
											var $conv94 = ((($57)) & 255);
											var $cmp95 = ((($conv94)) | 0) == 18;
											if ($cmp95) {
												__label__ = 28;;
											} else {
												__label__ = 31;;
											}
											if (__label__ == 28) {
												var $58 = $rule_addr;
												var $incdec_ptr97 = (($58 + 1) & 4294967295);
												$rule_addr = $incdec_ptr97;
												var $59 = HEAP8[($58)];
												var $conv98 = (tempInt = (($59)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $sub99 = ((($conv98) - 65) & 4294967295);
												$value = $sub99;
												var $60 = $p;
												var $arrayidx100 = (($60) & 4294967295);
												HEAP8[($arrayidx100)] = 76;
												var $61 = $value;
												var $div = ((((($61)) | 0) / 10) | 0);
												var $add101 = ((($div) + 48) & 4294967295);
												var $conv102 = ((($add101)) & 255);
												var $62 = $p;
												var $arrayidx103 = (($62 + 1) & 4294967295);
												HEAP8[($arrayidx103)] = $conv102;
												var $63 = $value;
												var $rem = ((($63)) | 0) % 10;
												var $add104 = ((($rem) + 48) & 4294967295);
												var $conv105 = ((($add104)) & 255);
												$c = $conv105;
												var $64 = $match_type;
												var $cmp106 = ((($64)) | 0) == 1;
												if ($cmp106) {
													__label__ = 29;;
												} else {
													__label__ = 30;;
												}
												if (__label__ == 29) {
													var $65 = $c;
													var $66 = $p;
													var $arrayidx108 = (($66) & 4294967295);
													HEAP8[($arrayidx108)] = $65;
													$c = 76;;
												}
												var $67 = $p;
												var $add_ptr110 = (($67 + 2) & 4294967295);
												$p = $add_ptr110;;
											} else if (__label__ == 31) {
												var $68 = $rb;
												var $conv112 = ((($68)) & 255);
												var $cmp113 = ((($conv112)) | 0) <= 31;
												var $69 = $rb;
												var $idxprom = ((($69)) & 255);
												if ($cmp113) {
													__label__ = 32;;
												} else {
													__label__ = 33;;
												}
												if (__label__ == 32) {
													var $arrayidx115 = ((__ZZ10DecodeRulePKciPciE7symbols + $idxprom) & 4294967295);
													var $70 = HEAP8[($arrayidx115)];
													$c = $70;;
												} else if (__label__ == 33) {
													var $cmp118 = ((($idxprom)) | 0) == 32;
													if ($cmp118) {
														__label__ = 34;;
													} else {
														__label__ = 35;;
													}
													if (__label__ == 34) {
														$c = 95;;
													} else if (__label__ == 35) {
														var $71 = $rb;
														$c = $71;;
													}
												}
											}
										}
									}
								}
								var $72 = $c;
								var $73 = $p;
								var $incdec_ptr127 = (($73 + 1) & 4294967295);
								$p = $incdec_ptr127;
								HEAP8[($73)] = $72;;
							}
						} while (0);
						var $74 = $finished;
						var $tobool = ((($74)) | 0) != 0;
						var $lnot = ($tobool) ^ 1;
						if ($lnot) {
							__label__ = 4;
							continue $while_body$8;
						} else {
							__label__ = 38;
							break $while_body_lr_ph$$while_end$6;
						}
					}
				}
			} while (0);
			var $75 = $p;
			HEAP8[($75)] = 0;
			$p = ((__ZZ10DecodeRulePKciPciE6output) & 4294967295);
			var $76 = $linenum;
			var $cmp128 = ((($76)) | 0) > 0;
			if ($cmp128) {
				__label__ = 39;;
			} else {
				__label__ = 40;;
			}
			if (__label__ == 39) {
				var $77 = $p;
				var $78 = $linenum;
				var $call130 = _sprintf($77, ((__str64) & 4294967295), allocate([$78, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
				var $79 = $p;
				var $add_ptr131 = (($79 + 7) & 4294967295);
				$p = $add_ptr131;;
			}
			var $80 = $condition_num;
			var $cmp133 = ((($80)) | 0) > 0;
			if ($cmp133) {
				__label__ = 41;;
			} else {
				__label__ = 42;;
			}
			if (__label__ == 41) {
				var $81 = $p;
				var $82 = $condition_num;
				var $call135 = _sprintf($81, ((__str65) & 4294967295), allocate([$82, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
				var $83 = $p;
				var $call136 = _strlen($83);
				var $84 = $p;
				var $arrayidx137 = (($84 + $call136) & 4294967295);
				$p = $arrayidx137;;
			}
			var $arraydecay139 = (($buf_pre) & 4294967295);
			var $call140 = _strlen($arraydecay139);
			$ix = $call140;
			var $cmp141 = ((($call140)) | 0) > 0;
			var $_pr = $at_start;
			var $tobool145 = ((($_pr)) | 0) != 0;
			if ($cmp141) {
				__label__ = 44;;
			} else {
				__label__ = 43;;
			}
			$if_then144$$lor_lhs_false142$64: do {
				if (__label__ == 44) {
					if ($tobool145) {
						__label__ = 45;
						break $if_then144$$lor_lhs_false142$64;
					} else {
						__label__ = 46;
						break $if_then144$$lor_lhs_false142$64;
					}
				} else if (__label__ == 43) {
					if ($tobool145) {
						__label__ = 45;
						break $if_then144$$lor_lhs_false142$64;
					} else {
						__label__ = 49;
						break $if_then144$$lor_lhs_false142$64;
					}
				}
			} while (0);
			$if_then146$$while_cond149_preheader$$if_end157$67: do {
				if (__label__ == 45) {
					var $85 = $p;
					var $incdec_ptr147 = (($85 + 1) & 4294967295);
					$p = $incdec_ptr147;
					HEAP8[($85)] = 95;
					__label__ = 46;
					break $if_then146$$while_cond149_preheader$$if_end157$67;
				}
			} while (0);
			if (__label__ == 46) {
				var $86 = $ix;
				var $dec4 = ((($86) - 1) & 4294967295);
				$ix = $dec4;
				var $cmp1505 = ((($dec4)) | 0) >= 0;
				if ($cmp1505) {
					__label__ = 47;;
				} else {
					__label__ = 48;;
				}
				$while_body151$$while_end154$71: do {
					if (__label__ == 47) {
						while (1) {
							var $87 = $ix;
							var $arrayidx152 = (($buf_pre + $87) & 4294967295);
							var $88 = HEAP8[($arrayidx152)];
							var $89 = $p;
							var $incdec_ptr153 = (($89 + 1) & 4294967295);
							$p = $incdec_ptr153;
							HEAP8[($89)] = $88;
							var $90 = $ix;
							var $dec = ((($90) - 1) & 4294967295);
							$ix = $dec;
							var $cmp150 = ((($dec)) | 0) >= 0;
							if ($cmp150) {
								__label__ = 47;
								continue;
							} else {
								__label__ = 48;
								break $while_body151$$while_end154$71;
							}
						}
					}
				} while (0);
				var $91 = $p;
				var $incdec_ptr155 = (($91 + 1) & 4294967295);
				$p = $incdec_ptr155;
				HEAP8[($91)] = 41;
				var $92 = $p;
				var $incdec_ptr156 = (($92 + 1) & 4294967295);
				$p = $incdec_ptr156;
				HEAP8[($92)] = 32;;
			}
			var $93 = $p;
			HEAP8[($93)] = 0;
			var $94 = $p;
			var $arraydecay158 = (($buf) & 4294967295);
			var $call159 = _strcat($94, $arraydecay158);
			var $call160 = _strlen(((__ZZ10DecodeRulePKciPciE6output) & 4294967295));
			$ix = $call160;
			var $cmp1623 = ((($call160)) | 0) < 8;
			var $95 = $ix;
			if ($cmp1623) {
				__lastLabel__ = 49;
				__label__ = 50;;
			} else {
				__lastLabel__ = 49;
				__label__ = 51;;
			}
			$while_body163$$while_end166$76: do {
				if (__label__ == 50) {
					while (1) {
						var $96 = __lastLabel__ == 50 ? $97 : ($95);
						var $inc164 = ((($96) + 1) & 4294967295);
						$ix = $inc164;
						var $arrayidx165 = ((__ZZ10DecodeRulePKciPciE6output + $96) & 4294967295);
						HEAP8[($arrayidx165)] = 32;
						var $_pr2 = $ix;
						var $cmp162 = ((($_pr2)) | 0) < 8;
						var $97 = $ix;
						if ($cmp162) {
							__lastLabel__ = 50;
							__label__ = 50;
							continue;
						} else {
							__lastLabel__ = 50;
							__label__ = 51;
							break $while_body163$$while_end166$76;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 49 ? $95 : ($97);
			var $arrayidx167 = ((__ZZ10DecodeRulePKciPciE6output + $_lcssa) & 4294967295);
			HEAP8[($arrayidx167)] = 0;
			STACKTOP = __stackBase__;
			return ((__ZZ10DecodeRulePKciPciE6output) & 4294967295);
			return null;
		}

		function __Z13string_sorterPPcS0_($a, $b) {;
			var __label__;
			var $retval;
			var $a_addr;
			var $b_addr;
			var $pa;
			var $pb;
			var $ix;
			$a_addr = $a;
			$b_addr = $b;
			var $0 = $a_addr;
			var $1 = HEAP32[(($0) >> 2)];
			$pa = $1;
			var $2 = $b_addr;
			var $3 = HEAP32[(($2) >> 2)];
			$pb = $3;
			var $call = _strcmp($1, $3);
			$ix = $call;
			var $cmp = ((($call)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $4 = $ix;
				$retval = $4;;
			} else if (__label__ == 2) {
				var $5 = $pa;
				var $call1 = _strlen($5);
				var $add = ((($call1) + 1) & 4294967295);
				var $6 = $pa;
				var $add_ptr = (($6 + $add) & 4294967295);
				$pa = $add_ptr;
				var $7 = $pb;
				var $call2 = _strlen($7);
				var $add3 = ((($call2) + 1) & 4294967295);
				var $8 = $pb;
				var $add_ptr4 = (($8 + $add3) & 4294967295);
				$pb = $add_ptr4;
				var $9 = $pa;
				var $10 = $pb;
				var $call5 = _strcmp($9, $10);
				$retval = $call5;;
			}
			var $11 = $retval;;
			return $11;
			return null;
		}

		function __Z17CompileDictionaryPKcS0_P7__sFILEPci($dsource, $dict_name, $log, $fname_err, $flags) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 724;
			_memset(__stackBase__, 0, 724);
			var __label__;
			var $retval;
			var $dsource_addr;
			var $dict_name_addr;
			var $log_addr;
			var $fname_err_addr;
			var $flags_addr;
			var $f_in;
			var $f_out;
			var $offset_rules;
			var $value;
			var $fname_in = __stackBase__;
			var $fname_out = __stackBase__ + 196;
			var $fname_temp = __stackBase__ + 364;
			var $path = __stackBase__ + 532;
			$dsource_addr = $dsource;
			$dict_name_addr = $dict_name;
			$log_addr = $log;
			$fname_err_addr = $fname_err;
			$flags_addr = $flags;
			$offset_rules = 0;
			HEAP32[((__ZL11error_count) >> 2)] = 0;
			HEAP32[((__ZL21error_need_dictionary) >> 2)] = 0;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = ((__ZL19letterGroupsDefined) & 4294967295);
			$stop$ = $dest$ + 26;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $0 = $flags_addr;
			var $and = ($0) & 1;
			HEAP32[((__ZL10debug_flag) >> 2)] = $and;
			var $1 = $dsource_addr;
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$dsource_addr = ((__str13643) & 4294967295);;
			}
			var $2 = $log_addr;
			HEAP32[((__ZL5f_log) >> 2)] = $2;
			var $cmp1 = ((($2)) | 0) == 0;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $3 = HEAP32[((__impure_ptr) >> 2)];
				var $_stderr = (($3 + 12) & 4294967295);
				var $4 = HEAP32[(($_stderr) >> 2)];
				HEAP32[((__ZL5f_log) >> 2)] = $4;;
			}
			var $arraydecay = (($path) & 4294967295);
			var $5 = $dsource_addr;
			var $6 = $dict_name_addr;
			var $call = _sprintf($arraydecay, ((__str66) & 4294967295), allocate([$5, 0, 0, 0, $6, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay4 = (($fname_in) & 4294967295);
			var $arraydecay5 = (($path) & 4294967295);
			var $call6 = _sprintf($arraydecay4, ((__str67) & 4294967295), allocate([$arraydecay5, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay7 = (($fname_in) & 4294967295);
			var $call8 = _fopen($arraydecay7, ((__str51703) & 4294967295));
			$f_in = $call8;
			var $cmp9 = ((($call8)) | 0) == 0;
			if ($cmp9) {
				__label__ = 5;;
			} else {
				__label__ = 9;;
			}
			$if_then10$$if_end23$8: do {
				if (__label__ == 5) {
					var $arraydecay11 = (($fname_in) & 4294967295);
					var $arraydecay12 = (($path) & 4294967295);
					var $call13 = _sprintf($arraydecay11, ((__str69) & 4294967295), allocate([$arraydecay12, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay14 = (($fname_in) & 4294967295);
					var $call15 = __ZL9fopen_logPKcS0_($arraydecay14, ((__str51703) & 4294967295));
					$f_in = $call15;
					var $cmp16 = ((($call15)) | 0) == 0;
					if (!($cmp16)) {
						__label__ = 9;
						break $if_then10$$if_end23$8;
					}
					var $7 = $fname_err_addr;
					var $tobool = ((($7)) | 0) != 0;
					if ($tobool) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						var $8 = $fname_err_addr;
						var $arraydecay19 = (($fname_in) & 4294967295);
						var $call20 = _strcpy($8, $arraydecay19);;
					}
					$retval = -1;
					__label__ = 17;
					break $if_then10$$if_end23$8;
				}
			} while (0);
			if (__label__ == 9) {
				var $arraydecay24 = (($fname_out) & 4294967295);
				var $9 = $dict_name_addr;
				var $call25 = _sprintf($arraydecay24, ((__str116) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0, $9, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
				var $arraydecay26 = (($fname_out) & 4294967295);
				var $call27 = __ZL9fopen_logPKcS0_($arraydecay26, ((__str71) & 4294967295));
				$f_out = $call27;
				var $cmp28 = ((($call27)) | 0) == 0;
				if ($cmp28) {
					__label__ = 10;;
				} else {
					__label__ = 13;;
				}
				if (__label__ == 10) {
					var $10 = $fname_err_addr;
					var $tobool30 = ((($10)) | 0) != 0;
					if ($tobool30) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						var $11 = $fname_err_addr;
						var $arraydecay32 = (($fname_in) & 4294967295);
						var $call33 = _strcpy($11, $arraydecay32);;
					}
					$retval = -1;;
				} else if (__label__ == 13) {
					var $arraydecay36 = (($fname_temp) & 4294967295);
					var $call37 = _sprintf($arraydecay36, ((__str72) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
					$value = 1024;
					var $12 = $f_out;
					var $13 = $value;
					__Z11Write4BytesP7__sFILEi($12, $13);
					var $14 = $f_out;
					var $15 = $offset_rules;
					__Z11Write4BytesP7__sFILEi($14, $15);
					__ZL22compile_dictlist_startv();
					var $16 = HEAP32[((__ZL5f_log) >> 2)];
					var $17 = HEAP32[((_phoneme_tab_number) >> 2)];
					var $arrayidx = ((_phoneme_tab_list + $17 * 48) & 4294967295);
					var $name = (($arrayidx) & 4294967295);
					var $arraydecay38 = (($name) & 4294967295);
					var $call39 = _fprintf($16, ((__str73) & 4294967295), allocate([$arraydecay38, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay40 = (($path) & 4294967295);
					__ZL21compile_dictlist_filePKcS0_($arraydecay40, ((__str74) & 4294967295));
					var $18 = HEAP32[((_translator) >> 2)];
					var $langopts = (($18) & 4294967295);
					var $listx = (($langopts + 260) & 4294967295);
					var $19 = HEAP32[(($listx) >> 2)];
					var $tobool42 = ((($19)) | 0) != 0;
					var $arraydecay44 = (($path) & 4294967295);
					if ($tobool42) {
						__label__ = 14;;
					} else {
						__label__ = 15;;
					}
					if (__label__ == 14) {
						__ZL21compile_dictlist_filePKcS0_($arraydecay44, ((__str75) & 4294967295));
						var $arraydecay46 = (($path) & 4294967295);
						__ZL21compile_dictlist_filePKcS0_($arraydecay46, ((__str76) & 4294967295));;
					} else if (__label__ == 15) {
						__ZL21compile_dictlist_filePKcS0_($arraydecay44, ((__str76) & 4294967295));
						var $arraydecay50 = (($path) & 4294967295);
						__ZL21compile_dictlist_filePKcS0_($arraydecay50, ((__str75) & 4294967295));;
					}
					var $arraydecay53 = (($path) & 4294967295);
					__ZL21compile_dictlist_filePKcS0_($arraydecay53, ((__str77) & 4294967295));
					var $20 = $f_out;
					__ZL20compile_dictlist_endP7__sFILE($20);
					var $21 = $f_out;
					var $call55 = _ftell($21);
					$offset_rules = $call55;
					var $22 = HEAP32[((__ZL5f_log) >> 2)];
					var $arraydecay56 = (($fname_in) & 4294967295);
					var $call57 = _fprintf($22, ((__str78) & 4294967295), allocate([$arraydecay56, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					var $23 = $f_in;
					var $24 = $f_out;
					var $arraydecay58 = (($fname_temp) & 4294967295);
					__ZL17compile_dictrulesP7__sFILES0_Pc($23, $24, $arraydecay58);
					var $25 = $f_in;
					var $call60 = _fclose($25);
					var $26 = $f_out;
					var $call61 = _fseek($26, 4, 0);
					var $27 = $f_out;
					var $28 = $offset_rules;
					__Z11Write4BytesP7__sFILEi($27, $28);
					var $29 = $f_out;
					var $call62 = _fclose($29);
					var $30 = HEAP32[((_translator) >> 2)];
					var $31 = $dict_name_addr;
					var $call63 = __Z14LoadDictionaryP10TranslatorPKci($30, $31, 0);
					var $32 = HEAP32[((__ZL11error_count) >> 2)];
					$retval = $32;;
				}
			}
			var $33 = $retval;
			STACKTOP = __stackBase__;
			return $33;
			return null;
		}

		function __ZL9fopen_logPKcS0_($fname, $access) {;
			var __label__;
			var $fname_addr;
			var $access_addr;
			var $f;
			$fname_addr = $fname;
			$access_addr = $access;
			var $0 = $fname_addr;
			var $1 = $access_addr;
			var $call = _fopen($0, $1);
			$f = $call;
			var $cmp = ((($call)) | 0) == 0;
			var $2 = HEAP32[((__ZL5f_log) >> 2)];
			var $cmp1 = ((($2)) | 0) != 0;
			var $or_cond = ($cmp) & ($cmp1);
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $3 = HEAP32[((__ZL5f_log) >> 2)];
				var $4 = $access_addr;
				var $5 = $fname_addr;
				var $call3 = _fprintf($3, ((__str115) & 4294967295), allocate([$4, 0, 0, 0, $5, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
			}
			var $6 = $f;;
			return $6;
			return null;
		}

		function __ZL22compile_dictlist_startv() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $ix;
			var $p;
			var $p2 = __stackBase__;
			$ix = 0;
			var $0 = $p2;;
			$for_body$2: while (1) {
				var $1 = $ix;
				var $arrayidx = ((__ZL11hash_chains + $1 * 4) & 4294967295);
				var $2 = HEAP32[(($arrayidx) >> 2)];
				$p = $2;
				var $cmp11 = ((($2)) | 0) != 0;
				if ($cmp11) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				$while_body$$while_end$4: do {
					if (__label__ == 2) {
						while (1) {
							var $3 = $p;
							var $src$, $dest$, $stop$, $stop4$, $fast$;
							$src$ = $3;
							$dest$ = $0;
							$stop$ = $src$ + 4;
							if (($dest$ % 4) == ($src$ % 4) && 4 > 8) {
								while ($src$ % 4 !== 0 && $src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								}
								$src$ >>= 2;
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($src$ < $stop4$) {;;;
									HEAP32[$dest$++] = HEAP32[$src$++];
								}
								$src$ <<= 2;
								$dest$ <<= 2;
							}
							while ($src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							};
							var $4 = $p;;
							var $5 = HEAP32[(($p2) >> 2)];
							$p = $5;
							var $cmp1 = ((($5)) | 0) != 0;
							if ($cmp1) {
								__label__ = 2;
								continue;
							} else {
								__label__ = 3;
								break $while_body$$while_end$4;
							}
						}
					}
				} while (0);
				var $6 = $ix;
				var $arrayidx2 = ((__ZL11hash_chains + $6 * 4) & 4294967295);
				HEAP32[(($arrayidx2) >> 2)] = 0;
				var $7 = $ix;
				var $arrayidx3 = ((__ZL11hash_counts + $7 * 4) & 4294967295);
				HEAP32[(($arrayidx3) >> 2)] = 0;
				var $8 = $ix;
				var $inc = ((($8) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 1024;
				if ($cmp) {
					__label__ = 1;
					continue $for_body$2;
				} else {
					__label__ = 4;
					break $for_body$2;
				}
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL21compile_dictlist_filePKcS0_($path, $filename) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 528;
			_memset(__stackBase__, 0, 528);
			var __label__;
			var $retval;
			var $path_addr;
			var $filename_addr;
			var $length;
			var $hash = __stackBase__;
			var $p;
			var $count;
			var $f_in;
			var $buf = __stackBase__ + 4;
			var $fname = __stackBase__ + 204;
			var $dict_line = __stackBase__ + 400;
			$path_addr = $path;
			$filename_addr = $filename;
			$count = 0;
			HEAP8[(__ZL9text_mode_b)] = 0;
			var $arraydecay = (($fname) & 4294967295);
			var $0 = $path_addr;
			var $1 = $filename_addr;
			var $call = _sprintf($arraydecay, ((__str104) & 4294967295), allocate([$0, 0, 0, 0, $1, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay1 = (($fname) & 4294967295);
			var $call2 = _fopen($arraydecay1, ((__str51703) & 4294967295));
			$f_in = $call2;
			var $cmp = ((($call2)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end9$2: do {
				if (__label__ == 1) {
					var $arraydecay3 = (($fname) & 4294967295);
					var $2 = $path_addr;
					var $3 = $filename_addr;
					var $call4 = _sprintf($arraydecay3, ((__str47699) & 4294967295), allocate([$2, 0, 0, 0, $3, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay5 = (($fname) & 4294967295);
					var $call6 = _fopen($arraydecay5, ((__str51703) & 4294967295));
					$f_in = $call6;
					var $cmp7 = ((($call6)) | 0) == 0;
					if (!($cmp7)) {
						__label__ = 3;
						break $if_then$$if_end9$2;
					}
					$retval = -1;
					__label__ = 11;
					break $if_then$$if_end9$2;
				}
			} while (0);
			if (__label__ == 3) {
				var $4 = HEAP32[((__ZL5f_log) >> 2)];
				var $arraydecay10 = (($fname) & 4294967295);
				var $call11 = _fprintf($4, ((__str78) & 4294967295), allocate([$arraydecay10, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
				HEAP32[((__ZL7linenum) >> 2)] = 0;
				var $arraydecay12 = (($buf) & 4294967295);
				var $arraydecay15 = (($buf) & 4294967295);
				var $arraydecay16 = (($dict_line) & 4294967295);
				var $arraydecay33 = (($dict_line) & 4294967295);;
				$while_cond$7: while (1) {
					var $5 = $f_in;
					var $call13 = _fgets($arraydecay12, 200, $5);
					var $cmp14 = ((($call13)) | 0) != 0;
					if (!($cmp14)) {
						__label__ = 10;
						break $while_cond$7;
					}
					var $6 = HEAP32[((__ZL7linenum) >> 2)];
					var $inc = ((($6) + 1) & 4294967295);
					HEAP32[((__ZL7linenum) >> 2)] = $inc;
					var $call17 = __ZL12compile_linePcS_Pi($arraydecay15, $arraydecay16, $hash);
					$length = $call17;
					var $7 = $length;
					var $cmp18 = ((($7)) | 0) == 0;
					if ($cmp18) {
						__label__ = 4;
						continue $while_cond$7;
					}
					var $8 = HEAP32[(($hash) >> 2)];
					var $arrayidx = ((__ZL11hash_counts + $8 * 4) & 4294967295);
					var $9 = HEAP32[(($arrayidx) >> 2)];
					var $inc21 = ((($9) + 1) & 4294967295);
					HEAP32[(($arrayidx) >> 2)] = $inc21;
					var $10 = $length;
					var $add = ((($10) + 4) & 4294967295);
					var $call22 = _malloc($add);
					$p = $call22;
					var $11 = $p;
					var $cmp23 = ((($11)) | 0) == 0;
					if ($cmp23) {
						__label__ = 7;
						break $while_cond$7;
					}
					var $16 = $p;
					var $17 = HEAP32[(($hash) >> 2)];
					var $arrayidx31 = ((__ZL11hash_chains + $17 * 4) & 4294967295);
					var $18 = $arrayidx31;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $18;
					$dest$ = $16;
					$stop$ = $src$ + 4;
					if (($dest$ % 4) == ($src$ % 4) && 4 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $19 = $p;
					var $20 = HEAP32[(($hash) >> 2)];
					var $arrayidx32 = ((__ZL11hash_chains + $20 * 4) & 4294967295);
					HEAP32[(($arrayidx32) >> 2)] = $19;
					var $21 = $p;
					var $add_ptr = (($21 + 4) & 4294967295);
					var $22 = $length;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $arraydecay33;
					$dest$ = $add_ptr;
					$stop$ = $src$ + $22;
					if (($dest$ % 4) == ($src$ % 4) && $22 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $23 = $count;
					var $inc34 = ((($23) + 1) & 4294967295);
					$count = $inc34;
					__label__ = 4;
					continue $while_cond$7;
				}
				$while_end$$if_then24$12: do {
					if (__label__ == 7) {
						var $12 = HEAP32[((__ZL5f_log) >> 2)];
						var $cmp25 = ((($12)) | 0) != 0;
						if (!($cmp25)) {
							__label__ = 10;
							break $while_end$$if_then24$12;
						}
						var $13 = HEAP32[((__ZL5f_log) >> 2)];
						var $14 = _fwrite(((__str106) & 4294967295), 22, 1, $13);
						var $15 = HEAP32[((__ZL11error_count) >> 2)];
						var $inc28 = ((($15) + 1) & 4294967295);
						HEAP32[((__ZL11error_count) >> 2)] = $inc28;;
					}
				} while (0);
				var $24 = HEAP32[((__ZL5f_log) >> 2)];
				var $25 = $count;
				var $call35 = _fprintf($24, ((__str107) & 4294967295), allocate([$25, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
				var $26 = $f_in;
				var $call36 = _fclose($26);
				$retval = 0;;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL20compile_dictlist_endP7__sFILE($f_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $f_out_addr;
			var $hash;
			var $length;
			var $p = __stackBase__;
			$f_out_addr = $f_out;
			$hash = 0;
			var $0 = $p;;
			$for_body$2: while (1) {
				var $1 = $hash;
				var $arrayidx = ((__ZL11hash_chains + $1 * 4) & 4294967295);
				var $2 = HEAP32[(($arrayidx) >> 2)];
				HEAP32[(($p) >> 2)] = $2;
				var $3 = $f_out_addr;
				var $call = _ftell($3);
				var $4 = $hash;
				var $arrayidx2 = ((__ZL11hash_counts + $4 * 4) & 4294967295);
				HEAP32[(($arrayidx2) >> 2)] = $call;
				var $5 = HEAP32[(($p) >> 2)];
				var $cmp31 = ((($5)) | 0) != 0;
				if ($cmp31) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				$while_body$$while_end$4: do {
					if (__label__ == 2) {
						while (1) {
							var $6 = HEAP32[(($p) >> 2)];
							var $add_ptr = (($6 + 4) & 4294967295);
							var $7 = HEAP8[($add_ptr)];
							var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							$length = $conv;
							var $8 = HEAP32[(($p) >> 2)];
							var $add_ptr4 = (($8 + 4) & 4294967295);
							var $9 = $length;
							var $10 = $f_out_addr;
							var $call5 = _fwrite($add_ptr4, $9, 1, $10);
							var $11 = HEAP32[(($p) >> 2)];
							var $src$, $dest$, $stop$, $stop4$, $fast$;
							$src$ = $11;
							$dest$ = $0;
							$stop$ = $src$ + 4;
							if (($dest$ % 4) == ($src$ % 4) && 4 > 8) {
								while ($src$ % 4 !== 0 && $src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								}
								$src$ >>= 2;
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($src$ < $stop4$) {;;;
									HEAP32[$dest$++] = HEAP32[$src$++];
								}
								$src$ <<= 2;
								$dest$ <<= 2;
							}
							while ($src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							};
							var $12 = HEAP32[(($p) >> 2)];
							var $cmp3 = ((($12)) | 0) != 0;
							if ($cmp3) {
								__label__ = 2;
								continue;
							} else {
								__label__ = 3;
								break $while_body$$while_end$4;
							}
						}
					}
				} while (0);
				var $13 = $f_out_addr;
				var $call6 = _fputc(0, $13);
				var $14 = $hash;
				var $inc = ((($14) + 1) & 4294967295);
				$hash = $inc;
				var $cmp1 = ((($inc)) | 0) < 1024;
				if ($cmp1) {
					__label__ = 1;
					continue $for_body$2;
				} else {
					__label__ = 4;
					break $for_body$2;
				}
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL17compile_dictrulesP7__sFILES0_Pc($f_in, $f_out, $fname_temp) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 11876;
			_memset(__stackBase__, 0, 11876);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $f_in_addr;
			var $f_out_addr;
			var $fname_temp_addr;
			var $prule;
			var $p;
			var $ix;
			var $c = __stackBase__;
			var $gp;
			var $f_temp;
			var $n_rules = __stackBase__ + 4;
			var $count;
			var $different;
			var $wc = __stackBase__ + 8;
			var $prev_rgroup_name;
			var $char_code = __stackBase__ + 12;
			var $compile_mode;
			var $buf;
			var $buf1 = __stackBase__ + 16;
			var $rules = __stackBase__ + 516;
			var $n_rgroups;
			var $n_groups3;
			var $rgroup = __stackBase__ + 8516;
			var $replace1;
			var $replace2;
			var $p123;
			$f_in_addr = $f_in;
			$f_out_addr = $f_out;
			$fname_temp_addr = $fname_temp;
			HEAP32[(($n_rules) >> 2)] = 0;
			$count = 0;
			$compile_mode = 0;
			$n_rgroups = 0;
			$n_groups3 = 0;
			HEAP32[((__ZL7linenum) >> 2)] = 0;
			HEAP8[(((__ZL10group_name) & 4294967295))] = 0;
			var $0 = $fname_temp_addr;
			var $call = __ZL9fopen_logPKcS0_($0, ((__str79) & 4294967295));
			$f_temp = $call;
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 2) {
				$retval = 1;;
			} else if (__label__ == 1) {
				var $arraydecay = (($buf1) & 4294967295);
				var $arraydecay25 = (($rules) & 4294967295);
				var $1 = $n_rules;;
				$for_cond$5: while (1) {
					var $2 = HEAP32[((__ZL7linenum) >> 2)];
					var $inc = ((($2) + 1) & 4294967295);
					HEAP32[((__ZL7linenum) >> 2)] = $inc;
					var $3 = $f_in_addr;
					var $call1 = _fgets($arraydecay, 500, $3);
					$buf = $call1;
					var $cmp2 = ((($call1)) | 0) != 0;
					if ($cmp2) {
						__label__ = 4;;
					} else {
						__label__ = 10;;
					}
					$if_then3$$if_then16$7: do {
						if (__label__ == 4) {
							var $4 = $buf;
							var $call4 = _strstr($4, ((__str82734) & 4294967295));
							$p = $call4;
							var $cmp5 = ((($call4)) | 0) != 0;
							if ($cmp5) {
								__label__ = 5;;
							} else {
								__label__ = 6;;
							}
							if (__label__ == 5) {
								var $5 = $p;
								HEAP8[($5)] = 0;;
							}
							var $6 = $buf;
							var $arrayidx = (($6) & 4294967295);
							var $7 = HEAP8[($arrayidx)];
							var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp8 = ((($conv)) | 0) == 13;
							if ($cmp8) {
								__lastLabel__ = 6;
								__label__ = 7;;
							} else {
								__lastLabel__ = 6;
								__label__ = 8;;
							}
							if (__label__ == 7) {
								var $8 = $buf;
								var $incdec_ptr = (($8 + 1) & 4294967295);
								$buf = $incdec_ptr;
								__lastLabel__ = 7;;
							}
							var $9 = __lastLabel__ == 6 ? $6 : ($incdec_ptr);
							var $cmp12 = ((($9)) | 0) == 0;
							if ($cmp12) {
								__label__ = 10;
								break $if_then3$$if_then16$7;
							}
							var $10 = $buf;
							var $arrayidx13 = (($10) & 4294967295);
							var $11 = HEAP8[($arrayidx13)];
							var $conv14 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp15 = ((($conv14)) | 0) == 46;
							if ($cmp15) {
								__label__ = 10;
								break $if_then3$$if_then16$7;
							}
							var $69 = $compile_mode;
							if ($69 == 1) {
								__label__ = 44;;
							} else if ($69 == 2) {
								__label__ = 47;;
							} else {
								__label__ = 3;
								continue $for_cond$5;
							}
							if (__label__ == 44) {
								var $70 = $buf;
								var $call114 = __ZL12compile_rulePc($70);
								$prule = $call114;
								var $71 = $prule;
								var $cmp115 = ((($71)) | 0) != 0;
								if (!($cmp115)) {
									__label__ = 3;
									continue $for_cond$5;
								}
								var $72 = HEAP32[(($n_rules) >> 2)];
								var $cmp117 = ((($72)) | 0) < 2000;
								if (!($cmp117)) {
									__label__ = 3;
									continue $for_cond$5;
								}
								var $73 = $prule;
								var $74 = HEAP32[(($n_rules) >> 2)];
								var $inc119 = ((($74) + 1) & 4294967295);
								HEAP32[(($n_rules) >> 2)] = $inc119;
								var $arrayidx120 = (($rules + $74 * 4) & 4294967295);
								HEAP32[(($arrayidx120) >> 2)] = $73;
								__label__ = 3;
								continue $for_cond$5;
							} else if (__label__ == 47) {
								var $75 = $buf;
								$p123 = $75;
								$replace1 = 0;
								$replace2 = 0;
								var $76 = $p123;
								var $77 = HEAP8[($76)];
								var $conv1254 = (tempInt = (($77)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call1265 = __Z8isspace2j($conv1254);
								var $tobool6 = ((($call1265)) | 0) != 0;
								if ($tobool6) {
									__label__ = 48;;
								} else {
									__label__ = 49;;
								}
								$while_body127$$while_end129$22: do {
									if (__label__ == 48) {
										while (1) {
											var $78 = $p123;
											var $incdec_ptr128 = (($78 + 1) & 4294967295);
											$p123 = $incdec_ptr128;
											var $79 = $p123;
											var $80 = HEAP8[($79)];
											var $conv125 = (tempInt = (($80)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call126 = __Z8isspace2j($conv125);
											var $tobool = ((($call126)) | 0) != 0;
											if ($tobool) {
												__label__ = 48;
												continue;
											} else {
												__label__ = 49;
												break $while_body127$$while_end129$22;
											}
										}
									}
								} while (0);
								$ix = 0;
								var $81 = $p123;
								var $82 = HEAPU8[($81)];
								var $conv1317 = ((($82)) & 255);
								var $cmp1328 = ((($conv1317)) | 0) > 32;
								if ($cmp1328) {
									__label__ = 50;;
								} else {
									__label__ = 51;;
								}
								$while_body133$$while_cond138_loopexit$26: do {
									if (__label__ == 50) {
										while (1) {
											var $83 = $p123;
											var $call134 = __Z7utf8_inPiPKc($c, $83);
											var $84 = $p123;
											var $add_ptr = (($84 + $call134) & 4294967295);
											$p123 = $add_ptr;
											var $85 = HEAP32[(($c) >> 2)];
											var $86 = $ix;
											var $shl = ($85) << ($86);
											var $87 = $replace1;
											var $add135 = ((($87) + ($shl)) & 4294967295);
											$replace1 = $add135;
											var $88 = $ix;
											var $add136 = ((($88) + 16) & 4294967295);
											$ix = $add136;
											var $89 = $p123;
											var $90 = HEAPU8[($89)];
											var $conv131 = ((($90)) & 255);
											var $cmp132 = ((($conv131)) | 0) > 32;
											if ($cmp132) {
												__label__ = 50;
												continue;
											} else {
												__label__ = 51;
												break $while_body133$$while_cond138_loopexit$26;
											}
										}
									}
								} while (0);
								var $91 = $p123;
								var $92 = HEAP8[($91)];
								var $conv1399 = (tempInt = (($92)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call14010 = __Z8isspace2j($conv1399);
								var $tobool14111 = ((($call14010)) | 0) != 0;
								if ($tobool14111) {
									__label__ = 52;;
								} else {
									__label__ = 53;;
								}
								$while_body142$$while_end144$30: do {
									if (__label__ == 52) {
										while (1) {
											var $93 = $p123;
											var $incdec_ptr143 = (($93 + 1) & 4294967295);
											$p123 = $incdec_ptr143;
											var $94 = $p123;
											var $95 = HEAP8[($94)];
											var $conv139 = (tempInt = (($95)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call140 = __Z8isspace2j($conv139);
											var $tobool141 = ((($call140)) | 0) != 0;
											if ($tobool141) {
												__label__ = 52;
												continue;
											} else {
												__label__ = 53;
												break $while_body142$$while_end144$30;
											}
										}
									}
								} while (0);
								$ix = 0;
								var $96 = $p123;
								var $97 = HEAPU8[($96)];
								var $conv14612 = ((($97)) & 255);
								var $cmp14713 = ((($conv14612)) | 0) > 32;
								if ($cmp14713) {
									__label__ = 54;;
								} else {
									__label__ = 55;;
								}
								$while_body148$$while_end154$34: do {
									if (__label__ == 54) {
										while (1) {
											var $98 = $p123;
											var $call149 = __Z7utf8_inPiPKc($c, $98);
											var $99 = $p123;
											var $add_ptr150 = (($99 + $call149) & 4294967295);
											$p123 = $add_ptr150;
											var $100 = HEAP32[(($c) >> 2)];
											var $101 = $ix;
											var $shl151 = ($100) << ($101);
											var $102 = $replace2;
											var $add152 = ((($102) + ($shl151)) & 4294967295);
											$replace2 = $add152;
											var $103 = $ix;
											var $add153 = ((($103) + 16) & 4294967295);
											$ix = $add153;
											var $104 = $p123;
											var $105 = HEAPU8[($104)];
											var $conv146 = ((($105)) & 255);
											var $cmp147 = ((($conv146)) | 0) > 32;
											if ($cmp147) {
												__label__ = 54;
												continue;
											} else {
												__label__ = 55;
												break $while_body148$$while_end154$34;
											}
										}
									}
								} while (0);
								var $106 = $replace1;
								var $cmp155 = ((($106)) | 0) != 0;
								if (!($cmp155)) {
									__label__ = 3;
									continue $for_cond$5;
								}
								var $107 = $f_out_addr;
								var $108 = $replace1;
								__Z11Write4BytesP7__sFILEi($107, $108);
								var $109 = $f_out_addr;
								var $110 = $replace2;
								__Z11Write4BytesP7__sFILEi($109, $110);
								__label__ = 3;
								continue $for_cond$5;
							}
						}
					} while (0);
					var $12 = HEAP32[(($n_rules) >> 2)];
					var $cmp17 = ((($12)) | 0) > 0;
					if ($cmp17) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						var $13 = $n_rgroups;
						var $arrayidx19 = (($rgroup + $13 * 28) & 4294967295);
						var $name = (($arrayidx19) & 4294967295);
						var $arraydecay20 = (($name) & 4294967295);
						var $call21 = _strcpy($arraydecay20, ((__ZL10group_name) & 4294967295));
						var $14 = HEAP32[((__ZL9group3_ix) >> 2)];
						var $15 = $n_rgroups;
						var $arrayidx22 = (($rgroup + $15 * 28) & 4294967295);
						var $group3_ix = (($arrayidx22 + 24) & 4294967295);
						HEAP32[(($group3_ix) >> 2)] = $14;
						var $16 = $f_temp;
						var $call23 = _ftell($16);
						var $17 = $n_rgroups;
						var $arrayidx24 = (($rgroup + $17 * 28) & 4294967295);
						var $start = (($arrayidx24 + 16) & 4294967295);
						HEAP32[(($start) >> 2)] = $call23;
						var $18 = $f_temp;
						var $19 = HEAP32[(($n_rules) >> 2)];
						__ZL17output_rule_groupP7__sFILEiPPcS1_($18, $19, $arraydecay25);
						var $20 = $f_temp;
						var $call26 = _ftell($20);
						var $21 = $n_rgroups;
						var $arrayidx27 = (($rgroup + $21 * 28) & 4294967295);
						var $start28 = (($arrayidx27 + 16) & 4294967295);
						var $22 = HEAP32[(($start28) >> 2)];
						var $sub = ((($call26) - ($22)) & 4294967295);
						var $23 = $n_rgroups;
						var $arrayidx29 = (($rgroup + $23 * 28) & 4294967295);
						var $length = (($arrayidx29 + 20) & 4294967295);
						HEAP32[(($length) >> 2)] = $sub;
						var $24 = $n_rgroups;
						var $inc30 = ((($24) + 1) & 4294967295);
						$n_rgroups = $inc30;
						var $25 = HEAP32[(($n_rules) >> 2)];
						var $26 = $count;
						var $add = ((($26) + ($25)) & 4294967295);
						$count = $add;;
					}
					HEAP32[(($n_rules) >> 2)] = 0;
					var $27 = $compile_mode;
					var $cmp32 = ((($27)) | 0) == 2;
					if ($cmp32) {
						__label__ = 13;;
					} else {
						__label__ = 14;;
					}
					if (__label__ == 13) {
						var $28 = $f_out_addr;
						var $call34 = _fwrite($1, 1, 4, $28);
						$compile_mode = 0;;
					}
					var $29 = $buf;
					var $cmp36 = ((($29)) | 0) == 0;
					if ($cmp36) {
						__label__ = 57;
						break $for_cond$5;
					}
					var $30 = $buf;
					var $call39 = _memcmp($30, ((__str81) & 4294967295), 2);
					var $cmp40 = ((($call39)) | 0) == 0;
					var $31 = $buf;
					if ($cmp40) {
						__label__ = 16;;
					} else {
						__label__ = 17;;
					}
					if (__label__ == 16) {
						var $arrayidx42 = (($31 + 2) & 4294967295);
						var $32 = $f_out_addr;
						__ZL19compile_lettergroupPcP7__sFILE($arrayidx42, $32);
						__label__ = 3;
						continue $for_cond$5;
					} else if (__label__ == 17) {
						var $call45 = _memcmp($31, ((__str82) & 4294967295), 8);
						var $cmp46 = ((($call45)) | 0) == 0;
						if ($cmp46) {
							__label__ = 18;;
						} else {
							__label__ = 20;;
						}
						$if_then47$$if_end53$50: do {
							if (__label__ == 18) {
								$compile_mode = 2;
								var $33 = $f_out_addr;
								var $call48 = _fputc(6, $33);
								var $34 = $f_out_addr;
								var $call49 = _fputc(20, $34);
								var $35 = $f_out_addr;
								var $call5014 = _ftell($35);
								var $and15 = ($call5014) & 3;
								var $cmp5116 = ((($and15)) | 0) != 0;
								if (!($cmp5116)) {
									__label__ = 20;
									break $if_then47$$if_end53$50;
								}
								while (1) {
									var $36 = $f_out_addr;
									var $call52 = _fputc(0, $36);
									var $37 = $f_out_addr;
									var $call50 = _ftell($37);
									var $and = ($call50) & 3;
									var $cmp51 = ((($and)) | 0) != 0;
									if ($cmp51) {
										__label__ = 19;
										continue;
									} else {
										__label__ = 20;
										break $if_then47$$if_end53$50;
									}
								}
							}
						} while (0);
						var $38 = $buf;
						var $call54 = _memcmp($38, ((__str83) & 4294967295), 6);
						var $cmp55 = ((($call54)) | 0) == 0;
						if (!($cmp55)) {
							__label__ = 3;
							continue $for_cond$5;
						}
						$compile_mode = 1;
						var $39 = $buf;
						var $arrayidx57 = (($39 + 6) & 4294967295);
						$p = $arrayidx57;;
						$while_cond58$56: while (1) {
							var $40 = $p;
							var $arrayidx59 = (($40) & 4294967295);
							var $41 = HEAPU8[($arrayidx59)];
							var $conv60 = ((($41)) & 255);
							var $cmp61 = ((($conv60)) | 0) == 32;
							if ($cmp61) {
								__label__ = 24;;
							} else {
								__label__ = 23;;
							}
							if (__label__ == 23) {
								var $42 = $p;
								var $arrayidx62 = (($42) & 4294967295);
								var $43 = HEAPU8[($arrayidx62)];
								var $conv63 = ((($43)) & 255);
								var $cmp64 = ((($conv63)) | 0) == 9;
								if (!($cmp64)) {
									__label__ = 25;
									break $while_cond58$56;
								}
							}
							var $44 = $p;
							var $incdec_ptr66 = (($44 + 1) & 4294967295);
							$p = $incdec_ptr66;
							__label__ = 22;
							continue $while_cond58$56;
						}
						$ix = 0;;
						$while_cond68$62: while (1) {
							var $45 = $p;
							var $46 = HEAPU8[($45)];
							var $conv69 = ((($46)) & 255);
							var $cmp70 = ((($conv69)) | 0) > 32;
							if (!($cmp70)) {
								__label__ = 29;
								break $while_cond68$62;
							}
							var $47 = $ix;
							var $cmp71 = ((($47)) | 0) < 12;
							if (!($cmp71)) {
								__label__ = 29;
								break $while_cond68$62;
							}
							var $48 = $p;
							var $incdec_ptr73 = (($48 + 1) & 4294967295);
							$p = $incdec_ptr73;
							var $49 = HEAP8[($48)];
							var $50 = $ix;
							var $inc74 = ((($50) + 1) & 4294967295);
							$ix = $inc74;
							var $arrayidx75 = ((__ZL10group_name + $50) & 4294967295);
							HEAP8[($arrayidx75)] = $49;
							__label__ = 26;
							continue $while_cond68$62;
						}
						var $51 = $ix;
						var $arrayidx77 = ((__ZL10group_name + $51) & 4294967295);
						HEAP8[($arrayidx77)] = 0;
						HEAP32[((__ZL9group3_ix) >> 2)] = 0;
						var $call78 = _sscanf(((__ZL10group_name) & 4294967295), ((__str84) & 4294967295), allocate([$char_code, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
						var $cmp79 = ((($call78)) | 0) == 1;
						if ($cmp79) {
							__label__ = 30;;
						} else {
							__label__ = 33;;
						}
						$if_then80$$if_else$67: do {
							if (__label__ == 30) {
								$p = ((__ZL10group_name) & 4294967295);
								var $52 = HEAPU32[(($char_code) >> 2)];
								var $cmp81 = ((($52)) >>> 0) > 256;
								if ($cmp81) {
									__label__ = 31;;
								} else {
									__label__ = 32;;
								}
								if (__label__ == 31) {
									var $53 = HEAPU32[(($char_code) >> 2)];
									var $shr = ($53) >>> 8;
									var $conv83 = ((($shr)) & 255);
									var $54 = $p;
									var $incdec_ptr84 = (($54 + 1) & 4294967295);
									$p = $incdec_ptr84;
									HEAP8[($54)] = $conv83;;
								}
								var $55 = HEAP32[(($char_code) >> 2)];
								var $conv86 = ((($55)) & 255);
								var $56 = $p;
								var $incdec_ptr87 = (($56 + 1) & 4294967295);
								$p = $incdec_ptr87;
								HEAP8[($56)] = $conv86;
								var $57 = $p;
								HEAP8[($57)] = 0;
								__label__ = 37;
								break $if_then80$$if_else$67;
							} else if (__label__ == 33) {
								var $58 = HEAP32[((_translator) >> 2)];
								var $letter_bits_offset = (($58 + 964) & 4294967295);
								var $59 = HEAP32[(($letter_bits_offset) >> 2)];
								var $cmp88 = ((($59)) | 0) > 0;
								if (!($cmp88)) {
									__label__ = 37;
									break $if_then80$$if_else$67;
								}
								var $call90 = __Z7utf8_inPiPKc($wc, ((__ZL10group_name) & 4294967295));
								var $60 = HEAP32[(($wc) >> 2)];
								var $61 = HEAP32[((_translator) >> 2)];
								var $letter_bits_offset91 = (($61 + 964) & 4294967295);
								var $62 = HEAP32[(($letter_bits_offset91) >> 2)];
								var $sub92 = ((($60) - ($62)) & 4294967295);
								$ix = $sub92;
								var $cmp93 = ((($sub92)) | 0) >= 0;
								if (!($cmp93)) {
									__label__ = 37;
									break $if_then80$$if_else$67;
								}
								var $63 = $ix;
								var $cmp94 = ((($63)) | 0) < 128;
								if (!($cmp94)) {
									__label__ = 37;
									break $if_then80$$if_else$67;
								}
								var $64 = $ix;
								var $add96 = ((($64) + 1) & 4294967295);
								HEAP32[((__ZL9group3_ix) >> 2)] = $add96;
								__lastLabel__ = 36;
								__label__ = 38;
								break $if_then80$$if_else$67;
							}
						} while (0);
						if (__label__ == 37) {
							var $_pr = HEAP32[((__ZL9group3_ix) >> 2)];
							__lastLabel__ = 37;;
						}
						var $65 = __lastLabel__ == 37 ? $_pr : ($add96);
						var $cmp100 = ((($65)) | 0) == 0;
						if (!($cmp100)) {
							__label__ = 3;
							continue $for_cond$5;
						}
						var $call102 = _strlen(((__ZL10group_name) & 4294967295));
						var $cmp103 = ((($call102)) >>> 0) > 2;
						if (!($cmp103)) {
							__label__ = 3;
							continue $for_cond$5;
						}
						var $call105 = __Z7utf8_inPiPKc($c, ((__ZL10group_name) & 4294967295));
						var $cmp106 = ((($call105)) | 0) < 2;
						if ($cmp106) {
							__label__ = 41;;
						} else {
							__label__ = 42;;
						}
						if (__label__ == 41) {
							var $66 = HEAP32[((__ZL5f_log) >> 2)];
							var $67 = HEAP32[((__ZL7linenum) >> 2)];
							var $call108 = _fprintf($66, ((__str85) & 4294967295), allocate([$67, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $68 = HEAP32[((__ZL11error_count) >> 2)];
							var $inc109 = ((($68) + 1) & 4294967295);
							HEAP32[((__ZL11error_count) >> 2)] = $inc109;;
						}
						HEAP8[(((__ZL10group_name + 2) & 4294967295))] = 0;
						__label__ = 3;
						continue $for_cond$5;
					}
				}
				var $111 = $f_temp;
				var $call158 = _fclose($111);
				var $arraydecay159 = (($rgroup) & 4294967295);
				var $112 = $arraydecay159;
				var $113 = $n_rgroups;
				_qsort($112, $113, 28, 2);
				var $114 = $fname_temp_addr;
				var $call160 = _fopen($114, ((__str18429) & 4294967295));
				$f_temp = $call160;
				var $cmp161 = ((($call160)) | 0) == 0;
				if ($cmp161) {
					__label__ = 58;;
				} else {
					__label__ = 59;;
				}
				if (__label__ == 58) {
					$retval = 2;;
				} else if (__label__ == 59) {
					$prev_rgroup_name = ((__str15397) & 4294967295);
					$gp = 0;
					var $115 = $gp;
					var $116 = $n_rgroups;
					var $cmp1653 = ((($115)) | 0) < ((($116)) | 0);
					if ($cmp1653) {
						__label__ = 60;;
					} else {
						__label__ = 70;;
					}
					$for_body$$for_end210$88: do {
						if (__label__ == 60) {
							$for_body$89: while (1) {
								var $117 = $f_temp;
								var $118 = $gp;
								var $arrayidx166 = (($rgroup + $118 * 28) & 4294967295);
								var $start167 = (($arrayidx166 + 16) & 4294967295);
								var $119 = HEAP32[(($start167) >> 2)];
								var $call168 = _fseek($117, $119, 0);
								var $120 = $gp;
								var $arrayidx169 = (($rgroup + $120 * 28) & 4294967295);
								var $name170 = (($arrayidx169) & 4294967295);
								var $arraydecay171 = (($name170) & 4294967295);
								var $121 = $prev_rgroup_name;
								var $call172 = _strcmp($arraydecay171, $121);
								$different = $call172;
								var $cmp173 = ((($call172)) | 0) != 0;
								if ($cmp173) {
									__label__ = 61;;
								} else {
									__label__ = 67;;
								}
								if (__label__ == 61) {
									var $122 = $gp;
									var $cmp175 = ((($122)) | 0) > 0;
									if ($cmp175) {
										__label__ = 62;;
									} else {
										__label__ = 63;;
									}
									if (__label__ == 62) {
										var $123 = $f_out_addr;
										var $call177 = _fputc(7, $123);;
									}
									var $124 = $f_out_addr;
									var $call179 = _fputc(6, $124);
									var $125 = $gp;
									var $arrayidx180 = (($rgroup + $125 * 28) & 4294967295);
									var $group3_ix181 = (($arrayidx180 + 24) & 4294967295);
									var $126 = HEAP32[(($group3_ix181) >> 2)];
									var $cmp182 = ((($126)) | 0) != 0;
									if ($cmp182) {
										__label__ = 64;;
									} else {
										__label__ = 65;;
									}
									if (__label__ == 64) {
										var $127 = $n_groups3;
										var $inc184 = ((($127) + 1) & 4294967295);
										$n_groups3 = $inc184;
										var $128 = $f_out_addr;
										var $call185 = _fputc(1, $128);
										var $129 = $gp;
										var $arrayidx186 = (($rgroup + $129 * 28) & 4294967295);
										var $group3_ix187 = (($arrayidx186 + 24) & 4294967295);
										var $130 = HEAP32[(($group3_ix187) >> 2)];
										var $131 = $f_out_addr;
										var $call188 = _fputc($130, $131);;
									} else if (__label__ == 65) {
										var $132 = $f_out_addr;
										var $133 = $gp;
										var $arrayidx190 = (($rgroup + $133 * 28) & 4294967295);
										var $name191 = (($arrayidx190) & 4294967295);
										var $arraydecay192 = (($name191) & 4294967295);
										$prev_rgroup_name = $arraydecay192;
										var $fputs = _fputs($arraydecay192, $132);;
									}
									var $134 = $f_out_addr;
									var $call195 = _fputc(0, $134);;
								}
								var $135 = $gp;
								var $arrayidx197 = (($rgroup + $135 * 28) & 4294967295);
								var $length198 = (($arrayidx197 + 20) & 4294967295);
								var $136 = HEAP32[(($length198) >> 2)];
								$ix = $136;
								var $cmp2002 = ((($136)) | 0) > 0;
								if ($cmp2002) {
									__label__ = 68;;
								} else {
									__label__ = 69;;
								}
								$for_body201$$for_end204$101: do {
									if (__label__ == 68) {
										while (1) {
											var $137 = $f_temp;
											var $call202 = _fgetc($137);
											HEAP32[(($c) >> 2)] = $call202;
											var $138 = HEAP32[(($c) >> 2)];
											var $139 = $f_out_addr;
											var $call203 = _fputc($138, $139);
											var $140 = $ix;
											var $dec = ((($140) - 1) & 4294967295);
											$ix = $dec;
											var $cmp200 = ((($dec)) | 0) > 0;
											if ($cmp200) {
												__label__ = 68;
												continue;
											} else {
												__label__ = 69;
												break $for_body201$$for_end204$101;
											}
										}
									}
								} while (0);
								var $141 = $gp;
								var $inc209 = ((($141) + 1) & 4294967295);
								$gp = $inc209;
								var $142 = $gp;
								var $143 = $n_rgroups;
								var $cmp165 = ((($142)) | 0) < ((($143)) | 0);
								if ($cmp165) {
									__label__ = 60;
									continue $for_body$89;
								} else {
									__label__ = 70;
									break $for_body$$for_end210$88;
								}
							}
						}
					} while (0);
					var $144 = $f_out_addr;
					var $call211 = _fputc(7, $144);
					var $145 = $f_out_addr;
					var $call212 = _fputc(0, $145);
					var $146 = $f_temp;
					var $call213 = _fclose($146);
					var $147 = $fname_temp_addr;
					var $call214 = _remove($147);
					var $148 = HEAP32[((__ZL5f_log) >> 2)];
					var $149 = $count;
					var $150 = $n_rgroups;
					var $151 = $n_groups3;
					var $call215 = _fprintf($148, ((__str89) & 4294967295), allocate([$149, 0, 0, 0, $150, 0, 0, 0, $151, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
					$retval = 0;;
				}
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL17output_rule_groupP7__sFILEiPPcS1_($f_out, $n_rules, $rules) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 512;
			_memset(__stackBase__, 0, 512);
			var __label__;
			var $f_out_addr;
			var $n_rules_addr;
			var $rules_addr;
			var $name_addr;
			var $ix;
			var $len1;
			var $len2;
			var $len_name;
			var $p;
			var $p2;
			var $p3;
			var $common;
			var $nextchar_count = __stackBase__;
			$f_out_addr = $f_out;
			$n_rules_addr = $n_rules;
			$rules_addr = $rules;
			$name_addr = ((__ZL10group_name) & 4294967295);
			var $arraydecay = (($nextchar_count) & 4294967295);
			var $0 = $arraydecay;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $0;
			$stop$ = $dest$ + 512;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $1 = $name_addr;
			var $call = _strlen($1);
			$len_name = $call;
			$common = ((__str13643) & 4294967295);
			var $2 = $rules_addr;
			var $3 = $2;
			var $4 = $n_rules_addr;
			_qsort($3, $4, 4, 4);
			var $5 = $name_addr;
			var $call1 = _strcmp($5, ((__str103) & 4294967295));
			var $cmp = ((($call1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$len_name = 0;;
			}
			$ix = 0;
			var $6 = $ix;
			var $7 = $n_rules_addr;
			var $cmp21 = ((($6)) | 0) < ((($7)) | 0);
			if ($cmp21) {
				__label__ = 3;;
			} else {
				__label__ = 11;;
			}
			$for_body$$for_end$5: do {
				if (__label__ == 3) {
					$for_body$6: while (1) {
						var $8 = $ix;
						var $9 = $rules_addr;
						var $arrayidx = (($9 + 4 * $8) & 4294967295);
						var $10 = HEAP32[(($arrayidx) >> 2)];
						$p = $10;
						var $11 = $p;
						var $call3 = _strlen($11);
						var $add = ((($call3) + 1) & 4294967295);
						$len1 = $add;
						var $12 = $len1;
						var $13 = $p;
						var $arrayidx4 = (($13 + $12) & 4294967295);
						$p3 = $arrayidx4;
						var $14 = $p3;
						var $15 = $len_name;
						var $add_ptr = (($14 + $15) & 4294967295);
						$p2 = $add_ptr;
						var $16 = $p2;
						var $call5 = _strlen($16);
						$len2 = $call5;
						var $17 = $p2;
						var $arrayidx6 = (($17) & 4294967295);
						var $18 = HEAPU8[($arrayidx6)];
						var $idxprom = ((($18)) & 255);
						var $arrayidx7 = (($nextchar_count + $idxprom * 2) & 4294967295);
						var $19 = HEAP16[(($arrayidx7) >> 1)];
						var $inc = ((($19) + 1) & 65535);
						HEAP16[(($arrayidx7) >> 1)] = $inc;
						var $20 = $common;
						var $arrayidx8 = (($20) & 4294967295);
						var $21 = HEAP8[($arrayidx8)];
						var $conv = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp9 = ((($conv)) | 0) != 0;
						if ($cmp9) {
							__label__ = 4;;
						} else {
							__label__ = 6;;
						}
						$land_lhs_true$$if_else$8: do {
							if (__label__ == 4) {
								var $22 = $p;
								var $23 = $common;
								var $call10 = _strcmp($22, $23);
								var $cmp11 = ((($call10)) | 0) == 0;
								if (!($cmp11)) {
									__label__ = 6;
									break $land_lhs_true$$if_else$8;
								}
								var $24 = $p2;
								var $25 = $len2;
								var $26 = $f_out_addr;
								var $call13 = _fwrite($24, $25, 1, $26);
								var $27 = $f_out_addr;
								var $call14 = _fputc(0, $27);
								__label__ = 10;
								break $land_lhs_true$$if_else$8;
							}
						} while (0);
						if (__label__ == 6) {
							var $28 = $ix;
							var $29 = $n_rules_addr;
							var $sub = ((($29) - 1) & 4294967295);
							var $cmp15 = ((($28)) | 0) < ((($sub)) | 0);
							if ($cmp15) {
								__label__ = 7;;
							} else {
								__label__ = 9;;
							}
							$land_lhs_true16$$if_end24$13: do {
								if (__label__ == 7) {
									var $30 = $p;
									var $31 = $ix;
									var $add17 = ((($31) + 1) & 4294967295);
									var $32 = $rules_addr;
									var $arrayidx18 = (($32 + 4 * $add17) & 4294967295);
									var $33 = HEAP32[(($arrayidx18) >> 2)];
									var $call19 = _strcmp($30, $33);
									var $cmp20 = ((($call19)) | 0) == 0;
									if (!($cmp20)) {
										__label__ = 9;
										break $land_lhs_true16$$if_end24$13;
									}
									var $34 = $ix;
									var $35 = $rules_addr;
									var $arrayidx22 = (($35 + 4 * $34) & 4294967295);
									var $36 = HEAP32[(($arrayidx22) >> 2)];
									$common = $36;
									var $37 = $f_out_addr;
									var $call23 = _fputc(4, $37);;
								}
							} while (0);
							var $38 = $p2;
							var $39 = $len2;
							var $40 = $f_out_addr;
							var $call25 = _fwrite($38, $39, 1, $40);
							var $41 = $f_out_addr;
							var $call26 = _fputc(3, $41);
							var $42 = $p;
							var $43 = $len1;
							var $44 = $f_out_addr;
							var $call27 = _fwrite($42, $43, 1, $44);;
						}
						var $45 = $ix;
						var $inc29 = ((($45) + 1) & 4294967295);
						$ix = $inc29;
						var $46 = $ix;
						var $47 = $n_rules_addr;
						var $cmp2 = ((($46)) | 0) < ((($47)) | 0);
						if ($cmp2) {
							__label__ = 3;
							continue $for_body$6;
						} else {
							__label__ = 11;
							break $for_body$$for_end$5;
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL19compile_lettergroupPcP7__sFILE($input, $f_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 1000;
			_memset(__stackBase__, 0, 1000);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $input_addr;
			var $f_out_addr;
			var $p;
			var $p_start;
			var $group;
			var $ix;
			var $n_items;
			var $length;
			var $max_length;
			var $items = __stackBase__;
			var $item_length = __stackBase__ + 800;
			$input_addr = $input;
			$f_out_addr = $f_out;
			$max_length = 0;
			var $0 = $input_addr;
			$p = $0;
			var $1 = $p;
			var $arrayidx = (($1) & 4294967295);
			var $2 = HEAP8[($arrayidx)];
			var $conv = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $isdigittmp = ((($conv) - 48) & 4294967295);
			var $isdigit = ((($isdigittmp)) >>> 0) < 10;
			var $call = ((($isdigit)) & 1);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$lor_lhs_false$$if_then$2: do {
				if (__label__ == 1) {
					var $3 = $p;
					var $arrayidx1 = (($3 + 1) & 4294967295);
					var $4 = HEAP8[($arrayidx1)];
					var $conv2 = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp1 = ((($conv2) - 48) & 4294967295);
					var $isdigit2 = ((($isdigittmp1)) >>> 0) < 10;
					var $call3 = ((($isdigit2)) & 1);
					var $tobool4 = ((($call3)) | 0) != 0;
					if (!($tobool4)) {
						__label__ = 2;
						break $lor_lhs_false$$if_then$2;
					}
					var $8 = $p;
					var $arrayidx6 = (($8) & 4294967295);
					var $call7 = _atoi($arrayidx6);
					$group = $call7;
					var $9 = $group;
					var $cmp = ((($9)) | 0) >= 26;
					if ($cmp) {
						__label__ = 5;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 5) {
						var $12 = HEAP32[((__ZL5f_log) >> 2)];
						var $13 = HEAP32[((__ZL7linenum) >> 2)];
						var $call9 = _fprintf($12, ((__str101) & 4294967295), allocate([$13, 0, 0, 0, 25, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
						var $14 = HEAP32[((__ZL11error_count) >> 2)];
						var $inc10 = ((($14) + 1) & 4294967295);
						HEAP32[((__ZL11error_count) >> 2)] = $inc10;
						$retval = 1;
						__label__ = 26;
						break $lor_lhs_false$$if_then$2;
					} else if (__label__ == 4) {
						var $10 = $p;
						var $11 = HEAP8[($10)];
						var $conv1210 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call1311 = __Z8isspace2j($conv1210);
						var $tobool1412 = ((($call1311)) | 0) != 0;
						var $lnot13 = ($tobool1412) ^ 1;
						if ($lnot13) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						$while_body$$while_end$8: do {
							if (__label__ == 6) {
								while (1) {
									var $15 = $p;
									var $incdec_ptr = (($15 + 1) & 4294967295);
									$p = $incdec_ptr;
									var $16 = $p;
									var $17 = HEAP8[($16)];
									var $conv12 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $call13 = __Z8isspace2j($conv12);
									var $tobool14 = ((($call13)) | 0) != 0;
									var $lnot = ($tobool14) ^ 1;
									if ($lnot) {
										__label__ = 6;
										continue;
									} else {
										__label__ = 7;
										break $while_body$$while_end$8;
									}
								}
							}
						} while (0);
						var $18 = $f_out_addr;
						var $call15 = _fputc(6, $18);
						var $19 = $f_out_addr;
						var $call16 = _fputc(18, $19);
						var $20 = $group;
						var $add = ((($20) + 65) & 4294967295);
						var $21 = $f_out_addr;
						var $call17 = _fputc($add, $21);
						var $22 = $group;
						var $arrayidx18 = ((__ZL19letterGroupsDefined + $22) & 4294967295);
						var $23 = HEAP8[($arrayidx18)];
						var $conv19 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp20 = ((($conv19)) | 0) != 0;
						if ($cmp20) {
							__label__ = 8;;
						} else {
							__label__ = 9;;
						}
						if (__label__ == 8) {
							var $24 = HEAP32[((__ZL5f_log) >> 2)];
							var $25 = HEAP32[((__ZL7linenum) >> 2)];
							var $26 = $group;
							var $call22 = _fprintf($24, ((__str102) & 4294967295), allocate([$25, 0, 0, 0, $26, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
							var $27 = HEAP32[((__ZL11error_count) >> 2)];
							var $inc23 = ((($27) + 1) & 4294967295);
							HEAP32[((__ZL11error_count) >> 2)] = $inc23;;
						}
						var $28 = $group;
						var $arrayidx25 = ((__ZL19letterGroupsDefined + $28) & 4294967295);
						HEAP8[($arrayidx25)] = 1;
						$n_items = 0;
						__lastLabel__ = 9;;
						$while_cond26$15: while (1) {
							var $29 = __lastLabel__ == 18 ? $_pr : (0);
							var $cmp27 = ((($29)) | 0) < 200;
							if (!($cmp27)) {
								__label__ = 19;
								break $while_cond26$15;
							}
							var $30 = $p;
							var $31 = HEAP8[($30)];
							var $conv306 = (tempInt = (($31)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $call317 = __Z8isspace2j($conv306);
							var $tobool328 = ((($call317)) | 0) != 0;
							var $32 = $p;
							if ($tobool328) {
								__lastLabel__ = 11;
								__label__ = 12;;
							} else {
								__lastLabel__ = 11;
								__label__ = 13;;
							}
							$while_body33$$while_end35$18: do {
								if (__label__ == 12) {
									while (1) {
										var $33 = __lastLabel__ == 12 ? $36 : ($32);
										var $incdec_ptr34 = (($33 + 1) & 4294967295);
										$p = $incdec_ptr34;
										var $34 = $p;
										var $35 = HEAP8[($34)];
										var $conv30 = (tempInt = (($35)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $call31 = __Z8isspace2j($conv30);
										var $tobool32 = ((($call31)) | 0) != 0;
										var $36 = $p;
										if ($tobool32) {
											__lastLabel__ = 12;
											__label__ = 12;
											continue;
										} else {
											__lastLabel__ = 12;
											__label__ = 13;
											break $while_body33$$while_end35$18;
										}
									}
								}
							} while (0);
							var $_lcssa = __lastLabel__ == 11 ? $32 : ($36);
							var $37 = HEAP8[($_lcssa)];
							var $conv36 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp37 = ((($conv36)) | 0) == 0;
							if ($cmp37) {
								__label__ = 19;
								break $while_cond26$15;
							}
							var $38 = $p;
							$p_start = $38;
							var $39 = $n_items;
							var $arrayidx40 = (($items + $39 * 4) & 4294967295);
							HEAP32[(($arrayidx40) >> 2)] = $38;;
							while (1) {
								var $40 = $p;
								var $41 = HEAP8[($40)];
								var $conv42 = (tempInt = (($41)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $and = ($conv42) & 255;
								var $cmp43 = ((($and)) | 0) > 32;
								var $42 = $p;
								var $incdec_ptr45 = (($42 + 1) & 4294967295);
								$p = $incdec_ptr45;
								if ($cmp43) {
									__label__ = 15;
									continue;
								} else {
									__label__ = 16;
									break;
								}
							}
							HEAP8[($42)] = 0;
							var $43 = $p;
							var $44 = $p_start;
							var $sub_ptr_lhs_cast = ($43);
							var $sub_ptr_rhs_cast = ($44);
							var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
							$length = $sub_ptr_sub;
							var $45 = $length;
							var $46 = $max_length;
							var $cmp48 = ((($45)) | 0) > ((($46)) | 0);
							if ($cmp48) {
								__label__ = 17;;
							} else {
								__label__ = 18;;
							}
							if (__label__ == 17) {
								var $47 = $length;
								$max_length = $47;;
							}
							var $48 = $length;
							var $conv51 = ((($48)) & 255);
							var $49 = $n_items;
							var $inc52 = ((($49) + 1) & 4294967295);
							$n_items = $inc52;
							var $arrayidx53 = (($item_length + $49) & 4294967295);
							HEAP8[($arrayidx53)] = $conv51;
							var $_pr = $n_items;
							__lastLabel__ = 18;
							__label__ = 10;
							continue $while_cond26$15;
						}
						var $_pr3 = $max_length;
						var $cmp565 = ((($_pr3)) | 0) > 1;
						if ($cmp565) {
							__label__ = 20;;
						} else {
							__label__ = 25;;
						}
						$while_body57$$while_end67$30: do {
							if (__label__ == 20) {
								$while_body57$31: while (1) {
									$ix = 0;
									var $50 = $ix;
									var $51 = $n_items;
									var $cmp584 = ((($50)) | 0) < ((($51)) | 0);
									if ($cmp584) {
										__label__ = 21;;
									} else {
										__label__ = 24;;
									}
									$for_body$$for_end$33: do {
										if (__label__ == 21) {
											while (1) {
												var $52 = $ix;
												var $arrayidx59 = (($item_length + $52) & 4294967295);
												var $53 = HEAP8[($arrayidx59)];
												var $conv60 = (tempInt = (($53)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $54 = $max_length;
												var $cmp61 = ((($conv60)) | 0) == ((($54)) | 0);
												if ($cmp61) {
													__label__ = 22;;
												} else {
													__label__ = 23;;
												}
												if (__label__ == 22) {
													var $55 = $ix;
													var $arrayidx63 = (($items + $55 * 4) & 4294967295);
													var $56 = HEAP32[(($arrayidx63) >> 2)];
													var $57 = $max_length;
													var $58 = $f_out_addr;
													var $call64 = _fwrite($56, 1, $57, $58);;
												}
												var $59 = $ix;
												var $inc66 = ((($59) + 1) & 4294967295);
												$ix = $inc66;
												var $60 = $ix;
												var $61 = $n_items;
												var $cmp58 = ((($60)) | 0) < ((($61)) | 0);
												if ($cmp58) {
													__label__ = 21;
													continue;
												} else {
													__label__ = 24;
													break $for_body$$for_end$33;
												}
											}
										}
									} while (0);
									var $62 = $max_length;
									var $dec = ((($62) - 1) & 4294967295);
									$max_length = $dec;
									var $cmp56 = ((($dec)) | 0) > 1;
									if ($cmp56) {
										__label__ = 20;
										continue $while_body57$31;
									} else {
										__label__ = 25;
										break $while_body57$$while_end67$30;
									}
								}
							}
						} while (0);
						var $63 = $f_out_addr;
						var $call68 = _fputc(7, $63);
						$retval = 0;
						__label__ = 26;
						break $lor_lhs_false$$if_then$2;
					}
				}
			} while (0);
			if (__label__ == 2) {
				var $5 = HEAP32[((__ZL5f_log) >> 2)];
				var $6 = HEAP32[((__ZL7linenum) >> 2)];
				var $call5 = _fprintf($5, ((__str100) & 4294967295), allocate([$6, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
				var $7 = HEAP32[((__ZL11error_count) >> 2)];
				var $inc = ((($7) + 1) & 4294967295);
				HEAP32[((__ZL11error_count) >> 2)] = $inc;
				$retval = 1;;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL12compile_rulePc($input) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 244;
			_memset(__stackBase__, 0, 244);
			var __label__;
			var $retval;
			var $input_addr;
			var $ix;
			var $c;
			var $wc = __stackBase__;
			var $p;
			var $prule;
			var $len;
			var $len_name;
			var $start;
			var $state = __stackBase__ + 4;
			var $finish;
			var $pre_bracket;
			var $buf = __stackBase__ + 8;
			var $output = __stackBase__ + 88;
			var $bad_phoneme = __stackBase__ + 240;
			$input_addr = $input;
			HEAP32[(($state) >> 2)] = 2;
			$finish = 0;
			$pre_bracket = 0;
			var $arrayidx = (($buf) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			HEAP8[(((__ZL9rule_cond) & 4294967295))] = 0;
			HEAP8[(((__ZL8rule_pre) & 4294967295))] = 0;
			HEAP8[(((__ZL9rule_post) & 4294967295))] = 0;
			HEAP8[(((__ZL10rule_match) & 4294967295))] = 0;
			HEAP8[(((__ZL13rule_phonemes) & 4294967295))] = 0;
			var $arraydecay = (($buf) & 4294967295);
			$p = $arraydecay;
			$ix = 0;
			var $0 = $finish;
			var $cmp2 = ((($0)) | 0) == 0;
			if ($cmp2) {
				__label__ = 1;;
			} else {
				__label__ = 13;;
			}
			$for_body_lr_ph$$for_end$2: do {
				if (__label__ == 1) {
					var $arraydecay3 = (($buf) & 4294967295);
					var $arraydecay4 = (($buf) & 4294967295);
					var $arraydecay6 = (($buf) & 4294967295);
					var $arraydecay7 = (($buf) & 4294967295);
					var $arraydecay12 = (($buf) & 4294967295);
					var $arraydecay14 = (($buf) & 4294967295);
					var $arraydecay15 = (($buf) & 4294967295);;
					$for_body$4: while (1) {
						var $1 = $ix;
						var $2 = $input_addr;
						var $arrayidx1 = (($2 + $1) & 4294967295);
						var $3 = HEAP8[($arrayidx1)];
						$c = $3;
						var $4 = $ix;
						var $5 = $input_addr;
						var $arrayidx2 = (($5 + $4) & 4294967295);
						var $6 = HEAPU8[($arrayidx2)];
						$c = $6;
						var $conv = ((($6)) & 255);
						if ($conv == 41) {
							__label__ = 3;;
						} else if ($conv == 40) {
							__label__ = 4;;
						} else if ($conv == 10) {
							__label__ = 6;
							break $for_body$4;
						} else if ($conv == 13) {
							__label__ = 6;
							break $for_body$4;
						} else if ($conv == 0) {
							__label__ = 6;
							break $for_body$4;
						} else if ($conv == 9) {
							__label__ = 7;;
						} else if ($conv == 32) {
							__label__ = 7;;
						} else if ($conv == 63) {
							__label__ = 8;;
						} else {
							__label__ = 11;;
						}
						$sw_default$$sw_bb$$sw_bb5$$sw_bb13$$sw_bb16$6: do {
							if (__label__ == 11) {
								var $21 = $c;
								var $22 = $p;
								var $incdec_ptr20 = (($22 + 1) & 4294967295);
								$p = $incdec_ptr20;
								HEAP8[($22)] = $21;;
							} else if (__label__ == 3) {
								var $7 = $p;
								HEAP8[($7)] = 0;
								HEAP32[(($state) >> 2)] = 1;
								$pre_bracket = 1;
								__ZL16copy_rule_stringPcRi($arraydecay3, $state);
								$p = $arraydecay4;;
							} else if (__label__ == 4) {
								var $8 = $p;
								HEAP8[($8)] = 0;
								HEAP32[(($state) >> 2)] = 2;
								__ZL16copy_rule_stringPcRi($arraydecay6, $state);
								HEAP32[(($state) >> 2)] = 3;
								$p = $arraydecay7;
								var $9 = $ix;
								var $add = ((($9) + 1) & 4294967295);
								var $10 = $input_addr;
								var $arrayidx8 = (($10 + $add) & 4294967295);
								var $11 = HEAP8[($arrayidx8)];
								var $conv9 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp10 = ((($conv9)) | 0) == 32;
								if (!($cmp10)) {
									__label__ = 12;
									break $sw_default$$sw_bb$$sw_bb5$$sw_bb13$$sw_bb16$6;
								}
								var $12 = HEAP32[((__ZL5f_log) >> 2)];
								var $13 = HEAP32[((__ZL7linenum) >> 2)];
								var $call = _fprintf($12, ((__str90) & 4294967295), allocate([$13, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $14 = HEAP32[((__ZL11error_count) >> 2)];
								var $inc = ((($14) + 1) & 4294967295);
								HEAP32[((__ZL11error_count) >> 2)] = $inc;;
							} else if (__label__ == 7) {
								var $17 = $p;
								HEAP8[($17)] = 0;
								__ZL16copy_rule_stringPcRi($arraydecay14, $state);
								$p = $arraydecay15;;
							} else if (__label__ == 8) {
								var $18 = HEAP32[(($state) >> 2)];
								var $cmp17 = ((($18)) | 0) == 2;
								if ($cmp17) {
									__label__ = 9;;
								} else {
									__label__ = 10;;
								}
								if (__label__ == 9) {
									HEAP32[(($state) >> 2)] = 0;;
								} else if (__label__ == 10) {
									var $19 = $c;
									var $20 = $p;
									var $incdec_ptr = (($20 + 1) & 4294967295);
									$p = $incdec_ptr;
									HEAP8[($20)] = $19;;
								}
							}
						} while (0);
						var $_pr = $finish;
						var $23 = $ix;
						var $inc21 = ((($23) + 1) & 4294967295);
						$ix = $inc21;
						var $cmp = ((($_pr)) | 0) == 0;
						if ($cmp) {
							__label__ = 2;
							continue $for_body$4;
						} else {
							__label__ = 13;
							break $for_body_lr_ph$$for_end$2;
						}
					}
					var $15 = $p;
					HEAP8[($15)] = 0;
					__ZL16copy_rule_stringPcRi($arraydecay12, $state);
					$finish = 1;
					var $16 = $ix;
					var $inc213 = ((($16) + 1) & 4294967295);
					$ix = $inc213;;
				}
			} while (0);
			var $call22 = _strcmp(((__ZL10rule_match) & 4294967295), ((__str91) & 4294967295));
			var $cmp23 = ((($call22)) | 0) == 0;
			if ($cmp23) {
				__label__ = 14;;
			} else {
				__label__ = 15;;
			}
			if (__label__ == 14) {
				var $call25 = _strcpy(((__ZL10rule_match) & 4294967295), ((__ZL10group_name) & 4294967295));;
			}
			var $24 = HEAP8[(((__ZL10rule_match) & 4294967295))];
			var $conv27 = (tempInt = (($24)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp28 = ((($conv27)) | 0) == 0;
			if ($cmp28) {
				__label__ = 16;;
			} else {
				__label__ = 19;;
			}
			if (__label__ == 16) {
				var $25 = HEAP8[(((__ZL9rule_post) & 4294967295))];
				var $conv30 = (tempInt = (($25)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp31 = ((($conv30)) | 0) != 0;
				if ($cmp31) {
					__label__ = 17;;
				} else {
					__label__ = 18;;
				}
				if (__label__ == 17) {
					var $26 = HEAP32[((__ZL5f_log) >> 2)];
					var $27 = HEAP32[((__ZL7linenum) >> 2)];
					var $call33 = _fprintf($26, ((__str92) & 4294967295), allocate([$27, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
					var $28 = HEAP32[((__ZL11error_count) >> 2)];
					var $inc34 = ((($28) + 1) & 4294967295);
					HEAP32[((__ZL11error_count) >> 2)] = $inc34;;
				}
				$retval = 0;;
			} else if (__label__ == 19) {
				var $arraydecay37 = (($buf) & 4294967295);
				var $arraydecay38 = (($bad_phoneme) & 4294967295);
				var $call39 = __Z14EncodePhonemesPcS_Ph(((__ZL13rule_phonemes) & 4294967295), $arraydecay37, $arraydecay38);
				var $arrayidx40 = (($bad_phoneme) & 4294967295);
				var $29 = HEAPU8[($arrayidx40)];
				var $conv41 = ((($29)) & 255);
				var $cmp42 = ((($conv41)) | 0) != 0;
				if ($cmp42) {
					__label__ = 20;;
				} else {
					__label__ = 21;;
				}
				if (__label__ == 20) {
					var $30 = HEAP32[((__ZL5f_log) >> 2)];
					var $31 = HEAP32[((__ZL7linenum) >> 2)];
					var $arrayidx44 = (($bad_phoneme) & 4294967295);
					var $32 = HEAPU8[($arrayidx44)];
					var $conv45 = ((($32)) & 255);
					var $33 = $input_addr;
					var $call46 = _fprintf($30, ((__str93) & 4294967295), allocate([$31, 0, 0, 0, $conv45, 0, 0, 0, $33, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $34 = HEAP32[((__ZL11error_count) >> 2)];
					var $inc47 = ((($34) + 1) & 4294967295);
					HEAP32[((__ZL11error_count) >> 2)] = $inc47;;
				}
				var $arraydecay49 = (($output) & 4294967295);
				var $arraydecay50 = (($buf) & 4294967295);
				var $call51 = _strcpy($arraydecay49, $arraydecay50);
				var $arraydecay52 = (($buf) & 4294967295);
				var $call53 = _strlen($arraydecay52);
				var $add54 = ((($call53) + 1) & 4294967295);
				$len = $add54;
				var $call55 = _strlen(((__ZL10group_name) & 4294967295));
				$len_name = $call55;
				var $cmp56 = ((($call55)) | 0) > 0;
				if ($cmp56) {
					__label__ = 22;;
				} else {
					__label__ = 26;;
				}
				$land_lhs_true$$if_end70$31: do {
					if (__label__ == 22) {
						var $35 = $len_name;
						var $call57 = _memcmp(((__ZL10rule_match) & 4294967295), ((__ZL10group_name) & 4294967295), $35);
						var $cmp58 = ((($call57)) | 0) != 0;
						if (!($cmp58)) {
							__label__ = 26;
							break $land_lhs_true$$if_end70$31;
						}
						var $call60 = __Z7utf8_inPiPKc($wc, ((__ZL10rule_match) & 4294967295));
						var $36 = HEAP8[(((__ZL10group_name) & 4294967295))];
						var $conv61 = (tempInt = (($36)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp62 = ((($conv61)) | 0) == 57;
						if ($cmp62) {
							__label__ = 24;;
						} else {
							__label__ = 25;;
						}
						if (__label__ == 24) {
							var $37 = HEAP32[(($wc) >> 2)];
							var $call64 = __Z7IsDigitj($37);
							var $tobool = ((($call64)) | 0) != 0;
							if ($tobool) {
								__label__ = 26;
								break $land_lhs_true$$if_end70$31;
							}
						}
						var $38 = HEAP32[((__ZL5f_log) >> 2)];
						var $39 = HEAP32[((__ZL7linenum) >> 2)];
						var $call67 = _fprintf($38, ((__str94) & 4294967295), allocate([$39, 0, 0, 0, ((__ZL10rule_match) & 4294967295), 0, 0, 0, ((__ZL10group_name) & 4294967295), 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						var $40 = HEAP32[((__ZL11error_count) >> 2)];
						var $inc68 = ((($40) + 1) & 4294967295);
						HEAP32[((__ZL11error_count) >> 2)] = $inc68;;
					}
				} while (0);
				var $41 = $len;
				var $arrayidx71 = (($output + $41) & 4294967295);
				var $call72 = _strcpy($arrayidx71, ((__ZL10rule_match) & 4294967295));
				var $call73 = _strlen(((__ZL10rule_match) & 4294967295));
				var $42 = $len;
				var $add74 = ((($42) + ($call73)) & 4294967295);
				$len = $add74;
				var $43 = HEAP32[((__ZL10debug_flag) >> 2)];
				var $tobool75 = ((($43)) | 0) != 0;
				if ($tobool75) {
					__label__ = 27;;
				} else {
					__label__ = 28;;
				}
				if (__label__ == 27) {
					var $44 = $len;
					var $arrayidx77 = (($output + $44) & 4294967295);
					HEAP8[($arrayidx77)] = 9;
					var $45 = HEAP32[((__ZL7linenum) >> 2)];
					var $rem = ((($45)) | 0) % 255;
					var $add78 = ((($rem) + 1) & 4294967295);
					var $conv79 = ((($add78)) & 255);
					var $46 = $len;
					var $add80 = ((($46) + 1) & 4294967295);
					var $arrayidx81 = (($output + $add80) & 4294967295);
					HEAP8[($arrayidx81)] = $conv79;
					var $47 = HEAP32[((__ZL7linenum) >> 2)];
					var $div = ((((($47)) | 0) / 255) | 0);
					var $add82 = ((($div) + 1) & 4294967295);
					var $conv83 = ((($add82)) & 255);
					var $48 = $len;
					var $add84 = ((($48) + 2) & 4294967295);
					var $arrayidx85 = (($output + $add84) & 4294967295);
					HEAP8[($arrayidx85)] = $conv83;
					var $49 = $len;
					var $add86 = ((($49) + 3) & 4294967295);
					$len = $add86;;
				}
				var $50 = HEAP8[(((__ZL9rule_cond) & 4294967295))];
				var $conv88 = (tempInt = (($50)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp89 = ((($conv88)) | 0) != 0;
				if ($cmp89) {
					__label__ = 29;;
				} else {
					__label__ = 35;;
				}
				if (__label__ == 29) {
					$ix = -1;
					var $51 = HEAP8[(((__ZL9rule_cond) & 4294967295))];
					var $conv91 = (tempInt = (($51)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp92 = ((($conv91)) | 0) == 33;
					if ($cmp92) {
						__label__ = 30;;
					} else {
						__label__ = 31;;
					}
					if (__label__ == 30) {
						var $call94 = _atoi(((__ZL9rule_cond + 1) & 4294967295));
						var $add95 = ((($call94) + 32) & 4294967295);
						$ix = $add95;;
					} else if (__label__ == 31) {
						var $call97 = _atoi(((__ZL9rule_cond) & 4294967295));
						$ix = $call97;;
					}
					var $52 = $ix;
					var $cmp99 = ((($52)) | 0) > 0;
					var $53 = $ix;
					var $cmp101 = ((($53)) | 0) < 255;
					var $or_cond = ($cmp99) & ($cmp101);
					if ($or_cond) {
						__label__ = 33;;
					} else {
						__label__ = 34;;
					}
					if (__label__ == 33) {
						var $54 = $len;
						var $inc103 = ((($54) + 1) & 4294967295);
						$len = $inc103;
						var $arrayidx104 = (($output + $54) & 4294967295);
						HEAP8[($arrayidx104)] = 5;
						var $55 = $ix;
						var $conv105 = ((($55)) & 255);
						var $56 = $len;
						var $inc106 = ((($56) + 1) & 4294967295);
						$len = $inc106;
						var $arrayidx107 = (($output + $56) & 4294967295);
						HEAP8[($arrayidx107)] = $conv105;;
					} else if (__label__ == 34) {
						var $57 = HEAP32[((__ZL5f_log) >> 2)];
						var $58 = HEAP32[((__ZL7linenum) >> 2)];
						var $59 = $ix;
						var $call109 = _fprintf($57, ((__str95) & 4294967295), allocate([$58, 0, 0, 0, $59, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
						var $60 = HEAP32[((__ZL11error_count) >> 2)];
						var $inc110 = ((($60) + 1) & 4294967295);
						HEAP32[((__ZL11error_count) >> 2)] = $inc110;;
					}
				}
				var $61 = HEAP8[(((__ZL8rule_pre) & 4294967295))];
				var $conv113 = (tempInt = (($61)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp114 = ((($conv113)) | 0) != 0;
				if ($cmp114) {
					__label__ = 36;;
				} else {
					__label__ = 41;;
				}
				$if_then115$$if_end132$51: do {
					if (__label__ == 36) {
						$start = 0;
						var $62 = HEAP8[(((__ZL8rule_pre) & 4294967295))];
						var $conv116 = (tempInt = (($62)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp117 = ((($conv116)) | 0) == 32;
						if ($cmp117) {
							__label__ = 37;;
						} else {
							__label__ = 38;;
						}
						if (__label__ == 37) {
							$c = 8;
							$start = 1;;
						} else if (__label__ == 38) {
							$c = 1;;
						}
						var $63 = $c;
						var $64 = $len;
						var $inc121 = ((($64) + 1) & 4294967295);
						$len = $inc121;
						var $arrayidx122 = (($output + $64) & 4294967295);
						HEAP8[($arrayidx122)] = $63;
						var $call123 = _strlen(((__ZL8rule_pre) & 4294967295));
						var $sub = ((($call123) - 1) & 4294967295);
						$ix = $sub;
						var $65 = $ix;
						var $66 = $start;
						var $cmp1251 = ((($65)) | 0) >= ((($66)) | 0);
						if (!($cmp1251)) {
							__label__ = 41;
							break $if_then115$$if_end132$51;
						}
						while (1) {
							var $67 = $ix;
							var $arrayidx127 = ((__ZL8rule_pre + $67) & 4294967295);
							var $68 = HEAP8[($arrayidx127)];
							var $69 = $len;
							var $inc128 = ((($69) + 1) & 4294967295);
							$len = $inc128;
							var $arrayidx129 = (($output + $69) & 4294967295);
							HEAP8[($arrayidx129)] = $68;
							var $70 = $ix;
							var $dec = ((($70) - 1) & 4294967295);
							$ix = $dec;
							var $71 = $ix;
							var $72 = $start;
							var $cmp125 = ((($71)) | 0) >= ((($72)) | 0);
							if ($cmp125) {
								__label__ = 40;
								continue;
							} else {
								__label__ = 41;
								break $if_then115$$if_end132$51;
							}
						}
					}
				} while (0);
				var $73 = HEAP8[(((__ZL9rule_post) & 4294967295))];
				var $conv133 = (tempInt = (($73)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp134 = ((($conv133)) | 0) != 0;
				if ($cmp134) {
					__label__ = 42;;
				} else {
					__label__ = 43;;
				}
				if (__label__ == 42) {
					var $74 = $len;
					var $arrayidx136 = (($output + $74) & 4294967295);
					var $call137 = _sprintf($arrayidx136, ((__str70722) & 4294967295), allocate([2, 0, 0, 0, ((__ZL9rule_post) & 4294967295), 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $call138 = _strlen(((__ZL9rule_post) & 4294967295));
					var $75 = $len;
					var $add139 = ((($call138) + 1) & 4294967295);
					var $add140 = ((($add139) + ($75)) & 4294967295);
					$len = $add140;;
				}
				var $76 = $len;
				var $inc142 = ((($76) + 1) & 4294967295);
				$len = $inc142;
				var $arrayidx143 = (($output + $76) & 4294967295);
				HEAP8[($arrayidx143)] = 0;
				var $77 = $len;
				var $call144 = _malloc($77);
				$prule = $call144;
				var $78 = $prule;
				var $arraydecay145 = (($output) & 4294967295);
				var $79 = $len;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $arraydecay145;
				$dest$ = $78;
				$stop$ = $src$ + $79;
				if (($dest$ % 4) == ($src$ % 4) && $79 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $80 = $prule;
				$retval = $80;;
			}
			var $81 = $retval;
			STACKTOP = __stackBase__;
			return $81;
			return null;
		}

		function __ZL13rgroup_sorterP6RGROUPS0_($a, $b) {;
			var __label__;
			var $retval;
			var $a_addr;
			var $b_addr;
			var $ix;
			$a_addr = $a;
			$b_addr = $b;
			var $0 = $b_addr;
			var $name = (($0) & 4294967295);
			var $arraydecay = (($name) & 4294967295);
			var $call = _strlen($arraydecay);
			var $1 = $a_addr;
			var $name1 = (($1) & 4294967295);
			var $arraydecay2 = (($name1) & 4294967295);
			var $call3 = _strlen($arraydecay2);
			var $sub = ((($call) - ($call3)) & 4294967295);
			$ix = $sub;
			var $2 = $ix;
			var $cmp = ((($2)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $3 = $ix;
				$retval = $3;;
			} else if (__label__ == 2) {
				var $4 = $a_addr;
				var $name4 = (($4) & 4294967295);
				var $arraydecay5 = (($name4) & 4294967295);
				var $5 = $b_addr;
				var $name6 = (($5) & 4294967295);
				var $arraydecay7 = (($name6) & 4294967295);
				var $call8 = _strcmp($arraydecay5, $arraydecay7);
				$ix = $call8;
				var $6 = $ix;
				var $cmp9 = ((($6)) | 0) != 0;
				if ($cmp9) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $7 = $ix;
					$retval = $7;;
				} else if (__label__ == 4) {
					var $8 = $a_addr;
					var $start = (($8 + 16) & 4294967295);
					var $9 = HEAP32[(($start) >> 2)];
					var $10 = $b_addr;
					var $start12 = (($10 + 16) & 4294967295);
					var $11 = HEAP32[(($start12) >> 2)];
					var $sub13 = ((($9) - ($11)) & 4294967295);
					$retval = $sub13;;
				}
			}
			var $12 = $retval;;
			return $12;
			return null;
		}

		function __ZL16copy_rule_stringPcRi($string, $state) {;
			var __label__;
			var $string_addr;
			var $state_addr;
			var $output;
			var $p;
			var $ix;
			var $len;
			var $c;
			var $sxflags;
			var $value;
			var $literal;
			var $mr;
			$string_addr = $string;
			$state_addr = $state;
			var $0 = $string_addr;
			var $arrayidx = (($0) & 4294967295);
			var $1 = HEAP8[($arrayidx)];
			var $conv = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp = ((($conv)) | 0) == 0;
			if ($cmp) {
				__label__ = 75;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 1) {
				var $2 = $state_addr;
				var $3 = HEAP32[(($2) >> 2)];
				var $arrayidx1 = ((__ZZL16copy_rule_stringPcRiE6outbuf + $3 * 4) & 4294967295);
				var $4 = HEAP32[(($arrayidx1) >> 2)];
				$output = $4;
				var $5 = $state_addr;
				var $6 = HEAP32[(($5) >> 2)];
				var $cmp2 = ((($6)) | 0) == 4;
				if ($cmp2) {
					__label__ = 2;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 2) {
					var $call = _strlen(((__ZL13rule_phonemes) & 4294967295));
					$len = $call;
					var $7 = $len;
					var $cmp4 = ((($7)) | 0) > 0;
					if ($cmp4) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $8 = $len;
						var $inc = ((($8) + 1) & 4294967295);
						$len = $inc;
						var $arrayidx6 = ((__ZL13rule_phonemes + $8) & 4294967295);
						HEAP8[($arrayidx6)] = 32;;
					}
					var $9 = $len;
					var $arrayidx8 = ((__ZL13rule_phonemes + $9) & 4294967295);
					$output = $arrayidx8;;
				}
				$sxflags = 8421376;
				var $10 = $string_addr;
				$p = $10;
				$ix = 0;;
				$for_cond$10: while (1) {
					$literal = 0;
					var $11 = $p;
					var $incdec_ptr = (($11 + 1) & 4294967295);
					$p = $incdec_ptr;
					var $12 = HEAP8[($11)];
					$c = $12;
					var $13 = $c;
					var $conv10 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp11 = ((($conv10)) | 0) == 92;
					if ($cmp11) {
						__label__ = 7;;
					} else {
						__label__ = 15;;
					}
					if (__label__ == 7) {
						var $14 = $p;
						var $incdec_ptr13 = (($14 + 1) & 4294967295);
						$p = $incdec_ptr13;
						var $15 = HEAP8[($14)];
						$c = $15;
						var $16 = $c;
						var $conv14 = (tempInt = (($16)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp15 = ((($conv14)) | 0) >= 48;
						if ($cmp15) {
							__label__ = 8;;
						} else {
							__label__ = 14;;
						}
						$land_lhs_true$$if_end45$14: do {
							if (__label__ == 8) {
								var $17 = $c;
								var $conv16 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp17 = ((($conv16)) | 0) <= 51;
								if (!($cmp17)) {
									__label__ = 14;
									break $land_lhs_true$$if_end45$14;
								}
								var $18 = $p;
								var $arrayidx19 = (($18) & 4294967295);
								var $19 = HEAP8[($arrayidx19)];
								var $conv20 = (tempInt = (($19)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp21 = ((($conv20)) | 0) >= 48;
								if (!($cmp21)) {
									__label__ = 14;
									break $land_lhs_true$$if_end45$14;
								}
								var $20 = $p;
								var $arrayidx23 = (($20) & 4294967295);
								var $21 = HEAP8[($arrayidx23)];
								var $conv24 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp25 = ((($conv24)) | 0) <= 55;
								if (!($cmp25)) {
									__label__ = 14;
									break $land_lhs_true$$if_end45$14;
								}
								var $22 = $p;
								var $arrayidx27 = (($22 + 1) & 4294967295);
								var $23 = HEAP8[($arrayidx27)];
								var $conv28 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp29 = ((($conv28)) | 0) >= 48;
								if (!($cmp29)) {
									__label__ = 14;
									break $land_lhs_true$$if_end45$14;
								}
								var $24 = $p;
								var $arrayidx31 = (($24 + 1) & 4294967295);
								var $25 = HEAP8[($arrayidx31)];
								var $conv32 = (tempInt = (($25)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp33 = ((($conv32)) | 0) <= 55;
								if (!($cmp33)) {
									__label__ = 14;
									break $land_lhs_true$$if_end45$14;
								}
								var $26 = $c;
								var $conv35 = (tempInt = (($26)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $sub = ((($conv35) - 48) & 4294967295);
								var $mul = ((($sub) * 64) & 4294967295);
								var $27 = $p;
								var $arrayidx36 = (($27) & 4294967295);
								var $28 = HEAP8[($arrayidx36)];
								var $conv37 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $sub38 = ((($conv37) - 48) & 4294967295);
								var $mul39 = ((($sub38) * 8) & 4294967295);
								var $29 = $p;
								var $arrayidx40 = (($29 + 1) & 4294967295);
								var $30 = HEAP8[($arrayidx40)];
								var $conv41 = (tempInt = (($30)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $add = ((($mul) - 48) & 4294967295);
								var $sub42 = ((($add) + ($conv41)) & 4294967295);
								var $add43 = ((($sub42) + ($mul39)) & 4294967295);
								var $conv44 = ((($add43)) & 255);
								$c = $conv44;
								var $31 = $p;
								var $add_ptr = (($31 + 2) & 4294967295);
								$p = $add_ptr;;
							}
						} while (0);
						$literal = 1;;
					}
					var $32 = $state_addr;
					var $33 = HEAP32[(($32) >> 2)];
					var $cmp47 = ((($33)) | 0) == 1;
					if ($cmp47) {
						__label__ = 17;;
					} else {
						__label__ = 16;;
					}
					$if_then49$$lor_lhs_false$23: do {
						if (__label__ == 16) {
							var $34 = $state_addr;
							var $35 = HEAP32[(($34) >> 2)];
							var $cmp48 = ((($35)) | 0) == 3;
							if ($cmp48) {
								__label__ = 17;
								break $if_then49$$lor_lhs_false$23;
							} else {
								__label__ = 73;
								break $if_then49$$lor_lhs_false$23;
							}
						}
					} while (0);
					$if_then49$$if_end212$25: do {
						if (__label__ == 17) {
							var $36 = $literal;
							var $cmp50 = ((($36)) | 0) == 0;
							if (!($cmp50)) {
								__label__ = 73;
								break $if_then49$$if_end212$25;
							}
							var $37 = $c;
							var $conv52 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							if ($conv52 == 95) {
								__label__ = 19;;
							} else if ($conv52 == 89) {
								__label__ = 20;;
							} else if ($conv52 == 65) {
								__label__ = 21;;
							} else if ($conv52 == 66) {
								__label__ = 21;;
							} else if ($conv52 == 67) {
								__label__ = 21;;
							} else if ($conv52 == 72) {
								__label__ = 21;;
							} else if ($conv52 == 70) {
								__label__ = 21;;
							} else if ($conv52 == 71) {
								__label__ = 21;;
							} else if ($conv52 == 68) {
								__label__ = 24;;
							} else if ($conv52 == 75) {
								__label__ = 25;;
							} else if ($conv52 == 78) {
								__label__ = 26;;
							} else if ($conv52 == 86) {
								__label__ = 27;;
							} else if ($conv52 == 90) {
								__label__ = 28;;
							} else if ($conv52 == 43) {
								__label__ = 29;;
							} else if ($conv52 == 64) {
								__label__ = 30;;
							} else if ($conv52 == 38) {
								__label__ = 31;;
							} else if ($conv52 == 37) {
								__label__ = 32;;
							} else if ($conv52 == 35) {
								__label__ = 33;;
							} else if ($conv52 == 33) {
								__label__ = 34;;
							} else if ($conv52 == 84) {
								__label__ = 35;;
							} else if ($conv52 == 87) {
								__label__ = 36;;
							} else if ($conv52 == 88) {
								__label__ = 37;;
							} else if ($conv52 == 74) {
								__label__ = 38;;
							} else if ($conv52 == 76) {
								__label__ = 39;;
							} else if ($conv52 == 36) {
								__label__ = 48;;
							} else if ($conv52 == 80) {
								__label__ = 55;;
							} else if ($conv52 == 83) {
								__label__ = 56;;
							} else {
								__label__ = 73;
								break $if_then49$$if_end212$25;
							}
							$sw_bb$$sw_bb53$$sw_bb54$$sw_bb74$$sw_bb75$$sw_bb76$$sw_bb77$$sw_bb78$$sw_bb79$$sw_bb80$$sw_bb81$$sw_bb82$$sw_bb83$$sw_bb84$$sw_bb85$$sw_bb88$$sw_bb89$$sw_bb90$$sw_bb91$$sw_bb137$$sw_bb158$$sw_bb159$28: do {
								if (__label__ == 19) {
									$c = 32;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 20) {
									$c = 73;
									__label__ = 21;
									break $sw_bb$$sw_bb53$$sw_bb54$$sw_bb74$$sw_bb75$$sw_bb76$$sw_bb77$$sw_bb78$$sw_bb79$$sw_bb80$$sw_bb81$$sw_bb82$$sw_bb83$$sw_bb84$$sw_bb85$$sw_bb88$$sw_bb89$$sw_bb90$$sw_bb91$$sw_bb137$$sw_bb158$$sw_bb159$28;
								} else if (__label__ == 24) {
									$c = 15;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 25) {
									$c = 25;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 26) {
									$c = 24;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 27) {
									$c = 26;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 28) {
									$c = 16;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 29) {
									$c = 12;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 30) {
									$c = 21;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 31) {
									$c = 10;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 32) {
									$c = 11;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 33) {
									$c = 13;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 34) {
									$c = 19;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 35) {
									var $48 = $ix;
									var $inc86 = ((($48) + 1) & 4294967295);
									$ix = $inc86;
									var $49 = $output;
									var $arrayidx87 = (($49 + $48) & 4294967295);
									HEAP8[($arrayidx87)] = 28;
									$c = 17;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 36) {
									$c = 31;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 37) {
									$c = 29;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 38) {
									$c = 23;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 39) {
									var $50 = $p;
									var $incdec_ptr92 = (($50 + 1) & 4294967295);
									$p = $incdec_ptr92;
									var $51 = HEAP8[($50)];
									var $conv93 = (tempInt = (($51)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub94 = ((($conv93) - 48) & 4294967295);
									var $conv95 = ((($sub94)) & 255);
									$c = $conv95;
									var $52 = $p;
									var $incdec_ptr96 = (($52 + 1) & 4294967295);
									$p = $incdec_ptr96;
									var $53 = HEAP8[($52)];
									var $conv97 = (tempInt = (($53)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub98 = ((($conv97) - 48) & 4294967295);
									$value = $sub98;
									var $54 = $c;
									var $conv99 = (tempInt = (($54)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $mul100 = ((($conv99) * 10) & 4294967295);
									var $55 = $value;
									var $add101 = ((($mul100) + ($55)) & 4294967295);
									var $conv102 = ((($add101)) & 255);
									$c = $conv102;
									var $56 = $value;
									var $cmp103 = ((($56)) | 0) < 0;
									var $57 = $value;
									var $cmp105 = ((($57)) | 0) > 9;
									var $or_cond = ($cmp103) | ($cmp105);
									if ($or_cond) {
										__label__ = 40;;
									} else {
										__label__ = 41;;
									}
									$if_then106$$if_else109$47: do {
										if (__label__ == 40) {
											$c = 0;
											var $58 = HEAP32[((__ZL5f_log) >> 2)];
											var $59 = HEAP32[((__ZL7linenum) >> 2)];
											var $call107 = _fprintf($58, ((__str97) & 4294967295), allocate([$59, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
											var $60 = HEAP32[((__ZL11error_count) >> 2)];
											var $inc108 = ((($60) + 1) & 4294967295);
											HEAP32[((__ZL11error_count) >> 2)] = $inc108;;
										} else if (__label__ == 41) {
											var $61 = $c;
											var $conv110 = (tempInt = (($61)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp111 = ((($conv110)) | 0) <= 0;
											if ($cmp111) {
												__label__ = 44;;
											} else {
												__label__ = 42;;
											}
											$if_then120$$lor_lhs_false112$50: do {
												if (__label__ == 42) {
													var $62 = $c;
													var $conv113 = (tempInt = (($62)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $cmp114 = ((($conv113)) | 0) >= 26;
													if ($cmp114) {
														__label__ = 44;
														break $if_then120$$lor_lhs_false112$50;
													}
													var $63 = $c;
													var $conv116 = (tempInt = (($63)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $arrayidx117 = ((__ZL19letterGroupsDefined + $conv116) & 4294967295);
													var $64 = HEAP8[($arrayidx117)];
													var $conv118 = (tempInt = (($64)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $cmp119 = ((($conv118)) | 0) == 0;
													if (!($cmp119)) {
														__label__ = 45;
														break $if_then106$$if_else109$47;
													}
												}
											} while (0);
											var $65 = HEAP32[((__ZL5f_log) >> 2)];
											var $66 = HEAP32[((__ZL7linenum) >> 2)];
											var $67 = $c;
											var $conv121 = (tempInt = (($67)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call122 = _fprintf($65, ((__str98) & 4294967295), allocate([$66, 0, 0, 0, $conv121, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
											var $68 = HEAP32[((__ZL11error_count) >> 2)];
											var $inc123 = ((($68) + 1) & 4294967295);
											HEAP32[((__ZL11error_count) >> 2)] = $inc123;;
										}
									} while (0);
									var $69 = $c;
									var $conv126 = (tempInt = (($69)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $add127 = ((($conv126) + 65) & 4294967295);
									var $conv128 = ((($add127)) & 255);
									$c = $conv128;
									var $70 = $state_addr;
									var $71 = HEAP32[(($70) >> 2)];
									var $cmp129 = ((($71)) | 0) == 1;
									if ($cmp129) {
										__label__ = 46;;
									} else {
										__label__ = 47;;
									}
									if (__label__ == 46) {
										var $72 = $c;
										var $73 = $ix;
										var $inc131 = ((($73) + 1) & 4294967295);
										$ix = $inc131;
										var $74 = $output;
										var $arrayidx132 = (($74 + $73) & 4294967295);
										HEAP8[($arrayidx132)] = $72;
										$c = 18;
										__label__ = 73;
										break $if_then49$$if_end212$25;
									} else if (__label__ == 47) {
										var $75 = $ix;
										var $inc134 = ((($75) + 1) & 4294967295);
										$ix = $inc134;
										var $76 = $output;
										var $arrayidx135 = (($76 + $75) & 4294967295);
										HEAP8[($arrayidx135)] = 18;
										__label__ = 73;
										break $if_then49$$if_end212$25;
									}
								} else if (__label__ == 48) {
									var $77 = $ix;
									var $inc138 = ((($77) + 1) & 4294967295);
									$ix = $inc138;
									var $78 = $output;
									var $arrayidx139 = (($78 + $77) & 4294967295);
									HEAP8[($arrayidx139)] = 28;
									$c = 0;
									$mr = ((_mnem_rules) & 4294967295);;
									while (1) {
										var $79 = $mr;
										var $mnem = (($79) & 4294967295);
										var $80 = HEAP32[(($mnem) >> 2)];
										var $cmp140 = ((($80)) | 0) != 0;
										if (!($cmp140)) {
											__label__ = 53;
											break;
										}
										var $81 = $mr;
										var $mnem141 = (($81) & 4294967295);
										var $82 = HEAP32[(($mnem141) >> 2)];
										var $call142 = _strlen($82);
										$len = $call142;
										var $83 = $p;
										var $84 = $mr;
										var $mnem143 = (($84) & 4294967295);
										var $85 = HEAP32[(($mnem143) >> 2)];
										var $86 = $len;
										var $call144 = _memcmp($83, $85, $86);
										var $cmp145 = ((($call144)) | 0) == 0;
										var $87 = $mr;
										if ($cmp145) {
											__label__ = 51;
											break;
										}
										var $incdec_ptr151 = (($87 + 8) & 4294967295);
										$mr = $incdec_ptr151;
										__label__ = 49;
										continue;
									}
									if (__label__ == 51) {
										var $value147 = (($87 + 4) & 4294967295);
										var $88 = HEAP32[(($value147) >> 2)];
										var $conv148 = ((($88)) & 255);
										$c = $conv148;
										var $89 = $len;
										var $90 = $p;
										var $add_ptr149 = (($90 + $89) & 4294967295);
										$p = $add_ptr149;;
									}
									var $91 = $c;
									var $conv152 = (tempInt = (($91)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp153 = ((($conv152)) | 0) == 0;
									if (!($cmp153)) {
										__label__ = 73;
										break $if_then49$$if_end212$25;
									}
									var $92 = HEAP32[((__ZL5f_log) >> 2)];
									var $93 = HEAP32[((__ZL7linenum) >> 2)];
									var $call155 = _fprintf($92, ((__str99) & 4294967295), allocate([$93, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
									var $94 = HEAP32[((__ZL11error_count) >> 2)];
									var $inc156 = ((($94) + 1) & 4294967295);
									HEAP32[((__ZL11error_count) >> 2)] = $inc156;
									__label__ = 73;
									break $if_then49$$if_end212$25;
								} else if (__label__ == 55) {
									var $95 = $sxflags;
									var $or = ($95) | 1024;
									$sxflags = $or;
									__label__ = 56;
									break $sw_bb$$sw_bb53$$sw_bb54$$sw_bb74$$sw_bb75$$sw_bb76$$sw_bb77$$sw_bb78$$sw_bb79$$sw_bb80$$sw_bb81$$sw_bb82$$sw_bb83$$sw_bb84$$sw_bb85$$sw_bb88$$sw_bb89$$sw_bb90$$sw_bb91$$sw_bb137$$sw_bb158$$sw_bb159$28;
								}
							} while (0);
							if (__label__ == 21) {
								var $38 = $state_addr;
								var $39 = HEAP32[(($38) >> 2)];
								var $cmp55 = ((($39)) | 0) == 1;
								if ($cmp55) {
									__label__ = 22;;
								} else {
									__label__ = 23;;
								}
								if (__label__ == 22) {
									var $40 = $c;
									var $conv57 = (tempInt = (($40)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub58 = ((($conv57) - 65) & 4294967295);
									var $arrayidx59 = ((__ZZL16copy_rule_stringPcRiE16lettergp_letters + $sub58) & 4294967295);
									var $41 = HEAP8[($arrayidx59)];
									var $conv60 = (tempInt = (($41)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $add61 = ((($conv60) + 65) & 4294967295);
									var $conv62 = ((($add61)) & 255);
									var $42 = $ix;
									var $inc63 = ((($42) + 1) & 4294967295);
									$ix = $inc63;
									var $43 = $output;
									var $arrayidx64 = (($43 + $42) & 4294967295);
									HEAP8[($arrayidx64)] = $conv62;
									$c = 17;;
								} else if (__label__ == 23) {
									var $44 = $ix;
									var $inc65 = ((($44) + 1) & 4294967295);
									$ix = $inc65;
									var $45 = $output;
									var $arrayidx66 = (($45 + $44) & 4294967295);
									HEAP8[($arrayidx66)] = 17;
									var $46 = $c;
									var $conv67 = (tempInt = (($46)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub68 = ((($conv67) - 65) & 4294967295);
									var $arrayidx69 = ((__ZZL16copy_rule_stringPcRiE16lettergp_letters + $sub68) & 4294967295);
									var $47 = HEAP8[($arrayidx69)];
									var $conv70 = (tempInt = (($47)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $add71 = ((($conv70) + 65) & 4294967295);
									var $conv72 = ((($add71)) & 255);
									$c = $conv72;;
								}
							} else if (__label__ == 56) {
								var $96 = $ix;
								var $inc160 = ((($96) + 1) & 4294967295);
								$ix = $inc160;
								var $97 = $output;
								var $arrayidx161 = (($97 + $96) & 4294967295);
								HEAP8[($arrayidx161)] = 14;
								$value = 0;;
								while (1) {
									var $98 = $p;
									var $incdec_ptr163 = (($98 + 1) & 4294967295);
									$p = $incdec_ptr163;
									var $99 = HEAP8[($98)];
									$c = $99;
									var $conv164 = (tempInt = (($99)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $call165 = __Z8isspace2j($conv164);
									var $tobool = ((($call165)) | 0) != 0;
									if ($tobool) {
										__label__ = 72;
										break;
									}
									var $100 = $c;
									var $conv166 = (tempInt = (($100)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp167 = ((($conv166)) | 0) != 0;
									if (!($cmp167)) {
										__label__ = 72;
										break;
									}
									var $101 = $c;
									var $conv169 = (tempInt = (($101)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									if ($conv169 == 101) {
										__label__ = 60;;
									} else if ($conv169 == 105) {
										__label__ = 61;;
									} else if ($conv169 == 112) {
										__label__ = 62;;
									} else if ($conv169 == 118) {
										__label__ = 63;;
									} else if ($conv169 == 100) {
										__label__ = 64;;
									} else if ($conv169 == 102) {
										__label__ = 65;;
									} else if ($conv169 == 113) {
										__label__ = 66;;
									} else if ($conv169 == 116) {
										__label__ = 67;;
									} else if ($conv169 == 98) {
										__label__ = 68;;
									} else if ($conv169 == 97) {
										__label__ = 69;;
									} else {
										__label__ = 70;;
									}
									if (__label__ == 70) {
										var $112 = $c;
										var $conv190 = (tempInt = (($112)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $isdigittmp = ((($conv190) - 48) & 4294967295);
										var $isdigit = ((($isdigittmp)) >>> 0) < 10;
										var $call191 = ((($isdigit)) & 1);
										var $tobool192 = ((($call191)) | 0) != 0;
										if (!($tobool192)) {
											__label__ = 57;
											continue;
										}
										var $113 = $value;
										var $mul194 = ((($113) * 10) & 4294967295);
										var $114 = $c;
										var $conv195 = (tempInt = (($114)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $sub196 = ((($mul194) - 48) & 4294967295);
										var $add197 = ((($sub196) + ($conv195)) & 4294967295);
										$value = $add197;
										__label__ = 57;
										continue;
									} else if (__label__ == 60) {
										var $102 = $sxflags;
										var $or171 = ($102) | 256;
										$sxflags = $or171;
										__label__ = 57;
										continue;
									} else if (__label__ == 61) {
										var $103 = $sxflags;
										var $or173 = ($103) | 512;
										$sxflags = $or173;
										__label__ = 57;
										continue;
									} else if (__label__ == 62) {
										var $104 = $sxflags;
										var $or175 = ($104) | 1024;
										$sxflags = $or175;
										__label__ = 57;
										continue;
									} else if (__label__ == 63) {
										var $105 = $sxflags;
										var $or177 = ($105) | 2048;
										$sxflags = $or177;
										__label__ = 57;
										continue;
									} else if (__label__ == 64) {
										var $106 = $sxflags;
										var $or179 = ($106) | 4096;
										$sxflags = $or179;
										__label__ = 57;
										continue;
									} else if (__label__ == 65) {
										var $107 = $sxflags;
										var $or181 = ($107) | 8192;
										$sxflags = $or181;
										__label__ = 57;
										continue;
									} else if (__label__ == 66) {
										var $108 = $sxflags;
										var $or183 = ($108) | 16384;
										$sxflags = $or183;
										__label__ = 57;
										continue;
									} else if (__label__ == 67) {
										var $109 = $sxflags;
										var $or185 = ($109) | 65536;
										$sxflags = $or185;
										__label__ = 57;
										continue;
									} else if (__label__ == 68) {
										var $110 = $sxflags;
										var $or187 = ($110) | 131072;
										$sxflags = $or187;
										__label__ = 57;
										continue;
									} else if (__label__ == 69) {
										var $111 = $sxflags;
										var $or189 = ($111) | 262144;
										$sxflags = $or189;
										__label__ = 57;
										continue;
									}
								}
								var $115 = $p;
								var $incdec_ptr200 = (($115 + -1) & 4294967295);
								$p = $incdec_ptr200;
								var $116 = $sxflags;
								var $shr = ($116) >> 16;
								var $conv201 = ((($shr)) & 255);
								var $117 = $ix;
								var $inc202 = ((($117) + 1) & 4294967295);
								$ix = $inc202;
								var $118 = $output;
								var $arrayidx203 = (($118 + $117) & 4294967295);
								HEAP8[($arrayidx203)] = $conv201;
								var $119 = $sxflags;
								var $shr204 = ($119) >> 8;
								var $conv205 = ((($shr204)) & 255);
								var $120 = $ix;
								var $inc206 = ((($120) + 1) & 4294967295);
								$ix = $inc206;
								var $121 = $output;
								var $arrayidx207 = (($121 + $120) & 4294967295);
								HEAP8[($arrayidx207)] = $conv205;
								var $122 = $value;
								var $or208 = ($122) | 128;
								var $conv209 = ((($or208)) & 255);
								$c = $conv209;;
							}
						}
					} while (0);
					var $123 = $c;
					var $124 = $ix;
					var $inc213 = ((($124) + 1) & 4294967295);
					$ix = $inc213;
					var $125 = $output;
					var $arrayidx214 = (($125 + $124) & 4294967295);
					HEAP8[($arrayidx214)] = $123;
					var $126 = $c;
					var $conv215 = (tempInt = (($126)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp216 = ((($conv215)) | 0) == 0;
					if ($cmp216) {
						__label__ = 74;
						break $for_cond$10;
					} else {
						__label__ = 6;
						continue $for_cond$10;
					}
				}
				var $127 = $state_addr;
				var $128 = HEAP32[(($127) >> 2)];
				var $arrayidx219 = ((__ZZL16copy_rule_stringPcRiE10next_state + $128 * 4) & 4294967295);
				var $129 = HEAP32[(($arrayidx219) >> 2)];
				var $130 = $state_addr;
				HEAP32[(($130) >> 2)] = $129;;
			};
			return;
			return;
		}

		function __ZL12compile_linePcS_Pi($linebuf, $dict_line, $hash) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 312;
			_memset(__stackBase__, 0, 312);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $linebuf_addr;
			var $dict_line_addr;
			var $hash_addr;
			var $c;
			var $p;
			var $word;
			var $phonetic;
			var $ix;
			var $step;
			var $n_flag_codes;
			var $flag_offset;
			var $length;
			var $multiple_words;
			var $multiple_numeric_hyphen;
			var $multiple_string;
			var $multiple_string_end;
			var $len_word;
			var $len_phonetic;
			var $text_not_phonemes;
			var $wc = __stackBase__;
			var $all_upper_case;
			var $mnemptr;
			var $comment;
			var $flag_codes = __stackBase__ + 4;
			var $encoded_ph = __stackBase__ + 104;
			var $bad_phoneme = __stackBase__ + 304;
			var $c2 = __stackBase__ + 308;
			$linebuf_addr = $linebuf;
			$dict_line_addr = $dict_line;
			$hash_addr = $hash;
			$n_flag_codes = 0;
			$multiple_words = 0;
			$multiple_numeric_hyphen = 0;
			$multiple_string = 0;
			$multiple_string_end = 0;
			$comment = 0;
			$text_not_phonemes = 0;
			$word = ((__ZZL12compile_linePcS_PiE10nullstring) & 4294967295);
			$phonetic = ((__ZZL12compile_linePcS_PiE10nullstring) & 4294967295);
			var $0 = $linebuf_addr;
			var $call = _memcmp($0, ((__str108) & 4294967295), 2);
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$step = 1;;
			}
			var $1 = $linebuf_addr;
			$p = $1;
			$step = 0;
			$c = 0;
			var $2 = $c;
			var $conv13 = ((($2)) & 255);
			var $cmp114 = ((($conv13)) | 0) != 10;
			if ($cmp114) {
				__label__ = 3;;
			} else {
				__label__ = 55;;
			}
			$while_body$$while_end147$5: do {
				if (__label__ == 3) {
					$while_body$6: while (1) {
						var $3 = $p;
						var $4 = HEAP8[($3)];
						$c = $4;
						var $5 = $c;
						var $conv2 = ((($5)) & 255);
						var $cmp3 = ((($conv2)) | 0) == 63;
						if ($cmp3) {
							__label__ = 4;;
						} else {
							__label__ = 12;;
						}
						$land_lhs_true$$if_end28$8: do {
							if (__label__ == 4) {
								var $6 = $step;
								var $cmp4 = ((($6)) | 0) == 0;
								if (!($cmp4)) {
									__label__ = 12;
									break $land_lhs_true$$if_end28$8;
								}
								$flag_offset = 100;
								var $7 = $p;
								var $incdec_ptr = (($7 + 1) & 4294967295);
								$p = $incdec_ptr;
								var $8 = $p;
								var $9 = HEAP8[($8)];
								var $conv6 = (tempInt = (($9)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp7 = ((($conv6)) | 0) == 33;
								if ($cmp7) {
									__label__ = 6;;
								} else {
									__label__ = 7;;
								}
								if (__label__ == 6) {
									$flag_offset = 132;
									var $10 = $p;
									var $incdec_ptr9 = (($10 + 1) & 4294967295);
									$p = $incdec_ptr9;;
								}
								$ix = 0;
								var $11 = $p;
								var $12 = HEAP8[($11)];
								var $conv11 = (tempInt = (($12)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $isdigittmp = ((($conv11) - 48) & 4294967295);
								var $isdigit = ((($isdigittmp)) >>> 0) < 10;
								var $call12 = ((($isdigit)) & 1);
								var $tobool = ((($call12)) | 0) != 0;
								if ($tobool) {
									__label__ = 8;;
								} else {
									__label__ = 9;;
								}
								if (__label__ == 8) {
									var $13 = $p;
									var $14 = HEAP8[($13)];
									var $conv14 = (tempInt = (($14)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $15 = $ix;
									var $sub = ((($15) - 48) & 4294967295);
									var $add = ((($sub) + ($conv14)) & 4294967295);
									$ix = $add;
									var $16 = $p;
									var $incdec_ptr15 = (($16 + 1) & 4294967295);
									$p = $incdec_ptr15;;
								}
								var $17 = $p;
								var $18 = HEAP8[($17)];
								var $conv17 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $isdigittmp1 = ((($conv17) - 48) & 4294967295);
								var $isdigit2 = ((($isdigittmp1)) >>> 0) < 10;
								var $call18 = ((($isdigit2)) & 1);
								var $tobool19 = ((($call18)) | 0) != 0;
								if ($tobool19) {
									__label__ = 10;;
								} else {
									__label__ = 11;;
								}
								if (__label__ == 10) {
									var $19 = $ix;
									var $mul = ((($19) * 10) & 4294967295);
									var $20 = $p;
									var $21 = HEAP8[($20)];
									var $conv21 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub22 = ((($mul) - 48) & 4294967295);
									var $add23 = ((($sub22) + ($conv21)) & 4294967295);
									$ix = $add23;
									var $22 = $p;
									var $incdec_ptr24 = (($22 + 1) & 4294967295);
									$p = $incdec_ptr24;;
								}
								var $23 = $ix;
								var $24 = $flag_offset;
								var $add26 = ((($24) + ($23)) & 4294967295);
								var $conv27 = ((($add26)) & 255);
								var $25 = $n_flag_codes;
								var $inc = ((($25) + 1) & 4294967295);
								$n_flag_codes = $inc;
								var $arrayidx = (($flag_codes + $25) & 4294967295);
								HEAP8[($arrayidx)] = $conv27;
								var $26 = $p;
								var $27 = HEAP8[($26)];
								$c = $27;;
							}
						} while (0);
						var $28 = $c;
						var $conv29 = ((($28)) & 255);
						var $cmp30 = ((($conv29)) | 0) == 36;
						if ($cmp30) {
							__label__ = 13;;
						} else {
							__label__ = 25;;
						}
						$land_lhs_true31$$if_end64$21: do {
							if (__label__ == 13) {
								var $29 = $p;
								var $arrayidx32 = (($29 + 1) & 4294967295);
								var $30 = HEAP8[($arrayidx32)];
								var $conv33 = (tempInt = (($30)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call34 = _isalnum($conv33);
								var $tobool35 = ((($call34)) | 0) != 0;
								if (!($tobool35)) {
									__label__ = 25;
									break $land_lhs_true31$$if_end64$21;
								}
								var $31 = $p;
								$mnemptr = $31;
								var $32 = $p;
								var $33 = HEAPU8[($32)];
								$c = $33;
								var $conv389 = ((($33)) & 255);
								var $call3910 = __Z8isspace2j($conv389);
								var $tobool4011 = ((($call3910)) | 0) != 0;
								var $lnot12 = ($tobool4011) ^ 1;
								var $34 = $p;
								if ($lnot12) {
									__lastLabel__ = 14;
									__label__ = 15;;
								} else {
									__lastLabel__ = 14;
									__label__ = 16;;
								}
								$while_body41$$while_end$24: do {
									if (__label__ == 15) {
										while (1) {
											var $35 = __lastLabel__ == 15 ? $38 : ($34);
											var $incdec_ptr42 = (($35 + 1) & 4294967295);
											$p = $incdec_ptr42;
											var $36 = $p;
											var $37 = HEAPU8[($36)];
											$c = $37;
											var $conv38 = ((($37)) & 255);
											var $call39 = __Z8isspace2j($conv38);
											var $tobool40 = ((($call39)) | 0) != 0;
											var $lnot = ($tobool40) ^ 1;
											var $38 = $p;
											if ($lnot) {
												__lastLabel__ = 15;
												__label__ = 15;
												continue;
											} else {
												__lastLabel__ = 15;
												__label__ = 16;
												break $while_body41$$while_end$24;
											}
										}
									}
								} while (0);
								var $_lcssa = __lastLabel__ == 14 ? $34 : ($38);
								HEAP8[($_lcssa)] = 0;
								var $39 = $mnemptr;
								var $call43 = __Z10LookupMnemP8MNEM_TABPKc(((_mnem_flags) & 4294967295), $39);
								$ix = $call43;
								var $cmp44 = ((($call43)) >>> 0) > 0;
								if ($cmp44) {
									__label__ = 17;;
								} else {
									__label__ = 24;;
								}
								if (__label__ == 17) {
									var $40 = $ix;
									var $cmp46 = ((($40)) | 0) == 200;
									if ($cmp46) {
										__label__ = 18;;
									} else {
										__label__ = 19;;
									}
									if (__label__ == 18) {
										HEAP8[(__ZL9text_mode_b)] = 1;;
									} else if (__label__ == 19) {
										var $41 = $ix;
										var $cmp48 = ((($41)) | 0) == 201;
										if ($cmp48) {
											__label__ = 20;;
										} else {
											__label__ = 21;;
										}
										if (__label__ == 20) {
											HEAP8[(__ZL9text_mode_b)] = 0;;
										} else if (__label__ == 21) {
											var $42 = $ix;
											var $cmp51 = ((($42)) | 0) == 29;
											if ($cmp51) {
												__label__ = 22;;
											} else {
												__label__ = 23;;
											}
											if (__label__ == 22) {
												$text_not_phonemes = 1;;
											} else if (__label__ == 23) {
												var $43 = $ix;
												var $conv54 = ((($43)) & 255);
												var $44 = $n_flag_codes;
												var $inc55 = ((($44) + 1) & 4294967295);
												$n_flag_codes = $inc55;
												var $arrayidx56 = (($flag_codes + $44) & 4294967295);
												HEAP8[($arrayidx56)] = $conv54;;
											}
										}
									}
								} else if (__label__ == 24) {
									var $45 = HEAP32[((__ZL5f_log) >> 2)];
									var $46 = HEAP32[((__ZL7linenum) >> 2)];
									var $47 = $mnemptr;
									var $call61 = _fprintf($45, ((__str109) & 4294967295), allocate([$46, 0, 0, 0, $47, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
									var $48 = HEAP32[((__ZL11error_count) >> 2)];
									var $inc62 = ((($48) + 1) & 4294967295);
									HEAP32[((__ZL11error_count) >> 2)] = $inc62;;
								}
							}
						} while (0);
						var $49 = $c;
						var $conv65 = ((($49)) & 255);
						var $cmp66 = ((($conv65)) | 0) == 47;
						if ($cmp66) {
							__label__ = 26;;
						} else {
							__label__ = 29;;
						}
						$land_lhs_true67$$if_end74$41: do {
							if (__label__ == 26) {
								var $50 = $p;
								var $arrayidx68 = (($50 + 1) & 4294967295);
								var $51 = HEAP8[($arrayidx68)];
								var $conv69 = (tempInt = (($51)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp70 = ((($conv69)) | 0) == 47;
								if (!($cmp70)) {
									__label__ = 29;
									break $land_lhs_true67$$if_end74$41;
								}
								var $52 = $multiple_words;
								var $cmp72 = ((($52)) | 0) == 0;
								if (!($cmp72)) {
									__label__ = 29;
									break $land_lhs_true67$$if_end74$41;
								}
								$c = 10;
								var $53 = $p;
								$comment = $53;;
							}
						} while (0);
						var $54 = $step;
						if ($54 == 0) {
							__label__ = 30;;
						} else if ($54 == 1) {
							__label__ = 34;;
						} else if ($54 == 2) {
							__label__ = 46;;
						} else if ($54 == 3) {
							__label__ = 50;;
						} else if ($54 == 4) {
							__label__ = 52;;
						} else {
							__label__ = 54;;
						}
						$sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46: do {
							if (__label__ == 30) {
								var $55 = $c;
								var $conv75 = ((($55)) & 255);
								var $cmp76 = ((($conv75)) | 0) == 40;
								if ($cmp76) {
									__label__ = 31;;
								} else {
									__label__ = 32;;
								}
								if (__label__ == 31) {
									$multiple_words = 1;
									var $56 = $p;
									var $add_ptr = (($56 + 1) & 4294967295);
									$word = $add_ptr;
									$step = 1;;
								} else if (__label__ == 32) {
									var $57 = $c;
									var $conv79 = ((($57)) & 255);
									var $call80 = __Z8isspace2j($conv79);
									var $tobool81 = ((($call80)) | 0) != 0;
									if ($tobool81) {
										__label__ = 54;
										break $sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46;
									}
									var $58 = $p;
									$word = $58;
									$step = 1;;
								}
							} else if (__label__ == 34) {
								var $59 = $c;
								var $conv86 = ((($59)) & 255);
								var $cmp87 = ((($conv86)) | 0) == 45;
								if ($cmp87) {
									__label__ = 35;;
								} else {
									__label__ = 39;;
								}
								$land_lhs_true88$$if_end99$53: do {
									if (__label__ == 35) {
										var $60 = $multiple_words;
										var $tobool89 = ((($60)) | 0) != 0;
										if (!($tobool89)) {
											__label__ = 39;
											break $land_lhs_true88$$if_end99$53;
										}
										var $61 = $word;
										var $arrayidx91 = (($61) & 4294967295);
										var $62 = HEAP8[($arrayidx91)];
										var $conv92 = (tempInt = (($62)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $isdigittmp3 = ((($conv92) - 48) & 4294967295);
										var $isdigit4 = ((($isdigittmp3)) >>> 0) < 10;
										var $call93 = ((($isdigit4)) & 1);
										var $tobool94 = ((($call93)) | 0) != 0;
										if ($tobool94) {
											__label__ = 37;;
										} else {
											__label__ = 38;;
										}
										if (__label__ == 37) {
											$multiple_numeric_hyphen = 1;;
										}
										var $63 = $n_flag_codes;
										var $inc97 = ((($63) + 1) & 4294967295);
										$n_flag_codes = $inc97;
										var $arrayidx98 = (($flag_codes + $63) & 4294967295);
										HEAP8[($arrayidx98)] = 44;
										$c = 32;;
									}
								} while (0);
								var $64 = $c;
								var $conv100 = ((($64)) & 255);
								var $call101 = __Z8isspace2j($conv100);
								var $tobool102 = ((($call101)) | 0) != 0;
								if ($tobool102) {
									__label__ = 40;;
								} else {
									__label__ = 43;;
								}
								if (__label__ == 40) {
									var $65 = $p;
									var $arrayidx104 = (($65) & 4294967295);
									HEAP8[($arrayidx104)] = 0;
									var $66 = $multiple_words;
									var $tobool105 = ((($66)) | 0) != 0;
									if ($tobool105) {
										__label__ = 41;;
									} else {
										__label__ = 42;;
									}
									if (__label__ == 41) {
										var $67 = $p;
										var $add_ptr107 = (($67 + 1) & 4294967295);
										$multiple_string_end = $add_ptr107;
										$multiple_string = $add_ptr107;
										$step = 2;;
									} else if (__label__ == 42) {
										$step = 3;;
									}
								} else if (__label__ == 43) {
									var $68 = $c;
									var $conv111 = ((($68)) & 255);
									var $cmp112 = ((($conv111)) | 0) == 41;
									if (!($cmp112)) {
										__label__ = 54;
										break $sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46;
									}
									var $69 = $multiple_words;
									var $tobool114 = ((($69)) | 0) != 0;
									if (!($tobool114)) {
										__label__ = 54;
										break $sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46;
									}
									var $70 = $p;
									var $arrayidx116 = (($70) & 4294967295);
									HEAP8[($arrayidx116)] = 0;
									$step = 3;
									$multiple_words = 0;;
								}
							} else if (__label__ == 46) {
								var $71 = $c;
								var $conv120 = ((($71)) & 255);
								var $call121 = __Z8isspace2j($conv120);
								var $tobool122 = ((($call121)) | 0) != 0;
								if ($tobool122) {
									__label__ = 47;;
								} else {
									__label__ = 48;;
								}
								if (__label__ == 47) {
									var $72 = $multiple_words;
									var $inc124 = ((($72) + 1) & 4294967295);
									$multiple_words = $inc124;;
								} else if (__label__ == 48) {
									var $73 = $c;
									var $conv126 = ((($73)) & 255);
									var $cmp127 = ((($conv126)) | 0) == 41;
									if (!($cmp127)) {
										__label__ = 54;
										break $sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46;
									}
									var $74 = $p;
									var $arrayidx129 = (($74) & 4294967295);
									HEAP8[($arrayidx129)] = 32;
									var $75 = $p;
									var $add_ptr130 = (($75 + 1) & 4294967295);
									$multiple_string_end = $add_ptr130;
									$step = 3;;
								}
							} else if (__label__ == 50) {
								var $76 = $c;
								var $conv134 = ((($76)) & 255);
								var $call135 = __Z8isspace2j($conv134);
								var $tobool136 = ((($call135)) | 0) != 0;
								if ($tobool136) {
									__label__ = 54;
									break $sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46;
								}
								var $77 = $p;
								$phonetic = $77;
								$step = 4;;
							} else if (__label__ == 52) {
								var $78 = $c;
								var $conv140 = ((($78)) & 255);
								var $call141 = __Z8isspace2j($conv140);
								var $tobool142 = ((($call141)) | 0) != 0;
								if (!($tobool142)) {
									__label__ = 54;
									break $sw_epilog$$sw_bb$$sw_bb85$$sw_bb119$$sw_bb133$$sw_bb139$46;
								}
								var $79 = $p;
								var $arrayidx144 = (($79) & 4294967295);
								HEAP8[($arrayidx144)] = 0;
								$step = 5;;
							}
						} while (0);
						var $80 = $p;
						var $incdec_ptr146 = (($80 + 1) & 4294967295);
						$p = $incdec_ptr146;
						var $81 = $c;
						var $conv = ((($81)) & 255);
						var $cmp1 = ((($conv)) | 0) != 10;
						if ($cmp1) {
							__label__ = 3;
							continue $while_body$6;
						} else {
							__label__ = 55;
							break $while_body$$while_end147$5;
						}
					}
				}
			} while (0);
			var $82 = $word;
			var $arrayidx148 = (($82) & 4294967295);
			var $83 = HEAP8[($arrayidx148)];
			var $conv149 = (tempInt = (($83)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp150 = ((($conv149)) | 0) == 0;
			if ($cmp150) {
				__label__ = 56;;
			} else {
				__label__ = 57;;
			}
			if (__label__ == 56) {
				$retval = 0;;
			} else if (__label__ == 57) {
				var $_b = HEAPU8[(__ZL9text_mode_b)];
				var $84 = ((($_b)) & 1);
				var $tobool153 = ((($84)) | 0) != 0;
				if ($tobool153) {
					__label__ = 58;;
				} else {
					__label__ = 59;;
				}
				$if_end155_thread$$if_end155$82: do {
					if (__label__ == 58) {
						$text_not_phonemes = 1;
						__label__ = 60;
						break $if_end155_thread$$if_end155$82;
					} else if (__label__ == 59) {
						var $_pr = $text_not_phonemes;
						var $tobool156 = ((($_pr)) | 0) != 0;
						if ($tobool156) {
							__label__ = 60;
							break $if_end155_thread$$if_end155$82;
						}
						var $96 = $phonetic;
						var $arraydecay176 = (($encoded_ph) & 4294967295);
						var $arraydecay177 = (($bad_phoneme) & 4294967295);
						var $call178 = __Z14EncodePhonemesPcS_Ph($96, $arraydecay176, $arraydecay177);
						var $arraydecay179 = (($encoded_ph) & 4294967295);
						var $call180 = _strchr($arraydecay179, 21);
						var $cmp181 = ((($call180)) | 0) != 0;
						if ($cmp181) {
							__label__ = 65;;
						} else {
							__label__ = 66;;
						}
						if (__label__ == 65) {
							var $97 = $n_flag_codes;
							var $inc183 = ((($97) + 1) & 4294967295);
							$n_flag_codes = $inc183;
							var $arrayidx184 = (($flag_codes + $97) & 4294967295);
							HEAP8[($arrayidx184)] = 10;;
						}
						var $arrayidx186 = (($bad_phoneme) & 4294967295);
						var $98 = HEAPU8[($arrayidx186)];
						var $conv187 = ((($98)) & 255);
						var $cmp188 = ((($conv187)) | 0) != 0;
						if (!($cmp188)) {
							__label__ = 68;
							break $if_end155_thread$$if_end155$82;
						}
						var $99 = HEAP32[((__ZL5f_log) >> 2)];
						var $100 = HEAP32[((__ZL7linenum) >> 2)];
						var $arrayidx190 = (($bad_phoneme) & 4294967295);
						var $101 = HEAPU8[($arrayidx190)];
						var $conv191 = ((($101)) & 255);
						var $arrayidx192 = (($bad_phoneme) & 4294967295);
						var $102 = HEAPU8[($arrayidx192)];
						var $conv193 = ((($102)) & 255);
						var $103 = $word;
						var $104 = $phonetic;
						var $call194 = _fprintf($99, ((__str112) & 4294967295), allocate([$100, 0, 0, 0, $conv191, 0, 0, 0, $conv193, 0, 0, 0, $103, 0, 0, 0, $104, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						var $105 = HEAP32[((__ZL11error_count) >> 2)];
						var $inc195 = ((($105) + 1) & 4294967295);
						HEAP32[((__ZL11error_count) >> 2)] = $inc195;
						__label__ = 68;
						break $if_end155_thread$$if_end155$82;
					}
				} while (0);
				$if_then157$$if_end197$90: do {
					if (__label__ == 60) {
						var $85 = $word;
						var $arrayidx158 = (($85) & 4294967295);
						var $86 = HEAP8[($arrayidx158)];
						var $conv159 = (tempInt = (($86)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp160 = ((($conv159)) | 0) == 95;
						if ($cmp160) {
							__label__ = 61;;
						} else {
							__label__ = 63;;
						}
						if (__label__ == 61) {
							var $87 = $phonetic;
							var $strlen = _strlen($87);
							var $endptr = (($87 + $strlen) & 4294967295);
							var $src$, $dest$, $stop$, $stop4$, $fast$;
							$src$ = ((__str110) & 4294967295);
							$dest$ = $endptr;
							$stop$ = $src$ + 2;
							if (($dest$ % 4) == ($src$ % 4) && 2 > 8) {
								while ($src$ % 4 !== 0 && $src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								}
								$src$ >>= 2;
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($src$ < $stop4$) {;;;
									HEAP32[$dest$++] = HEAP32[$src$++];
								}
								$src$ <<= 2;
								$dest$ <<= 2;
							}
							while ($src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							};
							var $88 = HEAP32[((_translator) >> 2)];
							var $89 = $phonetic;
							var $call163 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($88, $89, 0, 0);
							$text_not_phonemes = 0;
							var $arraydecay = (($encoded_ph) & 4294967295);
							__Z8strncpy0PcPKci($arraydecay, ((_word_phonemes) & 4294967295), 156);
							var $90 = HEAP8[(((_word_phonemes) & 4294967295))];
							var $conv164 = (tempInt = (($90)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp165 = ((($conv164)) | 0) == 0;
							var $91 = HEAP32[((__ZL21error_need_dictionary) >> 2)];
							var $cmp167 = ((($91)) | 0) < 3;
							var $or_cond = ($cmp165) & ($cmp167);
							if (!($or_cond)) {
								__label__ = 68;
								break $if_then157$$if_end197$90;
							}
							var $92 = HEAP32[((__ZL21error_need_dictionary) >> 2)];
							var $inc169 = ((($92) + 1) & 4294967295);
							HEAP32[((__ZL21error_need_dictionary) >> 2)] = $inc169;
							var $93 = HEAP32[((__ZL5f_log) >> 2)];
							var $94 = HEAP32[((__ZL7linenum) >> 2)];
							var $call170 = _fprintf($93, ((__str111) & 4294967295), allocate([$94, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));;
						} else if (__label__ == 63) {
							var $arraydecay173 = (($encoded_ph) & 4294967295);
							var $95 = $phonetic;
							__Z8strncpy0PcPKci($arraydecay173, $95, 156);;
						}
					}
				} while (0);
				var $106 = $text_not_phonemes;
				var $107 = HEAP32[((_translator) >> 2)];
				var $langopts = (($107) & 4294967295);
				var $textmode = (($langopts + 252) & 4294967295);
				var $108 = HEAP8[($textmode)];
				var $conv198 = (tempInt = (($108)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp199 = ((($106)) | 0) != ((($conv198)) | 0);
				if ($cmp199) {
					__label__ = 69;;
				} else {
					__label__ = 70;;
				}
				if (__label__ == 69) {
					var $109 = $n_flag_codes;
					var $inc201 = ((($109) + 1) & 4294967295);
					$n_flag_codes = $inc201;
					var $arrayidx202 = (($flag_codes + $109) & 4294967295);
					HEAP8[($arrayidx202)] = 29;;
				}
				var $110 = $word;
				var $call204 = _sscanf($110, ((__str113) & 4294967295), allocate([$wc, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
				var $cmp205 = ((($call204)) | 0) == 1;
				if ($cmp205) {
					__label__ = 71;;
				} else {
					__label__ = 72;;
				}
				$if_then206$$if_else209$100: do {
					if (__label__ == 71) {
						var $111 = HEAP32[(($wc) >> 2)];
						var $112 = $word;
						var $call207 = __Z8utf8_outjPc($111, $112);
						$ix = $call207;
						var $113 = $ix;
						var $114 = $word;
						var $arrayidx208 = (($114 + $113) & 4294967295);
						HEAP8[($arrayidx208)] = 0;;
					} else if (__label__ == 72) {
						var $115 = $word;
						var $arrayidx210 = (($115) & 4294967295);
						var $116 = HEAP8[($arrayidx210)];
						var $conv211 = (tempInt = (($116)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp212 = ((($conv211)) | 0) != 95;
						if (!($cmp212)) {
							__label__ = 80;
							break $if_then206$$if_else209$100;
						}
						$all_upper_case = 1;
						var $117 = $word;
						$p = $117;
						var $118 = $word;
						$p = $118;
						var $119 = $p;
						var $call2146 = __Z7utf8_inPiPKc($c2, $119);
						$ix = $call2146;
						var $120 = HEAP32[(($c2) >> 2)];
						var $cmp2157 = ((($120)) | 0) == 0;
						if ($cmp2157) {
							__label__ = 78;;
						} else {
							__label__ = 74;;
						}
						$for_end$$if_end217$104: do {
							if (__label__ == 74) {
								while (1) {
									var $121 = HEAP32[(($c2) >> 2)];
									var $call218 = _iswupper($121);
									var $tobool219 = ((($call218)) | 0) != 0;
									if ($tobool219) {
										__label__ = 75;;
									} else {
										__label__ = 76;;
									}
									if (__label__ == 75) {
										var $122 = HEAP32[(($c2) >> 2)];
										var $call221 = _towlower($122);
										var $123 = $p;
										var $call222 = __Z8utf8_outjPc($call221, $123);;
									} else if (__label__ == 76) {
										$all_upper_case = 0;;
									}
									var $124 = $ix;
									var $125 = $p;
									var $add_ptr225 = (($125 + $124) & 4294967295);
									$p = $add_ptr225;
									var $126 = $p;
									var $call214 = __Z7utf8_inPiPKc($c2, $126);
									$ix = $call214;
									var $127 = HEAP32[(($c2) >> 2)];
									var $cmp215 = ((($127)) | 0) == 0;
									if ($cmp215) {
										__label__ = 78;
										break $for_end$$if_end217$104;
									} else {
										__label__ = 74;
										continue;
									}
								}
							}
						} while (0);
						var $128 = $all_upper_case;
						var $tobool226 = ((($128)) | 0) != 0;
						if (!($tobool226)) {
							__label__ = 80;
							break $if_then206$$if_else209$100;
						}
						var $129 = $n_flag_codes;
						var $inc228 = ((($129) + 1) & 4294967295);
						$n_flag_codes = $inc228;
						var $arrayidx229 = (($flag_codes + $129) & 4294967295);
						HEAP8[($arrayidx229)] = 42;;
					}
				} while (0);
				var $130 = $word;
				var $call233 = _strlen($130);
				$len_word = $call233;
				var $131 = HEAP32[((_translator) >> 2)];
				var $transpose_min = (($131 + 288) & 4294967295);
				var $132 = HEAP32[(($transpose_min) >> 2)];
				var $cmp234 = ((($132)) | 0) > 0;
				if ($cmp234) {
					__label__ = 81;;
				} else {
					__label__ = 82;;
				}
				if (__label__ == 81) {
					var $133 = HEAP32[((_translator) >> 2)];
					var $134 = $word;
					var $call236 = __Z17TransposeAlphabetP10TranslatorPc($133, $134);
					$len_word = $call236;;
				}
				var $135 = $word;
				var $call238 = __Z14HashDictionaryPKc($135);
				var $136 = $hash_addr;
				HEAP32[(($136) >> 2)] = $call238;
				var $arraydecay239 = (($encoded_ph) & 4294967295);
				var $call240 = _strlen($arraydecay239);
				$len_phonetic = $call240;
				var $137 = $len_word;
				var $conv241 = ((($137)) & 255);
				var $138 = $dict_line_addr;
				var $arrayidx242 = (($138 + 1) & 4294967295);
				HEAP8[($arrayidx242)] = $conv241;
				var $139 = $len_word;
				var $and = ($139) & 63;
				$len_word = $and;
				var $140 = $dict_line_addr;
				var $arrayidx243 = (($140 + 2) & 4294967295);
				var $141 = $word;
				var $142 = $len_word;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $141;
				$dest$ = $arrayidx243;
				$stop$ = $src$ + $142;
				if (($dest$ % 4) == ($src$ % 4) && $142 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $143 = $len_phonetic;
				var $cmp244 = ((($143)) | 0) == 0;
				if ($cmp244) {
					__label__ = 83;;
				} else {
					__label__ = 84;;
				}
				if (__label__ == 83) {
					var $144 = $dict_line_addr;
					var $arrayidx246 = (($144 + 1) & 4294967295);
					var $145 = HEAP8[($arrayidx246)];
					var $conv247 = (tempInt = (($145)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $or = ($conv247) | 128;
					var $conv248 = ((($or)) & 255);
					HEAP8[($arrayidx246)] = $conv248;
					var $146 = $len_word;
					var $add249 = ((($146) + 2) & 4294967295);
					$length = $add249;;
				} else if (__label__ == 84) {
					var $147 = $len_word;
					var $148 = $len_phonetic;
					var $add251 = ((($147) + 3) & 4294967295);
					var $add252 = ((($add251) + ($148)) & 4294967295);
					$length = $add252;
					var $149 = $len_word;
					var $add253 = ((($149) + 2) & 4294967295);
					var $150 = $dict_line_addr;
					var $arrayidx254 = (($150 + $add253) & 4294967295);
					var $arraydecay255 = (($encoded_ph) & 4294967295);
					var $call256 = _strcpy($arrayidx254, $arraydecay255);;
				}
				$ix = 0;
				var $151 = $ix;
				var $152 = $n_flag_codes;
				var $cmp2598 = ((($151)) >>> 0) < ((($152)) >>> 0);
				if ($cmp2598) {
					__label__ = 86;;
				} else {
					__label__ = 87;;
				}
				$for_body$$for_end264$121: do {
					if (__label__ == 86) {
						while (1) {
							var $153 = $ix;
							var $arrayidx260 = (($flag_codes + $153) & 4294967295);
							var $154 = HEAP8[($arrayidx260)];
							var $155 = $ix;
							var $156 = $length;
							var $add261 = ((($156) + ($155)) & 4294967295);
							var $157 = $dict_line_addr;
							var $arrayidx262 = (($157 + $add261) & 4294967295);
							HEAP8[($arrayidx262)] = $154;
							var $158 = $ix;
							var $inc263 = ((($158) + 1) & 4294967295);
							$ix = $inc263;
							var $159 = $ix;
							var $160 = $n_flag_codes;
							var $cmp259 = ((($159)) >>> 0) < ((($160)) >>> 0);
							if ($cmp259) {
								__label__ = 86;
								continue;
							} else {
								__label__ = 87;
								break $for_body$$for_end264$121;
							}
						}
					}
				} while (0);
				var $161 = $n_flag_codes;
				var $162 = $length;
				var $add265 = ((($162) + ($161)) & 4294967295);
				$length = $add265;
				var $163 = $multiple_string;
				var $cmp266 = ((($163)) | 0) != 0;
				if ($cmp266) {
					__label__ = 88;;
				} else {
					__label__ = 94;;
				}
				$land_lhs_true267$$if_end286$125: do {
					if (__label__ == 88) {
						var $164 = $multiple_words;
						var $cmp268 = ((($164)) | 0) > 0;
						if (!($cmp268)) {
							__label__ = 94;
							break $land_lhs_true267$$if_end286$125;
						}
						var $165 = $multiple_words;
						var $cmp270 = ((($165)) | 0) > 10;
						if ($cmp270) {
							__label__ = 90;;
						} else {
							__label__ = 91;;
						}
						if (__label__ == 90) {
							var $166 = HEAP32[((__ZL5f_log) >> 2)];
							var $167 = HEAP32[((__ZL7linenum) >> 2)];
							var $168 = $multiple_words;
							var $call272 = _fprintf($166, ((__str114) & 4294967295), allocate([$167, 0, 0, 0, $168, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
						} else if (__label__ == 91) {
							var $169 = $multiple_words;
							var $add274 = ((($169) + 80) & 4294967295);
							var $conv275 = ((($add274)) & 255);
							var $170 = $length;
							var $inc276 = ((($170) + 1) & 4294967295);
							$length = $inc276;
							var $171 = $dict_line_addr;
							var $arrayidx277 = (($171 + $170) & 4294967295);
							HEAP8[($arrayidx277)] = $conv275;
							var $172 = $multiple_string_end;
							var $173 = $multiple_string;
							var $sub_ptr_lhs_cast = ($172);
							var $sub_ptr_rhs_cast = ($173);
							var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
							$ix = $sub_ptr_sub;
							var $174 = $multiple_numeric_hyphen;
							var $tobool278 = ((($174)) | 0) != 0;
							if ($tobool278) {
								__label__ = 92;;
							} else {
								__label__ = 93;;
							}
							if (__label__ == 92) {
								var $175 = $length;
								var $inc280 = ((($175) + 1) & 4294967295);
								$length = $inc280;
								var $176 = $dict_line_addr;
								var $arrayidx281 = (($176 + $175) & 4294967295);
								HEAP8[($arrayidx281)] = 32;;
							}
							var $177 = $length;
							var $178 = $dict_line_addr;
							var $arrayidx283 = (($178 + $177) & 4294967295);
							var $179 = $multiple_string;
							var $180 = $ix;
							var $src$, $dest$, $stop$, $stop4$, $fast$;
							$src$ = $179;
							$dest$ = $arrayidx283;
							$stop$ = $src$ + $180;
							if (($dest$ % 4) == ($src$ % 4) && $180 > 8) {
								while ($src$ % 4 !== 0 && $src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								}
								$src$ >>= 2;
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($src$ < $stop4$) {;;;
									HEAP32[$dest$++] = HEAP32[$src$++];
								}
								$src$ <<= 2;
								$dest$ <<= 2;
							}
							while ($src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							};
							var $181 = $ix;
							var $182 = $length;
							var $add284 = ((($182) + ($181)) & 4294967295);
							$length = $add284;;
						}
					}
				} while (0);
				var $183 = $length;
				var $conv287 = ((($183)) & 255);
				var $184 = $dict_line_addr;
				var $arrayidx288 = (($184) & 4294967295);
				HEAP8[($arrayidx288)] = $conv287;
				var $185 = $length;
				$retval = $185;;
			}
			var $186 = $retval;
			STACKTOP = __stackBase__;
			return $186;
			return null;
		}

		function __Z8strncpy0PcPKci($to, $from, $size) {;
			var __label__;
			var $to_addr;
			var $from_addr;
			var $size_addr;
			$to_addr = $to;
			$from_addr = $from;
			$size_addr = $size;
			var $0 = $to_addr;
			var $1 = $from_addr;
			var $2 = $size_addr;
			var $call = _strncpy($0, $1, $2);
			var $3 = $size_addr;
			var $sub = ((($3) - 1) & 4294967295);
			var $4 = $to_addr;
			var $arrayidx = (($4 + $sub) & 4294967295);
			HEAP8[($arrayidx)] = 0;;
			return;
			return;
		}

		function __Z13Reverse4Bytesi($word) {;
			var __label__;
			var $word_addr;
			$word_addr = $word;
			var $0 = $word_addr;;
			return $0;
			return null;
		}

		function __Z10LookupMnemP8MNEM_TABPKc($table, $string) {;
			var __label__;
			var $retval;
			var $table_addr;
			var $string_addr;
			$table_addr = $table;
			$string_addr = $string;;
			while (1) {
				var $0 = $table_addr;
				var $mnem = (($0) & 4294967295);
				var $1 = HEAP32[(($mnem) >> 2)];
				var $cmp = ((($1)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $string_addr;
				var $3 = $table_addr;
				var $mnem1 = (($3) & 4294967295);
				var $4 = HEAP32[(($mnem1) >> 2)];
				var $call = _strcmp($2, $4);
				var $cmp2 = ((($call)) | 0) == 0;
				var $5 = $table_addr;
				if ($cmp2) {
					__label__ = 3;
					break;
				}
				var $incdec_ptr = (($5 + 8) & 4294967295);
				$table_addr = $incdec_ptr;
				__label__ = 1;
				continue;
			}
			if (__label__ == 5) {
				var $7 = $table_addr;
				var $value3 = (($7 + 4) & 4294967295);
				var $8 = HEAP32[(($value3) >> 2)];
				$retval = $8;;
			} else if (__label__ == 3) {
				var $value = (($5 + 4) & 4294967295);
				var $6 = HEAP32[(($value) >> 2)];
				$retval = $6;;
			}
			var $9 = $retval;;
			return $9;
			return null;
		}

		function __Z14LoadDictionaryP10TranslatorPKci($tr, $name, $no_error) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 172;
			_memset(__stackBase__, 0, 172);
			var __label__;
			var $retval;
			var $tr_addr;
			var $name_addr;
			var $no_error_addr;
			var $hash;
			var $p;
			var $pw;
			var $length;
			var $f;
			var $size;
			var $fname = __stackBase__;
			$tr_addr = $tr;
			$name_addr = $name;
			$no_error_addr = $no_error;
			var $0 = $name_addr;
			var $call = _strcpy(((_dictionary_name) & 4294967295), $0);
			var $1 = $tr_addr;
			var $dictionary_name = (($1 + 292) & 4294967295);
			var $arraydecay = (($dictionary_name) & 4294967295);
			var $2 = $name_addr;
			var $call1 = _strcpy($arraydecay, $2);
			var $arraydecay2 = (($fname) & 4294967295);
			var $3 = $name_addr;
			var $call3 = _sprintf($arraydecay2, ((__str116) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0, $3, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay4 = (($fname) & 4294967295);
			var $call5 = __Z13GetFileLengthPKc($arraydecay4);
			$size = $call5;
			var $4 = $tr_addr;
			var $data_dictlist = (($4 + 1052) & 4294967295);
			var $5 = HEAP32[(($data_dictlist) >> 2)];
			var $cmp = ((($5)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $6 = $tr_addr;
				var $data_dictlist6 = (($6 + 1052) & 4294967295);
				var $7 = HEAP32[(($data_dictlist6) >> 2)];
				__Z4FreePv($7);
				var $8 = $tr_addr;
				var $data_dictlist7 = (($8 + 1052) & 4294967295);
				HEAP32[(($data_dictlist7) >> 2)] = 0;;
			}
			var $arraydecay8 = (($fname) & 4294967295);
			var $call9 = _fopen($arraydecay8, ((__str18429) & 4294967295));
			$f = $call9;
			var $cmp10 = ((($call9)) | 0) == 0;
			if ($cmp10) {
				__label__ = 4;;
			} else {
				__label__ = 3;;
			}
			$if_then12$$lor_lhs_false$5: do {
				if (__label__ == 3) {
					var $9 = $size;
					var $cmp11 = ((($9)) >>> 0) <= 0;
					if ($cmp11) {
						__label__ = 4;
						break $if_then12$$lor_lhs_false$5;
					}
					var $13 = $size;
					var $call19 = __Z5Alloci($13);
					var $14 = $tr_addr;
					var $data_dictlist20 = (($14 + 1052) & 4294967295);
					HEAP32[(($data_dictlist20) >> 2)] = $call19;
					var $15 = $tr_addr;
					var $data_dictlist21 = (($15 + 1052) & 4294967295);
					var $16 = HEAP32[(($data_dictlist21) >> 2)];
					var $17 = $size;
					var $18 = $f;
					var $call22 = _fread($16, 1, $17, $18);
					$size = $call22;
					var $19 = $f;
					var $call23 = _fclose($19);
					var $20 = $tr_addr;
					var $data_dictlist24 = (($20 + 1052) & 4294967295);
					var $21 = HEAP32[(($data_dictlist24) >> 2)];
					var $22 = $21;
					$pw = $22;
					var $23 = $pw;
					var $arrayidx = (($23 + 4) & 4294967295);
					var $24 = HEAP32[(($arrayidx) >> 2)];
					var $call25 = __Z13Reverse4Bytesi($24);
					$length = $call25;
					var $25 = $size;
					var $cmp26 = ((($25)) >>> 0) <= 1032;
					if ($cmp26) {
						__label__ = 8;;
					} else {
						__label__ = 9;;
					}
					if (__label__ == 8) {
						var $26 = HEAP32[((__impure_ptr) >> 2)];
						var $_stderr28 = (($26 + 12) & 4294967295);
						var $27 = HEAP32[(($_stderr28) >> 2)];
						var $arraydecay29 = (($fname) & 4294967295);
						var $call30 = _fprintf($27, ((__str3119) & 4294967295), allocate([$arraydecay29, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
						$retval = 2;
						__label__ = 19;
						break $if_then12$$lor_lhs_false$5;
					} else if (__label__ == 9) {
						var $28 = $pw;
						var $arrayidx32 = (($28) & 4294967295);
						var $29 = HEAP32[(($arrayidx32) >> 2)];
						var $call33 = __Z13Reverse4Bytesi($29);
						var $cmp34 = ((($call33)) | 0) != 1024;
						if ($cmp34) {
							__label__ = 11;;
						} else {
							__label__ = 10;;
						}
						$if_then39$$lor_lhs_false35$11: do {
							if (__label__ == 10) {
								var $30 = $length;
								var $cmp36 = ((($30)) | 0) <= 0;
								var $31 = $length;
								var $cmp38 = ((($31)) | 0) > 134217728;
								var $or_cond = ($cmp36) | ($cmp38);
								if ($or_cond) {
									__label__ = 11;
									break $if_then39$$lor_lhs_false35$11;
								}
								var $37 = $length;
								var $38 = $tr_addr;
								var $data_dictlist46 = (($38 + 1052) & 4294967295);
								var $39 = HEAP32[(($data_dictlist46) >> 2)];
								var $arrayidx47 = (($39 + $37) & 4294967295);
								var $40 = $tr_addr;
								var $data_dictrules = (($40 + 1048) & 4294967295);
								HEAP32[(($data_dictrules) >> 2)] = $arrayidx47;
								var $41 = $tr_addr;
								__ZL10InitGroupsP10Translator($41);
								var $42 = $tr_addr;
								var $groups1 = (($42 + 5256) & 4294967295);
								var $arrayidx48 = (($groups1) & 4294967295);
								var $43 = HEAP32[(($arrayidx48) >> 2)];
								var $cmp49 = ((($43)) | 0) == 0;
								if ($cmp49) {
									__label__ = 13;;
								} else {
									__label__ = 14;;
								}
								if (__label__ == 13) {
									var $44 = HEAP32[((__impure_ptr) >> 2)];
									var $_stderr51 = (($44 + 12) & 4294967295);
									var $45 = HEAP32[(($_stderr51) >> 2)];
									var $46 = $name_addr;
									var $call52 = _fprintf($45, ((__str5121) & 4294967295), allocate([$46, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
								}
								var $47 = $tr_addr;
								var $data_dictlist54 = (($47 + 1052) & 4294967295);
								var $48 = HEAP32[(($data_dictlist54) >> 2)];
								var $arrayidx55 = (($48 + 8) & 4294967295);
								$p = $arrayidx55;
								$hash = 0;;
								$for_body$17: while (1) {
									var $49 = $p;
									var $50 = $hash;
									var $51 = $tr_addr;
									var $dict_hashtab = (($51 + 1056) & 4294967295);
									var $arrayidx57 = (($dict_hashtab + $50 * 4) & 4294967295);
									HEAP32[(($arrayidx57) >> 2)] = $49;
									var $52 = $p;
									var $53 = HEAP8[($52)];
									var $conv1 = (tempInt = (($53)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									$length = $conv1;
									var $cmp582 = ((($conv1)) | 0) != 0;
									if ($cmp582) {
										__label__ = 16;;
									} else {
										__label__ = 17;;
									}
									$while_body$$while_end$19: do {
										if (__label__ == 16) {
											while (1) {
												var $54 = $length;
												var $55 = $p;
												var $add_ptr = (($55 + $54) & 4294967295);
												$p = $add_ptr;
												var $56 = $p;
												var $57 = HEAP8[($56)];
												var $conv = (tempInt = (($57)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												$length = $conv;
												var $cmp58 = ((($conv)) | 0) != 0;
												if ($cmp58) {
													__label__ = 16;
													continue;
												} else {
													__label__ = 17;
													break $while_body$$while_end$19;
												}
											}
										}
									} while (0);
									var $58 = $p;
									var $incdec_ptr = (($58 + 1) & 4294967295);
									$p = $incdec_ptr;
									var $59 = $hash;
									var $inc = ((($59) + 1) & 4294967295);
									$hash = $inc;
									var $cmp56 = ((($inc)) | 0) < 1024;
									if ($cmp56) {
										__label__ = 15;
										continue $for_body$17;
									} else {
										__label__ = 18;
										break $for_body$17;
									}
								}
								$retval = 0;
								__label__ = 19;
								break $if_then12$$lor_lhs_false$5;
							}
						} while (0);
						var $32 = HEAP32[((__impure_ptr) >> 2)];
						var $_stderr40 = (($32 + 12) & 4294967295);
						var $33 = HEAP32[(($_stderr40) >> 2)];
						var $arraydecay41 = (($fname) & 4294967295);
						var $34 = $pw;
						var $arrayidx42 = (($34) & 4294967295);
						var $35 = HEAP32[(($arrayidx42) >> 2)];
						var $call43 = __Z13Reverse4Bytesi($35);
						var $36 = $length;
						var $call44 = _fprintf($33, ((__str4120) & 4294967295), allocate([$arraydecay41, 0, 0, 0, $call43, 0, 0, 0, $36, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
						$retval = 2;
						__label__ = 19;
						break $if_then12$$lor_lhs_false$5;
					}
				}
			} while (0);
			if (__label__ == 4) {
				var $10 = $no_error_addr;
				var $cmp13 = ((($10)) | 0) == 0;
				if ($cmp13) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $11 = HEAP32[((__impure_ptr) >> 2)];
					var $_stderr = (($11 + 12) & 4294967295);
					var $12 = HEAP32[(($_stderr) >> 2)];
					var $arraydecay15 = (($fname) & 4294967295);
					var $call16 = _fprintf($12, ((__str2118) & 4294967295), allocate([$arraydecay15, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
				}
				$retval = 1;;
			}
			var $60 = $retval;
			STACKTOP = __stackBase__;
			return $60;
			return null;
		}

		function __ZL10InitGroupsP10Translator($tr) {;
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $ix;
			var $p;
			var $p_name;
			var $pw;
			var $c;
			var $c2;
			var $len;
			$tr_addr = $tr;
			var $0 = $tr_addr;
			var $n_groups2 = (($0 + 7752) & 4294967295);
			HEAP32[(($n_groups2) >> 2)] = 0;
			$ix = 0;;
			$for_body$2: while (1) {
				var $1 = $ix;
				var $2 = $tr_addr;
				var $groups1 = (($2 + 5256) & 4294967295);
				var $arrayidx = (($groups1 + $1 * 4) & 4294967295);
				HEAP32[(($arrayidx) >> 2)] = 0;
				var $3 = $ix;
				var $4 = $tr_addr;
				var $groups2_count = (($4 + 7756) & 4294967295);
				var $arrayidx1 = (($groups2_count + $3) & 4294967295);
				HEAP8[($arrayidx1)] = 0;
				var $5 = $ix;
				var $6 = $tr_addr;
				var $groups2_start = (($6 + 8012) & 4294967295);
				var $arrayidx2 = (($groups2_start + $5) & 4294967295);
				HEAP8[($arrayidx2)] = -1;
				var $7 = $ix;
				var $inc = ((($7) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 256;
				if ($cmp) {
					__label__ = 1;
					continue $for_body$2;
				} else {
					__label__ = 2;
					break $for_body$2;
				}
			}
			var $8 = $tr_addr;
			var $letterGroups = (($8 + 5152) & 4294967295);
			var $arraydecay = (($letterGroups) & 4294967295);
			var $9 = $arraydecay;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $9;
			$stop$ = $dest$ + 104;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $10 = $tr_addr;
			var $groups3 = (($10 + 6280) & 4294967295);
			var $arraydecay3 = (($groups3) & 4294967295);
			var $11 = $arraydecay3;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $11;
			$stop$ = $dest$ + 512;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $12 = $tr_addr;
			var $data_dictrules = (($12 + 1048) & 4294967295);
			var $13 = HEAP32[(($data_dictrules) >> 2)];
			$p = $13;;
			$while_cond$5: while (1) {
				var $14 = $p;
				var $15 = HEAP8[($14)];
				var $conv = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp4 = ((($conv)) | 0) != 0;
				if (!($cmp4)) {
					__label__ = 25;
					break $while_cond$5;
				}
				var $16 = $p;
				var $17 = HEAP8[($16)];
				var $conv5 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp6 = ((($conv5)) | 0) != 6;
				if ($cmp6) {
					__label__ = 5;
					break $while_cond$5;
				}
				var $23 = $p;
				var $incdec_ptr = (($23 + 1) & 4294967295);
				$p = $incdec_ptr;
				var $24 = $p;
				var $arrayidx8 = (($24) & 4294967295);
				var $25 = HEAP8[($arrayidx8)];
				var $conv9 = (tempInt = (($25)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp10 = ((($conv9)) | 0) == 20;
				var $26 = $p;
				if ($cmp10) {
					__label__ = 7;;
				} else {
					__label__ = 10;;
				}
				if (__label__ == 7) {
					var $27 = ($26);
					var $add = ((($27) + 4) & 4294967295);
					var $and = ($add) & -4;
					var $28 = ($and);
					$pw = $28;
					var $29 = $pw;
					var $30 = $tr_addr;
					var $langopts = (($30) & 4294967295);
					var $replace_chars = (($langopts + 264) & 4294967295);
					HEAP32[(($replace_chars) >> 2)] = $29;
					var $31 = $pw;
					var $arrayidx134 = (($31) & 4294967295);
					var $32 = HEAP32[(($arrayidx134) >> 2)];
					var $cmp145 = ((($32)) | 0) != 0;
					var $33 = $pw;
					if ($cmp145) {
						__lastLabel__ = 7;
						__label__ = 8;;
					} else {
						__lastLabel__ = 7;
						__label__ = 9;;
					}
					$while_body15$$while_end$11: do {
						if (__label__ == 8) {
							while (1) {
								var $34 = __lastLabel__ == 8 ? $37 : ($33);
								var $add_ptr = (($34 + 8) & 4294967295);
								$pw = $add_ptr;
								var $35 = $pw;
								var $arrayidx13 = (($35) & 4294967295);
								var $36 = HEAP32[(($arrayidx13) >> 2)];
								var $cmp14 = ((($36)) | 0) != 0;
								var $37 = $pw;
								if ($cmp14) {
									__lastLabel__ = 8;
									__label__ = 8;
									continue;
								} else {
									__lastLabel__ = 8;
									__label__ = 9;
									break $while_body15$$while_end$11;
								}
							}
						}
					} while (0);
					var $_lcssa3 = __lastLabel__ == 7 ? $33 : ($37);
					var $add_ptr16 = (($_lcssa3 + 4) & 4294967295);
					var $38 = $add_ptr16;
					$p = $38;
					__label__ = 3;
					continue $while_cond$5;
				} else if (__label__ == 10) {
					var $arrayidx18 = (($26) & 4294967295);
					var $39 = HEAP8[($arrayidx18)];
					var $conv19 = (tempInt = (($39)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp20 = ((($conv19)) | 0) == 18;
					var $40 = $p;
					if ($cmp20) {
						__label__ = 11;;
					} else {
						__label__ = 13;;
					}
					$if_then21$$if_else$16: do {
						if (__label__ == 11) {
							var $arrayidx22 = (($40 + 1) & 4294967295);
							var $41 = HEAP8[($arrayidx22)];
							var $conv23 = (tempInt = (($41)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $sub = ((($conv23) - 65) & 4294967295);
							$ix = $sub;
							var $42 = $p;
							var $add_ptr24 = (($42 + 2) & 4294967295);
							$p = $add_ptr24;
							var $43 = $ix;
							var $cmp25 = ((($43)) | 0) >= 0;
							var $44 = $ix;
							var $cmp26 = ((($44)) | 0) < 26;
							var $or_cond = ($cmp25) & ($cmp26);
							if (!($or_cond)) {
								__label__ = 22;
								break $if_then21$$if_else$16;
							}
							var $45 = $p;
							var $46 = $ix;
							var $47 = $tr_addr;
							var $letterGroups28 = (($47 + 5152) & 4294967295);
							var $arrayidx29 = (($letterGroups28 + $46 * 4) & 4294967295);
							HEAP32[(($arrayidx29) >> 2)] = $45;;
						} else if (__label__ == 13) {
							var $call31 = _strlen($40);
							$len = $call31;
							var $48 = $p;
							$p_name = $48;
							var $49 = $p_name;
							var $arrayidx32 = (($49) & 4294967295);
							var $50 = HEAP8[($arrayidx32)];
							$c = $50;
							var $51 = $p_name;
							var $arrayidx33 = (($51 + 1) & 4294967295);
							var $52 = HEAP8[($arrayidx33)];
							$c2 = $52;
							var $53 = $len;
							var $add34 = ((($53) + 1) & 4294967295);
							var $54 = $p;
							var $add_ptr35 = (($54 + $add34) & 4294967295);
							$p = $add_ptr35;
							var $55 = $len;
							var $cmp36 = ((($55)) | 0) == 1;
							if ($cmp36) {
								__label__ = 14;;
							} else {
								__label__ = 15;;
							}
							if (__label__ == 14) {
								var $56 = $p;
								var $57 = $c;
								var $idxprom = ((($57)) & 255);
								var $58 = $tr_addr;
								var $groups138 = (($58 + 5256) & 4294967295);
								var $arrayidx39 = (($groups138 + $idxprom * 4) & 4294967295);
								HEAP32[(($arrayidx39) >> 2)] = $56;;
							} else if (__label__ == 15) {
								var $59 = $len;
								var $cmp41 = ((($59)) | 0) == 0;
								if ($cmp41) {
									__label__ = 16;;
								} else {
									__label__ = 17;;
								}
								if (__label__ == 16) {
									var $60 = $p;
									var $61 = $tr_addr;
									var $groups143 = (($61 + 5256) & 4294967295);
									var $arrayidx44 = (($groups143) & 4294967295);
									HEAP32[(($arrayidx44) >> 2)] = $60;;
								} else if (__label__ == 17) {
									var $62 = $c;
									var $conv46 = ((($62)) & 255);
									var $cmp47 = ((($conv46)) | 0) == 1;
									if ($cmp47) {
										__label__ = 18;;
									} else {
										__label__ = 19;;
									}
									if (__label__ == 18) {
										var $63 = $p;
										var $64 = $c2;
										var $conv49 = ((($64)) & 255);
										var $sub50 = ((($conv49) - 1) & 4294967295);
										var $65 = $tr_addr;
										var $groups351 = (($65 + 6280) & 4294967295);
										var $arrayidx52 = (($groups351 + $sub50 * 4) & 4294967295);
										HEAP32[(($arrayidx52) >> 2)] = $63;;
									} else if (__label__ == 19) {
										var $66 = $c;
										var $idxprom54 = ((($66)) & 255);
										var $67 = $tr_addr;
										var $groups2_start55 = (($67 + 8012) & 4294967295);
										var $arrayidx56 = (($groups2_start55 + $idxprom54) & 4294967295);
										var $68 = HEAPU8[($arrayidx56)];
										var $conv57 = ((($68)) & 255);
										var $cmp58 = ((($conv57)) | 0) == 255;
										if ($cmp58) {
											__label__ = 20;;
										} else {
											__label__ = 21;;
										}
										if (__label__ == 20) {
											var $69 = $tr_addr;
											var $n_groups260 = (($69 + 7752) & 4294967295);
											var $70 = HEAP32[(($n_groups260) >> 2)];
											var $conv61 = ((($70)) & 255);
											var $71 = $c;
											var $idxprom62 = ((($71)) & 255);
											var $72 = $tr_addr;
											var $groups2_start63 = (($72 + 8012) & 4294967295);
											var $arrayidx64 = (($groups2_start63 + $idxprom62) & 4294967295);
											HEAP8[($arrayidx64)] = $conv61;;
										}
										var $73 = $c;
										var $idxprom66 = ((($73)) & 255);
										var $74 = $tr_addr;
										var $groups2_count67 = (($74 + 7756) & 4294967295);
										var $arrayidx68 = (($groups2_count67 + $idxprom66) & 4294967295);
										var $75 = HEAP8[($arrayidx68)];
										var $inc69 = ((($75) + 1) & 255);
										HEAP8[($arrayidx68)] = $inc69;
										var $76 = $p;
										var $77 = $tr_addr;
										var $n_groups270 = (($77 + 7752) & 4294967295);
										var $78 = HEAP32[(($n_groups270) >> 2)];
										var $79 = $tr_addr;
										var $groups2 = (($79 + 6792) & 4294967295);
										var $arrayidx71 = (($groups2 + $78 * 4) & 4294967295);
										HEAP32[(($arrayidx71) >> 2)] = $76;
										var $80 = $c;
										var $conv72 = ((($80)) & 255);
										var $81 = $c2;
										var $conv73 = ((($81)) & 255);
										var $shl = ((($conv73) * 256) & 4294967295);
										var $add74 = ((($shl) + ($conv72)) & 4294967295);
										var $82 = $tr_addr;
										var $n_groups275 = (($82 + 7752) & 4294967295);
										var $83 = HEAPU32[(($n_groups275) >> 2)];
										var $inc76 = ((($83) + 1) & 4294967295);
										HEAP32[(($n_groups275) >> 2)] = $inc76;
										var $84 = $tr_addr;
										var $groups2_name = (($84 + 7272) & 4294967295);
										var $arrayidx77 = (($groups2_name + $83 * 4) & 4294967295);
										HEAP32[(($arrayidx77) >> 2)] = $add74;;
									}
								}
							}
						}
					} while (0);
					var $85 = $p;
					var $86 = HEAP8[($85)];
					var $conv831 = (tempInt = (($86)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp842 = ((($conv831)) | 0) != 7;
					var $87 = $p;
					if ($cmp842) {
						__lastLabel__ = 22;
						__label__ = 23;;
					} else {
						__lastLabel__ = 22;
						__label__ = 24;;
					}
					$while_body85$$while_end89$33: do {
						if (__label__ == 23) {
							while (1) {
								var $88 = __lastLabel__ == 23 ? $92 : ($87);
								var $call86 = _strlen($88);
								var $add87 = ((($call86) + 1) & 4294967295);
								var $89 = $p;
								var $add_ptr88 = (($89 + $add87) & 4294967295);
								$p = $add_ptr88;
								var $90 = $p;
								var $91 = HEAP8[($90)];
								var $conv83 = (tempInt = (($91)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp84 = ((($conv83)) | 0) != 7;
								var $92 = $p;
								if ($cmp84) {
									__lastLabel__ = 23;
									__label__ = 23;
									continue;
								} else {
									__lastLabel__ = 23;
									__label__ = 24;
									break $while_body85$$while_end89$33;
								}
							}
						}
					} while (0);
					var $_lcssa = __lastLabel__ == 22 ? $87 : ($92);
					var $incdec_ptr90 = (($_lcssa + 1) & 4294967295);
					$p = $incdec_ptr90;
					__label__ = 3;
					continue $while_cond$5;
				}
			}
			if (__label__ == 5) {
				var $18 = HEAP32[((__impure_ptr) >> 2)];
				var $_stderr = (($18 + 12) & 4294967295);
				var $19 = HEAP32[(($_stderr) >> 2)];
				var $20 = $p;
				var $21 = $tr_addr;
				var $data_dictrules7 = (($21 + 1048) & 4294967295);
				var $22 = HEAP32[(($data_dictrules7) >> 2)];
				var $sub_ptr_lhs_cast = ($20);
				var $sub_ptr_rhs_cast = ($22);
				var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
				var $call = _fprintf($19, ((__str34150) & 4294967295), allocate([((_dictionary_name) & 4294967295), 0, 0, 0, $sub_ptr_sub, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
			};
			return;
			return;
		}

		function __Z14HashDictionaryPKc($string) {;
			var __label__;
			var __lastLabel__ = null;
			var $string_addr;
			var $c;
			var $chars;
			var $hash;
			$string_addr = $string;
			$chars = 0;
			$hash = 0;
			var $0 = $string_addr;
			var $incdec_ptr1 = (($0 + 1) & 4294967295);
			$string_addr = $incdec_ptr1;
			var $1 = HEAP8[($0)];
			var $conv2 = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $and4 = ($conv2) & 255;
			$c = $and4;
			var $cmp5 = ((($and4)) | 0) != 0;
			var $2 = $hash;
			if ($cmp5) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = __lastLabel__ == 1 ? $10 : ($2);
						var $mul = ((($3) * 8) & 4294967295);
						var $4 = $c;
						var $add = ((($4) + ($mul)) & 4294967295);
						$hash = $add;
						var $5 = $hash;
						var $and1 = ($5) & 1023;
						var $6 = $hash;
						var $shr = ($6) >> 8;
						var $xor = ($shr) ^ ($and1);
						$hash = $xor;
						var $7 = $chars;
						var $inc = ((($7) + 1) & 4294967295);
						$chars = $inc;
						var $8 = $string_addr;
						var $incdec_ptr = (($8 + 1) & 4294967295);
						$string_addr = $incdec_ptr;
						var $9 = HEAP8[($8)];
						var $conv = (tempInt = (($9)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $and = ($conv) & 255;
						$c = $and;
						var $cmp = ((($and)) | 0) != 0;
						var $10 = $hash;
						if ($cmp) {
							__lastLabel__ = 1;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 1;
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 0 ? $2 : ($10);
			var $11 = $chars;
			var $add2 = ((($11) + ($_lcssa)) & 4294967295);
			var $and3 = ($add2) & 1023;;
			return $and3;
			return null;
		}

		function __Z14EncodePhonemesPcS_Ph($p, $outptr, $bad_phoneme) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $p_addr;
			var $outptr_addr;
			var $bad_phoneme_addr;
			var $ix;
			var $c;
			var $count;
			var $max;
			var $max_ph;
			var $consumed;
			var $mnemonic_word;
			var $p_lang;
			$p_addr = $p;
			$outptr_addr = $outptr;
			$bad_phoneme_addr = $bad_phoneme;
			var $0 = $bad_phoneme_addr;
			var $arrayidx = (($0) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $1 = $p_addr;
			var $2 = HEAP8[($1)];
			var $conv4 = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $call5 = _isspace($conv4);
			var $tobool6 = ((($call5)) | 0) != 0;
			if ($tobool6) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$while_body$$while_cond1$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = $p_addr;
						var $incdec_ptr = (($3 + 1) & 4294967295);
						$p_addr = $incdec_ptr;
						var $4 = $p_addr;
						var $5 = HEAP8[($4)];
						var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call = _isspace($conv);
						var $tobool = ((($call)) | 0) != 0;
						if ($tobool) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $while_body$$while_cond1$2;
						}
					}
				}
			} while (0);
			$while_cond1$5: while (1) {
				var $6 = $p_addr;
				var $7 = HEAPU8[($6)];
				$c = $7;
				var $conv2 = ((($7)) & 255);
				var $cmp = ((($conv2)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 34;
					break $while_cond1$5;
				}
				var $8 = $c;
				var $conv3 = ((($8)) & 255);
				var $call4 = _isspace($conv3);
				var $tobool5 = ((($call4)) | 0) != 0;
				var $lnot = ($tobool5) ^ 1;
				if (!($lnot)) {
					__label__ = 34;
					break $while_cond1$5;
				}
				$consumed = 0;
				var $9 = $c;
				var $conv7 = ((($9)) & 255);
				var $cond = ((($conv7)) | 0) == 124;
				if ($cond) {
					__label__ = 5;;
				} else {
					__label__ = 7;;
				}
				$sw_bb$$sw_default$9: do {
					if (__label__ == 5) {
						var $10 = $p_addr;
						var $arrayidx8 = (($10 + 1) & 4294967295);
						var $11 = HEAPU8[($arrayidx8)];
						$c = $11;
						var $conv9 = ((($11)) & 255);
						var $cmp10 = ((($conv9)) | 0) == 124;
						if ($cmp10) {
							__label__ = 7;
							break $sw_bb$$sw_default$9;
						}
						var $12 = $p_addr;
						var $incdec_ptr11 = (($12 + 1) & 4294967295);
						$p_addr = $incdec_ptr11;
						__label__ = 2;
						continue $while_cond1$5;
					}
				} while (0);
				$max = -1;
				$max_ph = 0;
				$ix = 1;
				var $13 = $ix;
				var $14 = HEAP32[((_n_phoneme_tab) >> 2)];
				var $cmp121 = ((($13)) | 0) < ((($14)) | 0);
				if (!($cmp121)) {
					__label__ = 22;
					break $while_cond1$5;
				}
				$for_body$13: while (1) {
					var $15 = $ix;
					var $arrayidx13 = ((_phoneme_tab + $15 * 4) & 4294967295);
					var $16 = HEAP32[(($arrayidx13) >> 2)];
					var $cmp14 = ((($16)) | 0) == 0;
					if ($cmp14) {
						__label__ = 20;;
					} else {
						__label__ = 9;;
					}
					$for_inc$$if_end16$15: do {
						if (__label__ == 9) {
							var $17 = $ix;
							var $arrayidx17 = ((_phoneme_tab + $17 * 4) & 4294967295);
							var $18 = HEAP32[(($arrayidx17) >> 2)];
							var $type = (($18 + 11) & 4294967295);
							var $19 = HEAPU8[($type)];
							var $conv18 = ((($19)) & 255);
							var $cmp19 = ((($conv18)) | 0) == 15;
							if ($cmp19) {
								__label__ = 20;
								break $for_inc$$if_end16$15;
							}
							$count = 0;
							var $20 = $ix;
							var $arrayidx22 = ((_phoneme_tab + $20 * 4) & 4294967295);
							var $21 = HEAP32[(($arrayidx22) >> 2)];
							var $mnemonic = (($21) & 4294967295);
							var $22 = HEAP32[(($mnemonic) >> 2)];
							$mnemonic_word = $22;;
							while (1) {
								var $23 = $count;
								var $24 = $p_addr;
								var $arrayidx24 = (($24 + $23) & 4294967295);
								var $25 = HEAPU8[($arrayidx24)];
								$c = $25;
								var $conv25 = ((($25)) & 255);
								var $cmp26 = ((($conv25)) | 0) > 32;
								if (!($cmp26)) {
									__label__ = 13;
									break;
								}
								var $26 = $count;
								var $cmp27 = ((($26)) | 0) < 4;
								if (!($cmp27)) {
									__label__ = 13;
									break;
								}
								var $28 = $c;
								var $conv29 = ((($28)) & 255);
								var $29 = $mnemonic_word;
								var $30 = $count;
								var $mul = ((($30) * 8) & 4294967295);
								var $shr = ($29) >>> ((($mul)) >>> 0);
								var $and = ($shr) & 255;
								var $cmp30 = ((($conv29)) | 0) == ((($and)) | 0);
								var $31 = $count;
								if ($cmp30) {
									__lastLabel__ = 14;;
								} else {
									__lastLabel__ = 14;
									__label__ = 16;
									break;
								}
								var $inc = ((($31) + 1) & 4294967295);
								$count = $inc;
								__label__ = 11;
								continue;
							}
							if (__label__ == 13) {
								var $27 = $count;
								__lastLabel__ = 13;;
							}
							var $32 = __lastLabel__ == 13 ? $27 : ($31);
							var $33 = $max;
							var $cmp34 = ((($32)) | 0) > ((($33)) | 0);
							if (!($cmp34)) {
								__label__ = 20;
								break $for_inc$$if_end16$15;
							}
							var $34 = $count;
							var $cmp36 = ((($34)) | 0) == 4;
							if ($cmp36) {
								__label__ = 19;;
							} else {
								__label__ = 18;;
							}
							if (__label__ == 18) {
								var $35 = $mnemonic_word;
								var $36 = $count;
								var $mul37 = ((($36) * 8) & 4294967295);
								var $shr38 = ($35) >>> ((($mul37)) >>> 0);
								var $and39 = ($shr38) & 255;
								var $cmp40 = ((($and39)) | 0) == 0;
								if (!($cmp40)) {
									__label__ = 20;
									break $for_inc$$if_end16$15;
								}
							}
							var $37 = $count;
							$max = $37;
							var $38 = $ix;
							var $arrayidx42 = ((_phoneme_tab + $38 * 4) & 4294967295);
							var $39 = HEAP32[(($arrayidx42) >> 2)];
							var $code = (($39 + 10) & 4294967295);
							var $40 = HEAPU8[($code)];
							var $conv43 = ((($40)) & 255);
							$max_ph = $conv43;;
						}
					} while (0);
					var $41 = $ix;
					var $inc45 = ((($41) + 1) & 4294967295);
					$ix = $inc45;
					var $42 = $ix;
					var $43 = HEAP32[((_n_phoneme_tab) >> 2)];
					var $cmp12 = ((($42)) | 0) < ((($43)) | 0);
					if ($cmp12) {
						__label__ = 8;
						continue $for_body$13;
					} else {
						__label__ = 21;
						break $for_body$13;
					}
				}
				var $_pr = $max_ph;
				var $cmp46 = ((($_pr)) | 0) == 0;
				if ($cmp46) {
					__label__ = 22;
					break $while_cond1$5;
				}
				var $50 = $max;
				var $cmp52 = ((($50)) | 0) <= 0;
				if ($cmp52) {
					__label__ = 24;;
				} else {
					__label__ = 25;;
				}
				if (__label__ == 24) {
					$max = 1;;
				}
				var $51 = $consumed;
				var $52 = $max;
				var $add = ((($52) + ($51)) & 4294967295);
				var $53 = $p_addr;
				var $add_ptr55 = (($53 + $add) & 4294967295);
				$p_addr = $add_ptr55;
				var $54 = $max_ph;
				var $conv56 = ((($54)) & 255);
				var $55 = $outptr_addr;
				var $incdec_ptr57 = (($55 + 1) & 4294967295);
				$outptr_addr = $incdec_ptr57;
				HEAP8[($55)] = $conv56;
				var $56 = $max_ph;
				var $cmp58 = ((($56)) | 0) == 21;
				if (!($cmp58)) {
					__label__ = 2;
					continue $while_cond1$5;
				}
				var $57 = $outptr_addr;
				$p_lang = $57;;
				while (1) {
					var $58 = $p_addr;
					var $59 = HEAPU8[($58)];
					$c = $59;
					var $conv61 = ((($59)) & 255);
					var $call62 = _isspace($conv61);
					var $tobool63 = ((($call62)) | 0) != 0;
					if ($tobool63) {
						__label__ = 30;
						break;
					}
					var $60 = $c;
					var $conv65 = ((($60)) & 255);
					var $cmp66 = ((($conv65)) | 0) != 0;
					if (!($cmp66)) {
						__label__ = 30;
						break;
					}
					var $61 = $p_addr;
					var $incdec_ptr69 = (($61 + 1) & 4294967295);
					$p_addr = $incdec_ptr69;
					var $62 = $c;
					var $conv70 = ((($62)) & 255);
					var $call71 = _tolower($conv70);
					var $conv72 = ((($call71)) & 255);
					var $63 = $outptr_addr;
					var $incdec_ptr73 = (($63 + 1) & 4294967295);
					$outptr_addr = $incdec_ptr73;
					HEAP8[($63)] = $conv72;
					__label__ = 27;
					continue;
				}
				var $64 = $outptr_addr;
				HEAP8[($64)] = 0;
				var $65 = $c;
				var $conv75 = ((($65)) & 255);
				var $cmp76 = ((($conv75)) | 0) == 0;
				if ($cmp76) {
					__label__ = 31;;
				} else {
					__label__ = 33;;
				}
				if (__label__ == 31) {
					var $66 = $p_lang;
					var $call78 = _strcmp($66, ((__str52704) & 4294967295));
					var $cmp79 = ((($call78)) | 0) == 0;
					if ($cmp79) {
						__label__ = 32;
						break $while_cond1$5;
					} else {
						__label__ = 2;
						continue $while_cond1$5;
					}
				} else if (__label__ == 33) {
					var $69 = $outptr_addr;
					var $incdec_ptr83 = (($69 + 1) & 4294967295);
					$outptr_addr = $incdec_ptr83;
					HEAP8[($69)] = 124;
					__label__ = 2;
					continue $while_cond1$5;
				}
			}
			if (__label__ == 34) {
				var $70 = $outptr_addr;
				HEAP8[($70)] = 0;
				var $71 = $p_addr;
				$retval = $71;;
			} else if (__label__ == 22) {
				var $44 = $p_addr;
				var $45 = HEAP8[($44)];
				var $46 = $bad_phoneme_addr;
				var $arrayidx48 = (($46) & 4294967295);
				HEAP8[($arrayidx48)] = $45;
				var $47 = $bad_phoneme_addr;
				var $arrayidx49 = (($47 + 1) & 4294967295);
				HEAP8[($arrayidx49)] = 0;
				var $48 = $outptr_addr;
				var $incdec_ptr50 = (($48 + 1) & 4294967295);
				$outptr_addr = $incdec_ptr50;
				HEAP8[($48)] = 0;
				var $49 = $p_addr;
				var $add_ptr = (($49 + 1) & 4294967295);
				$retval = $add_ptr;;
			} else if (__label__ == 32) {
				var $67 = $p_lang;
				HEAP8[($67)] = 0;
				var $68 = $p_addr;
				$retval = $68;;
			}
			var $72 = $retval;;
			return $72;
			return null;
		}

		function __Z14DecodePhonemesPKcPc($inptr, $outptr) {;
			var __label__;
			var $inptr_addr;
			var $outptr_addr;
			var $phcode;
			var $c;
			var $mnem;
			var $ph;
			$inptr_addr = $inptr;
			$outptr_addr = $outptr;
			var $0 = $inptr_addr;
			var $incdec_ptr8 = (($0 + 1) & 4294967295);
			$inptr_addr = $incdec_ptr8;
			var $1 = HEAPU8[($0)];
			$phcode = $1;
			var $conv9 = ((($1)) & 255);
			var $cmp10 = ((($conv9)) | 0) > 0;
			if ($cmp10) {
				__label__ = 1;;
			} else {
				__label__ = 14;;
			}
			$while_body$$while_end40$2: do {
				if (__label__ == 1) {
					$while_body$3: while (1) {
						var $2 = $phcode;
						var $conv1 = ((($2)) & 255);
						var $cmp2 = ((($conv1)) | 0) == 255;
						if ($cmp2) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						$while_cond_backedge$$if_end$5: do {
							if (__label__ == 3) {
								var $5 = $phcode;
								var $idxprom = ((($5)) & 255);
								var $arrayidx = ((_phoneme_tab + $idxprom * 4) & 4294967295);
								var $6 = HEAPU32[(($arrayidx) >> 2)];
								$ph = $6;
								var $cmp3 = ((($6)) | 0) == 0;
								if ($cmp3) {
									__label__ = 2;
									break $while_cond_backedge$$if_end$5;
								}
								var $7 = $ph;
								var $type = (($7 + 11) & 4294967295);
								var $8 = HEAPU8[($type)];
								var $conv6 = ((($8)) & 255);
								var $cmp7 = ((($conv6)) | 0) == 1;
								if ($cmp7) {
									__label__ = 5;;
								} else {
									__label__ = 9;;
								}
								$land_lhs_true$$if_else$8: do {
									if (__label__ == 5) {
										var $9 = $ph;
										var $std_length = (($9 + 14) & 4294967295);
										var $10 = HEAPU8[($std_length)];
										var $conv8 = ((($10)) & 255);
										var $cmp9 = ((($conv8)) | 0) <= 4;
										if (!($cmp9)) {
											__label__ = 9;
											break $land_lhs_true$$if_else$8;
										}
										var $11 = $ph;
										var $program = (($11 + 8) & 4294967295);
										var $12 = HEAPU16[(($program) >> 1)];
										var $conv11 = ((($12)) & 65535);
										var $cmp12 = ((($conv11)) | 0) == 0;
										if (!($cmp12)) {
											__label__ = 9;
											break $land_lhs_true$$if_else$8;
										}
										var $13 = $ph;
										var $std_length14 = (($13 + 14) & 4294967295);
										var $14 = HEAPU8[($std_length14)];
										var $conv15 = ((($14)) & 255);
										var $cmp16 = ((($conv15)) | 0) > 1;
										if (!($cmp16)) {
											__label__ = 2;
											break $while_cond_backedge$$if_end$5;
										}
										var $15 = $ph;
										var $std_length18 = (($15 + 14) & 4294967295);
										var $16 = HEAPU8[($std_length18)];
										var $idxprom19 = ((($16)) & 255);
										var $arrayidx20 = ((((__str7123) & 4294967295) + $idxprom19) & 4294967295);
										var $17 = HEAP8[($arrayidx20)];
										var $18 = $outptr_addr;
										var $incdec_ptr21 = (($18 + 1) & 4294967295);
										$outptr_addr = $incdec_ptr21;
										HEAP8[($18)] = $17;
										__label__ = 2;
										break $while_cond_backedge$$if_end$5;
									}
								} while (0);
								var $19 = $ph;
								var $mnemonic = (($19) & 4294967295);
								var $20 = HEAP32[(($mnemonic) >> 2)];
								$mnem = $20;
								var $21 = $mnem;
								var $and4 = ($21) & 255;
								var $conv245 = ((($and4)) & 255);
								$c = $conv245;
								var $conv256 = ((($conv245)) & 255);
								var $cmp267 = ((($conv256)) | 0) != 0;
								if ($cmp267) {
									__label__ = 10;;
								} else {
									__label__ = 11;;
								}
								$while_body27$$while_end$14: do {
									if (__label__ == 10) {
										while (1) {
											var $22 = $c;
											var $23 = $outptr_addr;
											var $incdec_ptr28 = (($23 + 1) & 4294967295);
											$outptr_addr = $incdec_ptr28;
											HEAP8[($23)] = $22;
											var $24 = $mnem;
											var $shr = ($24) >>> 8;
											$mnem = $shr;
											var $25 = $mnem;
											var $and = ($25) & 255;
											var $conv24 = ((($and)) & 255);
											$c = $conv24;
											var $conv25 = ((($conv24)) & 255);
											var $cmp26 = ((($conv25)) | 0) != 0;
											if ($cmp26) {
												__label__ = 10;
												continue;
											} else {
												__label__ = 11;
												break $while_body27$$while_end$14;
											}
										}
									}
								} while (0);
								var $26 = $phcode;
								var $conv29 = ((($26)) & 255);
								var $cmp30 = ((($conv29)) | 0) == 21;
								if (!($cmp30)) {
									__label__ = 2;
									break $while_cond_backedge$$if_end$5;
								}
								var $27 = $inptr_addr;
								var $28 = HEAP8[($27)];
								var $conv331 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call2 = _isalpha($conv331);
								var $tobool3 = ((($call2)) | 0) != 0;
								if (!($tobool3)) {
									__label__ = 2;
									break $while_cond_backedge$$if_end$5;
								}
								while (1) {
									var $29 = $inptr_addr;
									var $incdec_ptr35 = (($29 + 1) & 4294967295);
									$inptr_addr = $incdec_ptr35;
									var $30 = HEAP8[($29)];
									var $31 = $outptr_addr;
									var $incdec_ptr36 = (($31 + 1) & 4294967295);
									$outptr_addr = $incdec_ptr36;
									HEAP8[($31)] = $30;
									var $32 = $inptr_addr;
									var $33 = HEAP8[($32)];
									var $conv33 = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $call = _isalpha($conv33);
									var $tobool = ((($call)) | 0) != 0;
									if ($tobool) {
										__label__ = 13;
										continue;
									} else {
										__label__ = 2;
										break $while_cond_backedge$$if_end$5;
									}
								}
							}
						} while (0);
						var $3 = $inptr_addr;
						var $incdec_ptr = (($3 + 1) & 4294967295);
						$inptr_addr = $incdec_ptr;
						var $4 = HEAPU8[($3)];
						$phcode = $4;
						var $conv = ((($4)) & 255);
						var $cmp = ((($conv)) | 0) > 0;
						if ($cmp) {
							__label__ = 1;
							continue $while_body$3;
						} else {
							__label__ = 14;
							break $while_body$$while_end40$2;
						}
					}
				}
			} while (0);
			var $34 = $outptr_addr;
			HEAP8[($34)] = 0;;
			return;
			return;
		}

		function __Z26GetTranslatedPhonemeStringPci($phon_out, $n_phon_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $phon_out_addr;
			var $n_phon_out_addr;
			var $ix;
			var $phon_out_ix = __stackBase__;
			var $stress;
			var $c;
			var $p;
			var $plist;
			$phon_out_addr = $phon_out;
			$n_phon_out_addr = $n_phon_out;
			HEAP32[(($phon_out_ix) >> 2)] = 0;
			var $0 = $phon_out_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 28;;
			}
			if (__label__ == 1) {
				$ix = 1;;
				$for_cond$4: while (1) {
					var $1 = $ix;
					var $2 = HEAP32[((_n_phoneme_list) >> 2)];
					var $sub = ((($2) - 2) & 4294967295);
					var $cmp1 = ((($1)) | 0) < ((($sub)) | 0);
					if (!($cmp1)) {
						__label__ = 25;
						break $for_cond$4;
					}
					var $3 = HEAP32[(($phon_out_ix) >> 2)];
					var $4 = $n_phon_out_addr;
					var $sub2 = ((($4) - 6) & 4294967295);
					var $cmp3 = ((($3)) | 0) < ((($sub2)) | 0);
					if (!($cmp3)) {
						__label__ = 25;
						break $for_cond$4;
					}
					var $5 = $ix;
					var $arrayidx = ((_phoneme_list + $5 * 24) & 4294967295);
					$plist = $arrayidx;
					var $6 = $plist;
					var $newword = (($6 + 19) & 4294967295);
					var $7 = HEAP8[($newword)];
					var $tobool = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
					if ($tobool) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $8 = HEAP32[(($phon_out_ix) >> 2)];
						var $inc = ((($8) + 1) & 4294967295);
						HEAP32[(($phon_out_ix) >> 2)] = $inc;
						var $9 = $phon_out_addr;
						var $arrayidx5 = (($9 + $8) & 4294967295);
						HEAP8[($arrayidx5)] = 32;;
					}
					var $10 = $plist;
					var $synthflags = (($10 + 4) & 4294967295);
					var $11 = HEAPU16[(($synthflags) >> 1)];
					var $conv = ((($11)) & 65535);
					var $and = ($conv) & 4;
					var $tobool6 = ((($and)) | 0) != 0;
					if ($tobool6) {
						__label__ = 7;;
					} else {
						__label__ = 15;;
					}
					$if_then7$$if_end27$11: do {
						if (__label__ == 7) {
							var $12 = $plist;
							var $stresslevel = (($12 + 1) & 4294967295);
							var $13 = HEAPU8[($stresslevel)];
							var $conv8 = ((($13)) & 255);
							$stress = $conv8;
							var $cmp9 = ((($conv8)) | 0) > 1;
							if (!($cmp9)) {
								__label__ = 15;
								break $if_then7$$if_end27$11;
							}
							$c = 0;
							var $14 = $stress;
							var $cmp11 = ((($14)) | 0) > 5;
							if ($cmp11) {
								__label__ = 9;;
							} else {
								__label__ = 10;;
							}
							if (__label__ == 9) {
								$stress = 5;;
							}
							var $15 = HEAP32[((_option_phonemes) >> 2)];
							var $cmp14 = ((($15)) | 0) == 3;
							if ($cmp14) {
								__label__ = 11;;
							} else {
								__label__ = 13;;
							}
							$if_then15$$if_end21$17: do {
								if (__label__ == 11) {
									$c = 716;
									var $16 = $stress;
									var $cmp16 = ((($16)) | 0) > 3;
									if (!($cmp16)) {
										__label__ = 14;
										break $if_then15$$if_end21$17;
									}
									$c = 712;;
								} else if (__label__ == 13) {
									var $17 = $stress;
									var $arrayidx19 = ((((__str8124) & 4294967295) + $17) & 4294967295);
									var $18 = HEAP8[($arrayidx19)];
									var $conv20 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									$c = $conv20;
									var $cmp22 = ((($conv20)) | 0) != 0;
									if (!($cmp22)) {
										__label__ = 15;
										break $if_then7$$if_end27$11;
									}
								}
							} while (0);
							var $19 = $c;
							var $20 = HEAP32[(($phon_out_ix) >> 2)];
							var $21 = $phon_out_addr;
							var $arrayidx24 = (($21 + $20) & 4294967295);
							var $call = __Z8utf8_outjPc($19, $arrayidx24);
							var $22 = HEAP32[(($phon_out_ix) >> 2)];
							var $add = ((($22) + ($call)) & 4294967295);
							HEAP32[(($phon_out_ix) >> 2)] = $add;;
						}
					} while (0);
					var $23 = $plist;
					var $ph = (($23 + 8) & 4294967295);
					var $24 = HEAP32[(($ph) >> 2)];
					var $code = (($24 + 10) & 4294967295);
					var $25 = HEAPU8[($code)];
					var $conv28 = ((($25)) & 255);
					var $cmp29 = ((($conv28)) | 0) == 21;
					if ($cmp29) {
						__label__ = 16;;
					} else {
						__label__ = 17;;
					}
					$if_then30$$if_else37$23: do {
						if (__label__ == 16) {
							var $26 = $plist;
							var $tone_ph = (($26 + 3) & 4294967295);
							var $27 = HEAPU8[($tone_ph)];
							var $idxprom = ((($27)) & 255);
							var $arrayidx31 = ((_phoneme_tab_list + $idxprom * 48) & 4294967295);
							var $name = (($arrayidx31) & 4294967295);
							var $arraydecay = (($name) & 4294967295);
							$p = $arraydecay;
							var $28 = HEAP32[(($phon_out_ix) >> 2)];
							var $29 = $phon_out_addr;
							var $arrayidx32 = (($29 + $28) & 4294967295);
							var $30 = $p;
							var $call33 = _sprintf($arrayidx32, ((__str9125) & 4294967295), allocate([$30, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							var $31 = $p;
							var $call34 = _strlen($31);
							var $32 = HEAP32[(($phon_out_ix) >> 2)];
							var $add35 = ((($call34) + 2) & 4294967295);
							var $add36 = ((($add35) + ($32)) & 4294967295);
							HEAP32[(($phon_out_ix) >> 2)] = $add36;;
						} else if (__label__ == 17) {
							var $33 = $phon_out_addr;
							var $34 = $plist;
							var $ph38 = (($34 + 8) & 4294967295);
							var $35 = HEAP32[(($ph38) >> 2)];
							var $36 = $plist;
							__ZL15WritePhMnemonicPcPiP11PHONEME_TABP12PHONEME_LIST($33, $phon_out_ix, $35, $36);
							var $37 = $plist;
							var $synthflags39 = (($37 + 4) & 4294967295);
							var $38 = HEAPU16[(($synthflags39) >> 1)];
							var $conv40 = ((($38)) & 65535);
							var $and41 = ($conv40) & 8;
							var $tobool42 = ((($and41)) | 0) != 0;
							if ($tobool42) {
								__label__ = 18;;
							} else {
								__label__ = 19;;
							}
							if (__label__ == 18) {
								var $39 = $phon_out_addr;
								var $40 = HEAP32[((((_phoneme_tab + 48) & 4294967295)) >> 2)];
								__ZL15WritePhMnemonicPcPiP11PHONEME_TABP12PHONEME_LIST($39, $phon_out_ix, $40, 0);;
							}
							var $41 = $plist;
							var $synthflags45 = (($41 + 4) & 4294967295);
							var $42 = HEAPU16[(($synthflags45) >> 1)];
							var $conv46 = ((($42)) & 65535);
							var $and47 = ($conv46) & 4;
							var $tobool48 = ((($and47)) | 0) != 0;
							if ($tobool48) {
								__label__ = 20;;
							} else {
								__label__ = 22;;
							}
							$land_lhs_true$$if_end52$29: do {
								if (__label__ == 20) {
									var $43 = $plist;
									var $type = (($43 + 15) & 4294967295);
									var $44 = HEAPU8[($type)];
									var $conv49 = ((($44)) & 255);
									var $cmp50 = ((($conv49)) | 0) != 2;
									if (!($cmp50)) {
										__label__ = 22;
										break $land_lhs_true$$if_end52$29;
									}
									var $45 = $phon_out_addr;
									var $46 = HEAP32[((((_phoneme_tab + 80) & 4294967295)) >> 2)];
									__ZL15WritePhMnemonicPcPiP11PHONEME_TABP12PHONEME_LIST($45, $phon_out_ix, $46, 0);;
								}
							} while (0);
							var $47 = $plist;
							var $tone_ph53 = (($47 + 3) & 4294967295);
							var $48 = HEAPU8[($tone_ph53)];
							var $conv54 = ((($48)) & 255);
							var $cmp55 = ((($conv54)) | 0) > 0;
							if (!($cmp55)) {
								__label__ = 24;
								break $if_then30$$if_else37$23;
							}
							var $49 = $phon_out_addr;
							var $50 = $plist;
							var $tone_ph57 = (($50 + 3) & 4294967295);
							var $51 = HEAPU8[($tone_ph57)];
							var $idxprom58 = ((($51)) & 255);
							var $arrayidx59 = ((_phoneme_tab + $idxprom58 * 4) & 4294967295);
							var $52 = HEAP32[(($arrayidx59) >> 2)];
							__ZL15WritePhMnemonicPcPiP11PHONEME_TABP12PHONEME_LIST($49, $phon_out_ix, $52, 0);;
						}
					} while (0);
					var $53 = $ix;
					var $inc62 = ((($53) + 1) & 4294967295);
					$ix = $inc62;
					__label__ = 2;
					continue $for_cond$4;
				}
				var $54 = HEAP32[(($phon_out_ix) >> 2)];
				var $55 = $n_phon_out_addr;
				var $cmp63 = ((($54)) | 0) >= ((($55)) | 0);
				if ($cmp63) {
					__label__ = 26;;
				} else {
					__label__ = 27;;
				}
				if (__label__ == 26) {
					var $56 = $n_phon_out_addr;
					var $sub65 = ((($56) - 1) & 4294967295);
					HEAP32[(($phon_out_ix) >> 2)] = $sub65;;
				}
				var $57 = HEAP32[(($phon_out_ix) >> 2)];
				var $58 = $phon_out_addr;
				var $arrayidx67 = (($58 + $57) & 4294967295);
				HEAP8[($arrayidx67)] = 0;;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL15WritePhMnemonicPcPiP11PHONEME_TABP12PHONEME_LIST($phon_out, $ix, $ph, $plist) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 152;
			_memset(__stackBase__, 0, 152);
			var __label__;
			var __lastLabel__ = null;
			var $phon_out_addr;
			var $ix_addr;
			var $ph_addr;
			var $plist_addr;
			var $c;
			var $mnem;
			var $len;
			var $first;
			var $ipa_control;
			var $phdata = __stackBase__;
			$phon_out_addr = $phon_out;
			$ix_addr = $ix;
			$ph_addr = $ph;
			$plist_addr = $plist;
			$ipa_control = 0;
			var $0 = HEAP32[((_option_phonemes) >> 2)];
			var $cmp = ((($0)) | 0) == 3;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 8;;
			}
			$if_then$$if_end20$2: do {
				if (__label__ == 1) {
					var $ipa_string = (($phdata + 132) & 4294967295);
					var $arrayidx = (($ipa_string) & 4294967295);
					HEAP8[($arrayidx)] = 0;
					var $1 = $plist_addr;
					var $cmp1 = ((($1)) | 0) == 0;
					if ($cmp1) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						var $2 = $ph_addr;
						var $code = (($2 + 10) & 4294967295);
						var $3 = HEAPU8[($code)];
						var $conv = ((($3)) & 255);
						__Z17InterpretPhoneme2iP12PHONEME_DATA($conv, $phdata);;
					} else if (__label__ == 3) {
						var $4 = $plist_addr;
						__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $4, $phdata);;
					}
					var $ipa_string3 = (($phdata + 132) & 4294967295);
					var $arraydecay = (($ipa_string3) & 4294967295);
					var $call = _strlen($arraydecay);
					$len = $call;
					var $cmp4 = ((($call)) | 0) > 0;
					if (!($cmp4)) {
						__label__ = 8;
						break $if_then$$if_end20$2;
					}
					var $ipa_string6 = (($phdata + 132) & 4294967295);
					var $arrayidx7 = (($ipa_string6) & 4294967295);
					var $5 = HEAP8[($arrayidx7)];
					var $conv8 = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					$ipa_control = $conv8;
					var $cmp9 = ((($conv8)) >>> 0) > 32;
					if ($cmp9) {
						__lastLabel__ = 5;
						__label__ = 6;;
					} else {
						__lastLabel__ = 5;
						__label__ = 7;;
					}
					if (__label__ == 6) {
						var $6 = $ix_addr;
						var $7 = HEAP32[(($6) >> 2)];
						var $8 = $phon_out_addr;
						var $arrayidx11 = (($8 + $7) & 4294967295);
						var $ipa_string12 = (($phdata + 132) & 4294967295);
						var $arraydecay13 = (($ipa_string12) & 4294967295);
						var $call14 = _strcpy($arrayidx11, $arraydecay13);
						var $9 = $len;
						var $10 = $ix_addr;
						var $11 = HEAP32[(($10) >> 2)];
						var $add = ((($11) + ($9)) & 4294967295);
						HEAP32[(($10) >> 2)] = $add;
						var $_pr = $ipa_control;
						__lastLabel__ = 6;;
					}
					var $12 = __lastLabel__ == 6 ? $_pr : ($conv8);
					var $cmp16 = ((($12)) >>> 0) >= 32;
					if ($cmp16) {
						__label__ = 23;
						break $if_then$$if_end20$2;
					} else {
						__label__ = 8;
						break $if_then$$if_end20$2;
					}
				}
			} while (0);
			$for_end$$if_end20$12: do {
				if (__label__ == 8) {
					$first = 1;
					var $13 = $ph_addr;
					var $mnemonic = (($13) & 4294967295);
					var $14 = HEAP32[(($mnemonic) >> 2)];
					$mnem = $14;;
					$for_cond$14: while (1) {
						var $15 = $mnem;
						var $and = ($15) & 255;
						$c = $and;
						var $cmp21 = ((($and)) | 0) != 0;
						if (!($cmp21)) {
							__label__ = 23;
							break $for_end$$if_end20$12;
						}
						var $16 = $c;
						var $cmp22 = ((($16)) | 0) == 47;
						var $17 = HEAP32[((_option_phoneme_variants) >> 2)];
						var $cmp23 = ((($17)) | 0) == 0;
						var $or_cond = ($cmp22) & ($cmp23);
						if ($or_cond) {
							__label__ = 23;
							break $for_end$$if_end20$12;
						}
						var $18 = HEAP32[((_option_phonemes) >> 2)];
						var $cmp26 = ((($18)) | 0) == 3;
						if ($cmp26) {
							__label__ = 12;;
						} else {
							__label__ = 20;;
						}
						$if_then27$$if_else54$18: do {
							if (__label__ == 12) {
								var $19 = $first;
								var $tobool = ((($19)) | 0) != 0;
								var $20 = $c;
								var $cmp29 = ((($20)) | 0) == 95;
								var $or_cond3 = ($tobool) & ($cmp29);
								if ($or_cond3) {
									__label__ = 23;
									break $for_end$$if_end20$12;
								}
								var $cmp32 = ((($20)) | 0) == 35;
								if ($cmp32) {
									__label__ = 14;;
								} else {
									__label__ = 15;;
								}
								if (__label__ == 14) {
									var $21 = $ph_addr;
									var $type = (($21 + 11) & 4294967295);
									var $22 = HEAPU8[($type)];
									var $conv34 = ((($22)) & 255);
									var $cmp35 = ((($conv34)) | 0) == 2;
									if ($cmp35) {
										__label__ = 23;
										break $for_end$$if_end20$12;
									}
								}
								var $23 = $first;
								var $tobool38 = ((($23)) | 0) != 0;
								if ($tobool38) {
									__label__ = 17;;
								} else {
									__label__ = 16;;
								}
								if (__label__ == 16) {
									var $24 = $c;
									var $isdigittmp = ((($24) - 48) & 4294967295);
									var $isdigit = ((($isdigittmp)) >>> 0) < 10;
									var $call40 = ((($isdigit)) & 1);
									var $tobool41 = ((($call40)) | 0) != 0;
									if ($tobool41) {
										__label__ = 22;
										break $if_then27$$if_else54$18;
									}
								}
								var $25 = $c;
								var $cmp44 = ((($25)) | 0) >= 32;
								var $26 = $c;
								var $cmp46 = ((($26)) | 0) < 128;
								var $or_cond1 = ($cmp44) & ($cmp46);
								if ($or_cond1) {
									__label__ = 18;;
								} else {
									__label__ = 19;;
								}
								if (__label__ == 18) {
									var $27 = $c;
									var $sub = ((($27) - 32) & 4294967295);
									var $arrayidx48 = ((_ipa1 + $sub * 2) & 4294967295);
									var $28 = HEAPU16[(($arrayidx48) >> 1)];
									var $conv49 = ((($28)) & 65535);
									$c = $conv49;;
								}
								var $29 = $c;
								var $30 = $ix_addr;
								var $31 = HEAP32[(($30) >> 2)];
								var $32 = $phon_out_addr;
								var $arrayidx51 = (($32 + $31) & 4294967295);
								var $call52 = __Z8utf8_outjPc($29, $arrayidx51);
								var $33 = $ix_addr;
								var $34 = HEAP32[(($33) >> 2)];
								var $add53 = ((($34) + ($call52)) & 4294967295);
								HEAP32[(($33) >> 2)] = $add53;
								__label__ = 21;
								break $if_then27$$if_else54$18;
							} else if (__label__ == 20) {
								var $35 = $c;
								var $conv55 = ((($35)) & 255);
								var $36 = $ix_addr;
								var $37 = HEAP32[(($36) >> 2)];
								var $inc = ((($37) + 1) & 4294967295);
								HEAP32[(($36) >> 2)] = $inc;
								var $38 = $phon_out_addr;
								var $arrayidx56 = (($38 + $37) & 4294967295);
								HEAP8[($arrayidx56)] = $conv55;
								__label__ = 21;
								break $if_then27$$if_else54$18;
							}
						} while (0);
						if (__label__ == 21) {
							$first = 0;;
						}
						var $39 = $mnem;
						var $shr = ($39) >> 8;
						$mnem = $shr;
						__label__ = 9;
						continue $for_cond$14;
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z7IsVowelP10Translatori($tr, $letter) {;
			var __label__;
			var $tr_addr;
			var $letter_addr;
			$tr_addr = $tr;
			$letter_addr = $letter;
			var $0 = $tr_addr;
			var $1 = $letter_addr;
			var $call = __ZL8IsLetterP10Translatorii($0, $1, 7);;
			return $call;
			return null;
		}

		function __ZL8IsLetterP10Translatorii($tr, $letter, $group) {;
			var __label__;
			var $retval;
			var $tr_addr;
			var $letter_addr;
			var $group_addr;
			var $letter2;
			$tr_addr = $tr;
			$letter_addr = $letter;
			$group_addr = $group;
			var $0 = $group_addr;
			var $1 = $tr_addr;
			var $letter_groups = (($1 + 968) & 4294967295);
			var $arrayidx = (($letter_groups + $0 * 4) & 4294967295);
			var $2 = HEAP32[(($arrayidx) >> 2)];
			var $cmp = ((($2)) | 0) != 0;
			var $3 = $group_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$if_then$$if_end4$2: do {
				if (__label__ == 1) {
					var $4 = $tr_addr;
					var $letter_groups1 = (($4 + 968) & 4294967295);
					var $arrayidx2 = (($letter_groups1 + $3 * 4) & 4294967295);
					var $5 = HEAP32[(($arrayidx2) >> 2)];
					var $6 = $letter_addr;
					var $call = _wcschr($5, $6);
					var $tobool = ((($call)) | 0) != 0;
					if ($tobool) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						$retval = 1;;
					} else if (__label__ == 3) {
						$retval = 0;;
					}
				} else if (__label__ == 4) {
					var $cmp5 = ((($3)) | 0) > 7;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = 0;;
					} else if (__label__ == 6) {
						var $7 = $tr_addr;
						var $letter_bits_offset = (($7 + 964) & 4294967295);
						var $8 = HEAP32[(($letter_bits_offset) >> 2)];
						var $cmp8 = ((($8)) | 0) > 0;
						var $9 = $letter_addr;
						if ($cmp8) {
							__label__ = 7;;
						} else {
							__label__ = 11;;
						}
						$if_then9$$if_else15$11: do {
							if (__label__ == 7) {
								var $10 = $tr_addr;
								var $letter_bits_offset10 = (($10 + 964) & 4294967295);
								var $11 = HEAP32[(($letter_bits_offset10) >> 2)];
								var $sub = ((($9) - ($11)) & 4294967295);
								$letter2 = $sub;
								var $cmp11 = ((($sub)) | 0) > 0;
								if ($cmp11) {
									__label__ = 8;;
								} else {
									__label__ = 10;;
								}
								$land_lhs_true$$if_else$13: do {
									if (__label__ == 8) {
										var $12 = $letter2;
										var $cmp12 = ((($12)) | 0) < 128;
										if (!($cmp12)) {
											__label__ = 10;
											break $land_lhs_true$$if_else$13;
										}
										var $13 = $letter2;
										$letter_addr = $13;
										__label__ = 13;
										break $if_then9$$if_else15$11;
									}
								} while (0);
								$retval = 0;
								__label__ = 16;
								break $if_then$$if_end4$2;
							} else if (__label__ == 11) {
								var $cmp16 = ((($9)) | 0) >= 192;
								var $14 = $letter_addr;
								var $cmp18 = ((($14)) | 0) < 606;
								var $or_cond = ($cmp16) & ($cmp18);
								if (!($or_cond)) {
									__label__ = 13;
									break $if_then9$$if_else15$11;
								}
								var $15 = $letter_addr;
								var $sub20 = ((($15) - 192) & 4294967295);
								var $arrayidx21 = ((__ZL13remove_accent + $sub20) & 4294967295);
								var $16 = HEAPU8[($arrayidx21)];
								var $idxprom = ((($16)) & 255);
								var $17 = $tr_addr;
								var $letter_bits = (($17 + 708) & 4294967295);
								var $arrayidx22 = (($letter_bits + $idxprom) & 4294967295);
								var $18 = HEAPU8[($arrayidx22)];
								var $conv = ((($18)) & 255);
								var $19 = $group_addr;
								var $shl = 1 << ($19);
								var $and = ($shl) & ($conv);
								$retval = $and;
								__label__ = 16;
								break $if_then$$if_end4$2;
							}
						} while (0);
						var $20 = $letter_addr;
						var $cmp25 = ((($20)) | 0) >= 0;
						var $21 = $letter_addr;
						var $cmp27 = ((($21)) | 0) < 128;
						var $or_cond1 = ($cmp25) & ($cmp27);
						if ($or_cond1) {
							__label__ = 14;;
						} else {
							__label__ = 15;;
						}
						if (__label__ == 14) {
							var $22 = $letter_addr;
							var $23 = $tr_addr;
							var $letter_bits29 = (($23 + 708) & 4294967295);
							var $arrayidx30 = (($letter_bits29 + $22) & 4294967295);
							var $24 = HEAPU8[($arrayidx30)];
							var $conv31 = ((($24)) & 255);
							var $25 = $group_addr;
							var $shl32 = 1 << ($25);
							var $and33 = ($shl32) & ($conv31);
							$retval = $and33;;
						} else if (__label__ == 15) {
							$retval = 0;;
						}
					}
				}
			} while (0);
			var $26 = $retval;;
			return $26;
			return null;
		}

		function __Z14UnpronouncableP10TranslatorPci($tr, $word, $posn) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $posn_addr;
			var $c = __stackBase__;
			var $c1;
			var $vowel_posn;
			var $index;
			var $count;
			var $apostrophe;
			$tr_addr = $tr;
			$word_addr = $word;
			$posn_addr = $posn;
			$c1 = 0;
			$vowel_posn = 9;
			$apostrophe = 0;
			var $0 = $word_addr;
			var $call = __Z7utf8_inPiPKc($c, $0);
			var $1 = $tr_addr;
			var $letter_bits_offset = (($1 + 964) & 4294967295);
			var $2 = HEAP32[(($letter_bits_offset) >> 2)];
			var $cmp = ((($2)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$land_lhs_true$$if_end$2: do {
				if (__label__ == 1) {
					var $3 = HEAP32[(($c) >> 2)];
					var $cmp1 = ((($3)) | 0) < 577;
					if (!($cmp1)) {
						__label__ = 3;
						break $land_lhs_true$$if_end$2;
					}
					$retval = 0;
					__label__ = 30;
					break $land_lhs_true$$if_end$2;
				}
			} while (0);
			$return$$if_end$5: do {
				if (__label__ == 3) {
					var $4 = $tr_addr;
					var $langopts = (($4) & 4294967295);
					var $param = (($langopts + 24) & 4294967295);
					var $arrayidx = (($param + 20) & 4294967295);
					var $5 = HEAP32[(($arrayidx) >> 2)];
					var $cmp2 = ((($5)) | 0) == 1;
					if ($cmp2) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 4) {
						$retval = 0;;
					} else if (__label__ == 5) {
						var $6 = $word_addr;
						var $7 = HEAP8[($6)];
						var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						HEAP32[(($c) >> 2)] = $conv;
						var $cmp5 = ((($conv)) | 0) == 32;
						if ($cmp5) {
							__label__ = 7;;
						} else {
							__label__ = 6;;
						}
						$if_then9$$lor_lhs_false$10: do {
							if (__label__ == 6) {
								var $8 = HEAP32[(($c) >> 2)];
								var $cmp6 = ((($8)) | 0) == 0;
								var $9 = HEAP32[(($c) >> 2)];
								var $cmp8 = ((($9)) | 0) == 39;
								var $or_cond = ($cmp6) | ($cmp8);
								if ($or_cond) {
									__label__ = 7;
									break $if_then9$$lor_lhs_false$10;
								}
								$index = 0;
								$count = 0;;
								$for_cond$13: while (1) {
									var $10 = $index;
									var $11 = $word_addr;
									var $arrayidx11 = (($11 + $10) & 4294967295);
									var $call12 = __Z7utf8_inPiPKc($c, $arrayidx11);
									var $12 = $index;
									var $add = ((($12) + ($call12)) & 4294967295);
									$index = $add;
									var $13 = HEAP32[(($c) >> 2)];
									var $cmp13 = ((($13)) | 0) == 0;
									var $14 = HEAP32[(($c) >> 2)];
									var $cmp15 = ((($14)) | 0) == 32;
									var $or_cond1 = ($cmp13) | ($cmp15);
									if ($or_cond1) {
										__label__ = 21;
										break $for_cond$13;
									}
									var $15 = HEAP32[(($c) >> 2)];
									var $cmp18 = ((($15)) | 0) == 39;
									if ($cmp18) {
										__label__ = 11;;
									} else {
										__label__ = 13;;
									}
									if (__label__ == 11) {
										var $16 = $count;
										var $cmp20 = ((($16)) | 0) > 1;
										if ($cmp20) {
											__label__ = 21;
											break $for_cond$13;
										}
										var $17 = $posn_addr;
										var $cmp22 = ((($17)) | 0) > 0;
										if ($cmp22) {
											__label__ = 21;
											break $for_cond$13;
										}
									}
									var $18 = $count;
									var $cmp25 = ((($18)) | 0) == 0;
									if ($cmp25) {
										__label__ = 14;;
									} else {
										__label__ = 15;;
									}
									if (__label__ == 14) {
										var $19 = HEAP32[(($c) >> 2)];
										$c1 = $19;;
									}
									var $20 = $count;
									var $inc = ((($20) + 1) & 4294967295);
									$count = $inc;
									var $21 = $tr_addr;
									var $22 = HEAP32[(($c) >> 2)];
									var $call28 = __Z7IsVowelP10Translatori($21, $22);
									var $tobool = ((($call28)) | 0) != 0;
									if ($tobool) {
										__label__ = 16;
										break $for_cond$13;
									}
									var $24 = HEAP32[(($c) >> 2)];
									var $cmp31 = ((($24)) | 0) == 39;
									if ($cmp31) {
										__label__ = 18;;
									} else {
										__label__ = 19;;
									}
									if (__label__ == 18) {
										$apostrophe = 1;
										__label__ = 9;
										continue $for_cond$13;
									} else if (__label__ == 19) {
										var $25 = HEAP32[(($c) >> 2)];
										var $call33 = _iswalpha($25);
										var $tobool34 = ((($call33)) | 0) != 0;
										if ($tobool34) {
											__label__ = 9;
											continue $for_cond$13;
										} else {
											__label__ = 20;
											break $for_cond$13;
										}
									}
								}
								if (__label__ == 21) {
									var $_pr = $vowel_posn;
									__lastLabel__ = 21;;
								} else if (__label__ == 16) {
									var $23 = $count;
									$vowel_posn = $23;
									__lastLabel__ = 16;;
								} else if (__label__ == 20) {
									$retval = 0;
									__label__ = 30;
									break $return$$if_end$5;
								}
								var $26 = __lastLabel__ == 21 ? $_pr : ($23);
								var $cmp38 = ((($26)) | 0) > 2;
								if ($cmp38) {
									__label__ = 23;;
								} else {
									__label__ = 25;;
								}
								$land_lhs_true39$$if_end46$32: do {
									if (__label__ == 23) {
										var $27 = $tr_addr;
										var $langopts40 = (($27) & 4294967295);
										var $param41 = (($langopts40 + 24) & 4294967295);
										var $arrayidx42 = (($param41 + 20) & 4294967295);
										var $28 = HEAP32[(($arrayidx42) >> 2)];
										var $cmp43 = ((($28)) | 0) == 2;
										if (!($cmp43)) {
											__label__ = 25;
											break $land_lhs_true39$$if_end46$32;
										}
										var $29 = $tr_addr;
										var $30 = $word_addr;
										var $call45 = __ZL15Unpronouncable2P10TranslatorPc($29, $30);
										$retval = $call45;
										__label__ = 30;
										break $return$$if_end$5;
									}
								} while (0);
								var $31 = $c1;
								var $32 = $tr_addr;
								var $langopts47 = (($32) & 4294967295);
								var $param48 = (($langopts47 + 24) & 4294967295);
								var $arrayidx49 = (($param48 + 20) & 4294967295);
								var $33 = HEAP32[(($arrayidx49) >> 2)];
								var $cmp50 = ((($31)) | 0) == ((($33)) | 0);
								if ($cmp50) {
									__label__ = 26;;
								} else {
									__label__ = 27;;
								}
								if (__label__ == 26) {
									var $34 = $vowel_posn;
									var $dec = ((($34) - 1) & 4294967295);
									$vowel_posn = $dec;;
								}
								var $35 = $vowel_posn;
								var $36 = $tr_addr;
								var $langopts53 = (($36) & 4294967295);
								var $max_initial_consonants = (($langopts53 + 248) & 4294967295);
								var $37 = HEAP8[($max_initial_consonants)];
								var $conv54 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $add55 = ((($conv54) + 1) & 4294967295);
								var $cmp56 = ((($35)) | 0) > ((($add55)) | 0);
								if ($cmp56) {
									__label__ = 28;;
								} else {
									__label__ = 29;;
								}
								if (__label__ == 28) {
									$retval = 1;
									__label__ = 30;
									break $return$$if_end$5;
								} else if (__label__ == 29) {
									$retval = 0;
									__label__ = 30;
									break $return$$if_end$5;
								}
							}
						} while (0);
						$retval = 0;;
					}
				}
			} while (0);
			var $38 = $retval;
			STACKTOP = __stackBase__;
			return $38;
			return null;
		}

		function __ZL15Unpronouncable2P10TranslatorPc($tr, $word) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 160;
			_memset(__stackBase__, 0, 160);
			var __label__;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $c;
			var $end_flags;
			var $ph_buf = __stackBase__;
			$tr_addr = $tr;
			$word_addr = $word;
			var $arrayidx = (($ph_buf) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $0 = $word_addr;
			var $arrayidx1 = (($0 + -1) & 4294967295);
			var $1 = HEAP8[($arrayidx1)];
			var $conv = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			$c = $conv;
			var $2 = $word_addr;
			var $arrayidx2 = (($2 + -1) & 4294967295);
			HEAP8[($arrayidx2)] = 32;
			var $3 = $tr_addr;
			var $4 = $word_addr;
			var $arraydecay = (($ph_buf) & 4294967295);
			var $call = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($3, $4, $arraydecay, 160, 0, -2147483648, 0);
			$end_flags = $call;
			var $5 = $c;
			var $conv3 = ((($5)) & 255);
			var $6 = $word_addr;
			var $arrayidx4 = (($6 + -1) & 4294967295);
			HEAP8[($arrayidx4)] = $conv3;
			var $7 = $end_flags;
			var $cmp = ((($7)) | 0) == 0;
			if ($cmp) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$if_then$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $8 = $end_flags;
					var $and = ($8) & 32768;
					var $tobool = ((($and)) | 0) != 0;
					if ($tobool) {
						__label__ = 2;
						break $if_then$$lor_lhs_false$2;
					}
					$retval = 0;
					__label__ = 4;
					break $if_then$$lor_lhs_false$2;
				}
			} while (0);
			if (__label__ == 2) {
				$retval = 1;;
			}
			var $9 = $retval;
			STACKTOP = __stackBase__;
			return $9;
			return null;
		}

		function __Z16ChangeWordStressP10TranslatorPci($tr, $word, $new_stress) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 248;
			_memset(__stackBase__, 0, 248);
			var __label__;
			var $tr_addr;
			var $word_addr;
			var $new_stress_addr;
			var $ix;
			var $p;
			var $max_stress;
			var $vowel_count = __stackBase__;
			var $stressed_syllable = __stackBase__ + 4;
			var $phonetic = __stackBase__ + 8;
			var $vowel_stress = __stackBase__ + 168;
			$tr_addr = $tr;
			$word_addr = $word;
			$new_stress_addr = $new_stress;
			HEAP32[(($stressed_syllable) >> 2)] = 0;
			var $arraydecay = (($phonetic) & 4294967295);
			var $0 = $word_addr;
			var $call = _strcpy($arraydecay, $0);
			var $1 = $tr_addr;
			var $arraydecay1 = (($phonetic) & 4294967295);
			var $arraydecay2 = (($vowel_stress) & 4294967295);
			var $call3 = __ZL14GetVowelStressP10TranslatorPhPaRiS3_i($1, $arraydecay1, $arraydecay2, $vowel_count, $stressed_syllable, 0);
			$max_stress = $call3;
			var $2 = $new_stress_addr;
			var $cmp = ((($2)) | 0) >= 4;
			$ix = 1;
			if ($cmp) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$for_cond$$for_cond9_preheader$2: do {
				if (__label__ == 2) {
					while (1) {
						var $5 = $ix;
						var $6 = HEAP32[(($vowel_count) >> 2)];
						var $cmp4 = ((($5)) | 0) < ((($6)) | 0);
						if (!($cmp4)) {
							__label__ = 9;
							break $for_cond$$for_cond9_preheader$2;
						}
						var $7 = $ix;
						var $arrayidx = (($vowel_stress + $7) & 4294967295);
						var $8 = HEAP8[($arrayidx)];
						var $conv = (tempInt = (($8)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $9 = $max_stress;
						var $cmp5 = ((($conv)) | 0) >= ((($9)) | 0);
						if ($cmp5) {
							__label__ = 4;
							break;
						}
						var $12 = $ix;
						var $inc = ((($12) + 1) & 4294967295);
						$ix = $inc;
						__label__ = 2;
						continue;
					}
					var $10 = $new_stress_addr;
					var $conv7 = ((($10)) & 255);
					var $11 = $ix;
					var $arrayidx8 = (($vowel_stress + $11) & 4294967295);
					HEAP8[($arrayidx8)] = $conv7;;
				} else if (__label__ == 1) {
					var $3 = $ix;
					var $4 = HEAP32[(($vowel_count) >> 2)];
					var $cmp101 = ((($3)) | 0) < ((($4)) | 0);
					if (!($cmp101)) {
						__label__ = 9;
						break $for_cond$$for_cond9_preheader$2;
					}
					while (1) {
						var $13 = $ix;
						var $arrayidx12 = (($vowel_stress + $13) & 4294967295);
						var $14 = HEAP8[($arrayidx12)];
						var $conv13 = (tempInt = (($14)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $15 = $new_stress_addr;
						var $cmp14 = ((($conv13)) | 0) > ((($15)) | 0);
						if ($cmp14) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							var $16 = $new_stress_addr;
							var $conv16 = ((($16)) & 255);
							var $17 = $ix;
							var $arrayidx17 = (($vowel_stress + $17) & 4294967295);
							HEAP8[($arrayidx17)] = $conv16;;
						}
						var $18 = $ix;
						var $inc20 = ((($18) + 1) & 4294967295);
						$ix = $inc20;
						var $19 = $ix;
						var $20 = HEAP32[(($vowel_count) >> 2)];
						var $cmp10 = ((($19)) | 0) < ((($20)) | 0);
						if ($cmp10) {
							__label__ = 6;
							continue;
						} else {
							__label__ = 9;
							break $for_cond$$for_cond9_preheader$2;
						}
					}
				}
			} while (0);
			$ix = 1;
			var $arraydecay23 = (($phonetic) & 4294967295);
			$p = $arraydecay23;
			var $21 = $p;
			var $22 = HEAPU8[($21)];
			var $conv242 = ((($22)) & 255);
			var $cmp253 = ((($conv242)) | 0) != 0;
			if ($cmp253) {
				__label__ = 10;;
			} else {
				__label__ = 17;;
			}
			$while_body$$while_end$15: do {
				if (__label__ == 10) {
					$while_body$16: while (1) {
						var $23 = $p;
						var $24 = HEAPU8[($23)];
						var $idxprom = ((($24)) & 255);
						var $arrayidx26 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
						var $25 = HEAP32[(($arrayidx26) >> 2)];
						var $type = (($25 + 11) & 4294967295);
						var $26 = HEAPU8[($type)];
						var $conv27 = ((($26)) & 255);
						var $cmp28 = ((($conv27)) | 0) == 2;
						if ($cmp28) {
							__label__ = 11;;
						} else {
							__label__ = 16;;
						}
						$land_lhs_true$$if_end44$18: do {
							if (__label__ == 11) {
								var $27 = $p;
								var $28 = HEAPU8[($27)];
								var $idxprom29 = ((($28)) & 255);
								var $arrayidx30 = ((_phoneme_tab + $idxprom29 * 4) & 4294967295);
								var $29 = HEAP32[(($arrayidx30) >> 2)];
								var $phflags = (($29 + 4) & 4294967295);
								var $30 = HEAP32[(($phflags) >> 2)];
								var $and = ($30) & 1048576;
								var $tobool = ((($and)) | 0) != 0;
								if ($tobool) {
									__label__ = 16;
									break $land_lhs_true$$if_end44$18;
								}
								var $31 = $ix;
								var $arrayidx32 = (($vowel_stress + $31) & 4294967295);
								var $32 = HEAP8[($arrayidx32)];
								var $conv33 = (tempInt = (($32)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp34 = ((($conv33)) | 0) == 0;
								if ($cmp34) {
									__label__ = 14;;
								} else {
									__label__ = 13;;
								}
								$if_then38$$lor_lhs_false$21: do {
									if (__label__ == 13) {
										var $33 = $ix;
										var $arrayidx35 = (($vowel_stress + $33) & 4294967295);
										var $34 = HEAP8[($arrayidx35)];
										var $conv36 = (tempInt = (($34)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp37 = ((($conv36)) | 0) > 1;
										if ($cmp37) {
											__label__ = 14;
											break $if_then38$$lor_lhs_false$21;
										} else {
											__label__ = 15;
											break $if_then38$$lor_lhs_false$21;
										}
									}
								} while (0);
								if (__label__ == 14) {
									var $35 = $ix;
									var $arrayidx39 = (($vowel_stress + $35) & 4294967295);
									var $36 = HEAPU8[($arrayidx39)];
									var $idxprom40 = ((($36)) & 255);
									var $arrayidx41 = ((__ZL15stress_phonemes + $idxprom40) & 4294967295);
									var $37 = HEAP8[($arrayidx41)];
									var $38 = $word_addr;
									var $incdec_ptr = (($38 + 1) & 4294967295);
									$word_addr = $incdec_ptr;
									HEAP8[($38)] = $37;;
								}
								var $39 = $ix;
								var $inc43 = ((($39) + 1) & 4294967295);
								$ix = $inc43;;
							}
						} while (0);
						var $40 = $p;
						var $incdec_ptr45 = (($40 + 1) & 4294967295);
						$p = $incdec_ptr45;
						var $41 = HEAP8[($40)];
						var $42 = $word_addr;
						var $incdec_ptr46 = (($42 + 1) & 4294967295);
						$word_addr = $incdec_ptr46;
						HEAP8[($42)] = $41;
						var $43 = $p;
						var $44 = HEAPU8[($43)];
						var $conv24 = ((($44)) & 255);
						var $cmp25 = ((($conv24)) | 0) != 0;
						if ($cmp25) {
							__label__ = 10;
							continue $while_body$16;
						} else {
							__label__ = 17;
							break $while_body$$while_end$15;
						}
					}
				}
			} while (0);
			var $45 = $word_addr;
			HEAP8[($45)] = 0;
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL14GetVowelStressP10TranslatorPhPaRiS3_i($tr, $phonemes, $vowel_stress, $vowel_count, $stressed_syllable, $control) {;
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $phonemes_addr;
			var $vowel_stress_addr;
			var $vowel_count_addr;
			var $stressed_syllable_addr;
			var $control_addr;
			var $phcode;
			var $ph;
			var $ph_out;
			var $count;
			var $max_stress;
			var $ix;
			var $j;
			var $stress;
			var $primary_posn;
			$tr_addr = $tr;
			$phonemes_addr = $phonemes;
			$vowel_stress_addr = $vowel_stress;
			$vowel_count_addr = $vowel_count;
			$stressed_syllable_addr = $stressed_syllable;
			$control_addr = $control;
			var $0 = $phonemes_addr;
			$ph_out = $0;
			$count = 1;
			$max_stress = -1;
			$stress = -1;
			$primary_posn = 0;
			var $1 = $vowel_stress_addr;
			var $arrayidx = (($1) & 4294967295);
			HEAP8[($arrayidx)] = 1;;
			$while_cond$2: while (1) {
				var $2 = $phonemes_addr;
				var $incdec_ptr = (($2 + 1) & 4294967295);
				$phonemes_addr = $incdec_ptr;
				var $3 = HEAPU8[($2)];
				$phcode = $3;
				var $conv = ((($3)) & 255);
				var $cmp = ((($conv)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 39;
					break $while_cond$2;
				}
				var $4 = $count;
				var $cmp1 = ((($4)) | 0) < 79;
				if (!($cmp1)) {
					__label__ = 39;
					break $while_cond$2;
				}
				var $5 = $phcode;
				var $idxprom = ((($5)) & 255);
				var $arrayidx2 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
				var $6 = HEAPU32[(($arrayidx2) >> 2)];
				$ph = $6;
				var $cmp3 = ((($6)) | 0) == 0;
				if ($cmp3) {
					__label__ = 1;
					continue $while_cond$2;
				}
				var $7 = $ph;
				var $type = (($7 + 11) & 4294967295);
				var $8 = HEAPU8[($type)];
				var $conv4 = ((($8)) & 255);
				var $cmp5 = ((($conv4)) | 0) == 1;
				if ($cmp5) {
					__label__ = 5;;
				} else {
					__label__ = 24;;
				}
				$land_lhs_true$$if_end53$7: do {
					if (__label__ == 5) {
						var $9 = $ph;
						var $program = (($9 + 8) & 4294967295);
						var $10 = HEAPU16[(($program) >> 1)];
						var $conv6 = ((($10)) & 65535);
						var $cmp7 = ((($conv6)) | 0) == 0;
						if (!($cmp7)) {
							__label__ = 24;
							break $land_lhs_true$$if_end53$7;
						}
						var $11 = $phcode;
						var $conv9 = ((($11)) & 255);
						var $cmp10 = ((($conv9)) | 0) == 8;
						if ($cmp10) {
							__label__ = 7;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 7) {
							var $12 = $count;
							var $sub = ((($12) - 1) & 4294967295);
							$j = $sub;
							__lastLabel__ = 7;;
							$while_cond12$12: while (1) {
								var $13 = __lastLabel__ == 19 ? $dec : ($sub);
								var $cmp13 = ((($13)) | 0) > 0;
								if (!($cmp13)) {
									__label__ = 1;
									continue $while_cond$2;
								}
								var $14 = $stressed_syllable_addr;
								var $15 = HEAP32[(($14) >> 2)];
								var $cmp15 = ((($15)) | 0) == 0;
								if (!($cmp15)) {
									__label__ = 1;
									continue $while_cond$2;
								}
								var $16 = $j;
								var $17 = $vowel_stress_addr;
								var $arrayidx17 = (($17 + $16) & 4294967295);
								var $18 = HEAP8[($arrayidx17)];
								var $conv18 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp19 = ((($conv18)) | 0) < 4;
								if (!($cmp19)) {
									__label__ = 1;
									continue $while_cond$2;
								}
								var $19 = $j;
								var $20 = $vowel_stress_addr;
								var $arrayidx22 = (($20 + $19) & 4294967295);
								var $21 = HEAP8[($arrayidx22)];
								var $conv23 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp24 = ((($conv23)) | 0) != 0;
								if ($cmp24) {
									__label__ = 12;;
								} else {
									__label__ = 19;;
								}
								if (__label__ == 12) {
									var $22 = $j;
									var $23 = $vowel_stress_addr;
									var $arrayidx26 = (($23 + $22) & 4294967295);
									var $24 = HEAP8[($arrayidx26)];
									var $conv27 = (tempInt = (($24)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp28 = ((($conv27)) | 0) != 1;
									if ($cmp28) {
										__label__ = 13;
										break $while_cond12$12;
									}
								}
								var $39 = $j;
								var $dec = ((($39) - 1) & 4294967295);
								$j = $dec;
								__lastLabel__ = 19;
								__label__ = 8;
								continue $while_cond12$12;
							}
							var $25 = $j;
							var $26 = $vowel_stress_addr;
							var $arrayidx30 = (($26 + $25) & 4294967295);
							HEAP8[($arrayidx30)] = 4;
							var $27 = $max_stress;
							var $cmp31 = ((($27)) | 0) < 4;
							if ($cmp31) {
								__label__ = 14;;
							} else {
								__label__ = 15;;
							}
							if (__label__ == 14) {
								$max_stress = 4;
								var $28 = $j;
								$primary_posn = $28;;
							}
							$ix = 1;
							var $29 = $ix;
							var $30 = $j;
							var $cmp344 = ((($29)) | 0) < ((($30)) | 0);
							if (!($cmp344)) {
								__label__ = 1;
								continue $while_cond$2;
							}
							while (1) {
								var $31 = $ix;
								var $32 = $vowel_stress_addr;
								var $arrayidx35 = (($32 + $31) & 4294967295);
								var $33 = HEAP8[($arrayidx35)];
								var $conv36 = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp37 = ((($conv36)) | 0) == 4;
								if ($cmp37) {
									__label__ = 17;;
								} else {
									__label__ = 18;;
								}
								if (__label__ == 17) {
									var $34 = $ix;
									var $35 = $vowel_stress_addr;
									var $arrayidx39 = (($35 + $34) & 4294967295);
									HEAP8[($arrayidx39)] = 3;;
								}
								var $36 = $ix;
								var $inc = ((($36) + 1) & 4294967295);
								$ix = $inc;
								var $37 = $ix;
								var $38 = $j;
								var $cmp34 = ((($37)) | 0) < ((($38)) | 0);
								if ($cmp34) {
									__label__ = 16;
									continue;
								} else {
									__label__ = 1;
									continue $while_cond$2;
								}
							}
						} else if (__label__ == 20) {
							var $40 = $ph;
							var $std_length = (($40 + 14) & 4294967295);
							var $41 = HEAPU8[($std_length)];
							var $conv42 = ((($41)) & 255);
							var $cmp43 = ((($conv42)) | 0) < 4;
							if ($cmp43) {
								__label__ = 22;;
							} else {
								__label__ = 21;;
							}
							if (__label__ == 21) {
								var $42 = $stressed_syllable_addr;
								var $43 = HEAP32[(($42) >> 2)];
								var $cmp44 = ((($43)) | 0) == 0;
								if (!($cmp44)) {
									__label__ = 1;
									continue $while_cond$2;
								}
							}
							var $44 = $ph;
							var $std_length46 = (($44 + 14) & 4294967295);
							var $45 = HEAPU8[($std_length46)];
							var $conv47 = ((($45)) & 255);
							$stress = $conv47;
							var $46 = $stress;
							var $47 = $max_stress;
							var $cmp48 = ((($46)) | 0) > ((($47)) | 0);
							if (!($cmp48)) {
								__label__ = 1;
								continue $while_cond$2;
							}
							var $48 = $stress;
							$max_stress = $48;
							__label__ = 1;
							continue $while_cond$2;
						}
					}
				} while (0);
				var $49 = $ph;
				var $type54 = (($49 + 11) & 4294967295);
				var $50 = HEAPU8[($type54)];
				var $conv55 = ((($50)) & 255);
				var $cmp56 = ((($conv55)) | 0) == 2;
				if ($cmp56) {
					__label__ = 25;;
				} else {
					__label__ = 34;;
				}
				$land_lhs_true57$$if_else78$35: do {
					if (__label__ == 25) {
						var $51 = $ph;
						var $phflags = (($51 + 4) & 4294967295);
						var $52 = HEAP32[(($phflags) >> 2)];
						var $and = ($52) & 1048576;
						var $tobool = ((($and)) | 0) != 0;
						if ($tobool) {
							__label__ = 34;
							break $land_lhs_true57$$if_else78$35;
						}
						var $53 = $stress;
						var $conv59 = ((($53)) & 255);
						var $54 = $count;
						var $55 = $vowel_stress_addr;
						var $arrayidx60 = (($55 + $54) & 4294967295);
						HEAP8[($arrayidx60)] = $conv59;
						var $56 = $stress;
						var $cmp61 = ((($56)) | 0) >= 4;
						if ($cmp61) {
							__lastLabel__ = 26;
							__label__ = 27;;
						} else {
							__lastLabel__ = 26;
							__label__ = 29;;
						}
						$land_lhs_true62$$if_end65$38: do {
							if (__label__ == 27) {
								var $57 = $stress;
								var $58 = $max_stress;
								var $cmp63 = ((($57)) | 0) >= ((($58)) | 0);
								if ($cmp63) {
									__lastLabel__ = 27;;
								} else {
									__lastLabel__ = 27;
									__label__ = 29;
									break $land_lhs_true62$$if_end65$38;
								}
								var $59 = $count;
								$primary_posn = $59;
								var $60 = $stress;
								$max_stress = $60;
								__lastLabel__ = 28;;
							}
						} while (0);
						var $61 = __lastLabel__ == 28 ? $60 : (__lastLabel__ == 27 ? $57 : ($56));
						var $cmp66 = ((($61)) | 0) < 0;
						if ($cmp66) {
							__label__ = 30;;
						} else {
							__label__ = 33;;
						}
						$land_lhs_true67$$if_end76$42: do {
							if (__label__ == 30) {
								var $62 = $control_addr;
								var $and68 = ($62) & 1;
								var $tobool69 = ((($and68)) | 0) != 0;
								if (!($tobool69)) {
									__label__ = 33;
									break $land_lhs_true67$$if_end76$42;
								}
								var $63 = $ph;
								var $phflags71 = (($63 + 4) & 4294967295);
								var $64 = HEAP32[(($phflags71) >> 2)];
								var $and72 = ($64) & 2;
								var $tobool73 = ((($and72)) | 0) != 0;
								if (!($tobool73)) {
									__label__ = 33;
									break $land_lhs_true67$$if_end76$42;
								}
								var $65 = $count;
								var $66 = $vowel_stress_addr;
								var $arrayidx75 = (($66 + $65) & 4294967295);
								HEAP8[($arrayidx75)] = 1;;
							}
						} while (0);
						var $67 = $count;
						var $inc77 = ((($67) + 1) & 4294967295);
						$count = $inc77;
						$stress = -1;
						__label__ = 38;
						break $land_lhs_true57$$if_else78$35;
					}
				} while (0);
				$if_else78$$if_end93$47: do {
					if (__label__ == 34) {
						var $68 = $phcode;
						var $conv79 = ((($68)) & 255);
						var $cmp80 = ((($conv79)) | 0) == 20;
						if (!($cmp80)) {
							__label__ = 38;
							break $if_else78$$if_end93$47;
						}
						var $69 = $stress;
						var $conv82 = ((($69)) & 255);
						var $70 = $count;
						var $71 = $vowel_stress_addr;
						var $arrayidx83 = (($71 + $70) & 4294967295);
						HEAP8[($arrayidx83)] = $conv82;
						var $72 = $stress;
						var $cmp84 = ((($72)) | 0) == 0;
						if (!($cmp84)) {
							__label__ = 38;
							break $if_else78$$if_end93$47;
						}
						var $73 = $control_addr;
						var $and86 = ($73) & 1;
						var $tobool87 = ((($and86)) | 0) != 0;
						if (!($tobool87)) {
							__label__ = 38;
							break $if_else78$$if_end93$47;
						}
						var $74 = $count;
						var $inc89 = ((($74) + 1) & 4294967295);
						$count = $inc89;
						var $75 = $vowel_stress_addr;
						var $arrayidx90 = (($75 + $74) & 4294967295);
						HEAP8[($arrayidx90)] = 1;;
					}
				} while (0);
				var $76 = $phcode;
				var $77 = $ph_out;
				var $incdec_ptr94 = (($77 + 1) & 4294967295);
				$ph_out = $incdec_ptr94;
				HEAP8[($77)] = $76;
				__label__ = 1;
				continue $while_cond$2;
			}
			var $78 = $count;
			var $79 = $vowel_stress_addr;
			var $arrayidx96 = (($79 + $78) & 4294967295);
			HEAP8[($arrayidx96)] = 1;
			var $80 = $ph_out;
			HEAP8[($80)] = 0;
			var $81 = $stressed_syllable_addr;
			var $82 = HEAP32[(($81) >> 2)];
			var $cmp97 = ((($82)) | 0) > 0;
			if ($cmp97) {
				__label__ = 40;;
			} else {
				__label__ = 43;;
			}
			$if_then98$$if_end104$54: do {
				if (__label__ == 40) {
					var $83 = $stressed_syllable_addr;
					var $84 = HEAP32[(($83) >> 2)];
					var $85 = $count;
					var $cmp99 = ((($84)) | 0) >= ((($85)) | 0);
					if ($cmp99) {
						__label__ = 41;;
					} else {
						__label__ = 42;;
					}
					if (__label__ == 41) {
						var $86 = $count;
						var $sub101 = ((($86) - 1) & 4294967295);
						var $87 = $stressed_syllable_addr;
						HEAP32[(($87) >> 2)] = $sub101;;
					}
					var $88 = $stressed_syllable_addr;
					var $89 = HEAP32[(($88) >> 2)];
					var $90 = $vowel_stress_addr;
					var $arrayidx103 = (($90 + $89) & 4294967295);
					HEAP8[($arrayidx103)] = 4;
					$max_stress = 4;
					var $91 = $stressed_syllable_addr;
					var $92 = HEAP32[(($91) >> 2)];
					$primary_posn = $92;;
				} else if (__label__ == 43) {
					var $_pr = $max_stress;
					var $cmp105 = ((($_pr)) | 0) == 5;
					if (!($cmp105)) {
						__label__ = 53;
						break $if_then98$$if_end104$54;
					}
					$ix = 1;
					var $93 = $ix;
					var $94 = $count;
					var $cmp1083 = ((($93)) | 0) < ((($94)) | 0);
					if ($cmp1083) {
						__label__ = 45;;
					} else {
						__label__ = 52;;
					}
					$for_body109$$for_end130$61: do {
						if (__label__ == 45) {
							while (1) {
								var $95 = $ix;
								var $96 = $vowel_stress_addr;
								var $arrayidx110 = (($96 + $95) & 4294967295);
								var $97 = HEAP8[($arrayidx110)];
								var $conv111 = (tempInt = (($97)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp112 = ((($conv111)) | 0) == 4;
								if ($cmp112) {
									__label__ = 46;;
								} else {
									__label__ = 49;;
								}
								if (__label__ == 46) {
									var $98 = $tr_addr;
									var $langopts = (($98) & 4294967295);
									var $stress_flags = (($langopts + 12) & 4294967295);
									var $99 = HEAP32[(($stress_flags) >> 2)];
									var $and114 = ($99) & 131072;
									var $tobool115 = ((($and114)) | 0) != 0;
									var $100 = $ix;
									var $101 = $vowel_stress_addr;
									var $arrayidx117 = (($101 + $100) & 4294967295);
									if ($tobool115) {
										__label__ = 47;;
									} else {
										__label__ = 48;;
									}
									if (__label__ == 47) {
										HEAP8[($arrayidx117)] = 1;;
									} else if (__label__ == 48) {
										HEAP8[($arrayidx117)] = 3;;
									}
								}
								var $102 = $ix;
								var $103 = $vowel_stress_addr;
								var $arrayidx122 = (($103 + $102) & 4294967295);
								var $104 = HEAP8[($arrayidx122)];
								var $conv123 = (tempInt = (($104)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp124 = ((($conv123)) | 0) == 5;
								if ($cmp124) {
									__label__ = 50;;
								} else {
									__label__ = 51;;
								}
								if (__label__ == 50) {
									var $105 = $ix;
									var $106 = $vowel_stress_addr;
									var $arrayidx126 = (($106 + $105) & 4294967295);
									HEAP8[($arrayidx126)] = 4;
									var $107 = $ix;
									$primary_posn = $107;;
								}
								var $108 = $ix;
								var $inc129 = ((($108) + 1) & 4294967295);
								$ix = $inc129;
								var $109 = $ix;
								var $110 = $count;
								var $cmp108 = ((($109)) | 0) < ((($110)) | 0);
								if ($cmp108) {
									__label__ = 45;
									continue;
								} else {
									__label__ = 52;
									break $for_body109$$for_end130$61;
								}
							}
						}
					} while (0);
					$max_stress = 4;;
				}
			} while (0);
			var $111 = $primary_posn;
			var $112 = $stressed_syllable_addr;
			HEAP32[(($112) >> 2)] = $111;
			var $113 = $count;
			var $114 = $vowel_count_addr;
			HEAP32[(($114) >> 2)] = $113;
			var $115 = $max_stress;;
			return $115;
			return null;
		}

		function __Z13SetWordStressP10TranslatorPcPjii($tr, $output, $dictionary_flags, $tonic, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 408;
			_memset(__stackBase__, 0, 408);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $output_addr;
			var $dictionary_flags_addr;
			var $tonic_addr;
			var $control_addr;
			var $phcode;
			var $p;
			var $ph;
			var $stress;
			var $max_stress;
			var $vowel_count = __stackBase__;
			var $ix;
			var $v;
			var $v_stress;
			var $stressed_syllable = __stackBase__ + 4;
			var $max_stress_posn;
			var $unstressed_word;
			var $max_output;
			var $final_ph;
			var $final_ph2;
			var $mnem;
			var $mnem2;
			var $post_tonic;
			var $opt_length;
			var $done;
			var $stressflags;
			var $dflags;
			var $first_primary;
			var $vowel_stress = __stackBase__ + 8;
			var $syllable_weight = __stackBase__ + 88;
			var $vowel_length = __stackBase__ + 168;
			var $phonetic = __stackBase__ + 248;
			var $weight;
			var $lengthened;
			var $wt;
			var $max_weight;
			var $prev_stressed;
			var $shorten;
			$tr_addr = $tr;
			$output_addr = $output;
			$dictionary_flags_addr = $dictionary_flags;
			$tonic_addr = $tonic;
			$control_addr = $control;
			$unstressed_word = 0;
			$dflags = 0;
			var $0 = $tr_addr;
			var $langopts = (($0) & 4294967295);
			var $stress_flags = (($langopts + 12) & 4294967295);
			var $1 = HEAP32[(($stress_flags) >> 2)];
			$stressflags = $1;
			var $2 = $dictionary_flags_addr;
			var $cmp = ((($2)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $3 = $dictionary_flags_addr;
				var $arrayidx = (($3) & 4294967295);
				var $4 = HEAP32[(($arrayidx) >> 2)];
				$dflags = $4;;
			}
			$ix = 0;
			__lastLabel__ = 2;;
			$for_cond$5: while (1) {
				var $5 = __lastLabel__ == 7 ? $inc : (0);
				var $cmp1 = ((($5)) | 0) < 160;
				var $6 = $ix;
				if ($cmp1) {
					__lastLabel__ = 3;;
				} else {
					__lastLabel__ = 3;
					__label__ = 8;
					break $for_cond$5;
				}
				var $7 = $output_addr;
				var $arrayidx2 = (($7 + $6) & 4294967295);
				var $8 = HEAP8[($arrayidx2)];
				var $9 = $ix;
				var $arrayidx3 = (($phonetic + $9) & 4294967295);
				HEAP8[($arrayidx3)] = $8;
				var $10 = $ix;
				var $arrayidx4 = (($phonetic + $10) & 4294967295);
				var $11 = HEAPU8[($arrayidx4)];
				var $conv = ((($11)) & 255);
				var $12 = HEAP32[((_n_phoneme_tab) >> 2)];
				var $cmp5 = ((($conv)) | 0) >= ((($12)) | 0);
				if ($cmp5) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $13 = $ix;
					var $arrayidx7 = (($phonetic + $13) & 4294967295);
					HEAP8[($arrayidx7)] = 13;;
				}
				var $14 = $ix;
				var $arrayidx9 = (($phonetic + $14) & 4294967295);
				var $15 = HEAPU8[($arrayidx9)];
				var $conv10 = ((($15)) & 255);
				var $cmp11 = ((($conv10)) | 0) == 0;
				if ($cmp11) {
					__lastLabel__ = 6;
					__label__ = 8;
					break $for_cond$5;
				} else {
					__lastLabel__ = 6;;
				}
				var $16 = $ix;
				var $inc = ((($16) + 1) & 4294967295);
				$ix = $inc;
				__lastLabel__ = 7;
				__label__ = 3;
				continue $for_cond$5;
			}
			var $17 = __lastLabel__ == 6 ? $14 : ($6);
			var $cmp14 = ((($17)) | 0) == 0;
			if ($cmp14) {
				__label__ = 223;;
			} else {
				__label__ = 9;;
			}
			if (__label__ == 9) {
				var $18 = $ix;
				var $sub = ((($18) - 1) & 4294967295);
				var $arrayidx17 = (($phonetic + $sub) & 4294967295);
				var $19 = HEAPU8[($arrayidx17)];
				var $conv18 = ((($19)) & 255);
				$final_ph = $conv18;
				var $20 = $ix;
				var $sub19 = ((($20) - 2) & 4294967295);
				var $arrayidx20 = (($phonetic + $sub19) & 4294967295);
				var $21 = HEAPU8[($arrayidx20)];
				var $conv21 = ((($21)) & 255);
				$final_ph2 = $conv21;
				var $22 = $output_addr;
				var $add_ptr = (($22 + 157) & 4294967295);
				$max_output = $add_ptr;
				var $23 = $dflags;
				var $and = ($23) & 7;
				HEAP32[(($stressed_syllable) >> 2)] = $and;
				var $24 = $dflags;
				var $and22 = ($24) & 8;
				var $tobool = ((($and22)) | 0) != 0;
				if ($tobool) {
					__label__ = 10;;
				} else {
					__label__ = 11;;
				}
				if (__label__ == 10) {
					var $25 = $dflags;
					var $and24 = ($25) & 3;
					HEAP32[(($stressed_syllable) >> 2)] = $and24;
					$unstressed_word = 1;;
				}
				var $26 = $tr_addr;
				var $arraydecay = (($phonetic) & 4294967295);
				var $arraydecay26 = (($vowel_stress) & 4294967295);
				var $call = __ZL14GetVowelStressP10TranslatorPhPaRiS3_i($26, $arraydecay, $arraydecay26, $vowel_count, $stressed_syllable, 1);
				$max_stress = $call;
				var $cmp27 = ((($call)) | 0) < 0;
				if ($cmp27) {
					__label__ = 12;;
				} else {
					__label__ = 17;;
				}
				$land_lhs_true$$if_end40$18: do {
					if (__label__ == 12) {
						var $27 = $dictionary_flags_addr;
						var $tobool28 = ((($27)) | 0) != 0;
						if (!($tobool28)) {
							__label__ = 17;
							break $land_lhs_true$$if_end40$18;
						}
						var $28 = $tr_addr;
						var $langopts30 = (($28) & 4294967295);
						var $stress_flags31 = (($langopts30 + 12) & 4294967295);
						var $29 = HEAP32[(($stress_flags31) >> 2)];
						var $and32 = ($29) & 1;
						var $tobool33 = ((($and32)) | 0) != 0;
						if ($tobool33) {
							__label__ = 14;;
						} else {
							__label__ = 16;;
						}
						$land_lhs_true34$$if_end39$21: do {
							if (__label__ == 14) {
								var $30 = HEAP32[(($vowel_count) >> 2)];
								var $cmp35 = ((($30)) | 0) == 2;
								if (!($cmp35)) {
									__label__ = 16;
									break $land_lhs_true34$$if_end39$21;
								}
								var $arrayidx37 = (($vowel_stress + 1) & 4294967295);
								HEAP8[($arrayidx37)] = 0;
								var $31 = $dictionary_flags_addr;
								var $arrayidx38 = (($31) & 4294967295);
								var $32 = HEAP32[(($arrayidx38) >> 2)];
								var $or = ($32) | 4096;
								HEAP32[(($arrayidx38) >> 2)] = $or;;
							}
						} while (0);
						$max_stress = 0;;
					}
				} while (0);
				$ix = 1;
				var $arraydecay41 = (($phonetic) & 4294967295);
				$p = $arraydecay41;
				var $33 = $p;
				var $34 = HEAPU8[($33)];
				var $conv4319 = ((($34)) & 255);
				var $cmp4420 = ((($conv4319)) | 0) != 0;
				if ($cmp4420) {
					__label__ = 18;;
				} else {
					__label__ = 33;;
				}
				$for_body45$$for_end109$26: do {
					if (__label__ == 18) {
						$for_body45$27: while (1) {
							var $35 = $p;
							var $arrayidx46 = (($35) & 4294967295);
							var $36 = HEAPU8[($arrayidx46)];
							var $idxprom = ((($36)) & 255);
							var $arrayidx47 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
							var $37 = HEAP32[(($arrayidx47) >> 2)];
							var $type = (($37 + 11) & 4294967295);
							var $38 = HEAPU8[($type)];
							var $conv48 = ((($38)) & 255);
							var $cmp49 = ((($conv48)) | 0) == 2;
							if ($cmp49) {
								__label__ = 19;;
							} else {
								__label__ = 32;;
							}
							$land_lhs_true50$$for_inc107$29: do {
								if (__label__ == 19) {
									var $39 = $p;
									var $arrayidx51 = (($39) & 4294967295);
									var $40 = HEAPU8[($arrayidx51)];
									var $idxprom52 = ((($40)) & 255);
									var $arrayidx53 = ((_phoneme_tab + $idxprom52 * 4) & 4294967295);
									var $41 = HEAP32[(($arrayidx53) >> 2)];
									var $phflags = (($41 + 4) & 4294967295);
									var $42 = HEAP32[(($phflags) >> 2)];
									var $and54 = ($42) & 1048576;
									var $tobool55 = ((($and54)) | 0) != 0;
									if ($tobool55) {
										__label__ = 32;
										break $land_lhs_true50$$for_inc107$29;
									}
									$weight = 0;
									$lengthened = 0;
									var $43 = $p;
									var $arrayidx57 = (($43 + 1) & 4294967295);
									var $44 = HEAPU8[($arrayidx57)];
									var $idxprom58 = ((($44)) & 255);
									var $arrayidx59 = ((_phoneme_tab + $idxprom58 * 4) & 4294967295);
									var $45 = HEAP32[(($arrayidx59) >> 2)];
									var $code = (($45 + 10) & 4294967295);
									var $46 = HEAPU8[($code)];
									var $conv60 = ((($46)) & 255);
									var $cmp61 = ((($conv60)) | 0) == 12;
									if ($cmp61) {
										__label__ = 21;;
									} else {
										__label__ = 22;;
									}
									$if_end63_thread$$if_end63$32: do {
										if (__label__ == 21) {
											$lengthened = 1;
											__label__ = 24;
											break $if_end63_thread$$if_end63$32;
										} else if (__label__ == 22) {
											var $_pr3 = $lengthened;
											var $tobool64 = ((($_pr3)) | 0) != 0;
											if ($tobool64) {
												__label__ = 24;
												break $if_end63_thread$$if_end63$32;
											}
											var $47 = $p;
											var $arrayidx65 = (($47) & 4294967295);
											var $48 = HEAPU8[($arrayidx65)];
											var $idxprom66 = ((($48)) & 255);
											var $arrayidx67 = ((_phoneme_tab + $idxprom66 * 4) & 4294967295);
											var $49 = HEAP32[(($arrayidx67) >> 2)];
											var $phflags68 = (($49 + 4) & 4294967295);
											var $50 = HEAP32[(($phflags68) >> 2)];
											var $and69 = ($50) & 2097152;
											var $tobool70 = ((($and69)) | 0) != 0;
											if ($tobool70) {
												__label__ = 24;
												break $if_end63_thread$$if_end63$32;
											} else {
												__label__ = 25;
												break $if_end63_thread$$if_end63$32;
											}
										}
									} while (0);
									if (__label__ == 24) {
										var $51 = $weight;
										var $inc72 = ((($51) + 1) & 4294967295);
										$weight = $inc72;;
									}
									var $52 = $weight;
									var $conv74 = ((($52)) & 255);
									var $53 = $ix;
									var $arrayidx75 = (($vowel_length + $53) & 4294967295);
									HEAP8[($arrayidx75)] = $conv74;
									var $54 = $lengthened;
									var $tobool76 = ((($54)) | 0) != 0;
									if ($tobool76) {
										__label__ = 26;;
									} else {
										__label__ = 27;;
									}
									if (__label__ == 26) {
										var $55 = $p;
										var $incdec_ptr = (($55 + 1) & 4294967295);
										$p = $incdec_ptr;;
									}
									var $56 = $p;
									var $arrayidx79 = (($56 + 1) & 4294967295);
									var $57 = HEAPU8[($arrayidx79)];
									var $idxprom80 = ((($57)) & 255);
									var $arrayidx81 = ((_phoneme_tab + $idxprom80 * 4) & 4294967295);
									var $58 = HEAP32[(($arrayidx81) >> 2)];
									var $type82 = (($58 + 11) & 4294967295);
									var $59 = HEAPU8[($type82)];
									var $idxprom83 = ((($59)) & 255);
									var $arrayidx84 = ((__ZZ13SetWordStressP10TranslatorPcPjiiE15consonant_types + $idxprom83) & 4294967295);
									var $60 = HEAP8[($arrayidx84)];
									var $tobool85 = (tempInt = (($60)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
									if ($tobool85) {
										__label__ = 28;;
									} else {
										__label__ = 31;;
									}
									$land_lhs_true86$$if_end102$42: do {
										if (__label__ == 28) {
											var $61 = $p;
											var $arrayidx87 = (($61 + 2) & 4294967295);
											var $62 = HEAPU8[($arrayidx87)];
											var $idxprom88 = ((($62)) & 255);
											var $arrayidx89 = ((_phoneme_tab + $idxprom88 * 4) & 4294967295);
											var $63 = HEAP32[(($arrayidx89) >> 2)];
											var $type90 = (($63 + 11) & 4294967295);
											var $64 = HEAPU8[($type90)];
											var $conv91 = ((($64)) & 255);
											var $cmp92 = ((($conv91)) | 0) != 2;
											if ($cmp92) {
												__label__ = 30;;
											} else {
												__label__ = 29;;
											}
											if (__label__ == 29) {
												var $65 = $p;
												var $arrayidx94 = (($65 + 1) & 4294967295);
												var $66 = HEAPU8[($arrayidx94)];
												var $idxprom95 = ((($66)) & 255);
												var $arrayidx96 = ((_phoneme_tab + $idxprom95 * 4) & 4294967295);
												var $67 = HEAP32[(($arrayidx96) >> 2)];
												var $phflags97 = (($67 + 4) & 4294967295);
												var $68 = HEAP32[(($phflags97) >> 2)];
												var $and98 = ($68) & 2097152;
												var $tobool99 = ((($and98)) | 0) != 0;
												if (!($tobool99)) {
													__label__ = 31;
													break $land_lhs_true86$$if_end102$42;
												}
											}
											var $69 = $weight;
											var $inc101 = ((($69) + 1) & 4294967295);
											$weight = $inc101;;
										}
									} while (0);
									var $70 = $weight;
									var $conv103 = ((($70)) & 255);
									var $71 = $ix;
									var $arrayidx104 = (($syllable_weight + $71) & 4294967295);
									HEAP8[($arrayidx104)] = $conv103;
									var $72 = $ix;
									var $inc105 = ((($72) + 1) & 4294967295);
									$ix = $inc105;;
								}
							} while (0);
							var $73 = $p;
							var $incdec_ptr108 = (($73 + 1) & 4294967295);
							$p = $incdec_ptr108;
							var $74 = $p;
							var $75 = HEAPU8[($74)];
							var $conv43 = ((($75)) & 255);
							var $cmp44 = ((($conv43)) | 0) != 0;
							if ($cmp44) {
								__label__ = 18;
								continue $for_body45$27;
							} else {
								__label__ = 33;
								break $for_body45$$for_end109$26;
							}
						}
					}
				} while (0);
				var $76 = $tr_addr;
				var $langopts110 = (($76) & 4294967295);
				var $stress_rule = (($langopts110 + 8) & 4294967295);
				var $77 = HEAP32[(($stress_rule) >> 2)];
				if ($77 == 8) {
					__label__ = 34;;
				} else if ($77 == 1) {
					__label__ = 36;;
				} else if ($77 == 10) {
					__label__ = 41;;
				} else if ($77 == 2) {
					__label__ = 44;;
				} else if ($77 == 3) {
					__label__ = 68;;
				} else if ($77 == 4) {
					__label__ = 75;;
				} else if ($77 == 5) {
					__label__ = 81;;
				} else if ($77 == 6) {
					__label__ = 89;;
				} else if ($77 == 7) {
					__label__ = 101;;
				} else if ($77 == 9) {
					__label__ = 108;;
				} else {
					__label__ = 112;;
				}
				$sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50: do {
					if (__label__ == 34) {
						var $arrayidx111 = (($syllable_weight + 1) & 4294967295);
						var $78 = HEAP8[($arrayidx111)];
						var $conv112 = (tempInt = (($78)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp113 = ((($conv112)) | 0) > 0;
						if ($cmp113) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $arrayidx115 = (($syllable_weight + 2) & 4294967295);
						var $79 = HEAP8[($arrayidx115)];
						var $conv116 = (tempInt = (($79)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp117 = ((($conv116)) | 0) == 0;
						if ($cmp117) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						} else {
							__label__ = 36;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
					} else if (__label__ == 41) {
						var $84 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp131 = ((($84)) | 0) == 0;
						if (!($cmp131)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $85 = HEAP32[(($vowel_count) >> 2)];
						var $cmp133 = ((($85)) | 0) < 4;
						if (!($cmp133)) {
							__label__ = 44;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $86 = HEAP32[(($vowel_count) >> 2)];
						var $sub135 = ((($86) - 1) & 4294967295);
						var $arrayidx136 = (($vowel_stress + $sub135) & 4294967295);
						HEAP8[($arrayidx136)] = 4;
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
					} else if (__label__ == 68) {
						var $129 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp229 = ((($129)) | 0) == 0;
						if (!($cmp229)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $130 = HEAP32[(($vowel_count) >> 2)];
						var $sub231 = ((($130) - 1) & 4294967295);
						HEAP32[(($stressed_syllable) >> 2)] = $sub231;
						__lastLabel__ = 69;;
						while (1) {
							var $131 = __lastLabel__ == 73 ? $dec239 : ($sub231);
							var $cmp232 = ((($131)) | 0) > 0;
							if (!($cmp232)) {
								__label__ = 74;
								break;
							}
							var $132 = HEAP32[(($stressed_syllable) >> 2)];
							var $arrayidx233 = (($vowel_stress + $132) & 4294967295);
							var $133 = HEAP8[($arrayidx233)];
							var $conv234 = (tempInt = (($133)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp235 = ((($conv234)) | 0) < 0;
							var $134 = HEAP32[(($stressed_syllable) >> 2)];
							if ($cmp235) {
								__label__ = 72;
								break;
							}
							var $dec239 = ((($134) - 1) & 4294967295);
							HEAP32[(($stressed_syllable) >> 2)] = $dec239;
							__lastLabel__ = 73;
							__label__ = 70;
							continue;
						}
						if (__label__ == 72) {
							var $arrayidx237 = (($vowel_stress + $134) & 4294967295);
							HEAP8[($arrayidx237)] = 4;;
						}
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
					} else if (__label__ == 75) {
						var $135 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp243 = ((($135)) | 0) == 0;
						if (!($cmp243)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $136 = HEAP32[(($vowel_count) >> 2)];
						var $sub245 = ((($136) - 3) & 4294967295);
						HEAP32[(($stressed_syllable) >> 2)] = $sub245;
						var $137 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp246 = ((($137)) | 0) < 1;
						if ($cmp246) {
							__label__ = 77;;
						} else {
							__label__ = 78;;
						}
						if (__label__ == 77) {
							HEAP32[(($stressed_syllable) >> 2)] = 1;;
						}
						var $138 = $max_stress;
						var $cmp249 = ((($138)) | 0) == 0;
						if ($cmp249) {
							__label__ = 79;;
						} else {
							__label__ = 80;;
						}
						if (__label__ == 79) {
							var $139 = HEAP32[(($stressed_syllable) >> 2)];
							var $arrayidx251 = (($vowel_stress + $139) & 4294967295);
							HEAP8[($arrayidx251)] = 4;;
						}
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
					} else if (__label__ == 81) {
						var $140 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp255 = ((($140)) | 0) == 0;
						if (!($cmp255)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $141 = HEAP32[(($vowel_count) >> 2)];
						var $sub257 = ((($141) - 3) & 4294967295);
						HEAP32[(($stressed_syllable) >> 2)] = $sub257;
						var $142 = HEAP32[(($vowel_count) >> 2)];
						var $cmp258 = ((($142)) | 0) < 16;
						if ($cmp258) {
							__label__ = 83;;
						} else {
							__label__ = 88;;
						}
						if (__label__ == 83) {
							var $143 = $final_ph;
							var $arrayidx260 = ((_phoneme_tab + $143 * 4) & 4294967295);
							var $144 = HEAP32[(($arrayidx260) >> 2)];
							var $type261 = (($144 + 11) & 4294967295);
							var $145 = HEAPU8[($type261)];
							var $conv262 = ((($145)) & 255);
							var $cmp263 = ((($conv262)) | 0) == 2;
							if ($cmp263) {
								__label__ = 84;;
							} else {
								__label__ = 85;;
							}
							if (__label__ == 84) {
								var $146 = HEAP32[(($vowel_count) >> 2)];
								var $arrayidx265 = ((__ZZ13SetWordStressP10TranslatorPcPjiiE10guess_ru_v + $146) & 4294967295);
								var $147 = HEAP8[($arrayidx265)];
								var $conv266 = (tempInt = (($147)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								HEAP32[(($stressed_syllable) >> 2)] = $conv266;;
							} else if (__label__ == 85) {
								var $148 = $final_ph;
								var $arrayidx268 = ((_phoneme_tab + $148 * 4) & 4294967295);
								var $149 = HEAP32[(($arrayidx268) >> 2)];
								var $type269 = (($149 + 11) & 4294967295);
								var $150 = HEAPU8[($type269)];
								var $conv270 = ((($150)) & 255);
								var $cmp271 = ((($conv270)) | 0) == 4;
								var $151 = HEAP32[(($vowel_count) >> 2)];
								if ($cmp271) {
									__label__ = 86;;
								} else {
									__label__ = 87;;
								}
								if (__label__ == 86) {
									var $arrayidx273 = ((__ZZ13SetWordStressP10TranslatorPcPjiiE10guess_ru_t + $151) & 4294967295);
									var $152 = HEAP8[($arrayidx273)];
									var $conv274 = (tempInt = (($152)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									HEAP32[(($stressed_syllable) >> 2)] = $conv274;;
								} else if (__label__ == 87) {
									var $arrayidx276 = ((__ZZ13SetWordStressP10TranslatorPcPjiiE8guess_ru + $151) & 4294967295);
									var $153 = HEAP8[($arrayidx276)];
									var $conv277 = (tempInt = (($153)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									HEAP32[(($stressed_syllable) >> 2)] = $conv277;;
								}
							}
						}
						var $154 = HEAP32[(($stressed_syllable) >> 2)];
						var $arrayidx281 = (($vowel_stress + $154) & 4294967295);
						HEAP8[($arrayidx281)] = 4;
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
					} else if (__label__ == 89) {
						var $155 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp284 = ((($155)) | 0) == 0;
						if (!($cmp284)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						$max_weight = -1;
						$ix = 1;
						var $156 = $ix;
						var $157 = HEAP32[(($vowel_count) >> 2)];
						var $sub28714 = ((($157) - 1) & 4294967295);
						var $cmp28815 = ((($156)) | 0) < ((($sub28714)) | 0);
						if ($cmp28815) {
							__label__ = 91;;
						} else {
							__label__ = 95;;
						}
						$for_body289$$for_end302$86: do {
							if (__label__ == 91) {
								$for_body289$87: while (1) {
									var $158 = $ix;
									var $arrayidx290 = (($vowel_stress + $158) & 4294967295);
									var $159 = HEAP8[($arrayidx290)];
									var $conv291 = (tempInt = (($159)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp292 = ((($conv291)) | 0) < 0;
									if ($cmp292) {
										__label__ = 92;;
									} else {
										__label__ = 94;;
									}
									$if_then293$$for_inc300$89: do {
										if (__label__ == 92) {
											var $160 = $ix;
											var $arrayidx294 = (($syllable_weight + $160) & 4294967295);
											var $161 = HEAP8[($arrayidx294)];
											var $conv295 = (tempInt = (($161)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											$wt = $conv295;
											var $162 = $max_weight;
											var $cmp296 = ((($conv295)) | 0) >= ((($162)) | 0);
											if (!($cmp296)) {
												__label__ = 94;
												break $if_then293$$for_inc300$89;
											}
											var $163 = $wt;
											$max_weight = $163;
											var $164 = HEAP32[(($stressed_syllable) >> 2)];
											$prev_stressed = $164;
											var $165 = $ix;
											HEAP32[(($stressed_syllable) >> 2)] = $165;;
										}
									} while (0);
									var $166 = $ix;
									var $inc301 = ((($166) + 1) & 4294967295);
									$ix = $inc301;
									var $167 = $ix;
									var $168 = HEAP32[(($vowel_count) >> 2)];
									var $sub287 = ((($168) - 1) & 4294967295);
									var $cmp288 = ((($167)) | 0) < ((($sub287)) | 0);
									if ($cmp288) {
										__label__ = 91;
										continue $for_body289$87;
									} else {
										__label__ = 95;
										break $for_body289$$for_end302$86;
									}
								}
							}
						} while (0);
						var $169 = HEAP32[(($vowel_count) >> 2)];
						var $sub303 = ((($169) - 1) & 4294967295);
						var $arrayidx304 = (($syllable_weight + $sub303) & 4294967295);
						var $170 = HEAP8[($arrayidx304)];
						var $conv305 = (tempInt = (($170)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp306 = ((($conv305)) | 0) == 2;
						var $171 = $max_weight;
						if ($cmp306) {
							__label__ = 96;;
						} else {
							__label__ = 98;;
						}
						$land_lhs_true307$$if_else311$94: do {
							if (__label__ == 96) {
								var $cmp308 = ((($171)) | 0) < 2;
								if (!($cmp308)) {
									__label__ = 100;
									break $land_lhs_true307$$if_else311$94;
								}
								var $172 = HEAP32[(($vowel_count) >> 2)];
								var $sub310 = ((($172) - 1) & 4294967295);
								HEAP32[(($stressed_syllable) >> 2)] = $sub310;;
							} else if (__label__ == 98) {
								var $cmp312 = ((($171)) | 0) <= 0;
								if (!($cmp312)) {
									__label__ = 100;
									break $land_lhs_true307$$if_else311$94;
								}
								HEAP32[(($stressed_syllable) >> 2)] = 1;;
							}
						} while (0);
						var $173 = HEAP32[(($stressed_syllable) >> 2)];
						var $arrayidx316 = (($vowel_stress + $173) & 4294967295);
						HEAP8[($arrayidx316)] = 4;
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
					} else if (__label__ == 101) {
						var $174 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp319 = ((($174)) | 0) == 0;
						if (!($cmp319)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						var $175 = HEAP32[(($vowel_count) >> 2)];
						var $sub321 = ((($175) - 1) & 4294967295);
						HEAP32[(($stressed_syllable) >> 2)] = $sub321;
						$ix = 1;;
						while (1) {
							var $176 = $ix;
							var $177 = HEAP32[(($vowel_count) >> 2)];
							var $cmp323 = ((($176)) | 0) < ((($177)) | 0);
							if (!($cmp323)) {
								__label__ = 107;
								break;
							}
							var $178 = $ix;
							var $arrayidx325 = (($vowel_stress + $178) & 4294967295);
							var $179 = HEAP8[($arrayidx325)];
							var $conv326 = (tempInt = (($179)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp327 = ((($conv326)) | 0) == 1;
							var $180 = $ix;
							if ($cmp327) {
								__label__ = 105;
								break;
							}
							var $inc332 = ((($180) + 1) & 4294967295);
							$ix = $inc332;
							__label__ = 103;
							continue;
						}
						if (__label__ == 105) {
							var $sub329 = ((($180) - 1) & 4294967295);
							HEAP32[(($stressed_syllable) >> 2)] = $sub329;;
						}
						var $181 = HEAP32[(($stressed_syllable) >> 2)];
						var $arrayidx334 = (($vowel_stress + $181) & 4294967295);
						HEAP8[($arrayidx334)] = 4;
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
					} else if (__label__ == 108) {
						$ix = 1;
						var $182 = $ix;
						var $183 = HEAP32[(($vowel_count) >> 2)];
						var $cmp33813 = ((($182)) | 0) < ((($183)) | 0);
						if (!($cmp33813)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
						}
						while (1) {
							var $184 = $ix;
							var $arrayidx340 = (($vowel_stress + $184) & 4294967295);
							var $185 = HEAP8[($arrayidx340)];
							var $conv341 = (tempInt = (($185)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp342 = ((($conv341)) | 0) < 0;
							if ($cmp342) {
								__label__ = 110;;
							} else {
								__label__ = 111;;
							}
							if (__label__ == 110) {
								var $186 = $ix;
								var $arrayidx344 = (($vowel_stress + $186) & 4294967295);
								HEAP8[($arrayidx344)] = 4;;
							}
							var $187 = $ix;
							var $inc347 = ((($187) + 1) & 4294967295);
							$ix = $inc347;
							var $188 = $ix;
							var $189 = HEAP32[(($vowel_count) >> 2)];
							var $cmp338 = ((($188)) | 0) < ((($189)) | 0);
							if ($cmp338) {
								__label__ = 109;
								continue;
							} else {
								__label__ = 112;
								break $sw_epilog$$sw_bb$$sw_bb120$$sw_bb130$$sw_bb139$$sw_bb228$$sw_bb242$$sw_bb254$$sw_bb283$$sw_bb318$$sw_bb336$50;
							}
						}
					}
				} while (0);
				$sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115: do {
					if (__label__ == 36) {
						var $80 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp121 = ((($80)) | 0) == 0;
						if (!($cmp121)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
						}
						var $81 = HEAP32[(($vowel_count) >> 2)];
						var $cmp123 = ((($81)) | 0) > 2;
						if (!($cmp123)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
						}
						HEAP32[(($stressed_syllable) >> 2)] = 2;
						var $82 = $max_stress;
						var $cmp125 = ((($82)) | 0) == 0;
						if ($cmp125) {
							__label__ = 39;;
						} else {
							__label__ = 40;;
						}
						if (__label__ == 39) {
							var $83 = HEAP32[(($stressed_syllable) >> 2)];
							var $arrayidx127 = (($vowel_stress + $83) & 4294967295);
							HEAP8[($arrayidx127)] = 4;;
						}
						$max_stress = 4;
						__label__ = 114;
						break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
					} else if (__label__ == 44) {
						var $_pr5 = HEAP32[(($stressed_syllable) >> 2)];
						var $cmp140 = ((($_pr5)) | 0) == 0;
						if (!($cmp140)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
						}
						$max_stress = 4;
						var $87 = HEAP32[(($vowel_count) >> 2)];
						var $cmp142 = ((($87)) | 0) > 2;
						if ($cmp142) {
							__label__ = 46;;
						} else {
							__label__ = 63;;
						}
						$if_then143$$if_else208$124: do {
							if (__label__ == 46) {
								var $88 = HEAP32[(($vowel_count) >> 2)];
								var $sub144 = ((($88) - 2) & 4294967295);
								HEAP32[(($stressed_syllable) >> 2)] = $sub144;
								var $89 = $stressflags;
								var $and145 = ($89) & 768;
								var $tobool146 = ((($and145)) | 0) != 0;
								if ($tobool146) {
									__label__ = 47;;
								} else {
									__label__ = 55;;
								}
								$if_then147$$if_end179$126: do {
									if (__label__ == 47) {
										var $90 = $final_ph;
										var $arrayidx148 = ((_phoneme_tab + $90 * 4) & 4294967295);
										var $91 = HEAP32[(($arrayidx148) >> 2)];
										var $type149 = (($91 + 11) & 4294967295);
										var $92 = HEAPU8[($type149)];
										var $conv150 = ((($92)) & 255);
										var $cmp151 = ((($conv150)) | 0) != 2;
										if (!($cmp151)) {
											__label__ = 55;
											break $if_then147$$if_end179$126;
										}
										var $93 = $stressflags;
										var $and153 = ($93) & 256;
										var $tobool154 = ((($and153)) | 0) != 0;
										if ($tobool154) {
											__label__ = 49;;
										} else {
											__label__ = 50;;
										}
										if (__label__ == 49) {
											var $94 = HEAP32[(($vowel_count) >> 2)];
											var $sub156 = ((($94) - 1) & 4294967295);
											HEAP32[(($stressed_syllable) >> 2)] = $sub156;;
										} else if (__label__ == 50) {
											var $95 = $final_ph;
											var $arrayidx157 = ((_phoneme_tab + $95 * 4) & 4294967295);
											var $96 = HEAP32[(($arrayidx157) >> 2)];
											var $mnemonic = (($96) & 4294967295);
											var $97 = HEAP32[(($mnemonic) >> 2)];
											$mnem = $97;
											var $98 = $final_ph2;
											var $arrayidx158 = ((_phoneme_tab + $98 * 4) & 4294967295);
											var $99 = HEAP32[(($arrayidx158) >> 2)];
											var $mnemonic159 = (($99) & 4294967295);
											var $100 = HEAP32[(($mnemonic159) >> 2)];
											$mnem2 = $100;
											var $101 = $mnem;
											var $cmp160 = ((($101)) | 0) == 115;
											if ($cmp160) {
												__label__ = 51;;
											} else {
												__label__ = 52;;
											}
											if (__label__ == 51) {
												var $102 = $mnem2;
												var $cmp162 = ((($102)) | 0) == 110;
												if ($cmp162) {
													__label__ = 55;
													break $if_then147$$if_end179$126;
												}
											}
											var $103 = $mnem;
											var $cmp165 = ((($103)) | 0) != 110;
											var $104 = $mnem;
											var $cmp167 = ((($104)) | 0) != 115;
											var $or_cond = ($cmp165) & ($cmp167);
											if ($or_cond) {
												__label__ = 54;;
											} else {
												__label__ = 53;;
											}
											if (__label__ == 53) {
												var $105 = $final_ph2;
												var $arrayidx169 = ((_phoneme_tab + $105 * 4) & 4294967295);
												var $106 = HEAP32[(($arrayidx169) >> 2)];
												var $type170 = (($106 + 11) & 4294967295);
												var $107 = HEAPU8[($type170)];
												var $conv171 = ((($107)) & 255);
												var $cmp172 = ((($conv171)) | 0) != 2;
												if (!($cmp172)) {
													__label__ = 55;
													break $if_then147$$if_end179$126;
												}
											}
											var $108 = HEAP32[(($vowel_count) >> 2)];
											var $sub174 = ((($108) - 1) & 4294967295);
											HEAP32[(($stressed_syllable) >> 2)] = $sub174;;
										}
									}
								} while (0);
								var $109 = $stressflags;
								var $and180 = ($109) & 524288;
								var $tobool181 = ((($and180)) | 0) != 0;
								if ($tobool181) {
									__label__ = 56;;
								} else {
									__label__ = 58;;
								}
								$if_then182$$if_end193$139: do {
									if (__label__ == 56) {
										var $110 = HEAP32[(($vowel_count) >> 2)];
										var $sub183 = ((($110) - 1) & 4294967295);
										var $arrayidx184 = (($vowel_length + $sub183) & 4294967295);
										var $111 = HEAP8[($arrayidx184)];
										var $conv185 = (tempInt = (($111)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $112 = HEAP32[(($vowel_count) >> 2)];
										var $sub186 = ((($112) - 2) & 4294967295);
										var $arrayidx187 = (($vowel_length + $sub186) & 4294967295);
										var $113 = HEAP8[($arrayidx187)];
										var $conv188 = (tempInt = (($113)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp189 = ((($conv185)) | 0) > ((($conv188)) | 0);
										if (!($cmp189)) {
											__label__ = 58;
											break $if_then182$$if_end193$139;
										}
										var $114 = HEAP32[(($vowel_count) >> 2)];
										var $sub191 = ((($114) - 1) & 4294967295);
										HEAP32[(($stressed_syllable) >> 2)] = $sub191;;
									}
								} while (0);
								var $115 = HEAP32[(($stressed_syllable) >> 2)];
								var $arrayidx194 = (($vowel_stress + $115) & 4294967295);
								var $116 = HEAP8[($arrayidx194)];
								var $conv195 = (tempInt = (($116)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp196 = ((($conv195)) | 0) == 0;
								if ($cmp196) {
									__lastLabel__ = 58;
									__label__ = 60;;
								} else {
									__lastLabel__ = 58;
									__label__ = 59;;
								}
								if (__label__ == 59) {
									var $117 = HEAP32[(($stressed_syllable) >> 2)];
									var $arrayidx198 = (($vowel_stress + $117) & 4294967295);
									var $118 = HEAP8[($arrayidx198)];
									var $conv199 = (tempInt = (($118)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp200 = ((($conv199)) | 0) == 1;
									if ($cmp200) {
										__lastLabel__ = 59;;
									} else {
										__lastLabel__ = 59;
										__label__ = 64;
										break $if_then143$$if_else208$124;
									}
								}
								var $119 = __lastLabel__ == 59 ? $117 : ($115);
								var $cmp202 = ((($119)) | 0) > 1;
								var $120 = HEAP32[(($stressed_syllable) >> 2)];
								if ($cmp202) {
									__label__ = 61;;
								} else {
									__label__ = 62;;
								}
								if (__label__ == 61) {
									var $dec = ((($120) - 1) & 4294967295);
									HEAP32[(($stressed_syllable) >> 2)] = $dec;;
								} else if (__label__ == 62) {
									var $inc205 = ((($120) + 1) & 4294967295);
									HEAP32[(($stressed_syllable) >> 2)] = $inc205;;
								}
							} else if (__label__ == 63) {
								HEAP32[(($stressed_syllable) >> 2)] = 1;;
							}
						} while (0);
						var $121 = HEAP32[(($stressed_syllable) >> 2)];
						var $arrayidx210 = (($vowel_stress + $121) & 4294967295);
						var $122 = HEAP8[($arrayidx210)];
						var $conv211 = (tempInt = (($122)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp212 = ((($conv211)) | 0) < 0;
						if (!($cmp212)) {
							__label__ = 112;
							break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
						}
						var $123 = HEAP32[(($stressed_syllable) >> 2)];
						var $sub214 = ((($123) - 1) & 4294967295);
						var $arrayidx215 = (($vowel_stress + $sub214) & 4294967295);
						var $124 = HEAP8[($arrayidx215)];
						var $conv216 = (tempInt = (($124)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp217 = ((($conv216)) | 0) < 4;
						if ($cmp217) {
							__label__ = 67;;
						} else {
							__label__ = 66;;
						}
						if (__label__ == 66) {
							var $125 = HEAP32[(($stressed_syllable) >> 2)];
							var $add = ((($125) + 1) & 4294967295);
							var $arrayidx219 = (($vowel_stress + $add) & 4294967295);
							var $126 = HEAP8[($arrayidx219)];
							var $conv220 = (tempInt = (($126)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp221 = ((($conv220)) | 0) < 4;
							if (!($cmp221)) {
								__label__ = 112;
								break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
							}
						}
						var $127 = $max_stress;
						var $conv223 = ((($127)) & 255);
						var $128 = HEAP32[(($stressed_syllable) >> 2)];
						var $arrayidx224 = (($vowel_stress + $128) & 4294967295);
						HEAP8[($arrayidx224)] = $conv223;
						__label__ = 112;
						break $sw_epilog$$sw_bb120$$if_else351$$sw_bb139$115;
					}
				} while (0);
				$sw_epilog$$if_else351$155: do {
					if (__label__ == 112) {
						var $_pr9 = $max_stress;
						var $cmp349 = ((($_pr9)) | 0) < 4;
						if (!($cmp349)) {
							__label__ = 114;
							break $sw_epilog$$if_else351$155;
						}
						$stress = 4;
						__label__ = 115;
						break $sw_epilog$$if_else351$155;
					}
				} while (0);
				if (__label__ == 114) {
					$stress = 3;;
				}
				var $190 = $stressflags;
				var $and353 = ($190) & 4096;
				var $tobool354 = ((($and353)) | 0) != 0;
				if ($tobool354) {
					__label__ = 116;;
				} else {
					__label__ = 121;;
				}
				$land_lhs_true355$$if_end370$161: do {
					if (__label__ == 116) {
						var $191 = HEAP32[(($vowel_count) >> 2)];
						var $cmp356 = ((($191)) | 0) == 2;
						if (!($cmp356)) {
							__label__ = 121;
							break $land_lhs_true355$$if_end370$161;
						}
						var $arrayidx358 = (($vowel_stress + 1) & 4294967295);
						var $192 = HEAP8[($arrayidx358)];
						var $conv359 = (tempInt = (($192)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp360 = ((($conv359)) | 0) == 4;
						if ($cmp360) {
							__label__ = 118;;
						} else {
							__label__ = 119;;
						}
						if (__label__ == 118) {
							var $arrayidx362 = (($vowel_stress + 2) & 4294967295);
							HEAP8[($arrayidx362)] = 3;;
						}
						var $arrayidx364 = (($vowel_stress + 2) & 4294967295);
						var $193 = HEAP8[($arrayidx364)];
						var $conv365 = (tempInt = (($193)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp366 = ((($conv365)) | 0) == 4;
						if (!($cmp366)) {
							__label__ = 121;
							break $land_lhs_true355$$if_end370$161;
						}
						var $arrayidx368 = (($vowel_stress + 1) & 4294967295);
						HEAP8[($arrayidx368)] = 3;;
					}
				} while (0);
				var $194 = $stressflags;
				var $and371 = ($194) & 8192;
				var $tobool372 = ((($and371)) | 0) != 0;
				if ($tobool372) {
					__label__ = 122;;
				} else {
					__label__ = 126;;
				}
				$land_lhs_true373$$if_end386$169: do {
					if (__label__ == 122) {
						var $arrayidx374 = (($vowel_stress + 1) & 4294967295);
						var $195 = HEAP8[($arrayidx374)];
						var $conv375 = (tempInt = (($195)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp376 = ((($conv375)) | 0) < 0;
						if (!($cmp376)) {
							__label__ = 126;
							break $land_lhs_true373$$if_end386$169;
						}
						var $196 = HEAP32[(($vowel_count) >> 2)];
						var $cmp378 = ((($196)) | 0) > 2;
						if (!($cmp378)) {
							__label__ = 126;
							break $land_lhs_true373$$if_end386$169;
						}
						var $arrayidx380 = (($vowel_stress + 2) & 4294967295);
						var $197 = HEAP8[($arrayidx380)];
						var $conv381 = (tempInt = (($197)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp382 = ((($conv381)) | 0) >= 4;
						if (!($cmp382)) {
							__label__ = 126;
							break $land_lhs_true373$$if_end386$169;
						}
						var $arrayidx384 = (($vowel_stress + 1) & 4294967295);
						HEAP8[($arrayidx384)] = 3;;
					}
				} while (0);
				$done = 0;
				$first_primary = 0;
				$v = 1;
				var $198 = $v;
				var $199 = HEAP32[(($vowel_count) >> 2)];
				var $cmp38818 = ((($198)) | 0) < ((($199)) | 0);
				if ($cmp38818) {
					__label__ = 127;;
				} else {
					__label__ = 151;;
				}
				$for_body389$$for_end471$175: do {
					if (__label__ == 127) {
						$for_body389$176: while (1) {
							var $200 = $v;
							var $arrayidx390 = (($vowel_stress + $200) & 4294967295);
							var $201 = HEAP8[($arrayidx390)];
							var $conv391 = (tempInt = (($201)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp392 = ((($conv391)) | 0) < 0;
							if ($cmp392) {
								__label__ = 128;;
							} else {
								__label__ = 145;;
							}
							$if_then393$$if_end454$178: do {
								if (__label__ == 128) {
									var $202 = $stressflags;
									var $and394 = ($202) & 16;
									var $tobool395 = ((($and394)) | 0) != 0;
									if ($tobool395) {
										__label__ = 129;;
									} else {
										__label__ = 131;;
									}
									$land_lhs_true396$$if_else402$180: do {
										if (__label__ == 129) {
											var $203 = $stress;
											var $cmp397 = ((($203)) | 0) < 4;
											if (!($cmp397)) {
												__label__ = 131;
												break $land_lhs_true396$$if_else402$180;
											}
											var $204 = $v;
											var $205 = HEAP32[(($vowel_count) >> 2)];
											var $sub399 = ((($205) - 1) & 4294967295);
											var $cmp400 = ((($204)) | 0) == ((($sub399)) | 0);
											if ($cmp400) {
												__label__ = 145;
												break $if_then393$$if_end454$178;
											}
										}
									} while (0);
									var $206 = $stressflags;
									var $and403 = ($206) & 32768;
									var $tobool404 = ((($and403)) | 0) != 0;
									if ($tobool404) {
										__label__ = 132;;
									} else {
										__label__ = 134;;
									}
									$land_lhs_true405$$if_else410$184: do {
										if (__label__ == 132) {
											var $207 = $done;
											var $cmp406 = ((($207)) | 0) == 0;
											if (!($cmp406)) {
												__label__ = 134;
												break $land_lhs_true405$$if_else410$184;
											}
											var $208 = $stress;
											var $conv408 = ((($208)) & 255);
											var $209 = $v;
											var $arrayidx409 = (($vowel_stress + $209) & 4294967295);
											HEAP8[($arrayidx409)] = $conv408;
											$done = 1;
											$stress = 3;
											__label__ = 145;
											break $if_then393$$if_end454$178;
										}
									} while (0);
									var $210 = $v;
									var $sub411 = ((($210) - 1) & 4294967295);
									var $arrayidx412 = (($vowel_stress + $sub411) & 4294967295);
									var $211 = HEAP8[($arrayidx412)];
									var $conv413 = (tempInt = (($211)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp414 = ((($conv413)) | 0) <= 1;
									if (!($cmp414)) {
										__label__ = 145;
										break $if_then393$$if_end454$178;
									}
									var $212 = $v;
									var $add416 = ((($212) + 1) & 4294967295);
									var $arrayidx417 = (($vowel_stress + $add416) & 4294967295);
									var $213 = HEAP8[($arrayidx417)];
									var $conv418 = (tempInt = (($213)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp419 = ((($conv418)) | 0) <= 1;
									if ($cmp419) {
										__label__ = 138;;
									} else {
										__label__ = 136;;
									}
									if (__label__ == 136) {
										var $214 = $stress;
										var $cmp421 = ((($214)) | 0) == 4;
										if (!($cmp421)) {
											__label__ = 145;
											break $if_then393$$if_end454$178;
										}
										var $215 = $v;
										var $add423 = ((($215) + 1) & 4294967295);
										var $arrayidx424 = (($vowel_stress + $add423) & 4294967295);
										var $216 = HEAP8[($arrayidx424)];
										var $conv425 = (tempInt = (($216)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp426 = ((($conv425)) | 0) <= 2;
										if (!($cmp426)) {
											__label__ = 145;
											break $if_then393$$if_end454$178;
										}
									}
									var $217 = $stress;
									var $cmp428 = ((($217)) | 0) == 3;
									if ($cmp428) {
										__label__ = 139;;
									} else {
										__label__ = 140;;
									}
									if (__label__ == 139) {
										var $218 = $stressflags;
										var $and430 = ($218) & 32;
										var $tobool431 = ((($and430)) | 0) != 0;
										if ($tobool431) {
											__label__ = 150;
											break $if_then393$$if_end454$178;
										}
									}
									var $219 = $v;
									var $cmp434 = ((($219)) | 0) > 1;
									if ($cmp434) {
										__label__ = 141;;
									} else {
										__label__ = 144;;
									}
									$land_lhs_true435$$if_end448$196: do {
										if (__label__ == 141) {
											var $220 = $stressflags;
											var $and436 = ($220) & 64;
											var $tobool437 = ((($and436)) | 0) != 0;
											if (!($tobool437)) {
												__label__ = 144;
												break $land_lhs_true435$$if_end448$196;
											}
											var $221 = $v;
											var $arrayidx439 = (($syllable_weight + $221) & 4294967295);
											var $222 = HEAP8[($arrayidx439)];
											var $conv440 = (tempInt = (($222)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp441 = ((($conv440)) | 0) == 0;
											if (!($cmp441)) {
												__label__ = 144;
												break $land_lhs_true435$$if_end448$196;
											}
											var $223 = $v;
											var $add443 = ((($223) + 1) & 4294967295);
											var $arrayidx444 = (($syllable_weight + $add443) & 4294967295);
											var $224 = HEAP8[($arrayidx444)];
											var $conv445 = (tempInt = (($224)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp446 = ((($conv445)) | 0) > 0;
											if ($cmp446) {
												__label__ = 150;
												break $if_then393$$if_end454$178;
											}
										}
									} while (0);
									var $225 = $stress;
									var $conv449 = ((($225)) & 255);
									var $226 = $v;
									var $arrayidx450 = (($vowel_stress + $226) & 4294967295);
									HEAP8[($arrayidx450)] = $conv449;
									$done = 1;
									$stress = 3;
									__label__ = 145;
									break $if_then393$$if_end454$178;
								}
							} while (0);
							$if_end454$$for_inc469$201: do {
								if (__label__ == 145) {
									var $227 = $v;
									var $arrayidx455 = (($vowel_stress + $227) & 4294967295);
									var $228 = HEAP8[($arrayidx455)];
									var $conv456 = (tempInt = (($228)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp457 = ((($conv456)) | 0) >= 4;
									if (!($cmp457)) {
										__label__ = 150;
										break $if_end454$$for_inc469$201;
									}
									var $229 = $first_primary;
									var $cmp459 = ((($229)) | 0) == 0;
									if ($cmp459) {
										__label__ = 147;;
									} else {
										__label__ = 148;;
									}
									if (__label__ == 147) {
										var $230 = $v;
										$first_primary = $230;;
									} else if (__label__ == 148) {
										var $231 = $stressflags;
										var $and462 = ($231) & 128;
										var $tobool463 = ((($and462)) | 0) != 0;
										if (!($tobool463)) {
											__label__ = 150;
											break $if_end454$$for_inc469$201;
										}
										var $232 = $v;
										var $arrayidx465 = (($vowel_stress + $232) & 4294967295);
										HEAP8[($arrayidx465)] = 3;;
									}
								}
							} while (0);
							var $233 = $v;
							var $inc470 = ((($233) + 1) & 4294967295);
							$v = $inc470;
							var $234 = $v;
							var $235 = HEAP32[(($vowel_count) >> 2)];
							var $cmp388 = ((($234)) | 0) < ((($235)) | 0);
							if ($cmp388) {
								__label__ = 127;
								continue $for_body389$176;
							} else {
								__label__ = 151;
								break $for_body389$$for_end471$175;
							}
						}
					}
				} while (0);
				var $236 = $unstressed_word;
				var $tobool472 = ((($236)) | 0) != 0;
				if ($tobool472) {
					__label__ = 152;;
				} else {
					__label__ = 156;;
				}
				$land_lhs_true473$$if_end482$210: do {
					if (__label__ == 152) {
						var $237 = $tonic_addr;
						var $cmp474 = ((($237)) | 0) < 0;
						if (!($cmp474)) {
							__label__ = 156;
							break $land_lhs_true473$$if_end482$210;
						}
						var $238 = HEAP32[(($vowel_count) >> 2)];
						var $cmp476 = ((($238)) | 0) <= 2;
						var $239 = $tr_addr;
						var $langopts478 = (($239) & 4294967295);
						if ($cmp476) {
							__label__ = 154;;
						} else {
							__label__ = 155;;
						}
						if (__label__ == 154) {
							var $unstressed_wd1 = (($langopts478 + 16) & 4294967295);
							var $240 = HEAP32[(($unstressed_wd1) >> 2)];
							$tonic_addr = $240;;
						} else if (__label__ == 155) {
							var $unstressed_wd2 = (($langopts478 + 20) & 4294967295);
							var $241 = HEAP32[(($unstressed_wd2) >> 2)];
							$tonic_addr = $241;;
						}
					}
				} while (0);
				$max_stress = 0;
				$max_stress_posn = 0;
				$v = 1;
				var $242 = $v;
				var $243 = HEAP32[(($vowel_count) >> 2)];
				var $cmp48417 = ((($242)) | 0) < ((($243)) | 0);
				if ($cmp48417) {
					__label__ = 157;;
				} else {
					__label__ = 160;;
				}
				$for_body485$$for_end495$217: do {
					if (__label__ == 157) {
						while (1) {
							var $244 = $v;
							var $arrayidx486 = (($vowel_stress + $244) & 4294967295);
							var $245 = HEAP8[($arrayidx486)];
							var $conv487 = (tempInt = (($245)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $246 = $max_stress;
							var $cmp488 = ((($conv487)) | 0) >= ((($246)) | 0);
							if ($cmp488) {
								__label__ = 158;;
							} else {
								__label__ = 159;;
							}
							if (__label__ == 158) {
								var $247 = $v;
								var $arrayidx490 = (($vowel_stress + $247) & 4294967295);
								var $248 = HEAP8[($arrayidx490)];
								var $conv491 = (tempInt = (($248)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								$max_stress = $conv491;
								var $249 = $v;
								$max_stress_posn = $249;;
							}
							var $250 = $v;
							var $inc494 = ((($250) + 1) & 4294967295);
							$v = $inc494;
							var $251 = $v;
							var $252 = HEAP32[(($vowel_count) >> 2)];
							var $cmp484 = ((($251)) | 0) < ((($252)) | 0);
							if ($cmp484) {
								__label__ = 157;
								continue;
							} else {
								__label__ = 160;
								break $for_body485$$for_end495$217;
							}
						}
					}
				} while (0);
				var $253 = $tonic_addr;
				var $cmp496 = ((($253)) | 0) >= 0;
				if ($cmp496) {
					__label__ = 161;;
				} else {
					__label__ = 164;;
				}
				if (__label__ == 161) {
					var $254 = $tonic_addr;
					var $255 = $max_stress;
					var $cmp498 = ((($254)) | 0) > ((($255)) | 0);
					var $256 = $max_stress;
					var $cmp500 = ((($256)) | 0) <= 4;
					var $or_cond1 = ($cmp498) | ($cmp500);
					if ($or_cond1) {
						__label__ = 162;;
					} else {
						__label__ = 163;;
					}
					if (__label__ == 162) {
						var $257 = $tonic_addr;
						var $conv502 = ((($257)) & 255);
						var $258 = $max_stress_posn;
						var $arrayidx503 = (($vowel_stress + $258) & 4294967295);
						HEAP8[($arrayidx503)] = $conv502;;
					}
					var $259 = $tonic_addr;
					$max_stress = $259;;
				}
				var $arraydecay506 = (($phonetic) & 4294967295);
				$p = $arraydecay506;
				$v = 1;
				var $260 = $control_addr;
				var $and507 = ($260) & 1;
				var $tobool508 = ((($and507)) | 0) != 0;
				if ($tobool508) {
					__label__ = 174;;
				} else {
					__label__ = 165;;
				}
				$if_end544$$land_lhs_true509$230: do {
					if (__label__ == 165) {
						var $261 = $p;
						var $262 = HEAPU8[($261)];
						var $idxprom510 = ((($262)) & 255);
						var $arrayidx511 = ((_phoneme_tab + $idxprom510 * 4) & 4294967295);
						var $263 = HEAPU32[(($arrayidx511) >> 2)];
						$ph = $263;
						var $cmp512 = ((($263)) | 0) != 0;
						if (!($cmp512)) {
							__label__ = 174;
							break $if_end544$$land_lhs_true509$230;
						}
						var $264 = $ph;
						var $type514 = (($264 + 11) & 4294967295);
						var $265 = HEAPU8[($type514)];
						var $conv515 = ((($265)) & 255);
						var $cmp516 = ((($conv515)) | 0) == 1;
						if ($cmp516) {
							__label__ = 167;;
						} else {
							__label__ = 168;;
						}
						if (__label__ == 167) {
							var $266 = $p;
							var $arrayidx518 = (($266 + 1) & 4294967295);
							var $267 = HEAPU8[($arrayidx518)];
							var $idxprom519 = ((($267)) & 255);
							var $arrayidx520 = ((_phoneme_tab + $idxprom519 * 4) & 4294967295);
							var $268 = HEAP32[(($arrayidx520) >> 2)];
							$ph = $268;;
						}
						var $269 = $tr_addr;
						var $langopts522 = (($269) & 4294967295);
						var $vowel_pause = (($langopts522 + 4) & 4294967295);
						var $270 = HEAP32[(($vowel_pause) >> 2)];
						var $and523 = ($270) & 48;
						var $tobool524 = ((($and523)) | 0) != 0;
						if (!($tobool524)) {
							__label__ = 174;
							break $if_end544$$land_lhs_true509$230;
						}
						var $271 = $ph;
						var $type526 = (($271 + 11) & 4294967295);
						var $272 = HEAPU8[($type526)];
						var $conv527 = ((($272)) & 255);
						var $cmp528 = ((($conv527)) | 0) == 2;
						if (!($cmp528)) {
							__label__ = 174;
							break $if_end544$$land_lhs_true509$230;
						}
						var $273 = $tr_addr;
						var $langopts530 = (($273) & 4294967295);
						var $vowel_pause531 = (($langopts530 + 4) & 4294967295);
						var $274 = HEAP32[(($vowel_pause531) >> 2)];
						var $and532 = ($274) & 32;
						var $tobool533 = ((($and532)) | 0) != 0;
						if ($tobool533) {
							__label__ = 171;;
						} else {
							__label__ = 173;;
						}
						$land_lhs_true534$$if_else540$238: do {
							if (__label__ == 171) {
								var $arrayidx535 = (($vowel_stress + 1) & 4294967295);
								var $275 = HEAP8[($arrayidx535)];
								var $conv536 = (tempInt = (($275)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp537 = ((($conv536)) | 0) >= 4;
								if (!($cmp537)) {
									__label__ = 173;
									break $land_lhs_true534$$if_else540$238;
								}
								var $276 = $output_addr;
								var $incdec_ptr539 = (($276 + 1) & 4294967295);
								$output_addr = $incdec_ptr539;
								HEAP8[($276)] = 11;
								__label__ = 174;
								break $if_end544$$land_lhs_true509$230;
							}
						} while (0);
						var $277 = $output_addr;
						var $incdec_ptr541 = (($277 + 1) & 4294967295);
						$output_addr = $incdec_ptr541;
						HEAP8[($277)] = 23;;
					}
				} while (0);
				var $arraydecay545 = (($phonetic) & 4294967295);
				$p = $arraydecay545;
				$post_tonic = 0;;
				$while_cond546$243: while (1) {
					var $278 = $p;
					var $incdec_ptr547 = (($278 + 1) & 4294967295);
					$p = $incdec_ptr547;
					var $279 = HEAPU8[($278)];
					$phcode = $279;
					var $conv548 = ((($279)) & 255);
					var $cmp549 = ((($conv548)) | 0) != 0;
					if (!($cmp549)) {
						__label__ = 222;
						break $while_cond546$243;
					}
					var $280 = $output_addr;
					var $281 = $max_output;
					var $cmp550 = ((($280)) >>> 0) < ((($281)) >>> 0);
					if (!($cmp550)) {
						__label__ = 222;
						break $while_cond546$243;
					}
					var $282 = $phcode;
					var $idxprom552 = ((($282)) & 255);
					var $arrayidx553 = ((_phoneme_tab + $idxprom552 * 4) & 4294967295);
					var $283 = HEAPU32[(($arrayidx553) >> 2)];
					$ph = $283;
					var $cmp554 = ((($283)) | 0) == 0;
					if ($cmp554) {
						__label__ = 175;
						continue $while_cond546$243;
					}
					var $284 = $ph;
					var $type557 = (($284 + 11) & 4294967295);
					var $285 = HEAPU8[($type557)];
					var $conv558 = ((($285)) & 255);
					var $cmp559 = ((($conv558)) | 0) == 0;
					if ($cmp559) {
						__label__ = 179;;
					} else {
						__label__ = 180;;
					}
					$if_then560$$if_else561$248: do {
						if (__label__ == 179) {
							var $286 = $tr_addr;
							var $prev_last_stress = (($286 + 8288) & 4294967295);
							HEAP32[(($prev_last_stress) >> 2)] = 0;;
						} else if (__label__ == 180) {
							var $287 = $ph;
							var $type562 = (($287 + 11) & 4294967295);
							var $288 = HEAPU8[($type562)];
							var $conv563 = ((($288)) & 255);
							var $cmp564 = ((($conv563)) | 0) == 2;
							if ($cmp564) {
								__label__ = 181;;
							} else {
								__label__ = 182;;
							}
							$land_lhs_true565$$lor_lhs_false569$251: do {
								if (__label__ == 181) {
									var $289 = $ph;
									var $phflags566 = (($289 + 4) & 4294967295);
									var $290 = HEAP32[(($phflags566) >> 2)];
									var $and567 = ($290) & 1048576;
									var $tobool568 = ((($and567)) | 0) != 0;
									if ($tobool568) {
										__label__ = 182;
										break $land_lhs_true565$$lor_lhs_false569$251;
									} else {
										__label__ = 183;
										break $land_lhs_true565$$lor_lhs_false569$251;
									}
								}
							} while (0);
							if (__label__ == 182) {
								var $291 = $p;
								var $292 = HEAPU8[($291)];
								var $conv570 = ((($292)) & 255);
								var $cmp571 = ((($conv570)) | 0) == 20;
								if (!($cmp571)) {
									__label__ = 220;
									break $if_then560$$if_else561$248;
								}
							}
							var $293 = $v;
							var $arrayidx573 = (($vowel_stress + $293) & 4294967295);
							var $294 = HEAP8[($arrayidx573)];
							var $conv574 = (tempInt = (($294)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							$v_stress = $conv574;
							var $295 = $v_stress;
							var $296 = $tr_addr;
							var $prev_last_stress575 = (($296 + 8288) & 4294967295);
							HEAP32[(($prev_last_stress575) >> 2)] = $295;
							var $297 = $v;
							var $sub576 = ((($297) - 1) & 4294967295);
							var $arrayidx577 = (($vowel_stress + $sub576) & 4294967295);
							var $298 = HEAP8[($arrayidx577)];
							var $conv578 = (tempInt = (($298)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $299 = $max_stress;
							var $cmp579 = ((($conv578)) | 0) >= ((($299)) | 0);
							if ($cmp579) {
								__label__ = 184;;
							} else {
								__label__ = 185;;
							}
							if (__label__ == 184) {
								$post_tonic = 1;;
							}
							var $300 = $v_stress;
							var $cmp582 = ((($300)) | 0) <= 1;
							if ($cmp582) {
								__label__ = 186;;
							} else {
								__label__ = 201;;
							}
							$if_then583$$if_end627$259: do {
								if (__label__ == 186) {
									var $301 = $v;
									var $cmp584 = ((($301)) | 0) > 1;
									if ($cmp584) {
										__label__ = 187;;
									} else {
										__label__ = 191;;
									}
									$land_lhs_true585$$if_else594$261: do {
										if (__label__ == 187) {
											var $302 = $max_stress;
											var $cmp586 = ((($302)) | 0) >= 4;
											if (!($cmp586)) {
												__label__ = 191;
												break $land_lhs_true585$$if_else594$261;
											}
											var $303 = $stressflags;
											var $and588 = ($303) & 4;
											var $tobool589 = ((($and588)) | 0) != 0;
											if (!($tobool589)) {
												__label__ = 191;
												break $land_lhs_true585$$if_else594$261;
											}
											var $304 = $v;
											var $305 = HEAP32[(($vowel_count) >> 2)];
											var $sub591 = ((($305) - 1) & 4294967295);
											var $cmp592 = ((($304)) | 0) == ((($sub591)) | 0);
											if (!($cmp592)) {
												__label__ = 191;
												break $land_lhs_true585$$if_else594$261;
											}
											$v_stress = 0;
											__label__ = 201;
											break $if_then583$$if_end627$259;
										}
									} while (0);
									var $306 = $stressflags;
									var $and595 = ($306) & 2;
									var $tobool596 = ((($and595)) | 0) != 0;
									if ($tobool596) {
										__label__ = 194;;
									} else {
										__label__ = 192;;
									}
									$if_then602$$lor_lhs_false597$267: do {
										if (__label__ == 192) {
											var $307 = $v;
											var $cmp598 = ((($307)) | 0) == 1;
											if ($cmp598) {
												__label__ = 194;
												break $if_then602$$lor_lhs_false597$267;
											}
											var $308 = $v;
											var $309 = HEAP32[(($vowel_count) >> 2)];
											var $sub600 = ((($309) - 1) & 4294967295);
											var $cmp601 = ((($308)) | 0) == ((($sub600)) | 0);
											if ($cmp601) {
												__label__ = 194;
												break $if_then602$$lor_lhs_false597$267;
											}
											var $310 = $v;
											var $311 = HEAP32[(($vowel_count) >> 2)];
											var $sub604 = ((($311) - 2) & 4294967295);
											var $cmp605 = ((($310)) | 0) == ((($sub604)) | 0);
											if ($cmp605) {
												__label__ = 196;;
											} else {
												__label__ = 198;;
											}
											$land_lhs_true606$$if_else612$271: do {
												if (__label__ == 196) {
													var $312 = HEAP32[(($vowel_count) >> 2)];
													var $sub607 = ((($312) - 1) & 4294967295);
													var $arrayidx608 = (($vowel_stress + $sub607) & 4294967295);
													var $313 = HEAP8[($arrayidx608)];
													var $conv609 = (tempInt = (($313)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $cmp610 = ((($conv609)) | 0) <= 1;
													if (!($cmp610)) {
														__label__ = 198;
														break $land_lhs_true606$$if_else612$271;
													}
													$v_stress = 1;
													__label__ = 201;
													break $if_then583$$if_end627$259;
												}
											} while (0);
											var $314 = $v;
											var $sub613 = ((($314) - 1) & 4294967295);
											var $arrayidx614 = (($vowel_stress + $sub613) & 4294967295);
											var $315 = HEAP8[($arrayidx614)];
											var $conv615 = (tempInt = (($315)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp616 = ((($conv615)) | 0) < 0;
											if ($cmp616) {
												__label__ = 200;;
											} else {
												__label__ = 199;;
											}
											if (__label__ == 199) {
												var $316 = $stressflags;
												var $and618 = ($316) & 65536;
												var $cmp619 = ((($and618)) | 0) == 0;
												if (!($cmp619)) {
													__label__ = 201;
													break $if_then583$$if_end627$259;
												}
											}
											$v_stress = 0;
											var $317 = $v_stress;
											var $conv621 = ((($317)) & 255);
											var $318 = $v;
											var $arrayidx622 = (($vowel_stress + $318) & 4294967295);
											HEAP8[($arrayidx622)] = $conv621;
											__label__ = 201;
											break $if_then583$$if_end627$259;
										}
									} while (0);
									$v_stress = 1;;
								}
							} while (0);
							var $319 = $v_stress;
							var $cmp628 = ((($319)) | 0) == 0;
							var $320 = $v_stress;
							var $cmp630 = ((($320)) | 0) > 1;
							var $or_cond2 = ($cmp628) | ($cmp630);
							if ($or_cond2) {
								__label__ = 202;;
							} else {
								__label__ = 203;;
							}
							if (__label__ == 202) {
								var $321 = $v_stress;
								var $arrayidx632 = ((__ZL15stress_phonemes + $321) & 4294967295);
								var $322 = HEAP8[($arrayidx632)];
								var $323 = $output_addr;
								var $incdec_ptr633 = (($323 + 1) & 4294967295);
								$output_addr = $incdec_ptr633;
								HEAP8[($323)] = $322;;
							}
							var $324 = $v;
							var $arrayidx635 = (($vowel_stress + $324) & 4294967295);
							var $325 = HEAP8[($arrayidx635)];
							var $conv636 = (tempInt = (($325)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $326 = $max_stress;
							var $cmp637 = ((($conv636)) | 0) > ((($326)) | 0);
							if ($cmp637) {
								__label__ = 204;;
							} else {
								__label__ = 205;;
							}
							if (__label__ == 204) {
								var $327 = $v;
								var $arrayidx639 = (($vowel_stress + $327) & 4294967295);
								var $328 = HEAP8[($arrayidx639)];
								var $conv640 = (tempInt = (($328)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								$max_stress = $conv640;;
							}
							var $329 = $p;
							var $330 = HEAPU8[($329)];
							var $conv642 = ((($330)) & 255);
							var $cmp643 = ((($conv642)) | 0) == 12;
							if ($cmp643) {
								__label__ = 206;;
							} else {
								__label__ = 214;;
							}
							$land_lhs_true644$$if_end665$286: do {
								if (__label__ == 206) {
									var $331 = $tr_addr;
									var $langopts645 = (($331) & 4294967295);
									var $param = (($langopts645 + 24) & 4294967295);
									var $arrayidx646 = (($param + 8) & 4294967295);
									var $332 = HEAP32[(($arrayidx646) >> 2)];
									$opt_length = $332;
									var $and647 = ($332) & 1;
									var $tobool648 = ((($and647)) | 0) != 0;
									if (!($tobool648)) {
										__label__ = 214;
										break $land_lhs_true644$$if_end665$286;
									}
									$shorten = 0;
									var $333 = $opt_length;
									var $and650 = ($333) & 16;
									var $tobool651 = ((($and650)) | 0) != 0;
									if ($tobool651) {
										__label__ = 208;;
									} else {
										__label__ = 210;;
									}
									$if_then652$$if_else656$289: do {
										if (__label__ == 208) {
											var $334 = $v;
											var $335 = $max_stress_posn;
											var $cmp653 = ((($334)) | 0) != ((($335)) | 0);
											if (!($cmp653)) {
												__label__ = 212;
												break $if_then652$$if_else656$289;
											}
											$shorten = 1;
											__label__ = 213;
											break $if_then652$$if_else656$289;
										} else if (__label__ == 210) {
											var $336 = $v_stress;
											var $cmp657 = ((($336)) | 0) < 4;
											if (!($cmp657)) {
												__label__ = 212;
												break $if_then652$$if_else656$289;
											}
											$shorten = 1;
											__label__ = 213;
											break $if_then652$$if_else656$289;
										}
									} while (0);
									if (__label__ == 212) {
										var $_pr11 = $shorten;
										var $tobool661 = ((($_pr11)) | 0) != 0;
										if (!($tobool661)) {
											__label__ = 214;
											break $land_lhs_true644$$if_end665$286;
										}
									}
									var $337 = $p;
									var $incdec_ptr663 = (($337 + 1) & 4294967295);
									$p = $incdec_ptr663;;
								}
							} while (0);
							var $338 = $v_stress;
							var $cmp666 = ((($338)) | 0) >= 4;
							if ($cmp666) {
								__label__ = 215;;
							} else {
								__label__ = 219;;
							}
							$land_lhs_true667$$if_end682$298: do {
								if (__label__ == 215) {
									var $339 = $tr_addr;
									var $langopts668 = (($339) & 4294967295);
									var $param669 = (($langopts668 + 24) & 4294967295);
									var $arrayidx670 = (($param669 + 8) & 4294967295);
									var $340 = HEAP32[(($arrayidx670) >> 2)];
									var $cmp671 = ((($340)) | 0) == 2;
									if (!($cmp671)) {
										__label__ = 219;
										break $land_lhs_true667$$if_end682$298;
									}
									var $341 = $v;
									var $342 = HEAP32[(($vowel_count) >> 2)];
									var $sub673 = ((($342) - 2) & 4294967295);
									var $cmp674 = ((($341)) | 0) == ((($sub673)) | 0);
									if (!($cmp674)) {
										__label__ = 219;
										break $land_lhs_true667$$if_end682$298;
									}
									var $343 = $v;
									var $arrayidx676 = (($syllable_weight + $343) & 4294967295);
									var $344 = HEAP8[($arrayidx676)];
									var $conv677 = (tempInt = (($344)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp678 = ((($conv677)) | 0) == 0;
									if (!($cmp678)) {
										__label__ = 219;
										break $land_lhs_true667$$if_end682$298;
									}
									var $345 = $phcode;
									var $346 = $output_addr;
									var $incdec_ptr680 = (($346 + 1) & 4294967295);
									$output_addr = $incdec_ptr680;
									HEAP8[($346)] = $345;
									$phcode = 12;;
								}
							} while (0);
							var $347 = $v;
							var $inc683 = ((($347) + 1) & 4294967295);
							$v = $inc683;;
						}
					} while (0);
					var $348 = $phcode;
					var $conv686 = ((($348)) & 255);
					var $cmp687 = ((($conv686)) | 0) != 1;
					if (!($cmp687)) {
						__label__ = 175;
						continue $while_cond546$243;
					}
					var $349 = $phcode;
					var $350 = $output_addr;
					var $incdec_ptr689 = (($350 + 1) & 4294967295);
					$output_addr = $incdec_ptr689;
					HEAP8[($350)] = $349;
					__label__ = 175;
					continue $while_cond546$243;
				}
				var $351 = $output_addr;
				var $incdec_ptr692 = (($351 + 1) & 4294967295);
				$output_addr = $incdec_ptr692;
				HEAP8[($351)] = 0;;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z14AppendPhonemesP10TranslatorPciPKc($tr, $string, $size, $ph) {;
			var __label__;
			var $tr_addr;
			var $string_addr;
			var $size_addr;
			var $ph_addr;
			var $p;
			var $c;
			var $unstress_mark;
			var $length;
			$tr_addr = $tr;
			$string_addr = $string;
			$size_addr = $size;
			$ph_addr = $ph;
			var $0 = $ph_addr;
			var $call = _strlen($0);
			var $1 = $string_addr;
			var $call1 = _strlen($1);
			var $add = ((($call1) + ($call)) & 4294967295);
			$length = $add;
			var $2 = $length;
			var $3 = $size_addr;
			var $cmp = ((($2)) | 0) >= ((($3)) | 0);
			if ($cmp) {
				__label__ = 14;;
			} else {
				__label__ = 1;;
			}
			$if_end34$$if_end$2: do {
				if (__label__ == 1) {
					$unstress_mark = 0;
					var $4 = $ph_addr;
					$p = $4;
					var $5 = $p;
					var $incdec_ptr1 = (($5 + 1) & 4294967295);
					$p = $incdec_ptr1;
					var $6 = HEAPU8[($5)];
					$c = $6;
					var $conv2 = ((($6)) & 255);
					var $cmp23 = ((($conv2)) | 0) != 0;
					if ($cmp23) {
						__label__ = 2;;
					} else {
						__label__ = 12;;
					}
					$while_body$$while_end$4: do {
						if (__label__ == 2) {
							$while_body$5: while (1) {
								var $7 = $c;
								var $conv3 = ((($7)) & 255);
								var $8 = HEAP32[((_n_phoneme_tab) >> 2)];
								var $cmp4 = ((($conv3)) | 0) >= ((($8)) | 0);
								if ($cmp4) {
									__label__ = 3;;
								} else {
									__label__ = 4;;
								}
								$while_cond_backedge$$if_end6$7: do {
									if (__label__ == 4) {
										var $11 = $c;
										var $idxprom = ((($11)) & 255);
										var $arrayidx = ((_phoneme_tab + $idxprom * 4) & 4294967295);
										var $12 = HEAP32[(($arrayidx) >> 2)];
										var $type = (($12 + 11) & 4294967295);
										var $13 = HEAPU8[($type)];
										var $conv7 = ((($13)) & 255);
										var $cmp8 = ((($conv7)) | 0) == 1;
										var $14 = $c;
										var $idxprom10 = ((($14)) & 255);
										var $arrayidx11 = ((_phoneme_tab + $idxprom10 * 4) & 4294967295);
										var $15 = HEAP32[(($arrayidx11) >> 2)];
										if ($cmp8) {
											__label__ = 5;;
										} else {
											__label__ = 7;;
										}
										if (__label__ == 5) {
											var $std_length = (($15 + 14) & 4294967295);
											var $16 = HEAPU8[($std_length)];
											var $conv12 = ((($16)) & 255);
											var $cmp13 = ((($conv12)) | 0) < 4;
											if (!($cmp13)) {
												__label__ = 3;
												break $while_cond_backedge$$if_end6$7;
											}
											$unstress_mark = 1;;
										} else if (__label__ == 7) {
											var $type18 = (($15 + 11) & 4294967295);
											var $17 = HEAPU8[($type18)];
											var $conv19 = ((($17)) & 255);
											var $cmp20 = ((($conv19)) | 0) == 2;
											if (!($cmp20)) {
												__label__ = 3;
												break $while_cond_backedge$$if_end6$7;
											}
											var $18 = $c;
											var $idxprom22 = ((($18)) & 255);
											var $arrayidx23 = ((_phoneme_tab + $idxprom22 * 4) & 4294967295);
											var $19 = HEAP32[(($arrayidx23) >> 2)];
											var $phflags = (($19 + 4) & 4294967295);
											var $20 = HEAP32[(($phflags) >> 2)];
											var $and = ($20) & 2;
											var $cmp24 = ((($and)) | 0) == 0;
											if ($cmp24) {
												__label__ = 9;;
											} else {
												__label__ = 11;;
											}
											$land_lhs_true$$if_end27$14: do {
												if (__label__ == 9) {
													var $21 = $unstress_mark;
													var $cmp25 = ((($21)) | 0) == 0;
													if (!($cmp25)) {
														__label__ = 11;
														break $land_lhs_true$$if_end27$14;
													}
													var $22 = $tr_addr;
													var $word_stressed_count = (($22 + 8300) & 4294967295);
													var $23 = HEAP32[(($word_stressed_count) >> 2)];
													var $inc = ((($23) + 1) & 4294967295);
													HEAP32[(($word_stressed_count) >> 2)] = $inc;;
												}
											} while (0);
											$unstress_mark = 0;
											var $24 = $tr_addr;
											var $word_vowel_count = (($24 + 8296) & 4294967295);
											var $25 = HEAP32[(($word_vowel_count) >> 2)];
											var $inc28 = ((($25) + 1) & 4294967295);
											HEAP32[(($word_vowel_count) >> 2)] = $inc28;;
										}
									}
								} while (0);
								var $9 = $p;
								var $incdec_ptr = (($9 + 1) & 4294967295);
								$p = $incdec_ptr;
								var $10 = HEAPU8[($9)];
								$c = $10;
								var $conv = ((($10)) & 255);
								var $cmp2 = ((($conv)) | 0) != 0;
								if ($cmp2) {
									__label__ = 2;
									continue $while_body$5;
								} else {
									__label__ = 12;
									break $while_body$$while_end$4;
								}
							}
						}
					} while (0);
					var $26 = $string_addr;
					var $cmp31 = ((($26)) | 0) != 0;
					if (!($cmp31)) {
						__label__ = 14;
						break $if_end34$$if_end$2;
					}
					var $27 = $string_addr;
					var $28 = $ph_addr;
					var $call33 = _strcat($27, $28);;
				}
			} while (0);;
			return;
			return;
		}

		function __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($tr, $p_start, $phonemes, $ph_size, $end_phonemes, $word_flags, $dict_flags) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 416;
			_memset(__stackBase__, 0, 416);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $p_start_addr;
			var $phonemes_addr;
			var $ph_size_addr;
			var $end_phonemes_addr;
			var $word_flags_addr;
			var $dict_flags_addr;
			var $c;
			var $c2;
			var $c12;
			var $c123;
			var $wc = __stackBase__;
			var $wc_prev;
			var $wc_bytes;
			var $p2 = __stackBase__ + 4;
			var $found;
			var $g;
			var $g1;
			var $n;
			var $letter = __stackBase__ + 8;
			var $any_alpha;
			var $ix;
			var $digit_count;
			var $p = __stackBase__ + 12;
			var $dict_flags0;
			var $match1 = __stackBase__ + 16;
			var $match2 = __stackBase__ + 32;
			var $ph_buf = __stackBase__ + 48;
			var $word_copy = __stackBase__ + 88;
			var $wordbuf = __stackBase__ + 248;
			var $ix14;
			var $string = __stackBase__ + 368;
			var $buf = __stackBase__ + 376;
			$tr_addr = $tr;
			$p_start_addr = $p_start;
			$phonemes_addr = $phonemes;
			$ph_size_addr = $ph_size;
			$end_phonemes_addr = $end_phonemes;
			$word_flags_addr = $word_flags;
			$dict_flags_addr = $dict_flags;
			HEAP32[(($wc) >> 2)] = 0;
			$any_alpha = 0;
			$digit_count = 0;
			$dict_flags0 = 0;
			var $0 = $tr_addr;
			var $data_dictrules = (($0 + 1048) & 4294967295);
			var $1 = HEAP32[(($data_dictrules) >> 2)];
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					$retval = 0;;
				} else if (__label__ == 2) {
					var $2 = $dict_flags_addr;
					var $cmp1 = ((($2)) | 0) != 0;
					if ($cmp1) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $3 = $dict_flags_addr;
						var $arrayidx = (($3) & 4294967295);
						var $4 = HEAP32[(($arrayidx) >> 2)];
						$dict_flags0 = $4;;
					}
					$ix = 0;
					__lastLabel__ = 4;;
					$for_cond$8: while (1) {
						var $5 = __lastLabel__ == 5 ? $_pr : (0);
						var $cmp4 = ((($5)) | 0) < 159;
						if (!($cmp4)) {
							__label__ = 8;
							break $for_cond$8;
						}
						var $6 = $ix;
						var $7 = $p_start_addr;
						var $arrayidx5 = (($7 + $6) & 4294967295);
						var $8 = HEAP8[($arrayidx5)];
						$c = $8;
						var $9 = $c;
						var $10 = $ix;
						var $inc = ((($10) + 1) & 4294967295);
						$ix = $inc;
						var $arrayidx6 = (($word_copy + $10) & 4294967295);
						HEAP8[($arrayidx6)] = $9;
						var $11 = $c;
						var $conv = ((($11)) & 255);
						var $cmp7 = ((($conv)) | 0) == 0;
						if ($cmp7) {
							__label__ = 8;
							break $for_cond$8;
						}
						var $_pr = $ix;
						__lastLabel__ = 5;
						__label__ = 6;
						continue $for_cond$8;
					}
					var $12 = $ix;
					var $arrayidx10 = (($word_copy + $12) & 4294967295);
					HEAP8[($arrayidx10)] = 0;
					var $13 = HEAP32[((_option_phonemes) >> 2)];
					var $cmp11 = ((($13)) | 0) == 2;
					if ($cmp11) {
						__label__ = 9;;
					} else {
						__label__ = 17;;
					}
					$land_lhs_true$$if_end31$13: do {
						if (__label__ == 9) {
							var $14 = $word_flags_addr;
							var $and = ($14) & 268435456;
							var $cmp12 = ((($and)) | 0) == 0;
							if (!($cmp12)) {
								__label__ = 17;
								break $land_lhs_true$$if_end31$13;
							}
							$ix14 = 0;;
							while (1) {
								var $15 = $ix14;
								var $16 = $p_start_addr;
								var $arrayidx16 = (($16 + $15) & 4294967295);
								var $17 = HEAPU8[($arrayidx16)];
								$c = $17;
								var $conv17 = ((($17)) & 255);
								var $cmp18 = ((($conv17)) | 0) != 32;
								if (!($cmp18)) {
									__label__ = 14;
									break;
								}
								var $18 = $c;
								var $conv19 = ((($18)) & 255);
								var $cmp20 = ((($conv19)) | 0) != 0;
								if (!($cmp20)) {
									__label__ = 14;
									break;
								}
								var $19 = $c;
								var $20 = $ix14;
								var $arrayidx22 = (($wordbuf + $20) & 4294967295);
								HEAP8[($arrayidx22)] = $19;
								var $21 = $ix14;
								var $inc23 = ((($21) + 1) & 4294967295);
								$ix14 = $inc23;
								__label__ = 11;
								continue;
							}
							var $22 = $ix14;
							var $arrayidx25 = (($wordbuf + $22) & 4294967295);
							HEAP8[($arrayidx25)] = 0;
							var $23 = $word_flags_addr;
							var $and26 = ($23) & -2147483648;
							var $tobool = ((($and26)) | 0) != 0;
							var $24 = HEAP32[((_f_trans) >> 2)];
							var $arraydecay = (($wordbuf) & 4294967295);
							if ($tobool) {
								__label__ = 15;;
							} else {
								__label__ = 16;;
							}
							if (__label__ == 15) {
								var $call = _fprintf($24, ((__str10126) & 4294967295), allocate([$arraydecay, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
							} else if (__label__ == 16) {
								var $call29 = _fprintf($24, ((__str11127) & 4294967295), allocate([$arraydecay, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
							}
						}
					} while (0);
					var $25 = $p_start_addr;
					HEAP32[(($p) >> 2)] = $25;
					var $26 = $tr_addr;
					var $word_vowel_count = (($26 + 8296) & 4294967295);
					HEAP32[(($word_vowel_count) >> 2)] = 0;
					var $27 = $tr_addr;
					var $word_stressed_count = (($27 + 8300) & 4294967295);
					HEAP32[(($word_stressed_count) >> 2)] = 0;
					var $28 = $end_phonemes_addr;
					var $cmp32 = ((($28)) | 0) != 0;
					if ($cmp32) {
						__label__ = 18;;
					} else {
						__label__ = 19;;
					}
					if (__label__ == 18) {
						var $29 = $end_phonemes_addr;
						var $arrayidx34 = (($29) & 4294967295);
						HEAP8[($arrayidx34)] = 0;;
					}
					var $arrayidx57 = (($string) & 4294967295);
					var $arrayidx58 = (($string + 1) & 4294967295);
					var $arraydecay60 = (($string) & 4294967295);
					var $arraydecay61 = (($buf) & 4294967295);
					var $arraydecay66 = (($buf) & 4294967295);
					var $arraydecay69 = (($buf) & 4294967295);
					var $phonemes282 = (($match1 + 4) & 4294967295);
					var $phonemes285 = (($match1 + 4) & 4294967295);
					var $points287 = (($match1) & 4294967295);
					var $phonemes295 = (($match1 + 4) & 4294967295);
					var $end_type306 = (($match1 + 8) & 4294967295);
					var $end_type313 = (($match1 + 8) & 4294967295);
					var $del_fwd = (($match1 + 12) & 4294967295);
					var $del_fwd342 = (($match1 + 12) & 4294967295);
					var $phonemes344 = (($match1 + 4) & 4294967295);
					var $points = (($match2) & 4294967295);
					var $points107 = (($match2) & 4294967295);
					var $points112 = (($match2) & 4294967295);
					var $points113 = (($match1) & 4294967295);
					var $30 = $match1;
					var $31 = $match2;
					var $points241 = (($match1) & 4294967295);
					var $arraydecay266 = (($ph_buf) & 4294967295);
					var $arrayidx267 = (($ph_buf) & 4294967295);
					var $arraydecay270 = (($ph_buf) & 4294967295);
					var $phonemes271 = (($match1 + 4) & 4294967295);
					var $points272 = (($match1) & 4294967295);
					var $points135 = (($match1) & 4294967295);
					var $arraydecay230 = (($ph_buf) & 4294967295);
					var $arraydecay232 = (($ph_buf) & 4294967295);
					var $phonemes233 = (($match1 + 4) & 4294967295);
					var $points234 = (($match1) & 4294967295);;
					$while_cond$28: while (1) {
						var $32 = HEAP32[(($p) >> 2)];
						var $33 = HEAPU8[($32)];
						$c = $33;
						var $conv36 = ((($33)) & 255);
						var $cmp37 = ((($conv36)) | 0) != 32;
						if (!($cmp37)) {
							__label__ = 104;
							break $while_cond$28;
						}
						var $34 = $c;
						var $conv39 = ((($34)) & 255);
						var $cmp40 = ((($conv39)) | 0) != 0;
						if (!($cmp40)) {
							__label__ = 104;
							break $while_cond$28;
						}
						var $35 = HEAP32[(($wc) >> 2)];
						$wc_prev = $35;
						var $36 = HEAP32[(($p) >> 2)];
						var $call42 = __Z7utf8_inPiPKc($wc, $36);
						$wc_bytes = $call42;
						var $37 = HEAP32[(($wc) >> 2)];
						var $call43 = __Z7IsAlphaj($37);
						var $tobool44 = ((($call43)) | 0) != 0;
						if ($tobool44) {
							__label__ = 23;;
						} else {
							__label__ = 24;;
						}
						if (__label__ == 23) {
							var $38 = $any_alpha;
							var $inc46 = ((($38) + 1) & 4294967295);
							$any_alpha = $inc46;;
						}
						var $39 = $c;
						var $idxprom = ((($39)) & 255);
						var $40 = $tr_addr;
						var $groups2_count = (($40 + 7756) & 4294967295);
						var $arrayidx48 = (($groups2_count + $idxprom) & 4294967295);
						var $41 = HEAPU8[($arrayidx48)];
						var $conv49 = ((($41)) & 255);
						$n = $conv49;
						var $42 = HEAP32[(($wc) >> 2)];
						var $call50 = __Z7IsDigitj($42);
						var $tobool51 = ((($call50)) | 0) != 0;
						if ($tobool51) {
							__label__ = 25;;
						} else {
							__label__ = 30;;
						}
						$land_lhs_true52$$if_else70$35: do {
							if (__label__ == 25) {
								var $43 = $tr_addr;
								var $langopts = (($43) & 4294967295);
								var $tone_numbers = (($langopts + 250) & 4294967295);
								var $44 = HEAP8[($tone_numbers)];
								var $conv53 = (tempInt = (($44)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp54 = ((($conv53)) | 0) == 0;
								if ($cmp54) {
									__label__ = 27;;
								} else {
									__label__ = 26;;
								}
								if (__label__ == 26) {
									var $45 = $any_alpha;
									var $tobool55 = ((($45)) | 0) != 0;
									if ($tobool55) {
										__label__ = 30;
										break $land_lhs_true52$$if_else70$35;
									}
								}
								HEAP8[($arrayidx57)] = 95;
								var $46 = HEAP32[(($p) >> 2)];
								var $47 = $wc_bytes;
								var $src$, $dest$, $stop$, $stop4$, $fast$;
								$src$ = $46;
								$dest$ = $arrayidx58;
								$stop$ = $src$ + $47;
								if (($dest$ % 4) == ($src$ % 4) && $47 > 8) {
									while ($src$ % 4 !== 0 && $src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									}
									$src$ >>= 2;
									$dest$ >>= 2;
									$stop4$ = $stop$ >> 2;
									while ($src$ < $stop4$) {;;;
										HEAP32[$dest$++] = HEAP32[$src$++];
									}
									$src$ <<= 2;
									$dest$ <<= 2;
								}
								while ($src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								};
								var $48 = $wc_bytes;
								var $add = ((($48) + 1) & 4294967295);
								var $arrayidx59 = (($string + $add) & 4294967295);
								HEAP8[($arrayidx59)] = 0;
								var $49 = $tr_addr;
								var $call62 = __Z6LookupP10TranslatorPKcPc($49, $arraydecay60, $arraydecay61);
								var $50 = $digit_count;
								var $inc63 = ((($50) + 1) & 4294967295);
								$digit_count = $inc63;
								var $cmp64 = ((($inc63)) >>> 0) >= 2;
								if ($cmp64) {
									__label__ = 28;;
								} else {
									__label__ = 29;;
								}
								if (__label__ == 28) {
									var $strlen = _strlen($arraydecay66);
									var $endptr = (($arraydecay66 + $strlen) & 4294967295);
									var $src$, $dest$, $stop$, $stop4$, $fast$;
									$src$ = ((__ZZ14TranslateRulesP10TranslatorPcS1_iS1_iPjE9str_pause) & 4294967295);
									$dest$ = $endptr;
									$stop$ = $src$ + 2;
									if (($dest$ % 4) == ($src$ % 4) && 2 > 8) {
										while ($src$ % 4 !== 0 && $src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										}
										$src$ >>= 2;
										$dest$ >>= 2;
										$stop4$ = $stop$ >> 2;
										while ($src$ < $stop4$) {;;;
											HEAP32[$dest$++] = HEAP32[$src$++];
										}
										$src$ <<= 2;
										$dest$ <<= 2;
									}
									while ($src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									};
									$digit_count = 0;;
								}
								var $51 = $tr_addr;
								var $52 = $phonemes_addr;
								var $53 = $ph_size_addr;
								__Z14AppendPhonemesP10TranslatorPciPKc($51, $52, $53, $arraydecay69);
								var $54 = $wc_bytes;
								var $55 = HEAP32[(($p) >> 2)];
								var $add_ptr = (($55 + $54) & 4294967295);
								HEAP32[(($p) >> 2)] = $add_ptr;
								__label__ = 20;
								continue $while_cond$28;
							}
						} while (0);
						$digit_count = 0;
						$found = 0;
						var $56 = HEAP32[(($wc) >> 2)];
						var $57 = $tr_addr;
						var $letter_bits_offset = (($57 + 964) & 4294967295);
						var $58 = HEAP32[(($letter_bits_offset) >> 2)];
						var $sub = ((($56) - ($58)) & 4294967295);
						$ix = $sub;
						var $cmp71 = ((($sub)) | 0) >= 0;
						if ($cmp71) {
							__label__ = 31;;
						} else {
							__label__ = 34;;
						}
						$land_lhs_true72$$if_end81$44: do {
							if (__label__ == 31) {
								var $59 = $ix;
								var $cmp73 = ((($59)) | 0) < 128;
								if (!($cmp73)) {
									__label__ = 34;
									break $land_lhs_true72$$if_end81$44;
								}
								var $60 = $ix;
								var $61 = $tr_addr;
								var $groups3 = (($61 + 6280) & 4294967295);
								var $arrayidx75 = (($groups3 + $60 * 4) & 4294967295);
								var $62 = HEAP32[(($arrayidx75) >> 2)];
								var $cmp76 = ((($62)) | 0) != 0;
								if (!($cmp76)) {
									__label__ = 34;
									break $land_lhs_true72$$if_end81$44;
								}
								var $63 = $tr_addr;
								var $64 = $p_start_addr;
								var $65 = $wc_bytes;
								var $66 = $ix;
								var $67 = $tr_addr;
								var $groups378 = (($67 + 6280) & 4294967295);
								var $arrayidx79 = (($groups378 + $66 * 4) & 4294967295);
								var $68 = HEAP32[(($arrayidx79) >> 2)];
								var $69 = $word_flags_addr;
								var $70 = $dict_flags0;
								__ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($63, $p, $64, $65, $68, $match1, $69, $70);
								$found = 1;
								__label__ = 85;
								break $land_lhs_true72$$if_end81$44;
							}
						} while (0);
						$if_end281$$if_end81$48: do {
							if (__label__ == 34) {
								var $_pr3 = $found;
								var $tobool82 = ((($_pr3)) | 0) != 0;
								if ($tobool82) {
									__label__ = 85;
									break $if_end281$$if_end81$48;
								}
								var $71 = $n;
								var $cmp84 = ((($71)) | 0) > 0;
								if ($cmp84) {
									__label__ = 36;;
								} else {
									__label__ = 43;;
								}
								$if_then85$$if_end121$51: do {
									if (__label__ == 36) {
										var $72 = HEAP32[(($p) >> 2)];
										var $arrayidx86 = (($72 + 1) & 4294967295);
										var $73 = HEAP8[($arrayidx86)];
										$c2 = $73;
										var $74 = $c;
										var $conv87 = ((($74)) & 255);
										var $75 = $c2;
										var $conv88 = ((($75)) & 255);
										var $shl = ((($conv88) * 256) & 4294967295);
										var $add89 = ((($shl) + ($conv87)) & 4294967295);
										$c12 = $add89;
										var $76 = $c12;
										var $77 = HEAP32[(($p) >> 2)];
										var $arrayidx90 = (($77 + 2) & 4294967295);
										var $78 = HEAP8[($arrayidx90)];
										var $conv91 = (tempInt = (($78)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $shl92 = ((($conv91) * 65536) & 4294967295);
										var $add93 = ((($shl92) + ($76)) & 4294967295);
										$c123 = $add93;
										var $79 = $c;
										var $idxprom94 = ((($79)) & 255);
										var $80 = $tr_addr;
										var $groups2_start = (($80 + 8012) & 4294967295);
										var $arrayidx95 = (($groups2_start + $idxprom94) & 4294967295);
										var $81 = HEAPU8[($arrayidx95)];
										var $conv96 = ((($81)) & 255);
										$g1 = $conv96;
										var $82 = $g1;
										$g = $82;
										var $83 = $g;
										var $84 = $g1;
										var $85 = $n;
										var $add989 = ((($85) + ($84)) & 4294967295);
										var $cmp9910 = ((($83)) | 0) < ((($add989)) | 0);
										if (!($cmp9910)) {
											__label__ = 43;
											break $if_then85$$if_end121$51;
										}
										$for_body100$53: while (1) {
											var $86 = $g;
											var $87 = $tr_addr;
											var $groups2_name = (($87 + 7272) & 4294967295);
											var $arrayidx101 = (($groups2_name + $86 * 4) & 4294967295);
											var $88 = HEAP32[(($arrayidx101) >> 2)];
											var $89 = $c12;
											var $cmp102 = ((($88)) | 0) == ((($89)) | 0);
											if ($cmp102) {
												__label__ = 38;;
											} else {
												__label__ = 42;;
											}
											$if_then103$$for_inc118$55: do {
												if (__label__ == 38) {
													$found = 1;
													var $90 = HEAP32[(($p) >> 2)];
													HEAP32[(($p2) >> 2)] = $90;
													var $91 = $tr_addr;
													var $92 = $p_start_addr;
													var $93 = $g;
													var $94 = $tr_addr;
													var $groups2 = (($94 + 6792) & 4294967295);
													var $arrayidx104 = (($groups2 + $93 * 4) & 4294967295);
													var $95 = HEAP32[(($arrayidx104) >> 2)];
													var $96 = $word_flags_addr;
													var $97 = $dict_flags0;
													__ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($91, $p2, $92, 2, $95, $match2, $96, $97);
													var $98 = HEAP32[(($points) >> 2)];
													var $cmp105 = ((($98)) | 0) > 0;
													if ($cmp105) {
														__label__ = 39;;
													} else {
														__label__ = 40;;
													}
													if (__label__ == 39) {
														var $99 = HEAP32[(($points107) >> 2)];
														var $add108 = ((($99) + 35) & 4294967295);
														HEAP32[(($points107) >> 2)] = $add108;;
													}
													var $100 = $tr_addr;
													var $101 = $p_start_addr;
													var $102 = $c;
													var $idxprom110 = ((($102)) & 255);
													var $103 = $tr_addr;
													var $groups1 = (($103 + 5256) & 4294967295);
													var $arrayidx111 = (($groups1 + $idxprom110 * 4) & 4294967295);
													var $104 = HEAP32[(($arrayidx111) >> 2)];
													var $105 = $word_flags_addr;
													var $106 = $dict_flags0;
													__ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($100, $p, $101, 1, $104, $match1, $105, $106);
													var $107 = HEAP32[(($points112) >> 2)];
													var $108 = HEAP32[(($points113) >> 2)];
													var $cmp114 = ((($107)) | 0) >= ((($108)) | 0);
													if (!($cmp114)) {
														__label__ = 42;
														break $if_then103$$for_inc118$55;
													}
													var $src$, $dest$, $stop$, $stop4$, $fast$;
													$src$ = $31;
													$dest$ = $30;
													$stop$ = $src$ + 16;
													if (($dest$ % 4) == ($src$ % 4) && 16 > 8) {
														while ($src$ % 4 !== 0 && $src$ < $stop$) {;
															HEAP8[$dest$++] = HEAP8[$src$++];
														}
														$src$ >>= 2;
														$dest$ >>= 2;
														$stop4$ = $stop$ >> 2;
														while ($src$ < $stop4$) {;;;
															HEAP32[$dest$++] = HEAP32[$src$++];
														}
														$src$ <<= 2;
														$dest$ <<= 2;
													}
													while ($src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													};
													var $109 = HEAP32[(($p2) >> 2)];
													HEAP32[(($p) >> 2)] = $109;;
												}
											} while (0);
											var $110 = $g;
											var $inc119 = ((($110) + 1) & 4294967295);
											$g = $inc119;
											var $111 = $g;
											var $112 = $g1;
											var $113 = $n;
											var $add98 = ((($113) + ($112)) & 4294967295);
											var $cmp99 = ((($111)) | 0) < ((($add98)) | 0);
											if ($cmp99) {
												__label__ = 37;
												continue $for_body100$53;
											} else {
												__label__ = 43;
												break $if_then85$$if_end121$51;
											}
										}
									}
								} while (0);
								var $_pr5_pr = $found;
								var $tobool122 = ((($_pr5_pr)) | 0) != 0;
								if ($tobool122) {
									__label__ = 85;
									break $if_end281$$if_end81$48;
								}
								var $114 = $c;
								var $idxprom124 = ((($114)) & 255);
								var $115 = $tr_addr;
								var $groups1125 = (($115 + 5256) & 4294967295);
								var $arrayidx126 = (($groups1125 + $idxprom124 * 4) & 4294967295);
								var $116 = HEAP32[(($arrayidx126) >> 2)];
								var $cmp127 = ((($116)) | 0) != 0;
								var $117 = $tr_addr;
								var $118 = $p_start_addr;
								if ($cmp127) {
									__label__ = 45;;
								} else {
									__label__ = 46;;
								}
								$if_then128$$if_else132$64: do {
									if (__label__ == 45) {
										var $119 = $c;
										var $idxprom129 = ((($119)) & 255);
										var $120 = $tr_addr;
										var $groups1130 = (($120 + 5256) & 4294967295);
										var $arrayidx131 = (($groups1130 + $idxprom129 * 4) & 4294967295);
										var $121 = HEAP32[(($arrayidx131) >> 2)];
										var $122 = $word_flags_addr;
										var $123 = $dict_flags0;
										__ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($117, $p, $118, 1, $121, $match1, $122, $123);
										__label__ = 74;
										break $if_then128$$if_else132$64;
									} else if (__label__ == 46) {
										var $124 = $tr_addr;
										var $groups1133 = (($124 + 5256) & 4294967295);
										var $arrayidx134 = (($groups1133) & 4294967295);
										var $125 = HEAP32[(($arrayidx134) >> 2)];
										var $126 = $word_flags_addr;
										var $127 = $dict_flags0;
										__ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($117, $p, $118, 0, $125, $match1, $126, $127);
										var $128 = HEAP32[(($points135) >> 2)];
										var $cmp136 = ((($128)) | 0) == 0;
										if (!($cmp136)) {
											__label__ = 84;
											break $if_then128$$if_else132$64;
										}
										var $129 = HEAP32[((_option_sayas) >> 2)];
										var $and138 = ($129) & 16;
										var $cmp139 = ((($and138)) | 0) == 0;
										if (!($cmp139)) {
											__label__ = 74;
											break $if_then128$$if_else132$64;
										}
										var $130 = HEAP32[(($p) >> 2)];
										var $add_ptr141 = (($130 + -1) & 4294967295);
										var $call142 = __Z7utf8_inPiPKc($letter, $add_ptr141);
										var $sub143 = ((($call142) - 1) & 4294967295);
										$n = $sub143;
										var $131 = $tr_addr;
										var $letter_bits_offset144 = (($131 + 964) & 4294967295);
										var $132 = HEAP32[(($letter_bits_offset144) >> 2)];
										var $cmp145 = ((($132)) | 0) > 0;
										if ($cmp145) {
											__label__ = 49;;
										} else {
											__label__ = 52;;
										}
										$if_then146$$if_end155thread_pre_split$69: do {
											if (__label__ == 49) {
												var $133 = HEAP32[(($letter) >> 2)];
												var $cmp147 = ((($133)) | 0) <= 577;
												if ($cmp147) {
													__lastLabel__ = 49;;
												} else {
													__lastLabel__ = 49;
													__label__ = 53;
													break $if_then146$$if_end155thread_pre_split$69;
												}
												var $134 = HEAP32[(($letter) >> 2)];
												var $call149 = _iswalpha($134);
												var $tobool150 = ((($call149)) | 0) != 0;
												if ($tobool150) {
													__label__ = 51;
													break $while_cond$28;
												} else {
													__label__ = 52;
													break $if_then146$$if_end155thread_pre_split$69;
												}
											}
										} while (0);
										if (__label__ == 52) {
											var $_pr7 = HEAP32[(($letter) >> 2)];
											__lastLabel__ = 52;;
										}
										var $138 = __lastLabel__ == 52 ? $_pr7 : ($133);
										var $cmp156 = ((($138)) | 0) == 57384;
										if ($cmp156) {
											__label__ = 54;;
										} else {
											__label__ = 56;;
										}
										$if_then157$$if_end166$75: do {
											if (__label__ == 54) {
												var $139 = HEAP32[((_pre_pause) >> 2)];
												var $140 = $tr_addr;
												var $langopts158 = (($140) & 4294967295);
												var $param2 = (($langopts158 + 100) & 4294967295);
												var $arrayidx159 = (($param2 + 64) & 4294967295);
												var $141 = HEAP32[(($arrayidx159) >> 2)];
												var $cmp160 = ((($139)) | 0) < ((($141)) | 0);
												if (!($cmp160)) {
													__label__ = 56;
													break $if_then157$$if_end166$75;
												}
												var $142 = $tr_addr;
												var $langopts162 = (($142) & 4294967295);
												var $param2163 = (($langopts162 + 100) & 4294967295);
												var $arrayidx164 = (($param2163 + 64) & 4294967295);
												var $143 = HEAP32[(($arrayidx164) >> 2)];
												HEAP32[((_pre_pause) >> 2)] = $143;;
											}
										} while (0);
										var $144 = HEAP32[(($letter) >> 2)];
										var $call167 = __Z9IsBracketi($144);
										var $tobool168 = ((($call167)) | 0) != 0;
										if ($tobool168) {
											__label__ = 57;;
										} else {
											__label__ = 59;;
										}
										$if_then169$$if_end178$79: do {
											if (__label__ == 57) {
												var $145 = HEAP32[((_pre_pause) >> 2)];
												var $146 = $tr_addr;
												var $langopts170 = (($146) & 4294967295);
												var $param = (($langopts170 + 24) & 4294967295);
												var $arrayidx171 = (($param + 64) & 4294967295);
												var $147 = HEAP32[(($arrayidx171) >> 2)];
												var $cmp172 = ((($145)) | 0) < ((($147)) | 0);
												if (!($cmp172)) {
													__label__ = 59;
													break $if_then169$$if_end178$79;
												}
												var $148 = $tr_addr;
												var $langopts174 = (($148) & 4294967295);
												var $param175 = (($langopts174 + 24) & 4294967295);
												var $arrayidx176 = (($param175 + 64) & 4294967295);
												var $149 = HEAP32[(($arrayidx176) >> 2)];
												HEAP32[((_pre_pause) >> 2)] = $149;;
											}
										} while (0);
										var $150 = HEAP32[(($letter) >> 2)];
										var $cmp179 = ((($150)) | 0) >= 192;
										var $151 = HEAP32[(($letter) >> 2)];
										var $cmp181 = ((($151)) | 0) < 606;
										var $or_cond = ($cmp179) & ($cmp181);
										if ($or_cond) {
											__label__ = 60;;
										} else {
											__label__ = 71;;
										}
										$land_lhs_true182$$if_else223$83: do {
											if (__label__ == 60) {
												var $152 = HEAP32[(($letter) >> 2)];
												var $sub183 = ((($152) - 192) & 4294967295);
												var $arrayidx184 = ((__ZL13remove_accent + $sub183) & 4294967295);
												var $153 = HEAPU8[($arrayidx184)];
												var $conv185 = ((($153)) & 255);
												$ix = $conv185;
												var $cmp186 = ((($conv185)) | 0) != 0;
												if (!($cmp186)) {
													__label__ = 71;
													break $land_lhs_true182$$if_else223$83;
												}
												var $154 = HEAP32[(($p) >> 2)];
												var $arrayidx188 = (($154 + -2) & 4294967295);
												var $155 = HEAP8[($arrayidx188)];
												var $conv189 = (tempInt = (($155)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp190 = ((($conv189)) | 0) != 32;
												if ($cmp190) {
													__label__ = 63;;
												} else {
													__label__ = 62;;
												}
												if (__label__ == 62) {
													var $156 = $n;
													var $157 = HEAP32[(($p) >> 2)];
													var $arrayidx192 = (($157 + $156) & 4294967295);
													var $158 = HEAP8[($arrayidx192)];
													var $conv193 = (tempInt = (($158)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $cmp194 = ((($conv193)) | 0) != 32;
													if (!($cmp194)) {
														__label__ = 74;
														break $if_then128$$if_else132$64;
													}
												}
												var $159 = HEAP32[(($p) >> 2)];
												var $add_ptr196 = (($159 + -1) & 4294967295);
												HEAP32[(($p2) >> 2)] = $add_ptr196;
												var $160 = $ix;
												var $conv197 = ((($160)) & 255);
												var $161 = HEAP32[(($p) >> 2)];
												var $arrayidx198 = (($161 + -1) & 4294967295);
												HEAP8[($arrayidx198)] = $conv197;
												var $162 = $n;
												var $163 = HEAP32[(($p) >> 2)];
												var $arrayidx20011 = (($163 + $162) & 4294967295);
												var $164 = HEAP8[($arrayidx20011)];
												var $165 = HEAP32[(($p) >> 2)];
												var $arrayidx20112 = (($165) & 4294967295);
												HEAP8[($arrayidx20112)] = $164;
												var $conv20213 = (tempInt = (($164)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp20314 = ((($conv20213)) | 0) != 32;
												if ($cmp20314) {
													__label__ = 64;;
												} else {
													__label__ = 65;;
												}
												$while_body204$$while_cond205_loopexit$89: do {
													if (__label__ == 64) {
														while (1) {
															var $166 = HEAP32[(($p) >> 2)];
															var $incdec_ptr = (($166 + 1) & 4294967295);
															HEAP32[(($p) >> 2)] = $incdec_ptr;
															var $167 = $n;
															var $168 = HEAP32[(($p) >> 2)];
															var $arrayidx200 = (($168 + $167) & 4294967295);
															var $169 = HEAP8[($arrayidx200)];
															var $170 = HEAP32[(($p) >> 2)];
															var $arrayidx201 = (($170) & 4294967295);
															HEAP8[($arrayidx201)] = $169;
															var $conv202 = (tempInt = (($169)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $cmp203 = ((($conv202)) | 0) != 32;
															if ($cmp203) {
																__label__ = 64;
																continue;
															} else {
																__label__ = 65;
																break $while_body204$$while_cond205_loopexit$89;
															}
														}
													}
												} while (0);
												var $171 = $n;
												var $dec15 = ((($171) - 1) & 4294967295);
												$n = $dec15;
												var $cmp20616 = ((($171)) | 0) > 0;
												if ($cmp20616) {
													__label__ = 66;;
												} else {
													__label__ = 67;;
												}
												$while_body207$$while_end209$93: do {
													if (__label__ == 66) {
														while (1) {
															var $172 = HEAP32[(($p) >> 2)];
															var $incdec_ptr208 = (($172 + 1) & 4294967295);
															HEAP32[(($p) >> 2)] = $incdec_ptr208;
															HEAP8[($172)] = 32;
															var $173 = $n;
															var $dec = ((($173) - 1) & 4294967295);
															$n = $dec;
															var $cmp206 = ((($173)) | 0) > 0;
															if ($cmp206) {
																__label__ = 66;
																continue;
															} else {
																__label__ = 67;
																break $while_body207$$while_end209$93;
															}
														}
													}
												} while (0);
												var $174 = $tr_addr;
												var $langopts210 = (($174) & 4294967295);
												var $param211 = (($langopts210 + 24) & 4294967295);
												var $arrayidx212 = (($param211 + 4) & 4294967295);
												var $175 = HEAP32[(($arrayidx212) >> 2)];
												var $tobool213 = ((($175)) | 0) != 0;
												if ($tobool213) {
													__label__ = 68;;
												} else {
													__label__ = 70;;
												}
												$land_lhs_true214$$if_end218$97: do {
													if (__label__ == 68) {
														var $176 = HEAP32[(($letter) >> 2)];
														var $call215 = __Z11lookupwcharPKti(((__ZL13diereses_list) & 4294967295), $176);
														var $cmp216 = ((($call215)) | 0) > 0;
														if (!($cmp216)) {
															__label__ = 70;
															break $land_lhs_true214$$if_end218$97;
														}
														var $177 = HEAP32[(($p2) >> 2)];
														HEAP32[(($p) >> 2)] = $177;
														__label__ = 20;
														continue $while_cond$28;
													}
												} while (0);
												var $178 = $phonemes_addr;
												var $arrayidx219 = (($178) & 4294967295);
												HEAP8[($arrayidx219)] = 0;
												var $179 = $p_start_addr;
												HEAP32[(($p) >> 2)] = $179;
												var $180 = $tr_addr;
												var $word_vowel_count220 = (($180 + 8296) & 4294967295);
												HEAP32[(($word_vowel_count220) >> 2)] = 0;
												var $181 = $tr_addr;
												var $word_stressed_count221 = (($181 + 8300) & 4294967295);
												HEAP32[(($word_stressed_count221) >> 2)] = 0;
												__label__ = 20;
												continue $while_cond$28;
											}
										} while (0);
										var $182 = HEAP32[(($letter) >> 2)];
										var $cmp224 = ((($182)) | 0) >= 12800;
										var $183 = HEAP32[(($letter) >> 2)];
										var $cmp226 = ((($183)) | 0) < 42752;
										var $or_cond1 = ($cmp224) & ($cmp226);
										if (!($or_cond1)) {
											__label__ = 74;
											break $if_then128$$if_else132$64;
										}
										var $184 = $end_phonemes_addr;
										var $cmp228 = ((($184)) | 0) != 0;
										if (!($cmp228)) {
											__label__ = 74;
											break $if_then128$$if_else132$64;
										}
										var $185 = $tr_addr;
										var $call231 = __Z6LookupP10TranslatorPKcPc($185, ((__str9306) & 4294967295), $arraydecay230);
										HEAP32[(($phonemes233) >> 2)] = $arraydecay232;
										HEAP32[(($points234) >> 2)] = 1;
										var $186 = $wc_bytes;
										var $sub235 = ((($186) - 1) & 4294967295);
										var $187 = HEAP32[(($p) >> 2)];
										var $add_ptr236 = (($187 + $sub235) & 4294967295);
										HEAP32[(($p) >> 2)] = $add_ptr236;
										__label__ = 74;
										break $if_then128$$if_else132$64;
									}
								} while (0);
								$if_end240$$if_else278$104: do {
									if (__label__ == 74) {
										var $_pr17 = HEAP32[(($points241) >> 2)];
										var $cmp242 = ((($_pr17)) | 0) == 0;
										if (!($cmp242)) {
											__label__ = 84;
											break $if_end240$$if_else278$104;
										}
										var $188 = HEAP32[(($wc) >> 2)];
										var $cmp244 = ((($188)) | 0) >= 768;
										var $189 = HEAP32[(($wc) >> 2)];
										var $cmp246 = ((($189)) | 0) <= 879;
										var $or_cond2 = ($cmp244) & ($cmp246);
										if ($or_cond2) {
											__label__ = 83;;
										} else {
											__label__ = 76;;
										}
										$if_end275$$if_else248$107: do {
											if (__label__ == 76) {
												var $190 = HEAP32[(($wc) >> 2)];
												var $call249 = __Z7IsAlphaj($190);
												var $tobool250 = ((($call249)) | 0) != 0;
												if ($tobool250) {
													__label__ = 77;;
												} else {
													__label__ = 81;;
												}
												if (__label__ == 77) {
													var $191 = $any_alpha;
													var $cmp252 = ((($191)) | 0) > 1;
													if ($cmp252) {
														__label__ = 79;
														break $while_cond$28;
													}
													var $192 = $wc_bytes;
													var $sub254 = ((($192) - 1) & 4294967295);
													var $193 = HEAP32[(($p) >> 2)];
													var $arrayidx255 = (($193 + $sub254) & 4294967295);
													var $194 = HEAP8[($arrayidx255)];
													var $conv256 = (tempInt = (($194)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $cmp257 = ((($conv256)) | 0) > 32;
													if ($cmp257) {
														__label__ = 79;
														break $while_cond$28;
													}
												} else if (__label__ == 81) {
													var $199 = $tr_addr;
													var $200 = HEAP32[(($wc) >> 2)];
													__Z12LookupLetterP10TranslatorjiPci($199, $200, -1, $arraydecay266, 0);
													var $201 = HEAP8[($arrayidx267)];
													var $tobool268 = (tempInt = (($201)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
													if (!($tobool268)) {
														__label__ = 83;
														break $if_end275$$if_else248$107;
													}
													HEAP32[(($phonemes271) >> 2)] = $arraydecay270;
													HEAP32[(($points272) >> 2)] = 1;;
												}
											}
										} while (0);
										var $202 = $wc_bytes;
										var $sub276 = ((($202) - 1) & 4294967295);
										var $203 = HEAP32[(($p) >> 2)];
										var $add_ptr277 = (($203 + $sub276) & 4294967295);
										HEAP32[(($p) >> 2)] = $add_ptr277;
										__label__ = 85;
										break $if_end281$$if_end81$48;
									}
								} while (0);
								var $204 = $tr_addr;
								var $phonemes_repeat_count = (($204 + 652) & 4294967295);
								HEAP32[(($phonemes_repeat_count) >> 2)] = 0;;
							}
						} while (0);
						var $205 = HEAP32[(($phonemes282) >> 2)];
						var $cmp283 = ((($205)) | 0) == 0;
						if ($cmp283) {
							__label__ = 86;;
						} else {
							__label__ = 87;;
						}
						if (__label__ == 86) {
							HEAP32[(($phonemes285) >> 2)] = ((__str13643) & 4294967295);;
						}
						var $206 = HEAP32[(($points287) >> 2)];
						var $cmp288 = ((($206)) | 0) > 0;
						if (!($cmp288)) {
							__label__ = 20;
							continue $while_cond$28;
						}
						var $207 = $word_flags_addr;
						var $and290 = ($207) & -2147483648;
						var $tobool291 = ((($and290)) | 0) != 0;
						if ($tobool291) {
							__label__ = 89;
							break $while_cond$28;
						}
						var $209 = HEAP32[(($phonemes295) >> 2)];
						var $arrayidx296 = (($209) & 4294967295);
						var $210 = HEAP8[($arrayidx296)];
						var $conv297 = (tempInt = (($210)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp298 = ((($conv297)) | 0) == 21;
						if ($cmp298) {
							__label__ = 91;;
						} else {
							__label__ = 93;;
						}
						if (__label__ == 91) {
							var $211 = $word_flags_addr;
							var $and300 = ($211) & 4096;
							var $cmp301 = ((($and300)) | 0) == 0;
							if ($cmp301) {
								__label__ = 92;
								break $while_cond$28;
							}
						}
						var $214 = HEAP32[(($end_type306) >> 2)];
						var $and307 = ($214) & -32769;
						HEAP32[(($end_type306) >> 2)] = $and307;
						var $cmp309 = ((($and307)) | 0) != 0;
						if ($cmp309) {
							__label__ = 94;;
						} else {
							__label__ = 101;;
						}
						$land_lhs_true310$$if_end339$125: do {
							if (__label__ == 94) {
								var $215 = $end_phonemes_addr;
								var $cmp311 = ((($215)) | 0) != 0;
								if (!($cmp311)) {
									__label__ = 101;
									break $land_lhs_true310$$if_end339$125;
								}
								var $216 = HEAP32[(($end_type313) >> 2)];
								var $and314 = ($216) & 1024;
								var $tobool315 = ((($and314)) | 0) != 0;
								if (!($tobool315)) {
									__label__ = 97;
									break $while_cond$28;
								}
								var $217 = $word_flags_addr;
								var $and317 = ($217) & 536870912;
								var $tobool318 = ((($and317)) | 0) != 0;
								if (!($tobool318)) {
									__label__ = 97;
									break $while_cond$28;
								}
							}
						} while (0);
						var $227 = HEAP32[(($del_fwd) >> 2)];
						var $cmp340 = ((($227)) | 0) != 0;
						if ($cmp340) {
							__label__ = 102;;
						} else {
							__label__ = 103;;
						}
						if (__label__ == 102) {
							var $228 = HEAP32[(($del_fwd342) >> 2)];
							HEAP8[($228)] = 69;;
						}
						var $229 = $tr_addr;
						var $230 = $phonemes_addr;
						var $231 = $ph_size_addr;
						var $232 = HEAP32[(($phonemes344) >> 2)];
						__Z14AppendPhonemesP10TranslatorPciPKc($229, $230, $231, $232);
						__label__ = 20;
						continue $while_cond$28;
					}
					$while_end346$$if_then292$$if_then302$$if_else320$$if_then258$$if_then151$133: do {
						if (__label__ == 89) {
							var $end_type = (($match1 + 8) & 4294967295);
							var $208 = HEAP32[(($end_type) >> 2)];
							var $or293 = ($208) | 1;
							$retval = $or293;
							__label__ = 105;
							break $if_then$$if_end$2;
						} else if (__label__ == 92) {
							var $212 = $phonemes_addr;
							var $phonemes303 = (($match1 + 4) & 4294967295);
							var $213 = HEAP32[(($phonemes303) >> 2)];
							var $call304 = _strcpy($212, $213);
							$retval = 0;
							__label__ = 105;
							break $if_then$$if_end$2;
						} else if (__label__ == 97) {
							var $end_type321 = (($match1 + 8) & 4294967295);
							var $218 = HEAP32[(($end_type321) >> 2)];
							var $and322 = ($218) & 1024;
							var $tobool323 = ((($and322)) | 0) != 0;
							if ($tobool323) {
								__label__ = 98;;
							} else {
								__label__ = 100;;
							}
							$land_lhs_true324$$if_end331$137: do {
								if (__label__ == 98) {
									var $end_type325 = (($match1 + 8) & 4294967295);
									var $219 = HEAP32[(($end_type325) >> 2)];
									var $and326 = ($219) & 127;
									var $cmp327 = ((($and326)) | 0) == 0;
									if (!($cmp327)) {
										__label__ = 100;
										break $land_lhs_true324$$if_end331$137;
									}
									var $220 = HEAP32[(($p) >> 2)];
									var $221 = $p_start_addr;
									var $sub_ptr_lhs_cast = ($220);
									var $sub_ptr_rhs_cast = ($221);
									var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
									var $end_type329 = (($match1 + 8) & 4294967295);
									var $222 = HEAP32[(($end_type329) >> 2)];
									var $or330 = ($sub_ptr_sub) | ($222);
									HEAP32[(($end_type329) >> 2)] = $or330;;
								}
							} while (0);
							var $223 = $end_phonemes_addr;
							var $phonemes332 = (($match1 + 4) & 4294967295);
							var $224 = HEAP32[(($phonemes332) >> 2)];
							var $call333 = _strcpy($223, $224);
							var $225 = $p_start_addr;
							var $arraydecay334 = (($word_copy) & 4294967295);
							var $arraydecay335 = (($word_copy) & 4294967295);
							var $call336 = _strlen($arraydecay335);
							var $src$, $dest$, $stop$, $stop4$, $fast$;
							$src$ = $arraydecay334;
							$dest$ = $225;
							$stop$ = $src$ + $call336;
							if (($dest$ % 4) == ($src$ % 4) && $call336 > 8) {
								while ($src$ % 4 !== 0 && $src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								}
								$src$ >>= 2;
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($src$ < $stop4$) {;;;
									HEAP32[$dest$++] = HEAP32[$src$++];
								}
								$src$ <<= 2;
								$dest$ <<= 2;
							}
							while ($src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							};
							var $end_type337 = (($match1 + 8) & 4294967295);
							var $226 = HEAP32[(($end_type337) >> 2)];
							$retval = $226;
							__label__ = 105;
							break $if_then$$if_end$2;
						} else if (__label__ == 79) {
							var $195 = $phonemes_addr;
							var $arrayidx259 = (($195) & 4294967295);
							HEAP8[($arrayidx259)] = 0;
							var $196 = $dict_flags_addr;
							var $cmp260 = ((($196)) | 0) != 0;
							if (!($cmp260)) {
								__label__ = 104;
								break $while_end346$$if_then292$$if_then302$$if_else320$$if_then258$$if_then151$133;
							}
							var $197 = $dict_flags_addr;
							var $arrayidx262 = (($197) & 4294967295);
							var $198 = HEAP32[(($arrayidx262) >> 2)];
							var $or = ($198) | 65536;
							HEAP32[(($arrayidx262) >> 2)] = $or;;
						} else if (__label__ == 51) {
							var $135 = $phonemes_addr;
							var $136 = $tr_addr;
							var $langopts152 = (($136) & 4294967295);
							var $ascii_language = (($langopts152 + 268) & 4294967295);
							var $137 = HEAP32[(($ascii_language) >> 2)];
							var $call153 = _sprintf($135, ((__str70722) & 4294967295), allocate([21, 0, 0, 0, $137, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							$retval = 0;
							__label__ = 105;
							break $if_then$$if_end$2;
						}
					} while (0);
					var $233 = $tr_addr;
					var $234 = $phonemes_addr;
					var $235 = $dict_flags0;
					__Z21ApplySpecialAttributeP10TranslatorPci($233, $234, $235);
					var $236 = $p_start_addr;
					var $arraydecay347 = (($word_copy) & 4294967295);
					var $arraydecay348 = (($word_copy) & 4294967295);
					var $call349 = _strlen($arraydecay348);
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $arraydecay347;
					$dest$ = $236;
					$stop$ = $src$ + $call349;
					if (($dest$ % 4) == ($src$ % 4) && $call349 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					$retval = 0;;
				}
			} while (0);
			var $237 = $retval;
			STACKTOP = __stackBase__;
			return $237;
			return null;
		}

		function __Z6LookupP10TranslatorPKcPc($tr, $word, $ph_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 12;
			_memset(__stackBase__, 0, 12);
			var __label__;
			var $tr_addr;
			var $word_addr;
			var $ph_out_addr;
			var $flags = __stackBase__;
			var $word1 = __stackBase__ + 8;
			$tr_addr = $tr;
			$word_addr = $word;
			$ph_out_addr = $ph_out;
			var $arrayidx = (($flags + 4) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = 0;
			var $arrayidx1 = (($flags) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 0;
			var $0 = $word_addr;
			HEAP32[(($word1) >> 2)] = $0;
			var $1 = $tr_addr;
			var $2 = $ph_out_addr;
			var $arraydecay = (($flags) & 4294967295);
			var $call = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($1, $word1, $2, $arraydecay, 0, 0);
			STACKTOP = __stackBase__;
			return $call;
			return null;
		}

		function __ZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordii($tr, $word, $word_start, $group_length, $rule, $match_out, $word_flags, $dict_flags) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 264;
			_memset(__stackBase__, 0, 264);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $word_addr;
			var $word_start_addr;
			var $group_length_addr;
			var $rule_addr;
			var $match_out_addr;
			var $word_flags_addr;
			var $dict_flags_addr;
			var $rb;
			var $letter;
			var $letter_w = __stackBase__;
			var $letter_xbytes;
			var $last_letter;
			var $pre_ptr;
			var $post_ptr;
			var $rule_start;
			var $p;
			var $ix;
			var $match_type;
			var $failed;
			var $unpron_ignore;
			var $consumed;
			var $syllable_count;
			var $vowel;
			var $letter_group;
			var $distance_right;
			var $distance_left;
			var $lg_pts;
			var $n_bytes;
			var $add_points;
			var $command;
			var $check_atstart;
			var $match = __stackBase__ + 4;
			var $total_consumed;
			var $condition_num;
			var $common_phonemes;
			var $group_chars;
			var $word_buf = __stackBase__ + 20;
			var $p222;
			var $vowel_count;
			var $p252;
			var $p269;
			var $p2;
			var $rule_w = __stackBase__ + 180;
			var $p419;
			var $pts;
			var $decoded_phonemes = __stackBase__ + 184;
			$tr_addr = $tr;
			$word_addr = $word;
			$word_start_addr = $word_start;
			$group_length_addr = $group_length;
			$rule_addr = $rule;
			$match_out_addr = $match_out;
			$word_flags_addr = $word_flags;
			$dict_flags_addr = $dict_flags;
			var $0 = $word_addr;
			var $1 = HEAP32[(($0) >> 2)];
			$group_chars = $1;
			var $2 = $rule_addr;
			var $cmp = ((($2)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $3 = $match_out_addr;
				var $points = (($3) & 4294967295);
				HEAP32[(($points) >> 2)] = 0;
				var $4 = $word_addr;
				var $5 = HEAP32[(($4) >> 2)];
				var $incdec_ptr = (($5 + 1) & 4294967295);
				HEAP32[(($4) >> 2)] = $incdec_ptr;;
			} else if (__label__ == 2) {
				$total_consumed = 0;
				$common_phonemes = 0;
				$match_type = 0;
				HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best) & 4294967295)) >> 2)] = 0;
				HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best + 4) & 4294967295)) >> 2)] = ((__str13643) & 4294967295);
				HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best + 8) & 4294967295)) >> 2)] = 0;
				HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best + 12) & 4294967295)) >> 2)] = 0;
				var $6 = $rule_addr;
				var $7 = HEAP8[($6)];
				var $conv22 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp123 = ((($conv22)) | 0) != 7;
				if ($cmp123) {
					__label__ = 3;;
				} else {
					__label__ = 198;;
				}
				$while_body_lr_ph$$while_end549$5: do {
					if (__label__ == 3) {
						var $points2 = (($match) & 4294967295);
						var $end_type = (($match + 8) & 4294967295);
						var $del_fwd = (($match + 12) & 4294967295);
						var $points518 = (($match) & 4294967295);
						var $8 = $match;
						var $points524 = (($match) & 4294967295);
						var $points530 = (($match) & 4294967295);
						var $phonemes535 = (($match + 4) & 4294967295);
						var $arraydecay536 = (($decoded_phonemes) & 4294967295);
						var $arraydecay538 = (($decoded_phonemes) & 4294967295);
						var $points515 = (($match) & 4294967295);
						var $phonemes = (($match + 4) & 4294967295);
						var $phonemes13 = (($match + 4) & 4294967295);
						var $phonemes23 = (($match + 4) & 4294967295);
						var $phonemes29 = (($match + 4) & 4294967295);
						var $phonemes32 = (($match + 4) & 4294967295);
						var $phonemes43 = (($match + 4) & 4294967295);
						var $points66 = (($match) & 4294967295);
						var $points499 = (($match) & 4294967295);
						var $end_type171 = (($match + 8) & 4294967295);
						var $arraydecay = (($word_buf) & 4294967295);
						var $arrayidx195 = (($word_buf + 1) & 4294967295);
						var $del_fwd291 = (($match + 12) & 4294967295);
						var $end_type307 = (($match + 8) & 4294967295);;
						$while_body$7: while (1) {
							var $11 = $word_flags_addr;
							var $and = ($11) & -2147483648;
							$unpron_ignore = $and;
							$match_type = 0;
							$consumed = 0;
							$letter = 0;
							$distance_right = -6;
							$distance_left = -2;
							$check_atstart = 0;
							HEAP32[(($points2) >> 2)] = 1;
							HEAP32[(($end_type) >> 2)] = 0;
							HEAP32[(($del_fwd) >> 2)] = 0;
							var $12 = $word_addr;
							var $13 = HEAP32[(($12) >> 2)];
							$pre_ptr = $13;
							var $14 = $word_addr;
							var $15 = HEAP32[(($14) >> 2)];
							var $16 = $group_length_addr;
							var $add_ptr = (($15 + $16) & 4294967295);
							$post_ptr = $add_ptr;
							var $17 = $rule_addr;
							$rule_start = $17;
							$failed = 0;
							var $18 = $failed;
							var $tobool20 = ((($18)) | 0) != 0;
							var $lnot21 = ($tobool20) ^ 1;
							if ($lnot21) {
								__lastLabel__ = 5;
								__label__ = 6;;
							} else {
								__lastLabel__ = 5;
								__label__ = 183;;
							}
							$while_body4$$while_end502$9: do {
								if (__label__ == 6) {
									$while_body4$10: while (1) {
										var $19 = $rule_addr;
										var $incdec_ptr5 = (($19 + 1) & 4294967295);
										$rule_addr = $incdec_ptr5;
										var $20 = HEAP8[($19)];
										$rb = $20;
										var $21 = $rb;
										var $conv6 = ((($21)) & 255);
										var $cmp7 = ((($conv6)) | 0) <= 9;
										if ($cmp7) {
											__label__ = 7;;
										} else {
											__label__ = 33;;
										}
										$if_then8$$if_end70$12: do {
											if (__label__ == 7) {
												var $22 = $rb;
												var $conv9 = ((($22)) & 255);
												if ($conv9 == 0) {
													__label__ = 8;;
												} else if ($conv9 == 8) {
													__label__ = 18;;
												} else if ($conv9 == 1) {
													__label__ = 19;;
												} else if ($conv9 == 2) {
													__label__ = 21;;
												} else if ($conv9 == 3) {
													__label__ = 22;;
												} else if ($conv9 == 4) {
													__label__ = 23;;
												} else if ($conv9 == 5) {
													__label__ = 24;;
												} else if ($conv9 == 9) {
													__label__ = 32;;
												} else {
													__label__ = 30;
													break $if_then8$$if_end70$12;
												}
												if (__label__ == 8) {
													var $23 = $common_phonemes;
													var $cmp10 = ((($23)) | 0) != 0;
													if ($cmp10) {
														__label__ = 9;;
													} else {
														__label__ = 16;;
													}
													$if_then11$$if_else$16: do {
														if (__label__ == 9) {
															var $24 = $common_phonemes;
															HEAP32[(($phonemes) >> 2)] = $24;;
															while (1) {
																var $25 = HEAP32[(($phonemes13) >> 2)];
																var $incdec_ptr14 = (($25 + 1) & 4294967295);
																HEAP32[(($phonemes13) >> 2)] = $incdec_ptr14;
																var $26 = HEAPU8[($25)];
																$rb = $26;
																var $conv15 = ((($26)) & 255);
																var $cmp16 = ((($conv15)) | 0) != 0;
																if (!($cmp16)) {
																	__label__ = 17;
																	break $if_then11$$if_else$16;
																}
																var $27 = $rb;
																var $conv17 = ((($27)) & 255);
																var $cmp18 = ((($conv17)) | 0) != 3;
																if (!($cmp18)) {
																	__label__ = 17;
																	break $if_then11$$if_else$16;
																}
																var $28 = $rb;
																var $conv20 = ((($28)) & 255);
																var $cmp21 = ((($conv20)) | 0) == 5;
																if ($cmp21) {
																	__label__ = 13;;
																} else {
																	__label__ = 14;;
																}
																if (__label__ == 13) {
																	var $29 = HEAP32[(($phonemes23) >> 2)];
																	var $incdec_ptr24 = (($29 + 1) & 4294967295);
																	HEAP32[(($phonemes23) >> 2)] = $incdec_ptr24;;
																}
																var $30 = $rb;
																var $conv26 = ((($30)) & 255);
																var $cmp27 = ((($conv26)) | 0) == 9;
																if (!($cmp27)) {
																	__label__ = 10;
																	continue;
																}
																var $31 = HEAP32[(($phonemes29) >> 2)];
																var $add_ptr30 = (($31 + 2) & 4294967295);
																HEAP32[(($phonemes29) >> 2)] = $add_ptr30;
																__label__ = 10;
																continue;
															}
														} else if (__label__ == 16) {
															HEAP32[(($phonemes32) >> 2)] = ((__str13643) & 4294967295);;
														}
													} while (0);
													var $32 = $rule_addr;
													var $incdec_ptr34 = (($32 + -1) & 4294967295);
													$rule_addr = $incdec_ptr34;
													$failed = 2;;
												} else if (__label__ == 18) {
													$check_atstart = 1;
													$unpron_ignore = 0;
													$match_type = 1;;
												} else if (__label__ == 19) {
													$match_type = 1;
													var $33 = $word_flags_addr;
													var $and37 = ($33) & -2147483648;
													var $tobool38 = ((($and37)) | 0) != 0;
													if (!($tobool38)) {
														__label__ = 30;
														break $if_then8$$if_end70$12;
													}
													$failed = 1;;
												} else if (__label__ == 21) {
													$match_type = 2;;
												} else if (__label__ == 22) {
													var $34 = $rule_addr;
													HEAP32[(($phonemes43) >> 2)] = $34;
													$failed = 2;;
												} else if (__label__ == 23) {
													var $35 = $rule_addr;
													$common_phonemes = $35;;
												} else if (__label__ == 24) {
													var $36 = $rule_addr;
													var $incdec_ptr46 = (($36 + 1) & 4294967295);
													$rule_addr = $incdec_ptr46;
													var $37 = HEAP8[($36)];
													$condition_num = $37;
													var $38 = $condition_num;
													var $conv47 = ((($38)) & 255);
													var $cmp48 = ((($conv47)) | 0) >= 32;
													var $39 = $tr_addr;
													var $dict_condition = (($39 + 692) & 4294967295);
													var $40 = HEAP32[(($dict_condition) >> 2)];
													var $41 = $condition_num;
													var $conv50 = ((($41)) & 255);
													if ($cmp48) {
														__label__ = 25;;
													} else {
														__label__ = 27;;
													}
													$if_then49$$if_else55$35: do {
														if (__label__ == 25) {
															var $sub = ((($conv50) - 32) & 4294967295);
															var $shl = 1 << ($sub);
															var $and51 = ($shl) & ($40);
															var $cmp52 = ((($and51)) | 0) != 0;
															if (!($cmp52)) {
																__label__ = 29;
																break $if_then49$$if_else55$35;
															}
															$failed = 1;
															__label__ = 30;
															break $if_then8$$if_end70$12;
														} else if (__label__ == 27) {
															var $shl58 = 1 << ($conv50);
															var $and59 = ($shl58) & ($40);
															var $cmp60 = ((($and59)) | 0) == 0;
															if (!($cmp60)) {
																__label__ = 29;
																break $if_then49$$if_else55$35;
															}
															$failed = 1;
															__label__ = 30;
															break $if_then8$$if_end70$12;
														}
													} while (0);
													var $_pr = $failed;
													var $tobool64 = ((($_pr)) | 0) != 0;
													if ($tobool64) {
														__label__ = 30;
														break $if_then8$$if_end70$12;
													}
													var $43 = HEAP32[(($points66) >> 2)];
													var $inc = ((($43) + 1) & 4294967295);
													HEAP32[(($points66) >> 2)] = $inc;;
												} else if (__label__ == 32) {
													var $44 = $rule_addr;
													var $add_ptr69 = (($44 + 2) & 4294967295);
													$rule_addr = $add_ptr69;;
												}
											} else if (__label__ == 33) {
												$add_points = 0;
												var $45 = $match_type;
												if ($45 == 0) {
													__label__ = 34;;
												} else if ($45 == 2) {
													__label__ = 41;;
												} else if ($45 == 1) {
													__label__ = 119;;
												} else {
													__label__ = 181;;
												}
												$sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44: do {
													if (__label__ == 34) {
														var $46 = $letter;
														$last_letter = $46;
														var $47 = $post_ptr;
														var $incdec_ptr72 = (($47 + 1) & 4294967295);
														$post_ptr = $incdec_ptr72;
														var $48 = HEAP8[($47)];
														$letter = $48;
														var $49 = $letter;
														var $conv73 = ((($49)) & 255);
														var $50 = $rb;
														var $conv74 = ((($50)) & 255);
														var $cmp75 = ((($conv73)) | 0) == ((($conv74)) | 0);
														if ($cmp75) {
															__label__ = 37;;
														} else {
															__label__ = 35;;
														}
														$if_then80$$lor_lhs_false$46: do {
															if (__label__ == 35) {
																var $51 = $letter;
																var $conv76 = ((($51)) & 255);
																var $cmp77 = ((($conv76)) | 0) == 69;
																if ($cmp77) {
																	__label__ = 36;;
																} else {
																	__label__ = 40;;
																}
																if (__label__ == 36) {
																	var $52 = $rb;
																	var $conv78 = ((($52)) & 255);
																	var $cmp79 = ((($conv78)) | 0) == 101;
																	if ($cmp79) {
																		__label__ = 37;
																		break $if_then80$$lor_lhs_false$46;
																	}
																}
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} while (0);
														var $53 = $letter;
														var $conv81 = ((($53)) & 255);
														var $and82 = ($conv81) & 192;
														var $cmp83 = ((($and82)) | 0) != 128;
														if ($cmp83) {
															__label__ = 38;;
														} else {
															__label__ = 39;;
														}
														if (__label__ == 38) {
															$add_points = 21;;
														}
														var $54 = $consumed;
														var $inc86 = ((($54) + 1) & 4294967295);
														$consumed = $inc86;;
													} else if (__label__ == 41) {
														var $55 = $distance_right;
														var $add = ((($55) + 6) & 4294967295);
														$distance_right = $add;
														var $56 = $distance_right;
														var $cmp90 = ((($56)) | 0) > 18;
														if ($cmp90) {
															__label__ = 42;;
														} else {
															__label__ = 43;;
														}
														if (__label__ == 42) {
															$distance_right = 19;;
														}
														var $57 = $letter;
														$last_letter = $57;
														var $58 = $post_ptr;
														var $call = __Z7utf8_inPiPKc($letter_w, $58);
														var $sub93 = ((($call) - 1) & 4294967295);
														$letter_xbytes = $sub93;
														var $59 = $post_ptr;
														var $incdec_ptr94 = (($59 + 1) & 4294967295);
														$post_ptr = $incdec_ptr94;
														var $60 = HEAP8[($59)];
														$letter = $60;
														var $61 = $rb;
														var $conv95 = ((($61)) & 255);
														if ($conv95 == 17) {
															__label__ = 44;;
														} else if ($conv95 == 18) {
															__label__ = 49;;
														} else if ($conv95 == 25) {
															__label__ = 52;;
														} else if ($conv95 == 15) {
															__label__ = 57;;
														} else if ($conv95 == 16) {
															__label__ = 62;;
														} else if ($conv95 == 11) {
															__label__ = 65;;
														} else if ($conv95 == 28) {
															__label__ = 68;;
														} else if ($conv95 == 45) {
															__label__ = 78;;
														} else if ($conv95 == 21) {
															__label__ = 83;;
														} else if ($conv95 == 29) {
															__label__ = 94;;
														} else if ($conv95 == 23) {
															__label__ = 101;;
														} else if ($conv95 == 12) {
															__label__ = 105;;
														} else if ($conv95 == 13) {
															__label__ = 106;;
														} else if ($conv95 == 14) {
															__label__ = 111;;
														} else if ($conv95 == 24) {
															__label__ = 112;;
														} else {
															__label__ = 115;;
														}
														if (__label__ == 115) {
															var $186 = $letter;
															var $conv315 = ((($186)) & 255);
															var $187 = $rb;
															var $conv316 = ((($187)) & 255);
															var $cmp317 = ((($conv315)) | 0) == ((($conv316)) | 0);
															if ($cmp317) {
																__label__ = 116;;
															} else {
																__label__ = 118;;
															}
															if (__label__ == 116) {
																var $188 = $letter;
																var $conv319 = ((($188)) & 255);
																var $and320 = ($conv319) & 192;
																var $cmp321 = ((($and320)) | 0) != 128;
																if (!($cmp321)) {
																	__label__ = 181;
																	break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
																}
																var $189 = $distance_right;
																var $sub323 = ((21 - ($189)) & 4294967295);
																$add_points = $sub323;;
															} else if (__label__ == 118) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 44) {
															var $62 = $rule_addr;
															var $incdec_ptr97 = (($62 + 1) & 4294967295);
															$rule_addr = $incdec_ptr97;
															var $63 = HEAP8[($62)];
															var $conv98 = (tempInt = (($63)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $sub99 = ((($conv98) - 65) & 4294967295);
															$letter_group = $sub99;
															var $64 = $tr_addr;
															var $65 = HEAP32[(($letter_w) >> 2)];
															var $66 = $letter_group;
															var $call100 = __ZL8IsLetterP10Translatorii($64, $65, $66);
															var $tobool101 = ((($call100)) | 0) != 0;
															if ($tobool101) {
																__label__ = 45;;
															} else {
																__label__ = 48;;
															}
															if (__label__ == 45) {
																$lg_pts = 20;
																var $67 = $letter_group;
																var $cmp103 = ((($67)) | 0) == 2;
																if ($cmp103) {
																	__label__ = 46;;
																} else {
																	__label__ = 47;;
																}
																if (__label__ == 46) {
																	$lg_pts = 19;;
																}
																var $68 = $lg_pts;
																var $69 = $distance_right;
																var $sub106 = ((($68) - ($69)) & 4294967295);
																$add_points = $sub106;
																var $70 = $letter_xbytes;
																var $71 = $post_ptr;
																var $add_ptr107 = (($71 + $70) & 4294967295);
																$post_ptr = $add_ptr107;;
															} else if (__label__ == 48) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 49) {
															var $72 = $rule_addr;
															var $incdec_ptr111 = (($72 + 1) & 4294967295);
															$rule_addr = $incdec_ptr111;
															var $73 = HEAP8[($72)];
															var $conv112 = (tempInt = (($73)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $sub113 = ((($conv112) - 65) & 4294967295);
															$letter_group = $sub113;
															var $74 = $tr_addr;
															var $75 = $post_ptr;
															var $add_ptr114 = (($75 + -1) & 4294967295);
															var $76 = $letter_group;
															var $call115 = __ZL13IsLetterGroupP10TranslatorPcii($74, $add_ptr114, $76, 0);
															$n_bytes = $call115;
															var $cmp116 = ((($call115)) | 0) > 0;
															if ($cmp116) {
																__label__ = 50;;
															} else {
																__label__ = 51;;
															}
															if (__label__ == 50) {
																var $77 = $distance_right;
																var $sub118 = ((20 - ($77)) & 4294967295);
																$add_points = $sub118;
																var $78 = $n_bytes;
																var $sub119 = ((($78) - 1) & 4294967295);
																var $79 = $post_ptr;
																var $add_ptr120 = (($79 + $sub119) & 4294967295);
																$post_ptr = $add_ptr120;;
															} else if (__label__ == 51) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 52) {
															var $80 = $tr_addr;
															var $81 = HEAP32[(($letter_w) >> 2)];
															var $call124 = __ZL8IsLetterP10Translatorii($80, $81, 0);
															var $tobool125 = ((($call124)) | 0) != 0;
															if ($tobool125) {
																__label__ = 55;;
															} else {
																__label__ = 53;;
															}
															$if_then131$$lor_lhs_false126$77: do {
																if (__label__ == 53) {
																	var $82 = HEAP32[(($letter_w) >> 2)];
																	var $cmp127 = ((($82)) | 0) == 32;
																	if ($cmp127) {
																		__label__ = 54;;
																	} else {
																		__label__ = 56;;
																	}
																	if (__label__ == 54) {
																		var $83 = $word_flags_addr;
																		var $and129 = ($83) & 134217728;
																		var $tobool130 = ((($and129)) | 0) != 0;
																		if ($tobool130) {
																			__label__ = 55;
																			break $if_then131$$lor_lhs_false126$77;
																		}
																	}
																	var $84 = $distance_right;
																	var $sub133 = ((20 - ($84)) & 4294967295);
																	$add_points = $sub133;
																	var $85 = $letter_xbytes;
																	var $86 = $post_ptr;
																	var $add_ptr134 = (($86 + $85) & 4294967295);
																	$post_ptr = $add_ptr134;
																	__label__ = 181;
																	break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
																}
															} while (0);
															$failed = 1;
															__label__ = 30;
															break $if_then8$$if_end70$12;
														} else if (__label__ == 57) {
															var $87 = HEAP32[(($letter_w) >> 2)];
															var $call137 = __Z7IsDigitj($87);
															var $tobool138 = ((($call137)) | 0) != 0;
															if ($tobool138) {
																__label__ = 58;;
															} else {
																__label__ = 59;;
															}
															if (__label__ == 58) {
																var $88 = $distance_right;
																var $sub140 = ((20 - ($88)) & 4294967295);
																$add_points = $sub140;
																var $89 = $letter_xbytes;
																var $90 = $post_ptr;
																var $add_ptr141 = (($90 + $89) & 4294967295);
																$post_ptr = $add_ptr141;;
															} else if (__label__ == 59) {
																var $91 = $tr_addr;
																var $langopts = (($91) & 4294967295);
																var $tone_numbers = (($langopts + 250) & 4294967295);
																var $92 = HEAP8[($tone_numbers)];
																var $tobool143 = (tempInt = (($92)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
																if ($tobool143) {
																	__label__ = 60;;
																} else {
																	__label__ = 61;;
																}
																if (__label__ == 60) {
																	var $93 = $distance_right;
																	var $sub145 = ((20 - ($93)) & 4294967295);
																	$add_points = $sub145;
																	var $94 = $post_ptr;
																	var $incdec_ptr146 = (($94 + -1) & 4294967295);
																	$post_ptr = $incdec_ptr146;;
																} else if (__label__ == 61) {
																	$failed = 1;
																	__label__ = 30;
																	break $if_then8$$if_end70$12;
																}
															}
														} else if (__label__ == 62) {
															var $95 = HEAP32[(($letter_w) >> 2)];
															var $call151 = _iswalpha($95);
															var $tobool152 = ((($call151)) | 0) != 0;
															if ($tobool152) {
																__label__ = 64;;
															} else {
																__label__ = 63;;
															}
															if (__label__ == 64) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															} else if (__label__ == 63) {
																var $96 = $distance_right;
																var $sub154 = ((21 - ($96)) & 4294967295);
																$add_points = $sub154;
																var $97 = $letter_xbytes;
																var $98 = $post_ptr;
																var $add_ptr155 = (($98 + $97) & 4294967295);
																$post_ptr = $add_ptr155;;
															}
														} else if (__label__ == 65) {
															var $99 = $letter;
															var $conv159 = ((($99)) & 255);
															var $100 = $last_letter;
															var $conv160 = ((($100)) & 255);
															var $cmp161 = ((($conv159)) | 0) == ((($conv160)) | 0);
															if ($cmp161) {
																__label__ = 66;;
															} else {
																__label__ = 67;;
															}
															if (__label__ == 66) {
																var $101 = $distance_right;
																var $sub163 = ((21 - ($101)) & 4294967295);
																$add_points = $sub163;;
															} else if (__label__ == 67) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 68) {
															var $102 = $rule_addr;
															var $incdec_ptr167 = (($102 + 1) & 4294967295);
															$rule_addr = $incdec_ptr167;
															var $103 = HEAP8[($102)];
															var $conv168 = (tempInt = (($103)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															$command = $conv168;
															var $104 = $command;
															var $cmp169 = ((($104)) | 0) == 1;
															if ($cmp169) {
																__label__ = 69;;
															} else {
																__label__ = 70;;
															}
															if (__label__ == 69) {
																HEAP32[(($end_type171) >> 2)] = 32768;;
															} else if (__label__ == 70) {
																var $105 = $command;
																var $and173 = ($105) & 240;
																var $cmp174 = ((($and173)) | 0) == 16;
																if ($cmp174) {
																	__label__ = 71;;
																} else {
																	__label__ = 74;;
																}
																if (__label__ == 71) {
																	var $106 = $dict_flags_addr;
																	var $107 = $command;
																	var $and176 = ($107) & 15;
																	var $add177 = ((($and176) + 19) & 4294967295);
																	var $shl178 = 1 << ($add177);
																	var $and179 = ($shl178) & ($106);
																	var $tobool180 = ((($and179)) | 0) != 0;
																	if ($tobool180) {
																		__label__ = 72;;
																	} else {
																		__label__ = 73;;
																	}
																	if (__label__ == 72) {
																		$add_points = 23;;
																	} else if (__label__ == 73) {
																		$failed = 1;
																		__label__ = 30;
																		break $if_then8$$if_end70$12;
																	}
																} else if (__label__ == 74) {
																	var $108 = $command;
																	var $and185 = ($108) & 240;
																	var $cmp186 = ((($and185)) | 0) == 32;
																	if (!($cmp186)) {
																		__label__ = 181;
																		break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
																	}
																	var $109 = $word_addr;
																	var $110 = HEAP32[(($109) >> 2)];
																	var $111 = $word_start_addr;
																	var $sub_ptr_lhs_cast = ($110);
																	var $sub_ptr_rhs_cast = ($111);
																	var $sub_ptr_rhs_cast_neg = (((-($sub_ptr_rhs_cast))) & 4294967295);
																	var $112 = $consumed;
																	var $113 = $group_length_addr;
																	var $sub_ptr_sub = ((($sub_ptr_lhs_cast) + 1) & 4294967295);
																	var $add188 = ((($sub_ptr_sub) + ($112)) & 4294967295);
																	var $add189 = ((($add188) + ($sub_ptr_rhs_cast_neg)) & 4294967295);
																	var $add190 = ((($add189) + ($113)) & 4294967295);
																	$ix = $add190;
																	var $114 = $word_start_addr;
																	var $add_ptr191 = (($114 + -1) & 4294967295);
																	var $115 = $ix;
																	var $src$, $dest$, $stop$, $stop4$, $fast$;
																	$src$ = $add_ptr191;
																	$dest$ = $arraydecay;
																	$stop$ = $src$ + $115;
																	if (($dest$ % 4) == ($src$ % 4) && $115 > 8) {
																		while ($src$ % 4 !== 0 && $src$ < $stop$) {;
																			HEAP8[$dest$++] = HEAP8[$src$++];
																		}
																		$src$ >>= 2;
																		$dest$ >>= 2;
																		$stop4$ = $stop$ >> 2;
																		while ($src$ < $stop4$) {;;;
																			HEAP32[$dest$++] = HEAP32[$src$++];
																		}
																		$src$ <<= 2;
																		$dest$ <<= 2;
																	}
																	while ($src$ < $stop$) {;
																		HEAP8[$dest$++] = HEAP8[$src$++];
																	};
																	var $116 = $ix;
																	var $arrayidx192 = (($word_buf + $116) & 4294967295);
																	HEAP8[($arrayidx192)] = 32;
																	var $117 = $ix;
																	var $add193 = ((($117) + 1) & 4294967295);
																	var $arrayidx194 = (($word_buf + $add193) & 4294967295);
																	HEAP8[($arrayidx194)] = 0;
																	var $118 = $tr_addr;
																	var $call196 = __Z11LookupFlagsP10TranslatorPKc($118, $arrayidx195);
																	var $119 = $command;
																	var $and197 = ($119) & 15;
																	var $add198 = ((($and197) + 19) & 4294967295);
																	var $shl199 = 1 << ($add198);
																	var $and200 = ($shl199) & ($call196);
																	var $tobool201 = ((($and200)) | 0) != 0;
																	if ($tobool201) {
																		__label__ = 76;;
																	} else {
																		__label__ = 77;;
																	}
																	if (__label__ == 76) {
																		$add_points = 23;;
																	} else if (__label__ == 77) {
																		$failed = 1;
																		__label__ = 30;
																		break $if_then8$$if_end70$12;
																	}
																}
															}
														} else if (__label__ == 78) {
															var $120 = $letter;
															var $conv209 = ((($120)) & 255);
															var $cmp210 = ((($conv209)) | 0) == 45;
															if ($cmp210) {
																__label__ = 81;;
															} else {
																__label__ = 79;;
															}
															$if_then217$$lor_lhs_false211$113: do {
																if (__label__ == 79) {
																	var $121 = $letter;
																	var $conv212 = ((($121)) & 255);
																	var $cmp213 = ((($conv212)) | 0) == 32;
																	if ($cmp213) {
																		__label__ = 80;;
																	} else {
																		__label__ = 82;;
																	}
																	if (__label__ == 80) {
																		var $122 = $word_flags_addr;
																		var $and215 = ($122) & 16384;
																		var $tobool216 = ((($and215)) | 0) != 0;
																		if ($tobool216) {
																			__label__ = 81;
																			break $if_then217$$lor_lhs_false211$113;
																		}
																	}
																	$failed = 1;
																	__label__ = 30;
																	break $if_then8$$if_end70$12;
																}
															} while (0);
															var $123 = $distance_right;
															var $sub218 = ((22 - ($123)) & 4294967295);
															$add_points = $sub218;;
														} else if (__label__ == 83) {
															var $124 = $post_ptr;
															var $125 = $letter_xbytes;
															var $add_ptr223 = (($124 + $125) & 4294967295);
															$p222 = $add_ptr223;
															$vowel_count = 0;
															$syllable_count = 1;
															var $126 = $rule_addr;
															var $127 = HEAP8[($126)];
															var $conv22514 = (tempInt = (($127)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $cmp22615 = ((($conv22514)) | 0) == 21;
															if ($cmp22615) {
																__label__ = 84;;
															} else {
																__label__ = 85;;
															}
															$while_body227$$while_end230$120: do {
																if (__label__ == 84) {
																	while (1) {
																		var $128 = $rule_addr;
																		var $incdec_ptr228 = (($128 + 1) & 4294967295);
																		$rule_addr = $incdec_ptr228;
																		var $129 = $syllable_count;
																		var $add229 = ((($129) + 1) & 4294967295);
																		$syllable_count = $add229;
																		var $130 = $rule_addr;
																		var $131 = HEAP8[($130)];
																		var $conv225 = (tempInt = (($131)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																		var $cmp226 = ((($conv225)) | 0) == 21;
																		if ($cmp226) {
																			__label__ = 84;
																			continue;
																		} else {
																			__label__ = 85;
																			break $while_body227$$while_end230$120;
																		}
																	}
																}
															} while (0);
															$vowel = 0;
															var $132 = HEAP32[(($letter_w) >> 2)];
															var $cmp23216 = ((($132)) | 0) != 32;
															if ($cmp23216) {
																__lastLabel__ = 85;
																__label__ = 87;;
															} else {
																__lastLabel__ = 85;
																__label__ = 91;;
															}
															$while_body233$$while_end244$124: do {
																if (__label__ == 87) {
																	$while_body233$125: while (1) {
																		var $133 = __lastLabel__ == 86 ? $_pr24 : (0);
																		var $cmp234 = ((($133)) | 0) == 0;
																		if ($cmp234) {
																			__label__ = 88;;
																		} else {
																			__label__ = 90;;
																		}
																		$land_lhs_true235$$if_end240$127: do {
																			if (__label__ == 88) {
																				var $134 = $tr_addr;
																				var $135 = HEAP32[(($letter_w) >> 2)];
																				var $call236 = __ZL8IsLetterP10Translatorii($134, $135, 7);
																				var $tobool237 = ((($call236)) | 0) != 0;
																				if (!($tobool237)) {
																					__label__ = 90;
																					break $land_lhs_true235$$if_end240$127;
																				}
																				var $136 = $vowel_count;
																				var $inc239 = ((($136) + 1) & 4294967295);
																				$vowel_count = $inc239;;
																			}
																		} while (0);
																		var $137 = $tr_addr;
																		var $138 = HEAP32[(($letter_w) >> 2)];
																		var $call241 = __ZL8IsLetterP10Translatorii($137, $138, 7);
																		$vowel = $call241;
																		var $139 = $p222;
																		var $call242 = __Z7utf8_inPiPKc($letter_w, $139);
																		var $140 = $p222;
																		var $add_ptr243 = (($140 + $call242) & 4294967295);
																		$p222 = $add_ptr243;
																		var $141 = HEAP32[(($letter_w) >> 2)];
																		var $cmp232 = ((($141)) | 0) != 32;
																		if (!($cmp232)) {
																			__label__ = 91;
																			break $while_body233$$while_end244$124;
																		}
																		var $_pr24 = $vowel;
																		__lastLabel__ = 86;
																		__label__ = 87;
																		continue $while_body233$125;
																	}
																}
															} while (0);
															var $142 = $syllable_count;
															var $143 = $vowel_count;
															var $cmp245 = ((($142)) | 0) <= ((($143)) | 0);
															if ($cmp245) {
																__label__ = 92;;
															} else {
																__label__ = 93;;
															}
															if (__label__ == 92) {
																var $144 = $syllable_count;
																var $145 = $distance_right;
																var $_neg = (((-($145))) & 4294967295);
																var $add247 = ((($144) + 18) & 4294967295);
																var $sub248 = ((($add247) + ($_neg)) & 4294967295);
																$add_points = $sub248;;
															} else if (__label__ == 93) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 94) {
															var $146 = $post_ptr;
															var $147 = $letter_xbytes;
															var $add_ptr253 = (($146 + $147) & 4294967295);
															$p252 = $add_ptr253;;
															while (1) {
																var $148 = HEAP32[(($letter_w) >> 2)];
																var $cmp255 = ((($148)) | 0) != 32;
																if (!($cmp255)) {
																	__label__ = 99;
																	break;
																}
																var $149 = $tr_addr;
																var $150 = HEAP32[(($letter_w) >> 2)];
																var $call257 = __ZL8IsLetterP10Translatorii($149, $150, 7);
																var $tobool258 = ((($call257)) | 0) != 0;
																if ($tobool258) {
																	__label__ = 97;
																	break;
																}
																var $151 = $p252;
																var $call261 = __Z7utf8_inPiPKc($letter_w, $151);
																var $152 = $p252;
																var $add_ptr262 = (($152 + $call261) & 4294967295);
																$p252 = $add_ptr262;
																__label__ = 95;
																continue;
															}
															if (__label__ == 99) {
																var $_pr2 = $failed;
																var $tobool264 = ((($_pr2)) | 0) != 0;
																if ($tobool264) {
																	__label__ = 30;
																	break $if_then8$$if_end70$12;
																}
																var $153 = $distance_right;
																var $sub266 = ((19 - ($153)) & 4294967295);
																$add_points = $sub266;;
															} else if (__label__ == 97) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 101) {
															var $154 = $post_ptr;
															var $155 = $letter_xbytes;
															var $add_ptr270 = (($154 + $155) & 4294967295);
															$p269 = $add_ptr270;
															var $156 = $p269;
															$p2 = $156;
															var $157 = $rule_addr;
															var $call271 = __Z7utf8_inPiPKc($rule_w, $157);
															var $158 = HEAP32[(($letter_w) >> 2)];
															var $159 = HEAP32[(($rule_w) >> 2)];
															var $cmp27317 = ((($158)) | 0) != ((($159)) | 0);
															var $160 = HEAP32[(($letter_w) >> 2)];
															var $cmp27518 = ((($160)) | 0) != 32;
															var $or_cond19 = ($cmp27317) & ($cmp27518);
															if ($or_cond19) {
																__label__ = 102;;
															} else {
																__label__ = 103;;
															}
															$while_body277$$while_end280$146: do {
																if (__label__ == 102) {
																	while (1) {
																		var $161 = $p269;
																		$p2 = $161;
																		var $162 = $p269;
																		var $call278 = __Z7utf8_inPiPKc($letter_w, $162);
																		var $163 = $p269;
																		var $add_ptr279 = (($163 + $call278) & 4294967295);
																		$p269 = $add_ptr279;
																		var $164 = HEAP32[(($letter_w) >> 2)];
																		var $165 = HEAP32[(($rule_w) >> 2)];
																		var $cmp273 = ((($164)) | 0) != ((($165)) | 0);
																		var $166 = HEAP32[(($letter_w) >> 2)];
																		var $cmp275 = ((($166)) | 0) != 32;
																		var $or_cond = ($cmp273) & ($cmp275);
																		if ($or_cond) {
																			__label__ = 102;
																			continue;
																		} else {
																			__label__ = 103;
																			break $while_body277$$while_end280$146;
																		}
																	}
																}
															} while (0);
															var $167 = HEAP32[(($letter_w) >> 2)];
															var $168 = HEAP32[(($rule_w) >> 2)];
															var $cmp281 = ((($167)) | 0) == ((($168)) | 0);
															if (!($cmp281)) {
																__label__ = 181;
																break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
															}
															var $169 = $p2;
															$post_ptr = $169;;
														} else if (__label__ == 105) {
															$add_points = 20;;
														} else if (__label__ == 106) {
															var $170 = $word_addr;
															var $171 = HEAP32[(($170) >> 2)];
															var $172 = $group_length_addr;
															var $add_ptr286 = (($171 + $172) & 4294967295);
															$p = $add_ptr286;;
															while (1) {
																var $173 = $p;
																var $174 = $post_ptr;
																var $cmp287 = ((($173)) >>> 0) < ((($174)) >>> 0);
																if (!($cmp287)) {
																	__label__ = 181;
																	break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
																}
																var $175 = $p;
																var $176 = HEAP8[($175)];
																var $conv288 = (tempInt = (($176)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																var $cmp289 = ((($conv288)) | 0) == 101;
																var $177 = $p;
																if ($cmp289) {
																	__label__ = 109;
																	break;
																}
																var $incdec_ptr293 = (($177 + 1) & 4294967295);
																$p = $incdec_ptr293;
																__label__ = 107;
																continue;
															}
															HEAP32[(($del_fwd291) >> 2)] = $177;;
														} else if (__label__ == 111) {
															var $178 = $rule_addr;
															var $arrayidx295 = (($178) & 4294967295);
															var $179 = HEAP8[($arrayidx295)];
															var $conv296 = (tempInt = (($179)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $shl297 = ((($conv296) * 65536) & 4294967295);
															var $180 = $rule_addr;
															var $arrayidx298 = (($180 + 1) & 4294967295);
															var $181 = HEAP8[($arrayidx298)];
															var $conv299 = (tempInt = (($181)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $and300 = ($conv299) & 127;
															var $shl301 = ((($and300) * 256) & 4294967295);
															var $182 = $rule_addr;
															var $arrayidx303 = (($182 + 2) & 4294967295);
															var $183 = HEAP8[($arrayidx303)];
															var $conv304 = (tempInt = (($183)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $and305 = ($conv304) & 127;
															var $add302 = ((($shl301) + ($shl297)) & 4294967295);
															var $add306 = ((($add302) + ($and305)) & 4294967295);
															HEAP32[(($end_type307) >> 2)] = $add306;
															var $184 = $rule_addr;
															var $add_ptr308 = (($184 + 3) & 4294967295);
															$rule_addr = $add_ptr308;;
														} else if (__label__ == 112) {
															var $185 = $word_flags_addr;
															var $and310 = ($185) & 8192;
															var $tobool311 = ((($and310)) | 0) != 0;
															if ($tobool311) {
																__label__ = 113;;
															} else {
																__label__ = 114;;
															}
															if (__label__ == 113) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															} else if (__label__ == 114) {
																$add_points = 1;;
															}
														}
													} else if (__label__ == 119) {
														var $190 = $distance_left;
														var $add329 = ((($190) + 2) & 4294967295);
														$distance_left = $add329;
														var $191 = $distance_left;
														var $cmp330 = ((($191)) | 0) > 18;
														if ($cmp330) {
															__label__ = 120;;
														} else {
															__label__ = 121;;
														}
														if (__label__ == 120) {
															$distance_left = 19;;
														}
														var $192 = $pre_ptr;
														var $193 = HEAP8[($192)];
														$last_letter = $193;
														var $194 = $pre_ptr;
														var $incdec_ptr333 = (($194 + -1) & 4294967295);
														$pre_ptr = $incdec_ptr333;
														var $195 = $pre_ptr;
														var $call334 = __Z8utf8_in2PiPKci($letter_w, $195, 1);
														var $sub335 = ((($call334) - 1) & 4294967295);
														$letter_xbytes = $sub335;
														var $196 = $pre_ptr;
														var $197 = HEAP8[($196)];
														$letter = $197;
														var $198 = $rb;
														var $conv336 = ((($198)) & 255);
														if ($conv336 == 17) {
															__label__ = 122;;
														} else if ($conv336 == 18) {
															__label__ = 127;;
														} else if ($conv336 == 25) {
															__label__ = 130;;
														} else if ($conv336 == 11) {
															__label__ = 133;;
														} else if ($conv336 == 15) {
															__label__ = 136;;
														} else if ($conv336 == 16) {
															__label__ = 139;;
														} else if ($conv336 == 21) {
															__label__ = 142;;
														} else if ($conv336 == 10) {
															__label__ = 147;;
														} else if ($conv336 == 29) {
															__label__ = 150;;
														} else if ($conv336 == 26) {
															__label__ = 157;;
														} else if ($conv336 == 19) {
															__label__ = 160;;
														} else if ($conv336 == 46) {
															__label__ = 163;;
														} else if ($conv336 == 45) {
															__label__ = 170;;
														} else {
															__label__ = 175;;
														}
														if (__label__ == 175) {
															var $268 = $letter;
															var $conv478 = ((($268)) & 255);
															var $269 = $rb;
															var $conv479 = ((($269)) & 255);
															var $cmp480 = ((($conv478)) | 0) == ((($conv479)) | 0);
															if ($cmp480) {
																__label__ = 176;;
															} else {
																__label__ = 180;;
															}
															if (__label__ == 176) {
																var $270 = $letter;
																var $conv482 = ((($270)) & 255);
																var $cmp483 = ((($conv482)) | 0) == 32;
																if ($cmp483) {
																	__label__ = 177;;
																} else {
																	__label__ = 178;;
																}
																if (__label__ == 177) {
																	$add_points = 4;;
																} else if (__label__ == 178) {
																	var $271 = $letter;
																	var $conv486 = ((($271)) & 255);
																	var $and487 = ($conv486) & 192;
																	var $cmp488 = ((($and487)) | 0) != 128;
																	if (!($cmp488)) {
																		__label__ = 181;
																		break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
																	}
																	var $272 = $distance_left;
																	var $sub490 = ((21 - ($272)) & 4294967295);
																	$add_points = $sub490;;
																}
															} else if (__label__ == 180) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 122) {
															var $199 = $rule_addr;
															var $incdec_ptr338 = (($199 + 1) & 4294967295);
															$rule_addr = $incdec_ptr338;
															var $200 = HEAP8[($199)];
															var $conv339 = (tempInt = (($200)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $sub340 = ((($conv339) - 65) & 4294967295);
															$letter_group = $sub340;
															var $201 = $tr_addr;
															var $202 = HEAP32[(($letter_w) >> 2)];
															var $203 = $letter_group;
															var $call341 = __ZL8IsLetterP10Translatorii($201, $202, $203);
															var $tobool342 = ((($call341)) | 0) != 0;
															if ($tobool342) {
																__label__ = 123;;
															} else {
																__label__ = 126;;
															}
															if (__label__ == 123) {
																$lg_pts = 20;
																var $204 = $letter_group;
																var $cmp344 = ((($204)) | 0) == 2;
																if ($cmp344) {
																	__label__ = 124;;
																} else {
																	__label__ = 125;;
																}
																if (__label__ == 124) {
																	$lg_pts = 19;;
																}
																var $205 = $lg_pts;
																var $206 = $distance_left;
																var $sub347 = ((($205) - ($206)) & 4294967295);
																$add_points = $sub347;
																var $207 = $letter_xbytes;
																var $208 = $pre_ptr;
																var $idx_neg = (((-($207))) & 4294967295);
																var $add_ptr348 = (($208 + $idx_neg) & 4294967295);
																$pre_ptr = $add_ptr348;;
															} else if (__label__ == 126) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 127) {
															var $209 = $rule_addr;
															var $incdec_ptr352 = (($209 + 1) & 4294967295);
															$rule_addr = $incdec_ptr352;
															var $210 = HEAP8[($209)];
															var $conv353 = (tempInt = (($210)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $sub354 = ((($conv353) - 65) & 4294967295);
															$letter_group = $sub354;
															var $211 = $tr_addr;
															var $212 = $pre_ptr;
															var $213 = $letter_group;
															var $call355 = __ZL13IsLetterGroupP10TranslatorPcii($211, $212, $213, 1);
															$n_bytes = $call355;
															var $cmp356 = ((($call355)) | 0) > 0;
															if ($cmp356) {
																__label__ = 128;;
															} else {
																__label__ = 129;;
															}
															if (__label__ == 128) {
																var $214 = $distance_right;
																var $sub358 = ((20 - ($214)) & 4294967295);
																$add_points = $sub358;
																var $215 = $n_bytes;
																var $sub359 = ((($215) - 1) & 4294967295);
																var $216 = $pre_ptr;
																var $idx_neg360 = (((-($sub359))) & 4294967295);
																var $add_ptr361 = (($216 + $idx_neg360) & 4294967295);
																$pre_ptr = $add_ptr361;;
															} else if (__label__ == 129) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 130) {
															var $217 = $tr_addr;
															var $218 = HEAP32[(($letter_w) >> 2)];
															var $call365 = __ZL8IsLetterP10Translatorii($217, $218, 0);
															var $tobool366 = ((($call365)) | 0) != 0;
															if ($tobool366) {
																__label__ = 132;;
															} else {
																__label__ = 131;;
															}
															if (__label__ == 132) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															} else if (__label__ == 131) {
																var $219 = $distance_left;
																var $sub368 = ((20 - ($219)) & 4294967295);
																$add_points = $sub368;
																var $220 = $letter_xbytes;
																var $221 = $pre_ptr;
																var $idx_neg369 = (((-($220))) & 4294967295);
																var $add_ptr370 = (($221 + $idx_neg369) & 4294967295);
																$pre_ptr = $add_ptr370;;
															}
														} else if (__label__ == 133) {
															var $222 = $letter;
															var $conv374 = ((($222)) & 255);
															var $223 = $last_letter;
															var $conv375 = ((($223)) & 255);
															var $cmp376 = ((($conv374)) | 0) == ((($conv375)) | 0);
															if ($cmp376) {
																__label__ = 134;;
															} else {
																__label__ = 135;;
															}
															if (__label__ == 134) {
																var $224 = $distance_left;
																var $sub378 = ((21 - ($224)) & 4294967295);
																$add_points = $sub378;;
															} else if (__label__ == 135) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 136) {
															var $225 = HEAP32[(($letter_w) >> 2)];
															var $call382 = __Z7IsDigitj($225);
															var $tobool383 = ((($call382)) | 0) != 0;
															if ($tobool383) {
																__label__ = 137;;
															} else {
																__label__ = 138;;
															}
															if (__label__ == 137) {
																var $226 = $distance_left;
																var $sub385 = ((21 - ($226)) & 4294967295);
																$add_points = $sub385;
																var $227 = $letter_xbytes;
																var $228 = $pre_ptr;
																var $idx_neg386 = (((-($227))) & 4294967295);
																var $add_ptr387 = (($228 + $idx_neg386) & 4294967295);
																$pre_ptr = $add_ptr387;;
															} else if (__label__ == 138) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 139) {
															var $229 = HEAP32[(($letter_w) >> 2)];
															var $call391 = _iswalpha($229);
															var $tobool392 = ((($call391)) | 0) != 0;
															if ($tobool392) {
																__label__ = 141;;
															} else {
																__label__ = 140;;
															}
															if (__label__ == 141) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															} else if (__label__ == 140) {
																var $230 = $distance_right;
																var $sub394 = ((21 - ($230)) & 4294967295);
																$add_points = $sub394;
																var $231 = $letter_xbytes;
																var $232 = $pre_ptr;
																var $idx_neg395 = (((-($231))) & 4294967295);
																var $add_ptr396 = (($232 + $idx_neg395) & 4294967295);
																$pre_ptr = $add_ptr396;;
															}
														} else if (__label__ == 142) {
															$syllable_count = 1;
															var $233 = $rule_addr;
															var $234 = HEAP8[($233)];
															var $conv40112 = (tempInt = (($234)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $cmp40213 = ((($conv40112)) | 0) == 21;
															if ($cmp40213) {
																__label__ = 143;;
															} else {
																__label__ = 144;;
															}
															$while_body403$$while_end406$204: do {
																if (__label__ == 143) {
																	while (1) {
																		var $235 = $rule_addr;
																		var $incdec_ptr404 = (($235 + 1) & 4294967295);
																		$rule_addr = $incdec_ptr404;
																		var $236 = $syllable_count;
																		var $inc405 = ((($236) + 1) & 4294967295);
																		$syllable_count = $inc405;
																		var $237 = $rule_addr;
																		var $238 = HEAP8[($237)];
																		var $conv401 = (tempInt = (($238)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																		var $cmp402 = ((($conv401)) | 0) == 21;
																		if ($cmp402) {
																			__label__ = 143;
																			continue;
																		} else {
																			__label__ = 144;
																			break $while_body403$$while_end406$204;
																		}
																	}
																}
															} while (0);
															var $239 = $syllable_count;
															var $240 = $tr_addr;
															var $word_vowel_count = (($240 + 8296) & 4294967295);
															var $241 = HEAP32[(($word_vowel_count) >> 2)];
															var $cmp407 = ((($239)) | 0) <= ((($241)) | 0);
															if ($cmp407) {
																__label__ = 145;;
															} else {
																__label__ = 146;;
															}
															if (__label__ == 145) {
																var $242 = $syllable_count;
																var $243 = $distance_left;
																var $_neg11 = (((-($243))) & 4294967295);
																var $add409 = ((($242) + 18) & 4294967295);
																var $sub410 = ((($add409) + ($_neg11)) & 4294967295);
																$add_points = $sub410;;
															} else if (__label__ == 146) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 147) {
															var $244 = $tr_addr;
															var $word_stressed_count = (($244 + 8300) & 4294967295);
															var $245 = HEAP32[(($word_stressed_count) >> 2)];
															var $cmp414 = ((($245)) | 0) > 0;
															if ($cmp414) {
																__label__ = 148;;
															} else {
																__label__ = 149;;
															}
															if (__label__ == 148) {
																$add_points = 19;;
															} else if (__label__ == 149) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 150) {
															var $246 = $pre_ptr;
															var $247 = $letter_xbytes;
															var $idx_neg420 = (((-($247))) & 4294967295);
															var $add_ptr421 = (($246 + $idx_neg420) & 4294967295);
															var $add_ptr422 = (($add_ptr421 + -1) & 4294967295);
															$p419 = $add_ptr422;;
															while (1) {
																var $248 = HEAP32[(($letter_w) >> 2)];
																var $cmp424 = ((($248)) | 0) != 32;
																if (!($cmp424)) {
																	__label__ = 155;
																	break;
																}
																var $249 = $tr_addr;
																var $250 = HEAP32[(($letter_w) >> 2)];
																var $call426 = __ZL8IsLetterP10Translatorii($249, $250, 7);
																var $tobool427 = ((($call426)) | 0) != 0;
																if ($tobool427) {
																	__label__ = 153;
																	break;
																}
																var $251 = $p419;
																var $call430 = __Z8utf8_in2PiPKci($letter_w, $251, 1);
																var $252 = $p419;
																var $idx_neg431 = (((-($call430))) & 4294967295);
																var $add_ptr432 = (($252 + $idx_neg431) & 4294967295);
																$p419 = $add_ptr432;
																__label__ = 151;
																continue;
															}
															if (__label__ == 155) {
																var $_pr4 = $failed;
																var $tobool434 = ((($_pr4)) | 0) != 0;
																if ($tobool434) {
																	__label__ = 30;
																	break $if_then8$$if_end70$12;
																}
																$add_points = 3;;
															} else if (__label__ == 153) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 157) {
															var $253 = $tr_addr;
															var $expect_verb = (($253 + 8272) & 4294967295);
															var $254 = HEAP32[(($expect_verb) >> 2)];
															var $tobool438 = ((($254)) | 0) != 0;
															if ($tobool438) {
																__label__ = 158;;
															} else {
																__label__ = 159;;
															}
															if (__label__ == 158) {
																$add_points = 1;;
															} else if (__label__ == 159) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 160) {
															var $255 = $word_flags_addr;
															var $and443 = ($255) & 2;
															var $tobool444 = ((($and443)) | 0) != 0;
															if ($tobool444) {
																__label__ = 161;;
															} else {
																__label__ = 162;;
															}
															if (__label__ == 161) {
																$add_points = 1;;
															} else if (__label__ == 162) {
																$failed = 1;
																__label__ = 30;
																break $if_then8$$if_end70$12;
															}
														} else if (__label__ == 163) {
															var $256 = $pre_ptr;
															$p = $256;;
															while (1) {
																var $257 = $p;
																var $258 = HEAP8[($257)];
																var $conv450 = (tempInt = (($258)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																var $cmp451 = ((($conv450)) | 0) != 32;
																if (!($cmp451)) {
																	__label__ = 168;
																	break;
																}
																var $259 = $p;
																var $260 = HEAP8[($259)];
																var $conv453 = (tempInt = (($260)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																var $cmp454 = ((($conv453)) | 0) == 46;
																if ($cmp454) {
																	__label__ = 166;
																	break;
																}
																var $261 = $p;
																var $incdec_ptr458 = (($261 + -1) & 4294967295);
																$p = $incdec_ptr458;
																__label__ = 164;
																continue;
															}
															if (__label__ == 166) {
																$add_points = 50;;
															}
															var $262 = $p;
															var $263 = HEAP8[($262)];
															var $conv460 = (tempInt = (($263)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $cmp461 = ((($conv460)) | 0) == 32;
															if (!($cmp461)) {
																__label__ = 181;
																break $sw_epilog496$$sw_bb71$$sw_bb89$$sw_bb328$44;
															}
															$failed = 1;
															__label__ = 30;
															break $if_then8$$if_end70$12;
														} else if (__label__ == 170) {
															var $264 = $letter;
															var $conv465 = ((($264)) & 255);
															var $cmp466 = ((($conv465)) | 0) == 45;
															if ($cmp466) {
																__label__ = 173;;
															} else {
																__label__ = 171;;
															}
															$if_then473$$lor_lhs_false467$242: do {
																if (__label__ == 171) {
																	var $265 = $letter;
																	var $conv468 = ((($265)) & 255);
																	var $cmp469 = ((($conv468)) | 0) == 32;
																	if ($cmp469) {
																		__label__ = 172;;
																	} else {
																		__label__ = 174;;
																	}
																	if (__label__ == 172) {
																		var $266 = $word_flags_addr;
																		var $and471 = ($266) & 128;
																		var $tobool472 = ((($and471)) | 0) != 0;
																		if ($tobool472) {
																			__label__ = 173;
																			break $if_then473$$lor_lhs_false467$242;
																		}
																	}
																	$failed = 1;
																	__label__ = 30;
																	break $if_then8$$if_end70$12;
																}
															} while (0);
															var $267 = $distance_right;
															var $sub474 = ((22 - ($267)) & 4294967295);
															$add_points = $sub474;;
														}
													}
												} while (0);
												var $_pr6_pr = $failed;
												var $cmp497 = ((($_pr6_pr)) | 0) == 0;
												if (!($cmp497)) {
													__label__ = 30;
													break $if_then8$$if_end70$12;
												}
												var $273 = $add_points;
												var $274 = HEAP32[(($points499) >> 2)];
												var $add500 = ((($274) + ($273)) & 4294967295);
												HEAP32[(($points499) >> 2)] = $add500;;
											}
										} while (0);
										var $42 = $failed;
										var $tobool = ((($42)) | 0) != 0;
										var $lnot = ($tobool) ^ 1;
										if ($lnot) {
											__lastLabel__ = 30;
											__label__ = 6;
											continue $while_body4$10;
										} else {
											__lastLabel__ = 30;
											__label__ = 183;
											break $while_body4$$while_end502$9;
										}
									}
								}
							} while (0);
							var $275 = __lastLabel__ == 30 ? $42 : ($18);
							var $cmp503 = ((($275)) | 0) == 2;
							if ($cmp503) {
								__label__ = 184;;
							} else {
								__label__ = 197;;
							}
							$land_lhs_true504$$while_cond543$252: do {
								if (__label__ == 184) {
									var $276 = $unpron_ignore;
									var $cmp505 = ((($276)) | 0) == 0;
									if (!($cmp505)) {
										__label__ = 197;
										break $land_lhs_true504$$while_cond543$252;
									}
									var $277 = $check_atstart;
									var $cmp507 = ((($277)) | 0) == 0;
									if ($cmp507) {
										__label__ = 189;;
									} else {
										__label__ = 186;;
									}
									$if_end517$$lor_lhs_false508$255: do {
										if (__label__ == 186) {
											var $278 = $pre_ptr;
											var $arrayidx509 = (($278 + -1) & 4294967295);
											var $279 = HEAP8[($arrayidx509)];
											var $conv510 = (tempInt = (($279)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp511 = ((($conv510)) | 0) == 32;
											if (!($cmp511)) {
												__label__ = 197;
												break $land_lhs_true504$$while_cond543$252;
											}
											var $_pr8 = $check_atstart;
											var $tobool513 = ((($_pr8)) | 0) != 0;
											if (!($tobool513)) {
												__label__ = 189;
												break $if_end517$$lor_lhs_false508$255;
											}
											var $280 = HEAP32[(($points515) >> 2)];
											var $add516 = ((($280) + 4) & 4294967295);
											HEAP32[(($points515) >> 2)] = $add516;;
										}
									} while (0);
									var $281 = HEAP32[(($points518) >> 2)];
									var $282 = HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best) & 4294967295)) >> 2)];
									var $cmp519 = ((($281)) | 0) >= ((($282)) | 0);
									if ($cmp519) {
										__label__ = 190;;
									} else {
										__label__ = 191;;
									}
									if (__label__ == 190) {
										var $src$, $dest$, $stop$, $stop4$, $fast$;
										$src$ = $8;
										$dest$ = __ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best;
										$stop$ = $src$ + 16;
										if (($dest$ % 4) == ($src$ % 4) && 16 > 8) {
											while ($src$ % 4 !== 0 && $src$ < $stop$) {;
												HEAP8[$dest$++] = HEAP8[$src$++];
											}
											$src$ >>= 2;
											$dest$ >>= 2;
											$stop4$ = $stop$ >> 2;
											while ($src$ < $stop4$) {;;;
												HEAP32[$dest$++] = HEAP32[$src$++];
											}
											$src$ <<= 2;
											$dest$ <<= 2;
										}
										while ($src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										};
										var $283 = $consumed;
										$total_consumed = $283;;
									}
									var $284 = HEAP32[((_option_phonemes) >> 2)];
									var $cmp522 = ((($284)) | 0) == 2;
									if (!($cmp522)) {
										__label__ = 197;
										break $land_lhs_true504$$while_cond543$252;
									}
									var $285 = HEAP32[(($points524) >> 2)];
									var $cmp525 = ((($285)) | 0) > 0;
									if (!($cmp525)) {
										__label__ = 197;
										break $land_lhs_true504$$while_cond543$252;
									}
									var $286 = $word_flags_addr;
									var $and527 = ($286) & 268435456;
									var $cmp528 = ((($and527)) | 0) == 0;
									if (!($cmp528)) {
										__label__ = 197;
										break $land_lhs_true504$$while_cond543$252;
									}
									var $287 = HEAP32[(($points530) >> 2)];
									$pts = $287;
									var $288 = $group_length_addr;
									var $cmp531 = ((($288)) | 0) > 1;
									if ($cmp531) {
										__label__ = 195;;
									} else {
										__label__ = 196;;
									}
									if (__label__ == 195) {
										var $289 = $pts;
										var $add533 = ((($289) + 35) & 4294967295);
										$pts = $add533;;
									}
									var $290 = HEAP32[(($phonemes535) >> 2)];
									__Z14DecodePhonemesPKcPc($290, $arraydecay536);
									var $291 = HEAP32[((_f_trans) >> 2)];
									var $292 = $pts;
									var $293 = $group_chars;
									var $294 = $group_length_addr;
									var $295 = $rule_start;
									var $296 = $word_flags_addr;
									var $call537 = __Z10DecodeRulePKciPci($293, $294, $295, $296);
									var $call539 = _fprintf($291, ((__str32148) & 4294967295), allocate([$292, 0, 0, 0, ((__ZZ10DecodeRulePKciPciE6output) & 4294967295), 0, 0, 0, $arraydecay538, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
								}
							} while (0);
							while (1) {
								var $297 = $rule_addr;
								var $incdec_ptr544 = (($297 + 1) & 4294967295);
								$rule_addr = $incdec_ptr544;
								var $298 = HEAP8[($297)];
								var $conv545 = (tempInt = (($298)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp546 = ((($conv545)) | 0) != 0;
								if ($cmp546) {
									__label__ = 197;
									continue;
								} else {
									__label__ = 4;
									break;
								}
							}
							var $9 = $rule_addr;
							var $arrayidx = (($9) & 4294967295);
							var $10 = HEAP8[($arrayidx)];
							var $conv = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp1 = ((($conv)) | 0) != 7;
							if ($cmp1) {
								__label__ = 5;
								continue $while_body$7;
							} else {
								__label__ = 198;
								break $while_body_lr_ph$$while_end549$5;
							}
						}
					}
				} while (0);
				var $299 = HEAP32[((_option_phonemes) >> 2)];
				var $cmp550 = ((($299)) | 0) == 2;
				if ($cmp550) {
					__label__ = 199;;
				} else {
					__label__ = 202;;
				}
				$land_lhs_true551$$if_end559$273: do {
					if (__label__ == 199) {
						var $300 = $word_flags_addr;
						var $and552 = ($300) & 268435456;
						var $cmp553 = ((($and552)) | 0) == 0;
						if (!($cmp553)) {
							__label__ = 202;
							break $land_lhs_true551$$if_end559$273;
						}
						var $301 = $group_length_addr;
						var $cmp555 = ((($301)) | 0) <= 1;
						if (!($cmp555)) {
							__label__ = 202;
							break $land_lhs_true551$$if_end559$273;
						}
						var $302 = HEAP32[((_f_trans) >> 2)];
						var $fputc = _fputc(10, $302);;
					}
				} while (0);
				var $303 = $group_length_addr;
				var $304 = $total_consumed;
				var $add560 = ((($304) + ($303)) & 4294967295);
				$total_consumed = $add560;
				var $cmp561 = ((($add560)) | 0) == 0;
				if ($cmp561) {
					__label__ = 203;;
				} else {
					__label__ = 204;;
				}
				if (__label__ == 203) {
					$total_consumed = 1;;
				}
				var $305 = $total_consumed;
				var $306 = $word_addr;
				var $307 = HEAP32[(($306) >> 2)];
				var $add_ptr564 = (($307 + $305) & 4294967295);
				HEAP32[(($306) >> 2)] = $add_ptr564;
				var $308 = HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best) & 4294967295)) >> 2)];
				var $cmp565 = ((($308)) | 0) == 0;
				if ($cmp565) {
					__label__ = 205;;
				} else {
					__label__ = 206;;
				}
				if (__label__ == 205) {
					HEAP32[((((__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best + 4) & 4294967295)) >> 2)] = ((__str13643) & 4294967295);;
				}
				var $309 = $match_out_addr;
				var $310 = $309;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = __ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best;
				$dest$ = $310;
				$stop$ = $src$ + 16;
				if (($dest$ % 4) == ($src$ % 4) && 16 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z21ApplySpecialAttributeP10TranslatorPci($tr, $phonemes, $dict_flags) {;
			var __label__;
			var $tr_addr;
			var $phonemes_addr;
			var $dict_flags_addr;
			var $len;
			var $p_end;
			$tr_addr = $tr;
			$phonemes_addr = $phonemes;
			$dict_flags_addr = $dict_flags;
			var $0 = $dict_flags_addr;
			var $and = ($0) & 3145728;
			var $cmp = ((($and)) | 0) == 0;
			if ($cmp) {
				__label__ = 4;;
			} else {
				__label__ = 1;;
			}
			$sw_epilog$$if_end$2: do {
				if (__label__ == 1) {
					var $1 = $phonemes_addr;
					var $call = _strlen($1);
					$len = $call;
					var $2 = $len;
					var $sub = ((($2) - 1) & 4294967295);
					var $3 = $phonemes_addr;
					var $arrayidx = (($3 + $sub) & 4294967295);
					$p_end = $arrayidx;
					var $4 = $tr_addr;
					var $translator_name = (($4 + 280) & 4294967295);
					var $5 = HEAP32[(($translator_name) >> 2)];
					var $cond = ((($5)) | 0) == 29295;
					if (!($cond)) {
						__label__ = 4;
						break $sw_epilog$$if_end$2;
					}
					var $6 = $p_end;
					var $arrayidx1 = (($6) & 4294967295);
					var $7 = HEAP8[($arrayidx1)];
					var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $call2 = __Z11PhonemeCodej(106);
					var $cmp3 = ((($conv)) | 0) == ((($call2)) | 0);
					if (!($cmp3)) {
						__label__ = 4;
						break $sw_epilog$$if_end$2;
					}
					var $8 = $p_end;
					var $arrayidx5 = (($8) & 4294967295);
					HEAP8[($arrayidx5)] = 6;
					var $call6 = __Z11PhonemeCodej(105);
					var $conv7 = ((($call6)) & 255);
					var $9 = $p_end;
					var $arrayidx8 = (($9 + 1) & 4294967295);
					HEAP8[($arrayidx8)] = $conv7;
					var $10 = $p_end;
					var $arrayidx9 = (($10 + 2) & 4294967295);
					HEAP8[($arrayidx9)] = 0;;
				}
			} while (0);;
			return;
			return;
		}

		function __Z22ApplySpecialAttribute2P10TranslatorPci($tr, $phonemes, $dict_flags) {;
			var __label__;
			var $tr_addr;
			var $phonemes_addr;
			var $dict_flags_addr;
			var $ix;
			var $len;
			var $p;
			$tr_addr = $tr;
			$phonemes_addr = $phonemes;
			$dict_flags_addr = $dict_flags;
			var $0 = $phonemes_addr;
			var $call = _strlen($0);
			$len = $call;
			var $1 = $tr_addr;
			var $langopts = (($1) & 4294967295);
			var $param = (($langopts + 24) & 4294967295);
			var $arrayidx = (($param + 60) & 4294967295);
			var $2 = HEAP32[(($arrayidx) >> 2)];
			var $and = ($2) & 2;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 14;;
			}
			$if_then$$if_end37$2: do {
				if (__label__ == 1) {
					$ix = 0;;
					while (1) {
						var $3 = $ix;
						var $4 = $len;
						var $sub = ((($4) - 1) & 4294967295);
						var $cmp = ((($3)) | 0) < ((($sub)) | 0);
						if (!($cmp)) {
							__label__ = 14;
							break $if_then$$if_end37$2;
						}
						var $5 = $ix;
						var $6 = $phonemes_addr;
						var $arrayidx1 = (($6 + $5) & 4294967295);
						var $7 = HEAP8[($arrayidx1)];
						var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp2 = ((($conv)) | 0) == 6;
						var $8 = $ix;
						var $add = ((($8) + 1) & 4294967295);
						if ($cmp2) {
							__label__ = 4;
							break;
						}
						$ix = $add;
						__label__ = 2;
						continue;
					}
					var $9 = $phonemes_addr;
					var $arrayidx4 = (($9 + $add) & 4294967295);
					$p = $arrayidx4;
					var $10 = $dict_flags_addr;
					var $and5 = ($10) & 2097152;
					var $cmp6 = ((($and5)) | 0) != 0;
					var $11 = $p;
					var $12 = HEAP8[($11)];
					var $conv8 = (tempInt = (($12)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					if ($cmp6) {
						__label__ = 5;;
					} else {
						__label__ = 9;;
					}
					if (__label__ == 5) {
						var $call9 = __Z11PhonemeCodej(69);
						var $cmp10 = ((($conv8)) | 0) == ((($call9)) | 0);
						if ($cmp10) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						if (__label__ == 6) {
							var $call12 = __Z11PhonemeCodej(101);
							var $conv13 = ((($call12)) & 255);
							var $13 = $p;
							HEAP8[($13)] = $conv13;;
						}
						var $14 = $p;
						var $15 = HEAP8[($14)];
						var $conv14 = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call15 = __Z11PhonemeCodej(79);
						var $cmp16 = ((($conv14)) | 0) == ((($call15)) | 0);
						if (!($cmp16)) {
							__label__ = 14;
							break $if_then$$if_end37$2;
						}
						var $call18 = __Z11PhonemeCodej(111);
						var $conv19 = ((($call18)) & 255);
						var $16 = $p;
						HEAP8[($16)] = $conv19;;
					} else if (__label__ == 9) {
						var $call22 = __Z11PhonemeCodej(101);
						var $cmp23 = ((($conv8)) | 0) == ((($call22)) | 0);
						if ($cmp23) {
							__label__ = 10;;
						} else {
							__label__ = 11;;
						}
						if (__label__ == 10) {
							var $call25 = __Z11PhonemeCodej(69);
							var $conv26 = ((($call25)) & 255);
							var $17 = $p;
							HEAP8[($17)] = $conv26;;
						}
						var $18 = $p;
						var $19 = HEAP8[($18)];
						var $conv28 = (tempInt = (($19)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call29 = __Z11PhonemeCodej(111);
						var $cmp30 = ((($conv28)) | 0) == ((($call29)) | 0);
						if (!($cmp30)) {
							__label__ = 14;
							break $if_then$$if_end37$2;
						}
						var $call32 = __Z11PhonemeCodej(79);
						var $conv33 = ((($call32)) & 255);
						var $20 = $p;
						HEAP8[($20)] = $conv33;;
					}
				}
			} while (0);;
			return;
			return;
		}

		function __Z17TransposeAlphabetP10TranslatorPc($tr, $text) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $text_addr;
			var $c = __stackBase__;
			var $c2;
			var $ix;
			var $offset;
			var $min;
			var $max;
			var $p;
			var $p2;
			var $all_alpha;
			var $bits;
			var $acc;
			var $pairs_start;
			var $pairs_list;
			$tr_addr = $tr;
			$text_addr = $text;
			var $0 = $text_addr;
			$p = $0;
			var $1 = $text_addr;
			$p2 = $1;
			$all_alpha = 1;
			var $2 = $tr_addr;
			var $transpose_min = (($2 + 288) & 4294967295);
			var $3 = HEAP32[(($transpose_min) >> 2)];
			var $sub = ((($3) - 1) & 4294967295);
			$offset = $sub;
			var $4 = $tr_addr;
			var $transpose_min1 = (($4 + 288) & 4294967295);
			var $5 = HEAP32[(($transpose_min1) >> 2)];
			$min = $5;
			var $6 = $tr_addr;
			var $transpose_max = (($6 + 284) & 4294967295);
			var $7 = HEAP32[(($transpose_max) >> 2)];
			$max = $7;
			var $8 = $max;
			var $9 = $min;
			var $_neg = (((-($9))) & 4294967295);
			var $sub2 = ((($8) + 2) & 4294967295);
			var $add = ((($sub2) + ($_neg)) & 4294967295);
			$pairs_start = $add;;
			$do_body$2: while (1) {
				var $10 = $p;
				var $call = __Z7utf8_inPiPKc($c, $10);
				var $11 = $p;
				var $add_ptr = (($11 + $call) & 4294967295);
				$p = $add_ptr;
				var $12 = HEAP32[(($c) >> 2)];
				var $13 = $min;
				var $cmp = ((($12)) | 0) >= ((($13)) | 0);
				if ($cmp) {
					__lastLabel__ = 1;
					__label__ = 2;;
				} else {
					__lastLabel__ = 1;
					__label__ = 4;;
				}
				$land_lhs_true$$if_else$4: do {
					if (__label__ == 2) {
						var $14 = HEAP32[(($c) >> 2)];
						var $15 = $max;
						var $cmp3 = ((($14)) | 0) <= ((($15)) | 0);
						if ($cmp3) {
							__lastLabel__ = 2;;
						} else {
							__lastLabel__ = 2;
							__label__ = 4;
							break $land_lhs_true$$if_else$4;
						}
						var $16 = HEAP32[(($c) >> 2)];
						var $17 = $offset;
						var $sub4 = ((($16) - ($17)) & 4294967295);
						var $conv = ((($sub4)) & 255);
						var $18 = $p2;
						var $incdec_ptr = (($18 + 1) & 4294967295);
						$p2 = $incdec_ptr;
						HEAP8[($18)] = $conv;
						__label__ = 6;
						break $land_lhs_true$$if_else$4;
					}
				} while (0);
				$do_cond$$if_else$7: do {
					if (__label__ == 4) {
						var $19 = __lastLabel__ == 2 ? $14 : ($12);
						var $cmp5 = ((($19)) | 0) != 0;
						if (!($cmp5)) {
							__label__ = 6;
							break $do_cond$$if_else$7;
						}
						var $20 = HEAP32[(($c) >> 2)];
						var $21 = $p2;
						var $call7 = __Z8utf8_outjPc($20, $21);
						var $22 = $p2;
						var $add_ptr8 = (($22 + $call7) & 4294967295);
						$p2 = $add_ptr8;
						$all_alpha = 0;;
					}
				} while (0);
				var $23 = HEAP32[(($c) >> 2)];
				var $cmp10 = ((($23)) | 0) != 0;
				if ($cmp10) {
					__label__ = 1;
					continue $do_body$2;
				} else {
					__label__ = 7;
					break $do_body$2;
				}
			}
			var $24 = $p2;
			HEAP8[($24)] = 0;
			var $25 = $all_alpha;
			var $tobool = ((($25)) | 0) != 0;
			if ($tobool) {
				__label__ = 8;;
			} else {
				__label__ = 21;;
			}
			if (__label__ == 8) {
				$acc = 0;
				$bits = 0;
				var $26 = $text_addr;
				$p = $26;
				var $27 = $text_addr;
				$p2 = $27;
				var $28 = $p;
				var $incdec_ptr121 = (($28 + 1) & 4294967295);
				$p = $incdec_ptr121;
				var $29 = HEAP8[($28)];
				var $conv132 = (tempInt = (($29)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				HEAP32[(($c) >> 2)] = $conv132;
				var $cmp143 = ((($conv132)) | 0) != 0;
				if ($cmp143) {
					__label__ = 9;;
				} else {
					__label__ = 18;;
				}
				$while_body$$while_end$14: do {
					if (__label__ == 9) {
						$while_body$15: while (1) {
							var $30 = $tr_addr;
							var $frequent_pairs = (($30 + 8268) & 4294967295);
							var $31 = HEAP32[(($frequent_pairs) >> 2)];
							$pairs_list = $31;
							var $cmp15 = ((($31)) | 0) != 0;
							if ($cmp15) {
								__label__ = 10;;
							} else {
								__label__ = 15;;
							}
							$if_then16$$if_end28$17: do {
								if (__label__ == 10) {
									var $32 = HEAP32[(($c) >> 2)];
									var $33 = $p;
									var $34 = HEAP8[($33)];
									var $conv17 = (tempInt = (($34)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $shl = ((($conv17) * 256) & 4294967295);
									var $add18 = ((($shl) + ($32)) & 4294967295);
									$c2 = $add18;
									$ix = 0;;
									while (1) {
										var $35 = $c2;
										var $36 = $ix;
										var $37 = $pairs_list;
										var $arrayidx = (($37 + 2 * $36) & 4294967295);
										var $38 = HEAP16[(($arrayidx) >> 1)];
										var $conv19 = (tempInt = (($38)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $cmp20 = ((($35)) | 0) >= ((($conv19)) | 0);
										if (!($cmp20)) {
											__label__ = 15;
											break $if_then16$$if_end28$17;
										}
										var $39 = $c2;
										var $40 = $ix;
										var $41 = $pairs_list;
										var $arrayidx21 = (($41 + 2 * $40) & 4294967295);
										var $42 = HEAP16[(($arrayidx21) >> 1)];
										var $conv22 = (tempInt = (($42)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $cmp23 = ((($39)) | 0) == ((($conv22)) | 0);
										var $43 = $ix;
										if ($cmp23) {
											__label__ = 13;
											break;
										}
										var $inc = ((($43) + 1) & 4294967295);
										$ix = $inc;
										__label__ = 11;
										continue;
									}
									var $44 = $pairs_start;
									var $add25 = ((($44) + ($43)) & 4294967295);
									HEAP32[(($c) >> 2)] = $add25;
									var $45 = $p;
									var $incdec_ptr26 = (($45 + 1) & 4294967295);
									$p = $incdec_ptr26;;
								}
							} while (0);
							var $46 = $acc;
							var $shl29 = ((($46) * 64) & 4294967295);
							var $47 = HEAP32[(($c) >> 2)];
							var $and = ($47) & 63;
							var $add30 = ((($and) + ($shl29)) & 4294967295);
							$acc = $add30;
							var $48 = $bits;
							var $add31 = ((($48) + 6) & 4294967295);
							$bits = $add31;
							var $cmp32 = ((($add31)) | 0) >= 8;
							if ($cmp32) {
								__label__ = 16;;
							} else {
								__label__ = 17;;
							}
							if (__label__ == 16) {
								var $49 = $bits;
								var $sub34 = ((($49) - 8) & 4294967295);
								$bits = $sub34;
								var $50 = $acc;
								var $51 = $bits;
								var $shr = ($50) >> ((($51)) | 0);
								var $conv35 = ((($shr)) & 255);
								var $52 = $p2;
								var $incdec_ptr36 = (($52 + 1) & 4294967295);
								$p2 = $incdec_ptr36;
								HEAP8[($52)] = $conv35;;
							}
							var $53 = $p;
							var $incdec_ptr12 = (($53 + 1) & 4294967295);
							$p = $incdec_ptr12;
							var $54 = HEAP8[($53)];
							var $conv13 = (tempInt = (($54)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							HEAP32[(($c) >> 2)] = $conv13;
							var $cmp14 = ((($conv13)) | 0) != 0;
							if ($cmp14) {
								__label__ = 9;
								continue $while_body$15;
							} else {
								__label__ = 18;
								break $while_body$$while_end$14;
							}
						}
					}
				} while (0);
				var $55 = $bits;
				var $cmp38 = ((($55)) | 0) > 0;
				if ($cmp38) {
					__label__ = 19;;
				} else {
					__label__ = 20;;
				}
				if (__label__ == 19) {
					var $56 = $acc;
					var $57 = $bits;
					var $sub40 = ((8 - ($57)) & 4294967295);
					var $shl41 = ($56) << ($sub40);
					var $conv42 = ((($shl41)) & 255);
					var $58 = $p2;
					var $incdec_ptr43 = (($58 + 1) & 4294967295);
					$p2 = $incdec_ptr43;
					HEAP8[($58)] = $conv42;;
				}
				var $59 = $p2;
				HEAP8[($59)] = 0;
				var $60 = $p2;
				var $61 = $text_addr;
				var $sub_ptr_lhs_cast = ($60);
				var $sub_ptr_rhs_cast = ($61);
				var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
				var $or = ($sub_ptr_sub) | 64;
				$retval = $or;;
			} else if (__label__ == 21) {
				var $62 = $p2;
				var $63 = $text_addr;
				var $sub_ptr_lhs_cast46 = ($62);
				var $sub_ptr_rhs_cast47 = ($63);
				var $sub_ptr_sub48 = ((($sub_ptr_lhs_cast46) - ($sub_ptr_rhs_cast47)) & 4294967295);
				$retval = $sub_ptr_sub48;;
			}
			var $64 = $retval;
			STACKTOP = __stackBase__;
			return $64;
			return null;
		}

		function __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($tr, $wordptr, $ph_out, $flags, $end_flags, $wtab) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 164;
			_memset(__stackBase__, 0, 164);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $wordptr_addr;
			var $ph_out_addr;
			var $flags_addr;
			var $end_flags_addr;
			var $wtab_addr;
			var $length;
			var $found;
			var $word1;
			var $word2;
			var $c;
			var $nbytes;
			var $len;
			var $word = __stackBase__;
			var $letter = __stackBase__ + 160;
			$tr_addr = $tr;
			$wordptr_addr = $wordptr;
			$ph_out_addr = $ph_out;
			$flags_addr = $flags;
			$end_flags_addr = $end_flags;
			$wtab_addr = $wtab;
			$length = 0;
			var $0 = $wordptr_addr;
			var $1 = HEAP32[(($0) >> 2)];
			$word1 = $1;
			$word2 = $1;;
			$while_cond$2: while (1) {
				var $2 = $word2;
				var $call = __Z11utf8_nbytesPKc($2);
				$nbytes = $call;
				var $3 = $word2;
				var $arrayidx = (($3 + $call) & 4294967295);
				var $4 = HEAP8[($arrayidx)];
				var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp = ((($conv)) | 0) == 32;
				if (!($cmp)) {
					__label__ = 2;
					break $while_cond$2;
				}
				var $6 = $nbytes;
				var $add = ((($6) + 1) & 4294967295);
				var $7 = $word2;
				var $arrayidx1 = (($7 + $add) & 4294967295);
				var $8 = HEAP8[($arrayidx1)];
				var $conv2 = (tempInt = (($8)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp3 = ((($conv2)) | 0) == 46;
				var $9 = $length;
				if ($cmp3) {
					__lastLabel__ = 3;;
				} else {
					__lastLabel__ = 3;
					__label__ = 5;
					break $while_cond$2;
				}
				var $arrayidx4 = (($word + $9) & 4294967295);
				var $10 = $word2;
				var $11 = $nbytes;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $10;
				$dest$ = $arrayidx4;
				$stop$ = $src$ + $11;
				if (($dest$ % 4) == ($src$ % 4) && $11 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $12 = $nbytes;
				var $13 = $length;
				var $add5 = ((($13) + ($12)) & 4294967295);
				$length = $add5;
				var $14 = $length;
				var $inc = ((($14) + 1) & 4294967295);
				$length = $inc;
				var $arrayidx6 = (($word + $14) & 4294967295);
				HEAP8[($arrayidx6)] = 46;
				var $15 = $nbytes;
				var $add7 = ((($15) + 3) & 4294967295);
				var $16 = $word2;
				var $add_ptr = (($16 + $add7) & 4294967295);
				$word2 = $add_ptr;
				__label__ = 1;
				continue $while_cond$2;
			}
			if (__label__ == 2) {
				var $5 = $length;
				__lastLabel__ = 2;;
			}
			var $17 = __lastLabel__ == 2 ? $5 : ($9);
			var $cmp8 = ((($17)) | 0) > 0;
			if ($cmp8) {
				__label__ = 6;;
			} else {
				__label__ = 12;;
			}
			$if_then$$if_end26$9: do {
				if (__label__ == 6) {
					$nbytes = 0;;
					while (1) {
						var $18 = $nbytes;
						var $19 = $word2;
						var $arrayidx10 = (($19 + $18) & 4294967295);
						var $20 = HEAPU8[($arrayidx10)];
						$c = $20;
						var $conv11 = ((($20)) & 255);
						var $cmp12 = ((($conv11)) | 0) != 0;
						if (!($cmp12)) {
							__label__ = 10;
							break;
						}
						var $21 = $c;
						var $conv14 = ((($21)) & 255);
						var $cmp15 = ((($conv14)) | 0) != 32;
						if (!($cmp15)) {
							__label__ = 10;
							break;
						}
						var $22 = $nbytes;
						var $inc18 = ((($22) + 1) & 4294967295);
						$nbytes = $inc18;
						__label__ = 7;
						continue;
					}
					var $23 = $length;
					var $arrayidx20 = (($word + $23) & 4294967295);
					var $24 = $word2;
					var $25 = $nbytes;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $24;
					$dest$ = $arrayidx20;
					$stop$ = $src$ + $25;
					if (($dest$ % 4) == ($src$ % 4) && $25 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $26 = $length;
					var $27 = $nbytes;
					var $add21 = ((($27) + ($26)) & 4294967295);
					var $arrayidx22 = (($word + $add21) & 4294967295);
					HEAP8[($arrayidx22)] = 0;
					var $28 = $tr_addr;
					var $arraydecay = (($word) & 4294967295);
					var $29 = $word2;
					var $30 = $ph_out_addr;
					var $31 = $flags_addr;
					var $32 = $end_flags_addr;
					var $33 = $wtab_addr;
					var $call23 = __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($28, $arraydecay, $29, $30, $31, $32, $33);
					$found = $call23;
					var $tobool = ((($call23)) | 0) != 0;
					if (!($tobool)) {
						__label__ = 12;
						break $if_then$$if_end26$9;
					}
					var $34 = $flags_addr;
					var $arrayidx25 = (($34) & 4294967295);
					var $35 = HEAP32[(($arrayidx25) >> 2)];
					var $or = ($35) | 128;
					HEAP32[(($arrayidx25) >> 2)] = $or;
					var $36 = $length;
					HEAP32[((_dictionary_skipwords) >> 2)] = $36;
					$retval = 1;
					__label__ = 50;
					break $if_then$$if_end26$9;
				}
			} while (0);
			if (__label__ == 12) {
				$length = 0;
				__lastLabel__ = 12;;
				$for_cond$19: while (1) {
					var $37 = __lastLabel__ == 19 ? $inc45 : (0);
					var $cmp27 = ((($37)) | 0) < 159;
					if (!($cmp27)) {
						__label__ = 20;
						break $for_cond$19;
					}
					var $38 = $word1;
					var $incdec_ptr = (($38 + 1) & 4294967295);
					$word1 = $incdec_ptr;
					var $39 = HEAPU8[($38)];
					$c = $39;
					var $conv28 = ((($39)) & 255);
					var $cmp29 = ((($conv28)) | 0) == 0;
					if ($cmp29) {
						__label__ = 20;
						break $for_cond$19;
					}
					var $40 = $c;
					var $conv30 = ((($40)) & 255);
					var $cmp31 = ((($conv30)) | 0) == 32;
					if ($cmp31) {
						__label__ = 20;
						break $for_cond$19;
					}
					var $41 = $c;
					var $conv34 = ((($41)) & 255);
					var $cmp35 = ((($conv34)) | 0) == 46;
					if ($cmp35) {
						__label__ = 17;;
					} else {
						__label__ = 19;;
					}
					$land_lhs_true$$if_end43$24: do {
						if (__label__ == 17) {
							var $42 = $length;
							var $cmp36 = ((($42)) | 0) > 0;
							if (!($cmp36)) {
								__label__ = 19;
								break $land_lhs_true$$if_end43$24;
							}
							var $43 = $length;
							var $sub = ((($43) - 1) & 4294967295);
							var $arrayidx38 = (($word + $sub) & 4294967295);
							var $44 = HEAP8[($arrayidx38)];
							var $conv39 = (tempInt = (($44)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp = ((($conv39) - 48) & 4294967295);
							var $isdigit = ((($isdigittmp)) >>> 0) < 10;
							var $call40 = ((($isdigit)) & 1);
							var $tobool41 = ((($call40)) | 0) != 0;
							if ($tobool41) {
								__label__ = 20;
								break $for_cond$19;
							}
						}
					} while (0);
					var $45 = $c;
					var $46 = $length;
					var $arrayidx44 = (($word + $46) & 4294967295);
					HEAP8[($arrayidx44)] = $45;
					var $47 = $length;
					var $inc45 = ((($47) + 1) & 4294967295);
					$length = $inc45;
					__lastLabel__ = 19;
					__label__ = 13;
					continue $for_cond$19;
				}
				var $48 = $length;
				var $arrayidx46 = (($word + $48) & 4294967295);
				HEAP8[($arrayidx46)] = 0;
				var $49 = $tr_addr;
				var $arraydecay47 = (($word) & 4294967295);
				var $50 = $word1;
				var $51 = $ph_out_addr;
				var $52 = $flags_addr;
				var $53 = $end_flags_addr;
				var $54 = $wtab_addr;
				var $call48 = __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($49, $arraydecay47, $50, $51, $52, $53, $54);
				$found = $call48;
				var $55 = $flags_addr;
				var $arrayidx49 = (($55) & 4294967295);
				var $56 = HEAP32[(($arrayidx49) >> 2)];
				var $and = ($56) & 134217728;
				var $tobool50 = ((($and)) | 0) != 0;
				if ($tobool50) {
					__label__ = 21;;
				} else {
					__label__ = 25;;
				}
				$if_then51$$if_else66$29: do {
					if (__label__ == 21) {
						var $57 = $ph_out_addr;
						var $58 = $tr_addr;
						var $phonemes_repeat = (($58 + 632) & 4294967295);
						var $arraydecay52 = (($phonemes_repeat) & 4294967295);
						var $call53 = _strcmp($57, $arraydecay52);
						var $cmp54 = ((($call53)) | 0) == 0;
						var $59 = $tr_addr;
						if ($cmp54) {
							__label__ = 22;;
						} else {
							__label__ = 24;;
						}
						if (__label__ == 22) {
							var $phonemes_repeat_count = (($59 + 652) & 4294967295);
							var $60 = HEAP32[(($phonemes_repeat_count) >> 2)];
							var $inc56 = ((($60) + 1) & 4294967295);
							HEAP32[(($phonemes_repeat_count) >> 2)] = $inc56;
							var $61 = $tr_addr;
							var $phonemes_repeat_count57 = (($61 + 652) & 4294967295);
							var $62 = HEAP32[(($phonemes_repeat_count57) >> 2)];
							var $cmp58 = ((($62)) | 0) > 3;
							if (!($cmp58)) {
								__label__ = 26;
								break $if_then51$$if_else66$29;
							}
							var $63 = $ph_out_addr;
							var $arrayidx60 = (($63) & 4294967295);
							HEAP8[($arrayidx60)] = 0;;
						} else if (__label__ == 24) {
							var $phonemes_repeat62 = (($59 + 632) & 4294967295);
							var $arraydecay63 = (($phonemes_repeat62) & 4294967295);
							var $64 = $ph_out_addr;
							__Z8strncpy0PcPKci($arraydecay63, $64, 20);
							var $65 = $tr_addr;
							var $phonemes_repeat_count64 = (($65 + 652) & 4294967295);
							HEAP32[(($phonemes_repeat_count64) >> 2)] = 1;;
						}
					} else if (__label__ == 25) {
						var $66 = $tr_addr;
						var $phonemes_repeat_count67 = (($66 + 652) & 4294967295);
						HEAP32[(($phonemes_repeat_count67) >> 2)] = 0;;
					}
				} while (0);
				var $67 = $found;
				var $cmp69 = ((($67)) | 0) == 0;
				if ($cmp69) {
					__label__ = 27;;
				} else {
					__label__ = 39;;
				}
				$land_lhs_true70$$if_end117thread_pre_split$37: do {
					if (__label__ == 27) {
						var $68 = $flags_addr;
						var $arrayidx71 = (($68 + 4) & 4294967295);
						var $69 = HEAP32[(($arrayidx71) >> 2)];
						var $and72 = ($69) & 2048;
						var $tobool73 = ((($and72)) | 0) != 0;
						if ($tobool73) {
							__label__ = 28;;
						} else {
							__label__ = 31;;
						}
						if (__label__ == 28) {
							var $arraydecay75 = (($word) & 4294967295);
							$word2 = $arraydecay75;
							var $70 = $word2;
							var $71 = HEAP8[($70)];
							var $conv76 = (tempInt = (($71)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp77 = ((($conv76)) | 0) == 95;
							if ($cmp77) {
								__label__ = 29;;
							} else {
								__label__ = 30;;
							}
							if (__label__ == 29) {
								var $72 = $word2;
								var $incdec_ptr79 = (($72 + 1) & 4294967295);
								$word2 = $incdec_ptr79;;
							}
							var $73 = $word2;
							var $call81 = __Z7utf8_inPiPKc($letter, $73);
							$len = $call81;
							var $74 = $tr_addr;
							var $75 = HEAP32[(($letter) >> 2)];
							var $76 = $ph_out_addr;
							__Z20LookupAccentedLetterP10TranslatorjPc($74, $75, $76);
							var $77 = $word2;
							var $78 = $len;
							var $add_ptr82 = (($77 + $78) & 4294967295);
							$found = $add_ptr82;
							__lastLabel__ = 30;;
						} else if (__label__ == 31) {
							var $_pr = $found;
							__lastLabel__ = 31;;
						}
						var $79 = __lastLabel__ == 31 ? $_pr : ($add_ptr82);
						var $cmp84 = ((($79)) | 0) == 0;
						if (!($cmp84)) {
							__label__ = 39;
							break $land_lhs_true70$$if_end117thread_pre_split$37;
						}
						var $80 = $ph_out_addr;
						var $arrayidx86 = (($80) & 4294967295);
						HEAP8[($arrayidx86)] = 0;
						var $81 = $end_flags_addr;
						var $and87 = ($81) & 16;
						var $tobool88 = ((($and87)) | 0) != 0;
						if ($tobool88) {
							__label__ = 34;;
						} else {
							__label__ = 36;;
						}
						$land_lhs_true89$$if_else99$47: do {
							if (__label__ == 34) {
								var $82 = $length;
								var $sub90 = ((($82) - 1) & 4294967295);
								var $arrayidx91 = (($word + $sub90) & 4294967295);
								var $83 = HEAP8[($arrayidx91)];
								var $conv92 = (tempInt = (($83)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp93 = ((($conv92)) | 0) == 101;
								if (!($cmp93)) {
									__label__ = 36;
									break $land_lhs_true89$$if_else99$47;
								}
								var $84 = $length;
								var $sub95 = ((($84) - 1) & 4294967295);
								var $arrayidx96 = (($word + $sub95) & 4294967295);
								HEAP8[($arrayidx96)] = 0;
								var $85 = $tr_addr;
								var $arraydecay97 = (($word) & 4294967295);
								var $86 = $word1;
								var $87 = $ph_out_addr;
								var $88 = $flags_addr;
								var $89 = $end_flags_addr;
								var $90 = $wtab_addr;
								var $call98 = __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($85, $arraydecay97, $86, $87, $88, $89, $90);
								$found = $call98;
								__lastLabel__ = 35;
								__label__ = 40;
								break $land_lhs_true70$$if_end117thread_pre_split$37;
							}
						} while (0);
						var $91 = $end_flags_addr;
						var $and100 = ($91) & 4096;
						var $tobool101 = ((($and100)) | 0) != 0;
						if (!($tobool101)) {
							__label__ = 39;
							break $land_lhs_true70$$if_end117thread_pre_split$37;
						}
						var $92 = $length;
						var $sub103 = ((($92) - 1) & 4294967295);
						var $arrayidx104 = (($word + $sub103) & 4294967295);
						var $93 = HEAP8[($arrayidx104)];
						var $conv105 = (tempInt = (($93)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $94 = $length;
						var $sub106 = ((($94) - 2) & 4294967295);
						var $arrayidx107 = (($word + $sub106) & 4294967295);
						var $95 = HEAP8[($arrayidx107)];
						var $conv108 = (tempInt = (($95)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp109 = ((($conv105)) | 0) == ((($conv108)) | 0);
						if (!($cmp109)) {
							__label__ = 39;
							break $land_lhs_true70$$if_end117thread_pre_split$37;
						}
						var $96 = $length;
						var $sub111 = ((($96) - 1) & 4294967295);
						var $arrayidx112 = (($word + $sub111) & 4294967295);
						HEAP8[($arrayidx112)] = 0;
						var $97 = $tr_addr;
						var $arraydecay113 = (($word) & 4294967295);
						var $98 = $word1;
						var $99 = $ph_out_addr;
						var $100 = $flags_addr;
						var $101 = $end_flags_addr;
						var $102 = $wtab_addr;
						var $call114 = __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($97, $arraydecay113, $98, $99, $100, $101, $102);
						$found = $call114;
						__lastLabel__ = 38;
						__label__ = 40;
						break $land_lhs_true70$$if_end117thread_pre_split$37;
					}
				} while (0);
				if (__label__ == 39) {
					var $_pr2 = $found;
					__lastLabel__ = 39;;
				}
				var $103 = __lastLabel__ == 39 ? $_pr2 : (__lastLabel__ == 35 ? $call98 : ($call114));
				var $tobool118 = ((($103)) | 0) != 0;
				if ($tobool118) {
					__label__ = 41;;
				} else {
					__label__ = 49;;
				}
				if (__label__ == 41) {
					var $104 = $tr_addr;
					var $langopts = (($104) & 4294967295);
					var $textmode = (($langopts + 252) & 4294967295);
					var $105 = HEAP8[($textmode)];
					var $tobool120 = (tempInt = (($105)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
					if ($tobool120) {
						__label__ = 42;;
					} else {
						__label__ = 43;;
					}
					if (__label__ == 42) {
						var $106 = $flags_addr;
						var $107 = HEAP32[(($106) >> 2)];
						var $xor = ($107) ^ 536870912;
						HEAP32[(($106) >> 2)] = $xor;;
					}
					var $108 = $flags_addr;
					var $109 = HEAP32[(($108) >> 2)];
					var $and123 = ($109) & 536870912;
					var $tobool124 = ((($and123)) | 0) != 0;
					if ($tobool124) {
						__label__ = 44;;
					} else {
						__label__ = 48;;
					}
					if (__label__ == 44) {
						var $110 = $end_flags_addr;
						var $and126 = ($110) & 2;
						var $tobool127 = ((($and126)) | 0) != 0;
						if ($tobool127) {
							__label__ = 45;;
						} else {
							__label__ = 47;;
						}
						$if_then128$$if_end138$63: do {
							if (__label__ == 45) {
								HEAP8[(((__ZZ14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TABE16word_replacement) & 4294967295))] = 0;
								HEAP8[(((__ZZ14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TABE16word_replacement + 1) & 4294967295))] = 32;
								var $111 = $ph_out_addr;
								var $call129 = _sprintf(((__ZZ14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TABE16word_replacement + 2) & 4294967295), ((__str15131) & 4294967295), allocate([$111, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								var $112 = $wordptr_addr;
								var $113 = HEAP32[(($112) >> 2)];
								$word1 = $113;
								var $114 = $wordptr_addr;
								HEAP32[(($114) >> 2)] = ((__ZZ14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TABE16word_replacement + 2) & 4294967295);
								var $115 = HEAP32[((_option_phonemes) >> 2)];
								var $cmp130 = ((($115)) | 0) == 2;
								if (!($cmp130)) {
									__label__ = 47;
									break $if_then128$$if_end138$63;
								}
								var $116 = $found;
								var $117 = $word1;
								var $sub_ptr_lhs_cast = ($116);
								var $sub_ptr_rhs_cast = ($117);
								var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
								$len = $sub_ptr_sub;
								var $arraydecay132 = (($word) & 4294967295);
								var $118 = $word1;
								var $119 = $len;
								var $src$, $dest$, $stop$, $stop4$, $fast$;
								$src$ = $118;
								$dest$ = $arraydecay132;
								$stop$ = $src$ + $119;
								if (($dest$ % 4) == ($src$ % 4) && $119 > 8) {
									while ($src$ % 4 !== 0 && $src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									}
									$src$ >>= 2;
									$dest$ >>= 2;
									$stop4$ = $stop$ >> 2;
									while ($src$ < $stop4$) {;;;
										HEAP32[$dest$++] = HEAP32[$src$++];
									}
									$src$ <<= 2;
									$dest$ <<= 2;
								}
								while ($src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								};
								var $120 = $len;
								var $arrayidx133 = (($word + $120) & 4294967295);
								HEAP8[($arrayidx133)] = 0;
								var $121 = HEAP32[((_f_trans) >> 2)];
								var $arraydecay134 = (($word) & 4294967295);
								var $122 = $wordptr_addr;
								var $123 = HEAP32[(($122) >> 2)];
								var $call135 = _fprintf($121, ((__str16132) & 4294967295), allocate([$arraydecay134, 0, 0, 0, $123, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
							}
						} while (0);
						var $124 = $ph_out_addr;
						var $arrayidx139 = (($124) & 4294967295);
						HEAP8[($arrayidx139)] = 0;
						$retval = 0;;
					} else if (__label__ == 48) {
						$retval = 1;;
					}
				} else if (__label__ == 49) {
					var $125 = $ph_out_addr;
					var $arrayidx142 = (($125) & 4294967295);
					HEAP8[($arrayidx142)] = 0;
					$retval = 0;;
				}
			}
			var $126 = $retval;
			STACKTOP = __stackBase__;
			return $126;
			return null;
		}

		function __ZL11LookupDict2P10TranslatorPKcS2_PcPjiP8WORD_TAB($tr, $word, $word2, $phonetic, $flags, $end_flags, $wtab) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 320;
			_memset(__stackBase__, 0, 320);
			var __label__;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $word2_addr;
			var $phonetic_addr;
			var $flags_addr;
			var $end_flags_addr;
			var $wtab_addr;
			var $p;
			var $next;
			var $hash;
			var $phoneme_len;
			var $wlen;
			var $flag;
			var $dictionary_flags;
			var $dictionary_flags2;
			var $condition_failed;
			var $n_chars;
			var $no_phonemes;
			var $skipwords;
			var $ix;
			var $word_end;
			var $word1;
			var $wflags;
			var $word_buf = __stackBase__;
			var $flags1259;
			var $ph_decoded = __stackBase__ + 160;
			var $textmode;
			$tr_addr = $tr;
			$word_addr = $word;
			$word2_addr = $word2;
			$phonetic_addr = $phonetic;
			$flags_addr = $flags;
			$end_flags_addr = $end_flags;
			$wtab_addr = $wtab;
			$condition_failed = 0;
			$wflags = 0;
			var $0 = $wtab_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $wtab_addr;
				var $flags1 = (($1) & 4294967295);
				var $2 = HEAP32[(($flags1) >> 2)];
				$wflags = $2;;
			}
			var $3 = $word_addr;
			$word1 = $3;
			var $4 = $tr_addr;
			var $transpose_min = (($4 + 288) & 4294967295);
			var $5 = HEAP32[(($transpose_min) >> 2)];
			var $cmp2 = ((($5)) | 0) > 0;
			if ($cmp2) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $arraydecay = (($word_buf) & 4294967295);
				var $6 = $word_addr;
				var $call = _strcpy($arraydecay, $6);
				var $7 = $tr_addr;
				var $arraydecay4 = (($word_buf) & 4294967295);
				var $call5 = __Z17TransposeAlphabetP10TranslatorPc($7, $arraydecay4);
				$wlen = $call5;
				var $arraydecay6 = (($word_buf) & 4294967295);
				$word_addr = $arraydecay6;;
			} else if (__label__ == 4) {
				var $8 = $word_addr;
				var $call7 = _strlen($8);
				$wlen = $call7;;
			}
			var $9 = $word_addr;
			var $call9 = __Z14HashDictionaryPKc($9);
			$hash = $call9;
			var $10 = $hash;
			var $11 = $tr_addr;
			var $dict_hashtab = (($11 + 1056) & 4294967295);
			var $arrayidx = (($dict_hashtab + $10 * 4) & 4294967295);
			var $12 = HEAP32[(($arrayidx) >> 2)];
			$p = $12;
			var $cmp10 = ((($12)) | 0) == 0;
			if ($cmp10) {
				__label__ = 6;;
			} else {
				__label__ = 9;;
			}
			if (__label__ == 6) {
				var $13 = $flags_addr;
				var $cmp12 = ((($13)) | 0) != 0;
				if ($cmp12) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $14 = $flags_addr;
					HEAP32[(($14) >> 2)] = 0;;
				}
				$retval = 0;;
			} else if (__label__ == 9) {
				$while_cond$14: while (1) {
					var $15 = $p;
					var $16 = HEAP8[($15)];
					var $conv = (tempInt = (($16)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp16 = ((($conv)) | 0) != 0;
					if (!($cmp16)) {
						__label__ = 95;
						break $while_cond$14;
					}
					var $17 = $p;
					var $18 = $p;
					var $arrayidx17 = (($18) & 4294967295);
					var $19 = HEAP8[($arrayidx17)];
					var $conv18 = (tempInt = (($19)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $add_ptr = (($17 + $conv18) & 4294967295);
					$next = $add_ptr;
					var $20 = $p;
					var $arrayidx19 = (($20 + 1) & 4294967295);
					var $21 = HEAP8[($arrayidx19)];
					var $conv20 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $and = ($conv20) & 127;
					var $22 = $wlen;
					var $cmp21 = ((($and)) | 0) != ((($22)) | 0);
					if ($cmp21) {
						__label__ = 12;;
					} else {
						__label__ = 11;;
					}
					$if_then26$$lor_lhs_false$17: do {
						if (__label__ == 11) {
							var $23 = $word_addr;
							var $24 = $p;
							var $arrayidx22 = (($24 + 2) & 4294967295);
							var $25 = $wlen;
							var $and23 = ($25) & 63;
							var $call24 = _memcmp($23, $arrayidx22, $and23);
							var $cmp25 = ((($call24)) | 0) != 0;
							if ($cmp25) {
								__label__ = 12;
								break $if_then26$$lor_lhs_false$17;
							}
							var $27 = $word2_addr;
							$word_end = $27;
							$dictionary_flags = 0;
							$dictionary_flags2 = 0;
							var $28 = $p;
							var $arrayidx28 = (($28 + 1) & 4294967295);
							var $29 = HEAP8[($arrayidx28)];
							var $conv29 = (tempInt = (($29)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $and30 = ($conv29) & 128;
							$no_phonemes = $and30;
							var $30 = $p;
							var $arrayidx31 = (($30 + 1) & 4294967295);
							var $31 = HEAP8[($arrayidx31)];
							var $conv32 = (tempInt = (($31)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $and33 = ($conv32) & 63;
							var $add = ((($and33) + 2) & 4294967295);
							var $32 = $p;
							var $add_ptr34 = (($32 + $add) & 4294967295);
							$p = $add_ptr34;
							var $33 = $no_phonemes;
							var $tobool = ((($33)) | 0) != 0;
							var $34 = $phonetic_addr;
							if ($tobool) {
								__label__ = 14;;
							} else {
								__label__ = 15;;
							}
							if (__label__ == 14) {
								var $arrayidx36 = (($34) & 4294967295);
								HEAP8[($arrayidx36)] = 0;
								$phoneme_len = 0;;
							} else if (__label__ == 15) {
								var $35 = $p;
								var $call38 = _strcpy($34, $35);
								var $36 = $p;
								var $call39 = _strlen($36);
								$phoneme_len = $call39;
								var $37 = $phoneme_len;
								var $add40 = ((($37) + 1) & 4294967295);
								var $38 = $p;
								var $add_ptr41 = (($38 + $add40) & 4294967295);
								$p = $add_ptr41;;
							}
							$while_cond43$23: while (1) {
								var $39 = $p;
								var $40 = $next;
								var $cmp44 = ((($39)) >>> 0) < ((($40)) >>> 0);
								if (!($cmp44)) {
									__label__ = 39;
									break $while_cond43$23;
								}
								var $41 = $p;
								var $incdec_ptr = (($41 + 1) & 4294967295);
								$p = $incdec_ptr;
								var $42 = HEAP8[($41)];
								$flag = $42;
								var $43 = $flag;
								var $conv46 = ((($43)) & 255);
								var $cmp47 = ((($conv46)) | 0) >= 100;
								var $44 = $flag;
								var $conv49 = ((($44)) & 255);
								if ($cmp47) {
									__label__ = 18;;
								} else {
									__label__ = 23;;
								}
								if (__label__ == 18) {
									var $cmp50 = ((($conv49)) | 0) >= 132;
									var $45 = $tr_addr;
									var $dict_condition = (($45 + 692) & 4294967295);
									var $46 = HEAPU32[(($dict_condition) >> 2)];
									var $47 = $flag;
									var $conv52 = ((($47)) & 255);
									if ($cmp50) {
										__label__ = 19;;
									} else {
										__label__ = 21;;
									}
									if (__label__ == 19) {
										var $sub = ((($conv52) - 132) & 4294967295);
										var $shl = 1 << ($sub);
										var $and53 = ($shl) & ($46);
										var $cmp54 = ((($and53)) | 0) != 0;
										if (!($cmp54)) {
											__label__ = 16;
											continue $while_cond43$23;
										}
										$condition_failed = 1;
										__label__ = 16;
										continue $while_cond43$23;
									} else if (__label__ == 21) {
										var $sub60 = ((($conv52) - 100) & 4294967295);
										var $shl61 = 1 << ($sub60);
										var $and62 = ($shl61) & ($46);
										var $cmp63 = ((($and62)) | 0) == 0;
										if (!($cmp63)) {
											__label__ = 16;
											continue $while_cond43$23;
										}
										$condition_failed = 1;
										__label__ = 16;
										continue $while_cond43$23;
									}
								} else if (__label__ == 23) {
									var $cmp69 = ((($conv49)) | 0) > 80;
									if ($cmp69) {
										__label__ = 24;;
									} else {
										__label__ = 33;;
									}
									if (__label__ == 24) {
										var $48 = $next;
										var $49 = $p;
										var $sub_ptr_lhs_cast = ($48);
										var $sub_ptr_rhs_cast = ($49);
										var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
										$n_chars = $sub_ptr_sub;
										var $50 = $flag;
										var $conv71 = ((($50)) & 255);
										var $sub72 = ((($conv71) - 80) & 4294967295);
										$skipwords = $sub72;
										$ix = 0;
										var $51 = $ix;
										var $52 = $skipwords;
										var $cmp732 = ((($51)) | 0) <= ((($52)) | 0);
										if ($cmp732) {
											__label__ = 25;;
										} else {
											__label__ = 28;;
										}
										$for_body$$for_end$36: do {
											if (__label__ == 25) {
												while (1) {
													var $53 = $wflags;
													var $and74 = ($53) & 3072;
													var $tobool75 = ((($and74)) | 0) != 0;
													if ($tobool75) {
														__label__ = 26;;
													} else {
														__label__ = 27;;
													}
													if (__label__ == 26) {
														$condition_failed = 1;;
													}
													var $54 = $ix;
													var $inc = ((($54) + 1) & 4294967295);
													$ix = $inc;
													var $55 = $ix;
													var $56 = $skipwords;
													var $cmp73 = ((($55)) | 0) <= ((($56)) | 0);
													if ($cmp73) {
														__label__ = 25;
														continue;
													} else {
														__label__ = 28;
														break $for_body$$for_end$36;
													}
												}
											}
										} while (0);
										var $57 = $word2_addr;
										var $58 = $p;
										var $59 = $n_chars;
										var $call78 = _memcmp($57, $58, $59);
										var $cmp79 = ((($call78)) | 0) != 0;
										if ($cmp79) {
											__label__ = 29;
											break $while_cond43$23;
										}
										var $_pr = $condition_failed;
										var $tobool82 = ((($_pr)) | 0) != 0;
										if ($tobool82) {
											__label__ = 31;
											break $while_cond43$23;
										}
										var $61 = $dictionary_flags;
										var $or = ($61) | 128;
										$dictionary_flags = $or;
										var $62 = $skipwords;
										HEAP32[((_dictionary_skipwords) >> 2)] = $62;
										var $63 = $next;
										$p = $63;
										var $64 = $word2_addr;
										var $65 = $n_chars;
										var $add_ptr85 = (($64 + $65) & 4294967295);
										$word_end = $add_ptr85;
										__label__ = 16;
										continue $while_cond43$23;
									} else if (__label__ == 33) {
										var $66 = $flag;
										var $conv87 = ((($66)) & 255);
										var $cmp88 = ((($conv87)) | 0) > 64;
										if ($cmp88) {
											__label__ = 34;;
										} else {
											__label__ = 36;;
										}
										if (__label__ == 34) {
											var $67 = $dictionary_flags;
											var $and90 = ($67) & -16;
											var $68 = $flag;
											var $conv91 = ((($68)) & 255);
											var $and92 = ($conv91) & 15;
											var $or93 = ($and92) | ($and90);
											$dictionary_flags = $or93;
											var $69 = $flag;
											var $conv94 = ((($69)) & 255);
											var $and95 = ($conv94) & 12;
											var $cmp96 = ((($and95)) | 0) == 12;
											if (!($cmp96)) {
												__label__ = 16;
												continue $while_cond43$23;
											}
											var $70 = $dictionary_flags;
											var $or98 = ($70) | 2048;
											$dictionary_flags = $or98;
											__label__ = 16;
											continue $while_cond43$23;
										} else if (__label__ == 36) {
											var $71 = $flag;
											var $conv101 = ((($71)) & 255);
											var $cmp102 = ((($conv101)) | 0) >= 32;
											var $72 = $flag;
											var $conv104 = ((($72)) & 255);
											if ($cmp102) {
												__label__ = 37;;
											} else {
												__label__ = 38;;
											}
											if (__label__ == 37) {
												var $sub105 = ((($conv104) - 32) & 4294967295);
												var $shl106 = 1 << ($sub105);
												var $73 = $dictionary_flags2;
												var $or107 = ($73) | ($shl106);
												$dictionary_flags2 = $or107;
												__label__ = 16;
												continue $while_cond43$23;
											} else if (__label__ == 38) {
												var $shl110 = 1 << ($conv104);
												var $74 = $dictionary_flags;
												var $or111 = ($74) | ($shl110);
												$dictionary_flags = $or111;
												__label__ = 16;
												continue $while_cond43$23;
											}
										}
									}
								}
							}
							$while_end$$if_end81_thread$$if_then83$53: do {
								if (__label__ == 29) {
									$condition_failed = 1;
									__label__ = 31;
									break $while_end$$if_end81_thread$$if_then83$53;
								}
							} while (0);
							if (__label__ == 31) {
								var $60 = $next;
								$p = $60;;
							}
							var $75 = $condition_failed;
							var $tobool116 = ((($75)) | 0) != 0;
							if ($tobool116) {
								__label__ = 40;;
							} else {
								__label__ = 41;;
							}
							if (__label__ == 40) {
								$condition_failed = 0;
								__label__ = 9;
								continue $while_cond$14;
							} else if (__label__ == 41) {
								var $76 = $end_flags_addr;
								var $and119 = ($76) & 4;
								var $cmp120 = ((($and119)) | 0) == 0;
								if ($cmp120) {
									__label__ = 42;;
								} else {
									__label__ = 43;;
								}
								if (__label__ == 42) {
									var $77 = $dictionary_flags;
									var $and122 = ($77) & 262144;
									var $tobool123 = ((($and122)) | 0) != 0;
									if ($tobool123) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $78 = $end_flags_addr;
								var $and127 = ($78) & 1024;
								var $tobool128 = ((($and127)) | 0) != 0;
								if ($tobool128) {
									__label__ = 44;;
								} else {
									__label__ = 45;;
								}
								if (__label__ == 44) {
									var $79 = $dictionary_flags;
									var $and129 = ($79) & 1536;
									var $tobool130 = ((($and129)) | 0) != 0;
									if ($tobool130) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $80 = $end_flags_addr;
								var $and133 = ($80) & 4;
								var $tobool134 = ((($and133)) | 0) != 0;
								if ($tobool134) {
									__label__ = 46;;
								} else {
									__label__ = 49;;
								}
								$if_then135$$if_end147$67: do {
									if (__label__ == 46) {
										var $81 = $dictionary_flags;
										var $and136 = ($81) & 512;
										var $tobool137 = ((($and136)) | 0) != 0;
										if ($tobool137) {
											__label__ = 9;
											continue $while_cond$14;
										}
										var $82 = $dictionary_flags;
										var $and140 = ($82) & 1024;
										var $tobool141 = ((($and140)) | 0) != 0;
										if (!($tobool141)) {
											__label__ = 49;
											break $if_then135$$if_end147$67;
										}
										var $83 = $end_flags_addr;
										var $and143 = ($83) & 8;
										var $cmp144 = ((($and143)) | 0) == 0;
										if ($cmp144) {
											__label__ = 9;
											continue $while_cond$14;
										}
									}
								} while (0);
								var $84 = $dictionary_flags2;
								var $and148 = ($84) & 4096;
								var $tobool149 = ((($and148)) | 0) != 0;
								if ($tobool149) {
									__label__ = 50;;
								} else {
									__label__ = 51;;
								}
								if (__label__ == 50) {
									var $85 = $wflags;
									var $and151 = ($85) & 16384;
									var $tobool152 = ((($and151)) | 0) != 0;
									if (!($tobool152)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $86 = $dictionary_flags2;
								var $and156 = ($86) & 512;
								var $tobool157 = ((($and156)) | 0) != 0;
								if ($tobool157) {
									__label__ = 52;;
								} else {
									__label__ = 53;;
								}
								if (__label__ == 52) {
									var $87 = $wflags;
									var $and159 = ($87) & 2;
									var $tobool160 = ((($and159)) | 0) != 0;
									if (!($tobool160)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $88 = $dictionary_flags2;
								var $and164 = ($88) & 1024;
								var $tobool165 = ((($and164)) | 0) != 0;
								if ($tobool165) {
									__label__ = 54;;
								} else {
									__label__ = 55;;
								}
								if (__label__ == 54) {
									var $89 = $wflags;
									var $and167 = ($89) & 1;
									var $tobool168 = ((($and167)) | 0) != 0;
									if (!($tobool168)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $90 = $dictionary_flags;
								var $and172 = ($90) & 33554432;
								var $tobool173 = ((($and172)) | 0) != 0;
								if ($tobool173) {
									__label__ = 56;;
								} else {
									__label__ = 57;;
								}
								if (__label__ == 56) {
									var $91 = $wflags;
									var $and175 = ($91) & 65536;
									var $tobool176 = ((($and175)) | 0) != 0;
									if (!($tobool176)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $92 = $dictionary_flags;
								var $and180 = ($92) & 16384;
								var $tobool181 = ((($and180)) | 0) != 0;
								if ($tobool181) {
									__label__ = 58;;
								} else {
									__label__ = 59;;
								}
								if (__label__ == 58) {
									var $93 = $word_end;
									var $94 = $tr_addr;
									var $clause_end = (($94 + 8292) & 4294967295);
									var $95 = HEAPU32[(($clause_end) >> 2)];
									var $cmp183 = ((($93)) >>> 0) < ((($95)) >>> 0);
									if ($cmp183) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $96 = $dictionary_flags;
								var $and186 = ($96) & 32768;
								var $tobool187 = ((($and186)) | 0) != 0;
								if ($tobool187) {
									__label__ = 60;;
								} else {
									__label__ = 61;;
								}
								if (__label__ == 60) {
									var $97 = $wtab_addr;
									var $flags189 = (($97) & 4294967295);
									var $98 = HEAP32[(($flags189) >> 2)];
									var $and190 = ($98) & 512;
									var $tobool191 = ((($and190)) | 0) != 0;
									if (!($tobool191)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $99 = $dictionary_flags2;
								var $and194 = ($99) & 8192;
								var $tobool195 = ((($and194)) | 0) != 0;
								if ($tobool195) {
									__label__ = 62;;
								} else {
									__label__ = 63;;
								}
								if (__label__ == 62) {
									var $100 = $tr_addr;
									var $clause_terminator = (($100 + 8324) & 4294967295);
									var $101 = HEAP32[(($clause_terminator) >> 2)];
									var $and197 = ($101) & 524288;
									var $tobool198 = ((($and197)) | 0) != 0;
									if (!($tobool198)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $102 = $dictionary_flags2;
								var $and201 = ($102) & 16;
								var $tobool202 = ((($and201)) | 0) != 0;
								if ($tobool202) {
									__label__ = 64;;
								} else {
									__label__ = 67;;
								}
								$if_then203$$if_end213$93: do {
									if (__label__ == 64) {
										var $103 = $tr_addr;
										var $expect_verb = (($103 + 8272) & 4294967295);
										var $104 = HEAP32[(($expect_verb) >> 2)];
										var $tobool204 = ((($104)) | 0) != 0;
										if ($tobool204) {
											__label__ = 67;
											break $if_then203$$if_end213$93;
										}
										var $105 = $tr_addr;
										var $expect_verb_s = (($105 + 8280) & 4294967295);
										var $106 = HEAP32[(($expect_verb_s) >> 2)];
										var $tobool206 = ((($106)) | 0) != 0;
										if (!($tobool206)) {
											__label__ = 9;
											continue $while_cond$14;
										}
										var $107 = $end_flags_addr;
										var $and208 = ($107) & 8;
										var $tobool209 = ((($and208)) | 0) != 0;
										if (!($tobool209)) {
											__label__ = 9;
											continue $while_cond$14;
										}
									}
								} while (0);
								var $108 = $dictionary_flags2;
								var $and214 = ($108) & 64;
								var $tobool215 = ((($and214)) | 0) != 0;
								if ($tobool215) {
									__label__ = 68;;
								} else {
									__label__ = 69;;
								}
								if (__label__ == 68) {
									var $109 = $tr_addr;
									var $expect_past = (($109 + 8276) & 4294967295);
									var $110 = HEAP32[(($expect_past) >> 2)];
									var $tobool217 = ((($110)) | 0) != 0;
									if (!($tobool217)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $111 = $dictionary_flags2;
								var $and221 = ($111) & 32;
								var $tobool222 = ((($and221)) | 0) != 0;
								if ($tobool222) {
									__label__ = 70;;
								} else {
									__label__ = 71;;
								}
								if (__label__ == 70) {
									var $112 = $tr_addr;
									var $expect_noun = (($112 + 8284) & 4294967295);
									var $113 = HEAP32[(($expect_noun) >> 2)];
									var $tobool224 = ((($113)) | 0) != 0;
									if (!($tobool224)) {
										__label__ = 9;
										continue $while_cond$14;
									}
								}
								var $114 = $dictionary_flags;
								var $and228 = ($114) & 2097152;
								var $tobool229 = ((($and228)) | 0) != 0;
								if (!($tobool229)) {
									__label__ = 74;
									break $while_cond$14;
								}
								var $115 = $tr_addr;
								var $translator_name = (($115 + 280) & 4294967295);
								var $116 = HEAP32[(($translator_name) >> 2)];
								var $cmp231 = ((($116)) | 0) == 26741;
								if (!($cmp231)) {
									__label__ = 74;
									break $while_cond$14;
								}
								var $117 = $tr_addr;
								var $prev_dict_flags = (($117 + 8320) & 4294967295);
								var $118 = HEAP32[(($prev_dict_flags) >> 2)];
								var $and233 = ($118) & 1048576;
								var $tobool234 = ((($and233)) | 0) != 0;
								if ($tobool234) {
									__label__ = 74;
									break $while_cond$14;
								} else {
									__label__ = 9;
									continue $while_cond$14;
								}
							}
						}
					} while (0);
					var $26 = $next;
					$p = $26;
					__label__ = 9;
					continue $while_cond$14;
				}
				if (__label__ == 95) {
					$retval = 0;;
				} else if (__label__ == 74) {
					var $119 = $flags_addr;
					var $cmp238 = ((($119)) | 0) != 0;
					if ($cmp238) {
						__label__ = 75;;
					} else {
						__label__ = 76;;
					}
					if (__label__ == 75) {
						var $120 = $dictionary_flags;
						var $or240 = ($120) | 1073741824;
						var $121 = $flags_addr;
						var $arrayidx241 = (($121) & 4294967295);
						HEAP32[(($arrayidx241) >> 2)] = $or240;
						var $122 = $dictionary_flags2;
						var $123 = $flags_addr;
						var $arrayidx242 = (($123 + 4) & 4294967295);
						HEAP32[(($arrayidx242) >> 2)] = $122;;
					}
					var $124 = $phoneme_len;
					var $cmp244 = ((($124)) | 0) == 0;
					if ($cmp244) {
						__label__ = 77;;
					} else {
						__label__ = 80;;
					}
					if (__label__ == 77) {
						var $125 = HEAP32[((_option_phonemes) >> 2)];
						var $cmp246 = ((($125)) | 0) == 2;
						if ($cmp246) {
							__label__ = 78;;
						} else {
							__label__ = 79;;
						}
						if (__label__ == 78) {
							var $126 = HEAP32[((_f_trans) >> 2)];
							var $127 = $word1;
							var $128 = $flags_addr;
							var $call248 = __Z22print_dictionary_flagsPj($128);
							var $call249 = _fprintf($126, ((__str28144) & 4294967295), allocate([$127, 0, 0, 0, ((__ZZ22print_dictionary_flagsPjE3buf) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
						}
						$retval = 0;;
					} else if (__label__ == 80) {
						var $129 = $flags_addr;
						var $cmp252 = ((($129)) | 0) != 0;
						if ($cmp252) {
							__label__ = 81;;
						} else {
							__label__ = 82;;
						}
						if (__label__ == 81) {
							var $130 = $flags_addr;
							var $arrayidx254 = (($130) & 4294967295);
							var $131 = HEAP32[(($arrayidx254) >> 2)];
							var $or255 = ($131) | -2147483648;
							HEAP32[(($arrayidx254) >> 2)] = $or255;;
						}
						var $132 = HEAP32[((_option_phonemes) >> 2)];
						var $cmp257 = ((($132)) | 0) == 2;
						if ($cmp257) {
							__label__ = 83;;
						} else {
							__label__ = 94;;
						}
						$if_then258$$if_end296$122: do {
							if (__label__ == 83) {
								$flags1259 = 0;
								var $133 = $phonetic_addr;
								var $arraydecay260 = (($ph_decoded) & 4294967295);
								__Z14DecodePhonemesPKcPc($133, $arraydecay260);
								var $134 = $flags_addr;
								var $cmp261 = ((($134)) | 0) != 0;
								if ($cmp261) {
									__label__ = 84;;
								} else {
									__label__ = 85;;
								}
								if (__label__ == 84) {
									var $135 = $flags_addr;
									var $arrayidx263 = (($135) & 4294967295);
									var $136 = HEAP32[(($arrayidx263) >> 2)];
									$flags1259 = $136;;
								}
								var $137 = $dictionary_flags;
								var $and265 = ($137) & 536870912;
								var $cmp266 = ((($and265)) | 0) == 0;
								if ($cmp266) {
									__label__ = 86;;
								} else {
									__label__ = 87;;
								}
								if (__label__ == 86) {
									$textmode = 0;;
								} else if (__label__ == 87) {
									$textmode = 1;;
								}
								var $138 = $textmode;
								var $139 = HEAP32[((_translator) >> 2)];
								var $langopts = (($139) & 4294967295);
								var $textmode270 = (($langopts + 252) & 4294967295);
								var $140 = HEAP8[($textmode270)];
								var $conv271 = (tempInt = (($140)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp272 = ((($138)) | 0) == ((($conv271)) | 0);
								if (!($cmp272)) {
									__label__ = 94;
									break $if_then258$$if_end296$122;
								}
								var $141 = HEAP32[((_dictionary_skipwords) >> 2)];
								var $tobool274 = ((($141)) | 0) != 0;
								if ($tobool274) {
									__label__ = 90;;
								} else {
									__label__ = 92;;
								}
								$land_lhs_true275$$if_else289$132: do {
									if (__label__ == 90) {
										var $142 = $wtab_addr;
										var $cmp276 = ((($142)) | 0) != 0;
										if (!($cmp276)) {
											__label__ = 92;
											break $land_lhs_true275$$if_else289$132;
										}
										var $arraydecay278 = (($word_buf) & 4294967295);
										var $143 = $word2_addr;
										var $144 = $word_end;
										var $145 = $word2_addr;
										var $sub_ptr_lhs_cast279 = ($144);
										var $sub_ptr_rhs_cast280 = ($145);
										var $sub_ptr_sub281 = ((($sub_ptr_lhs_cast279) - ($sub_ptr_rhs_cast280)) & 4294967295);
										var $src$, $dest$, $stop$, $stop4$, $fast$;
										$src$ = $143;
										$dest$ = $arraydecay278;
										$stop$ = $src$ + $sub_ptr_sub281;
										if (($dest$ % 4) == ($src$ % 4) && $sub_ptr_sub281 > 8) {
											while ($src$ % 4 !== 0 && $src$ < $stop$) {;
												HEAP8[$dest$++] = HEAP8[$src$++];
											}
											$src$ >>= 2;
											$dest$ >>= 2;
											$stop4$ = $stop$ >> 2;
											while ($src$ < $stop4$) {;;;
												HEAP32[$dest$++] = HEAP32[$src$++];
											}
											$src$ <<= 2;
											$dest$ <<= 2;
										}
										while ($src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										};
										var $146 = $word_end;
										var $147 = $word2_addr;
										var $sub_ptr_lhs_cast282 = ($146);
										var $sub_ptr_rhs_cast283 = ($147);
										var $sub_ptr_rhs_cast283_neg = (((-($sub_ptr_rhs_cast283))) & 4294967295);
										var $sub_ptr_sub284 = ((($sub_ptr_lhs_cast282) - 1) & 4294967295);
										var $sub285 = ((($sub_ptr_sub284) + ($sub_ptr_rhs_cast283_neg)) & 4294967295);
										var $arrayidx286 = (($word_buf + $sub285) & 4294967295);
										HEAP8[($arrayidx286)] = 0;
										var $148 = HEAP32[((_f_trans) >> 2)];
										var $149 = $word1;
										var $arraydecay287 = (($word_buf) & 4294967295);
										var $call288 = _fprintf($148, ((__str29145) & 4294967295), allocate([$149, 0, 0, 0, $arraydecay287, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
										__label__ = 93;
										break $land_lhs_true275$$if_else289$132;
									}
								} while (0);
								if (__label__ == 92) {
									var $150 = HEAP32[((_f_trans) >> 2)];
									var $151 = $word1;
									var $call290 = _fprintf($150, ((__str30146) & 4294967295), allocate([$151, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
								}
								var $152 = HEAP32[((_f_trans) >> 2)];
								var $arraydecay292 = (($ph_decoded) & 4294967295);
								var $153 = $flags_addr;
								var $call293 = __Z22print_dictionary_flagsPj($153);
								var $call294 = _fprintf($152, ((__str31147) & 4294967295), allocate([$arraydecay292, 0, 0, 0, ((__ZZ22print_dictionary_flagsPjE3buf) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
							}
						} while (0);
						var $154 = $word_end;
						$retval = $154;;
					}
				}
			}
			var $155 = $retval;
			STACKTOP = __stackBase__;
			return $155;
			return null;
		}

		function __Z11LookupFlagsP10TranslatorPKc($tr, $word) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 104;
			_memset(__stackBase__, 0, 104);
			var __label__;
			var $tr_addr;
			var $word_addr;
			var $buf = __stackBase__;
			var $word1 = __stackBase__ + 100;
			$tr_addr = $tr;
			$word_addr = $word;
			HEAP32[((((__ZZ11LookupFlagsP10TranslatorPKcE5flags + 4) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZZ11LookupFlagsP10TranslatorPKcE5flags) & 4294967295)) >> 2)] = 0;
			var $0 = $word_addr;
			HEAP32[(($word1) >> 2)] = $0;
			var $1 = $tr_addr;
			var $arraydecay = (($buf) & 4294967295);
			var $call = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($1, $word1, $arraydecay, ((__ZZ11LookupFlagsP10TranslatorPKcE5flags) & 4294967295), 0, 0);
			var $2 = HEAP32[((((__ZZ11LookupFlagsP10TranslatorPKcE5flags) & 4294967295)) >> 2)];
			STACKTOP = __stackBase__;
			return $2;
			return null;
		}

		function __Z12RemoveEndingP10TranslatorPciS1_($tr, $word, $end_type, $word_copy) {;
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $word_addr;
			var $end_type_addr;
			var $word_copy_addr;
			var $i;
			var $word_end;
			var $len_ending;
			var $end_flags;
			var $p;
			var $len;
			$tr_addr = $tr;
			$word_addr = $word;
			$end_type_addr = $end_type;
			$word_copy_addr = $word_copy;
			var $0 = $word_addr;
			$word_end = $0;
			var $1 = $word_end;
			var $2 = HEAP8[($1)];
			var $conv8 = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp10 = ((($conv8)) | 0) != 32;
			var $3 = $word_end;
			if ($cmp10) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 4;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $4 = __lastLabel__ == 3 ? $10 : ($3);
						var $5 = HEAP8[($4)];
						var $conv1 = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp2 = ((($conv1)) | 0) == 69;
						if ($cmp2) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						if (__label__ == 2) {
							var $6 = $word_end;
							HEAP8[($6)] = 101;;
						}
						var $7 = $word_end;
						var $incdec_ptr = (($7 + 1) & 4294967295);
						$word_end = $incdec_ptr;
						var $8 = $word_end;
						var $9 = HEAP8[($8)];
						var $conv = (tempInt = (($9)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp = ((($conv)) | 0) != 32;
						var $10 = $word_end;
						if ($cmp) {
							__lastLabel__ = 3;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 3;
							__label__ = 4;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			var $_lcssa7 = __lastLabel__ == 0 ? $3 : ($10);
			var $11 = $word_addr;
			var $sub_ptr_lhs_cast = ($_lcssa7);
			var $sub_ptr_rhs_cast = ($11);
			var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
			$i = $sub_ptr_sub;
			var $12 = $word_copy_addr;
			var $13 = $word_addr;
			var $14 = $i;
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = $13;
			$dest$ = $12;
			$stop$ = $src$ + $14;
			if (($dest$ % 4) == ($src$ % 4) && $14 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			var $15 = $i;
			var $16 = $word_copy_addr;
			var $arrayidx = (($16 + $15) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $17 = $end_type_addr;
			var $and = ($17) & 63;
			$i = $and;
			$len_ending = $and;
			var $cmp46 = ((($and)) | 0) > 0;
			if ($cmp46) {
				__label__ = 5;;
			} else {
				__label__ = 8;;
			}
			$for_body5$$for_end12$9: do {
				if (__label__ == 5) {
					$for_body5$10: while (1) {
						var $18 = $word_end;
						var $incdec_ptr6 = (($18 + -1) & 4294967295);
						$word_end = $incdec_ptr6;
						var $19 = $word_end;
						var $20 = HEAP8[($19)];
						var $conv73 = (tempInt = (($20)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $and84 = ($conv73) & 192;
						var $cmp95 = ((($and84)) | 0) == 128;
						if ($cmp95) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						$while_body$$for_inc11$12: do {
							if (__label__ == 6) {
								while (1) {
									var $21 = $word_end;
									var $incdec_ptr10 = (($21 + -1) & 4294967295);
									$word_end = $incdec_ptr10;
									var $22 = $len_ending;
									var $inc = ((($22) + 1) & 4294967295);
									$len_ending = $inc;
									var $23 = $word_end;
									var $24 = HEAP8[($23)];
									var $conv7 = (tempInt = (($24)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $and8 = ($conv7) & 192;
									var $cmp9 = ((($and8)) | 0) == 128;
									if ($cmp9) {
										__label__ = 6;
										continue;
									} else {
										__label__ = 7;
										break $while_body$$for_inc11$12;
									}
								}
							}
						} while (0);
						var $25 = $i;
						var $dec = ((($25) - 1) & 4294967295);
						$i = $dec;
						var $cmp4 = ((($dec)) | 0) > 0;
						if ($cmp4) {
							__label__ = 5;
							continue $for_body5$10;
						} else {
							__label__ = 8;
							break $for_body5$$for_end12$9;
						}
					}
				}
			} while (0);
			$i = 0;
			var $26 = $i;
			var $27 = $len_ending;
			var $cmp142 = ((($26)) | 0) < ((($27)) | 0);
			var $28 = $i;
			if ($cmp142) {
				__lastLabel__ = 8;
				__label__ = 9;;
			} else {
				__lastLabel__ = 8;
				__label__ = 10;;
			}
			$for_body15$$for_end21$17: do {
				if (__label__ == 9) {
					while (1) {
						var $29 = __lastLabel__ == 9 ? $38 : ($28);
						var $30 = $word_end;
						var $arrayidx16 = (($30 + $29) & 4294967295);
						var $31 = HEAP8[($arrayidx16)];
						var $32 = $i;
						var $arrayidx17 = ((__ZZ12RemoveEndingP10TranslatorPciS1_E6ending + $32) & 4294967295);
						HEAP8[($arrayidx17)] = $31;
						var $33 = $i;
						var $34 = $word_end;
						var $arrayidx18 = (($34 + $33) & 4294967295);
						HEAP8[($arrayidx18)] = 32;
						var $35 = $i;
						var $inc20 = ((($35) + 1) & 4294967295);
						$i = $inc20;
						var $36 = $i;
						var $37 = $len_ending;
						var $cmp14 = ((($36)) | 0) < ((($37)) | 0);
						var $38 = $i;
						if ($cmp14) {
							__lastLabel__ = 9;
							__label__ = 9;
							continue;
						} else {
							__lastLabel__ = 9;
							__label__ = 10;
							break $for_body15$$for_end21$17;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 8 ? $28 : ($38);
			var $arrayidx22 = ((__ZZ12RemoveEndingP10TranslatorPciS1_E6ending + $_lcssa) & 4294967295);
			HEAP8[($arrayidx22)] = 0;
			var $39 = $word_end;
			var $incdec_ptr23 = (($39 + -1) & 4294967295);
			$word_end = $incdec_ptr23;
			var $40 = $end_type_addr;
			var $and24 = ($40) & 65520;
			var $or = ($and24) | 4;
			$end_flags = $or;
			var $41 = $end_type_addr;
			var $and25 = ($41) & 512;
			var $tobool = ((($and25)) | 0) != 0;
			if ($tobool) {
				__label__ = 11;;
			} else {
				__label__ = 13;;
			}
			$if_then26$$if_end33$21: do {
				if (__label__ == 11) {
					var $42 = $word_end;
					var $arrayidx27 = (($42) & 4294967295);
					var $43 = HEAP8[($arrayidx27)];
					var $conv28 = (tempInt = (($43)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp29 = ((($conv28)) | 0) == 105;
					if (!($cmp29)) {
						__label__ = 13;
						break $if_then26$$if_end33$21;
					}
					var $44 = $word_end;
					var $arrayidx31 = (($44) & 4294967295);
					HEAP8[($arrayidx31)] = 121;;
				}
			} while (0);
			var $45 = $end_type_addr;
			var $and34 = ($45) & 256;
			var $tobool35 = ((($and34)) | 0) != 0;
			if ($tobool35) {
				__label__ = 14;;
			} else {
				__label__ = 33;;
			}
			$if_then36$$if_end98$25: do {
				if (__label__ == 14) {
					var $46 = $tr_addr;
					var $translator_name = (($46 + 280) & 4294967295);
					var $47 = HEAP32[(($translator_name) >> 2)];
					var $cmp37 = ((($47)) | 0) == 25966;
					var $48 = $tr_addr;
					if ($cmp37) {
						__label__ = 15;;
					} else {
						__label__ = 28;;
					}
					$if_then38$$if_else80$27: do {
						if (__label__ == 15) {
							var $49 = $word_end;
							var $arrayidx39 = (($49 + -1) & 4294967295);
							var $50 = HEAP8[($arrayidx39)];
							var $conv40 = (tempInt = (($50)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $call = __ZL8IsLetterP10Translatorii($48, $conv40, 7);
							var $tobool41 = ((($call)) | 0) != 0;
							if ($tobool41) {
								__label__ = 16;;
							} else {
								__label__ = 23;;
							}
							$land_lhs_true$$if_else$29: do {
								if (__label__ == 16) {
									var $51 = $tr_addr;
									var $52 = $word_end;
									var $arrayidx42 = (($52) & 4294967295);
									var $53 = HEAP8[($arrayidx42)];
									var $conv43 = (tempInt = (($53)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $call44 = __ZL8IsLetterP10Translatorii($51, $conv43, 1);
									var $tobool45 = ((($call44)) | 0) != 0;
									if (!($tobool45)) {
										__label__ = 23;
										break $land_lhs_true$$if_else$29;
									}
									$i = 0;;
									while (1) {
										var $54 = $i;
										var $arrayidx48 = ((__ZZ12RemoveEndingP10TranslatorPciS1_E16add_e_exceptions + $54 * 4) & 4294967295);
										var $55 = HEAP32[(($arrayidx48) >> 2)];
										$p = $55;
										var $cmp49 = ((($55)) | 0) != 0;
										if (!($cmp49)) {
											__label__ = 22;
											break;
										}
										var $56 = $p;
										var $call51 = _strlen($56);
										$len = $call51;
										var $57 = $p;
										var $58 = $len;
										var $sub = ((1 - ($58)) & 4294967295);
										var $59 = $word_end;
										var $arrayidx52 = (($59 + $sub) & 4294967295);
										var $60 = $len;
										var $call53 = _memcmp($57, $arrayidx52, $60);
										var $cmp54 = ((($call53)) | 0) == 0;
										if ($cmp54) {
											__label__ = 21;
											break;
										}
										var $61 = $i;
										var $inc58 = ((($61) + 1) & 4294967295);
										$i = $inc58;
										__label__ = 18;
										continue;
									}
									if (__label__ == 21) {
										var $_pr = $p;
										var $cmp60 = ((($_pr)) | 0) == 0;
										if (!($cmp60)) {
											__label__ = 30;
											break $if_then38$$if_else80$27;
										}
									}
									var $62 = $end_flags;
									var $or62 = ($62) | 16;
									$end_flags = $or62;
									__label__ = 30;
									break $if_then38$$if_else80$27;
								}
							} while (0);
							$i = 0;;
							while (1) {
								var $63 = $i;
								var $arrayidx65 = ((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + $63 * 4) & 4294967295);
								var $64 = HEAP32[(($arrayidx65) >> 2)];
								$p = $64;
								var $cmp66 = ((($64)) | 0) != 0;
								if (!($cmp66)) {
									__label__ = 30;
									break $if_then38$$if_else80$27;
								}
								var $65 = $p;
								var $call68 = _strlen($65);
								$len = $call68;
								var $66 = $p;
								var $67 = $len;
								var $sub69 = ((1 - ($67)) & 4294967295);
								var $68 = $word_end;
								var $arrayidx70 = (($68 + $sub69) & 4294967295);
								var $69 = $len;
								var $call71 = _memcmp($66, $arrayidx70, $69);
								var $cmp72 = ((($call71)) | 0) == 0;
								if ($cmp72) {
									__label__ = 26;
									break;
								}
								var $71 = $i;
								var $inc77 = ((($71) + 1) & 4294967295);
								$i = $inc77;
								__label__ = 24;
								continue;
							}
							var $70 = $end_flags;
							var $or74 = ($70) | 16;
							$end_flags = $or74;;
						} else if (__label__ == 28) {
							var $langopts = (($48) & 4294967295);
							var $suffix_add_e = (($langopts + 276) & 4294967295);
							var $72 = HEAP32[(($suffix_add_e) >> 2)];
							var $cmp81 = ((($72)) | 0) != 0;
							if (!($cmp81)) {
								__label__ = 30;
								break $if_then38$$if_else80$27;
							}
							var $73 = $end_flags;
							var $or83 = ($73) | 16;
							$end_flags = $or83;;
						}
					} while (0);
					var $74 = $end_flags;
					var $and86 = ($74) & 16;
					var $tobool87 = ((($and86)) | 0) != 0;
					if (!($tobool87)) {
						__label__ = 33;
						break $if_then36$$if_end98$25;
					}
					var $75 = $tr_addr;
					var $langopts89 = (($75) & 4294967295);
					var $suffix_add_e90 = (($langopts89 + 276) & 4294967295);
					var $76 = HEAP32[(($suffix_add_e90) >> 2)];
					var $77 = $word_end;
					var $arrayidx91 = (($77 + 1) & 4294967295);
					var $call92 = __Z8utf8_outjPc($76, $arrayidx91);
					var $78 = HEAP32[((_option_phonemes) >> 2)];
					var $cmp93 = ((($78)) | 0) == 2;
					if (!($cmp93)) {
						__label__ = 33;
						break $if_then36$$if_end98$25;
					}
					var $79 = HEAP32[((_f_trans) >> 2)];
					var $80 = _fwrite(((__str25141) & 4294967295), 6, 1, $79);;
				}
			} while (0);
			var $81 = $end_type_addr;
			var $and99 = ($81) & 2048;
			var $tobool100 = ((($and99)) | 0) != 0;
			if ($tobool100) {
				__label__ = 34;;
			} else {
				__label__ = 36;;
			}
			$land_lhs_true101$$if_end105$51: do {
				if (__label__ == 34) {
					var $82 = $tr_addr;
					var $expect_verb = (($82 + 8272) & 4294967295);
					var $83 = HEAP32[(($expect_verb) >> 2)];
					var $cmp102 = ((($83)) | 0) == 0;
					if (!($cmp102)) {
						__label__ = 36;
						break $land_lhs_true101$$if_end105$51;
					}
					var $84 = $tr_addr;
					var $expect_verb104 = (($84 + 8272) & 4294967295);
					HEAP32[(($expect_verb104) >> 2)] = 1;;
				}
			} while (0);
			var $call106 = _strcmp(((__ZZ12RemoveEndingP10TranslatorPciS1_E6ending) & 4294967295), ((__str5172) & 4294967295));
			var $cmp107 = ((($call106)) | 0) == 0;
			if ($cmp107) {
				__label__ = 38;;
			} else {
				__label__ = 37;;
			}
			$if_then110$$lor_lhs_false$55: do {
				if (__label__ == 37) {
					var $call108 = _strcmp(((__ZZ12RemoveEndingP10TranslatorPciS1_E6ending) & 4294967295), ((__str27143) & 4294967295));
					var $cmp109 = ((($call108)) | 0) == 0;
					if ($cmp109) {
						__label__ = 38;
						break $if_then110$$lor_lhs_false$55;
					} else {
						__label__ = 39;
						break $if_then110$$lor_lhs_false$55;
					}
				}
			} while (0);
			if (__label__ == 38) {
				var $85 = $end_flags;
				var $or111 = ($85) | 8;
				$end_flags = $or111;;
			}
			var $86 = HEAP8[(((__ZZ12RemoveEndingP10TranslatorPciS1_E6ending) & 4294967295))];
			var $conv113 = (tempInt = (($86)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp114 = ((($conv113)) | 0) == 39;
			if ($cmp114) {
				__label__ = 40;;
			} else {
				__label__ = 41;;
			}
			if (__label__ == 40) {
				var $87 = $end_flags;
				var $and116 = ($87) & -5;
				$end_flags = $and116;;
			}
			var $88 = $end_flags;;
			return $88;
			return null;
		}

		function __ZL13IsLetterGroupP10TranslatorPcii($tr, $word, $group, $pre) {;
			var __label__;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $group_addr;
			var $pre_addr;
			var $p;
			var $w;
			var $len;
			$tr_addr = $tr;
			$word_addr = $word;
			$group_addr = $group;
			$pre_addr = $pre;
			$len = 0;
			var $0 = $group_addr;
			var $1 = $tr_addr;
			var $letterGroups = (($1 + 5152) & 4294967295);
			var $arrayidx = (($letterGroups + $0 * 4) & 4294967295);
			var $2 = HEAP32[(($arrayidx) >> 2)];
			$p = $2;
			var $3 = $p;
			var $cmp = ((($3)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				$while_cond$4: while (1) {
					var $4 = $p;
					var $5 = HEAP8[($4)];
					var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp1 = ((($conv)) | 0) != 7;
					if (!($cmp1)) {
						__label__ = 13;
						break $while_cond$4;
					}
					var $6 = $pre_addr;
					var $tobool = ((($6)) | 0) != 0;
					if ($tobool) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 4) {
						var $7 = $p;
						var $call = _strlen($7);
						$len = $call;
						var $8 = $word_addr;
						var $9 = $len;
						var $idx_neg = (((-($9))) & 4294967295);
						var $add_ptr = (($8 + $idx_neg) & 4294967295);
						var $add_ptr3 = (($add_ptr + 1) & 4294967295);
						$w = $add_ptr3;;
					} else if (__label__ == 5) {
						var $10 = $word_addr;
						$w = $10;;
					}
					var $11 = $p;
					var $12 = HEAP8[($11)];
					var $conv61 = (tempInt = (($12)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $13 = $w;
					var $14 = HEAP8[($13)];
					var $conv72 = (tempInt = (($14)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp83 = ((($conv61)) | 0) == ((($conv72)) | 0);
					if ($cmp83) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					$while_body9$$while_end$11: do {
						if (__label__ == 7) {
							while (1) {
								var $15 = $w;
								var $incdec_ptr = (($15 + 1) & 4294967295);
								$w = $incdec_ptr;
								var $16 = $p;
								var $incdec_ptr10 = (($16 + 1) & 4294967295);
								$p = $incdec_ptr10;
								var $17 = $p;
								var $18 = HEAP8[($17)];
								var $conv6 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $19 = $w;
								var $20 = HEAP8[($19)];
								var $conv7 = (tempInt = (($20)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp8 = ((($conv6)) | 0) == ((($conv7)) | 0);
								if ($cmp8) {
									__label__ = 7;
									continue;
								} else {
									__label__ = 8;
									break $while_body9$$while_end$11;
								}
							}
						}
					} while (0);
					var $21 = $p;
					var $22 = HEAP8[($21)];
					var $conv11 = (tempInt = (($22)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp12 = ((($conv11)) | 0) == 0;
					if ($cmp12) {
						__label__ = 9;
						break $while_cond$4;
					}
					while (1) {
						var $27 = $p;
						var $incdec_ptr19 = (($27 + 1) & 4294967295);
						$p = $incdec_ptr19;
						var $28 = HEAP8[($27)];
						var $conv20 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp21 = ((($conv20)) | 0) != 0;
						if ($cmp21) {
							__label__ = 12;
							continue;
						} else {
							__label__ = 2;
							continue $while_cond$4;
						}
					}
				}
				if (__label__ == 13) {
					$retval = 0;;
				} else if (__label__ == 9) {
					var $23 = $pre_addr;
					var $tobool14 = ((($23)) | 0) != 0;
					if ($tobool14) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					if (__label__ == 10) {
						var $24 = $len;
						$retval = $24;;
					} else if (__label__ == 11) {
						var $25 = $w;
						var $26 = $word_addr;
						var $sub_ptr_lhs_cast = ($25);
						var $sub_ptr_rhs_cast = ($26);
						var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
						$retval = $sub_ptr_sub;;
					}
				}
			}
			var $29 = $retval;;
			return $29;
			return null;
		}

		function __Z11CalcPitchesP10Translatori($tr, $clause_type) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 6000;
			_memset(__stackBase__, 0, 6000);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $clause_type_addr;
			var $p;
			var $syl;
			var $ix;
			var $x;
			var $st_ix;
			var $n_st;
			var $option;
			var $group_tone;
			var $group_tone_emph;
			var $group_tone_comma;
			var $ph_start;
			var $st_start;
			var $st_clause_end;
			var $count;
			var $n_primary;
			var $count_primary;
			var $ph;
			var $ph_end;
			var $syllable_tab2 = __stackBase__;
			$tr_addr = $tr;
			$clause_type_addr = $clause_type;
			$ph_start = 0;
			var $0 = HEAP32[((_n_phoneme_list) >> 2)];
			$ph_end = $0;
			var $arraydecay = (($syllable_tab2) & 4294967295);
			HEAP32[((__ZL12syllable_tab) >> 2)] = $arraydecay;
			$n_st = 0;
			$n_primary = 0;
			$ix = 0;
			var $1 = $ix;
			var $2 = HEAP32[((_n_phoneme_list) >> 2)];
			var $sub4 = ((($2) - 1) & 4294967295);
			var $cmp5 = ((($1)) | 0) < ((($sub4)) | 0);
			if ($cmp5) {
				__label__ = 1;;
			} else {
				__label__ = 8;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					$for_body$3: while (1) {
						var $3 = $ix;
						var $arrayidx = ((_phoneme_list + $3 * 24) & 4294967295);
						$p = $arrayidx;
						var $4 = $p;
						var $synthflags = (($4 + 4) & 4294967295);
						var $5 = HEAPU16[(($synthflags) >> 1)];
						var $conv = ((($5)) & 65535);
						var $and = ($conv) & 4;
						var $tobool = ((($and)) | 0) != 0;
						if ($tobool) {
							__label__ = 2;;
						} else {
							__label__ = 4;;
						}
						$if_then$$if_else$5: do {
							if (__label__ == 2) {
								var $6 = $n_st;
								var $7 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx1 = (($7 + 6 * $6) & 4294967295);
								var $flags = (($arrayidx1 + 2) & 4294967295);
								HEAP8[($flags)] = 0;
								var $8 = $n_st;
								var $9 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx2 = (($9 + 6 * $8) & 4294967295);
								var $env = (($arrayidx2 + 1) & 4294967295);
								HEAP8[($env)] = 0;
								var $10 = $ix;
								var $add = ((($10) + 1) & 4294967295);
								var $arrayidx3 = ((_phoneme_list + $add * 24) & 4294967295);
								var $type = (($arrayidx3 + 15) & 4294967295);
								var $11 = HEAP8[($type)];
								var $12 = $n_st;
								var $13 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx4 = (($13 + 6 * $12) & 4294967295);
								var $nextph_type = (($arrayidx4 + 3) & 4294967295);
								HEAP8[($nextph_type)] = $11;
								var $14 = $p;
								var $stresslevel = (($14 + 1) & 4294967295);
								var $15 = HEAP8[($stresslevel)];
								var $16 = $n_st;
								var $inc = ((($16) + 1) & 4294967295);
								$n_st = $inc;
								var $17 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx5 = (($17 + 6 * $16) & 4294967295);
								var $stress = (($arrayidx5) & 4294967295);
								HEAP8[($stress)] = $15;
								var $18 = $p;
								var $stresslevel6 = (($18 + 1) & 4294967295);
								var $19 = HEAPU8[($stresslevel6)];
								var $conv7 = ((($19)) & 255);
								var $cmp8 = ((($conv7)) | 0) >= 4;
								if (!($cmp8)) {
									__label__ = 7;
									break $if_then$$if_else$5;
								}
								var $20 = $n_primary;
								var $inc10 = ((($20) + 1) & 4294967295);
								$n_primary = $inc10;;
							} else if (__label__ == 4) {
								var $21 = $p;
								var $ph11 = (($21 + 8) & 4294967295);
								var $22 = HEAP32[(($ph11) >> 2)];
								var $code = (($22 + 10) & 4294967295);
								var $23 = HEAPU8[($code)];
								var $conv12 = ((($23)) & 255);
								var $cmp13 = ((($conv12)) | 0) == 27;
								if (!($cmp13)) {
									__label__ = 7;
									break $if_then$$if_else$5;
								}
								var $24 = $n_st;
								var $cmp14 = ((($24)) | 0) > 0;
								if (!($cmp14)) {
									__label__ = 7;
									break $if_then$$if_else$5;
								}
								var $25 = $n_st;
								var $sub16 = ((($25) - 1) & 4294967295);
								var $26 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx17 = (($26 + 6 * $sub16) & 4294967295);
								var $flags18 = (($arrayidx17 + 2) & 4294967295);
								var $27 = HEAP8[($flags18)];
								var $conv19 = (tempInt = (($27)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $or = ($conv19) | 4;
								var $conv20 = ((($or)) & 255);
								HEAP8[($flags18)] = $conv20;;
							}
						} while (0);
						var $28 = $ix;
						var $inc23 = ((($28) + 1) & 4294967295);
						$ix = $inc23;
						var $29 = $ix;
						var $30 = HEAP32[((_n_phoneme_list) >> 2)];
						var $sub = ((($30) - 1) & 4294967295);
						var $cmp = ((($29)) | 0) < ((($sub)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue $for_body$3;
						} else {
							__label__ = 8;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			var $31 = $n_st;
			var $32 = HEAP32[((__ZL12syllable_tab) >> 2)];
			var $arrayidx24 = (($32 + 6 * $31) & 4294967295);
			var $stress25 = (($arrayidx24) & 4294967295);
			HEAP8[($stress25)] = 0;
			var $33 = $n_st;
			var $cmp26 = ((($33)) | 0) == 0;
			if ($cmp26) {
				__label__ = 70;;
			} else {
				__label__ = 9;;
			}
			$for_end258$$if_end28$13: do {
				if (__label__ == 9) {
					var $34 = $tr_addr;
					var $langopts = (($34) & 4294967295);
					var $tone_language = (($langopts + 224) & 4294967295);
					var $35 = HEAP32[(($tone_language) >> 2)];
					var $cmp29 = ((($35)) | 0) == 1;
					var $36 = $tr_addr;
					if ($cmp29) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					if (__label__ == 10) {
						var $37 = $clause_type_addr;
						__ZL16CalcPitches_ToneP10Translatori($36, $37);;
					} else if (__label__ == 11) {
						var $langopts32 = (($36) & 4294967295);
						var $intonation_group = (($langopts32 + 228) & 4294967295);
						var $38 = HEAP32[(($intonation_group) >> 2)];
						$option = $38;
						var $39 = $option;
						var $cmp33 = ((($39)) | 0) >= 8;
						if ($cmp33) {
							__label__ = 12;;
						} else {
							__label__ = 13;;
						}
						$if_end35_thread$$if_end35$18: do {
							if (__label__ == 12) {
								$option = 1;
								var $40 = $clause_type_addr;
								__lastLabel__ = 12;
								__label__ = 15;
								break $if_end35_thread$$if_end35$18;
							} else if (__label__ == 13) {
								var $cmp36 = ((($39)) | 0) == 0;
								var $41 = $clause_type_addr;
								if ($cmp36) {
									__lastLabel__ = 13;;
								} else {
									__lastLabel__ = 13;
									__label__ = 15;
									break $if_end35_thread$$if_end35$18;
								}
								var $42 = $tr_addr;
								var $langopts38 = (($42) & 4294967295);
								var $tunes = (($langopts38 + 232) & 4294967295);
								var $arrayidx39 = (($tunes + $41) & 4294967295);
								var $43 = HEAPU8[($arrayidx39)];
								var $conv40 = ((($43)) & 255);
								$group_tone = $conv40;
								var $44 = $tr_addr;
								var $langopts41 = (($44) & 4294967295);
								var $tunes42 = (($langopts41 + 232) & 4294967295);
								var $arrayidx43 = (($tunes42 + 5) & 4294967295);
								var $45 = HEAPU8[($arrayidx43)];
								var $conv44 = ((($45)) & 255);
								$group_tone_emph = $conv44;
								var $46 = $tr_addr;
								var $langopts45 = (($46) & 4294967295);
								var $tunes46 = (($langopts45 + 232) & 4294967295);
								var $arrayidx47 = (($tunes46 + 1) & 4294967295);
								var $47 = HEAPU8[($arrayidx47)];
								var $conv48 = ((($47)) & 255);
								$group_tone_comma = $conv48;
								__label__ = 16;
								break $if_end35_thread$$if_end35$18;
							}
						} while (0);
						if (__label__ == 15) {
							var $48 = __lastLabel__ == 12 ? $40 : ($41);
							var $49 = $option;
							var $50 = $tr_addr;
							var $punct_to_tone = (($50 + 1000) & 4294967295);
							var $arrayidx50 = (($punct_to_tone + $49 * 6) & 4294967295);
							var $arrayidx51 = (($arrayidx50 + $48) & 4294967295);
							var $51 = HEAPU8[($arrayidx51)];
							var $conv52 = ((($51)) & 255);
							$group_tone = $conv52;
							var $52 = $option;
							var $53 = $tr_addr;
							var $punct_to_tone53 = (($53 + 1000) & 4294967295);
							var $arrayidx54 = (($punct_to_tone53 + $52 * 6) & 4294967295);
							var $arrayidx55 = (($arrayidx54 + 5) & 4294967295);
							var $54 = HEAPU8[($arrayidx55)];
							var $conv56 = ((($54)) & 255);
							$group_tone_emph = $conv56;
							var $55 = $option;
							var $56 = $tr_addr;
							var $punct_to_tone57 = (($56 + 1000) & 4294967295);
							var $arrayidx58 = (($punct_to_tone57 + $55 * 6) & 4294967295);
							var $arrayidx59 = (($arrayidx58 + 1) & 4294967295);
							var $57 = HEAPU8[($arrayidx59)];
							var $conv60 = ((($57)) & 255);
							$group_tone_comma = $conv60;;
						}
						var $58 = $clause_type_addr;
						var $cmp62 = ((($58)) | 0) == 4;
						if ($cmp62) {
							__label__ = 17;;
						} else {
							__label__ = 18;;
						}
						if (__label__ == 17) {
							HEAP8[(__ZL8no_tonic_b)] = 1;;
						} else if (__label__ == 18) {
							HEAP8[(__ZL8no_tonic_b)] = 0;;
						}
						$st_start = 0;
						$count_primary = 0;
						$st_ix = 0;
						var $59 = $st_ix;
						var $60 = $n_st;
						var $cmp673 = ((($59)) | 0) < ((($60)) | 0);
						if ($cmp673) {
							__label__ = 20;;
						} else {
							__label__ = 54;;
						}
						$for_body68$$for_end177$29: do {
							if (__label__ == 20) {
								$for_body68$30: while (1) {
									var $61 = $st_ix;
									var $62 = HEAP32[((__ZL12syllable_tab) >> 2)];
									var $arrayidx69 = (($62 + 6 * $61) & 4294967295);
									$syl = $arrayidx69;
									var $63 = $syl;
									var $stress70 = (($63) & 4294967295);
									var $64 = HEAP8[($stress70)];
									var $conv71 = (tempInt = (($64)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp72 = ((($conv71)) | 0) >= 4;
									if ($cmp72) {
										__label__ = 21;;
									} else {
										__label__ = 22;;
									}
									if (__label__ == 21) {
										var $65 = $count_primary;
										var $inc74 = ((($65) + 1) & 4294967295);
										$count_primary = $inc74;;
									}
									var $66 = $syl;
									var $stress76 = (($66) & 4294967295);
									var $67 = HEAP8[($stress76)];
									var $conv77 = (tempInt = (($67)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp78 = ((($conv77)) | 0) == 6;
									if ($cmp78) {
										__label__ = 23;;
									} else {
										__label__ = 36;;
									}
									$if_then79$$if_end124$35: do {
										if (__label__ == 23) {
											var $68 = $st_ix;
											var $sub80 = ((($68) - 1) & 4294967295);
											$ix = $sub80;;
											$for_cond81$37: while (1) {
												var $69 = $ix;
												var $70 = $st_start;
												var $cmp82 = ((($69)) | 0) >= ((($70)) | 0);
												if (!($cmp82)) {
													__label__ = 30;
													break $for_cond81$37;
												}
												var $71 = $ix;
												var $72 = $st_ix;
												var $sub83 = ((($72) - 3) & 4294967295);
												var $cmp84 = ((($71)) | 0) >= ((($sub83)) | 0);
												if (!($cmp84)) {
													__label__ = 30;
													break $for_cond81$37;
												}
												var $73 = $ix;
												var $74 = HEAP32[((__ZL12syllable_tab) >> 2)];
												var $arrayidx86 = (($74 + 6 * $73) & 4294967295);
												var $stress87 = (($arrayidx86) & 4294967295);
												var $75 = HEAP8[($stress87)];
												var $conv88 = (tempInt = (($75)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp89 = ((($conv88)) | 0) == 6;
												if ($cmp89) {
													__label__ = 30;
													break $for_cond81$37;
												}
												var $76 = $ix;
												var $77 = HEAP32[((__ZL12syllable_tab) >> 2)];
												var $arrayidx92 = (($77 + 6 * $76) & 4294967295);
												var $stress93 = (($arrayidx92) & 4294967295);
												var $78 = HEAP8[($stress93)];
												var $conv94 = (tempInt = (($78)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp95 = ((($conv94)) | 0) == 4;
												var $79 = $ix;
												if ($cmp95) {
													__label__ = 28;
													break $for_cond81$37;
												}
												var $dec = ((($79) - 1) & 4294967295);
												$ix = $dec;
												__label__ = 24;
												continue $for_cond81$37;
											}
											if (__label__ == 28) {
												var $80 = HEAP32[((__ZL12syllable_tab) >> 2)];
												var $arrayidx97 = (($80 + 6 * $79) & 4294967295);
												var $stress98 = (($arrayidx97) & 4294967295);
												HEAP8[($stress98)] = 3;;
											}
											var $81 = $st_ix;
											var $add102 = ((($81) + 1) & 4294967295);
											$ix = $add102;;
											while (1) {
												var $82 = $ix;
												var $83 = $n_st;
												var $cmp104 = ((($82)) | 0) < ((($83)) | 0);
												if (!($cmp104)) {
													__label__ = 36;
													break $if_then79$$if_end124$35;
												}
												var $84 = $ix;
												var $85 = HEAP32[((__ZL12syllable_tab) >> 2)];
												var $arrayidx106 = (($85 + 6 * $84) & 4294967295);
												var $stress107 = (($arrayidx106) & 4294967295);
												var $86 = HEAP8[($stress107)];
												var $conv108 = (tempInt = (($86)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp109 = ((($conv108)) | 0) == 4;
												if ($cmp109) {
													__label__ = 36;
													break $if_then79$$if_end124$35;
												}
												var $87 = $ix;
												var $88 = HEAP32[((__ZL12syllable_tab) >> 2)];
												var $arrayidx112 = (($88 + 6 * $87) & 4294967295);
												var $stress113 = (($arrayidx112) & 4294967295);
												var $89 = HEAP8[($stress113)];
												var $conv114 = (tempInt = (($89)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp115 = ((($conv114)) | 0) == 6;
												if ($cmp115) {
													__label__ = 34;
													break;
												}
												var $93 = $ix;
												var $inc122 = ((($93) + 1) & 4294967295);
												$ix = $inc122;
												__label__ = 31;
												continue;
											}
											var $90 = $st_ix;
											var $91 = HEAP32[((__ZL12syllable_tab) >> 2)];
											var $arrayidx117 = (($91 + 6 * $90) & 4294967295);
											var $flags118 = (($arrayidx117 + 2) & 4294967295);
											HEAP8[($flags118)] = 2;
											var $92 = $syl;
											var $stress119 = (($92) & 4294967295);
											HEAP8[($stress119)] = 5;;
										}
									} while (0);
									var $94 = $syl;
									var $stress125 = (($94) & 4294967295);
									var $95 = HEAP8[($stress125)];
									var $conv126 = (tempInt = (($95)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp127 = ((($conv126)) | 0) == 6;
									if ($cmp127) {
										__label__ = 37;;
									} else {
										__label__ = 50;;
									}
									if (__label__ == 37) {
										var $96 = $st_ix;
										var $97 = HEAP32[((__ZL12syllable_tab) >> 2)];
										var $arrayidx129 = (($97 + 6 * $96) & 4294967295);
										var $flags130 = (($arrayidx129 + 2) & 4294967295);
										HEAP8[($flags130)] = 2;
										$count = 0;
										var $98 = $n_primary;
										var $99 = $count_primary;
										var $sub131 = ((($98) - ($99)) & 4294967295);
										var $cmp132 = ((($sub131)) | 0) > 1;
										if ($cmp132) {
											__label__ = 38;;
										} else {
											__label__ = 39;;
										}
										if (__label__ == 38) {
											$count = 1;;
										}
										var $100 = $st_ix;
										var $add135 = ((($100) + 1) & 4294967295);
										$ix = $add135;;
										$for_cond136$58: while (1) {
											var $101 = $ix;
											var $102 = $n_st;
											var $cmp137 = ((($101)) | 0) < ((($102)) | 0);
											if (!($cmp137)) {
												__label__ = 45;
												break $for_cond136$58;
											}
											var $103 = $ix;
											var $104 = HEAP32[((__ZL12syllable_tab) >> 2)];
											var $arrayidx139 = (($104 + 6 * $103) & 4294967295);
											var $stress140 = (($arrayidx139) & 4294967295);
											var $105 = HEAP8[($stress140)];
											var $conv141 = (tempInt = (($105)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp142 = ((($conv141)) | 0) > 4;
											if ($cmp142) {
												__label__ = 45;
												break $for_cond136$58;
											}
											var $106 = $ix;
											var $107 = HEAP32[((__ZL12syllable_tab) >> 2)];
											var $arrayidx145 = (($107 + 6 * $106) & 4294967295);
											var $stress146 = (($arrayidx145) & 4294967295);
											var $108 = HEAP8[($stress146)];
											var $conv147 = (tempInt = (($108)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp148 = ((($conv147)) | 0) == 4;
											if ($cmp148) {
												__label__ = 43;;
											} else {
												__label__ = 44;;
											}
											if (__label__ == 43) {
												var $109 = $count;
												var $inc150 = ((($109) + 1) & 4294967295);
												$count = $inc150;
												var $110 = $count;
												var $cmp151 = ((($110)) | 0) > 1;
												if ($cmp151) {
													__label__ = 45;
													break $for_cond136$58;
												}
											}
											var $111 = $ix;
											var $inc156 = ((($111) + 1) & 4294967295);
											$ix = $inc156;
											__label__ = 40;
											continue $for_cond136$58;
										}
										var $112 = $st_start;
										var $113 = $ix;
										var $114 = $n_st;
										__ZL18count_pitch_vowelsiii($112, $113, $114);
										var $115 = $ix;
										var $116 = $n_st;
										var $cmp158 = ((($115)) | 0) < ((($116)) | 0);
										if ($cmp158) {
											__label__ = 47;;
										} else {
											__label__ = 46;;
										}
										$if_then160$$lor_lhs_false$66: do {
											if (__label__ == 46) {
												var $117 = $clause_type_addr;
												var $cmp159 = ((($117)) | 0) == 0;
												if ($cmp159) {
													__label__ = 47;
													break $if_then160$$lor_lhs_false$66;
												}
												var $122 = $option;
												var $123 = $st_start;
												var $124 = $ix;
												var $125 = $group_tone;
												__ZL12calc_pitchesiiii($122, $123, $124, $125);
												__label__ = 49;
												break $if_then160$$lor_lhs_false$66;
											}
										} while (0);
										if (__label__ == 47) {
											var $118 = $option;
											var $119 = $st_start;
											var $120 = $ix;
											var $121 = $group_tone_emph;
											__ZL12calc_pitchesiiii($118, $119, $120, $121);;
										}
										var $126 = $ix;
										$st_start = $126;;
									}
									var $127 = $st_start;
									var $128 = $st_ix;
									var $cmp165 = ((($127)) | 0) < ((($128)) | 0);
									if ($cmp165) {
										__label__ = 51;;
									} else {
										__label__ = 53;;
									}
									$land_lhs_true166$$for_inc175$73: do {
										if (__label__ == 51) {
											var $129 = $syl;
											var $flags167 = (($129 + 2) & 4294967295);
											var $130 = HEAP8[($flags167)];
											var $conv168 = (tempInt = (($130)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $and169 = ($conv168) & 4;
											var $tobool170 = ((($and169)) | 0) != 0;
											if (!($tobool170)) {
												__label__ = 53;
												break $land_lhs_true166$$for_inc175$73;
											}
											var $131 = $st_ix;
											var $add172 = ((($131) + 1) & 4294967295);
											$st_clause_end = $add172;
											var $132 = $st_start;
											var $133 = $st_clause_end;
											var $134 = $st_clause_end;
											__ZL18count_pitch_vowelsiii($132, $133, $134);
											var $135 = $option;
											var $136 = $st_start;
											var $137 = $st_clause_end;
											var $138 = $group_tone_comma;
											__ZL12calc_pitchesiiii($135, $136, $137, $138);
											var $139 = $st_clause_end;
											$st_start = $139;;
										}
									} while (0);
									var $140 = $st_ix;
									var $inc176 = ((($140) + 1) & 4294967295);
									$st_ix = $inc176;
									var $141 = $st_ix;
									var $142 = $n_st;
									var $cmp67 = ((($141)) | 0) < ((($142)) | 0);
									if ($cmp67) {
										__label__ = 20;
										continue $for_body68$30;
									} else {
										__label__ = 54;
										break $for_body68$$for_end177$29;
									}
								}
							}
						} while (0);
						var $143 = $st_start;
						var $144 = $st_ix;
						var $cmp178 = ((($143)) | 0) < ((($144)) | 0);
						if ($cmp178) {
							__label__ = 55;;
						} else {
							__label__ = 56;;
						}
						if (__label__ == 55) {
							var $145 = $st_start;
							var $146 = $st_ix;
							var $147 = $n_st;
							__ZL18count_pitch_vowelsiii($145, $146, $147);
							var $148 = $option;
							var $149 = $st_start;
							var $150 = $st_ix;
							var $151 = $group_tone;
							__ZL12calc_pitchesiiii($148, $149, $150, $151);;
						}
						$st_ix = 0;
						var $152 = $ph_start;
						$ix = $152;
						var $153 = $ix;
						var $154 = $ph_end;
						var $cmp1832 = ((($153)) | 0) < ((($154)) | 0);
						if (!($cmp1832)) {
							__label__ = 70;
							break $for_end258$$if_end28$13;
						}
						$for_body184$81: while (1) {
							var $155 = $ix;
							var $arrayidx185 = ((_phoneme_list + $155 * 24) & 4294967295);
							$p = $arrayidx185;
							var $156 = $st_ix;
							var $157 = HEAP32[((__ZL12syllable_tab) >> 2)];
							var $arrayidx186 = (($157 + 6 * $156) & 4294967295);
							var $stress187 = (($arrayidx186) & 4294967295);
							var $158 = HEAP8[($stress187)];
							var $159 = $p;
							var $stresslevel188 = (($159 + 1) & 4294967295);
							HEAP8[($stresslevel188)] = $158;
							var $160 = $p;
							var $synthflags189 = (($160 + 4) & 4294967295);
							var $161 = HEAPU16[(($synthflags189) >> 1)];
							var $conv190 = ((($161)) & 65535);
							var $and191 = ($conv190) & 4;
							var $tobool192 = ((($and191)) | 0) != 0;
							if ($tobool192) {
								__label__ = 58;;
							} else {
								__label__ = 69;;
							}
							if (__label__ == 58) {
								var $162 = $st_ix;
								var $163 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx194 = (($163 + 6 * $162) & 4294967295);
								$syl = $arrayidx194;
								var $164 = $syl;
								var $pitch1 = (($164 + 4) & 4294967295);
								var $165 = HEAP8[($pitch1)];
								var $166 = $p;
								var $pitch1195 = (($166 + 20) & 4294967295);
								HEAP8[($pitch1195)] = $165;
								var $167 = $syl;
								var $pitch2 = (($167 + 5) & 4294967295);
								var $168 = HEAP8[($pitch2)];
								var $169 = $p;
								var $pitch2196 = (($169 + 21) & 4294967295);
								HEAP8[($pitch2196)] = $168;
								var $170 = $p;
								var $env197 = (($170 + 14) & 4294967295);
								HEAP8[($env197)] = 0;
								var $171 = $syl;
								var $flags198 = (($171 + 2) & 4294967295);
								var $172 = HEAP8[($flags198)];
								var $conv199 = (tempInt = (($172)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $and200 = ($conv199) & 1;
								var $tobool201 = ((($and200)) | 0) != 0;
								var $173 = $p;
								if ($tobool201) {
									__label__ = 59;;
								} else {
									__label__ = 60;;
								}
								$if_then202$$if_else204$85: do {
									if (__label__ == 59) {
										var $env203 = (($173 + 14) & 4294967295);
										HEAP8[($env203)] = 2;;
									} else if (__label__ == 60) {
										var $stresslevel205 = (($173 + 1) & 4294967295);
										var $174 = HEAPU8[($stresslevel205)];
										var $conv206 = ((($174)) & 255);
										var $cmp207 = ((($conv206)) | 0) > 5;
										if (!($cmp207)) {
											__label__ = 62;
											break $if_then202$$if_else204$85;
										}
										var $175 = $syl;
										var $env209 = (($175 + 1) & 4294967295);
										var $176 = HEAP8[($env209)];
										var $177 = $p;
										var $env210 = (($177 + 14) & 4294967295);
										HEAP8[($env210)] = $176;;
									}
								} while (0);
								var $178 = $p;
								var $pitch1213 = (($178 + 20) & 4294967295);
								var $179 = HEAPU8[($pitch1213)];
								var $conv214 = ((($179)) & 255);
								var $180 = $p;
								var $pitch2215 = (($180 + 21) & 4294967295);
								var $181 = HEAPU8[($pitch2215)];
								var $conv216 = ((($181)) & 255);
								var $cmp217 = ((($conv214)) | 0) > ((($conv216)) | 0);
								if ($cmp217) {
									__label__ = 63;;
								} else {
									__label__ = 64;;
								}
								if (__label__ == 63) {
									var $182 = $p;
									var $pitch1219 = (($182 + 20) & 4294967295);
									var $183 = HEAPU8[($pitch1219)];
									var $conv220 = ((($183)) & 255);
									$x = $conv220;
									var $184 = $p;
									var $pitch2221 = (($184 + 21) & 4294967295);
									var $185 = HEAP8[($pitch2221)];
									var $186 = $p;
									var $pitch1222 = (($186 + 20) & 4294967295);
									HEAP8[($pitch1222)] = $185;
									var $187 = $x;
									var $conv223 = ((($187)) & 255);
									var $188 = $p;
									var $pitch2224 = (($188 + 21) & 4294967295);
									HEAP8[($pitch2224)] = $conv223;;
								}
								var $189 = $p;
								var $tone_ph = (($189 + 3) & 4294967295);
								var $190 = HEAP8[($tone_ph)];
								var $tobool226 = (tempInt = (($190)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
								if ($tobool226) {
									__label__ = 65;;
								} else {
									__label__ = 66;;
								}
								if (__label__ == 65) {
									var $191 = $p;
									var $tone_ph228 = (($191 + 3) & 4294967295);
									var $192 = HEAPU8[($tone_ph228)];
									var $idxprom = ((($192)) & 255);
									var $arrayidx229 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
									var $193 = HEAP32[(($arrayidx229) >> 2)];
									$ph = $193;
									var $194 = $p;
									var $pitch1230 = (($194 + 20) & 4294967295);
									var $195 = HEAPU8[($pitch1230)];
									var $conv231 = ((($195)) & 255);
									var $196 = $p;
									var $pitch2232 = (($196 + 21) & 4294967295);
									var $197 = HEAPU8[($pitch2232)];
									var $conv233 = ((($197)) & 255);
									var $add234 = ((($conv233) + ($conv231)) & 4294967295);
									var $div = ((((($add234)) | 0) / 2) | 0);
									$x = $div;
									var $198 = $x;
									var $199 = $ph;
									var $end_type = (($199 + 13) & 4294967295);
									var $200 = HEAPU8[($end_type)];
									var $conv235 = ((($200)) & 255);
									var $add236 = ((($conv235) + ($198)) & 4294967295);
									var $conv237 = ((($add236)) & 255);
									var $201 = $p;
									var $pitch2238 = (($201 + 21) & 4294967295);
									HEAP8[($pitch2238)] = $conv237;
									var $202 = $x;
									var $203 = $ph;
									var $start_type = (($203 + 12) & 4294967295);
									var $204 = HEAPU8[($start_type)];
									var $conv239 = ((($204)) & 255);
									var $add240 = ((($conv239) + ($202)) & 4294967295);
									var $conv241 = ((($add240)) & 255);
									var $205 = $p;
									var $pitch1242 = (($205 + 20) & 4294967295);
									HEAP8[($pitch1242)] = $conv241;;
								}
								var $206 = $syl;
								var $flags244 = (($206 + 2) & 4294967295);
								var $207 = HEAP8[($flags244)];
								var $conv245 = (tempInt = (($207)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $and246 = ($conv245) & 2;
								var $tobool247 = ((($and246)) | 0) != 0;
								if ($tobool247) {
									__label__ = 67;;
								} else {
									__label__ = 68;;
								}
								if (__label__ == 67) {
									var $208 = $p;
									var $stresslevel249 = (($208 + 1) & 4294967295);
									var $209 = HEAPU8[($stresslevel249)];
									var $conv250 = ((($209)) & 255);
									var $or251 = ($conv250) | 8;
									var $conv252 = ((($or251)) & 255);
									HEAP8[($stresslevel249)] = $conv252;;
								}
								var $210 = $st_ix;
								var $inc254 = ((($210) + 1) & 4294967295);
								$st_ix = $inc254;;
							}
							var $211 = $ix;
							var $inc257 = ((($211) + 1) & 4294967295);
							$ix = $inc257;
							var $212 = $ix;
							var $213 = $ph_end;
							var $cmp183 = ((($212)) | 0) < ((($213)) | 0);
							if ($cmp183) {
								__label__ = 57;
								continue $for_body184$81;
							} else {
								__label__ = 70;
								break $for_end258$$if_end28$13;
							}
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL16CalcPitches_ToneP10Translatori($tr, $clause_tone) {;
			var __label__;
			var $tr_addr;
			var $clause_tone_addr;
			var $p;
			var $ix;
			var $count_stressed;
			var $final_stressed;
			var $tone_ph;
			var $pause;
			var $tone_promoted;
			var $tph;
			var $prev_tph;
			var $prevw_tph;
			var $prev2_tph;
			var $prev_p;
			var $pitch_adjust;
			var $pitch_decrement;
			var $pitch_low;
			var $pitch_high;
			$tr_addr = $tr;
			$clause_tone_addr = $clause_tone;
			$count_stressed = 0;
			$final_stressed = 0;
			$pitch_adjust = 0;
			$pitch_decrement = 0;
			$pitch_low = 0;
			$pitch_high = 0;
			$p = ((_phoneme_list) & 4294967295);
			$ix = 0;
			var $0 = $ix;
			var $1 = HEAP32[((_n_phoneme_list) >> 2)];
			var $cmp5 = ((($0)) | 0) < ((($1)) | 0);
			if ($cmp5) {
				__label__ = 1;;
			} else {
				__label__ = 8;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					$for_body$3: while (1) {
						var $2 = $p;
						var $type = (($2 + 15) & 4294967295);
						var $3 = HEAPU8[($type)];
						var $conv = ((($3)) & 255);
						var $cmp1 = ((($conv)) | 0) == 2;
						if ($cmp1) {
							__label__ = 2;;
						} else {
							__label__ = 7;;
						}
						$land_lhs_true$$for_inc$5: do {
							if (__label__ == 2) {
								var $4 = $p;
								var $stresslevel = (($4 + 1) & 4294967295);
								var $5 = HEAPU8[($stresslevel)];
								var $conv2 = ((($5)) & 255);
								var $cmp3 = ((($conv2)) | 0) >= 4;
								if (!($cmp3)) {
									__label__ = 7;
									break $land_lhs_true$$for_inc$5;
								}
								var $6 = $count_stressed;
								var $cmp4 = ((($6)) | 0) == 0;
								if ($cmp4) {
									__label__ = 4;;
								} else {
									__label__ = 5;;
								}
								if (__label__ == 4) {
									var $7 = $ix;
									$final_stressed = $7;;
								}
								var $8 = $p;
								var $stresslevel6 = (($8 + 1) & 4294967295);
								var $9 = HEAPU8[($stresslevel6)];
								var $conv7 = ((($9)) & 255);
								var $cmp8 = ((($conv7)) | 0) >= 4;
								if (!($cmp8)) {
									__label__ = 7;
									break $land_lhs_true$$for_inc$5;
								}
								var $10 = $ix;
								$final_stressed = $10;
								var $11 = $count_stressed;
								var $inc = ((($11) + 1) & 4294967295);
								$count_stressed = $inc;;
							}
						} while (0);
						var $12 = $ix;
						var $inc12 = ((($12) + 1) & 4294967295);
						$ix = $inc12;
						var $13 = $p;
						var $incdec_ptr = (($13 + 24) & 4294967295);
						$p = $incdec_ptr;
						var $14 = $ix;
						var $15 = HEAP32[((_n_phoneme_list) >> 2)];
						var $cmp = ((($14)) | 0) < ((($15)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue $for_body$3;
						} else {
							__label__ = 8;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			var $16 = $final_stressed;
			var $arrayidx = ((_phoneme_list + $16 * 24) & 4294967295);
			var $stresslevel13 = (($arrayidx + 1) & 4294967295);
			HEAP8[($stresslevel13)] = 7;
			var $17 = $tr_addr;
			var $translator_name = (($17 + 280) & 4294967295);
			var $18 = HEAP32[(($translator_name) >> 2)];
			var $cmp14 = ((($18)) | 0) == 30313;
			if ($cmp14) {
				__label__ = 9;;
			} else {
				__label__ = 11;;
			}
			$if_then15$$if_end24$14: do {
				if (__label__ == 9) {
					var $19 = $final_stressed;
					var $arrayidx16 = ((_phoneme_list + $19 * 24) & 4294967295);
					$p = $arrayidx16;
					var $20 = $p;
					var $tone_ph17 = (($20 + 3) & 4294967295);
					var $21 = HEAPU8[($tone_ph17)];
					var $conv18 = ((($21)) & 255);
					var $cmp19 = ((($conv18)) | 0) == 0;
					if (!($cmp19)) {
						__label__ = 11;
						break $if_then15$$if_end24$14;
					}
					var $call = __Z11PhonemeCodej(55);
					var $conv21 = ((($call)) & 255);
					var $22 = $p;
					var $tone_ph22 = (($22 + 3) & 4294967295);
					HEAP8[($tone_ph22)] = $conv21;;
				}
			} while (0);
			$pause = 1;
			$tone_promoted = 0;
			$p = ((_phoneme_list) & 4294967295);
			$prev_p = ((_phoneme_list) & 4294967295);
			var $23 = HEAP32[((((_phoneme_tab + 36) & 4294967295)) >> 2)];
			$prevw_tph = $23;
			$prev_tph = $23;
			$ix = 0;
			var $24 = $ix;
			var $25 = HEAP32[((_n_phoneme_list) >> 2)];
			var $cmp262 = ((($24)) | 0) < ((($25)) | 0);
			if ($cmp262) {
				__label__ = 12;;
			} else {
				__label__ = 47;;
			}
			$for_body27$$for_end127$18: do {
				if (__label__ == 12) {
					$for_body27$19: while (1) {
						var $26 = $p;
						var $type28 = (($26 + 15) & 4294967295);
						var $27 = HEAPU8[($type28)];
						var $conv29 = ((($27)) & 255);
						var $cmp30 = ((($conv29)) | 0) == 0;
						if ($cmp30) {
							__label__ = 13;;
						} else {
							__label__ = 15;;
						}
						$land_lhs_true31$$if_end35$21: do {
							if (__label__ == 13) {
								var $28 = $p;
								var $ph = (($28 + 8) & 4294967295);
								var $29 = HEAP32[(($ph) >> 2)];
								var $std_length = (($29 + 14) & 4294967295);
								var $30 = HEAPU8[($std_length)];
								var $conv32 = ((($30)) & 255);
								var $cmp33 = ((($conv32)) | 0) > 50;
								if (!($cmp33)) {
									__label__ = 15;
									break $land_lhs_true31$$if_end35$21;
								}
								$pause = 1;
								var $31 = HEAP32[((((_phoneme_tab + 36) & 4294967295)) >> 2)];
								$prevw_tph = $31;;
							}
						} while (0);
						var $32 = $p;
						var $newword = (($32 + 19) & 4294967295);
						var $33 = HEAP8[($newword)];
						var $tobool = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
						if ($tobool) {
							__label__ = 16;;
						} else {
							__label__ = 17;;
						}
						if (__label__ == 16) {
							var $34 = HEAP32[((((_phoneme_tab + 36) & 4294967295)) >> 2)];
							$prev_tph = $34;;
						}
						var $35 = $p;
						var $synthflags = (($35 + 4) & 4294967295);
						var $36 = HEAPU16[(($synthflags) >> 1)];
						var $conv38 = ((($36)) & 65535);
						var $and = ($conv38) & 4;
						var $tobool39 = ((($and)) | 0) != 0;
						if ($tobool39) {
							__label__ = 18;;
						} else {
							__label__ = 46;;
						}
						if (__label__ == 18) {
							var $37 = $p;
							var $tone_ph41 = (($37 + 3) & 4294967295);
							var $38 = HEAPU8[($tone_ph41)];
							var $conv42 = ((($38)) & 255);
							$tone_ph = $conv42;
							var $39 = $tone_ph;
							var $arrayidx43 = ((_phoneme_tab + $39 * 4) & 4294967295);
							var $40 = HEAP32[(($arrayidx43) >> 2)];
							$tph = $40;
							var $41 = $tr_addr;
							var $translator_name44 = (($41 + 280) & 4294967295);
							var $42 = HEAP32[(($translator_name44) >> 2)];
							var $cmp45 = ((($42)) | 0) == 31336;
							if ($cmp45) {
								__label__ = 19;;
							} else {
								__label__ = 45;;
							}
							$if_then46$$if_end122$30: do {
								if (__label__ == 19) {
									var $43 = $tone_ph;
									var $cmp47 = ((($43)) | 0) == 0;
									if ($cmp47) {
										__label__ = 20;;
									} else {
										__label__ = 25;;
									}
									if (__label__ == 20) {
										var $44 = $pause;
										var $tobool49 = ((($44)) | 0) != 0;
										if ($tobool49) {
											__label__ = 22;;
										} else {
											__label__ = 21;;
										}
										$if_then51$$lor_lhs_false$34: do {
											if (__label__ == 21) {
												var $45 = $tone_promoted;
												var $tobool50 = ((($45)) | 0) != 0;
												if ($tobool50) {
													__label__ = 22;
													break $if_then51$$lor_lhs_false$34;
												}
												var $call53 = __Z11PhonemeCodej(12593);
												$tone_ph = $call53;
												__label__ = 24;
												break $if_then51$$lor_lhs_false$34;
											}
										} while (0);
										if (__label__ == 22) {
											var $call52 = __Z11PhonemeCodej(13621);
											$tone_ph = $call52;
											$tone_promoted = 1;;
										}
										var $46 = $tone_ph;
										var $conv55 = ((($46)) & 255);
										var $47 = $p;
										var $tone_ph56 = (($47 + 3) & 4294967295);
										HEAP8[($tone_ph56)] = $conv55;
										var $48 = $tone_ph;
										var $arrayidx57 = ((_phoneme_tab + $48 * 4) & 4294967295);
										var $49 = HEAP32[(($arrayidx57) >> 2)];
										$tph = $49;;
									} else if (__label__ == 25) {
										$tone_promoted = 0;;
									}
									var $50 = $ix;
									var $51 = $final_stressed;
									var $cmp60 = ((($50)) | 0) == ((($51)) | 0);
									if ($cmp60) {
										__label__ = 27;;
									} else {
										__label__ = 30;;
									}
									$if_then61$$if_end70$42: do {
										if (__label__ == 27) {
											var $52 = $tph;
											var $mnemonic = (($52) & 4294967295);
											var $53 = HEAP32[(($mnemonic) >> 2)];
											var $cmp62 = ((($53)) | 0) == 13621;
											if ($cmp62) {
												__label__ = 29;;
											} else {
												__label__ = 28;;
											}
											if (__label__ == 28) {
												var $54 = $tph;
												var $mnemonic64 = (($54) & 4294967295);
												var $55 = HEAP32[(($mnemonic64) >> 2)];
												var $cmp65 = ((($55)) | 0) == 12597;
												if (!($cmp65)) {
													__label__ = 30;
													break $if_then61$$if_end70$42;
												}
											}
											var $56 = $final_stressed;
											var $arrayidx67 = ((_phoneme_list + $56 * 24) & 4294967295);
											var $stresslevel68 = (($arrayidx67 + 1) & 4294967295);
											HEAP8[($stresslevel68)] = 6;;
										}
									} while (0);
									var $57 = $prevw_tph;
									var $mnemonic71 = (($57) & 4294967295);
									var $58 = HEAP32[(($mnemonic71) >> 2)];
									var $cmp72 = ((($58)) | 0) == 3420466;
									if ($cmp72) {
										__label__ = 31;;
									} else {
										__label__ = 34;;
									}
									if (__label__ == 31) {
										var $59 = $tph;
										var $mnemonic74 = (($59) & 4294967295);
										var $60 = HEAP32[(($mnemonic74) >> 2)];
										var $cmp75 = ((($60)) | 0) == 3420466;
										if ($cmp75) {
											__label__ = 32;;
										} else {
											__label__ = 33;;
										}
										if (__label__ == 32) {
											var $call77 = __Z11PhonemeCodej(13619);
											var $conv78 = ((($call77)) & 255);
											var $61 = $prev_p;
											var $tone_ph79 = (($61 + 3) & 4294967295);
											HEAP8[($tone_ph79)] = $conv78;;
										} else if (__label__ == 33) {
											var $call81 = __Z11PhonemeCodej(12594);
											var $conv82 = ((($call81)) & 255);
											var $62 = $prev_p;
											var $tone_ph83 = (($62 + 3) & 4294967295);
											HEAP8[($tone_ph83)] = $conv82;;
										}
									}
									var $63 = $prev_tph;
									var $mnemonic86 = (($63) & 4294967295);
									var $64 = HEAP32[(($mnemonic86) >> 2)];
									var $cmp87 = ((($64)) | 0) == 12597;
									if ($cmp87) {
										__label__ = 35;;
									} else {
										__label__ = 37;;
									}
									$land_lhs_true88$$if_end95$54: do {
										if (__label__ == 35) {
											var $65 = $tph;
											var $mnemonic89 = (($65) & 4294967295);
											var $66 = HEAP32[(($mnemonic89) >> 2)];
											var $cmp90 = ((($66)) | 0) == 12597;
											if (!($cmp90)) {
												__label__ = 37;
												break $land_lhs_true88$$if_end95$54;
											}
											var $call92 = __Z11PhonemeCodej(13109);
											var $conv93 = ((($call92)) & 255);
											var $67 = $prev_p;
											var $tone_ph94 = (($67 + 3) & 4294967295);
											HEAP8[($tone_ph94)] = $conv93;;
										}
									} while (0);
									var $68 = $tph;
									var $mnemonic96 = (($68) & 4294967295);
									var $69 = HEAP32[(($mnemonic96) >> 2)];
									var $cmp97 = ((($69)) | 0) == 12593;
									if (!($cmp97)) {
										__label__ = 45;
										break $if_then46$$if_end122$30;
									}
									var $70 = $prevw_tph;
									var $mnemonic99 = (($70) & 4294967295);
									var $71 = HEAP32[(($mnemonic99) >> 2)];
									var $cmp100 = ((($71)) | 0) == 13621;
									if ($cmp100) {
										__label__ = 39;;
									} else {
										__label__ = 40;;
									}
									if (__label__ == 39) {
										var $call102 = __Z11PhonemeCodej(12850);
										var $conv103 = ((($call102)) & 255);
										var $72 = $p;
										var $tone_ph104 = (($72 + 3) & 4294967295);
										HEAP8[($tone_ph104)] = $conv103;;
									}
									var $73 = $prevw_tph;
									var $mnemonic106 = (($73) & 4294967295);
									var $74 = HEAP32[(($mnemonic106) >> 2)];
									var $cmp107 = ((($74)) | 0) == 13619;
									if ($cmp107) {
										__label__ = 41;;
									} else {
										__label__ = 42;;
									}
									if (__label__ == 41) {
										var $call109 = __Z11PhonemeCodej(13107);
										var $conv110 = ((($call109)) & 255);
										var $75 = $p;
										var $tone_ph111 = (($75 + 3) & 4294967295);
										HEAP8[($tone_ph111)] = $conv110;;
									}
									var $76 = $prevw_tph;
									var $mnemonic113 = (($76) & 4294967295);
									var $77 = HEAP32[(($mnemonic113) >> 2)];
									var $cmp114 = ((($77)) | 0) == 3420466;
									if ($cmp114) {
										__label__ = 43;;
									} else {
										__label__ = 44;;
									}
									if (__label__ == 43) {
										var $call116 = __Z11PhonemeCodej(13364);
										var $conv117 = ((($call116)) & 255);
										var $78 = $p;
										var $tone_ph118 = (($78 + 3) & 4294967295);
										HEAP8[($tone_ph118)] = $conv117;;
									}
									var $79 = $p;
									var $stresslevel120 = (($79 + 1) & 4294967295);
									HEAP8[($stresslevel120)] = 0;;
								}
							} while (0);
							var $80 = $p;
							$prev_p = $80;
							var $81 = $prevw_tph;
							$prev2_tph = $81;
							var $82 = $tph;
							$prev_tph = $82;
							$prevw_tph = $82;
							$pause = 0;;
						}
						var $83 = $ix;
						var $inc125 = ((($83) + 1) & 4294967295);
						$ix = $inc125;
						var $84 = $p;
						var $incdec_ptr126 = (($84 + 24) & 4294967295);
						$p = $incdec_ptr126;
						var $85 = $ix;
						var $86 = HEAP32[((_n_phoneme_list) >> 2)];
						var $cmp26 = ((($85)) | 0) < ((($86)) | 0);
						if ($cmp26) {
							__label__ = 12;
							continue $for_body27$19;
						} else {
							__label__ = 47;
							break $for_body27$$for_end127$18;
						}
					}
				}
			} while (0);
			$p = ((_phoneme_list) & 4294967295);
			$ix = 0;
			var $87 = $ix;
			var $88 = HEAP32[((_n_phoneme_list) >> 2)];
			var $cmp1291 = ((($87)) | 0) < ((($88)) | 0);
			if ($cmp1291) {
				__label__ = 48;;
			} else {
				__label__ = 58;;
			}
			$for_body130$$for_end166$71: do {
				if (__label__ == 48) {
					$for_body130$72: while (1) {
						var $89 = $p;
						var $synthflags131 = (($89 + 4) & 4294967295);
						var $90 = HEAPU16[(($synthflags131) >> 1)];
						var $conv132 = ((($90)) & 65535);
						var $and133 = ($conv132) & 4;
						var $tobool134 = ((($and133)) | 0) != 0;
						if ($tobool134) {
							__label__ = 49;;
						} else {
							__label__ = 57;;
						}
						if (__label__ == 49) {
							var $91 = $p;
							var $tone_ph136 = (($91 + 3) & 4294967295);
							var $92 = HEAPU8[($tone_ph136)];
							var $conv137 = ((($92)) & 255);
							$tone_ph = $conv137;
							var $93 = $p;
							var $stresslevel138 = (($93 + 1) & 4294967295);
							var $94 = HEAPU8[($stresslevel138)];
							var $conv139 = ((($94)) & 255);
							var $cmp140 = ((($conv139)) | 0) != 0;
							if ($cmp140) {
								__label__ = 50;;
							} else {
								__label__ = 54;;
							}
							$if_then141$$if_end149$76: do {
								if (__label__ == 50) {
									var $95 = $ix;
									var $96 = $final_stressed;
									var $cmp142 = ((($95)) | 0) == ((($96)) | 0);
									if ($cmp142) {
										__label__ = 51;;
									} else {
										__label__ = 52;;
									}
									if (__label__ == 51) {
										var $97 = $pitch_low;
										$pitch_adjust = $97;;
									} else if (__label__ == 52) {
										var $98 = $pitch_decrement;
										var $99 = $pitch_adjust;
										var $sub = ((($99) - ($98)) & 4294967295);
										$pitch_adjust = $sub;
										var $100 = $pitch_adjust;
										var $101 = $pitch_low;
										var $cmp145 = ((($100)) | 0) <= ((($101)) | 0);
										if (!($cmp145)) {
											__label__ = 54;
											break $if_then141$$if_end149$76;
										}
										var $102 = $pitch_high;
										$pitch_adjust = $102;;
									}
								}
							} while (0);
							var $103 = $tone_ph;
							var $cmp150 = ((($103)) | 0) == 0;
							if ($cmp150) {
								__label__ = 55;;
							} else {
								__label__ = 56;;
							}
							if (__label__ == 55) {
								$tone_ph = 17;
								var $104 = $tone_ph;
								var $conv152 = ((($104)) & 255);
								var $105 = $p;
								var $tone_ph153 = (($105 + 3) & 4294967295);
								HEAP8[($tone_ph153)] = $conv152;;
							}
							var $106 = $pitch_adjust;
							var $107 = $tone_ph;
							var $arrayidx155 = ((_phoneme_tab + $107 * 4) & 4294967295);
							var $108 = HEAP32[(($arrayidx155) >> 2)];
							var $start_type = (($108 + 12) & 4294967295);
							var $109 = HEAPU8[($start_type)];
							var $conv156 = ((($109)) & 255);
							var $add = ((($conv156) + ($106)) & 4294967295);
							var $conv157 = ((($add)) & 255);
							var $110 = $p;
							var $pitch1 = (($110 + 20) & 4294967295);
							HEAP8[($pitch1)] = $conv157;
							var $111 = $pitch_adjust;
							var $112 = $tone_ph;
							var $arrayidx158 = ((_phoneme_tab + $112 * 4) & 4294967295);
							var $113 = HEAP32[(($arrayidx158) >> 2)];
							var $end_type = (($113 + 13) & 4294967295);
							var $114 = HEAPU8[($end_type)];
							var $conv159 = ((($114)) & 255);
							var $add160 = ((($conv159) + ($111)) & 4294967295);
							var $conv161 = ((($add160)) & 255);
							var $115 = $p;
							var $pitch2 = (($115 + 21) & 4294967295);
							HEAP8[($pitch2)] = $conv161;;
						}
						var $116 = $ix;
						var $inc164 = ((($116) + 1) & 4294967295);
						$ix = $inc164;
						var $117 = $p;
						var $incdec_ptr165 = (($117 + 24) & 4294967295);
						$p = $incdec_ptr165;
						var $118 = $ix;
						var $119 = HEAP32[((_n_phoneme_list) >> 2)];
						var $cmp129 = ((($118)) | 0) < ((($119)) | 0);
						if ($cmp129) {
							__label__ = 48;
							continue $for_body130$72;
						} else {
							__label__ = 58;
							break $for_body130$$for_end166$71;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL18count_pitch_vowelsiii($start, $end, $clause_end) {;
			var __label__;
			var __lastLabel__ = null;
			var $start_addr;
			var $end_addr;
			var $clause_end_addr;
			var $ix;
			var $stress;
			var $max_stress;
			var $max_stress_posn;
			var $max_stress_posn2;
			$start_addr = $start;
			$end_addr = $end;
			$clause_end_addr = $clause_end;
			$max_stress = 0;
			$max_stress_posn = 0;
			$max_stress_posn2 = 0;
			HEAP32[((__ZL10number_pre) >> 2)] = -1;
			HEAP32[((__ZL11number_tail) >> 2)] = 0;
			HEAP32[((__ZL12last_primary) >> 2)] = -1;
			var $0 = $start_addr;
			$ix = $0;
			var $1 = $ix;
			var $2 = $end_addr;
			var $cmp1 = ((($1)) | 0) < ((($2)) | 0);
			if ($cmp1) {
				__label__ = 1;;
			} else {
				__label__ = 11;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = $ix;
						var $4 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx = (($4 + 6 * $3) & 4294967295);
						var $stress1 = (($arrayidx) & 4294967295);
						var $5 = HEAP8[($stress1)];
						var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$stress = $conv;
						var $6 = $stress;
						var $7 = $max_stress;
						var $cmp2 = ((($6)) | 0) >= ((($7)) | 0);
						if ($cmp2) {
							__lastLabel__ = 1;
							__label__ = 2;;
						} else {
							__lastLabel__ = 1;
							__label__ = 6;;
						}
						if (__label__ == 2) {
							var $8 = $stress;
							var $9 = $max_stress;
							var $cmp3 = ((($8)) | 0) > ((($9)) | 0);
							if ($cmp3) {
								__label__ = 3;;
							} else {
								__label__ = 4;;
							}
							if (__label__ == 3) {
								var $10 = $ix;
								$max_stress_posn2 = $10;;
							} else if (__label__ == 4) {
								var $11 = $max_stress_posn;
								$max_stress_posn2 = $11;;
							}
							var $12 = $ix;
							$max_stress_posn = $12;
							var $13 = $stress;
							$max_stress = $13;
							__lastLabel__ = 5;;
						}
						var $14 = __lastLabel__ == 5 ? $13 : ($6);
						var $cmp6 = ((($14)) | 0) >= 4;
						if ($cmp6) {
							__label__ = 7;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 7) {
							var $15 = HEAP32[((__ZL10number_pre) >> 2)];
							var $cmp8 = ((($15)) | 0) < 0;
							if ($cmp8) {
								__label__ = 8;;
							} else {
								__label__ = 9;;
							}
							if (__label__ == 8) {
								var $16 = $ix;
								var $17 = $start_addr;
								var $sub = ((($16) - ($17)) & 4294967295);
								HEAP32[((__ZL10number_pre) >> 2)] = $sub;;
							}
							var $18 = $ix;
							HEAP32[((__ZL12last_primary) >> 2)] = $18;;
						}
						var $19 = $ix;
						var $inc = ((($19) + 1) & 4294967295);
						$ix = $inc;
						var $20 = $ix;
						var $21 = $end_addr;
						var $cmp = ((($20)) | 0) < ((($21)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 11;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			var $22 = HEAP32[((__ZL10number_pre) >> 2)];
			var $cmp12 = ((($22)) | 0) < 0;
			if ($cmp12) {
				__label__ = 12;;
			} else {
				__label__ = 13;;
			}
			if (__label__ == 12) {
				var $23 = $end_addr;
				HEAP32[((__ZL10number_pre) >> 2)] = $23;;
			}
			var $24 = $end_addr;
			var $25 = $max_stress_posn;
			var $_neg = (((-($25))) & 4294967295);
			var $sub15 = ((($24) - 1) & 4294967295);
			var $sub16 = ((($sub15) + ($_neg)) & 4294967295);
			HEAP32[((__ZL11number_tail) >> 2)] = $sub16;
			var $26 = $max_stress_posn;
			HEAP32[((__ZL9tone_posn) >> 2)] = $26;
			var $27 = $max_stress_posn2;
			HEAP32[((__ZL10tone_posn2) >> 2)] = $27;
			var $_b = HEAPU8[(__ZL8no_tonic_b)];
			var $28 = ((($_b)) & 1);
			var $tobool = ((($28)) | 0) != 0;
			if ($tobool) {
				__label__ = 14;;
			} else {
				__label__ = 15;;
			}
			$if_then17$$if_else18$22: do {
				if (__label__ == 14) {
					var $29 = $end_addr;
					HEAP32[((__ZL10tone_posn2) >> 2)] = $29;
					HEAP32[((__ZL9tone_posn) >> 2)] = $29;;
				} else if (__label__ == 15) {
					var $30 = HEAP32[((__ZL12last_primary) >> 2)];
					var $cmp19 = ((($30)) | 0) >= 0;
					if ($cmp19) {
						__label__ = 16;;
					} else {
						__label__ = 18;;
					}
					if (__label__ == 16) {
						var $31 = $end_addr;
						var $32 = $clause_end_addr;
						var $cmp21 = ((($31)) | 0) == ((($32)) | 0);
						if (!($cmp21)) {
							__label__ = 19;
							break $if_then17$$if_else18$22;
						}
						var $33 = HEAP32[((__ZL12last_primary) >> 2)];
						var $34 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx23 = (($34 + 6 * $33) & 4294967295);
						var $stress24 = (($arrayidx23) & 4294967295);
						HEAP8[($stress24)] = 7;;
					} else if (__label__ == 18) {
						var $35 = HEAP32[((__ZL9tone_posn) >> 2)];
						var $36 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx27 = (($36 + 6 * $35) & 4294967295);
						var $stress28 = (($arrayidx27) & 4294967295);
						HEAP8[($stress28)] = 7;;
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL12calc_pitchesiiii($control, $start, $end, $tune_number) {;
			var __label__;
			var $retval;
			var $control_addr;
			var $start_addr;
			var $end_addr;
			var $tune_number_addr;
			var $ix;
			var $th;
			var $tn;
			var $drop;
			var $continuing;
			$control_addr = $control;
			$start_addr = $start;
			$end_addr = $end;
			$tune_number_addr = $tune_number;
			$continuing = 0;
			var $0 = $control_addr;
			var $cmp = ((($0)) | 0) == 0;
			var $1 = $start_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = $end_addr;
				var $3 = $tune_number_addr;
				var $call = __ZL13calc_pitches2iii($1, $2, $3);
				$retval = $call;;
			} else if (__label__ == 2) {
				var $cmp1 = ((($1)) | 0) > 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$continuing = 1;;
				}
				var $4 = $tune_number_addr;
				var $arrayidx = ((__ZL15tone_head_table + $4 * 16) & 4294967295);
				$th = $arrayidx;
				var $5 = $tune_number_addr;
				var $arrayidx4 = ((__ZL18tone_nucleus_table + $5 * 16) & 4294967295);
				$tn = $arrayidx4;
				var $6 = $start_addr;
				$ix = $6;
				var $7 = $ix;
				var $8 = $ix;
				var $9 = HEAP32[((__ZL10number_pre) >> 2)];
				var $add = ((($9) + ($8)) & 4294967295);
				var $10 = $th;
				var $pre_start = (($10) & 4294967295);
				var $11 = HEAPU8[($pre_start)];
				var $conv = ((($11)) & 255);
				var $12 = $th;
				var $pre_end = (($12 + 1) & 4294967295);
				var $13 = HEAPU8[($pre_end)];
				var $conv5 = ((($13)) & 255);
				__ZL16SetPitchGradientiiii($7, $add, $conv, $conv5);
				var $14 = HEAP32[((__ZL10number_pre) >> 2)];
				var $15 = $ix;
				var $add6 = ((($15) + ($14)) & 4294967295);
				$ix = $add6;
				var $16 = HEAP32[((_option_tone_flags) >> 2)];
				var $and = ($16) & 512;
				var $tobool = ((($and)) | 0) != 0;
				if ($tobool) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $17 = HEAP32[((__ZL10tone_posn2) >> 2)];
					HEAP32[((__ZL9tone_posn) >> 2)] = $17;;
				}
				var $18 = $ix;
				var $19 = HEAP32[((__ZL9tone_posn) >> 2)];
				var $20 = $th;
				var $21 = $tn;
				var $22 = $continuing;
				var $call9 = __ZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSii($18, $19, $20, $21, $22);
				$ix = $call9;
				var $_b = HEAPU8[(__ZL8no_tonic_b)];
				var $23 = ((($_b)) & 1);
				var $tobool10 = ((($23)) | 0) != 0;
				if ($tobool10) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					$retval = 0;;
				} else if (__label__ == 8) {
					var $24 = $tn;
					var $flags = (($24 + 14) & 4294967295);
					var $25 = HEAPU8[($flags)];
					var $conv13 = ((($25)) & 255);
					var $and14 = ($conv13) & 1;
					var $tobool15 = ((($and14)) | 0) != 0;
					if ($tobool15) {
						__label__ = 9;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 9) {
						var $26 = $ix;
						var $27 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx17 = (($27 + 6 * $26) & 4294967295);
						var $flags18 = (($arrayidx17 + 2) & 4294967295);
						var $28 = HEAP8[($flags18)];
						var $conv19 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $or = ($conv19) | 2;
						var $conv20 = ((($or)) & 255);
						HEAP8[($flags18)] = $conv20;;
					}
					var $29 = HEAP32[((__ZL11number_tail) >> 2)];
					var $cmp22 = ((($29)) | 0) == 0;
					var $30 = $tn;
					if ($cmp22) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						var $pitch_env0 = (($30) & 4294967295);
						var $31 = HEAPU8[($pitch_env0)];
						var $conv24 = ((($31)) & 255);
						HEAP32[((__ZL14tone_pitch_env) >> 2)] = $conv24;
						var $32 = $tn;
						var $tonic_max0 = (($32 + 1) & 4294967295);
						var $33 = HEAPU8[($tonic_max0)];
						var $conv25 = ((($33)) & 255);
						var $34 = $tn;
						var $tonic_min0 = (($34 + 2) & 4294967295);
						var $35 = HEAPU8[($tonic_min0)];
						var $conv26 = ((($35)) & 255);
						var $sub = ((($conv25) - ($conv26)) & 4294967295);
						$drop = $sub;
						var $36 = $ix;
						var $inc = ((($36) + 1) & 4294967295);
						$ix = $inc;
						var $37 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx27 = (($37 + 6 * $36) & 4294967295);
						var $38 = $tn;
						var $tonic_min028 = (($38 + 2) & 4294967295);
						var $39 = HEAPU8[($tonic_min028)];
						var $conv29 = ((($39)) & 255);
						var $40 = $drop;
						__ZL9set_pitchP8SYLLABLEii($arrayidx27, $conv29, $40);;
					} else if (__label__ == 12) {
						var $pitch_env1 = (($30 + 3) & 4294967295);
						var $41 = HEAPU8[($pitch_env1)];
						var $conv30 = ((($41)) & 255);
						HEAP32[((__ZL14tone_pitch_env) >> 2)] = $conv30;
						var $42 = $tn;
						var $tonic_max1 = (($42 + 4) & 4294967295);
						var $43 = HEAPU8[($tonic_max1)];
						var $conv31 = ((($43)) & 255);
						var $44 = $tn;
						var $tonic_min1 = (($44 + 5) & 4294967295);
						var $45 = HEAPU8[($tonic_min1)];
						var $conv32 = ((($45)) & 255);
						var $sub33 = ((($conv31) - ($conv32)) & 4294967295);
						$drop = $sub33;
						var $46 = $ix;
						var $inc34 = ((($46) + 1) & 4294967295);
						$ix = $inc34;
						var $47 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx35 = (($47 + 6 * $46) & 4294967295);
						var $48 = $tn;
						var $tonic_min136 = (($48 + 5) & 4294967295);
						var $49 = HEAPU8[($tonic_min136)];
						var $conv37 = ((($49)) & 255);
						var $50 = $drop;
						__ZL9set_pitchP8SYLLABLEii($arrayidx35, $conv37, $50);;
					}
					var $51 = HEAP32[((__ZL14tone_pitch_env) >> 2)];
					var $conv39 = ((($51)) & 255);
					var $52 = HEAP32[((__ZL9tone_posn) >> 2)];
					var $53 = HEAP32[((__ZL12syllable_tab) >> 2)];
					var $arrayidx40 = (($53 + 6 * $52) & 4294967295);
					var $env = (($arrayidx40 + 1) & 4294967295);
					HEAP8[($env)] = $conv39;
					var $54 = HEAP32[((__ZL9tone_posn) >> 2)];
					var $55 = HEAP32[((__ZL12syllable_tab) >> 2)];
					var $arrayidx41 = (($55 + 6 * $54) & 4294967295);
					var $stress = (($arrayidx41) & 4294967295);
					var $56 = HEAP8[($stress)];
					var $conv42 = (tempInt = (($56)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp43 = ((($conv42)) | 0) == 4;
					if ($cmp43) {
						__label__ = 14;;
					} else {
						__label__ = 15;;
					}
					if (__label__ == 14) {
						var $57 = HEAP32[((__ZL9tone_posn) >> 2)];
						var $58 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx45 = (($58 + 6 * $57) & 4294967295);
						var $stress46 = (($arrayidx45) & 4294967295);
						HEAP8[($stress46)] = 6;;
					}
					var $59 = $ix;
					var $60 = $end_addr;
					var $61 = $tn;
					var $tail_start = (($61 + 12) & 4294967295);
					var $62 = HEAPU8[($tail_start)];
					var $conv48 = ((($62)) & 255);
					var $63 = $tn;
					var $tail_end = (($63 + 13) & 4294967295);
					var $64 = HEAPU8[($tail_end)];
					var $conv49 = ((($64)) & 255);
					__ZL16SetPitchGradientiiii($59, $60, $conv48, $conv49);
					var $65 = HEAP32[((__ZL14tone_pitch_env) >> 2)];
					$retval = $65;;
				}
			};
			return;
			return;
		}

		function __ZL13calc_pitches2iii($start, $end, $tune_number) {;
			var __label__;
			var $retval;
			var $start_addr;
			var $end_addr;
			var $tune_number_addr;
			var $ix;
			var $tune;
			var $drop;
			var $continuing;
			$start_addr = $start;
			$end_addr = $end;
			$tune_number_addr = $tune_number;
			$continuing = 0;
			var $0 = $start_addr;
			var $cmp = ((($0)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$continuing = 1;;
			}
			var $1 = $tune_number_addr;
			var $2 = HEAP32[((_tunes) >> 2)];
			var $arrayidx = (($2 + 68 * $1) & 4294967295);
			$tune = $arrayidx;
			var $3 = $start_addr;
			$ix = $3;
			var $4 = $ix;
			var $5 = $ix;
			var $6 = HEAP32[((__ZL10number_pre) >> 2)];
			var $add = ((($6) + ($5)) & 4294967295);
			var $7 = $tune;
			var $prehead_start = (($7 + 24) & 4294967295);
			var $8 = HEAPU8[($prehead_start)];
			var $conv = ((($8)) & 255);
			var $9 = $tune;
			var $prehead_end = (($9 + 25) & 4294967295);
			var $10 = HEAPU8[($prehead_end)];
			var $conv1 = ((($10)) & 255);
			__ZL16SetPitchGradientiiii($4, $add, $conv, $conv1);
			var $11 = HEAP32[((__ZL10number_pre) >> 2)];
			var $12 = $ix;
			var $add2 = ((($12) + ($11)) & 4294967295);
			$ix = $add2;
			var $13 = HEAP32[((_option_tone_flags) >> 2)];
			var $and = ($13) & 512;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $14 = HEAP32[((__ZL10tone_posn2) >> 2)];
				HEAP32[((__ZL9tone_posn) >> 2)] = $14;;
			}
			var $15 = $tune;
			var $16 = $ix;
			var $17 = HEAP32[((__ZL9tone_posn) >> 2)];
			var $call = __ZL17SetHeadIntonationP4TUNEiii($15, $16, $17);
			$ix = $call;
			var $_b = HEAPU8[(__ZL8no_tonic_b)];
			var $18 = ((($_b)) & 1);
			var $tobool5 = ((($18)) | 0) != 0;
			if ($tobool5) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				$retval = 0;;
			} else if (__label__ == 6) {
				var $19 = HEAP32[((__ZL11number_tail) >> 2)];
				var $cmp8 = ((($19)) | 0) == 0;
				var $20 = $tune;
				if ($cmp8) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $nucleus0_env = (($20 + 42) & 4294967295);
					var $21 = HEAPU8[($nucleus0_env)];
					var $conv10 = ((($21)) & 255);
					HEAP32[((__ZL14tone_pitch_env) >> 2)] = $conv10;
					var $22 = $tune;
					var $nucleus0_max = (($22 + 43) & 4294967295);
					var $23 = HEAPU8[($nucleus0_max)];
					var $conv11 = ((($23)) & 255);
					var $24 = $tune;
					var $nucleus0_min = (($24 + 44) & 4294967295);
					var $25 = HEAPU8[($nucleus0_min)];
					var $conv12 = ((($25)) & 255);
					var $sub = ((($conv11) - ($conv12)) & 4294967295);
					$drop = $sub;
					var $26 = $ix;
					var $inc = ((($26) + 1) & 4294967295);
					$ix = $inc;
					var $27 = HEAP32[((__ZL12syllable_tab) >> 2)];
					var $arrayidx13 = (($27 + 6 * $26) & 4294967295);
					var $28 = $tune;
					var $nucleus0_min14 = (($28 + 44) & 4294967295);
					var $29 = HEAPU8[($nucleus0_min14)];
					var $conv15 = ((($29)) & 255);
					var $30 = $drop;
					__ZL9set_pitchP8SYLLABLEii($arrayidx13, $conv15, $30);;
				} else if (__label__ == 8) {
					var $nucleus1_env = (($20 + 45) & 4294967295);
					var $31 = HEAPU8[($nucleus1_env)];
					var $conv16 = ((($31)) & 255);
					HEAP32[((__ZL14tone_pitch_env) >> 2)] = $conv16;
					var $32 = $tune;
					var $nucleus1_max = (($32 + 46) & 4294967295);
					var $33 = HEAPU8[($nucleus1_max)];
					var $conv17 = ((($33)) & 255);
					var $34 = $tune;
					var $nucleus1_min = (($34 + 47) & 4294967295);
					var $35 = HEAPU8[($nucleus1_min)];
					var $conv18 = ((($35)) & 255);
					var $sub19 = ((($conv17) - ($conv18)) & 4294967295);
					$drop = $sub19;
					var $36 = $ix;
					var $inc20 = ((($36) + 1) & 4294967295);
					$ix = $inc20;
					var $37 = HEAP32[((__ZL12syllable_tab) >> 2)];
					var $arrayidx21 = (($37 + 6 * $36) & 4294967295);
					var $38 = $tune;
					var $nucleus1_min22 = (($38 + 47) & 4294967295);
					var $39 = HEAPU8[($nucleus1_min22)];
					var $conv23 = ((($39)) & 255);
					var $40 = $drop;
					__ZL9set_pitchP8SYLLABLEii($arrayidx21, $conv23, $40);;
				}
				var $41 = HEAP32[((__ZL14tone_pitch_env) >> 2)];
				var $conv25 = ((($41)) & 255);
				var $42 = HEAP32[((__ZL9tone_posn) >> 2)];
				var $43 = HEAP32[((__ZL12syllable_tab) >> 2)];
				var $arrayidx26 = (($43 + 6 * $42) & 4294967295);
				var $env = (($arrayidx26 + 1) & 4294967295);
				HEAP8[($env)] = $conv25;
				var $44 = HEAP32[((__ZL9tone_posn) >> 2)];
				var $45 = HEAP32[((__ZL12syllable_tab) >> 2)];
				var $arrayidx27 = (($45 + 6 * $44) & 4294967295);
				var $stress = (($arrayidx27) & 4294967295);
				var $46 = HEAP8[($stress)];
				var $conv28 = (tempInt = (($46)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp29 = ((($conv28)) | 0) == 4;
				if ($cmp29) {
					__label__ = 10;;
				} else {
					__label__ = 11;;
				}
				if (__label__ == 10) {
					var $47 = HEAP32[((__ZL9tone_posn) >> 2)];
					var $48 = HEAP32[((__ZL12syllable_tab) >> 2)];
					var $arrayidx31 = (($48 + 6 * $47) & 4294967295);
					var $stress32 = (($arrayidx31) & 4294967295);
					HEAP8[($stress32)] = 6;;
				}
				var $49 = $ix;
				var $50 = $end_addr;
				var $51 = $tune;
				var $tail_start = (($51 + 48) & 4294967295);
				var $52 = HEAPU8[($tail_start)];
				var $conv34 = ((($52)) & 255);
				var $53 = $tune;
				var $tail_end = (($53 + 49) & 4294967295);
				var $54 = HEAPU8[($tail_end)];
				var $conv35 = ((($54)) & 255);
				__ZL16SetPitchGradientiiii($49, $50, $conv34, $conv35);
				var $55 = HEAP32[((__ZL14tone_pitch_env) >> 2)];
				$retval = $55;;
			}
			var $56 = $retval;;
			return $56;
			return null;
		}

		function __ZL16SetPitchGradientiiii($start_ix, $end_ix, $start_pitch, $end_pitch) {;
			var __label__;
			var __lastLabel__ = null;
			var $start_ix_addr;
			var $end_ix_addr;
			var $start_pitch_addr;
			var $end_pitch_addr;
			var $ix;
			var $stress;
			var $pitch;
			var $increment;
			var $n_increments;
			var $drop;
			var $syl;
			$start_ix_addr = $start_ix;
			$end_ix_addr = $end_ix;
			$start_pitch_addr = $start_pitch;
			$end_pitch_addr = $end_pitch;
			var $0 = $end_pitch_addr;
			var $1 = $start_pitch_addr;
			var $sub = ((($0) - ($1)) & 4294967295);
			var $shl = ($sub) << 8;
			$increment = $shl;
			var $2 = $end_ix_addr;
			var $3 = $start_ix_addr;
			var $sub1 = ((($2) - ($3)) & 4294967295);
			$n_increments = $sub1;
			var $4 = $n_increments;
			var $cmp = ((($4)) | 0) <= 0;
			if ($cmp) {
				__label__ = 12;;
			} else {
				__label__ = 1;;
			}
			$for_end$$if_end$2: do {
				if (__label__ == 1) {
					var $5 = $n_increments;
					var $cmp2 = ((($5)) | 0) > 1;
					if ($cmp2) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						var $6 = $increment;
						var $7 = $n_increments;
						var $div = ((((($6)) | 0) / ((($7)) | 0)) | 0);
						$increment = $div;;
					}
					var $8 = $start_pitch_addr;
					var $shl5 = ($8) << 8;
					$pitch = $shl5;
					var $9 = $start_ix_addr;
					$ix = $9;
					var $10 = $ix;
					var $11 = $end_ix_addr;
					var $cmp61 = ((($10)) | 0) < ((($11)) | 0);
					if (!($cmp61)) {
						__label__ = 12;
						break $for_end$$if_end$2;
					}
					while (1) {
						var $12 = $ix;
						var $13 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx = (($13 + 6 * $12) & 4294967295);
						$syl = $arrayidx;
						var $14 = $syl;
						var $stress7 = (($14) & 4294967295);
						var $15 = HEAP8[($stress7)];
						var $conv = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$stress = $conv;
						var $16 = $increment;
						var $cmp8 = ((($16)) | 0) > 0;
						if ($cmp8) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							var $17 = $syl;
							var $18 = $pitch;
							var $shr = ($18) >> 8;
							var $19 = $increment;
							var $shr10 = ($19) >> 8;
							var $sub11 = (((-($shr10))) & 4294967295);
							__ZL9set_pitchP8SYLLABLEii($17, $shr, $sub11);
							var $20 = $increment;
							var $21 = $pitch;
							var $add = ((($21) + ($20)) & 4294967295);
							$pitch = $add;;
						} else if (__label__ == 6) {
							var $22 = $increment;
							var $shr12 = ($22) >> 8;
							var $sub13 = (((-($shr12))) & 4294967295);
							$drop = $sub13;
							var $23 = $drop;
							var $24 = $stress;
							var $arrayidx14 = ((__ZL8min_drop + $24 * 4) & 4294967295);
							var $25 = HEAP32[(($arrayidx14) >> 2)];
							var $cmp15 = ((($23)) | 0) < ((($25)) | 0);
							if ($cmp15) {
								__lastLabel__ = 6;
								__label__ = 7;;
							} else {
								__lastLabel__ = 6;
								__label__ = 8;;
							}
							if (__label__ == 7) {
								var $26 = $stress;
								var $arrayidx17 = ((__ZL8min_drop + $26 * 4) & 4294967295);
								var $27 = HEAP32[(($arrayidx17) >> 2)];
								$drop = $27;
								__lastLabel__ = 7;;
							}
							var $28 = __lastLabel__ == 7 ? $27 : ($23);
							var $29 = $increment;
							var $30 = $pitch;
							var $add19 = ((($30) + ($29)) & 4294967295);
							$pitch = $add19;
							var $cmp20 = ((($28)) | 0) > 18;
							if ($cmp20) {
								__label__ = 9;;
							} else {
								__label__ = 10;;
							}
							if (__label__ == 9) {
								$drop = 18;;
							}
							var $31 = $syl;
							var $32 = $pitch;
							var $shr23 = ($32) >> 8;
							var $33 = $drop;
							__ZL9set_pitchP8SYLLABLEii($31, $shr23, $33);;
						}
						var $34 = $ix;
						var $inc = ((($34) + 1) & 4294967295);
						$ix = $inc;
						var $35 = $ix;
						var $36 = $end_ix_addr;
						var $cmp6 = ((($35)) | 0) < ((($36)) | 0);
						if ($cmp6) {
							__label__ = 4;
							continue;
						} else {
							__label__ = 12;
							break $for_end$$if_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSii($ix, $end_ix, $th, $tn, $continuing) {;
			var __label__;
			var __lastLabel__ = null;
			var $ix_addr;
			var $end_ix_addr;
			var $th_addr;
			var $tn_addr;
			var $min_stress_addr;
			var $continuing_addr;
			var $stress;
			var $pitch;
			var $increment;
			var $n_primary;
			var $n_steps;
			var $initial;
			var $overflow;
			var $n_overflow;
			var $pitch_range;
			var $pitch_range_abs;
			var $drops;
			var $overflow_tab;
			var $syl;
			$ix_addr = $ix;
			$end_ix_addr = $end_ix;
			$th_addr = $th;
			$tn_addr = $tn;
			$min_stress_addr = 4;
			$continuing_addr = $continuing;
			$pitch = 0;
			$increment = 0;
			$n_primary = 0;
			$n_steps = 0;
			$overflow = 0;
			var $0 = $th_addr;
			var $body_drops = (($0 + 4) & 4294967295);
			var $1 = HEAP32[(($body_drops) >> 2)];
			$drops = $1;
			var $2 = $th_addr;
			var $body_end = (($2 + 3) & 4294967295);
			var $3 = HEAPU8[($body_end)];
			var $conv = ((($3)) & 255);
			var $4 = $th_addr;
			var $body_start = (($4 + 2) & 4294967295);
			var $5 = HEAPU8[($body_start)];
			var $conv1 = ((($5)) & 255);
			var $sub = ((($conv) - ($conv1)) & 4294967295);
			var $shl = ($sub) << 8;
			$pitch_range = $shl;
			var $6 = $pitch_range;
			var $ispos = ((($6)) | 0) > -1;
			var $neg = (((-($6))) & 4294967295);
			var $call = ($ispos) ? ($6) : ($neg);
			$pitch_range_abs = $call;
			var $7 = $continuing_addr;
			var $tobool = ((($7)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$initial = 0;
				$overflow = 0;
				$n_overflow = 5;
				$overflow_tab = ((__ZZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSiiE12continue_tab) & 4294967295);
				var $8 = $pitch_range;
				var $9 = $th_addr;
				var $body_max_steps = (($9 + 8) & 4294967295);
				var $10 = HEAPU8[($body_max_steps)];
				var $conv2 = ((($10)) & 255);
				var $sub3 = ((($conv2) - 1) & 4294967295);
				var $div = ((((($8)) | 0) / ((($sub3)) | 0)) | 0);
				$increment = $div;;
			} else if (__label__ == 2) {
				var $11 = $th_addr;
				var $n_overflow4 = (($11 + 10) & 4294967295);
				var $12 = HEAPU8[($n_overflow4)];
				var $conv5 = ((($12)) & 255);
				$n_overflow = $conv5;
				var $13 = $th_addr;
				var $overflow6 = (($13 + 12) & 4294967295);
				var $14 = HEAP32[(($overflow6) >> 2)];
				$overflow_tab = $14;
				$initial = 1;;
			}
			var $15 = $ix_addr;
			var $16 = $end_ix_addr;
			var $cmp4 = ((($15)) | 0) < ((($16)) | 0);
			var $17 = $ix_addr;
			if ($cmp4) {
				__lastLabel__ = 3;
				__label__ = 4;;
			} else {
				__lastLabel__ = 3;
				__label__ = 31;;
			}
			$while_body$$while_end$6: do {
				if (__label__ == 4) {
					$while_body$7: while (1) {
						var $18 = __lastLabel__ == 30 ? $90 : ($17);
						var $19 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx = (($19 + 6 * $18) & 4294967295);
						$syl = $arrayidx;
						var $20 = $syl;
						var $stress7 = (($20) & 4294967295);
						var $21 = HEAP8[($stress7)];
						var $conv8 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$stress = $conv8;
						var $22 = $initial;
						var $tobool9 = ((($22)) | 0) != 0;
						if ($tobool9) {
							__label__ = 8;;
						} else {
							__label__ = 5;;
						}
						$if_then15$$lor_lhs_false$9: do {
							if (__label__ == 5) {
								var $23 = $stress;
								var $24 = $min_stress_addr;
								var $cmp10 = ((($23)) | 0) >= ((($24)) | 0);
								if ($cmp10) {
									__lastLabel__ = 5;;
								} else {
									__lastLabel__ = 5;
									__label__ = 23;
									break $if_then15$$lor_lhs_false$9;
								}
								var $_pr = $initial;
								var $tobool12 = ((($_pr)) | 0) != 0;
								if ($tobool12) {
									__label__ = 8;
									break $if_then15$$lor_lhs_false$9;
								}
								var $25 = $stress;
								var $cmp14 = ((($25)) | 0) == 5;
								if ($cmp14) {
									__label__ = 8;
									break $if_then15$$lor_lhs_false$9;
								}
								var $39 = $n_steps;
								var $cmp34 = ((($39)) | 0) > 0;
								if ($cmp34) {
									__label__ = 16;;
								} else {
									__label__ = 17;;
								}
								if (__label__ == 16) {
									var $40 = $increment;
									var $41 = $pitch;
									var $add = ((($41) + ($40)) & 4294967295);
									$pitch = $add;
									__label__ = 19;
									break $if_then15$$lor_lhs_false$9;
								} else if (__label__ == 17) {
									var $42 = $th_addr;
									var $body_end37 = (($42 + 3) & 4294967295);
									var $43 = HEAPU8[($body_end37)];
									var $conv38 = ((($43)) & 255);
									var $shl39 = ((($conv38) * 256) & 4294967295);
									var $44 = $pitch_range_abs;
									var $45 = $overflow;
									var $inc = ((($45) + 1) & 4294967295);
									$overflow = $inc;
									var $46 = $overflow_tab;
									var $arrayidx40 = (($46 + $45) & 4294967295);
									var $47 = HEAP8[($arrayidx40)];
									var $conv41 = (tempInt = (($47)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $mul = ((($conv41) * ($44)) & 4294967295);
									var $div42 = ((((($mul)) | 0) / 64) | 0);
									var $add43 = ((($div42) + ($shl39)) & 4294967295);
									$pitch = $add43;
									var $48 = $overflow;
									var $49 = $n_overflow;
									var $cmp44 = ((($48)) | 0) >= ((($49)) | 0);
									if (!($cmp44)) {
										__label__ = 19;
										break $if_then15$$lor_lhs_false$9;
									}
									$overflow = 0;
									var $50 = $th_addr;
									var $overflow46 = (($50 + 12) & 4294967295);
									var $51 = HEAP32[(($overflow46) >> 2)];
									$overflow_tab = $51;
									__label__ = 19;
									break $if_then15$$lor_lhs_false$9;
								}
							}
						} while (0);
						$if_then15$$if_end49$$if_end59$18: do {
							if (__label__ == 8) {
								$initial = 0;
								$overflow = 0;
								var $26 = $ix_addr;
								var $27 = $end_ix_addr;
								var $28 = $min_stress_addr;
								var $call16 = __ZL16count_incrementsiii($26, $27, $28);
								$n_primary = $call16;
								$n_steps = $call16;
								var $29 = $n_steps;
								var $30 = $th_addr;
								var $body_max_steps17 = (($30 + 8) & 4294967295);
								var $31 = HEAPU8[($body_max_steps17)];
								var $conv18 = ((($31)) & 255);
								var $cmp19 = ((($29)) | 0) > ((($conv18)) | 0);
								if ($cmp19) {
									__label__ = 9;;
								} else {
									__label__ = 10;;
								}
								if (__label__ == 9) {
									var $32 = $th_addr;
									var $body_max_steps21 = (($32 + 8) & 4294967295);
									var $33 = HEAPU8[($body_max_steps21)];
									var $conv22 = ((($33)) & 255);
									$n_steps = $conv22;
									__lastLabel__ = 9;;
								} else if (__label__ == 10) {
									var $_pr2 = $n_steps;
									__lastLabel__ = 10;;
								}
								var $34 = __lastLabel__ == 10 ? $_pr2 : ($conv22);
								var $cmp24 = ((($34)) | 0) > 1;
								if ($cmp24) {
									__label__ = 12;;
								} else {
									__label__ = 13;;
								}
								if (__label__ == 12) {
									var $35 = $pitch_range;
									var $36 = $n_steps;
									var $sub26 = ((($36) - 1) & 4294967295);
									var $div27 = ((((($35)) | 0) / ((($sub26)) | 0)) | 0);
									$increment = $div27;;
								} else if (__label__ == 13) {
									$increment = 0;;
								}
								var $37 = $th_addr;
								var $body_start30 = (($37 + 2) & 4294967295);
								var $38 = HEAPU8[($body_start30)];
								var $conv31 = ((($38)) & 255);
								var $shl32 = ($conv31) << 8;
								$pitch = $shl32;
								__label__ = 19;
								break $if_then15$$if_end49$$if_end59$18;
							}
						} while (0);
						if (__label__ == 19) {
							var $52 = $n_steps;
							var $dec = ((($52) - 1) & 4294967295);
							$n_steps = $dec;
							var $53 = $n_primary;
							var $dec50 = ((($53) - 1) & 4294967295);
							$n_primary = $dec50;
							var $54 = $tn_addr;
							var $backwards = (($54 + 8) & 4294967295);
							var $55 = HEAP32[(($backwards) >> 2)];
							var $tobool51 = ((($55)) | 0) != 0;
							if ($tobool51) {
								__label__ = 20;;
							} else {
								__label__ = 22;;
							}
							$land_lhs_true$$if_end59thread_pre_split$30: do {
								if (__label__ == 20) {
									var $56 = $n_primary;
									var $cmp52 = ((($56)) | 0) < 2;
									if (!($cmp52)) {
										__label__ = 22;
										break $land_lhs_true$$if_end59thread_pre_split$30;
									}
									var $57 = $n_primary;
									var $58 = $tn_addr;
									var $backwards54 = (($58 + 8) & 4294967295);
									var $59 = HEAP32[(($backwards54) >> 2)];
									var $arrayidx55 = (($59 + 2 * $57) & 4294967295);
									var $60 = HEAP16[(($arrayidx55) >> 1)];
									var $conv56 = (tempInt = (($60)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $shl57 = ($conv56) << 8;
									$pitch = $shl57;;
								}
							} while (0);
							var $_pr3 = $stress;
							__lastLabel__ = 22;;
						}
						var $61 = __lastLabel__ == 22 ? $_pr3 : ($23);
						var $cmp60 = ((($61)) | 0) >= 4;
						if ($cmp60) {
							__label__ = 24;;
						} else {
							__label__ = 25;;
						}
						if (__label__ == 24) {
							var $62 = $syl;
							var $stress62 = (($62) & 4294967295);
							HEAP8[($stress62)] = 6;
							var $63 = $syl;
							var $64 = $pitch;
							var $shr = ($64) >> 8;
							var $65 = $stress;
							var $66 = $drops;
							var $arrayidx63 = (($66 + 4 * $65) & 4294967295);
							var $67 = HEAP32[(($arrayidx63) >> 2)];
							__ZL9set_pitchP8SYLLABLEii($63, $shr, $67);;
						} else if (__label__ == 25) {
							var $68 = $stress;
							var $cmp65 = ((($68)) | 0) >= 3;
							if ($cmp65) {
								__label__ = 26;;
							} else {
								__label__ = 27;;
							}
							if (__label__ == 26) {
								var $69 = $syl;
								var $70 = $pitch;
								var $shr67 = ($70) >> 8;
								var $71 = $stress;
								var $72 = $drops;
								var $arrayidx68 = (($72 + 4 * $71) & 4294967295);
								var $73 = HEAP32[(($arrayidx68) >> 2)];
								__ZL9set_pitchP8SYLLABLEii($69, $shr67, $73);;
							} else if (__label__ == 27) {
								var $74 = $ix_addr;
								var $sub70 = ((($74) - 1) & 4294967295);
								var $75 = HEAP32[((__ZL12syllable_tab) >> 2)];
								var $arrayidx71 = (($75 + 6 * $sub70) & 4294967295);
								var $stress72 = (($arrayidx71) & 4294967295);
								var $76 = HEAP8[($stress72)];
								var $conv73 = (tempInt = (($76)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $and = ($conv73) & 63;
								var $cmp74 = ((($and)) | 0) >= 3;
								var $77 = $syl;
								var $78 = $pitch;
								var $shr76 = ($78) >> 8;
								if ($cmp74) {
									__label__ = 28;;
								} else {
									__label__ = 29;;
								}
								if (__label__ == 28) {
									var $79 = $th_addr;
									var $body_lower_u = (($79 + 9) & 4294967295);
									var $80 = HEAP8[($body_lower_u)];
									var $conv77 = (tempInt = (($80)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub78 = ((($shr76) - ($conv77)) & 4294967295);
									var $81 = $stress;
									var $82 = $drops;
									var $arrayidx79 = (($82 + 4 * $81) & 4294967295);
									var $83 = HEAP32[(($arrayidx79) >> 2)];
									__ZL9set_pitchP8SYLLABLEii($77, $sub78, $83);;
								} else if (__label__ == 29) {
									var $84 = $stress;
									var $85 = $drops;
									var $arrayidx82 = (($85 + 4 * $84) & 4294967295);
									var $86 = HEAP32[(($arrayidx82) >> 2)];
									__ZL9set_pitchP8SYLLABLEii($77, $shr76, $86);;
								}
							}
						}
						var $87 = $ix_addr;
						var $inc86 = ((($87) + 1) & 4294967295);
						$ix_addr = $inc86;
						var $88 = $ix_addr;
						var $89 = $end_ix_addr;
						var $cmp = ((($88)) | 0) < ((($89)) | 0);
						var $90 = $ix_addr;
						if ($cmp) {
							__lastLabel__ = 30;
							__label__ = 4;
							continue $while_body$7;
						} else {
							__lastLabel__ = 30;
							__label__ = 31;
							break $while_body$$while_end$6;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 3 ? $17 : ($90);;
			return $_lcssa;
			return null;
		}

		function __ZL9set_pitchP8SYLLABLEii($syl, $base, $drop) {;
			var __label__;
			var __lastLabel__ = null;
			var $syl_addr;
			var $base_addr;
			var $drop_addr;
			var $pitch1;
			var $pitch2;
			var $flags;
			$syl_addr = $syl;
			$base_addr = $base;
			$drop_addr = $drop;
			$flags = 0;
			var $0 = $base_addr;
			var $cmp = ((($0)) | 0) < 0;
			if ($cmp) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$base_addr = 0;
				var $_pr = $drop_addr;
				__lastLabel__ = 1;;
			}
			var $1 = __lastLabel__ == 1 ? $_pr : ($drop);
			var $2 = $base_addr;
			$pitch2 = $2;
			var $cmp1 = ((($1)) | 0) < 0;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				$flags = 1;
				var $3 = $drop_addr;
				var $sub = (((-($3))) & 4294967295);
				$drop_addr = $sub;;
			}
			var $4 = $pitch2;
			var $5 = $drop_addr;
			var $add = ((($5) + ($4)) & 4294967295);
			$pitch1 = $add;
			var $cmp4 = ((($add)) | 0) < 0;
			if ($cmp4) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			$if_end6_thread$$if_end6$8: do {
				if (__label__ == 5) {
					$pitch1 = 0;;
				} else if (__label__ == 6) {
					var $cmp7 = ((($add)) | 0) > 254;
					if (!($cmp7)) {
						__label__ = 8;
						break $if_end6_thread$$if_end6$8;
					}
					$pitch1 = 254;;
				}
			} while (0);
			var $6 = $pitch2;
			var $cmp10 = ((($6)) | 0) > 254;
			if ($cmp10) {
				__label__ = 9;;
			} else {
				__label__ = 10;;
			}
			if (__label__ == 9) {
				$pitch2 = 254;;
			}
			var $7 = $pitch1;
			var $conv = ((($7)) & 255);
			var $8 = $syl_addr;
			var $pitch113 = (($8 + 4) & 4294967295);
			HEAP8[($pitch113)] = $conv;
			var $9 = $pitch2;
			var $conv14 = ((($9)) & 255);
			var $10 = $syl_addr;
			var $pitch215 = (($10 + 5) & 4294967295);
			HEAP8[($pitch215)] = $conv14;
			var $11 = $flags;
			var $12 = $syl_addr;
			var $flags16 = (($12 + 2) & 4294967295);
			var $13 = HEAP8[($flags16)];
			var $conv17 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $or = ($conv17) | ($11);
			var $conv18 = ((($or)) & 255);
			HEAP8[($flags16)] = $conv18;;
			return;
			return;
		}

		function __ZL16count_incrementsiii($ix, $end_ix, $min_stress) {;
			var __label__;
			var $ix_addr;
			var $end_ix_addr;
			var $min_stress_addr;
			var $count;
			var $stress;
			$ix_addr = $ix;
			$end_ix_addr = $end_ix;
			$min_stress_addr = $min_stress;
			$count = 0;;
			while (1) {
				var $0 = $ix_addr;
				var $1 = $end_ix_addr;
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $ix_addr;
				var $inc = ((($2) + 1) & 4294967295);
				$ix_addr = $inc;
				var $3 = HEAP32[((__ZL12syllable_tab) >> 2)];
				var $arrayidx = (($3 + 6 * $2) & 4294967295);
				var $stress1 = (($arrayidx) & 4294967295);
				var $4 = HEAP8[($stress1)];
				var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				$stress = $conv;
				var $5 = $stress;
				var $cmp2 = ((($5)) | 0) >= 7;
				if ($cmp2) {
					__label__ = 5;
					break;
				}
				var $6 = $stress;
				var $7 = $min_stress_addr;
				var $cmp3 = ((($6)) | 0) >= ((($7)) | 0);
				if (!($cmp3)) {
					__label__ = 1;
					continue;
				}
				var $8 = $count;
				var $inc5 = ((($8) + 1) & 4294967295);
				$count = $inc5;
				__label__ = 1;
				continue;
			}
			var $9 = $count;;
			return $9;
			return null;
		}

		function __ZL17SetHeadIntonationP4TUNEiii($tune, $syl_ix, $end_ix) {;
			var __label__;
			var __lastLabel__ = null;
			var $tune_addr;
			var $syl_ix_addr;
			var $end_ix_addr;
			var $control_addr;
			var $stress;
			var $syl;
			var $ix;
			var $pitch;
			var $increment;
			var $n_steps;
			var $stage;
			var $initial;
			var $overflow_ix;
			var $pitch_range;
			var $pitch_range_abs;
			var $drops;
			var $n_unstressed;
			var $unstressed_ix;
			var $unstressed_inc;
			var $used_onset;
			var $head_final;
			var $secondary;
			$tune_addr = $tune;
			$syl_ix_addr = $syl_ix;
			$end_ix_addr = $end_ix;
			$control_addr = 0;
			$pitch = 0;
			$increment = 0;
			$n_steps = 0;
			$overflow_ix = 0;
			$n_unstressed = 0;
			$unstressed_ix = 0;
			$used_onset = 0;
			var $0 = $end_ix_addr;
			$head_final = $0;
			$secondary = 2;
			var $1 = $tune_addr;
			var $head_end = (($1 + 32) & 4294967295);
			var $2 = HEAPU8[($head_end)];
			var $conv = ((($2)) & 255);
			var $3 = $tune_addr;
			var $head_start = (($3 + 31) & 4294967295);
			var $4 = HEAPU8[($head_start)];
			var $conv1 = ((($4)) & 255);
			var $sub = ((($conv) - ($conv1)) & 4294967295);
			var $shl = ($sub) << 8;
			$pitch_range = $shl;
			var $5 = $pitch_range;
			var $ispos = ((($5)) | 0) > -1;
			var $neg = (((-($5))) & 4294967295);
			var $call = ($ispos) ? ($5) : ($neg);
			$pitch_range_abs = $call;
			$drops = ((__ZL7drops_0) & 4294967295);
			$initial = 1;
			$stage = 0;
			var $6 = $tune_addr;
			var $onset = (($6 + 30) & 4294967295);
			var $7 = HEAPU8[($onset)];
			var $conv2 = ((($7)) & 255);
			var $cmp = ((($conv2)) | 0) == 255;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$stage = 1;;
			}
			var $8 = $tune_addr;
			var $head_last = (($8 + 33) & 4294967295);
			var $9 = HEAPU8[($head_last)];
			var $conv3 = ((($9)) & 255);
			var $cmp4 = ((($conv3)) | 0) != 255;
			if ($cmp4) {
				__label__ = 4;;
			} else {
				__label__ = 3;;
			}
			$if_then5$$while_cond_preheader$5: do {
				if (__label__ == 4) {
					var $13 = $end_ix_addr;
					var $sub6 = ((($13) - 1) & 4294967295);
					$ix = $sub6;;
					while (1) {
						var $14 = $ix;
						var $15 = $syl_ix_addr;
						var $cmp7 = ((($14)) | 0) >= ((($15)) | 0);
						if (!($cmp7)) {
							__label__ = 3;
							break $if_then5$$while_cond_preheader$5;
						}
						var $16 = $ix;
						var $17 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx = (($17 + 6 * $16) & 4294967295);
						var $stress8 = (($arrayidx) & 4294967295);
						var $18 = HEAP8[($stress8)];
						var $conv9 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp10 = ((($conv9)) | 0) >= 4;
						var $19 = $ix;
						if ($cmp10) {
							__label__ = 7;
							break;
						}
						var $dec = ((($19) - 1) & 4294967295);
						$ix = $dec;
						__label__ = 5;
						continue;
					}
					$head_final = $19;;
				}
			} while (0);
			var $10 = $syl_ix_addr;
			var $11 = $end_ix_addr;
			var $cmp145 = ((($10)) | 0) < ((($11)) | 0);
			var $12 = $syl_ix_addr;
			if ($cmp145) {
				__lastLabel__ = 3;
				__label__ = 9;;
			} else {
				__lastLabel__ = 3;
				__label__ = 39;;
			}
			$while_body$$while_end$13: do {
				if (__label__ == 9) {
					$while_body$14: while (1) {
						var $20 = __lastLabel__ == 38 ? $108 : ($12);
						var $21 = HEAP32[((__ZL12syllable_tab) >> 2)];
						var $arrayidx15 = (($21 + 6 * $20) & 4294967295);
						$syl = $arrayidx15;
						var $22 = $syl;
						var $stress16 = (($22) & 4294967295);
						var $23 = HEAP8[($stress16)];
						var $conv17 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$stress = $conv17;
						var $24 = $initial;
						var $tobool = ((($24)) | 0) != 0;
						if ($tobool) {
							__label__ = 13;;
						} else {
							__label__ = 10;;
						}
						$if_then23$$lor_lhs_false$16: do {
							if (__label__ == 10) {
								var $25 = $stress;
								var $cmp18 = ((($25)) | 0) >= 4;
								if (!($cmp18)) {
									__label__ = 32;
									break $if_then23$$lor_lhs_false$16;
								}
								var $_pr = $initial;
								var $tobool20 = ((($_pr)) | 0) != 0;
								if ($tobool20) {
									__label__ = 13;
									break $if_then23$$lor_lhs_false$16;
								}
								var $26 = $stress;
								var $cmp22 = ((($26)) | 0) == 5;
								if ($cmp22) {
									__label__ = 13;
									break $if_then23$$lor_lhs_false$16;
								}
								var $44 = $syl_ix_addr;
								var $45 = $head_final;
								var $cmp49 = ((($44)) | 0) == ((($45)) | 0);
								if ($cmp49) {
									__label__ = 23;;
								} else {
									__label__ = 24;;
								}
								if (__label__ == 23) {
									var $46 = $tune_addr;
									var $head_last51 = (($46 + 33) & 4294967295);
									var $47 = HEAPU8[($head_last51)];
									var $conv52 = ((($47)) & 255);
									var $shl53 = ($conv52) << 8;
									$pitch = $shl53;
									$stage = 2;
									__label__ = 30;
									break $if_then23$$lor_lhs_false$16;
								} else if (__label__ == 24) {
									var $48 = $used_onset;
									var $tobool55 = ((($48)) | 0) != 0;
									if ($tobool55) {
										__label__ = 25;;
									} else {
										__label__ = 26;;
									}
									if (__label__ == 25) {
										$stage = 1;
										$used_onset = 0;
										var $49 = $tune_addr;
										var $head_start57 = (($49 + 31) & 4294967295);
										var $50 = HEAPU8[($head_start57)];
										var $conv58 = ((($50)) & 255);
										var $shl59 = ($conv58) << 8;
										$pitch = $shl59;
										var $51 = $n_steps;
										var $inc = ((($51) + 1) & 4294967295);
										$n_steps = $inc;
										__label__ = 30;
										break $if_then23$$lor_lhs_false$16;
									} else if (__label__ == 26) {
										var $52 = $n_steps;
										var $cmp61 = ((($52)) | 0) > 0;
										if ($cmp61) {
											__label__ = 27;;
										} else {
											__label__ = 28;;
										}
										if (__label__ == 27) {
											var $53 = $increment;
											var $54 = $pitch;
											var $add63 = ((($54) + ($53)) & 4294967295);
											$pitch = $add63;
											__label__ = 30;
											break $if_then23$$lor_lhs_false$16;
										} else if (__label__ == 28) {
											var $55 = $tune_addr;
											var $head_end65 = (($55 + 32) & 4294967295);
											var $56 = HEAPU8[($head_end65)];
											var $conv66 = ((($56)) & 255);
											var $shl67 = ((($conv66) * 256) & 4294967295);
											var $57 = $pitch_range_abs;
											var $58 = $overflow_ix;
											var $inc68 = ((($58) + 1) & 4294967295);
											$overflow_ix = $inc68;
											var $59 = $tune_addr;
											var $head_extend = (($59 + 16) & 4294967295);
											var $arrayidx69 = (($head_extend + $58) & 4294967295);
											var $60 = HEAP8[($arrayidx69)];
											var $conv70 = (tempInt = (($60)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $mul = ((($conv70) * ($57)) & 4294967295);
											var $div71 = ((((($mul)) | 0) / 64) | 0);
											var $add72 = ((($div71) + ($shl67)) & 4294967295);
											$pitch = $add72;
											var $61 = $overflow_ix;
											var $62 = $tune_addr;
											var $n_head_extend = (($62 + 35) & 4294967295);
											var $63 = HEAPU8[($n_head_extend)];
											var $conv73 = ((($63)) & 255);
											var $cmp74 = ((($61)) | 0) >= ((($conv73)) | 0);
											if (!($cmp74)) {
												__label__ = 30;
												break $if_then23$$lor_lhs_false$16;
											}
											$overflow_ix = 0;
											__label__ = 30;
											break $if_then23$$lor_lhs_false$16;
										}
									}
								}
							}
						} while (0);
						$if_then23$$if_end82$$if_else89$31: do {
							if (__label__ == 13) {
								$initial = 0;
								$overflow_ix = 0;
								var $27 = $tune_addr;
								var $onset24 = (($27 + 30) & 4294967295);
								var $28 = HEAPU8[($onset24)];
								var $conv25 = ((($28)) & 255);
								var $cmp26 = ((($conv25)) | 0) == 255;
								var $29 = $syl_ix_addr;
								if ($cmp26) {
									__label__ = 14;;
								} else {
									__label__ = 15;;
								}
								if (__label__ == 14) {
									var $30 = $head_final;
									var $call28 = __ZL16count_incrementsiii($29, $30, 4);
									$n_steps = $call28;
									var $31 = $tune_addr;
									var $head_start29 = (($31 + 31) & 4294967295);
									var $32 = HEAPU8[($head_start29)];
									var $conv30 = ((($32)) & 255);
									var $shl31 = ($conv30) << 8;
									$pitch = $shl31;;
								} else if (__label__ == 15) {
									var $add = ((($29) + 1) & 4294967295);
									var $33 = $head_final;
									var $call32 = __ZL16count_incrementsiii($add, $33, 4);
									$n_steps = $call32;
									var $34 = $tune_addr;
									var $onset33 = (($34 + 30) & 4294967295);
									var $35 = HEAPU8[($onset33)];
									var $conv34 = ((($35)) & 255);
									var $shl35 = ($conv34) << 8;
									$pitch = $shl35;
									$used_onset = 1;;
								}
								var $36 = $n_steps;
								var $37 = $tune_addr;
								var $head_max_steps = (($37 + 34) & 4294967295);
								var $38 = HEAPU8[($head_max_steps)];
								var $conv37 = ((($38)) & 255);
								var $cmp38 = ((($36)) | 0) > ((($conv37)) | 0);
								if ($cmp38) {
									__label__ = 17;;
								} else {
									__label__ = 18;;
								}
								if (__label__ == 17) {
									var $39 = $tune_addr;
									var $head_max_steps40 = (($39 + 34) & 4294967295);
									var $40 = HEAPU8[($head_max_steps40)];
									var $conv41 = ((($40)) & 255);
									$n_steps = $conv41;
									__lastLabel__ = 17;;
								} else if (__label__ == 18) {
									var $_pr2 = $n_steps;
									__lastLabel__ = 18;;
								}
								var $41 = __lastLabel__ == 18 ? $_pr2 : ($conv41);
								var $cmp43 = ((($41)) | 0) > 1;
								if ($cmp43) {
									__label__ = 20;;
								} else {
									__label__ = 21;;
								}
								if (__label__ == 20) {
									var $42 = $pitch_range;
									var $43 = $n_steps;
									var $sub45 = ((($43) - 1) & 4294967295);
									var $div = ((((($42)) | 0) / ((($sub45)) | 0)) | 0);
									$increment = $div;
									__label__ = 30;
									break $if_then23$$if_end82$$if_else89$31;
								} else if (__label__ == 21) {
									$increment = 0;
									__label__ = 30;
									break $if_then23$$if_end82$$if_else89$31;
								}
							}
						} while (0);
						$if_end82$$if_else89$44: do {
							if (__label__ == 30) {
								var $64 = $n_steps;
								var $dec81 = ((($64) - 1) & 4294967295);
								$n_steps = $dec81;
								var $_pr3 = $stress;
								var $cmp83 = ((($_pr3)) | 0) >= 4;
								if (!($cmp83)) {
									__label__ = 32;
									break $if_end82$$if_else89$44;
								}
								var $65 = $syl_ix_addr;
								var $add85 = ((($65) + 1) & 4294967295);
								var $66 = $end_ix_addr;
								var $67 = $secondary;
								var $call86 = __ZL15CountUnstressediii($add85, $66, $67);
								$n_unstressed = $call86;
								$unstressed_ix = 0;
								var $68 = $syl;
								var $stress87 = (($68) & 4294967295);
								HEAP8[($stress87)] = 6;
								var $69 = $tune_addr;
								var $stressed_env = (($69 + 26) & 4294967295);
								var $70 = HEAP8[($stressed_env)];
								var $71 = $syl;
								var $env = (($71 + 1) & 4294967295);
								HEAP8[($env)] = $70;
								var $72 = $syl;
								var $73 = $pitch;
								var $shr = ($73) >> 8;
								var $74 = $tune_addr;
								var $stressed_drop = (($74 + 27) & 4294967295);
								var $75 = HEAPU8[($stressed_drop)];
								var $conv88 = ((($75)) & 255);
								__ZL9set_pitchP8SYLLABLEii($72, $shr, $conv88);
								__label__ = 38;
								break $if_end82$$if_else89$44;
							}
						} while (0);
						if (__label__ == 32) {
							var $76 = $stress;
							var $77 = $secondary;
							var $cmp90 = ((($76)) | 0) >= ((($77)) | 0);
							if ($cmp90) {
								__label__ = 33;;
							} else {
								__label__ = 34;;
							}
							if (__label__ == 33) {
								var $78 = $syl_ix_addr;
								var $add92 = ((($78) + 1) & 4294967295);
								var $79 = $end_ix_addr;
								var $80 = $secondary;
								var $call93 = __ZL15CountUnstressediii($add92, $79, $80);
								$n_unstressed = $call93;
								$unstressed_ix = 0;
								var $81 = $syl;
								var $82 = $pitch;
								var $shr94 = ($82) >> 8;
								var $83 = $stress;
								var $84 = $drops;
								var $arrayidx95 = (($84 + 4 * $83) & 4294967295);
								var $85 = HEAP32[(($arrayidx95) >> 2)];
								__ZL9set_pitchP8SYLLABLEii($81, $shr94, $85);;
							} else if (__label__ == 34) {
								var $86 = $n_unstressed;
								var $cmp97 = ((($86)) | 0) > 1;
								if ($cmp97) {
									__label__ = 35;;
								} else {
									__label__ = 36;;
								}
								if (__label__ == 35) {
									var $87 = $stage;
									var $88 = $tune_addr;
									var $unstr_end = (($88 + 39) & 4294967295);
									var $arrayidx99 = (($unstr_end + $87) & 4294967295);
									var $89 = HEAP8[($arrayidx99)];
									var $conv100 = (tempInt = (($89)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $90 = $stage;
									var $91 = $tune_addr;
									var $unstr_start = (($91 + 36) & 4294967295);
									var $arrayidx101 = (($unstr_start + $90) & 4294967295);
									var $92 = HEAP8[($arrayidx101)];
									var $conv102 = (tempInt = (($92)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $sub103 = ((($conv100) - ($conv102)) & 4294967295);
									var $93 = $n_unstressed;
									var $sub104 = ((($93) - 1) & 4294967295);
									var $div105 = ((((($sub103)) | 0) / ((($sub104)) | 0)) | 0);
									$unstressed_inc = $div105;;
								} else if (__label__ == 36) {
									$unstressed_inc = 0;;
								}
								var $94 = $syl;
								var $95 = $pitch;
								var $shr108 = ($95) >> 8;
								var $96 = $stage;
								var $97 = $tune_addr;
								var $unstr_start109 = (($97 + 36) & 4294967295);
								var $arrayidx110 = (($unstr_start109 + $96) & 4294967295);
								var $98 = HEAP8[($arrayidx110)];
								var $conv111 = (tempInt = (($98)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $99 = $unstressed_inc;
								var $100 = $unstressed_ix;
								var $mul113 = ((($100) * ($99)) & 4294967295);
								var $add112 = ((($conv111) + ($shr108)) & 4294967295);
								var $add114 = ((($add112) + ($mul113)) & 4294967295);
								var $101 = $stress;
								var $102 = $drops;
								var $arrayidx115 = (($102 + 4 * $101) & 4294967295);
								var $103 = HEAP32[(($arrayidx115) >> 2)];
								__ZL9set_pitchP8SYLLABLEii($94, $add114, $103);
								var $104 = $unstressed_ix;
								var $inc116 = ((($104) + 1) & 4294967295);
								$unstressed_ix = $inc116;;
							}
						}
						var $105 = $syl_ix_addr;
						var $inc119 = ((($105) + 1) & 4294967295);
						$syl_ix_addr = $inc119;
						var $106 = $syl_ix_addr;
						var $107 = $end_ix_addr;
						var $cmp14 = ((($106)) | 0) < ((($107)) | 0);
						var $108 = $syl_ix_addr;
						if ($cmp14) {
							__lastLabel__ = 38;
							__label__ = 9;
							continue $while_body$14;
						} else {
							__lastLabel__ = 38;
							__label__ = 39;
							break $while_body$$while_end$13;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 3 ? $12 : ($108);;
			return $_lcssa;
			return null;
		}

		function __ZL15CountUnstressediii($start, $end, $limit) {;
			var __label__;
			var $start_addr;
			var $end_addr;
			var $limit_addr;
			var $ix;
			$start_addr = $start;
			$end_addr = $end;
			$limit_addr = $limit;
			var $0 = $start_addr;
			$ix = $0;;
			while (1) {
				var $1 = $ix;
				var $2 = $end_addr;
				var $cmp = ((($1)) | 0) <= ((($2)) | 0);
				if (!($cmp)) {
					__label__ = 4;
					break;
				}
				var $3 = $ix;
				var $4 = HEAP32[((__ZL12syllable_tab) >> 2)];
				var $arrayidx = (($4 + 6 * $3) & 4294967295);
				var $stress = (($arrayidx) & 4294967295);
				var $5 = HEAP8[($stress)];
				var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $6 = $limit_addr;
				var $cmp1 = ((($conv)) | 0) >= ((($6)) | 0);
				if ($cmp1) {
					__label__ = 4;
					break;
				}
				var $7 = $ix;
				var $inc = ((($7) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue;
			}
			var $8 = $ix;
			var $9 = $start_addr;
			var $sub = ((($8) - ($9)) & 4294967295);;
			return $sub;
			return null;
		}

		function _iswalpha($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			var $1 = $c_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $call = _isalpha($1);
				$retval = $call;;
			} else if (__label__ == 2) {
				var $cmp1 = ((($1)) >>> 0) > 12352;
				var $2 = $c_addr;
				var $cmp2 = ((($2)) >>> 0) <= 42752;
				var $or_cond = ($cmp1) & ($cmp2);
				if ($or_cond) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 1;;
				} else if (__label__ == 4) {
					var $3 = $c_addr;
					var $cmp5 = ((($3)) >>> 0) > 563;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = 0;;
					} else if (__label__ == 6) {
						var $4 = $c_addr;
						var $sub = ((($4) - 256) & 4294967295);
						var $arrayidx = ((_walpha_tab + $sub) & 4294967295);
						var $5 = HEAPU8[($arrayidx)];
						var $conv = ((($5)) & 255);
						$retval = $conv;;
					}
				}
			}
			var $6 = $retval;;
			return $6;
			return null;
		}

		function _iswdigit($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $c_addr;
				var $isdigittmp = ((($1) - 48) & 4294967295);
				var $isdigit = ((($isdigittmp)) >>> 0) < 10;
				var $call = ((($isdigit)) & 1);
				$retval = $call;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function _iswalnum($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $call = _iswdigit($0);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $1 = $c_addr;
				var $call1 = _iswalpha($1);
				$retval = $call1;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function _towlower($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			var $x;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			var $1 = $c_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					var $call = _tolower($1);
					$retval = $call;;
				} else if (__label__ == 2) {
					var $cmp1 = ((($1)) >>> 0) > 563;
					if ($cmp1) {
						__label__ = 4;;
					} else {
						__label__ = 3;;
					}
					$if_then3$$lor_lhs_false$5: do {
						if (__label__ == 3) {
							var $2 = $c_addr;
							var $sub = ((($2) - 256) & 4294967295);
							var $arrayidx = ((_walpha_tab + $sub) & 4294967295);
							var $3 = HEAPU8[($arrayidx)];
							var $conv = ((($3)) & 255);
							$x = $conv;
							var $cmp2 = ((($conv)) | 0) == 255;
							if ($cmp2) {
								__label__ = 4;
								break $if_then3$$lor_lhs_false$5;
							}
							var $5 = $x;
							var $cmp5 = ((($5)) | 0) == 254;
							if ($cmp5) {
								__label__ = 6;;
							} else {
								__label__ = 8;;
							}
							$if_then6$$if_end10$8: do {
								if (__label__ == 6) {
									var $6 = $c_addr;
									var $cmp7 = ((($6)) | 0) == 304;
									if (!($cmp7)) {
										__label__ = 8;
										break $if_then6$$if_end10$8;
									}
									$retval = 105;
									__label__ = 9;
									break $if_then$$if_end$2;
								}
							} while (0);
							var $7 = $c_addr;
							var $8 = $x;
							var $add = ((($8) + ($7)) & 4294967295);
							$retval = $add;
							__label__ = 9;
							break $if_then$$if_end$2;
						}
					} while (0);
					var $4 = $c_addr;
					$retval = $4;;
				}
			} while (0);
			var $9 = $retval;;
			return $9;
			return null;
		}

		function _towupper($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $sub = ((($0) - 1) & 4294967295);
			var $call = _tolower($sub);
			var $1 = $c_addr;
			var $cmp = ((($call)) | 0) == ((($1)) | 0);
			var $2 = $c_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $sub1 = ((($2) - 1) & 4294967295);
				$retval = $sub1;;
			} else if (__label__ == 2) {
				$retval = $2;;
			}
			var $3 = $retval;;
			return $3;
			return null;
		}

		function _iswupper($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			var $x;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			var $1 = $c_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					var $call = _isupper($1);
					$retval = $call;;
				} else if (__label__ == 2) {
					var $cmp1 = ((($1)) >>> 0) > 563;
					if ($cmp1) {
						__label__ = 5;;
					} else {
						__label__ = 3;;
					}
					$if_then5$$lor_lhs_false$5: do {
						if (__label__ == 3) {
							var $2 = $c_addr;
							var $sub = ((($2) - 256) & 4294967295);
							var $arrayidx = ((_walpha_tab + $sub) & 4294967295);
							var $3 = HEAPU8[($arrayidx)];
							var $conv = ((($3)) & 255);
							$x = $conv;
							var $cmp2 = ((($conv)) | 0) == 0;
							if ($cmp2) {
								__label__ = 5;
								break $if_then5$$lor_lhs_false$5;
							}
							var $4 = $x;
							var $cmp4 = ((($4)) | 0) == 255;
							if ($cmp4) {
								__label__ = 5;
								break $if_then5$$lor_lhs_false$5;
							}
							$retval = 1;
							__label__ = 7;
							break $if_then$$if_end$2;
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $5 = $retval;;
			return $5;
			return null;
		}

		function _iswlower($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			var $1 = $c_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					var $call = _islower($1);
					$retval = $call;;
				} else if (__label__ == 2) {
					var $cmp1 = ((($1)) >>> 0) > 563;
					if ($cmp1) {
						__label__ = 4;;
					} else {
						__label__ = 3;;
					}
					$if_then3$$lor_lhs_false$5: do {
						if (__label__ == 3) {
							var $2 = $c_addr;
							var $sub = ((($2) - 256) & 4294967295);
							var $arrayidx = ((_walpha_tab + $sub) & 4294967295);
							var $3 = HEAPU8[($arrayidx)];
							var $conv = ((($3)) & 255);
							var $cmp2 = ((($conv)) | 0) != 255;
							if ($cmp2) {
								__label__ = 4;
								break $if_then3$$lor_lhs_false$5;
							}
							$retval = 1;
							__label__ = 6;
							break $if_then$$if_end$2;
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $4 = $retval;;
			return $4;
			return null;
		}

		function _iswspace($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $c_addr;
				var $call = _isspace($1);
				$retval = $call;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function _iswpunct($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 256;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $c_addr;
				var $call = _ispunct($1);
				$retval = $call;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function _wcschr($str, $c) {;
			var __label__;
			var $retval;
			var $str_addr;
			var $c_addr;
			$str_addr = $str;
			$c_addr = $c;;
			while (1) {
				var $0 = $str_addr;
				var $1 = HEAP32[(($0) >> 2)];
				var $cmp = ((($1)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $str_addr;
				var $3 = HEAP32[(($2) >> 2)];
				var $4 = $c_addr;
				var $cmp1 = ((($3)) | 0) == ((($4)) | 0);
				var $5 = $str_addr;
				if ($cmp1) {
					__label__ = 3;
					break;
				}
				var $incdec_ptr = (($5 + 4) & 4294967295);
				$str_addr = $incdec_ptr;
				__label__ = 1;
				continue;
			}
			if (__label__ == 5) {
				$retval = 0;;
			} else if (__label__ == 3) {
				$retval = $5;;
			}
			var $6 = $retval;;
			return $6;
			return null;
		}

		function _wcslen($str) {;
			var __label__;
			var __lastLabel__ = null;
			var $str_addr;
			var $ix;
			$str_addr = $str;
			$ix = 0;
			var $0 = $str_addr;
			var $1 = HEAP32[(($0) >> 2)];
			var $cmp1 = ((($1)) | 0) != 0;
			var $2 = $ix;
			if ($cmp1) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = __lastLabel__ == 1 ? $6 : ($2);
						var $inc = ((($3) + 1) & 4294967295);
						$ix = $inc;
						var $4 = $str_addr;
						var $5 = HEAP32[(($4) >> 2)];
						var $cmp = ((($5)) | 0) != 0;
						var $6 = $ix;
						if ($cmp) {
							__lastLabel__ = 1;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 1;
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 0 ? $2 : ($6);;
			return $_lcssa;
			return null;
		}

		function _wcstod($str, $tailptr) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 80;
			_memset(__stackBase__, 0, 80);
			var __label__;
			var __lastLabel__ = null;
			var $str_addr;
			var $tailptr_addr;
			var $ix;
			var $buf = __stackBase__;
			$str_addr = $str;
			$tailptr_addr = $tailptr;
			var $0 = $str_addr;
			var $1 = HEAP32[(($0) >> 2)];
			var $call1 = _isspace($1);
			var $tobool2 = ((($call1)) | 0) != 0;
			if ($tobool2) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $2 = $str_addr;
						var $incdec_ptr = (($2 + 4) & 4294967295);
						$str_addr = $incdec_ptr;
						var $3 = $str_addr;
						var $4 = HEAP32[(($3) >> 2)];
						var $call = _isspace($4);
						var $tobool = ((($call)) | 0) != 0;
						if ($tobool) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			$ix = 0;
			__lastLabel__ = 2;;
			while (1) {
				var $5 = __lastLabel__ == 5 ? $inc : (0);
				var $cmp = ((($5)) | 0) < 80;
				if (!($cmp)) {
					__label__ = 6;
					break;
				}
				var $6 = $ix;
				var $7 = $str_addr;
				var $arrayidx = (($7 + 4 * $6) & 4294967295);
				var $8 = HEAP32[(($arrayidx) >> 2)];
				var $conv = ((($8)) & 255);
				var $9 = $ix;
				var $arrayidx1 = (($buf + $9) & 4294967295);
				HEAP8[($arrayidx1)] = $conv;
				var $10 = $ix;
				var $arrayidx2 = (($buf + $10) & 4294967295);
				var $11 = HEAP8[($arrayidx2)];
				var $conv3 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $call4 = _isspace($conv3);
				var $tobool5 = ((($call4)) | 0) != 0;
				if ($tobool5) {
					__label__ = 6;
					break;
				}
				var $12 = $ix;
				var $inc = ((($12) + 1) & 4294967295);
				$ix = $inc;
				__lastLabel__ = 5;
				__label__ = 3;
				continue;
			}
			var $13 = $ix;
			var $14 = $str_addr;
			var $arrayidx6 = (($14 + 4 * $13) & 4294967295);
			var $15 = $tailptr_addr;
			HEAP32[(($15) >> 2)] = $arrayidx6;
			var $arraydecay = (($buf) & 4294967295);
			var $call7 = _atof($arraydecay);
			var $conv8 = ($call7);
			STACKTOP = __stackBase__;
			return $conv8;
			return null;
		}

		function __Z9towlower2j($c) {;
			var __label__;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) | 0) == 73;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end3$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((_translator) >> 2)];
					var $translator_name = (($1 + 280) & 4294967295);
					var $2 = HEAP32[(($translator_name) >> 2)];
					var $cmp1 = ((($2)) | 0) == 29810;
					if (!($cmp1)) {
						__label__ = 3;
						break $if_then$$if_end3$2;
					}
					$c_addr = 305;;
				}
			} while (0);
			var $3 = $c_addr;
			var $call = _towlower($3);;
			return $call;
			return null;
		}

		function __Z3Eofv() {;
			var __label__;
			var $retval;
			var $0 = HEAP32[((__ZL10ungot_char) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $1 = HEAP32[((__ZL7f_input) >> 2)];
				var $cmp1 = ((($1)) | 0) != 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $2 = HEAP32[((__ZL7f_input) >> 2)];
					var $_flags = (($2 + 12) & 4294967295);
					var $3 = HEAP16[(($_flags) >> 1)];
					var $conv = (tempInt = (($3)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $and = ($conv) & 32;
					var $cmp3 = ((($and)) | 0) != 0;
					var $conv4 = ((($cmp3)) & 1);
					$retval = $conv4;;
				} else if (__label__ == 4) {
					var $_b = HEAPU8[(__ZL12end_of_input_b)];
					var $4 = ((($_b)) & 1);
					$retval = $4;;
				}
			}
			var $5 = $retval;;
			return $5;
			return null;
		}

		function __Z10Read4BytesP7__sFILE($f) {;
			var __label__;
			var $f_addr;
			var $ix;
			var $c;
			var $acc;
			$f_addr = $f;
			$acc = 0;
			$ix = 0;;
			while (1) {
				var $0 = $f_addr;
				var $call = _fgetc($0);
				var $and = ($call) & 255;
				var $conv = ((($and)) & 255);
				$c = $conv;
				var $1 = $c;
				var $conv1 = ((($1)) & 255);
				var $2 = $ix;
				var $mul = ((($2) * 8) & 4294967295);
				var $shl = ($conv1) << ($mul);
				var $3 = $acc;
				var $add = ((($shl) + ($3)) & 4294967295);
				$acc = $add;
				var $4 = $ix;
				var $inc = ((($4) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 4;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			var $5 = $acc;;
			return $5;
			return null;
		}

		function __Z11AddNameDataPKci($name, $wide) {;
			var __label__;
			var $retval;
			var $name_addr;
			var $wide_addr;
			var $ix;
			var $len;
			var $vp;
			$name_addr = $name;
			$wide_addr = $wide;
			var $0 = $wide_addr;
			var $tobool = ((($0)) | 0) != 0;
			var $1 = $name_addr;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = $1;
				var $call = _wcslen($2);
				var $add = ((($call) + 1) & 4294967295);
				var $mul = ((($add) * 4) & 4294967295);
				$len = $mul;
				var $3 = HEAP32[((__ZL10n_namedata) >> 2)];
				var $sub = ((($3) + 3) & 4294967295);
				var $rem = ((($sub)) >>> 0) % 4;
				HEAP32[((__ZL10n_namedata) >> 2)] = $rem;;
			} else if (__label__ == 2) {
				var $call2 = _strlen($1);
				var $add3 = ((($call2) + 1) & 4294967295);
				$len = $add3;;
			}
			var $4 = HEAP32[((__ZL11namedata_ix) >> 2)];
			var $5 = $len;
			var $add4 = ((($5) + ($4)) & 4294967295);
			var $6 = HEAP32[((__ZL10n_namedata) >> 2)];
			var $cmp = ((($add4)) | 0) >= ((($6)) | 0);
			if ($cmp) {
				__label__ = 4;;
			} else {
				__label__ = 7;;
			}
			$if_then5$$if_end14$6: do {
				if (__label__ == 4) {
					var $7 = HEAP32[((_namedata) >> 2)];
					var $8 = HEAP32[((__ZL11namedata_ix) >> 2)];
					var $9 = $len;
					var $add6 = ((($8) + 300) & 4294967295);
					var $add7 = ((($add6) + ($9)) & 4294967295);
					var $call8 = _realloc($7, $add7);
					$vp = $call8;
					var $cmp9 = ((($call8)) | 0) == 0;
					if ($cmp9) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = -1;
						__label__ = 8;
						break $if_then5$$if_end14$6;
					} else if (__label__ == 6) {
						var $10 = $vp;
						HEAP32[((_namedata) >> 2)] = $10;
						var $11 = HEAP32[((__ZL11namedata_ix) >> 2)];
						var $12 = $len;
						var $add12 = ((($11) + 300) & 4294967295);
						var $add13 = ((($add12) + ($12)) & 4294967295);
						HEAP32[((__ZL10n_namedata) >> 2)] = $add13;
						__label__ = 7;
						break $if_then5$$if_end14$6;
					}
				}
			} while (0);
			if (__label__ == 7) {
				var $13 = HEAP32[((__ZL11namedata_ix) >> 2)];
				$ix = $13;
				var $14 = HEAP32[((_namedata) >> 2)];
				var $arrayidx = (($14 + $13) & 4294967295);
				var $15 = $name_addr;
				var $16 = $len;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $15;
				$dest$ = $arrayidx;
				$stop$ = $src$ + $16;
				if (($dest$ % 4) == ($src$ % 4) && $16 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $17 = $len;
				var $18 = HEAP32[((__ZL11namedata_ix) >> 2)];
				var $add15 = ((($18) + ($17)) & 4294967295);
				HEAP32[((__ZL11namedata_ix) >> 2)] = $add15;
				var $19 = $ix;
				$retval = $19;;
			}
			var $20 = $retval;;
			return $20;
			return null;
		}

		function __Z13SetVoiceStackP12espeak_VOICE($v) {;
			var __label__;
			var $v_addr;
			var $sp;
			$v_addr = $v;
			$sp = ((__ZL10ssml_stack) & 4294967295);
			var $0 = $v_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $sp;
				var $2 = $1;
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = $2;
				$stop$ = $dest$ + 76;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};;
			} else if (__label__ == 2) {
				var $3 = $v_addr;
				var $languages = (($3 + 4) & 4294967295);
				var $4 = HEAP32[(($languages) >> 2)];
				var $cmp1 = ((($4)) | 0) != 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $5 = $sp;
					var $language = (($5 + 56) & 4294967295);
					var $arraydecay = (($language) & 4294967295);
					var $6 = $v_addr;
					var $languages3 = (($6 + 4) & 4294967295);
					var $7 = HEAP32[(($languages3) >> 2)];
					var $call = _strcpy($arraydecay, $7);;
				}
				var $8 = $v_addr;
				var $name = (($8) & 4294967295);
				var $9 = HEAP32[(($name) >> 2)];
				var $cmp5 = ((($9)) | 0) != 0;
				if ($cmp5) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $10 = $sp;
					var $voice_name = (($10 + 16) & 4294967295);
					var $arraydecay7 = (($voice_name) & 4294967295);
					var $11 = $v_addr;
					var $name8 = (($11) & 4294967295);
					var $12 = HEAP32[(($name8) >> 2)];
					var $call9 = _strcpy($arraydecay7, $12);;
				}
				var $13 = $v_addr;
				var $variant = (($13 + 14) & 4294967295);
				var $14 = HEAPU8[($variant)];
				var $conv = ((($14)) & 255);
				var $15 = $sp;
				var $voice_variant = (($15 + 4) & 4294967295);
				HEAP32[(($voice_variant) >> 2)] = $conv;
				var $16 = $v_addr;
				var $age = (($16 + 13) & 4294967295);
				var $17 = HEAPU8[($age)];
				var $conv11 = ((($17)) & 255);
				var $18 = $sp;
				var $voice_age = (($18 + 12) & 4294967295);
				HEAP32[(($voice_age) >> 2)] = $conv11;
				var $19 = $v_addr;
				var $gender = (($19 + 12) & 4294967295);
				var $20 = HEAPU8[($gender)];
				var $conv12 = ((($20)) & 255);
				var $21 = $sp;
				var $voice_gender = (($21 + 8) & 4294967295);
				HEAP32[(($voice_gender) >> 2)] = $conv12;;
			};
			return;
			return;
		}

		function __Z10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_($tr, $f_in, $buf, $charix, $charix_top, $n_buf, $tone_type, $voice_change) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 1136;
			_memset(__stackBase__, 0, 1136);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $f_in_addr;
			var $buf_addr;
			var $charix_addr;
			var $charix_top_addr;
			var $n_buf_addr;
			var $tone_type_addr;
			var $voice_change_addr;
			var $c1 = __stackBase__;
			var $c2 = __stackBase__ + 4;
			var $cprev;
			var $cprev2;
			var $c_next;
			var $parag;
			var $ix = __stackBase__ + 8;
			var $j;
			var $nl_count;
			var $linelength;
			var $phoneme_mode;
			var $n_xml_buf;
			var $terminator;
			var $punct;
			var $found;
			var $any_alnum;
			var $self_closing;
			var $punct_data;
			var $is_end_clause;
			var $announced_punctuation;
			var $prev_announced_punctuation;
			var $stressed_word;
			var $end_clause_after_tag;
			var $end_clause_index;
			var $xml_buf = __stackBase__ + 12;
			var $xml_buf2 = __stackBase__ + 1040;
			var $p_word;
			var $text_buf = __stackBase__ + 1064;
			var $text_buf2 = __stackBase__ + 1104;
			var $p2;
			$tr_addr = $tr;
			$f_in_addr = $f_in;
			$buf_addr = $buf;
			$charix_addr = $charix;
			$charix_top_addr = $charix_top;
			$n_buf_addr = $n_buf;
			$tone_type_addr = $tone_type;
			$voice_change_addr = $voice_change;
			HEAP32[(($c1) >> 2)] = 32;
			$cprev = 32;
			$cprev2 = 32;
			HEAP32[(($ix) >> 2)] = 0;
			$linelength = 0;
			$phoneme_mode = 0;
			$any_alnum = 0;
			$punct_data = 0;
			$announced_punctuation = 0;
			$stressed_word = 0;
			$end_clause_after_tag = 0;
			$end_clause_index = 0;
			var $_b = HEAPU8[(__ZL19clear_skipping_text_b)];
			var $0 = ((($_b)) & 1);
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((_skipping_text) >> 2)] = 0;
				HEAP8[(__ZL19clear_skipping_text_b)] = 0;;
			}
			var $1 = $tr_addr;
			var $phonemes_repeat_count = (($1 + 652) & 4294967295);
			HEAP32[(($phonemes_repeat_count) >> 2)] = 0;
			var $2 = $tr_addr;
			var $clause_upper_count = (($2 + 8304) & 4294967295);
			HEAP32[(($clause_upper_count) >> 2)] = 0;
			var $3 = $tr_addr;
			var $clause_lower_count = (($3 + 8308) & 4294967295);
			HEAP32[(($clause_lower_count) >> 2)] = 0;
			HEAP8[(__ZL12end_of_input_b)] = 0;
			var $4 = $tone_type_addr;
			HEAP32[(($4) >> 2)] = 0;
			var $5 = $voice_change_addr;
			HEAP8[($5)] = 0;
			var $6 = $f_in_addr;
			HEAP32[((__ZL7f_input) >> 2)] = $6;
			var $7 = HEAP32[((__ZL10ungot_word) >> 2)];
			var $cmp = ((($7)) | 0) != 0;
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $8 = $buf_addr;
				var $9 = HEAP32[((__ZL10ungot_word) >> 2)];
				var $call = _strcpy($8, $9);
				var $10 = HEAP32[((__ZL10ungot_word) >> 2)];
				var $call2 = _strlen($10);
				var $11 = HEAP32[(($ix) >> 2)];
				var $add = ((($11) + ($call2)) & 4294967295);
				HEAP32[(($ix) >> 2)] = $add;
				HEAP32[((__ZL10ungot_word) >> 2)] = 0;;
			}
			var $12 = HEAP32[((__ZL11ungot_char2) >> 2)];
			var $cmp4 = ((($12)) | 0) != 0;
			if ($cmp4) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				var $13 = HEAP32[((__ZL11ungot_char2) >> 2)];
				HEAP32[(($c2) >> 2)] = $13;;
			} else if (__label__ == 6) {
				var $call6 = __ZL4GetCv();
				HEAP32[(($c2) >> 2)] = $call6;;
			}
			var $arrayidx82 = (($xml_buf2) & 4294967295);
			var $arrayidx86 = (($xml_buf2) & 4294967295);
			var $arrayidx90 = (($xml_buf2 + 1) & 4294967295);
			var $arrayidx94 = (($xml_buf2 + 2) & 4294967295);
			var $arrayidx97 = (($xml_buf2 + 1) & 4294967295);
			var $arraydecay = (($xml_buf2) & 4294967295);
			var $arraydecay164 = (($xml_buf) & 4294967295);
			var $arraydecay324 = (($text_buf2) & 4294967295);
			var $arraydecay328 = (($text_buf) & 4294967295);
			var $arraydecay329 = (($text_buf2) & 4294967295);
			var $arraydecay331 = (($text_buf) & 4294967295);
			var $arraydecay337 = (($text_buf) & 4294967295);;
			$while_cond$12: while (1) {
				var $call8 = __Z3Eofv();
				var $tobool9 = ((($call8)) | 0) == 0;
				var $14 = HEAP32[((__ZL10ungot_char) >> 2)];
				var $cmp10 = ((($14)) | 0) != 0;
				var $or_cond = ($tobool9) | ($cmp10);
				var $15 = HEAP32[((__ZL11ungot_char2) >> 2)];
				var $cmp12 = ((($15)) | 0) != 0;
				var $or_cond3 = ($or_cond) | ($cmp12);
				var $16 = HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)];
				var $cmp13 = ((($16)) | 0) >= 0;
				var $or_cond19 = ($or_cond3) | ($cmp13);
				if (!($or_cond19)) {
					__label__ = 256;
					break $while_cond$12;
				}
				var $17 = HEAP32[(($c1) >> 2)];
				var $call14 = _iswalnum($17);
				var $tobool15 = ((($call14)) | 0) != 0;
				if ($tobool15) {
					__label__ = 16;;
				} else {
					__label__ = 10;;
				}
				$if_end26$$if_then16$15: do {
					if (__label__ == 10) {
						var $18 = HEAP32[((_end_character_position) >> 2)];
						var $cmp17 = ((($18)) | 0) > 0;
						if ($cmp17) {
							__label__ = 11;;
						} else {
							__label__ = 13;;
						}
						if (__label__ == 11) {
							var $19 = HEAP32[((_count_characters) >> 2)];
							var $20 = HEAP32[((_end_character_position) >> 2)];
							var $cmp18 = ((($19)) | 0) > ((($20)) | 0);
							if ($cmp18) {
								__label__ = 12;
								break $while_cond$12;
							}
						}
						var $21 = HEAP32[((_skip_characters) >> 2)];
						var $cmp21 = ((($21)) | 0) > 0;
						if (!($cmp21)) {
							__label__ = 16;
							break $if_end26$$if_then16$15;
						}
						var $22 = HEAP32[((_count_characters) >> 2)];
						var $23 = HEAP32[((_skip_characters) >> 2)];
						var $cmp23 = ((($22)) | 0) > ((($23)) | 0);
						if ($cmp23) {
							__label__ = 15;
							break $while_cond$12;
						}
					}
				} while (0);
				var $25 = $cprev;
				$cprev2 = $25;
				var $26 = HEAP32[(($c1) >> 2)];
				$cprev = $26;
				var $27 = HEAP32[(($c2) >> 2)];
				HEAP32[(($c1) >> 2)] = $27;
				var $28 = HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)];
				var $cmp27 = ((($28)) | 0) >= 0;
				if ($cmp27) {
					__label__ = 17;;
				} else {
					__label__ = 19;;
				}
				$if_then28$$if_end32$22: do {
					if (__label__ == 17) {
						var $29 = HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)];
						var $arrayidx = ((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E12ungot_string + $29) & 4294967295);
						var $30 = HEAP8[($arrayidx)];
						var $conv = (tempInt = (($30)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp29 = ((($conv)) | 0) == 0;
						if (!($cmp29)) {
							__label__ = 19;
							break $if_then28$$if_end32$22;
						}
						HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)] = -1;;
					}
				} while (0);
				var $31 = HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)];
				var $cmp33 = ((($31)) | 0) == 0;
				var $32 = HEAP32[((__ZL11ungot_char2) >> 2)];
				var $cmp35 = ((($32)) | 0) == 0;
				var $or_cond4 = ($cmp33) & ($cmp35);
				if ($or_cond4) {
					__lastLabel__ = 19;
					__label__ = 20;;
				} else {
					__lastLabel__ = 19;
					__label__ = 21;;
				}
				if (__label__ == 20) {
					var $33 = HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)];
					var $inc = ((($33) + 1) & 4294967295);
					HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)] = $inc;
					var $arrayidx37 = ((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E12ungot_string + $33) & 4294967295);
					var $34 = HEAP8[($arrayidx37)];
					var $conv38 = (tempInt = (($34)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					HEAP32[(($c1) >> 2)] = $conv38;
					__lastLabel__ = 20;;
				}
				var $35 = __lastLabel__ == 20 ? $inc : ($31);
				var $cmp40 = ((($35)) | 0) >= 0;
				if ($cmp40) {
					__label__ = 22;;
				} else {
					__label__ = 23;;
				}
				$if_then41$$if_else45$29: do {
					if (__label__ == 22) {
						var $36 = HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)];
						var $inc42 = ((($36) + 1) & 4294967295);
						HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)] = $inc42;
						var $arrayidx43 = ((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E12ungot_string + $36) & 4294967295);
						var $37 = HEAP8[($arrayidx43)];
						var $conv44 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						HEAP32[(($c2) >> 2)] = $conv44;;
					} else if (__label__ == 23) {
						var $call46 = __ZL4GetCv();
						HEAP32[(($c2) >> 2)] = $call46;
						var $call47 = __Z3Eofv();
						var $tobool48 = ((($call47)) | 0) != 0;
						if (!($tobool48)) {
							__label__ = 25;
							break $if_then41$$if_else45$29;
						}
						HEAP32[(($c2) >> 2)] = 32;;
					}
				} while (0);
				HEAP32[((__ZL11ungot_char2) >> 2)] = 0;
				var $38 = HEAP32[((_option_ssml) >> 2)];
				var $tobool52 = ((($38)) | 0) != 0;
				if ($tobool52) {
					__label__ = 26;;
				} else {
					__label__ = 72;;
				}
				$land_lhs_true53$$if_end184$34: do {
					if (__label__ == 26) {
						var $39 = $phoneme_mode;
						var $cmp54 = ((($39)) | 0) == 0;
						if (!($cmp54)) {
							__label__ = 72;
							break $land_lhs_true53$$if_end184$34;
						}
						var $40 = HEAP32[((__ZL19ssml_ignore_l_angle) >> 2)];
						var $cmp56 = ((($40)) | 0) != 38;
						if ($cmp56) {
							__label__ = 28;;
						} else {
							__label__ = 50;;
						}
						$land_lhs_true57$$if_else122$37: do {
							if (__label__ == 28) {
								var $41 = HEAP32[(($c1) >> 2)];
								var $cmp58 = ((($41)) | 0) == 38;
								if (!($cmp58)) {
									__label__ = 50;
									break $land_lhs_true57$$if_else122$37;
								}
								var $42 = HEAP32[(($c2) >> 2)];
								var $cmp60 = ((($42)) | 0) == 35;
								if ($cmp60) {
									__label__ = 31;;
								} else {
									__label__ = 30;;
								}
								if (__label__ == 30) {
									var $43 = HEAP32[(($c2) >> 2)];
									var $cmp62 = ((($43)) | 0) >= 97;
									var $44 = HEAP32[(($c2) >> 2)];
									var $cmp64 = ((($44)) | 0) <= 122;
									var $or_cond5 = ($cmp62) & ($cmp64);
									if (!($or_cond5)) {
										__label__ = 50;
										break $land_lhs_true57$$if_else122$37;
									}
								}
								$n_xml_buf = 0;
								var $45 = HEAP32[(($c2) >> 2)];
								HEAP32[(($c1) >> 2)] = $45;;
								$while_cond66$43: while (1) {
									var $call67 = __Z3Eofv();
									var $tobool68 = ((($call67)) | 0) != 0;
									if ($tobool68) {
										__label__ = 36;
										break $while_cond66$43;
									}
									var $46 = HEAP32[(($c1) >> 2)];
									var $call70 = _iswalnum($46);
									var $tobool71 = ((($call70)) | 0) != 0;
									var $47 = HEAP32[(($c1) >> 2)];
									var $cmp73 = ((($47)) | 0) == 35;
									var $or_cond6 = ($tobool71) | ($cmp73);
									if (!($or_cond6)) {
										__label__ = 36;
										break $while_cond66$43;
									}
									var $48 = $n_xml_buf;
									var $cmp74 = ((($48)) | 0) < 20;
									if (!($cmp74)) {
										__label__ = 36;
										break $while_cond66$43;
									}
									var $49 = HEAP32[(($c1) >> 2)];
									var $conv76 = ((($49)) & 255);
									var $50 = $n_xml_buf;
									var $inc77 = ((($50) + 1) & 4294967295);
									$n_xml_buf = $inc77;
									var $arrayidx78 = (($xml_buf2 + $50) & 4294967295);
									HEAP8[($arrayidx78)] = $conv76;
									var $call79 = __ZL4GetCv();
									HEAP32[(($c1) >> 2)] = $call79;
									__label__ = 32;
									continue $while_cond66$43;
								}
								var $51 = $n_xml_buf;
								var $arrayidx80 = (($xml_buf2 + $51) & 4294967295);
								HEAP8[($arrayidx80)] = 0;
								var $call81 = __ZL4GetCv();
								HEAP32[(($c2) >> 2)] = $call81;
								var $52 = HEAP32[(($c1) >> 2)];
								var $53 = HEAP32[(($c2) >> 2)];
								var $call83 = _sprintf(((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E12ungot_string) & 4294967295), ((__str38205) & 4294967295), allocate([$arrayidx82, 0, 0, 0, $52, 0, 0, 0, $53, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
								var $54 = HEAP32[(($c1) >> 2)];
								var $cmp84 = ((($54)) | 0) == 59;
								if ($cmp84) {
									__label__ = 37;;
								} else {
									__label__ = 44;;
								}
								$if_then85$$if_else109$49: do {
									if (__label__ == 37) {
										var $55 = HEAP8[($arrayidx86)];
										var $conv87 = (tempInt = (($55)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp88 = ((($conv87)) | 0) == 35;
										if ($cmp88) {
											__label__ = 38;;
										} else {
											__label__ = 41;;
										}
										$if_then89$$if_else100$51: do {
											if (__label__ == 38) {
												var $56 = HEAP8[($arrayidx90)];
												var $conv91 = (tempInt = (($56)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp92 = ((($conv91)) | 0) == 120;
												if ($cmp92) {
													__label__ = 39;;
												} else {
													__label__ = 40;;
												}
												if (__label__ == 39) {
													var $call95 = _sscanf($arrayidx94, ((__str10307) & 4294967295), allocate([$c1, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
													$found = $call95;
													__lastLabel__ = 39;;
												} else if (__label__ == 40) {
													var $call98 = _sscanf($arrayidx97, ((__str63715) & 4294967295), allocate([$c1, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
													$found = $call98;
													__lastLabel__ = 40;;
												}
											} else if (__label__ == 41) {
												var $call101 = __Z10LookupMnemP8MNEM_TABPKc(((__ZL18xml_char_mnemonics) & 4294967295), $arraydecay);
												$found = $call101;
												var $cmp102 = ((($call101)) | 0) != -1;
												if (!($cmp102)) {
													__label__ = 46;
													break $if_then85$$if_else109$49;
												}
												var $57 = $found;
												HEAP32[(($c1) >> 2)] = $57;
												var $58 = HEAP32[(($c2) >> 2)];
												var $cmp104 = ((($58)) | 0) == 0;
												if ($cmp104) {
													__lastLabel__ = 42;;
												} else {
													__lastLabel__ = 42;
													__label__ = 45;
													break $if_then89$$if_else100$51;
												}
												HEAP32[(($c2) >> 2)] = 32;
												var $_pr = $found;
												__lastLabel__ = 43;;
											}
										} while (0);
										var $59 = __lastLabel__ == 40 ? $call98 : (__lastLabel__ == 39 ? $call95 : (__lastLabel__ == 42 ? $57 : ($_pr)));
										var $cmp111 = ((($59)) | 0) <= 0;
										if ($cmp111) {
											__label__ = 46;
											break $if_then85$$if_else109$49;
										}
										var $_pr23 = HEAP32[(($c1) >> 2)];
										var $cmp114 = ((($_pr23)) | 0) <= 32;
										if (!($cmp114)) {
											__label__ = 72;
											break $land_lhs_true53$$if_end184$34;
										}
										var $60 = HEAP32[((__ZL10sayas_mode) >> 2)];
										var $cmp116 = ((($60)) | 0) == 20;
										var $61 = HEAP32[((__ZL10sayas_mode) >> 2)];
										var $cmp118 = ((($61)) | 0) == 36;
										var $or_cond8 = ($cmp116) | ($cmp118);
										if (!($or_cond8)) {
											__label__ = 72;
											break $land_lhs_true53$$if_end184$34;
										}
										var $62 = HEAP32[(($c1) >> 2)];
										var $add120 = ((($62) + 57344) & 4294967295);
										HEAP32[(($c1) >> 2)] = $add120;
										__label__ = 72;
										break $land_lhs_true53$$if_end184$34;
									} else if (__label__ == 44) {
										$found = -1;;
									}
								} while (0);
								HEAP32[((__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix) >> 2)] = 0;
								HEAP32[(($c1) >> 2)] = 38;
								HEAP32[(($c2) >> 2)] = 32;
								__label__ = 72;
								break $land_lhs_true53$$if_end184$34;
							}
						} while (0);
						var $63 = HEAP32[(($c1) >> 2)];
						var $cmp123 = ((($63)) | 0) == 60;
						var $64 = HEAP32[((__ZL19ssml_ignore_l_angle) >> 2)];
						var $cmp125 = ((($64)) | 0) != 60;
						var $or_cond9 = ($cmp123) & ($cmp125);
						if (!($or_cond9)) {
							__label__ = 72;
							break $land_lhs_true53$$if_end184$34;
						}
						var $65 = HEAP32[(($c2) >> 2)];
						var $cmp127 = ((($65)) | 0) == 33;
						if ($cmp127) {
							__label__ = 52;;
						} else {
							__label__ = 56;;
						}
						if (__label__ == 52) {
							while (1) {
								var $call130 = __Z3Eofv();
								var $tobool131 = ((($call130)) | 0) != 0;
								if ($tobool131) {
									__label__ = 55;
									break;
								}
								var $66 = HEAP32[(($c1) >> 2)];
								var $cmp133 = ((($66)) | 0) != 62;
								if (!($cmp133)) {
									__label__ = 55;
									break;
								}
								var $call136 = __ZL4GetCv();
								HEAP32[(($c1) >> 2)] = $call136;
								__label__ = 52;
								continue;
							}
							HEAP32[(($c2) >> 2)] = 32;;
						} else if (__label__ == 56) {
							var $67 = HEAP32[(($c2) >> 2)];
							var $cmp139 = ((($67)) | 0) == 47;
							if ($cmp139) {
								__label__ = 58;;
							} else {
								__label__ = 57;;
							}
							if (__label__ == 57) {
								var $68 = HEAP32[(($c2) >> 2)];
								var $call141 = _iswalpha($68);
								var $tobool142 = ((($call141)) | 0) != 0;
								if (!($tobool142)) {
									__label__ = 72;
									break $land_lhs_true53$$if_end184$34;
								}
							}
							$n_xml_buf = 0;
							var $69 = HEAP32[(($c2) >> 2)];
							HEAP32[(($c1) >> 2)] = $69;;
							while (1) {
								var $call145 = __Z3Eofv();
								var $tobool146 = ((($call145)) | 0) != 0;
								if ($tobool146) {
									__label__ = 63;
									break;
								}
								var $70 = HEAP32[(($c1) >> 2)];
								var $cmp148 = ((($70)) | 0) != 62;
								if (!($cmp148)) {
									__label__ = 63;
									break;
								}
								var $71 = $n_xml_buf;
								var $cmp150 = ((($71)) | 0) < 256;
								if (!($cmp150)) {
									__label__ = 63;
									break;
								}
								var $72 = HEAP32[(($c1) >> 2)];
								var $73 = $n_xml_buf;
								var $inc153 = ((($73) + 1) & 4294967295);
								$n_xml_buf = $inc153;
								var $arrayidx154 = (($xml_buf + $73 * 4) & 4294967295);
								HEAP32[(($arrayidx154) >> 2)] = $72;
								var $call155 = __ZL4GetCv();
								HEAP32[(($c1) >> 2)] = $call155;
								__label__ = 59;
								continue;
							}
							var $74 = $n_xml_buf;
							var $arrayidx157 = (($xml_buf + $74 * 4) & 4294967295);
							HEAP32[(($arrayidx157) >> 2)] = 0;
							HEAP32[(($c2) >> 2)] = 32;
							$self_closing = 0;
							var $75 = $n_xml_buf;
							var $sub = ((($75) - 1) & 4294967295);
							var $arrayidx158 = (($xml_buf + $sub * 4) & 4294967295);
							var $76 = HEAP32[(($arrayidx158) >> 2)];
							var $cmp159 = ((($76)) | 0) == 47;
							if ($cmp159) {
								__label__ = 64;;
							} else {
								__label__ = 65;;
							}
							if (__label__ == 64) {
								var $77 = $n_xml_buf;
								var $sub161 = ((($77) - 1) & 4294967295);
								var $arrayidx162 = (($xml_buf + $sub161 * 4) & 4294967295);
								HEAP32[(($arrayidx162) >> 2)] = 32;
								$self_closing = 1;;
							}
							var $78 = $buf_addr;
							var $79 = $n_buf_addr;
							var $80 = $self_closing;
							var $call165 = __ZL14ProcessSsmlTagPwPcRiii($arraydecay164, $78, $ix, $79, $80);
							$terminator = $call165;
							var $cmp166 = ((($call165)) | 0) != 0;
							if ($cmp166) {
								__label__ = 66;
								break $while_cond$12;
							}
							HEAP32[(($c1) >> 2)] = 32;
							var $call179 = __ZL4GetCv();
							HEAP32[(($c2) >> 2)] = $call179;
							__label__ = 8;
							continue $while_cond$12;
						}
					}
				} while (0);
				HEAP32[((__ZL19ssml_ignore_l_angle) >> 2)] = 0;
				var $_b1 = HEAPU8[(__ZL11ignore_text_b)];
				var $90 = ((($_b1)) & 1);
				var $tobool185 = ((($90)) | 0) != 0;
				if ($tobool185) {
					__label__ = 8;
					continue $while_cond$12;
				}
				var $91 = HEAP32[(($c2) >> 2)];
				var $cmp188 = ((($91)) | 0) == 10;
				var $92 = HEAP32[((_option_linelength) >> 2)];
				var $cmp190 = ((($92)) | 0) == -1;
				var $or_cond11 = ($cmp188) & ($cmp190);
				var $93 = HEAPU32[(($c1) >> 2)];
				if ($or_cond11) {
					__label__ = 74;
					break $while_cond$12;
				}
				var $cmp208 = ((($93)) | 0) == 1;
				if ($cmp208) {
					__label__ = 80;;
				} else {
					__label__ = 79;;
				}
				$if_then212$$lor_lhs_false209$90: do {
					if (__label__ == 79) {
						var $111 = HEAP32[(($c1) >> 2)];
						var $112 = HEAP8[(_ctrl_embedded)];
						var $conv210 = (tempInt = (($112)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp211 = ((($111)) | 0) == ((($conv210)) | 0);
						if ($cmp211) {
							__label__ = 80;
							break $if_then212$$lor_lhs_false209$90;
						} else {
							__label__ = 97;
							break $if_then212$$lor_lhs_false209$90;
						}
					}
				} while (0);
				$if_then212$$if_end267$92: do {
					if (__label__ == 80) {
						var $113 = HEAP32[(($c2) >> 2)];
						var $cmp213 = ((($113)) | 0) == 86;
						if ($cmp213) {
							__label__ = 81;
							break $while_cond$12;
						}
						var $123 = HEAP32[(($c2) >> 2)];
						var $cmp236 = ((($123)) | 0) == 66;
						if (!($cmp236)) {
							__label__ = 97;
							break $if_then212$$if_end267$92;
						}
						var $124 = HEAP32[(($ix) >> 2)];
						var $125 = $buf_addr;
						var $arrayidx238 = (($125 + $124) & 4294967295);
						var $src$, $dest$, $stop$, $stop4$, $fast$;
						$src$ = ((__str41208) & 4294967295);
						$dest$ = $arrayidx238;
						$stop$ = $src$ + 4;
						if (($dest$ % 4) == ($src$ % 4) && 4 > 8) {
							while ($src$ % 4 !== 0 && $src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							}
							$src$ >>= 2;
							$dest$ >>= 2;
							$stop4$ = $stop$ >> 2;
							while ($src$ < $stop4$) {;;;
								HEAP32[$dest$++] = HEAP32[$src$++];
							}
							$src$ <<= 2;
							$dest$ <<= 2;
						}
						while ($src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						};
						var $126 = HEAP32[(($ix) >> 2)];
						var $add240 = ((($126) + 3) & 4294967295);
						HEAP32[(($ix) >> 2)] = $add240;
						var $call241 = __ZL4GetCv();
						HEAP32[(($c2) >> 2)] = $call241;
						var $cmp242 = ((($call241)) | 0) == 48;
						if ($cmp242) {
							__label__ = 89;;
						} else {
							__label__ = 90;;
						}
						$if_then243$$if_else244$96: do {
							if (__label__ == 89) {
								HEAP32[((_option_punctuation) >> 2)] = 0;;
							} else if (__label__ == 90) {
								HEAP32[((_option_punctuation) >> 2)] = 1;
								HEAP32[((((_option_punctlist) & 4294967295)) >> 2)] = 0;
								var $127 = HEAP32[(($c2) >> 2)];
								var $cmp245 = ((($127)) | 0) != 49;
								if (!($cmp245)) {
									__label__ = 96;
									break $if_then243$$if_else244$96;
								}
								$j = 0;;
								while (1) {
									var $128 = HEAP32[(($c2) >> 2)];
									var $call248 = _iswspace($128);
									var $tobool249 = ((($call248)) | 0) != 0;
									if ($tobool249) {
										__label__ = 95;
										break;
									}
									var $call251 = __Z3Eofv();
									var $tobool252 = ((($call251)) | 0) != 0;
									var $lnot = ($tobool252) ^ 1;
									if (!($lnot)) {
										__label__ = 95;
										break;
									}
									var $129 = HEAP32[(($c2) >> 2)];
									var $130 = $j;
									var $inc255 = ((($130) + 1) & 4294967295);
									$j = $inc255;
									var $arrayidx256 = ((_option_punctlist + $130 * 4) & 4294967295);
									HEAP32[(($arrayidx256) >> 2)] = $129;
									var $call257 = __ZL4GetCv();
									HEAP32[(($c2) >> 2)] = $call257;
									var $131 = HEAP32[(($ix) >> 2)];
									var $inc258 = ((($131) + 1) & 4294967295);
									HEAP32[(($ix) >> 2)] = $inc258;
									var $132 = $buf_addr;
									var $arrayidx259 = (($132 + $131) & 4294967295);
									HEAP8[($arrayidx259)] = 32;
									__label__ = 92;
									continue;
								}
								var $133 = $j;
								var $arrayidx261 = ((_option_punctlist + $133 * 4) & 4294967295);
								HEAP32[(($arrayidx261) >> 2)] = 0;
								HEAP32[((_option_punctuation) >> 2)] = 2;;
							}
						} while (0);
						var $call264 = __ZL4GetCv();
						HEAP32[(($c2) >> 2)] = $call264;
						__label__ = 8;
						continue $while_cond$12;
					}
				} while (0);
				var $134 = $linelength;
				var $inc268 = ((($134) + 1) & 4294967295);
				$linelength = $inc268;
				var $135 = HEAP32[(($c1) >> 2)];
				var $call269 = _iswalnum($135);
				var $tobool270 = ((($call269)) | 0) != 0;
				if ($tobool270) {
					__label__ = 98;;
				} else {
					__label__ = 99;;
				}
				$if_then271$$if_else272$107: do {
					if (__label__ == 98) {
						$any_alnum = 1;;
					} else if (__label__ == 99) {
						var $136 = $stressed_word;
						var $tobool273 = ((($136)) | 0) != 0;
						if ($tobool273) {
							__label__ = 100;;
						} else {
							__label__ = 101;;
						}
						if (__label__ == 100) {
							$stressed_word = 0;
							HEAP32[(($c1) >> 2)] = 1328;
							var $137 = HEAP32[(($c2) >> 2)];
							__ZL6UngetCi($137);
							HEAP32[(($c2) >> 2)] = 32;;
						}
						var $138 = HEAP32[(($c1) >> 2)];
						var $call276 = __Z11lookupwcharPKti(((__ZL12chars_ignore) & 4294967295), $138);
						var $tobool277 = ((($call276)) | 0) != 0;
						if ($tobool277) {
							__label__ = 8;
							continue $while_cond$12;
						}
						var $139 = HEAP32[(($c1) >> 2)];
						var $call280 = _iswspace($139);
						var $tobool281 = ((($call280)) | 0) != 0;
						if ($tobool281) {
							__label__ = 103;;
						} else {
							__label__ = 109;;
						}
						$if_then282$$if_end304$114: do {
							if (__label__ == 103) {
								var $140 = $tr_addr;
								var $translator_name = (($140 + 280) & 4294967295);
								var $141 = HEAP32[(($translator_name) >> 2)];
								var $cmp283 = ((($141)) | 0) == 6972015;
								if (!($cmp283)) {
									__label__ = 109;
									break $if_then282$$if_end304$114;
								}
								var $142 = HEAP32[(($ix) >> 2)];
								var $sub285 = ((($142) - 1) & 4294967295);
								var $143 = $buf_addr;
								var $arrayidx286 = (($143 + $sub285) & 4294967295);
								$p_word = $arrayidx286;
								var $144 = $p_word;
								var $arrayidx287 = (($144) & 4294967295);
								var $145 = HEAP8[($arrayidx287)];
								var $conv288 = (tempInt = (($145)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp289 = ((($conv288)) | 0) == 105;
								if (!($cmp289)) {
									__label__ = 109;
									break $if_then282$$if_end304$114;
								}
								var $146 = $p_word;
								var $arrayidx291 = (($146 + -1) & 4294967295);
								var $147 = HEAP8[($arrayidx291)];
								var $conv292 = (tempInt = (($147)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp293 = ((($conv292)) | 0) == 46;
								if ($cmp293) {
									__label__ = 106;;
								} else {
									__label__ = 107;;
								}
								if (__label__ == 106) {
									var $148 = $p_word;
									var $incdec_ptr = (($148 + -1) & 4294967295);
									$p_word = $incdec_ptr;;
								}
								var $149 = $p_word;
								var $arrayidx296 = (($149 + -1) & 4294967295);
								var $150 = HEAP8[($arrayidx296)];
								var $conv297 = (tempInt = (($150)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp298 = ((($conv297)) | 0) == 32;
								if ($cmp298) {
									__label__ = 108;
									break $while_cond$12;
								}
							}
						} while (0);
						var $153 = HEAP32[(($c1) >> 2)];
						var $cmp305 = ((($153)) | 0) == 3405;
						if (!($cmp305)) {
							__label__ = 112;
							break $if_then271$$if_else272$107;
						}
						var $154 = HEAP32[(($c2) >> 2)];
						var $cmp307 = ((($154)) | 0) == 8205;
						if (!($cmp307)) {
							__label__ = 112;
							break $if_then271$$if_else272$107;
						}
						HEAP32[(($c1) >> 2)] = 3406;;
					}
				} while (0);
				var $155 = HEAP32[(($c1) >> 2)];
				var $call312 = _iswupper($155);
				var $tobool313 = ((($call312)) | 0) != 0;
				if ($tobool313) {
					__label__ = 113;;
				} else {
					__label__ = 118;;
				}
				$if_then314$$if_else343$125: do {
					if (__label__ == 113) {
						var $156 = $tr_addr;
						var $clause_upper_count315 = (($156 + 8304) & 4294967295);
						var $157 = HEAP32[(($clause_upper_count315) >> 2)];
						var $inc316 = ((($157) + 1) & 4294967295);
						HEAP32[(($clause_upper_count315) >> 2)] = $inc316;
						var $158 = HEAP32[((_option_capitals) >> 2)];
						var $cmp317 = ((($158)) | 0) == 2;
						var $159 = HEAP32[((__ZL10sayas_mode) >> 2)];
						var $cmp319 = ((($159)) | 0) == 0;
						var $or_cond13 = ($cmp317) & ($cmp319);
						if (!($or_cond13)) {
							__label__ = 120;
							break $if_then314$$if_else343$125;
						}
						var $160 = $cprev;
						var $call321 = _iswupper($160);
						var $tobool322 = ((($call321)) | 0) != 0;
						if ($tobool322) {
							__label__ = 120;
							break $if_then314$$if_else343$125;
						}
						var $161 = $tr_addr;
						var $call325 = __ZL13LookupSpecialP10TranslatorPKcPc($161, $arraydecay324);
						var $cmp326 = ((($call325)) | 0) != 0;
						if (!($cmp326)) {
							__label__ = 120;
							break $if_then314$$if_else343$125;
						}
						var $strlen = _strlen($arraydecay329);
						var $leninc = ((($strlen) + 1) & 4294967295);
						var $src$, $dest$, $stop$, $stop4$, $fast$;
						$src$ = $arraydecay329;
						$dest$ = $arraydecay328;
						$stop$ = $src$ + $leninc;
						if (($dest$ % 4) == ($src$ % 4) && $leninc > 8) {
							while ($src$ % 4 !== 0 && $src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							}
							$src$ >>= 2;
							$dest$ >>= 2;
							$stop4$ = $stop$ >> 2;
							while ($src$ < $stop4$) {;;;
								HEAP32[$dest$++] = HEAP32[$src$++];
							}
							$src$ <<= 2;
							$dest$ <<= 2;
						}
						while ($src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						};
						var $call332 = _strlen($arraydecay331);
						$j = $call332;
						var $162 = HEAP32[(($ix) >> 2)];
						var $163 = $j;
						var $add333 = ((($163) + ($162)) & 4294967295);
						var $164 = $n_buf_addr;
						var $cmp334 = ((($add333)) | 0) < ((($164)) | 0);
						if (!($cmp334)) {
							__label__ = 120;
							break $if_then314$$if_else343$125;
						}
						var $165 = HEAP32[(($ix) >> 2)];
						var $166 = $buf_addr;
						var $arrayidx336 = (($166 + $165) & 4294967295);
						var $call338 = _strcpy($arrayidx336, $arraydecay337);
						var $167 = $j;
						var $168 = HEAP32[(($ix) >> 2)];
						var $add339 = ((($168) + ($167)) & 4294967295);
						HEAP32[(($ix) >> 2)] = $add339;;
					} else if (__label__ == 118) {
						var $169 = HEAP32[(($c1) >> 2)];
						var $call344 = _iswalpha($169);
						var $tobool345 = ((($call344)) | 0) != 0;
						if (!($tobool345)) {
							__label__ = 120;
							break $if_then314$$if_else343$125;
						}
						var $170 = $tr_addr;
						var $clause_lower_count347 = (($170 + 8308) & 4294967295);
						var $171 = HEAP32[(($clause_lower_count347) >> 2)];
						var $inc348 = ((($171) + 1) & 4294967295);
						HEAP32[(($clause_lower_count347) >> 2)] = $inc348;;
					}
				} while (0);
				var $172 = HEAP32[((_option_phoneme_input) >> 2)];
				var $tobool351 = ((($172)) | 0) != 0;
				if ($tobool351) {
					__label__ = 121;;
				} else {
					__label__ = 130;;
				}
				$if_then352$$if_end368$134: do {
					if (__label__ == 121) {
						var $173 = $phoneme_mode;
						var $cmp353 = ((($173)) | 0) > 0;
						if ($cmp353) {
							__label__ = 122;;
						} else {
							__label__ = 123;;
						}
						if (__label__ == 122) {
							var $174 = $phoneme_mode;
							var $dec = ((($174) - 1) & 4294967295);
							$phoneme_mode = $dec;;
						} else if (__label__ == 123) {
							var $175 = HEAP32[(($c1) >> 2)];
							var $cmp356 = ((($175)) | 0) == 91;
							if ($cmp356) {
								__lastLabel__ = 123;
								__label__ = 124;;
							} else {
								__lastLabel__ = 123;
								__label__ = 127;;
							}
							if (__label__ == 124) {
								var $176 = HEAP32[(($c2) >> 2)];
								var $cmp358 = ((($176)) | 0) == 91;
								if ($cmp358) {
									__label__ = 125;;
								} else {
									__label__ = 126;;
								}
								if (__label__ == 125) {
									$phoneme_mode = -1;
									__label__ = 130;
									break $if_then352$$if_end368$134;
								} else if (__label__ == 126) {
									var $_pr25 = HEAP32[(($c1) >> 2)];
									__lastLabel__ = 126;;
								}
							}
							var $177 = __lastLabel__ == 126 ? $_pr25 : ($175);
							var $cmp361 = ((($177)) | 0) == 93;
							if (!($cmp361)) {
								__label__ = 130;
								break $if_then352$$if_end368$134;
							}
							var $178 = HEAP32[(($c2) >> 2)];
							var $cmp363 = ((($178)) | 0) == 93;
							if (!($cmp363)) {
								__label__ = 130;
								break $if_then352$$if_end368$134;
							}
							$phoneme_mode = 2;;
						}
					}
				} while (0);
				var $179 = HEAP32[(($c1) >> 2)];
				var $cmp369 = ((($179)) | 0) == 10;
				if ($cmp369) {
					__label__ = 131;;
				} else {
					__label__ = 148;;
				}
				if (__label__ == 131) {
					$parag = 0;;
					while (1) {
						var $call372 = __Z3Eofv();
						var $tobool373 = ((($call372)) | 0) != 0;
						if ($tobool373) {
							__label__ = 137;
							break;
						}
						var $180 = HEAP32[(($c2) >> 2)];
						var $call375 = _iswspace($180);
						var $tobool376 = ((($call375)) | 0) != 0;
						if (!($tobool376)) {
							__label__ = 137;
							break;
						}
						var $181 = HEAP32[(($c2) >> 2)];
						var $cmp379 = ((($181)) | 0) == 10;
						if ($cmp379) {
							__label__ = 135;;
						} else {
							__label__ = 136;;
						}
						if (__label__ == 135) {
							var $182 = $parag;
							var $inc381 = ((($182) + 1) & 4294967295);
							$parag = $inc381;;
						}
						var $call383 = __ZL4GetCv();
						HEAP32[(($c2) >> 2)] = $call383;
						__label__ = 132;
						continue;
					}
					var $183 = $parag;
					var $cmp385 = ((($183)) | 0) > 0;
					if ($cmp385) {
						__label__ = 138;
						break $while_cond$12;
					}
					var $195 = $linelength;
					var $196 = HEAP32[((_option_linelength) >> 2)];
					var $cmp402 = ((($195)) | 0) <= ((($196)) | 0);
					if ($cmp402) {
						__label__ = 146;
						break $while_cond$12;
					}
					$linelength = 0;;
				}
				var $202 = $announced_punctuation;
				$prev_announced_punctuation = $202;
				$announced_punctuation = 0;
				var $203 = $phoneme_mode;
				var $cmp409 = ((($203)) | 0) == 0;
				var $204 = HEAP32[((__ZL10sayas_mode) >> 2)];
				var $cmp411 = ((($204)) | 0) == 0;
				var $or_cond14 = ($cmp409) & ($cmp411);
				if ($or_cond14) {
					__label__ = 149;;
				} else {
					__label__ = 238;;
				}
				$if_then412$$if_end643$161: do {
					if (__label__ == 149) {
						$is_end_clause = 0;
						var $205 = $end_clause_after_tag;
						var $tobool413 = ((($205)) | 0) != 0;
						if ($tobool413) {
							__label__ = 150;;
						} else {
							__label__ = 155;;
						}
						$if_then414$$if_end429$163: do {
							if (__label__ == 150) {
								var $206 = HEAP32[(($c1) >> 2)];
								var $call415 = _iswspace($206);
								var $tobool416 = ((($call415)) | 0) != 0;
								if ($tobool416) {
									__label__ = 155;
									break $if_then414$$if_end429$163;
								}
								var $207 = HEAP32[(($c1) >> 2)];
								var $call418 = __Z7IsAlphaj($207);
								var $tobool419 = ((($call418)) | 0) != 0;
								if (!($tobool419)) {
									__label__ = 153;
									break $while_cond$12;
								}
								var $208 = HEAP32[(($c1) >> 2)];
								var $call421 = _iswlower($208);
								var $tobool422 = ((($call421)) | 0) != 0;
								if (!($tobool422)) {
									__label__ = 153;
									break $while_cond$12;
								}
								$end_clause_after_tag = 0;;
							}
						} while (0);
						var $216 = HEAP32[(($c1) >> 2)];
						var $cmp430 = ((($216)) | 0) == 46;
						if ($cmp430) {
							__label__ = 156;;
						} else {
							__label__ = 162;;
						}
						$land_lhs_true431$$if_end443$169: do {
							if (__label__ == 156) {
								var $217 = HEAP32[(($c2) >> 2)];
								var $cmp432 = ((($217)) | 0) == 46;
								if (!($cmp432)) {
									__label__ = 162;
									break $land_lhs_true431$$if_end443$169;
								}
								var $call43538 = __ZL4GetCv();
								$c_next = $call43538;
								var $cmp43639 = ((($call43538)) | 0) == 46;
								if ($cmp43639) {
									__label__ = 158;;
								} else {
									__label__ = 159;;
								}
								$while_body437$$while_end438$172: do {
									if (__label__ == 158) {
										while (1) {
											HEAP32[(($c1) >> 2)] = 8230;
											HEAP32[(($c2) >> 2)] = 32;
											var $call435 = __ZL4GetCv();
											$c_next = $call435;
											var $cmp436 = ((($call435)) | 0) == 46;
											if ($cmp436) {
												__label__ = 158;
												continue;
											} else {
												__label__ = 159;
												break $while_body437$$while_end438$172;
											}
										}
									}
								} while (0);
								var $218 = HEAP32[(($c1) >> 2)];
								var $cmp439 = ((($218)) | 0) == 8230;
								var $219 = $c_next;
								if ($cmp439) {
									__label__ = 160;;
								} else {
									__label__ = 161;;
								}
								if (__label__ == 160) {
									HEAP32[(($c2) >> 2)] = $219;;
								} else if (__label__ == 161) {
									__ZL6UngetCi($219);;
								}
							}
						} while (0);
						$punct_data = 0;
						var $220 = HEAP32[(($c1) >> 2)];
						var $call444 = __Z11lookupwcharPKti(((__ZL11punct_chars) & 4294967295), $220);
						$punct = $call444;
						var $cmp445 = ((($call444)) | 0) != 0;
						if ($cmp445) {
							__label__ = 163;;
						} else {
							__label__ = 171;;
						}
						$if_then446$$if_end471$180: do {
							if (__label__ == 163) {
								var $221 = $punct;
								var $arrayidx447 = ((__ZL16punct_attributes + $221 * 4) & 4294967295);
								var $222 = HEAP32[(($arrayidx447) >> 2)];
								$punct_data = $222;
								var $223 = $punct_data;
								var $and448 = ($223) & 1048576;
								var $tobool449 = ((($and448)) | 0) != 0;
								if ($tobool449) {
									__label__ = 164;;
								} else {
									__label__ = 165;;
								}
								if (__label__ == 164) {
									$stressed_word = 1;
									var $224 = $punct_data;
									var $shr = ($224) >> 12;
									var $and451 = ($shr) & 15;
									var $225 = $tone_type_addr;
									HEAP32[(($225) >> 2)] = $and451;
									__label__ = 8;
									continue $while_cond$12;
								} else if (__label__ == 165) {
									var $226 = HEAP32[(($c2) >> 2)];
									var $call453 = _iswspace($226);
									var $tobool454 = ((($call453)) | 0) != 0;
									if ($tobool454) {
										__label__ = 170;;
									} else {
										__label__ = 166;;
									}
									$if_then469$$lor_lhs_false455$185: do {
										if (__label__ == 166) {
											var $227 = $punct_data;
											var $and456 = ($227) & 32768;
											var $tobool457 = ((($and456)) | 0) != 0;
											if ($tobool457) {
												__label__ = 170;
												break $if_then469$$lor_lhs_false455$185;
											}
											var $228 = HEAP32[(($c2) >> 2)];
											var $call459 = __Z9IsBracketi($228);
											var $tobool460 = ((($call459)) | 0) != 0;
											var $229 = HEAP32[(($c2) >> 2)];
											var $cmp462 = ((($229)) | 0) == 63;
											var $or_cond15 = ($tobool460) | ($cmp462);
											if ($or_cond15) {
												__label__ = 170;
												break $if_then469$$lor_lhs_false455$185;
											}
											var $call464 = __Z3Eofv();
											var $tobool465 = ((($call464)) | 0) != 0;
											if ($tobool465) {
												__label__ = 170;
												break $if_then469$$lor_lhs_false455$185;
											}
											var $230 = HEAP32[(($c2) >> 2)];
											var $231 = HEAP8[(_ctrl_embedded)];
											var $conv467 = (tempInt = (($231)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp468 = ((($230)) | 0) == ((($conv467)) | 0);
											if (!($cmp468)) {
												__label__ = 171;
												break $if_then446$$if_end471$180;
											}
										}
									} while (0);
									$is_end_clause = 1;;
								}
							}
						} while (0);
						var $232 = HEAP32[(($c1) >> 2)];
						var $cmp472 = ((($232)) | 0) == 57404;
						if ($cmp472) {
							__label__ = 172;;
						} else {
							__label__ = 173;;
						}
						if (__label__ == 172) {
							HEAP32[(($c1) >> 2)] = 60;;
						}
						var $233 = HEAP32[((_option_punctuation) >> 2)];
						var $tobool475 = ((($233)) | 0) != 0;
						if ($tobool475) {
							__label__ = 174;;
						} else {
							__label__ = 181;;
						}
						$land_lhs_true476$$if_end493$195: do {
							if (__label__ == 174) {
								var $234 = HEAP32[(($c1) >> 2)];
								var $call477 = _iswpunct($234);
								var $tobool478 = ((($call477)) | 0) != 0;
								if (!($tobool478)) {
									__label__ = 181;
									break $land_lhs_true476$$if_end493$195;
								}
								var $_b2 = HEAPU8[(__ZL10audio_text_b)];
								var $235 = ((($_b2)) & 1);
								var $cmp480 = ((($235)) | 0) == 0;
								if (!($cmp480)) {
									__label__ = 181;
									break $land_lhs_true476$$if_end493$195;
								}
								var $236 = HEAP32[((_option_punctuation) >> 2)];
								var $cmp482 = ((($236)) | 0) == 1;
								if ($cmp482) {
									__label__ = 178;;
								} else {
									__label__ = 177;;
								}
								if (__label__ == 177) {
									var $237 = HEAP32[(($c1) >> 2)];
									var $call484 = _wcschr(((_option_punctlist) & 4294967295), $237);
									var $cmp485 = ((($call484)) | 0) != 0;
									if (!($cmp485)) {
										__label__ = 181;
										break $land_lhs_true476$$if_end493$195;
									}
								}
								var $238 = $tr_addr;
								var $phonemes_repeat_count487 = (($238 + 652) & 4294967295);
								HEAP32[(($phonemes_repeat_count487) >> 2)] = 0;
								var $239 = $tr_addr;
								var $240 = HEAP32[(($c1) >> 2)];
								var $241 = $buf_addr;
								var $242 = $is_end_clause;
								var $call488 = __ZL19AnnouncePunctuationP10TranslatoriPiPcS1_i($239, $240, $c2, $241, $ix, $242);
								$terminator = $call488;
								var $cmp489 = ((($call488)) | 0) >= 0;
								if ($cmp489) {
									__label__ = 179;
									break $while_cond$12;
								}
								var $244 = HEAP32[(($c1) >> 2)];
								$announced_punctuation = $244;;
							}
						} while (0);
						var $245 = $punct_data;
						var $and494 = ($245) & 2097152;
						var $tobool495 = ((($and494)) | 0) != 0;
						if ($tobool495) {
							__label__ = 182;;
						} else {
							__label__ = 185;;
						}
						$land_lhs_true496$$if_end510$204: do {
							if (__label__ == 182) {
								var $246 = $announced_punctuation;
								var $cmp497 = ((($246)) | 0) == 0;
								if (!($cmp497)) {
									__label__ = 185;
									break $land_lhs_true496$$if_end510$204;
								}
								var $247 = HEAP32[(($ix) >> 2)];
								var $248 = $buf_addr;
								var $arrayidx499 = (($248 + $247) & 4294967295);
								$p2 = $arrayidx499;
								var $249 = $p2;
								var $250 = $tr_addr;
								var $251 = HEAP32[(($c1) >> 2)];
								__ZL14LookupCharNameP10Translatorii($250, $251, 1);
								var $strlen20 = _strlen(((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295));
								var $leninc21 = ((($strlen20) + 1) & 4294967295);
								var $src$, $dest$, $stop$, $stop4$, $fast$;
								$src$ = ((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295);
								$dest$ = $249;
								$stop$ = $src$ + $leninc21;
								if (($dest$ % 4) == ($src$ % 4) && $leninc21 > 8) {
									while ($src$ % 4 !== 0 && $src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									}
									$src$ >>= 2;
									$dest$ >>= 2;
									$stop4$ = $stop$ >> 2;
									while ($src$ < $stop4$) {;;;
										HEAP32[$dest$++] = HEAP32[$src$++];
									}
									$src$ <<= 2;
									$dest$ <<= 2;
								}
								while ($src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								};
								var $252 = $p2;
								var $arrayidx502 = (($252) & 4294967295);
								var $253 = HEAP8[($arrayidx502)];
								var $conv503 = (tempInt = (($253)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp504 = ((($conv503)) | 0) != 0;
								if (!($cmp504)) {
									__label__ = 185;
									break $land_lhs_true496$$if_end510$204;
								}
								var $254 = $p2;
								var $call506 = _strlen($254);
								var $255 = HEAP32[(($ix) >> 2)];
								var $add507 = ((($255) + ($call506)) & 4294967295);
								HEAP32[(($ix) >> 2)] = $add507;
								var $256 = HEAP32[(($c1) >> 2)];
								$announced_punctuation = $256;
								var $257 = $punct_data;
								var $and508 = ($257) & -28673;
								$punct_data = $and508;;
							}
						} while (0);
						var $258 = $is_end_clause;
						var $tobool511 = ((($258)) | 0) != 0;
						if (!($tobool511)) {
							__label__ = 238;
							break $if_then412$$if_end643$161;
						}
						$nl_count = 0;
						var $259 = HEAP32[(($c2) >> 2)];
						$c_next = $259;
						var $260 = $c_next;
						var $call513 = _iswspace($260);
						var $tobool514 = ((($call513)) | 0) != 0;
						if ($tobool514) {
							__label__ = 187;;
						} else {
							__label__ = 192;;
						}
						$while_cond516$$if_end530$210: do {
							if (__label__ == 187) {
								while (1) {
									var $call517 = __Z3Eofv();
									var $tobool518 = ((($call517)) | 0) != 0;
									if ($tobool518) {
										__label__ = 192;
										break $while_cond516$$if_end530$210;
									}
									var $261 = $c_next;
									var $call520 = _iswspace($261);
									var $tobool521 = ((($call520)) | 0) != 0;
									if (!($tobool521)) {
										__label__ = 192;
										break $while_cond516$$if_end530$210;
									}
									var $262 = $c_next;
									var $cmp524 = ((($262)) | 0) == 10;
									if ($cmp524) {
										__label__ = 190;;
									} else {
										__label__ = 191;;
									}
									if (__label__ == 190) {
										var $263 = $nl_count;
										var $inc526 = ((($263) + 1) & 4294967295);
										$nl_count = $inc526;;
									}
									var $call528 = __ZL4GetCv();
									$c_next = $call528;
									__label__ = 187;
									continue;
								}
							}
						} while (0);
						var $264 = HEAP32[(($c1) >> 2)];
						var $cmp531 = ((($264)) | 0) == 46;
						if ($cmp531) {
							__label__ = 193;;
						} else {
							__label__ = 195;;
						}
						$land_lhs_true532$$if_end535$219: do {
							if (__label__ == 193) {
								var $265 = $nl_count;
								var $cmp533 = ((($265)) | 0) < 2;
								if (!($cmp533)) {
									__label__ = 226;
									break $land_lhs_true532$$if_end535$219;
								}
								var $266 = $punct_data;
								var $or = ($266) | 4194304;
								$punct_data = $or;
								__label__ = 195;
								break $land_lhs_true532$$if_end535$219;
							}
						} while (0);
						$if_end535$$if_end609$222: do {
							if (__label__ == 195) {
								var $_pr26 = $nl_count;
								var $cmp536 = ((($_pr26)) | 0) == 0;
								if (!($cmp536)) {
									__label__ = 226;
									break $if_end535$$if_end609$222;
								}
								var $267 = HEAP32[(($c1) >> 2)];
								var $cmp538 = ((($267)) | 0) == 44;
								if ($cmp538) {
									__lastLabel__ = 196;
									__label__ = 197;;
								} else {
									__lastLabel__ = 196;
									__label__ = 204;;
								}
								$land_lhs_true539$$if_end554$225: do {
									if (__label__ == 197) {
										var $268 = $cprev;
										var $cmp540 = ((($268)) | 0) == 46;
										if ($cmp540) {
											__label__ = 198;;
										} else {
											__label__ = 203;;
										}
										$land_lhs_true541$$if_end554thread_pre_split$227: do {
											if (__label__ == 198) {
												var $269 = $tr_addr;
												var $translator_name542 = (($269 + 280) & 4294967295);
												var $270 = HEAP32[(($translator_name542) >> 2)];
												var $cmp543 = ((($270)) | 0) == 26741;
												if (!($cmp543)) {
													__label__ = 203;
													break $land_lhs_true541$$if_end554thread_pre_split$227;
												}
												var $271 = $cprev2;
												var $call545 = _iswdigit($271);
												var $tobool546 = ((($call545)) | 0) != 0;
												if (!($tobool546)) {
													__label__ = 203;
													break $land_lhs_true541$$if_end554thread_pre_split$227;
												}
												var $272 = $c_next;
												var $call548 = _iswdigit($272);
												var $tobool549 = ((($call548)) | 0) != 0;
												if ($tobool549) {
													__label__ = 202;;
												} else {
													__label__ = 201;;
												}
												if (__label__ == 201) {
													var $273 = $c_next;
													var $call551 = _iswlower($273);
													var $tobool552 = ((($call551)) | 0) != 0;
													if (!($tobool552)) {
														__label__ = 203;
														break $land_lhs_true541$$if_end554thread_pre_split$227;
													}
												}
												HEAP32[(($c1) >> 2)] = 1367;
												$is_end_clause = 0;
												__label__ = 220;
												break $land_lhs_true539$$if_end554$225;
											}
										} while (0);
										var $_pr28 = HEAP32[(($c1) >> 2)];
										__lastLabel__ = 203;
										__label__ = 204;
										break $land_lhs_true539$$if_end554$225;
									}
								} while (0);
								$if_else595$$if_end554$235: do {
									if (__label__ == 204) {
										var $274 = __lastLabel__ == 203 ? $_pr28 : ($267);
										var $cmp555 = ((($274)) | 0) == 46;
										if (!($cmp555)) {
											__label__ = 220;
											break $if_else595$$if_end554$235;
										}
										var $275 = $tr_addr;
										var $langopts = (($275) & 4294967295);
										var $numbers = (($langopts + 184) & 4294967295);
										var $276 = HEAP32[(($numbers) >> 2)];
										var $and557 = ($276) & 65536;
										var $tobool558 = ((($and557)) | 0) != 0;
										if ($tobool558) {
											__label__ = 206;;
										} else {
											__label__ = 214;;
										}
										$land_lhs_true559$$if_else583$238: do {
											if (__label__ == 206) {
												var $277 = $cprev;
												var $call560 = _iswdigit($277);
												var $tobool561 = ((($call560)) | 0) != 0;
												if ($tobool561) {
													__label__ = 210;;
												} else {
													__label__ = 207;;
												}
												$if_then571$$lor_lhs_false562$240: do {
													if (__label__ == 207) {
														var $278 = $cprev;
														var $call563 = __ZL8IsRomanUj($278);
														var $tobool564 = ((($call563)) | 0) != 0;
														if (!($tobool564)) {
															__label__ = 214;
															break $land_lhs_true559$$if_else583$238;
														}
														var $279 = $cprev2;
														var $call566 = __ZL8IsRomanUj($279);
														var $tobool567 = ((($call566)) | 0) != 0;
														if ($tobool567) {
															__label__ = 210;
															break $if_then571$$lor_lhs_false562$240;
														}
														var $280 = $cprev2;
														var $call569 = _iswspace($280);
														var $tobool570 = ((($call569)) | 0) != 0;
														if (!($tobool570)) {
															__label__ = 214;
															break $land_lhs_true559$$if_else583$238;
														}
													}
												} while (0);
												var $281 = $cprev;
												var $call572 = _iswdigit($281);
												var $tobool573 = ((($call572)) | 0) != 0;
												if ($tobool573) {
													__label__ = 212;;
												} else {
													__label__ = 211;;
												}
												if (__label__ == 212) {
													var $282 = $c_next;
													var $call576 = _iswlower($282);
													var $tobool577 = ((($call576)) | 0) != 0;
													var $283 = $c_next;
													var $cmp579 = ((($283)) | 0) == 45;
													var $or_cond16 = ($tobool577) | ($cmp579);
													if (!($or_cond16)) {
														__label__ = 216;
														break $land_lhs_true559$$if_else583$238;
													}
													$is_end_clause = 0;
													__label__ = 216;
													break $land_lhs_true559$$if_else583$238;
												} else if (__label__ == 211) {
													$is_end_clause = 0;
													__label__ = 216;
													break $land_lhs_true559$$if_else583$238;
												}
											}
										} while (0);
										$if_end587$$if_else583$249: do {
											if (__label__ == 214) {
												var $284 = $c_next;
												var $cmp584 = ((($284)) | 0) == 39;
												if (!($cmp584)) {
													__label__ = 216;
													break $if_end587$$if_else583$249;
												}
												$is_end_clause = 0;;
											}
										} while (0);
										var $285 = $c_next;
										var $call588 = _iswlower($285);
										var $tobool589 = ((($call588)) | 0) != 0;
										if ($tobool589) {
											__label__ = 217;;
										} else {
											__label__ = 218;;
										}
										if (__label__ == 217) {
											$is_end_clause = 0;;
										}
										var $286 = $any_alnum;
										var $cmp592 = ((($286)) | 0) == 0;
										if (!($cmp592)) {
											__label__ = 222;
											break $if_else595$$if_end554$235;
										}
										HEAP32[(($c1) >> 2)] = 32;
										$is_end_clause = 0;
										__label__ = 235;
										break $if_end535$$if_end609$222;
									}
								} while (0);
								$if_else595$$if_end599$257: do {
									if (__label__ == 220) {
										var $287 = $any_alnum;
										var $cmp596 = ((($287)) | 0) == 0;
										if (!($cmp596)) {
											__label__ = 222;
											break $if_else595$$if_end599$257;
										}
										$is_end_clause = 0;
										__label__ = 235;
										break $if_end535$$if_end609$222;
									}
								} while (0);
								var $_pr30 = $is_end_clause;
								var $tobool600 = ((($_pr30)) | 0) != 0;
								if (!($tobool600)) {
									__label__ = 235;
									break $if_end535$$if_end609$222;
								}
								var $288 = HEAP32[(($c1) >> 2)];
								var $cmp602 = ((($288)) | 0) == 46;
								if (!($cmp602)) {
									__label__ = 226;
									break $if_end535$$if_end609$222;
								}
								var $289 = $c_next;
								var $cmp604 = ((($289)) | 0) == 60;
								var $290 = HEAP32[((_option_ssml) >> 2)];
								var $tobool606 = ((($290)) | 0) != 0;
								var $or_cond17 = ($cmp604) & ($tobool606);
								if (!($or_cond17)) {
									__label__ = 226;
									break $if_end535$$if_end609$222;
								}
								$is_end_clause = 0;
								var $291 = HEAP32[(($ix) >> 2)];
								$end_clause_index = $291;
								var $292 = $punct_data;
								$end_clause_after_tag = $292;
								__label__ = 235;
								break $if_end535$$if_end609$222;
							}
						} while (0);
						if (__label__ == 226) {
							var $_pr32_pr = $is_end_clause;
							var $tobool610 = ((($_pr32_pr)) | 0) != 0;
							if ($tobool610) {
								__label__ = 227;
								break $while_cond$12;
							}
						}
						var $call633 = __Z3Eofv();
						var $tobool634 = ((($call633)) | 0) != 0;
						if ($tobool634) {
							__label__ = 238;
							break $if_then412$$if_end643$161;
						}
						var $305 = HEAP32[(($c2) >> 2)];
						var $call636 = _iswspace($305);
						var $tobool637 = ((($call636)) | 0) != 0;
						if (!($tobool637)) {
							__label__ = 238;
							break $if_then412$$if_end643$161;
						}
						var $306 = $c_next;
						__ZL6UngetCi($306);;
					}
				} while (0);
				var $307 = HEAP32[((((__ZL17speech_parameters) & 4294967295)) >> 2)];
				var $cmp644 = ((($307)) | 0) == 1;
				if ($cmp644) {
					__label__ = 8;
					continue $while_cond$12;
				}
				var $308 = HEAP32[(($c1) >> 2)];
				var $309 = $announced_punctuation;
				var $cmp647 = ((($308)) | 0) == ((($309)) | 0);
				if ($cmp647) {
					__label__ = 240;;
				} else {
					__label__ = 245;;
				}
				$if_then648$$if_end657$271: do {
					if (__label__ == 240) {
						var $310 = HEAP32[(($c1) >> 2)];
						var $call649 = __Z9IsBracketi($310);
						var $tobool650 = ((($call649)) | 0) != 0;
						if ($tobool650) {
							__label__ = 241;;
						} else {
							__label__ = 242;;
						}
						$if_then651$$if_else652$273: do {
							if (__label__ == 241) {
								HEAP32[(($c1) >> 2)] = 57384;;
							} else if (__label__ == 242) {
								var $311 = HEAP32[(($c1) >> 2)];
								var $cmp653 = ((($311)) | 0) != 45;
								if (!($cmp653)) {
									__label__ = 244;
									break $if_then651$$if_else652$273;
								}
								HEAP32[(($c1) >> 2)] = 32;;
							}
						} while (0);
						var $312 = HEAP32[(($ix) >> 2)];
						var $add65834 = ((($312) + 1) & 4294967295);
						$j = $add65834;;
					} else if (__label__ == 245) {
						var $313 = HEAP32[(($ix) >> 2)];
						var $add658 = ((($313) + 1) & 4294967295);
						$j = $add658;
						var $cmp659 = ((($308)) | 0) == 57404;
						if (!($cmp659)) {
							__label__ = 247;
							break $if_then648$$if_end657$271;
						}
						HEAP32[(($c1) >> 2)] = 60;;
					}
				} while (0);
				var $314 = HEAP32[(($c1) >> 2)];
				var $315 = HEAP32[(($ix) >> 2)];
				var $316 = $buf_addr;
				var $arrayidx662 = (($316 + $315) & 4294967295);
				var $call663 = __Z8utf8_outjPc($314, $arrayidx662);
				var $317 = HEAP32[(($ix) >> 2)];
				var $add664 = ((($317) + ($call663)) & 4294967295);
				HEAP32[(($ix) >> 2)] = $add664;
				var $318 = HEAP32[(($c1) >> 2)];
				var $call665 = _iswspace($318);
				var $tobool666 = ((($call665)) | 0) != 0;
				if ($tobool666) {
					__label__ = 251;;
				} else {
					__label__ = 248;;
				}
				$if_end680$$land_lhs_true667$281: do {
					if (__label__ == 248) {
						var $319 = HEAP32[(($c1) >> 2)];
						var $call668 = __Z9IsBracketi($319);
						var $tobool669 = ((($call668)) | 0) != 0;
						if ($tobool669) {
							__label__ = 251;
							break $if_end680$$land_lhs_true667$281;
						}
						var $320 = HEAP32[((_count_characters) >> 2)];
						var $321 = HEAP32[((_clause_start_char) >> 2)];
						var $sub671 = ((($320) - ($321)) & 4294967295);
						var $conv672 = ((($sub671)) & 65535);
						var $322 = HEAP32[(($ix) >> 2)];
						var $323 = $charix_addr;
						var $arrayidx673 = (($323 + 2 * $322) & 4294967295);
						HEAP16[(($arrayidx673) >> 1)] = $conv672;
						var $324 = $j;
						var $325 = HEAP32[(($ix) >> 2)];
						var $cmp67537 = ((($324)) | 0) < ((($325)) | 0);
						if (!($cmp67537)) {
							__label__ = 251;
							break $if_end680$$land_lhs_true667$281;
						}
						while (1) {
							var $326 = $j;
							var $inc677 = ((($326) + 1) & 4294967295);
							$j = $inc677;
							var $327 = $charix_addr;
							var $arrayidx678 = (($327 + 2 * $326) & 4294967295);
							HEAP16[(($arrayidx678) >> 1)] = -1;
							var $328 = $j;
							var $329 = HEAP32[(($ix) >> 2)];
							var $cmp675 = ((($328)) | 0) < ((($329)) | 0);
							if ($cmp675) {
								__label__ = 250;
								continue;
							} else {
								__label__ = 251;
								break $if_end680$$land_lhs_true667$281;
							}
						}
					}
				} while (0);
				var $330 = HEAP32[(($ix) >> 2)];
				var $331 = $charix_top_addr;
				HEAP32[(($331) >> 2)] = $330;
				var $332 = HEAP32[(($ix) >> 2)];
				var $333 = $n_buf_addr;
				var $sub681 = ((($333) - 20) & 4294967295);
				var $cmp682 = ((($332)) | 0) > ((($sub681)) | 0);
				if ($cmp682) {
					__label__ = 252;;
				} else {
					__label__ = 254;;
				}
				$land_lhs_true683$$lor_lhs_false689$287: do {
					if (__label__ == 252) {
						var $334 = HEAP32[(($c1) >> 2)];
						var $call684 = __Z7IsAlphaj($334);
						var $tobool685 = ((($call684)) | 0) != 0;
						if ($tobool685) {
							__label__ = 254;
							break $land_lhs_true683$$lor_lhs_false689$287;
						}
						var $335 = HEAP32[(($c1) >> 2)];
						var $call687 = _iswdigit($335);
						var $tobool688 = ((($call687)) | 0) != 0;
						if (!($tobool688)) {
							__label__ = 255;
							break $while_cond$12;
						}
					}
				} while (0);
				var $336 = HEAP32[(($ix) >> 2)];
				var $337 = $n_buf_addr;
				var $sub690 = ((($337) - 2) & 4294967295);
				var $cmp691 = ((($336)) | 0) >= ((($sub690)) | 0);
				if ($cmp691) {
					__label__ = 255;
					break $while_cond$12;
				} else {
					__label__ = 8;
					continue $while_cond$12;
				}
			}
			if (__label__ == 256) {
				var $343 = $stressed_word;
				var $tobool698 = ((($343)) | 0) != 0;
				if ($tobool698) {
					__label__ = 257;;
				} else {
					__label__ = 258;;
				}
				if (__label__ == 257) {
					var $344 = HEAP32[(($ix) >> 2)];
					var $345 = $buf_addr;
					var $arrayidx700 = (($345 + $344) & 4294967295);
					var $call701 = __Z8utf8_outjPc(1328, $arrayidx700);
					var $346 = HEAP32[(($ix) >> 2)];
					var $add702 = ((($346) + ($call701)) & 4294967295);
					HEAP32[(($ix) >> 2)] = $add702;;
				}
				var $347 = $end_clause_after_tag;
				var $tobool704 = ((($347)) | 0) != 0;
				if ($tobool704) {
					__label__ = 259;;
				} else {
					__label__ = 260;;
				}
				if (__label__ == 259) {
					var $348 = $end_clause_index;
					var $349 = $buf_addr;
					var $arrayidx706 = (($349 + $348) & 4294967295);
					__ZL10RemoveCharPc($arrayidx706);;
				}
				var $350 = HEAP32[(($ix) >> 2)];
				var $351 = $buf_addr;
				var $arrayidx708 = (($351 + $350) & 4294967295);
				HEAP8[($arrayidx708)] = 32;
				var $352 = HEAP32[(($ix) >> 2)];
				var $add709 = ((($352) + 1) & 4294967295);
				var $353 = $buf_addr;
				var $arrayidx710 = (($353 + $add709) & 4294967295);
				HEAP8[($arrayidx710)] = 0;
				$retval = 589864;;
			} else if (__label__ == 12) {
				HEAP8[(__ZL12end_of_input_b)] = 1;
				$retval = 589864;;
			} else if (__label__ == 15) {
				HEAP8[(__ZL19clear_skipping_text_b)] = 1;
				HEAP32[((_skip_characters) >> 2)] = 0;
				var $24 = HEAP32[(($c2) >> 2)];
				__ZL6UngetCi($24);
				$retval = 16384;;
			} else if (__label__ == 66) {
				var $81 = $end_clause_after_tag;
				var $tobool168 = ((($81)) | 0) != 0;
				if ($tobool168) {
					__label__ = 67;;
				} else {
					__label__ = 68;;
				}
				if (__label__ == 67) {
					var $82 = $end_clause_index;
					HEAP32[(($ix) >> 2)] = $82;;
				}
				var $83 = HEAP32[(($ix) >> 2)];
				var $84 = $buf_addr;
				var $arrayidx171 = (($84 + $83) & 4294967295);
				HEAP8[($arrayidx171)] = 32;
				var $85 = HEAP32[(($ix) >> 2)];
				var $inc172 = ((($85) + 1) & 4294967295);
				HEAP32[(($ix) >> 2)] = $inc172;
				var $86 = $buf_addr;
				var $arrayidx173 = (($86 + $85) & 4294967295);
				HEAP8[($arrayidx173)] = 0;
				var $87 = $terminator;
				var $and = ($87) & 131072;
				var $tobool174 = ((($and)) | 0) != 0;
				if ($tobool174) {
					__label__ = 69;;
				} else {
					__label__ = 70;;
				}
				if (__label__ == 69) {
					var $88 = $voice_change_addr;
					var $call176 = _strcpy($88, ((__ZL16current_voice_id) & 4294967295));;
				}
				var $89 = $terminator;
				$retval = $89;;
			} else if (__label__ == 74) {
				var $call192 = __Z11lookupwcharPKti(((__ZL11punct_chars) & 4294967295), $93);
				$punct = $call192;
				var $cmp193 = ((($call192)) | 0) == 0;
				if ($cmp193) {
					__label__ = 75;;
				} else {
					__label__ = 76;;
				}
				if (__label__ == 75) {
					var $94 = HEAP32[((_count_characters) >> 2)];
					var $95 = HEAP32[((_clause_start_char) >> 2)];
					var $sub195 = ((($94) - ($95)) & 4294967295);
					var $conv196 = ((($sub195)) & 65535);
					var $96 = HEAP32[(($ix) >> 2)];
					var $97 = $charix_addr;
					var $arrayidx197 = (($97 + 2 * $96) & 4294967295);
					HEAP16[(($arrayidx197) >> 1)] = $conv196;
					var $98 = HEAP32[(($ix) >> 2)];
					var $99 = $charix_top_addr;
					HEAP32[(($99) >> 2)] = $98;
					var $100 = HEAP32[(($c1) >> 2)];
					var $101 = HEAP32[(($ix) >> 2)];
					var $102 = $buf_addr;
					var $arrayidx198 = (($102 + $101) & 4294967295);
					var $call199 = __Z8utf8_outjPc($100, $arrayidx198);
					var $103 = HEAP32[(($ix) >> 2)];
					var $add200 = ((($103) + ($call199)) & 4294967295);
					HEAP32[(($ix) >> 2)] = $add200;
					$terminator = 524328;;
				} else if (__label__ == 76) {
					var $104 = $punct;
					var $arrayidx202 = ((__ZL16punct_attributes + $104 * 4) & 4294967295);
					var $105 = HEAP32[(($arrayidx202) >> 2)];
					$terminator = $105;;
				}
				var $106 = HEAP32[(($ix) >> 2)];
				var $107 = $buf_addr;
				var $arrayidx204 = (($107 + $106) & 4294967295);
				HEAP8[($arrayidx204)] = 32;
				var $108 = HEAP32[(($ix) >> 2)];
				var $add205 = ((($108) + 1) & 4294967295);
				var $109 = $buf_addr;
				var $arrayidx206 = (($109 + $add205) & 4294967295);
				HEAP8[($arrayidx206)] = 0;
				var $110 = $terminator;
				$retval = $110;;
			} else if (__label__ == 81) {
				var $114 = HEAP32[(($ix) >> 2)];
				var $inc215 = ((($114) + 1) & 4294967295);
				HEAP32[(($ix) >> 2)] = $inc215;
				var $115 = $buf_addr;
				var $arrayidx216 = (($115 + $114) & 4294967295);
				HEAP8[($arrayidx216)] = 0;;
				while (1) {
					var $call218 = __ZL4GetCv();
					HEAP32[(($c1) >> 2)] = $call218;
					var $call219 = _iswspace($call218);
					var $tobool220 = ((($call219)) | 0) != 0;
					if ($tobool220) {
						__label__ = 86;
						break;
					}
					var $call222 = __Z3Eofv();
					var $tobool223 = ((($call222)) | 0) != 0;
					if ($tobool223) {
						__label__ = 86;
						break;
					}
					var $116 = HEAP32[(($ix) >> 2)];
					var $117 = $n_buf_addr;
					var $sub225 = ((($117) - 1) & 4294967295);
					var $cmp226 = ((($116)) | 0) < ((($sub225)) | 0);
					if (!($cmp226)) {
						__label__ = 86;
						break;
					}
					var $118 = HEAP32[(($c1) >> 2)];
					var $conv229 = ((($118)) & 255);
					var $119 = HEAP32[(($ix) >> 2)];
					var $inc230 = ((($119) + 1) & 4294967295);
					HEAP32[(($ix) >> 2)] = $inc230;
					var $120 = $buf_addr;
					var $arrayidx231 = (($120 + $119) & 4294967295);
					HEAP8[($arrayidx231)] = $conv229;
					__label__ = 82;
					continue;
				}
				var $121 = HEAP32[(($ix) >> 2)];
				var $inc233 = ((($121) + 1) & 4294967295);
				HEAP32[(($ix) >> 2)] = $inc233;
				var $122 = $buf_addr;
				var $arrayidx234 = (($122 + $121) & 4294967295);
				HEAP8[($arrayidx234)] = 0;
				$retval = 147456;;
			} else if (__label__ == 108) {
				HEAP32[((__ZL10ungot_word) >> 2)] = ((__str42209) & 4294967295);
				var $151 = HEAP32[(($c2) >> 2)];
				__ZL6UngetCi($151);
				var $152 = $p_word;
				var $arrayidx300 = (($152) & 4294967295);
				HEAP8[($arrayidx300)] = 0;
				$retval = 524328;;
			} else if (__label__ == 138) {
				var $184 = HEAP32[(($c2) >> 2)];
				__ZL6UngetCi($184);
				var $185 = $end_clause_after_tag;
				var $tobool387 = ((($185)) | 0) != 0;
				if ($tobool387) {
					__label__ = 139;;
				} else {
					__label__ = 140;;
				}
				if (__label__ == 139) {
					var $186 = $end_clause_index;
					var $187 = $buf_addr;
					var $arrayidx389 = (($187 + $186) & 4294967295);
					__ZL10RemoveCharPc($arrayidx389);;
				}
				var $188 = HEAP32[(($ix) >> 2)];
				var $189 = $buf_addr;
				var $arrayidx391 = (($189 + $188) & 4294967295);
				HEAP8[($arrayidx391)] = 32;
				var $190 = HEAP32[(($ix) >> 2)];
				var $add392 = ((($190) + 1) & 4294967295);
				var $191 = $buf_addr;
				var $arrayidx393 = (($191 + $add392) & 4294967295);
				HEAP8[($arrayidx393)] = 0;
				var $192 = $parag;
				var $cmp394 = ((($192)) | 0) > 3;
				if ($cmp394) {
					__label__ = 141;;
				} else {
					__label__ = 142;;
				}
				if (__label__ == 141) {
					$parag = 3;;
				}
				var $193 = HEAP32[((_option_ssml) >> 2)];
				var $tobool397 = ((($193)) | 0) != 0;
				if ($tobool397) {
					__label__ = 143;;
				} else {
					__label__ = 144;;
				}
				if (__label__ == 143) {
					$parag = 1;;
				}
				var $194 = $parag;
				var $mul = ((($194) * 30) & 4294967295);
				var $add400 = ((($mul) + 524328) & 4294967295);
				$retval = $add400;;
			} else if (__label__ == 146) {
				var $197 = HEAP32[(($c2) >> 2)];
				__ZL6UngetCi($197);
				var $198 = HEAP32[(($ix) >> 2)];
				var $199 = $buf_addr;
				var $arrayidx404 = (($199 + $198) & 4294967295);
				HEAP8[($arrayidx404)] = 32;
				var $200 = HEAP32[(($ix) >> 2)];
				var $add405 = ((($200) + 1) & 4294967295);
				var $201 = $buf_addr;
				var $arrayidx406 = (($201 + $add405) & 4294967295);
				HEAP8[($arrayidx406)] = 0;
				$retval = 262174;;
			} else if (__label__ == 153) {
				var $209 = HEAP32[(($c2) >> 2)];
				__ZL6UngetCi($209);
				var $210 = HEAP32[(($c1) >> 2)];
				HEAP32[((__ZL11ungot_char2) >> 2)] = $210;
				var $211 = $end_clause_index;
				var $212 = $buf_addr;
				var $arrayidx424 = (($212 + $211) & 4294967295);
				HEAP8[($arrayidx424)] = 32;
				var $213 = $end_clause_index;
				var $add425 = ((($213) + 1) & 4294967295);
				var $214 = $buf_addr;
				var $arrayidx426 = (($214 + $add425) & 4294967295);
				HEAP8[($arrayidx426)] = 0;
				var $215 = $end_clause_after_tag;
				$retval = $215;;
			} else if (__label__ == 179) {
				var $243 = $terminator;
				$retval = $243;;
			} else if (__label__ == 227) {
				var $293 = $c_next;
				__ZL6UngetCi($293);
				var $294 = HEAP32[(($ix) >> 2)];
				var $295 = $buf_addr;
				var $arrayidx612 = (($295 + $294) & 4294967295);
				HEAP8[($arrayidx612)] = 32;
				var $296 = HEAP32[(($ix) >> 2)];
				var $add613 = ((($296) + 1) & 4294967295);
				var $297 = $buf_addr;
				var $arrayidx614 = (($297 + $add613) & 4294967295);
				HEAP8[($arrayidx614)] = 0;
				var $298 = $cprev;
				var $call615 = _iswdigit($298);
				var $tobool616 = ((($call615)) | 0) != 0;
				if ($tobool616) {
					__label__ = 228;;
				} else {
					__label__ = 230;;
				}
				$land_lhs_true617$$if_end622$335: do {
					if (__label__ == 228) {
						var $299 = $c_next;
						var $call618 = __Z7IsAlphaj($299);
						var $tobool619 = ((($call618)) | 0) != 0;
						if ($tobool619) {
							__label__ = 230;
							break $land_lhs_true617$$if_end622$335;
						}
						var $300 = $punct_data;
						var $and621 = ($300) & -4194305;
						$punct_data = $and621;;
					}
				} while (0);
				var $301 = $nl_count;
				var $cmp623 = ((($301)) | 0) > 1;
				var $302 = $punct_data;
				if ($cmp623) {
					__label__ = 231;;
				} else {
					__label__ = 234;;
				}
				if (__label__ == 231) {
					var $cmp625 = ((($302)) | 0) == 532520;
					var $303 = $punct_data;
					var $cmp627 = ((($303)) | 0) == 536621;
					var $or_cond18 = ($cmp625) | ($cmp627);
					if ($or_cond18) {
						__label__ = 232;;
					} else {
						__label__ = 233;;
					}
					if (__label__ == 232) {
						var $304 = $punct_data;
						var $add629 = ((($304) + 35) & 4294967295);
						$retval = $add629;;
					} else if (__label__ == 233) {
						$retval = 524358;;
					}
				} else if (__label__ == 234) {
					$retval = $302;;
				}
			} else if (__label__ == 255) {
				var $338 = HEAP32[(($ix) >> 2)];
				var $339 = $buf_addr;
				var $arrayidx693 = (($339 + $338) & 4294967295);
				HEAP8[($arrayidx693)] = 32;
				var $340 = HEAP32[(($ix) >> 2)];
				var $add694 = ((($340) + 1) & 4294967295);
				var $341 = $buf_addr;
				var $arrayidx695 = (($341 + $add694) & 4294967295);
				HEAP8[($arrayidx695)] = 0;
				var $342 = HEAP32[(($c2) >> 2)];
				__ZL6UngetCi($342);
				$retval = 16384;;
			}
			var $354 = $retval;
			STACKTOP = __stackBase__;
			return $354;
			return null;
		}

		function __ZL4GetCv() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 16;
			_memset(__stackBase__, 0, 16);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $c;
			var $c1;
			var $c2;
			var $cbuf = __stackBase__;
			var $ix;
			var $n_bytes;
			var $m;
			var $0 = HEAP32[((__ZL10ungot_char) >> 2)];
			$c1 = $0;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					HEAP32[((__ZL10ungot_char) >> 2)] = 0;
					var $1 = $c1;
					$retval = $1;;
				} else if (__label__ == 2) {
					var $2 = HEAP32[((__ZZL4GetCvE6ungot2) >> 2)];
					var $cmp1 = ((($2)) | 0) != 0;
					if ($cmp1) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $3 = HEAP32[((__ZZL4GetCvE6ungot2) >> 2)];
						$c1 = $3;
						HEAP32[((__ZZL4GetCvE6ungot2) >> 2)] = 0;;
					} else if (__label__ == 4) {
						var $call = __ZL8GetC_getv();
						$c1 = $call;;
					}
					var $4 = HEAP32[((_option_multibyte) >> 2)];
					var $cmp4 = ((($4)) | 0) == 3;
					var $5 = HEAP32[((_option_multibyte) >> 2)];
					var $cmp5 = ((($5)) | 0) == 4;
					var $or_cond = ($cmp4) | ($cmp5);
					if ($or_cond) {
						__label__ = 6;;
					} else {
						__label__ = 7;;
					}
					if (__label__ == 6) {
						var $6 = HEAP32[((_count_characters) >> 2)];
						var $inc = ((($6) + 1) & 4294967295);
						HEAP32[((_count_characters) >> 2)] = $inc;
						var $7 = $c1;
						$retval = $7;;
					} else if (__label__ == 7) {
						var $8 = HEAP32[((_option_multibyte) >> 2)];
						var $cmp8 = ((($8)) | 0) < 2;
						if ($cmp8) {
							__label__ = 8;;
						} else {
							__label__ = 36;;
						}
						$land_lhs_true$$if_end65thread_pre_split$12: do {
							if (__label__ == 8) {
								var $9 = $c1;
								var $and = ($9) & 128;
								var $tobool = ((($and)) | 0) != 0;
								if ($tobool) {
									__lastLabel__ = 8;;
								} else {
									__lastLabel__ = 8;
									__label__ = 37;
									break $land_lhs_true$$if_end65thread_pre_split$12;
								}
								$n_bytes = 0;
								var $10 = $c1;
								var $and10 = ($10) & 224;
								var $cmp11 = ((($and10)) | 0) == 192;
								if ($cmp11) {
									__label__ = 10;;
								} else {
									__label__ = 12;;
								}
								$land_lhs_true12$$if_else16$15: do {
									if (__label__ == 10) {
										var $11 = $c1;
										var $and13 = ($11) & 30;
										var $cmp14 = ((($and13)) | 0) != 0;
										if (!($cmp14)) {
											__label__ = 12;
											break $land_lhs_true12$$if_else16$15;
										}
										$n_bytes = 1;
										__lastLabel__ = 11;
										__label__ = 17;
										break $land_lhs_true12$$if_else16$15;
									}
								} while (0);
								$if_end29_thread$$if_else16$18: do {
									if (__label__ == 12) {
										var $12 = $c1;
										var $and17 = ($12) & 240;
										var $cmp18 = ((($and17)) | 0) == 224;
										if ($cmp18) {
											__label__ = 13;;
										} else {
											__label__ = 14;;
										}
										if (__label__ == 13) {
											$n_bytes = 2;
											__lastLabel__ = 13;
											__label__ = 17;
											break $if_end29_thread$$if_else16$18;
										} else if (__label__ == 14) {
											var $13 = $c1;
											var $and21 = ($13) & 248;
											var $cmp22 = ((($and21)) | 0) == 240;
											if ($cmp22) {
												__label__ = 15;;
											} else {
												__label__ = 18;;
											}
											$land_lhs_true23$$if_end29$23: do {
												if (__label__ == 15) {
													var $14 = $c1;
													var $and24 = ($14) & 15;
													var $cmp25 = ((($and24)) | 0) <= 4;
													if (!($cmp25)) {
														__label__ = 18;
														break $land_lhs_true23$$if_end29$23;
													}
													$n_bytes = 3;
													__lastLabel__ = 16;
													__label__ = 17;
													break $if_end29_thread$$if_else16$18;
												}
											} while (0);
											var $_pr = $n_bytes;
											$ix = $_pr;
											var $cmp30 = ((($_pr)) | 0) > 0;
											if ($cmp30) {
												__label__ = 19;
												break $if_end29_thread$$if_else16$18;
											} else {
												__label__ = 33;
												break $if_end29_thread$$if_else16$18;
											}
										}
									}
								} while (0);
								$if_end29_thread$$if_then31$$if_end58$27: do {
									if (__label__ == 17) {
										var $_ph = __lastLabel__ == 13 ? 2 : (__lastLabel__ == 16 ? 3 : (1));
										$ix = $_ph;
										__label__ = 19;
										break $if_end29_thread$$if_then31$$if_end58$27;
									}
								} while (0);
								$if_then31$$if_end58$29: do {
									if (__label__ == 19) {
										var $15 = $c1;
										var $16 = $ix;
										var $arrayidx = ((__ZZ8utf8_in2PiPKciE4mask + $16) & 4294967295);
										var $17 = HEAPU8[($arrayidx)];
										var $conv = ((($17)) & 255);
										var $and32 = ($conv) & ($15);
										$c = $and32;
										var $18 = $ix;
										var $arrayidx33 = ((__ZZL4GetCvE5mask2 + $18) & 4294967295);
										var $19 = HEAP8[($arrayidx33)];
										$m = $19;
										__lastLabel__ = 19;;
										$while_cond$31: while (1) {
											var $20 = __lastLabel__ == 30 ? $dec : ($18);
											var $cmp34 = ((($20)) | 0) > 0;
											if (!($cmp34)) {
												__label__ = 31;
												break $while_cond$31;
											}
											var $call35 = __ZL8GetC_getv();
											var $21 = $ix;
											var $arrayidx36 = (($cbuf + $21 * 4) & 4294967295);
											HEAP32[(($arrayidx36) >> 2)] = $call35;
											$c2 = $call35;
											var $cmp37 = ((($call35)) | 0) == 0;
											if ($cmp37) {
												__label__ = 22;
												break $while_cond$31;
											}
											var $23 = $c2;
											var $and43 = ($23) & 192;
											var $cmp44 = ((($and43)) | 0) != 128;
											if ($cmp44) {
												__label__ = 26;
												break $while_cond$31;
											}
											$m = -128;
											var $28 = $c;
											var $shl = ((($28) * 64) & 4294967295);
											var $29 = $c2;
											var $and53 = ($29) & 63;
											var $add = ((($and53) + ($shl)) & 4294967295);
											$c = $add;
											var $30 = $ix;
											var $dec = ((($30) - 1) & 4294967295);
											$ix = $dec;
											__lastLabel__ = 30;
											__label__ = 20;
											continue $while_cond$31;
										}
										if (__label__ == 22) {
											var $22 = HEAP32[((_option_multibyte) >> 2)];
											var $cmp39 = ((($22)) | 0) == 0;
											if ($cmp39) {
												__label__ = 23;;
											} else {
												__label__ = 24;;
											}
											if (__label__ == 23) {
												HEAP32[((_option_multibyte) >> 2)] = 2;;
											}
											__ZL10GetC_ungeti(32);;
										} else if (__label__ == 26) {
											var $24 = $n_bytes;
											var $cmp46 = ((($24)) | 0) == 2;
											if ($cmp46) {
												__label__ = 27;;
											} else {
												__label__ = 29;;
											}
											$land_lhs_true47$$if_end51$42: do {
												if (__label__ == 27) {
													var $25 = $ix;
													var $cmp48 = ((($25)) | 0) == 1;
													if (!($cmp48)) {
														__label__ = 29;
														break $land_lhs_true47$$if_end51$42;
													}
													var $arrayidx50 = (($cbuf + 8) & 4294967295);
													var $26 = HEAP32[(($arrayidx50) >> 2)];
													HEAP32[((__ZZL4GetCvE6ungot2) >> 2)] = $26;;
												}
											} while (0);
											var $27 = $c2;
											__ZL10GetC_ungeti($27);;
										}
										var $31 = $ix;
										var $cmp54 = ((($31)) | 0) == 0;
										if (!($cmp54)) {
											__label__ = 33;
											break $if_then31$$if_end58$29;
										}
										var $32 = HEAP32[((_count_characters) >> 2)];
										var $inc56 = ((($32) + 1) & 4294967295);
										HEAP32[((_count_characters) >> 2)] = $inc56;
										var $33 = $c;
										$retval = $33;
										__label__ = 40;
										break $if_then$$if_end$2;
									}
								} while (0);
								var $34 = HEAP32[((_option_multibyte) >> 2)];
								var $cmp59 = ((($34)) | 0) == 0;
								if (!($cmp59)) {
									__label__ = 36;
									break $land_lhs_true$$if_end65thread_pre_split$12;
								}
								var $call61 = __Z3Eofv();
								var $tobool62 = ((($call61)) | 0) != 0;
								if ($tobool62) {
									__label__ = 36;
									break $land_lhs_true$$if_end65thread_pre_split$12;
								}
								HEAP32[((_option_multibyte) >> 2)] = 2;
								__label__ = 36;
								break $land_lhs_true$$if_end65thread_pre_split$12;
							}
						} while (0);
						if (__label__ == 36) {
							var $_pr2 = $c1;
							__lastLabel__ = 36;;
						}
						var $35 = __lastLabel__ == 36 ? $_pr2 : ($9);
						var $36 = HEAP32[((_count_characters) >> 2)];
						var $inc66 = ((($36) + 1) & 4294967295);
						HEAP32[((_count_characters) >> 2)] = $inc66;
						var $cmp67 = ((($35)) | 0) >= 160;
						var $37 = $c1;
						if ($cmp67) {
							__label__ = 38;;
						} else {
							__label__ = 39;;
						}
						if (__label__ == 38) {
							var $sub = ((($37) - 160) & 4294967295);
							var $38 = HEAP32[((_translator) >> 2)];
							var $charset_a0 = (($38 + 696) & 4294967295);
							var $39 = HEAP32[(($charset_a0) >> 2)];
							var $arrayidx69 = (($39 + 2 * $sub) & 4294967295);
							var $40 = HEAPU16[(($arrayidx69) >> 1)];
							var $conv70 = ((($40)) & 65535);
							$retval = $conv70;;
						} else if (__label__ == 39) {
							$retval = $37;;
						}
					}
				}
			} while (0);
			var $41 = $retval;
			STACKTOP = __stackBase__;
			return $41;
			return null;
		}

		function __ZL6UngetCi($c) {;
			var __label__;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			HEAP32[((__ZL10ungot_char) >> 2)] = $0;;
			return;
			return;
		}

		function __ZL14ProcessSsmlTagPwPcRiii($xml_buf, $outbuf, $outix, $n_outbuf, $self_closing) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 376;
			_memset(__stackBase__, 0, 376);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $xml_buf_addr;
			var $outbuf_addr;
			var $outix_addr;
			var $n_outbuf_addr;
			var $self_closing_addr;
			var $ix;
			var $index;
			var $c;
			var $tag_type;
			var $value;
			var $value2;
			var $value3;
			var $voice_change_flag;
			var $px;
			var $attr1;
			var $attr2;
			var $attr3;
			var $terminator;
			var $uri;
			var $param_type;
			var $tag_name = __stackBase__;
			var $buf = __stackBase__ + 40;
			var $sp;
			var $ssml_sp;
			var $fname = __stackBase__ + 120;
			$xml_buf_addr = $xml_buf;
			$outbuf_addr = $outbuf;
			$outix_addr = $outix;
			$n_outbuf_addr = $n_outbuf;
			$self_closing_addr = $self_closing;
			$ix = 0;
			__lastLabel__ = 0;;
			$for_cond$2: while (1) {
				var $0 = __lastLabel__ == 4 ? $inc : (0);
				var $cmp = ((($0)) >>> 0) < 39;
				if (!($cmp)) {
					__label__ = 5;
					break $for_cond$2;
				}
				var $1 = $ix;
				var $2 = $xml_buf_addr;
				var $arrayidx = (($2 + 4 * $1) & 4294967295);
				var $3 = HEAP32[(($arrayidx) >> 2)];
				$c = $3;
				var $cmp1 = ((($3)) | 0) == 0;
				if ($cmp1) {
					__label__ = 5;
					break $for_cond$2;
				}
				var $4 = $c;
				var $call = _iswspace($4);
				var $tobool = ((($call)) | 0) != 0;
				if ($tobool) {
					__label__ = 5;
					break $for_cond$2;
				}
				var $5 = $c;
				var $conv = ((($5)) & 255);
				var $conv2 = (tempInt = (($conv)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $call3 = _tolower($conv2);
				var $conv4 = ((($call3)) & 255);
				var $6 = $ix;
				var $arrayidx5 = (($tag_name + $6) & 4294967295);
				HEAP8[($arrayidx5)] = $conv4;
				var $7 = $ix;
				var $inc = ((($7) + 1) & 4294967295);
				$ix = $inc;
				__lastLabel__ = 4;
				__label__ = 1;
				continue $for_cond$2;
			}
			var $8 = $ix;
			var $arrayidx6 = (($tag_name + $8) & 4294967295);
			HEAP8[($arrayidx6)] = 0;
			var $9 = $ix;
			var $10 = $xml_buf_addr;
			var $arrayidx7 = (($10 + 4 * $9) & 4294967295);
			$px = $arrayidx7;
			var $arrayidx8 = (($tag_name) & 4294967295);
			var $11 = HEAP8[($arrayidx8)];
			var $conv9 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp10 = ((($conv9)) | 0) == 47;
			if ($cmp10) {
				__label__ = 6;;
			} else {
				__label__ = 9;;
			}
			$if_then11$$if_else$8: do {
				if (__label__ == 6) {
					var $arrayidx12 = (($tag_name + 1) & 4294967295);
					var $call13 = __Z10LookupMnemP8MNEM_TABPKc(((__ZL8ssmltags) & 4294967295), $arrayidx12);
					$tag_type = $call13;
					var $cmp14 = ((($call13)) | 0) != 16;
					if ($cmp14) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						var $12 = $outix_addr;
						var $13 = HEAP32[(($12) >> 2)];
						var $inc16 = ((($13) + 1) & 4294967295);
						HEAP32[(($12) >> 2)] = $inc16;
						var $14 = $outbuf_addr;
						var $arrayidx17 = (($14 + $13) & 4294967295);
						HEAP8[($arrayidx17)] = 32;;
					}
					var $15 = $tag_type;
					var $add = ((($15) + 32) & 4294967295);
					$tag_type = $add;
					__lastLabel__ = 8;
					__label__ = 14;
					break $if_then11$$if_else$8;
				} else if (__label__ == 9) {
					var $arraydecay = (($tag_name) & 4294967295);
					var $call19 = __Z10LookupMnemP8MNEM_TABPKc(((__ZL8ssmltags) & 4294967295), $arraydecay);
					$tag_type = $call19;
					var $cmp20 = ((($call19)) | 0) != 16;
					if ($cmp20) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					if (__label__ == 10) {
						var $16 = $outix_addr;
						var $17 = HEAP32[(($16) >> 2)];
						var $inc22 = ((($17) + 1) & 4294967295);
						HEAP32[(($16) >> 2)] = $inc22;
						var $18 = $outbuf_addr;
						var $arrayidx23 = (($18 + $17) & 4294967295);
						HEAP8[($arrayidx23)] = 32;;
					}
					var $19 = $self_closing_addr;
					var $tobool25 = ((($19)) | 0) != 0;
					var $20 = $tag_type;
					if ($tobool25) {
						__lastLabel__ = 11;;
					} else {
						__lastLabel__ = 11;
						__label__ = 14;
						break $if_then11$$if_else$8;
					}
					var $arrayidx26 = ((__ZL22ignore_if_self_closing + $20) & 4294967295);
					var $21 = HEAP8[($arrayidx26)];
					var $tobool27 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
					if ($tobool27) {
						__lastLabel__ = 12;;
					} else {
						__lastLabel__ = 12;
						__label__ = 14;
						break $if_then11$$if_else$8;
					}
					$retval = 0;
					__label__ = 113;
					break $if_then11$$if_else$8;
				}
			} while (0);
			$if_end30$$return$19: do {
				if (__label__ == 14) {
					var $22 = __lastLabel__ == 12 ? $20 : (__lastLabel__ == 8 ? $add : ($20));
					$voice_change_flag = 0;
					$terminator = 16384;
					var $23 = HEAPU32[((__ZL12n_ssml_stack) >> 2)];
					var $sub = ((($23) - 1) & 4294967295);
					var $arrayidx31 = ((__ZL10ssml_stack + $sub * 76) & 4294967295);
					$ssml_sp = $arrayidx31;
					if ($22 == 10) {
						__lastLabel__ = 14;
						__label__ = 15;;
					} else if ($22 == 3) {
						__lastLabel__ = 14;
						__label__ = 20;;
					} else if ($22 == 12) {
						__lastLabel__ = 14;
						__label__ = 25;;
					} else if ($22 == 42) {
						__lastLabel__ = 14;
						__label__ = 31;;
					} else if ($22 == 35) {
						__lastLabel__ = 14;
						__label__ = 31;;
					} else if ($22 == 44) {
						__lastLabel__ = 14;
						__label__ = 31;;
					} else if ($22 == 4) {
						__lastLabel__ = 14;
						__label__ = 32;;
					} else if ($22 == 36) {
						__lastLabel__ = 14;
						__label__ = 39;;
					} else if ($22 == 9) {
						__lastLabel__ = 14;
						__label__ = 42;;
					} else if ($22 == 14) {
						__lastLabel__ = 14;
						__label__ = 44;;
					} else if ($22 == 41) {
						__lastLabel__ = 14;
						__label__ = 45;;
					} else if ($22 == 46) {
						__lastLabel__ = 14;
						__label__ = 45;;
					} else if ($22 == 5) {
						__lastLabel__ = 14;
						__label__ = 46;;
					} else if ($22 == 11) {
						__lastLabel__ = 14;
						__label__ = 51;;
					} else if ($22 == 43) {
						__lastLabel__ = 14;
						__label__ = 66;;
					} else if ($22 == 13) {
						__lastLabel__ = 14;
						__label__ = 67;;
					} else if ($22 == 1) {
						__lastLabel__ = 14;
						__label__ = 79;;
					} else if ($22 == 2) {
						__lastLabel__ = 14;
						__label__ = 85;;
					} else if ($22 == 33) {
						__lastLabel__ = 14;
						__label__ = 88;;
					} else if ($22 == 34) {
						__lastLabel__ = 14;
						__label__ = 92;;
					} else if ($22 == 15) {
						__lastLabel__ = 14;
						__label__ = 96;;
					} else if ($22 == 47) {
						__lastLabel__ = 14;
						__label__ = 96;;
					} else if ($22 == 6) {
						__lastLabel__ = 14;
						__label__ = 97;;
					} else if ($22 == 7) {
						__lastLabel__ = 14;
						__label__ = 100;;
					} else if ($22 == 38) {
						__lastLabel__ = 14;
						__label__ = 105;;
					} else if ($22 == 39) {
						__lastLabel__ = 14;
						__label__ = 108;;
					} else {
						__lastLabel__ = 14;
						__label__ = 112;;
					}
					$sw_epilog$$sw_bb$$sw_bb49$$sw_bb62$$sw_bb83$$sw_bb84$$sw_bb110$$sw_bb120$$sw_bb129$$sw_bb130$$sw_bb131$$sw_bb156$$sw_bb220$$sw_bb221$$sw_bb249$$sw_bb266$$while_cond$$while_cond280$$sw_bb293$$sw_bb294$$sw_bb302$$sw_bb317$$sw_bb324$21: do {
						if (__label__ == 15) {
							var $24 = $tag_type;
							var $call32 = __ZL14PushParamStacki($24);
							$sp = $call32;
							var $25 = $px;
							var $call33 = __ZL16GetSsmlAttributePwPKc($25, ((__str83250) & 4294967295));
							$attr1 = $call33;
							var $26 = $px;
							var $call34 = __ZL16GetSsmlAttributePwPKc($26, ((__str84251) & 4294967295));
							$attr2 = $call34;
							var $27 = $attr1;
							var $call35 = __ZL7attrcmpPKwPKc($27, ((__str85252) & 4294967295));
							var $cmp36 = ((($call35)) | 0) == 0;
							if ($cmp36) {
								__label__ = 16;;
							} else {
								__label__ = 17;;
							}
							$if_then37$$if_else40$23: do {
								if (__label__ == 16) {
									var $28 = $attr2;
									var $call38 = __ZL10attrlookupPKwPK8MNEM_TAB($28, ((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_punct) & 4294967295));
									$value = $call38;
									var $29 = $value;
									var $30 = $sp;
									var $parameter = (($30 + 4) & 4294967295);
									var $arrayidx39 = (($parameter + 20) & 4294967295);
									HEAP32[(($arrayidx39) >> 2)] = $29;;
								} else if (__label__ == 17) {
									var $31 = $attr1;
									var $call41 = __ZL7attrcmpPKwPKc($31, ((__str86253) & 4294967295));
									var $cmp42 = ((($call41)) | 0) == 0;
									if (!($cmp42)) {
										__label__ = 19;
										break $if_then37$$if_else40$23;
									}
									var $32 = $attr2;
									var $call44 = __ZL10attrlookupPKwPK8MNEM_TAB($32, ((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals) & 4294967295));
									$value = $call44;
									var $33 = $value;
									var $34 = $sp;
									var $parameter45 = (($34 + 4) & 4294967295);
									var $arrayidx46 = (($parameter45 + 24) & 4294967295);
									HEAP32[(($arrayidx46) >> 2)] = $33;;
								}
							} while (0);
							var $35 = $outbuf_addr;
							var $36 = $outix_addr;
							__ZL17ProcessParamStackPcRi($35, $36);;
						} else if (__label__ == 20) {
							var $37 = $tag_type;
							var $call50 = __ZL14PushParamStacki($37);
							$sp = $call50;
							$param_type = 1;;
							while (1) {
								var $38 = $px;
								var $39 = $param_type;
								var $arrayidx54 = ((__ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr + $39 * 4) & 4294967295);
								var $40 = HEAP32[(($arrayidx54) >> 2)];
								var $call55 = __ZL16GetSsmlAttributePwPKc($38, $40);
								$attr1 = $call55;
								var $cmp56 = ((($call55)) | 0) != 0;
								if ($cmp56) {
									__label__ = 22;;
								} else {
									__label__ = 23;;
								}
								if (__label__ == 22) {
									var $41 = $param_type;
									var $42 = $attr1;
									var $43 = $sp;
									__ZL19SetProsodyParameteriPwP11PARAM_STACK($41, $42, $43);;
								}
								var $44 = $param_type;
								var $inc60 = ((($44) + 1) & 4294967295);
								$param_type = $inc60;
								var $cmp52 = ((($inc60)) | 0) <= 4;
								if ($cmp52) {
									__label__ = 21;
									continue;
								} else {
									__label__ = 24;
									break;
								}
							}
							var $45 = $outbuf_addr;
							var $46 = $outix_addr;
							__ZL17ProcessParamStackPcRi($45, $46);;
						} else if (__label__ == 25) {
							var $47 = $tag_type;
							var $call63 = __ZL14PushParamStacki($47);
							$sp = $call63;
							$value = 3;
							var $48 = $px;
							var $call64 = __ZL16GetSsmlAttributePwPKc($48, ((__str87254) & 4294967295));
							$attr1 = $call64;
							var $cmp65 = ((($call64)) | 0) != 0;
							if ($cmp65) {
								__label__ = 26;;
							} else {
								__label__ = 27;;
							}
							if (__label__ == 26) {
								var $49 = $attr1;
								var $call67 = __ZL10attrlookupPKwPK8MNEM_TAB($49, ((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis) & 4294967295));
								$value = $call67;;
							}
							var $50 = HEAP32[((_translator) >> 2)];
							var $langopts = (($50) & 4294967295);
							var $tone_language = (($langopts + 224) & 4294967295);
							var $51 = HEAP32[(($tone_language) >> 2)];
							var $cmp69 = ((($51)) | 0) == 1;
							var $52 = $value;
							if ($cmp69) {
								__label__ = 28;;
							} else {
								__label__ = 29;;
							}
							if (__label__ == 28) {
								var $arrayidx71 = ((__ZZL14ProcessSsmlTagPwPcRiiiE23emphasis_to_pitch_range + $52) & 4294967295);
								var $53 = HEAPU8[($arrayidx71)];
								var $conv72 = ((($53)) & 255);
								var $54 = $sp;
								var $parameter73 = (($54 + 4) & 4294967295);
								var $arrayidx74 = (($parameter73 + 16) & 4294967295);
								HEAP32[(($arrayidx74) >> 2)] = $conv72;
								var $55 = $value;
								var $arrayidx75 = ((__ZZL14ProcessSsmlTagPwPcRiiiE18emphasis_to_volume + $55) & 4294967295);
								var $56 = HEAPU8[($arrayidx75)];
								var $conv76 = ((($56)) & 255);
								var $57 = $sp;
								var $parameter77 = (($57 + 4) & 4294967295);
								var $arrayidx78 = (($parameter77 + 8) & 4294967295);
								HEAP32[(($arrayidx78) >> 2)] = $conv76;;
							} else if (__label__ == 29) {
								var $58 = $sp;
								var $parameter80 = (($58 + 4) & 4294967295);
								var $arrayidx81 = (($parameter80 + 48) & 4294967295);
								HEAP32[(($arrayidx81) >> 2)] = $52;;
							}
							var $59 = $outbuf_addr;
							var $60 = $outix_addr;
							__ZL17ProcessParamStackPcRi($59, $60);;
						} else if (__label__ == 31) {
							var $61 = $tag_type;
							var $62 = $outbuf_addr;
							var $63 = $outix_addr;
							__ZL13PopParamStackiPcRi($61, $62, $63);;
						} else if (__label__ == 32) {
							var $64 = $px;
							var $call85 = __ZL16GetSsmlAttributePwPKc($64, ((__str88255) & 4294967295));
							$attr1 = $call85;
							var $65 = $px;
							var $call86 = __ZL16GetSsmlAttributePwPKc($65, ((__str89256) & 4294967295));
							$attr2 = $call86;
							var $66 = $px;
							var $call87 = __ZL16GetSsmlAttributePwPKc($66, ((__str90257) & 4294967295));
							$attr3 = $call87;
							var $67 = $attr1;
							var $call88 = __ZL10attrlookupPKwPK8MNEM_TAB($67, ((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as) & 4294967295));
							$value = $call88;
							var $68 = $attr2;
							var $call89 = __ZL10attrlookupPKwPK8MNEM_TAB($68, ((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_sayas_format) & 4294967295));
							$value2 = $call89;
							var $69 = $value2;
							var $cmp90 = ((($69)) | 0) == 1;
							if ($cmp90) {
								__label__ = 33;;
							} else {
								__label__ = 34;;
							}
							if (__label__ == 33) {
								$value = 19;;
							}
							var $70 = $attr3;
							var $call93 = __ZL10attrnumberPKwii($70, 0, 0);
							$value3 = $call93;
							var $71 = $value;
							var $cmp94 = ((($71)) | 0) == 64;
							if ($cmp94) {
								__label__ = 35;;
							} else {
								__label__ = 38;;
							}
							if (__label__ == 35) {
								var $72 = $value3;
								var $cmp96 = ((($72)) | 0) <= 1;
								if ($cmp96) {
									__label__ = 36;;
								} else {
									__label__ = 37;;
								}
								if (__label__ == 36) {
									$value = 193;;
								} else if (__label__ == 37) {
									var $73 = $value3;
									var $add99 = ((($73) + 64) & 4294967295);
									$value = $add99;;
								}
							}
							var $arraydecay102 = (($buf) & 4294967295);
							var $74 = $value;
							var $call103 = _sprintf($arraydecay102, ((__str91258) & 4294967295), allocate([1, 0, 0, 0, $74, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
							var $75 = $outix_addr;
							var $76 = HEAP32[(($75) >> 2)];
							var $77 = $outbuf_addr;
							var $arrayidx104 = (($77 + $76) & 4294967295);
							var $arraydecay105 = (($buf) & 4294967295);
							var $call106 = _strcpy($arrayidx104, $arraydecay105);
							var $arraydecay107 = (($buf) & 4294967295);
							var $call108 = _strlen($arraydecay107);
							var $78 = $outix_addr;
							var $79 = HEAP32[(($78) >> 2)];
							var $add109 = ((($79) + ($call108)) & 4294967295);
							HEAP32[(($78) >> 2)] = $add109;
							var $80 = $outix_addr;
							var $81 = HEAP32[(($80) >> 2)];
							HEAP32[((__ZL11sayas_start) >> 2)] = $81;
							var $82 = $value;
							HEAP32[((__ZL10sayas_mode) >> 2)] = $82;;
						} else if (__label__ == 39) {
							var $83 = HEAP32[((__ZL10sayas_mode) >> 2)];
							var $cmp111 = ((($83)) | 0) == 36;
							if ($cmp111) {
								__label__ = 40;;
							} else {
								__label__ = 41;;
							}
							if (__label__ == 40) {
								var $84 = $outix_addr;
								var $85 = HEAP32[(($84) >> 2)];
								var $86 = $outbuf_addr;
								var $arrayidx113 = (($86 + $85) & 4294967295);
								HEAP8[($arrayidx113)] = 0;
								var $87 = $outbuf_addr;
								var $88 = HEAP32[((__ZL11sayas_start) >> 2)];
								var $89 = $outix_addr;
								__ZL14ReplaceKeyNamePciRi($87, $88, $89);;
							}
							var $90 = $outix_addr;
							var $91 = HEAP32[(($90) >> 2)];
							var $inc116 = ((($91) + 1) & 4294967295);
							HEAP32[(($90) >> 2)] = $inc116;
							var $92 = $outbuf_addr;
							var $arrayidx117 = (($92 + $91) & 4294967295);
							HEAP8[($arrayidx117)] = 1;
							var $93 = $outix_addr;
							var $94 = HEAP32[(($93) >> 2)];
							var $inc118 = ((($94) + 1) & 4294967295);
							HEAP32[(($93) >> 2)] = $inc118;
							var $95 = $outbuf_addr;
							var $arrayidx119 = (($95 + $94) & 4294967295);
							HEAP8[($arrayidx119)] = 89;
							HEAP32[((__ZL10sayas_mode) >> 2)] = 0;;
						} else if (__label__ == 42) {
							var $96 = $px;
							var $call121 = __ZL16GetSsmlAttributePwPKc($96, ((__str92259) & 4294967295));
							$attr1 = $call121;
							var $cmp122 = ((($call121)) | 0) != 0;
							if (!($cmp122)) {
								__label__ = 112;
								break $sw_epilog$$sw_bb$$sw_bb49$$sw_bb62$$sw_bb83$$sw_bb84$$sw_bb110$$sw_bb120$$sw_bb129$$sw_bb130$$sw_bb131$$sw_bb156$$sw_bb220$$sw_bb221$$sw_bb249$$sw_bb266$$while_cond$$while_cond280$$sw_bb293$$sw_bb294$$sw_bb302$$sw_bb317$$sw_bb324$21;
							}
							HEAP8[(__ZL11ignore_text_b)] = 1;
							var $97 = $outix_addr;
							var $98 = HEAP32[(($97) >> 2)];
							var $99 = $outbuf_addr;
							var $arrayidx124 = (($99 + $98) & 4294967295);
							var $100 = $attr1;
							var $101 = $n_outbuf_addr;
							var $102 = $outix_addr;
							var $103 = HEAP32[(($102) >> 2)];
							var $sub125 = ((($101) - ($103)) & 4294967295);
							var $call126 = __ZL13attrcopy_utf8PcPKwi($arrayidx124, $100, $sub125);
							var $104 = $outix_addr;
							var $105 = HEAP32[(($104) >> 2)];
							var $add127 = ((($105) + ($call126)) & 4294967295);
							HEAP32[(($104) >> 2)] = $add127;;
						} else if (__label__ == 44) {
							HEAP8[(__ZL11ignore_text_b)] = 1;;
						} else if (__label__ == 45) {
							HEAP8[(__ZL11ignore_text_b)] = 0;;
						} else if (__label__ == 46) {
							var $106 = $px;
							var $call132 = __ZL16GetSsmlAttributePwPKc($106, ((__str5655) & 4294967295));
							$attr1 = $call132;
							var $cmp133 = ((($call132)) | 0) != 0;
							if (!($cmp133)) {
								__label__ = 112;
								break $sw_epilog$$sw_bb$$sw_bb49$$sw_bb62$$sw_bb83$$sw_bb84$$sw_bb110$$sw_bb120$$sw_bb129$$sw_bb130$$sw_bb131$$sw_bb156$$sw_bb220$$sw_bb221$$sw_bb249$$sw_bb266$$while_cond$$while_cond280$$sw_bb293$$sw_bb294$$sw_bb302$$sw_bb317$$sw_bb324$21;
							}
							var $arraydecay135 = (($buf) & 4294967295);
							var $107 = $attr1;
							var $call136 = __ZL13attrcopy_utf8PcPKwi($arraydecay135, $107, 80);
							var $arraydecay137 = (($buf) & 4294967295);
							var $call138 = _strcmp(((_skip_marker) & 4294967295), $arraydecay137);
							var $cmp139 = ((($call138)) | 0) == 0;
							if ($cmp139) {
								__label__ = 48;;
							} else {
								__label__ = 49;;
							}
							if (__label__ == 48) {
								HEAP8[(__ZL19clear_skipping_text_b)] = 1;
								HEAP8[(((_skip_marker) & 4294967295))] = 0;
								$retval = 16384;
								__label__ = 113;
								break $if_end30$$return$19;
							} else if (__label__ == 49) {
								var $arraydecay142 = (($buf) & 4294967295);
								var $call143 = __Z11AddNameDataPKci($arraydecay142, 0);
								$index = $call143;
								var $cmp144 = ((($call143)) | 0) >= 0;
								if (!($cmp144)) {
									__label__ = 112;
									break $sw_epilog$$sw_bb$$sw_bb49$$sw_bb62$$sw_bb83$$sw_bb84$$sw_bb110$$sw_bb120$$sw_bb129$$sw_bb130$$sw_bb131$$sw_bb156$$sw_bb220$$sw_bb221$$sw_bb249$$sw_bb266$$while_cond$$while_cond280$$sw_bb293$$sw_bb294$$sw_bb302$$sw_bb317$$sw_bb324$21;
								}
								var $arraydecay146 = (($buf) & 4294967295);
								var $108 = $index;
								var $call147 = _sprintf($arraydecay146, ((__str94261) & 4294967295), allocate([1, 0, 0, 0, $108, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
								var $109 = $outix_addr;
								var $110 = HEAP32[(($109) >> 2)];
								var $111 = $outbuf_addr;
								var $arrayidx148 = (($111 + $110) & 4294967295);
								var $arraydecay149 = (($buf) & 4294967295);
								var $call150 = _strcpy($arrayidx148, $arraydecay149);
								var $arraydecay151 = (($buf) & 4294967295);
								var $call152 = _strlen($arraydecay151);
								var $112 = $outix_addr;
								var $113 = HEAP32[(($112) >> 2)];
								var $add153 = ((($113) + ($call152)) & 4294967295);
								HEAP32[(($112) >> 2)] = $add153;;
							}
						} else if (__label__ == 51) {
							var $114 = $tag_type;
							var $call157 = __ZL14PushParamStacki($114);
							$sp = $call157;
							var $115 = $px;
							var $call158 = __ZL16GetSsmlAttributePwPKc($115, ((__str95262) & 4294967295));
							$attr1 = $call158;
							var $cmp159 = ((($call158)) | 0) != 0;
							if ($cmp159) {
								__label__ = 52;;
							} else {
								__label__ = 62;;
							}
							$if_then160$$if_end215$69: do {
								if (__label__ == 52) {
									var $arraydecay161 = (($buf) & 4294967295);
									var $116 = $attr1;
									var $call162 = __ZL13attrcopy_utf8PcPKwi($arraydecay161, $116, 80);
									var $117 = HEAP32[((_uri_callback) >> 2)];
									var $cmp163 = ((($117)) | 0) == 0;
									if ($cmp163) {
										__label__ = 53;;
									} else {
										__label__ = 59;;
									}
									if (__label__ == 53) {
										var $118 = HEAP32[((__ZL7xmlbase) >> 2)];
										var $cmp165 = ((($118)) | 0) != 0;
										if ($cmp165) {
											__label__ = 54;;
										} else {
											__label__ = 56;;
										}
										$land_lhs_true166$$if_else176$73: do {
											if (__label__ == 54) {
												var $arrayidx167 = (($buf) & 4294967295);
												var $119 = HEAP8[($arrayidx167)];
												var $conv168 = (tempInt = (($119)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp169 = ((($conv168)) | 0) != 47;
												if (!($cmp169)) {
													__label__ = 56;
													break $land_lhs_true166$$if_else176$73;
												}
												var $arraydecay171 = (($fname) & 4294967295);
												var $120 = HEAP32[((__ZL7xmlbase) >> 2)];
												var $arraydecay172 = (($buf) & 4294967295);
												var $call173 = _sprintf($arraydecay171, ((__str96263) & 4294967295), allocate([$120, 0, 0, 0, $arraydecay172, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
												var $arraydecay174 = (($fname) & 4294967295);
												var $call175 = __ZL14LoadSoundFile2PKc($arraydecay174);
												$index = $call175;
												__lastLabel__ = 55;
												__label__ = 57;
												break $land_lhs_true166$$if_else176$73;
											}
										} while (0);
										if (__label__ == 56) {
											var $arraydecay177 = (($buf) & 4294967295);
											var $call178 = __ZL14LoadSoundFile2PKc($arraydecay177);
											$index = $call178;
											__lastLabel__ = 56;;
										}
										var $121 = __lastLabel__ == 56 ? $call178 : ($call175);
										var $cmp180 = ((($121)) | 0) >= 0;
										if (!($cmp180)) {
											__label__ = 62;
											break $if_then160$$if_end215$69;
										}
										var $arraydecay182 = (($buf) & 4294967295);
										var $122 = $index;
										var $call183 = _sprintf($arraydecay182, ((__str97264) & 4294967295), allocate([1, 0, 0, 0, $122, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $123 = $outix_addr;
										var $124 = HEAP32[(($123) >> 2)];
										var $125 = $outbuf_addr;
										var $arrayidx184 = (($125 + $124) & 4294967295);
										var $arraydecay185 = (($buf) & 4294967295);
										var $call186 = _strcpy($arrayidx184, $arraydecay185);
										var $arraydecay187 = (($buf) & 4294967295);
										var $call188 = _strlen($arraydecay187);
										var $126 = $outix_addr;
										var $127 = HEAP32[(($126) >> 2)];
										var $add189 = ((($127) + ($call188)) & 4294967295);
										HEAP32[(($126) >> 2)] = $add189;
										var $128 = $sp;
										var $parameter190 = (($128 + 4) & 4294967295);
										var $arrayidx191 = (($parameter190) & 4294967295);
										HEAP32[(($arrayidx191) >> 2)] = 1;;
									} else if (__label__ == 59) {
										var $arraydecay194 = (($buf) & 4294967295);
										var $call195 = __Z11AddNameDataPKci($arraydecay194, 0);
										$index = $call195;
										var $cmp196 = ((($call195)) | 0) >= 0;
										if (!($cmp196)) {
											__label__ = 62;
											break $if_then160$$if_end215$69;
										}
										var $129 = $index;
										var $130 = HEAP32[((_namedata) >> 2)];
										var $arrayidx198 = (($130 + $129) & 4294967295);
										$uri = $arrayidx198;
										var $131 = HEAP32[((_uri_callback) >> 2)];
										var $132 = $uri;
										var $133 = HEAP32[((__ZL7xmlbase) >> 2)];
										var $call199 = FUNCTION_TABLE[$131](1, $132, $133);
										var $cmp200 = ((($call199)) | 0) == 0;
										if (!($cmp200)) {
											__label__ = 62;
											break $if_then160$$if_end215$69;
										}
										var $arraydecay202 = (($buf) & 4294967295);
										var $134 = $index;
										var $call203 = _sprintf($arraydecay202, ((__str98265) & 4294967295), allocate([1, 0, 0, 0, $134, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $135 = $outix_addr;
										var $136 = HEAP32[(($135) >> 2)];
										var $137 = $outbuf_addr;
										var $arrayidx204 = (($137 + $136) & 4294967295);
										var $arraydecay205 = (($buf) & 4294967295);
										var $call206 = _strcpy($arrayidx204, $arraydecay205);
										var $arraydecay207 = (($buf) & 4294967295);
										var $call208 = _strlen($arraydecay207);
										var $138 = $outix_addr;
										var $139 = HEAP32[(($138) >> 2)];
										var $add209 = ((($139) + ($call208)) & 4294967295);
										HEAP32[(($138) >> 2)] = $add209;
										var $140 = $sp;
										var $parameter210 = (($140 + 4) & 4294967295);
										var $arrayidx211 = (($parameter210) & 4294967295);
										HEAP32[(($arrayidx211) >> 2)] = 1;;
									}
								}
							} while (0);
							var $141 = $outbuf_addr;
							var $142 = $outix_addr;
							__ZL17ProcessParamStackPcRi($141, $142);
							var $143 = $self_closing_addr;
							var $tobool216 = ((($143)) | 0) != 0;
							if ($tobool216) {
								__label__ = 63;;
							} else {
								__label__ = 64;;
							}
							if (__label__ == 63) {
								var $144 = $tag_type;
								var $145 = $outbuf_addr;
								var $146 = $outix_addr;
								__ZL13PopParamStackiPcRi($144, $145, $146);;
							} else if (__label__ == 64) {
								HEAP8[(__ZL10audio_text_b)] = 1;;
							}
							$retval = 16384;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 66) {
							var $147 = $tag_type;
							var $148 = $outbuf_addr;
							var $149 = $outix_addr;
							__ZL13PopParamStackiPcRi($147, $148, $149);
							HEAP8[(__ZL10audio_text_b)] = 0;
							$retval = 16384;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 67) {
							$value = 21;
							$terminator = 16384;
							var $150 = $px;
							var $call222 = __ZL16GetSsmlAttributePwPKc($150, ((__str99266) & 4294967295));
							$attr1 = $call222;
							var $cmp223 = ((($call222)) | 0) != 0;
							if ($cmp223) {
								__label__ = 68;;
							} else {
								__label__ = 71;;
							}
							if (__label__ == 68) {
								var $151 = $attr1;
								var $call225 = __ZL10attrlookupPKwPK8MNEM_TAB($151, ((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break) & 4294967295));
								$value = $call225;
								var $152 = $value;
								var $cmp226 = ((($152)) | 0) < 3;
								if ($cmp226) {
									__label__ = 69;;
								} else {
									__label__ = 70;;
								}
								if (__label__ == 69) {
									var $153 = $outix_addr;
									var $154 = HEAP32[(($153) >> 2)];
									var $155 = $outbuf_addr;
									var $arrayidx228 = (($155 + $154) & 4294967295);
									var $156 = $value;
									var $call229 = _sprintf($arrayidx228, ((__str100267) & 4294967295), allocate([1, 0, 0, 0, $156, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
									var $157 = $outix_addr;
									var $158 = HEAP32[(($157) >> 2)];
									var $add230 = ((($158) + 3) & 4294967295);
									HEAP32[(($157) >> 2)] = $add230;
									$terminator = 0;;
								}
								var $159 = $value;
								var $arrayidx232 = ((__ZZL14ProcessSsmlTagPwPcRiiiE11break_value + $159 * 4) & 4294967295);
								var $160 = HEAP32[(($arrayidx232) >> 2)];
								$value = $160;;
							}
							var $161 = $px;
							var $call234 = __ZL16GetSsmlAttributePwPKc($161, ((__str101268) & 4294967295));
							$attr2 = $call234;
							var $cmp235 = ((($call234)) | 0) != 0;
							if ($cmp235) {
								__label__ = 72;;
							} else {
								__label__ = 74;;
							}
							$if_then236$$if_end241$96: do {
								if (__label__ == 72) {
									var $162 = $attr2;
									var $call237 = __ZL10attrnumberPKwii($162, 0, 1);
									var $mul = ((($call237) * 25) & 4294967295);
									var $163 = HEAP32[((((_speed) & 4294967295)) >> 2)];
									var $div = ((((($mul)) | 0) / ((($163)) | 0)) | 0);
									$value = $div;
									var $164 = $terminator;
									var $cmp238 = ((($164)) | 0) == 0;
									if ($cmp238) {
										__lastLabel__ = 72;;
									} else {
										__lastLabel__ = 72;
										__label__ = 76;
										break $if_then236$$if_end241$96;
									}
									$terminator = 16384;
									__label__ = 75;
									break $if_then236$$if_end241$96;
								} else if (__label__ == 74) {
									var $_pr1 = $terminator;
									var $tobool242 = ((($_pr1)) | 0) != 0;
									if ($tobool242) {
										__label__ = 75;
										break $if_then236$$if_end241$96;
									} else {
										__label__ = 112;
										break $sw_epilog$$sw_bb$$sw_bb49$$sw_bb62$$sw_bb83$$sw_bb84$$sw_bb110$$sw_bb120$$sw_bb129$$sw_bb130$$sw_bb131$$sw_bb156$$sw_bb220$$sw_bb221$$sw_bb249$$sw_bb266$$while_cond$$while_cond280$$sw_bb293$$sw_bb294$$sw_bb302$$sw_bb317$$sw_bb324$21;
									}
								}
							} while (0);
							if (__label__ == 75) {
								var $_pr3 = $value;
								__lastLabel__ = 75;;
							}
							var $165 = __lastLabel__ == 75 ? $_pr3 : ($div);
							var $cmp244 = ((($165)) | 0) > 4095;
							if ($cmp244) {
								__label__ = 77;;
							} else {
								__label__ = 78;;
							}
							if (__label__ == 77) {
								$value = 4095;;
							}
							var $166 = $terminator;
							var $167 = $value;
							var $add247 = ((($167) + ($166)) & 4294967295);
							$retval = $add247;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 79) {
							var $168 = $px;
							var $call250 = __ZL16GetSsmlAttributePwPKc($168, ((__str102269) & 4294967295));
							$attr1 = $call250;
							var $cmp251 = ((($call250)) | 0) != 0;
							if ($cmp251) {
								__label__ = 80;;
							} else {
								__label__ = 82;;
							}
							$if_then252$$if_end261$107: do {
								if (__label__ == 80) {
									var $arraydecay253 = (($buf) & 4294967295);
									var $169 = $attr1;
									var $call254 = __ZL13attrcopy_utf8PcPKwi($arraydecay253, $169, 80);
									var $arraydecay255 = (($buf) & 4294967295);
									var $call256 = __Z11AddNameDataPKci($arraydecay255, 0);
									$index = $call256;
									var $cmp257 = ((($call256)) | 0) >= 0;
									if (!($cmp257)) {
										__label__ = 82;
										break $if_then252$$if_end261$107;
									}
									var $170 = $index;
									var $171 = HEAP32[((_namedata) >> 2)];
									var $arrayidx259 = (($171 + $170) & 4294967295);
									HEAP32[((__ZL7xmlbase) >> 2)] = $arrayidx259;;
								}
							} while (0);
							var $172 = $px;
							var $173 = $tag_type;
							var $call262 = __ZL18GetVoiceAttributesPwi($172, $173);
							var $cmp263 = ((($call262)) | 0) == 0;
							if ($cmp263) {
								__label__ = 83;;
							} else {
								__label__ = 84;;
							}
							if (__label__ == 83) {
								$retval = 0;
								__label__ = 113;
								break $if_end30$$return$19;
							} else if (__label__ == 84) {
								$retval = 147456;
								__label__ = 113;
								break $if_end30$$return$19;
							}
						} else if (__label__ == 85) {
							var $174 = $px;
							var $175 = $tag_type;
							var $call267 = __ZL18GetVoiceAttributesPwi($174, $175);
							var $cmp268 = ((($call267)) | 0) == 0;
							if ($cmp268) {
								__label__ = 86;;
							} else {
								__label__ = 87;;
							}
							if (__label__ == 86) {
								$retval = 0;
								__label__ = 113;
								break $if_end30$$return$19;
							} else if (__label__ == 87) {
								$retval = 147456;
								__label__ = 113;
								break $if_end30$$return$19;
							}
						} else if (__label__ == 88) {
							while (1) {
								var $176 = __lastLabel__ == 90 ? $dec : ($23);
								var $cmp272 = ((($176)) | 0) > 1;
								if (!($cmp272)) {
									__label__ = 91;
									break;
								}
								var $177 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
								var $sub273 = ((($177) - 1) & 4294967295);
								var $arrayidx274 = ((__ZL10ssml_stack + $sub273 * 76) & 4294967295);
								var $tag_type275 = (($arrayidx274) & 4294967295);
								var $178 = HEAP32[(($tag_type275) >> 2)];
								var $cmp276 = ((($178)) | 0) != 1;
								if (!($cmp276)) {
									__label__ = 91;
									break;
								}
								var $179 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
								var $dec = ((($179) - 1) & 4294967295);
								HEAP32[((__ZL12n_ssml_stack) >> 2)] = $dec;
								__lastLabel__ = 90;
								__label__ = 88;
								continue;
							}
							var $180 = $px;
							var $181 = $tag_type;
							var $call277 = __ZL18GetVoiceAttributesPwi($180, $181);
							var $add278 = ((($call277) + 524328) & 4294967295);
							$retval = $add278;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 92) {
							while (1) {
								var $182 = __lastLabel__ == 94 ? $dec289 : ($23);
								var $cmp281 = ((($182)) | 0) > 1;
								if (!($cmp281)) {
									__label__ = 95;
									break;
								}
								var $183 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
								var $sub283 = ((($183) - 1) & 4294967295);
								var $arrayidx284 = ((__ZL10ssml_stack + $sub283 * 76) & 4294967295);
								var $tag_type285 = (($arrayidx284) & 4294967295);
								var $184 = HEAP32[(($tag_type285) >> 2)];
								var $cmp286 = ((($184)) | 0) != 2;
								if (!($cmp286)) {
									__label__ = 95;
									break;
								}
								var $185 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
								var $dec289 = ((($185) - 1) & 4294967295);
								HEAP32[((__ZL12n_ssml_stack) >> 2)] = $dec289;
								__lastLabel__ = 94;
								__label__ = 92;
								continue;
							}
							$terminator = 0;
							var $186 = $terminator;
							var $187 = $px;
							var $188 = $tag_type;
							var $call291 = __ZL18GetVoiceAttributesPwi($187, $188);
							var $add292 = ((($call291) + ($186)) & 4294967295);
							$retval = $add292;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 96) {
							$retval = 262174;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 97) {
							var $189 = $ssml_sp;
							var $tag_type295 = (($189) & 4294967295);
							var $190 = HEAP32[(($tag_type295) >> 2)];
							var $cmp296 = ((($190)) | 0) == 6;
							if ($cmp296) {
								__label__ = 98;;
							} else {
								__label__ = 99;;
							}
							if (__label__ == 98) {
								var $191 = $px;
								var $call298 = __ZL18GetVoiceAttributesPwi($191, 38);
								$voice_change_flag = $call298;;
							}
							var $192 = $px;
							var $193 = $tag_type;
							var $call300 = __ZL18GetVoiceAttributesPwi($192, $193);
							var $194 = $voice_change_flag;
							var $or = ($194) | ($call300);
							$voice_change_flag = $or;
							var $195 = $voice_change_flag;
							var $add301 = ((($195) + 524358) & 4294967295);
							$retval = $add301;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 100) {
							var $196 = $ssml_sp;
							var $tag_type303 = (($196) & 4294967295);
							var $197 = HEAP32[(($tag_type303) >> 2)];
							var $cmp304 = ((($197)) | 0) == 6;
							if ($cmp304) {
								__label__ = 101;;
							} else {
								__label__ = 102;;
							}
							if (__label__ == 101) {
								var $198 = $px;
								var $call306 = __ZL18GetVoiceAttributesPwi($198, 38);
								$voice_change_flag = $call306;;
							}
							var $199 = $ssml_sp;
							var $tag_type308 = (($199) & 4294967295);
							var $200 = HEAP32[(($tag_type308) >> 2)];
							var $cmp309 = ((($200)) | 0) == 7;
							if ($cmp309) {
								__label__ = 103;;
							} else {
								__label__ = 104;;
							}
							if (__label__ == 103) {
								var $201 = $px;
								var $call311 = __ZL18GetVoiceAttributesPwi($201, 39);
								var $202 = $voice_change_flag;
								var $or312 = ($202) | ($call311);
								$voice_change_flag = $or312;;
							}
							var $203 = $px;
							var $204 = $tag_type;
							var $call314 = __ZL18GetVoiceAttributesPwi($203, $204);
							var $205 = $voice_change_flag;
							var $or315 = ($205) | ($call314);
							$voice_change_flag = $or315;
							var $206 = $voice_change_flag;
							var $add316 = ((($206) + 524358) & 4294967295);
							$retval = $add316;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 105) {
							var $207 = $ssml_sp;
							var $tag_type318 = (($207) & 4294967295);
							var $208 = HEAP32[(($tag_type318) >> 2)];
							var $cmp319 = ((($208)) | 0) == 6;
							if ($cmp319) {
								__label__ = 106;;
							} else {
								__label__ = 107;;
							}
							if (__label__ == 106) {
								var $209 = $px;
								var $210 = $tag_type;
								var $call321 = __ZL18GetVoiceAttributesPwi($209, $210);
								$voice_change_flag = $call321;;
							}
							var $211 = $voice_change_flag;
							var $add323 = ((($211) + 524328) & 4294967295);
							$retval = $add323;
							__label__ = 113;
							break $if_end30$$return$19;
						} else if (__label__ == 108) {
							var $212 = $ssml_sp;
							var $tag_type325 = (($212) & 4294967295);
							var $213 = HEAP32[(($tag_type325) >> 2)];
							var $cmp326 = ((($213)) | 0) == 6;
							if ($cmp326) {
								__label__ = 110;;
							} else {
								__label__ = 109;;
							}
							$if_then330$$lor_lhs_false327$145: do {
								if (__label__ == 109) {
									var $214 = $ssml_sp;
									var $tag_type328 = (($214) & 4294967295);
									var $215 = HEAP32[(($tag_type328) >> 2)];
									var $cmp329 = ((($215)) | 0) == 7;
									if ($cmp329) {
										__label__ = 110;
										break $if_then330$$lor_lhs_false327$145;
									}
									$retval = 524358;
									__label__ = 113;
									break $if_end30$$return$19;
								}
							} while (0);
							var $216 = $px;
							var $217 = $tag_type;
							var $call331 = __ZL18GetVoiceAttributesPwi($216, $217);
							var $add332 = ((($call331) + 524358) & 4294967295);
							$retval = $add332;
							__label__ = 113;
							break $if_end30$$return$19;
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $218 = $retval;
			STACKTOP = __stackBase__;
			return $218;
			return null;
		}

		function __ZL13LookupSpecialP10TranslatorPKcPc($tr, $text_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 124;
			_memset(__stackBase__, 0, 124);
			var __label__;
			var $retval;
			var $tr_addr;
			var $string_addr;
			var $text_out_addr;
			var $flags = __stackBase__;
			var $phonemes = __stackBase__ + 8;
			var $phonemes2 = __stackBase__ + 64;
			var $string1 = __stackBase__ + 120;
			$tr_addr = $tr;
			$string_addr = ((__str6303) & 4294967295);
			$text_out_addr = $text_out;
			var $0 = $string_addr;
			HEAP32[(($string1) >> 2)] = $0;
			var $arrayidx = (($flags + 4) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = 0;
			var $arrayidx1 = (($flags) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 0;
			var $1 = $tr_addr;
			var $arraydecay = (($phonemes) & 4294967295);
			var $arraydecay2 = (($flags) & 4294967295);
			var $call = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($1, $string1, $arraydecay, $arraydecay2, 0, 0);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = $tr_addr;
				var $arraydecay3 = (($phonemes) & 4294967295);
				var $arraydecay4 = (($flags) & 4294967295);
				__Z13SetWordStressP10TranslatorPcPjii($2, $arraydecay3, $arraydecay4, -1, 0);
				var $arraydecay5 = (($phonemes) & 4294967295);
				var $arraydecay6 = (($phonemes2) & 4294967295);
				__Z14DecodePhonemesPKcPc($arraydecay5, $arraydecay6);
				var $3 = $text_out_addr;
				var $arraydecay7 = (($phonemes2) & 4294967295);
				var $call8 = _sprintf($3, ((__str60227) & 4294967295), allocate([$arraydecay7, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
				var $4 = $text_out_addr;
				$retval = $4;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			var $5 = $retval;
			STACKTOP = __stackBase__;
			return $5;
			return null;
		}

		function __ZL10RemoveCharPc($p) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $p_addr;
			var $c = __stackBase__;
			$p_addr = $p;
			var $0 = $p_addr;
			var $1 = $p_addr;
			var $call = __Z7utf8_inPiPKc($c, $1);
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $0;
			$stop$ = $dest$ + $call;
			$value4$ = 32;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 32;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 32;
			};
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL19AnnouncePunctuationP10TranslatoriPiPcS1_i($tr, $c1, $c2_ptr, $output, $bufix, $end_clause) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 280;
			_memset(__stackBase__, 0, 280);
			var __label__;
			var $retval;
			var $tr_addr;
			var $c1_addr;
			var $c2_ptr_addr;
			var $output_addr;
			var $bufix_addr;
			var $end_clause_addr;
			var $punct_count;
			var $punctname;
			var $found;
			var $soundicon;
			var $attributes;
			var $short_pause;
			var $c2;
			var $len;
			var $bufix1;
			var $buf = __stackBase__;
			var $buf2 = __stackBase__ + 200;
			$tr_addr = $tr;
			$c1_addr = $c1;
			$c2_ptr_addr = $c2_ptr;
			$output_addr = $output;
			$bufix_addr = $bufix;
			$end_clause_addr = $end_clause;
			$found = 0;
			var $0 = $c2_ptr_addr;
			var $1 = HEAP32[(($0) >> 2)];
			$c2 = $1;
			var $arrayidx = (($buf) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $2 = $c1_addr;
			var $call = __ZL15LookupSoundiconi($2);
			$soundicon = $call;
			var $cmp = ((($call)) | 0) >= 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_end63_thread$$if_else$2: do {
				if (__label__ == 1) {
					var $arraydecay = (($buf) & 4294967295);
					var $3 = $soundicon;
					var $call1 = _sprintf($arraydecay, ((__str50217) & 4294967295), allocate([$3, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
					var $4 = $c2;
					__ZL6UngetCi($4);
					$found = 1;
					__label__ = 26;
					break $if_end63_thread$$if_else$2;
				} else if (__label__ == 2) {
					var $5 = $tr_addr;
					var $6 = $c1_addr;
					__ZL14LookupCharNameP10Translatorii($5, $6, 0);
					$punctname = ((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295);
					$found = 1;
					var $7 = $bufix_addr;
					var $8 = HEAP32[(($7) >> 2)];
					var $cmp5 = ((($8)) | 0) == 0;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 3;;
					}
					$if_then9$$lor_lhs_false$5: do {
						if (__label__ == 3) {
							var $9 = $end_clause_addr;
							var $cmp6 = ((($9)) | 0) == 0;
							if ($cmp6) {
								__label__ = 5;
								break $if_then9$$lor_lhs_false$5;
							}
							var $10 = $tr_addr;
							var $langopts = (($10) & 4294967295);
							var $param = (($langopts + 24) & 4294967295);
							var $arrayidx8 = (($param + 68) & 4294967295);
							var $11 = HEAP32[(($arrayidx8) >> 2)];
							var $and = ($11) & 2;
							var $tobool = ((($and)) | 0) != 0;
							if ($tobool) {
								__label__ = 5;
								break $if_then9$$lor_lhs_false$5;
							}
							var $34 = $c2;
							__ZL6UngetCi($34);
							var $35 = HEAP32[((_option_ssml) >> 2)];
							var $tobool51 = ((($35)) | 0) != 0;
							if ($tobool51) {
								__label__ = 21;;
							} else {
								__label__ = 23;;
							}
							$if_then52$$if_end58$9: do {
								if (__label__ == 21) {
									var $36 = $c1_addr;
									var $cmp53 = ((($36)) | 0) == 60;
									var $37 = $c1_addr;
									var $cmp55 = ((($37)) | 0) == 38;
									var $or_cond = ($cmp53) | ($cmp55);
									if (!($or_cond)) {
										__label__ = 23;
										break $if_then52$$if_end58$9;
									}
									var $38 = $c1_addr;
									HEAP32[((__ZL19ssml_ignore_l_angle) >> 2)] = $38;;
								}
							} while (0);
							var $39 = $c1_addr;
							HEAP32[((__ZL11ungot_char2) >> 2)] = $39;
							var $arrayidx59 = (($buf) & 4294967295);
							HEAP8[($arrayidx59)] = 32;
							var $arrayidx60 = (($buf + 1) & 4294967295);
							HEAP8[($arrayidx60)] = 0;
							__label__ = 24;
							break $if_then9$$lor_lhs_false$5;
						}
					} while (0);
					$if_then9$$if_end63$13: do {
						if (__label__ == 5) {
							$punct_count = 1;
							var $12 = $c2;
							var $13 = $c1_addr;
							var $cmp105 = ((($12)) | 0) == ((($13)) | 0);
							var $14 = $c1_addr;
							var $cmp116 = ((($14)) | 0) != 60;
							var $or_cond17 = ($cmp105) & ($cmp116);
							if ($or_cond17) {
								__label__ = 6;;
							} else {
								__label__ = 7;;
							}
							$while_body$$while_end$15: do {
								if (__label__ == 6) {
									while (1) {
										var $15 = $punct_count;
										var $inc = ((($15) + 1) & 4294967295);
										$punct_count = $inc;
										var $call12 = __ZL4GetCv();
										$c2 = $call12;
										var $16 = $c2;
										var $17 = $c1_addr;
										var $cmp10 = ((($16)) | 0) == ((($17)) | 0);
										var $18 = $c1_addr;
										var $cmp11 = ((($18)) | 0) != 60;
										var $or_cond1 = ($cmp10) & ($cmp11);
										if ($or_cond1) {
											__label__ = 6;
											continue;
										} else {
											__label__ = 7;
											break $while_body$$while_end$15;
										}
									}
								}
							} while (0);
							var $19 = $c2;
							var $20 = $c2_ptr_addr;
							HEAP32[(($20) >> 2)] = $19;
							var $21 = $end_clause_addr;
							var $tobool13 = ((($21)) | 0) != 0;
							if ($tobool13) {
								__label__ = 8;;
							} else {
								__label__ = 9;;
							}
							if (__label__ == 8) {
								var $22 = $c2;
								__ZL6UngetCi($22);;
							}
							var $23 = $punct_count;
							var $cmp15 = ((($23)) | 0) == 1;
							if ($cmp15) {
								__label__ = 10;;
							} else {
								__label__ = 11;;
							}
							if (__label__ == 10) {
								var $arraydecay17 = (($buf) & 4294967295);
								var $24 = $punctname;
								var $call18 = _sprintf($arraydecay17, ((__str51218) & 4294967295), allocate([$24, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
							} else if (__label__ == 11) {
								var $25 = $punct_count;
								var $cmp20 = ((($25)) | 0) < 4;
								var $arrayidx22 = (($buf) & 4294967295);
								if ($cmp20) {
									__label__ = 12;;
								} else {
									__label__ = 19;;
								}
								if (__label__ == 12) {
									HEAP8[($arrayidx22)] = 0;
									var $26 = HEAP32[((((_embedded_value + 8) & 4294967295)) >> 2)];
									var $cmp23 = ((($26)) | 0) < 300;
									if ($cmp23) {
										__label__ = 13;;
									} else {
										__label__ = 14;;
									}
									if (__label__ == 13) {
										var $arraydecay25 = (($buf) & 4294967295);
										var $src$, $dest$, $stop$, $stop4$, $fast$;
										$src$ = ((__str52219) & 4294967295);
										$dest$ = $arraydecay25;
										$stop$ = $src$ + 6;
										if (($dest$ % 4) == ($src$ % 4) && 6 > 8) {
											while ($src$ % 4 !== 0 && $src$ < $stop$) {;
												HEAP8[$dest$++] = HEAP8[$src$++];
											}
											$src$ >>= 2;
											$dest$ >>= 2;
											$stop4$ = $stop$ >> 2;
											while ($src$ < $stop4$) {;;;
												HEAP32[$dest$++] = HEAP32[$src$++];
											}
											$src$ <<= 2;
											$dest$ <<= 2;
										}
										while ($src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										};;
									}
									var $27 = $punct_count;
									var $dec3 = ((($27) - 1) & 4294967295);
									$punct_count = $dec3;
									var $cmp294 = ((($27)) | 0) > 0;
									if ($cmp294) {
										__label__ = 15;;
									} else {
										__label__ = 17;;
									}
									$while_body30_lr_ph$$while_end36$30: do {
										if (__label__ == 15) {
											var $arraydecay31 = (($buf2) & 4294967295);
											var $arraydecay33 = (($buf) & 4294967295);
											var $arraydecay34 = (($buf2) & 4294967295);;
											while (1) {
												var $28 = $punctname;
												var $call32 = _sprintf($arraydecay31, ((__str51218) & 4294967295), allocate([$28, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
												var $call35 = _strcat($arraydecay33, $arraydecay34);
												var $29 = $punct_count;
												var $dec = ((($29) - 1) & 4294967295);
												$punct_count = $dec;
												var $cmp29 = ((($29)) | 0) > 0;
												if ($cmp29) {
													__label__ = 16;
													continue;
												} else {
													__label__ = 17;
													break $while_body30_lr_ph$$while_end36$30;
												}
											}
										}
									} while (0);
									var $30 = HEAP32[((((_embedded_value + 8) & 4294967295)) >> 2)];
									var $cmp37 = ((($30)) | 0) < 300;
									if (!($cmp37)) {
										__label__ = 24;
										break $if_then9$$if_end63$13;
									}
									var $arraydecay39 = (($buf2) & 4294967295);
									var $src$, $dest$, $stop$, $stop4$, $fast$;
									$src$ = ((__str53220) & 4294967295);
									$dest$ = $arraydecay39;
									$stop$ = $src$ + 7;
									if (($dest$ % 4) == ($src$ % 4) && 7 > 8) {
										while ($src$ % 4 !== 0 && $src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										}
										$src$ >>= 2;
										$dest$ >>= 2;
										$stop4$ = $stop$ >> 2;
										while ($src$ < $stop4$) {;;;
											HEAP32[$dest$++] = HEAP32[$src$++];
										}
										$src$ <<= 2;
										$dest$ <<= 2;
									}
									while ($src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									};
									var $arraydecay41 = (($buf) & 4294967295);
									var $arraydecay42 = (($buf2) & 4294967295);
									var $call43 = _strcat($arraydecay41, $arraydecay42);;
								} else if (__label__ == 19) {
									var $31 = $punctname;
									var $32 = $punct_count;
									var $33 = $punctname;
									var $call47 = _sprintf($arrayidx22, ((__str54221) & 4294967295), allocate([$31, 0, 0, 0, $32, 0, 0, 0, $33, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
								}
							}
						}
					} while (0);
					var $_pr = $found;
					var $cmp64 = ((($_pr)) | 0) == 0;
					if (!($cmp64)) {
						__label__ = 26;
						break $if_end63_thread$$if_else$2;
					}
					$retval = -1;
					__label__ = 40;
					break $if_end63_thread$$if_else$2;
				}
			} while (0);
			$if_end66$$return$39: do {
				if (__label__ == 26) {
					var $40 = $bufix_addr;
					var $41 = HEAP32[(($40) >> 2)];
					$bufix1 = $41;
					var $arraydecay67 = (($buf) & 4294967295);
					var $call68 = _strlen($arraydecay67);
					$len = $call68;
					var $42 = $bufix_addr;
					var $43 = HEAP32[(($42) >> 2)];
					var $44 = $output_addr;
					var $arrayidx69 = (($44 + $43) & 4294967295);
					var $arraydecay70 = (($buf) & 4294967295);
					var $call71 = _strcpy($arrayidx69, $arraydecay70);
					var $45 = $len;
					var $46 = $bufix_addr;
					var $47 = HEAP32[(($46) >> 2)];
					var $add = ((($47) + ($45)) & 4294967295);
					HEAP32[(($46) >> 2)] = $add;
					var $48 = $end_clause_addr;
					var $cmp72 = ((($48)) | 0) == 0;
					if ($cmp72) {
						__label__ = 27;;
					} else {
						__label__ = 28;;
					}
					if (__label__ == 27) {
						$retval = -1;;
					} else if (__label__ == 28) {
						var $49 = $c1_addr;
						var $cmp75 = ((($49)) | 0) == 45;
						if ($cmp75) {
							__label__ = 29;;
						} else {
							__label__ = 30;;
						}
						if (__label__ == 29) {
							$retval = 16384;;
						} else if (__label__ == 30) {
							var $50 = $c1_addr;
							var $call78 = __Z11lookupwcharPKti(((__ZL11punct_chars) & 4294967295), $50);
							var $arrayidx79 = ((__ZL16punct_attributes + $call78 * 4) & 4294967295);
							var $51 = HEAP32[(($arrayidx79) >> 2)];
							$attributes = $51;
							$short_pause = 262148;
							var $52 = $attributes;
							var $and80 = ($52) & 28672;
							var $cmp81 = ((($and80)) | 0) == 4096;
							if ($cmp81) {
								__label__ = 31;;
							} else {
								__label__ = 32;;
							}
							if (__label__ == 31) {
								$short_pause = 266244;;
							}
							var $53 = $bufix1;
							var $cmp84 = ((($53)) | 0) > 0;
							if ($cmp84) {
								__label__ = 33;;
							} else {
								__label__ = 37;;
							}
							$land_lhs_true$$if_end95$50: do {
								if (__label__ == 33) {
									var $54 = $tr_addr;
									var $langopts85 = (($54) & 4294967295);
									var $param86 = (($langopts85 + 24) & 4294967295);
									var $arrayidx87 = (($param86 + 68) & 4294967295);
									var $55 = HEAP32[(($arrayidx87) >> 2)];
									var $and88 = ($55) & 2;
									var $tobool89 = ((($and88)) | 0) != 0;
									if ($tobool89) {
										__label__ = 37;
										break $land_lhs_true$$if_end95$50;
									}
									var $56 = $attributes;
									var $and91 = ($56) & -32769;
									var $cmp92 = ((($and91)) | 0) == 266270;
									if ($cmp92) {
										__label__ = 35;;
									} else {
										__label__ = 36;;
									}
									if (__label__ == 35) {
										$retval = 262148;
										__label__ = 40;
										break $if_end66$$return$39;
									} else if (__label__ == 36) {
										var $57 = $short_pause;
										$retval = $57;
										__label__ = 40;
										break $if_end66$$return$39;
									}
								}
							} while (0);
							var $58 = $attributes;
							var $and96 = ($58) & 524288;
							var $tobool97 = ((($and96)) | 0) != 0;
							if ($tobool97) {
								__label__ = 38;;
							} else {
								__label__ = 39;;
							}
							if (__label__ == 38) {
								var $59 = $attributes;
								$retval = $59;;
							} else if (__label__ == 39) {
								var $60 = $short_pause;
								$retval = $60;;
							}
						}
					}
				}
			} while (0);
			var $61 = $retval;
			STACKTOP = __stackBase__;
			return $61;
			return null;
		}

		function __ZL14LookupCharNameP10Translatorii($tr, $c, $only) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 156;
			_memset(__stackBase__, 0, 156);
			var __label__;
			var $tr_addr;
			var $c_addr;
			var $only_addr;
			var $ix;
			var $flags = __stackBase__;
			var $single_letter = __stackBase__ + 8;
			var $phonemes = __stackBase__ + 32;
			var $phonemes2 = __stackBase__ + 92;
			var $lang_name;
			var $string = __stackBase__ + 152;
			$tr_addr = $tr;
			$c_addr = $c;
			$only_addr = $only;
			$lang_name = 0;
			HEAP8[(((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295))] = 0;
			var $arrayidx = (($flags) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = 0;
			var $arrayidx1 = (($flags + 4) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 0;
			var $arrayidx2 = (($single_letter) & 4294967295);
			HEAP8[($arrayidx2)] = 0;
			var $arrayidx3 = (($single_letter + 1) & 4294967295);
			HEAP8[($arrayidx3)] = 95;
			var $0 = $c_addr;
			var $arrayidx4 = (($single_letter + 2) & 4294967295);
			var $call = __Z8utf8_outjPc($0, $arrayidx4);
			$ix = $call;
			var $1 = $ix;
			var $add = ((($1) + 2) & 4294967295);
			var $arrayidx5 = (($single_letter + $add) & 4294967295);
			HEAP8[($arrayidx5)] = 0;
			var $2 = $only_addr;
			var $tobool = ((($2)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_else$2: do {
				if (__label__ == 1) {
					var $arrayidx6 = (($single_letter + 2) & 4294967295);
					HEAP32[(($string) >> 2)] = $arrayidx6;
					var $3 = $tr_addr;
					var $arraydecay = (($phonemes) & 4294967295);
					var $arraydecay7 = (($flags) & 4294967295);
					var $call8 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($3, $string, $arraydecay, $arraydecay7, 0, 0);;
				} else if (__label__ == 2) {
					var $arrayidx9 = (($single_letter + 1) & 4294967295);
					HEAP32[(($string) >> 2)] = $arrayidx9;
					var $4 = $tr_addr;
					var $arraydecay10 = (($phonemes) & 4294967295);
					var $arraydecay11 = (($flags) & 4294967295);
					var $call12 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($4, $string, $arraydecay10, $arraydecay11, 0, 0);
					var $cmp = ((($call12)) | 0) == 0;
					if (!($cmp)) {
						__label__ = 5;
						break $if_then$$if_else$2;
					}
					var $arrayidx14 = (($single_letter + 2) & 4294967295);
					HEAP32[(($string) >> 2)] = $arrayidx14;
					var $5 = $tr_addr;
					var $arraydecay15 = (($phonemes) & 4294967295);
					var $arraydecay16 = (($flags) & 4294967295);
					var $call17 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($5, $string, $arraydecay15, $arraydecay16, 0, 0);
					var $cmp18 = ((($call17)) | 0) == 0;
					if (!($cmp18)) {
						__label__ = 5;
						break $if_then$$if_else$2;
					}
					var $arrayidx20 = (($single_letter + 1) & 4294967295);
					HEAP8[($arrayidx20)] = 32;
					var $6 = $tr_addr;
					var $arrayidx21 = (($single_letter + 2) & 4294967295);
					var $arraydecay22 = (($phonemes) & 4294967295);
					var $call23 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($6, $arrayidx21, $arraydecay22, 60, 0, 0, 0);;
				}
			} while (0);
			var $7 = $only_addr;
			var $cmp26 = ((($7)) | 0) == 0;
			if ($cmp26) {
				__label__ = 6;;
			} else {
				__label__ = 13;;
			}
			$land_lhs_true$$if_end50$8: do {
				if (__label__ == 6) {
					var $arrayidx27 = (($phonemes) & 4294967295);
					var $8 = HEAP8[($arrayidx27)];
					var $conv = (tempInt = (($8)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp28 = ((($conv)) | 0) == 0;
					if (!($cmp28)) {
						__label__ = 13;
						break $land_lhs_true$$if_end50$8;
					}
					var $9 = $tr_addr;
					var $translator_name = (($9 + 280) & 4294967295);
					var $10 = HEAP32[(($translator_name) >> 2)];
					var $cmp30 = ((($10)) | 0) != 25966;
					if (!($cmp30)) {
						__label__ = 13;
						break $land_lhs_true$$if_end50$8;
					}
					var $call32 = __Z14SetTranslator2PKc(((__str52704) & 4294967295));
					var $arrayidx33 = (($single_letter + 1) & 4294967295);
					HEAP32[(($string) >> 2)] = $arrayidx33;
					var $arrayidx34 = (($single_letter + 1) & 4294967295);
					HEAP8[($arrayidx34)] = 95;
					var $11 = HEAP32[((_translator2) >> 2)];
					var $arraydecay35 = (($phonemes) & 4294967295);
					var $arraydecay36 = (($flags) & 4294967295);
					var $call37 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($11, $string, $arraydecay35, $arraydecay36, 0, 0);
					var $cmp38 = ((($call37)) | 0) == 0;
					if ($cmp38) {
						__label__ = 9;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 9) {
						var $arrayidx40 = (($single_letter + 2) & 4294967295);
						HEAP32[(($string) >> 2)] = $arrayidx40;
						var $12 = HEAP32[((_translator2) >> 2)];
						var $arraydecay41 = (($phonemes) & 4294967295);
						var $arraydecay42 = (($flags) & 4294967295);
						var $call43 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($12, $string, $arraydecay41, $arraydecay42, 0, 0);;
					}
					var $arrayidx45 = (($phonemes) & 4294967295);
					var $13 = HEAP8[($arrayidx45)];
					var $tobool46 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
					if ($tobool46) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						$lang_name = ((__str52704) & 4294967295);;
					} else if (__label__ == 12) {
						var $14 = HEAP32[((_voice) >> 2)];
						var $phoneme_tab_ix = (($14 + 40) & 4294967295);
						var $15 = HEAP32[(($phoneme_tab_ix) >> 2)];
						__Z18SelectPhonemeTablei($15);;
					}
				}
			} while (0);
			var $arrayidx51 = (($phonemes) & 4294967295);
			var $16 = HEAP8[($arrayidx51)];
			var $tobool52 = (tempInt = (($16)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
			if ($tobool52) {
				__label__ = 14;;
			} else {
				__label__ = 17;;
			}
			$if_then53$$if_else73$19: do {
				if (__label__ == 14) {
					var $17 = $lang_name;
					var $tobool54 = ((($17)) | 0) != 0;
					if ($tobool54) {
						__label__ = 15;;
					} else {
						__label__ = 16;;
					}
					if (__label__ == 15) {
						var $18 = HEAP32[((_translator2) >> 2)];
						var $arraydecay56 = (($phonemes) & 4294967295);
						var $arraydecay57 = (($flags) & 4294967295);
						__Z13SetWordStressP10TranslatorPcPjii($18, $arraydecay56, $arraydecay57, -1, 0);
						var $arraydecay58 = (($phonemes) & 4294967295);
						var $arraydecay59 = (($phonemes2) & 4294967295);
						__Z14DecodePhonemesPKcPc($arraydecay58, $arraydecay59);
						var $arraydecay60 = (($phonemes2) & 4294967295);
						var $19 = $tr_addr;
						var $translator_name61 = (($19 + 280) & 4294967295);
						var $20 = HEAP32[(($translator_name61) >> 2)];
						__ZL13WordToString2j($20);
						var $call63 = _sprintf(((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295), ((__str47214) & 4294967295), allocate([((__str52704) & 4294967295), 0, 0, 0, $arraydecay60, 0, 0, 0, ((__ZZL13WordToString2jE3buf) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						var $21 = HEAP32[((_voice) >> 2)];
						var $phoneme_tab_ix64 = (($21 + 40) & 4294967295);
						var $22 = HEAP32[(($phoneme_tab_ix64) >> 2)];
						__Z18SelectPhonemeTablei($22);;
					} else if (__label__ == 16) {
						var $23 = $tr_addr;
						var $arraydecay66 = (($phonemes) & 4294967295);
						var $arraydecay67 = (($flags) & 4294967295);
						__Z13SetWordStressP10TranslatorPcPjii($23, $arraydecay66, $arraydecay67, -1, 0);
						var $arraydecay68 = (($phonemes) & 4294967295);
						var $arraydecay69 = (($phonemes2) & 4294967295);
						__Z14DecodePhonemesPKcPc($arraydecay68, $arraydecay69);
						var $arraydecay70 = (($phonemes2) & 4294967295);
						var $call71 = _sprintf(((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295), ((__str48215) & 4294967295), allocate([$arraydecay70, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
					}
				} else if (__label__ == 17) {
					var $24 = $only_addr;
					var $cmp74 = ((($24)) | 0) == 0;
					if (!($cmp74)) {
						__label__ = 19;
						break $if_then53$$if_else73$19;
					}
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = ((__str49216) & 4294967295);
					$dest$ = ((__ZZL14LookupCharNameP10TranslatoriiE3buf) & 4294967295);
					$stop$ = $src$ + 17;
					if (($dest$ % 4) == ($src$ % 4) && 17 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};;
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL8IsRomanUj($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) | 0) == 73;
			var $1 = $c_addr;
			var $cmp1 = ((($1)) | 0) == 86;
			var $or_cond = ($cmp) | ($cmp1);
			var $2 = $c_addr;
			var $cmp3 = ((($2)) | 0) == 88;
			var $or_cond1 = ($or_cond) | ($cmp3);
			var $3 = $c_addr;
			var $cmp5 = ((($3)) | 0) == 76;
			var $or_cond2 = ($or_cond1) | ($cmp5);
			if ($or_cond2) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function __Z12InitNamedatav() {;
			var __label__;
			HEAP32[((__ZL11namedata_ix) >> 2)] = 0;
			var $0 = HEAP32[((_namedata) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((_namedata) >> 2)];;
				HEAP32[((_namedata) >> 2)] = 0;
				HEAP32[((__ZL10n_namedata) >> 2)] = 0;;
			};
			return;
			return;
		}

		function __Z9InitText2v() {;
			var __label__;
			var $param;
			HEAP32[((__ZL10ungot_char) >> 2)] = 0;
			HEAP32[((__ZL11ungot_char2) >> 2)] = 0;
			HEAP32[((__ZL12n_ssml_stack) >> 2)] = 1;
			HEAP32[((__ZL13n_param_stack) >> 2)] = 1;
			HEAP32[((((__ZL10ssml_stack) & 4294967295)) >> 2)] = 0;
			$param = 0;;
			while (1) {
				var $0 = $param;
				var $arrayidx = ((((_param_stack + 4) & 4294967295) + $0 * 4) & 4294967295);
				var $1 = HEAP32[(($arrayidx) >> 2)];
				var $2 = $param;
				var $arrayidx1 = ((__ZL17speech_parameters + $2 * 4) & 4294967295);
				HEAP32[(($arrayidx1) >> 2)] = $1;
				var $3 = $param;
				var $inc = ((($3) + 1) & 4294967295);
				$param = $inc;
				var $cmp = ((($inc)) | 0) < 15;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			var $4 = HEAP32[((((__ZL17speech_parameters + 20) & 4294967295)) >> 2)];
			HEAP32[((_option_punctuation) >> 2)] = $4;
			var $5 = HEAP32[((((__ZL17speech_parameters + 24) & 4294967295)) >> 2)];
			HEAP32[((_option_capitals) >> 2)] = $5;
			HEAP8[(((__ZL16current_voice_id) & 4294967295))] = 0;
			HEAP8[(__ZL11ignore_text_b)] = 0;
			HEAP8[(__ZL10audio_text_b)] = 0;
			HEAP8[(__ZL19clear_skipping_text_b)] = 0;
			HEAP32[((_count_characters) >> 2)] = -1;
			HEAP32[((__ZL10sayas_mode) >> 2)] = 0;
			HEAP32[((__ZL7xmlbase) >> 2)] = 0;;
			return;
			return;
		}

		function __ZL13WordToString2j($word) {;
			var __label__;
			var $word_addr;
			var $ix;
			var $p;
			$word_addr = $word;
			$p = ((__ZZL13WordToString2jE3buf) & 4294967295);
			$ix = 3;;
			while (1) {
				var $0 = $word_addr;
				var $1 = $ix;
				var $mul = ((($1) * 8) & 4294967295);
				var $shr = ($0) >>> ((($mul)) >>> 0);
				var $conv = ((($shr)) & 255);
				var $2 = $p;
				HEAP8[($2)] = $conv;
				var $conv1 = (tempInt = (($conv)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp2 = ((($conv1)) | 0) != 0;
				if ($cmp2) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $3 = $p;
					var $incdec_ptr = (($3 + 1) & 4294967295);
					$p = $incdec_ptr;;
				}
				var $4 = $ix;
				var $dec = ((($4) - 1) & 4294967295);
				$ix = $dec;
				var $cmp = ((($dec)) | 0) >= 0;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 4;
					break;
				}
			}
			var $5 = $p;
			HEAP8[($5)] = 0;;
			return;
			return;
		}

		function __ZL15LookupSoundiconi($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			var $ix;
			$c_addr = $c;
			$ix = 4;;
			$for_cond$2: while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_n_soundicon_tab) >> 2)];
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 8;
					break $for_cond$2;
				}
				var $2 = $ix;
				var $arrayidx = ((_soundicon_tab + $2 * 16) & 4294967295);
				var $name = (($arrayidx) & 4294967295);
				var $3 = HEAP32[(($name) >> 2)];
				var $4 = $c_addr;
				var $cmp1 = ((($3)) | 0) == ((($4)) | 0);
				var $5 = $ix;
				if ($cmp1) {
					__label__ = 3;
					break $for_cond$2;
				}
				var $inc = ((($5) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue $for_cond$2;
			}
			$for_end$$if_then$6: do {
				if (__label__ == 8) {
					$retval = -1;;
				} else if (__label__ == 3) {
					var $arrayidx2 = ((_soundicon_tab + $5 * 16) & 4294967295);
					var $length = (($arrayidx2 + 4) & 4294967295);
					var $6 = HEAP32[(($length) >> 2)];
					var $cmp3 = ((($6)) | 0) == 0;
					if ($cmp3) {
						__label__ = 4;;
					} else {
						__label__ = 6;;
					}
					$if_then4$$if_end7$9: do {
						if (__label__ == 4) {
							var $7 = $ix;
							var $call = __ZL13LoadSoundFilePKci(0, $7);
							var $cmp5 = ((($call)) | 0) != 0;
							if (!($cmp5)) {
								__label__ = 6;
								break $if_then4$$if_end7$9;
							}
							$retval = -1;
							__label__ = 9;
							break $for_end$$if_then$6;
						}
					} while (0);
					var $8 = $ix;
					$retval = $8;;
				}
			} while (0);
			var $9 = $retval;;
			return $9;
			return null;
		}

		function __ZL13LoadSoundFilePKci($fname, $index) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 764;
			_memset(__stackBase__, 0, 764);
			var __label__;
			var $retval;
			var $fname_addr;
			var $index_addr;
			var $f;
			var $p;
			var $ip;
			var $length;
			var $fname_temp = __stackBase__;
			var $fname2 = __stackBase__ + 100;
			var $ix;
			var $fd_temp;
			var $resample;
			var $header = __stackBase__ + 304;
			var $command = __stackBase__ + 316;
			$fname_addr = $fname;
			$index_addr = $index;
			var $0 = $fname_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_end$$if_end3$2: do {
				if (__label__ == 1) {
					var $1 = $index_addr;
					var $arrayidx = ((_soundicon_tab + $1 * 16) & 4294967295);
					var $filename = (($arrayidx + 12) & 4294967295);
					var $2 = HEAP32[(($filename) >> 2)];
					$fname_addr = $2;
					var $cmp1 = ((($2)) | 0) == 0;
					if (!($cmp1)) {
						__label__ = 3;
						break $if_end$$if_end3$2;
					}
					$retval = 1;
					__label__ = 23;
					break $if_end$$if_end3$2;
				}
			} while (0);
			$return$$if_end3$5: do {
				if (__label__ == 3) {
					var $3 = $fname_addr;
					var $arrayidx4 = (($3) & 4294967295);
					var $4 = HEAP8[($arrayidx4)];
					var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp5 = ((($conv)) | 0) != 47;
					if ($cmp5) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 4) {
						var $arraydecay = (($fname2) & 4294967295);
						var $5 = $fname_addr;
						var $call = _sprintf($arraydecay, ((__str55222) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0, 47, 0, 0, 0, $5, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						var $arraydecay7 = (($fname2) & 4294967295);
						$fname_addr = $arraydecay7;;
					}
					$f = 0;
					var $6 = $fname_addr;
					var $call9 = _fopen($6, ((__str18429) & 4294967295));
					$f = $call9;
					var $cmp10 = ((($call9)) | 0) != 0;
					if ($cmp10) {
						__label__ = 6;;
					} else {
						__label__ = 18;;
					}
					$if_then11$$if_then49$10: do {
						if (__label__ == 6) {
							var $7 = $f;
							var $call12 = _fseek($7, 20, 0);
							$ix = 0;;
							$for_body$12: while (1) {
								var $8 = $f;
								var $call14 = __Z10Read4BytesP7__sFILE($8);
								var $9 = $ix;
								var $arrayidx15 = (($header + $9 * 4) & 4294967295);
								HEAP32[(($arrayidx15) >> 2)] = $call14;
								var $10 = $ix;
								var $inc = ((($10) + 1) & 4294967295);
								$ix = $inc;
								var $cmp13 = ((($inc)) | 0) < 3;
								if ($cmp13) {
									__label__ = 7;
									continue $for_body$12;
								} else {
									__label__ = 8;
									break $for_body$12;
								}
							}
							var $arrayidx16 = (($header) & 4294967295);
							var $11 = HEAP32[(($arrayidx16) >> 2)];
							var $cmp17 = ((($11)) | 0) != 65537;
							if ($cmp17) {
								__label__ = 11;;
							} else {
								__label__ = 9;;
							}
							$if_then23$$lor_lhs_false$15: do {
								if (__label__ == 9) {
									var $arrayidx18 = (($header + 4) & 4294967295);
									var $12 = HEAP32[(($arrayidx18) >> 2)];
									var $13 = HEAP32[((_samplerate) >> 2)];
									var $cmp19 = ((($12)) | 0) != ((($13)) | 0);
									if ($cmp19) {
										__label__ = 11;
										break $if_then23$$lor_lhs_false$15;
									}
									var $arrayidx21 = (($header + 8) & 4294967295);
									var $14 = HEAP32[(($arrayidx21) >> 2)];
									var $15 = HEAP32[((_samplerate) >> 2)];
									var $mul = ((($15) * 2) & 4294967295);
									var $cmp22 = ((($14)) | 0) != ((($mul)) | 0);
									if ($cmp22) {
										__label__ = 11;
										break $if_then23$$lor_lhs_false$15;
									} else {
										__label__ = 17;
										break $if_then23$$lor_lhs_false$15;
									}
								}
							} while (0);
							$if_then23$$if_end47$18: do {
								if (__label__ == 11) {
									var $16 = $f;
									var $call24 = _fclose($16);
									$f = 0;
									var $arrayidx25 = (($header + 8) & 4294967295);
									var $17 = HEAP32[(($arrayidx25) >> 2)];
									var $18 = HEAP32[((_samplerate) >> 2)];
									var $cmp26 = ((($17)) | 0) == ((($18)) | 0);
									if ($cmp26) {
										__label__ = 12;;
									} else {
										__label__ = 13;;
									}
									if (__label__ == 12) {
										$resample = ((__str13643) & 4294967295);;
									} else if (__label__ == 13) {
										$resample = ((__str57224) & 4294967295);;
									}
									var $arraydecay29 = (($fname_temp) & 4294967295);
									var $src$, $dest$, $stop$, $stop4$, $fast$;
									$src$ = ((__str58225) & 4294967295);
									$dest$ = $arraydecay29;
									$stop$ = $src$ + 18;
									if (($dest$ % 4) == ($src$ % 4) && 18 > 8) {
										while ($src$ % 4 !== 0 && $src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										}
										$src$ >>= 2;
										$dest$ >>= 2;
										$stop4$ = $stop$ >> 2;
										while ($src$ < $stop4$) {;;;
											HEAP32[$dest$++] = HEAP32[$src$++];
										}
										$src$ <<= 2;
										$dest$ <<= 2;
									}
									while ($src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									};
									var $arraydecay31 = (($fname_temp) & 4294967295);
									var $call32 = _mkstemp($arraydecay31);
									$fd_temp = $call32;
									var $cmp33 = ((($call32)) | 0) >= 0;
									if (!($cmp33)) {
										__label__ = 17;
										break $if_then23$$if_end47$18;
									}
									var $19 = $fd_temp;
									var $call35 = _close($19);
									var $arraydecay36 = (($command) & 4294967295);
									var $20 = $fname_addr;
									var $21 = HEAP32[((_samplerate) >> 2)];
									var $arraydecay37 = (($fname_temp) & 4294967295);
									var $22 = $resample;
									var $call38 = _sprintf($arraydecay36, ((__str59226) & 4294967295), allocate([$20, 0, 0, 0, $21, 0, 0, 0, $arraydecay37, 0, 0, 0, $22, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
									var $arraydecay39 = (($command) & 4294967295);
									var $call40 = _system($arraydecay39);
									var $cmp41 = ((($call40)) | 0) == 0;
									if (!($cmp41)) {
										__label__ = 17;
										break $if_then23$$if_end47$18;
									}
									var $arraydecay43 = (($fname_temp) & 4294967295);
									$fname_addr = $arraydecay43;;
								}
							} while (0);
							var $_pr = $f;
							var $cmp48 = ((($_pr)) | 0) == 0;
							if ($cmp48) {
								__label__ = 18;
								break $if_then11$$if_then49$10;
							} else {
								__label__ = 20;
								break $if_then11$$if_then49$10;
							}
						}
					} while (0);
					$if_then49$$if_end54$27: do {
						if (__label__ == 18) {
							var $23 = $fname_addr;
							var $call50 = _fopen($23, ((__str18429) & 4294967295));
							$f = $call50;
							var $cmp51 = ((($call50)) | 0) == 0;
							if (!($cmp51)) {
								__label__ = 20;
								break $if_then49$$if_end54$27;
							}
							$retval = 3;
							__label__ = 23;
							break $return$$if_end3$5;
						}
					} while (0);
					var $24 = $fname_addr;
					var $call55 = __Z13GetFileLengthPKc($24);
					$length = $call55;
					var $25 = $f;
					var $call56 = _fseek($25, 0, 0);
					var $26 = $index_addr;
					var $arrayidx57 = ((_soundicon_tab + $26 * 16) & 4294967295);
					var $data = (($arrayidx57 + 8) & 4294967295);
					var $27 = HEAP32[(($data) >> 2)];
					var $28 = $length;
					var $call58 = _realloc($27, $28);
					$p = $call58;
					var $cmp59 = ((($call58)) | 0) == 0;
					if ($cmp59) {
						__label__ = 21;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 21) {
						var $29 = $f;
						var $call61 = _fclose($29);
						$retval = 4;;
					} else if (__label__ == 22) {
						var $30 = $p;
						var $31 = $length;
						var $32 = $f;
						var $call63 = _fread($30, 1, $31, $32);
						$length = $call63;
						var $33 = $f;
						var $call64 = _fclose($33);
						var $arraydecay65 = (($fname_temp) & 4294967295);
						var $call66 = _remove($arraydecay65);
						var $34 = $p;
						var $arrayidx67 = (($34 + 40) & 4294967295);
						var $35 = $arrayidx67;
						$ip = $35;
						var $36 = $ip;
						var $37 = HEAP32[(($36) >> 2)];
						var $div = ((((($37)) | 0) / 2) | 0);
						var $38 = $index_addr;
						var $arrayidx68 = ((_soundicon_tab + $38 * 16) & 4294967295);
						var $length69 = (($arrayidx68 + 4) & 4294967295);
						HEAP32[(($length69) >> 2)] = $div;
						var $39 = $p;
						var $40 = $index_addr;
						var $arrayidx70 = ((_soundicon_tab + $40 * 16) & 4294967295);
						var $data71 = (($arrayidx70 + 8) & 4294967295);
						HEAP32[(($data71) >> 2)] = $39;
						$retval = 0;;
					}
				}
			} while (0);
			var $41 = $retval;
			STACKTOP = __stackBase__;
			return $41;
			return null;
		}

		function __ZL14PushParamStacki($tag_type) {;
			var __label__;
			var $tag_type_addr;
			var $ix;
			var $sp;
			$tag_type_addr = $tag_type;
			var $0 = HEAP32[((__ZL13n_param_stack) >> 2)];
			var $arrayidx = ((_param_stack + $0 * 64) & 4294967295);
			$sp = $arrayidx;
			var $cmp = ((($0)) | 0) < 19;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__ZL13n_param_stack) >> 2)];
				var $inc = ((($1) + 1) & 4294967295);
				HEAP32[((__ZL13n_param_stack) >> 2)] = $inc;;
			}
			var $2 = $tag_type_addr;
			var $3 = $sp;
			var $type = (($3) & 4294967295);
			HEAP32[(($type) >> 2)] = $2;
			$ix = 0;;
			while (1) {
				var $4 = $ix;
				var $5 = $sp;
				var $parameter = (($5 + 4) & 4294967295);
				var $arrayidx2 = (($parameter + $4 * 4) & 4294967295);
				HEAP32[(($arrayidx2) >> 2)] = -1;
				var $6 = $ix;
				var $inc3 = ((($6) + 1) & 4294967295);
				$ix = $inc3;
				var $cmp1 = ((($inc3)) | 0) < 15;
				if ($cmp1) {
					__label__ = 3;
					continue;
				} else {
					__label__ = 4;
					break;
				}
			}
			var $7 = $sp;;
			return $7;
			return null;
		}

		function __ZL16GetSsmlAttributePwPKc($pw, $name) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $pw_addr;
			var $name_addr;
			var $ix;
			$pw_addr = $pw;
			$name_addr = $name;;
			$while_cond$2: while (1) {
				var $0 = $pw_addr;
				var $1 = HEAP32[(($0) >> 2)];
				var $cmp = ((($1)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 17;
					break $while_cond$2;
				}
				var $2 = $pw_addr;
				var $arrayidx = (($2 + -4) & 4294967295);
				var $3 = HEAP32[(($arrayidx) >> 2)];
				var $call = _iswspace($3);
				var $tobool = ((($call)) | 0) != 0;
				if ($tobool) {
					__label__ = 3;;
				} else {
					__label__ = 16;;
				}
				if (__label__ == 3) {
					$ix = 0;
					var $4 = $pw_addr;
					var $5 = HEAP32[(($4) >> 2)];
					var $6 = $ix;
					var $7 = $name_addr;
					var $arrayidx27 = (($7 + $6) & 4294967295);
					var $8 = HEAP8[($arrayidx27)];
					var $conv8 = (tempInt = (($8)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp39 = ((($5)) | 0) == ((($conv8)) | 0);
					if ($cmp39) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					$while_body4$$while_end$7: do {
						if (__label__ == 4) {
							while (1) {
								var $9 = $pw_addr;
								var $incdec_ptr = (($9 + 4) & 4294967295);
								$pw_addr = $incdec_ptr;
								var $10 = $ix;
								var $inc = ((($10) + 1) & 4294967295);
								$ix = $inc;
								var $11 = $pw_addr;
								var $12 = HEAP32[(($11) >> 2)];
								var $13 = $ix;
								var $14 = $name_addr;
								var $arrayidx2 = (($14 + $13) & 4294967295);
								var $15 = HEAP8[($arrayidx2)];
								var $conv = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp3 = ((($12)) | 0) == ((($conv)) | 0);
								if ($cmp3) {
									__label__ = 4;
									continue;
								} else {
									__label__ = 5;
									break $while_body4$$while_end$7;
								}
							}
						}
					} while (0);
					var $16 = $ix;
					var $17 = $name_addr;
					var $arrayidx5 = (($17 + $16) & 4294967295);
					var $18 = HEAP8[($arrayidx5)];
					var $conv6 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp7 = ((($conv6)) | 0) == 0;
					if ($cmp7) {
						__label__ = 6;
						break $while_cond$2;
					}
				}
				var $39 = $pw_addr;
				var $incdec_ptr29 = (($39 + 4) & 4294967295);
				$pw_addr = $incdec_ptr29;
				__label__ = 1;
				continue $while_cond$2;
			}
			$while_end30$$while_cond9_preheader$12: do {
				if (__label__ == 17) {
					$retval = 0;;
				} else if (__label__ == 6) {
					var $19 = $pw_addr;
					var $20 = HEAP32[(($19) >> 2)];
					var $call104 = _iswspace($20);
					var $tobool115 = ((($call104)) | 0) != 0;
					var $21 = $pw_addr;
					if ($tobool115) {
						__lastLabel__ = 6;
						__label__ = 7;;
					} else {
						__lastLabel__ = 6;
						__label__ = 8;;
					}
					$while_body12$$while_end14$15: do {
						if (__label__ == 7) {
							while (1) {
								var $22 = __lastLabel__ == 7 ? $25 : ($21);
								var $incdec_ptr13 = (($22 + 4) & 4294967295);
								$pw_addr = $incdec_ptr13;
								var $23 = $pw_addr;
								var $24 = HEAP32[(($23) >> 2)];
								var $call10 = _iswspace($24);
								var $tobool11 = ((($call10)) | 0) != 0;
								var $25 = $pw_addr;
								if ($tobool11) {
									__lastLabel__ = 7;
									__label__ = 7;
									continue;
								} else {
									__lastLabel__ = 7;
									__label__ = 8;
									break $while_body12$$while_end14$15;
								}
							}
						}
					} while (0);
					var $_lcssa3 = __lastLabel__ == 6 ? $21 : ($25);
					var $26 = HEAP32[(($_lcssa3) >> 2)];
					var $cmp15 = ((($26)) | 0) == 61;
					if ($cmp15) {
						__label__ = 9;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 9) {
						var $27 = $pw_addr;
						var $incdec_ptr17 = (($27 + 4) & 4294967295);
						$pw_addr = $incdec_ptr17;;
					}
					var $28 = $pw_addr;
					var $29 = HEAP32[(($28) >> 2)];
					var $call191 = _iswspace($29);
					var $tobool202 = ((($call191)) | 0) != 0;
					var $30 = $pw_addr;
					if ($tobool202) {
						__lastLabel__ = 10;
						__label__ = 11;;
					} else {
						__lastLabel__ = 10;
						__label__ = 12;;
					}
					$while_body21$$while_end23$22: do {
						if (__label__ == 11) {
							while (1) {
								var $31 = __lastLabel__ == 11 ? $34 : ($30);
								var $incdec_ptr22 = (($31 + 4) & 4294967295);
								$pw_addr = $incdec_ptr22;
								var $32 = $pw_addr;
								var $33 = HEAP32[(($32) >> 2)];
								var $call19 = _iswspace($33);
								var $tobool20 = ((($call19)) | 0) != 0;
								var $34 = $pw_addr;
								if ($tobool20) {
									__lastLabel__ = 11;
									__label__ = 11;
									continue;
								} else {
									__lastLabel__ = 11;
									__label__ = 12;
									break $while_body21$$while_end23$22;
								}
							}
						}
					} while (0);
					var $_lcssa = __lastLabel__ == 10 ? $30 : ($34);
					var $35 = HEAP32[(($_lcssa) >> 2)];
					var $cmp24 = ((($35)) | 0) == 34;
					if ($cmp24) {
						__label__ = 14;;
					} else {
						__label__ = 13;;
					}
					$if_then26$$lor_lhs_false$26: do {
						if (__label__ == 13) {
							var $36 = $pw_addr;
							var $37 = HEAP32[(($36) >> 2)];
							var $cmp25 = ((($37)) | 0) == 39;
							if ($cmp25) {
								__label__ = 14;
								break $if_then26$$lor_lhs_false$26;
							}
							$retval = ((__ZZL16GetSsmlAttributePwPKcE5empty) & 4294967295);
							__label__ = 18;
							break $while_end30$$while_cond9_preheader$12;
						}
					} while (0);
					var $38 = $pw_addr;
					var $add_ptr = (($38 + 4) & 4294967295);
					$retval = $add_ptr;;
				}
			} while (0);
			var $40 = $retval;;
			return $40;
			return null;
		}

		function __ZL7attrcmpPKwPKc($string1, $string2) {;
			var __label__;
			var $retval;
			var $string1_addr;
			var $string2_addr;
			var $ix;
			$string1_addr = $string1;
			$string2_addr = $string2;
			var $0 = $string1_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					$retval = 1;;
				} else if (__label__ == 2) {
					$ix = 0;;
					$for_cond$5: while (1) {
						var $1 = $ix;
						var $2 = $string1_addr;
						var $arrayidx = (($2 + 4 * $1) & 4294967295);
						var $3 = HEAP32[(($arrayidx) >> 2)];
						var $4 = $ix;
						var $5 = $string2_addr;
						var $arrayidx1 = (($5 + $4) & 4294967295);
						var $6 = HEAP8[($arrayidx1)];
						var $conv = (tempInt = (($6)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp2 = ((($3)) | 0) == ((($conv)) | 0);
						if (!($cmp2)) {
							__label__ = 6;
							break $for_cond$5;
						}
						var $7 = $ix;
						var $8 = $string1_addr;
						var $arrayidx3 = (($8 + 4 * $7) & 4294967295);
						var $9 = HEAP32[(($arrayidx3) >> 2)];
						var $cmp4 = ((($9)) | 0) != 0;
						if (!($cmp4)) {
							__label__ = 6;
							break $for_cond$5;
						}
						var $10 = $ix;
						var $inc = ((($10) + 1) & 4294967295);
						$ix = $inc;
						__label__ = 3;
						continue $for_cond$5;
					}
					var $11 = $ix;
					var $12 = $string1_addr;
					var $arrayidx5 = (($12 + 4 * $11) & 4294967295);
					var $13 = HEAP32[(($arrayidx5) >> 2)];
					var $cmp6 = ((($13)) | 0) == 34;
					if ($cmp6) {
						__label__ = 8;;
					} else {
						__label__ = 7;;
					}
					$land_lhs_true$$lor_lhs_false$10: do {
						if (__label__ == 7) {
							var $14 = $ix;
							var $15 = $string1_addr;
							var $arrayidx7 = (($15 + 4 * $14) & 4294967295);
							var $16 = HEAP32[(($arrayidx7) >> 2)];
							var $cmp8 = ((($16)) | 0) == 39;
							if ($cmp8) {
								__label__ = 8;
								break $land_lhs_true$$lor_lhs_false$10;
							} else {
								__label__ = 10;
								break $land_lhs_true$$lor_lhs_false$10;
							}
						}
					} while (0);
					$land_lhs_true$$if_end13$12: do {
						if (__label__ == 8) {
							var $17 = $ix;
							var $18 = $string2_addr;
							var $arrayidx9 = (($18 + $17) & 4294967295);
							var $19 = HEAP8[($arrayidx9)];
							var $conv10 = (tempInt = (($19)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp11 = ((($conv10)) | 0) == 0;
							if (!($cmp11)) {
								__label__ = 10;
								break $land_lhs_true$$if_end13$12;
							}
							$retval = 0;
							__label__ = 11;
							break $if_then$$if_end$2;
						}
					} while (0);
					$retval = 1;;
				}
			} while (0);
			var $20 = $retval;;
			return $20;
			return null;
		}

		function __ZL10attrlookupPKwPK8MNEM_TAB($string1, $mtab) {;
			var __label__;
			var $retval;
			var $string1_addr;
			var $mtab_addr;
			var $ix;
			$string1_addr = $string1;
			$mtab_addr = $mtab;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = $mtab_addr;
				var $arrayidx = (($1 + 8 * $0) & 4294967295);
				var $mnem = (($arrayidx) & 4294967295);
				var $2 = HEAP32[(($mnem) >> 2)];
				var $cmp = ((($2)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $3 = $string1_addr;
				var $4 = $ix;
				var $5 = $mtab_addr;
				var $arrayidx1 = (($5 + 8 * $4) & 4294967295);
				var $mnem2 = (($arrayidx1) & 4294967295);
				var $6 = HEAP32[(($mnem2) >> 2)];
				var $call = __ZL7attrcmpPKwPKc($3, $6);
				var $cmp3 = ((($call)) | 0) == 0;
				var $7 = $ix;
				if ($cmp3) {
					__label__ = 3;
					break;
				}
				var $inc = ((($7) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue;
			}
			if (__label__ == 5) {
				var $10 = $ix;
				var $11 = $mtab_addr;
				var $arrayidx5 = (($11 + 8 * $10) & 4294967295);
				var $value6 = (($arrayidx5 + 4) & 4294967295);
				var $12 = HEAP32[(($value6) >> 2)];
				$retval = $12;;
			} else if (__label__ == 3) {
				var $8 = $mtab_addr;
				var $arrayidx4 = (($8 + 8 * $7) & 4294967295);
				var $value = (($arrayidx4 + 4) & 4294967295);
				var $9 = HEAP32[(($value) >> 2)];
				$retval = $9;;
			}
			var $13 = $retval;;
			return $13;
			return null;
		}

		function __ZL17ProcessParamStackPcRi($outbuf, $outix) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 80;
			_memset(__stackBase__, 0, 80);
			var __label__;
			var $outbuf_addr;
			var $outix_addr;
			var $param;
			var $ix;
			var $value;
			var $buf = __stackBase__;
			var $new_parameters = __stackBase__ + 20;
			$outbuf_addr = $outbuf;
			$outix_addr = $outix;
			$param = 0;;
			$for_body$2: while (1) {
				var $0 = $param;
				var $arrayidx = (($new_parameters + $0 * 4) & 4294967295);
				HEAP32[(($arrayidx) >> 2)] = -1;
				var $1 = $param;
				var $inc = ((($1) + 1) & 4294967295);
				$param = $inc;
				var $cmp = ((($inc)) | 0) < 15;
				if ($cmp) {
					__label__ = 1;
					continue $for_body$2;
				} else {
					__label__ = 2;
					break $for_body$2;
				}
			}
			$ix = 0;
			var $2 = $ix;
			var $3 = HEAP32[((__ZL13n_param_stack) >> 2)];
			var $cmp22 = ((($2)) | 0) < ((($3)) | 0);
			$param = 0;
			if ($cmp22) {
				__label__ = 4;;
			} else {
				__label__ = 3;;
			}
			$for_body6$$for_cond20_preheader$5: do {
				if (__label__ == 4) {
					while (1) {
						var $4 = $param;
						var $5 = $ix;
						var $arrayidx7 = ((_param_stack + $5 * 64) & 4294967295);
						var $parameter = (($arrayidx7 + 4) & 4294967295);
						var $arrayidx8 = (($parameter + $4 * 4) & 4294967295);
						var $6 = HEAP32[(($arrayidx8) >> 2)];
						var $cmp9 = ((($6)) | 0) >= 0;
						if ($cmp9) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							var $7 = $param;
							var $8 = $ix;
							var $arrayidx10 = ((_param_stack + $8 * 64) & 4294967295);
							var $parameter11 = (($arrayidx10 + 4) & 4294967295);
							var $arrayidx12 = (($parameter11 + $7 * 4) & 4294967295);
							var $9 = HEAP32[(($arrayidx12) >> 2)];
							var $10 = $param;
							var $arrayidx13 = (($new_parameters + $10 * 4) & 4294967295);
							HEAP32[(($arrayidx13) >> 2)] = $9;;
						}
						var $11 = $param;
						var $inc15 = ((($11) + 1) & 4294967295);
						$param = $inc15;
						var $cmp5 = ((($inc15)) | 0) < 15;
						if ($cmp5) {
							__label__ = 4;
							continue;
						}
						var $12 = $ix;
						var $inc18 = ((($12) + 1) & 4294967295);
						$ix = $inc18;
						var $13 = $ix;
						var $14 = HEAP32[((__ZL13n_param_stack) >> 2)];
						var $cmp2 = ((($13)) | 0) < ((($14)) | 0);
						$param = 0;
						if ($cmp2) {
							__label__ = 4;
							continue;
						} else {
							__label__ = 3;
							break $for_body6$$for_cond20_preheader$5;
						}
					}
				}
			} while (0);
			var $arrayidx27 = (($buf) & 4294967295);
			var $arraydecay34 = (($buf) & 4294967295);
			var $arraydecay36 = (($buf) & 4294967295);
			var $arraydecay = (($buf) & 4294967295);;
			while (1) {
				var $15 = $param;
				var $arrayidx23 = (($new_parameters + $15 * 4) & 4294967295);
				var $16 = HEAP32[(($arrayidx23) >> 2)];
				$value = $16;
				var $17 = $param;
				var $arrayidx24 = ((__ZL17speech_parameters + $17 * 4) & 4294967295);
				var $18 = HEAP32[(($arrayidx24) >> 2)];
				var $cmp25 = ((($16)) | 0) != ((($18)) | 0);
				if ($cmp25) {
					__label__ = 9;;
				} else {
					__label__ = 14;;
				}
				if (__label__ == 9) {
					HEAP8[($arrayidx27)] = 0;
					var $19 = $param;
					if ($19 == 5) {
						__label__ = 10;;
					} else if ($19 == 6) {
						__label__ = 11;;
					} else if ($19 == 1) {
						__label__ = 12;;
					} else if ($19 == 2) {
						__label__ = 12;;
					} else if ($19 == 3) {
						__label__ = 12;;
					} else if ($19 == 4) {
						__label__ = 12;;
					} else if ($19 == 12) {
						__label__ = 12;;
					} else {
						__label__ = 13;;
					}
					if (__label__ == 10) {
						var $20 = $value;
						var $sub = ((($20) - 1) & 4294967295);
						HEAP32[((_option_punctuation) >> 2)] = $sub;;
					} else if (__label__ == 11) {
						var $21 = $value;
						HEAP32[((_option_capitals) >> 2)] = $21;;
					} else if (__label__ == 12) {
						var $22 = $value;
						var $23 = $param;
						var $arrayidx30 = ((__ZZL17ProcessParamStackPcRiE10cmd_letter + $23) & 4294967295);
						var $24 = HEAP8[($arrayidx30)];
						var $conv = (tempInt = (($24)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call = _sprintf($arraydecay, ((__str128) & 4294967295), allocate([1, 0, 0, 0, $22, 0, 0, 0, $conv, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
					}
					var $25 = $param;
					var $arrayidx31 = (($new_parameters + $25 * 4) & 4294967295);
					var $26 = HEAP32[(($arrayidx31) >> 2)];
					var $27 = $param;
					var $arrayidx32 = ((__ZL17speech_parameters + $27 * 4) & 4294967295);
					HEAP32[(($arrayidx32) >> 2)] = $26;
					var $28 = $outix_addr;
					var $29 = HEAP32[(($28) >> 2)];
					var $30 = $outbuf_addr;
					var $arrayidx33 = (($30 + $29) & 4294967295);
					var $call35 = _strcpy($arrayidx33, $arraydecay34);
					var $call37 = _strlen($arraydecay36);
					var $31 = $outix_addr;
					var $32 = HEAP32[(($31) >> 2)];
					var $add = ((($32) + ($call37)) & 4294967295);
					HEAP32[(($31) >> 2)] = $add;;
				}
				var $33 = $param;
				var $inc40 = ((($33) + 1) & 4294967295);
				$param = $inc40;
				var $cmp21 = ((($inc40)) | 0) < 15;
				if ($cmp21) {
					__label__ = 8;
					continue;
				} else {
					__label__ = 15;
					break;
				}
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL19SetProsodyParameteriPwP11PARAM_STACK($param_type, $attr1, $sp) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $param_type_addr;
			var $attr1_addr;
			var $sp_addr;
			var $value = __stackBase__;
			var $sign;
			$param_type_addr = $param_type;
			$attr1_addr = $attr1;
			$sp_addr = $sp;
			var $0 = $attr1_addr;
			var $1 = $param_type_addr;
			var $arrayidx = ((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs + $1 * 4) & 4294967295);
			var $2 = HEAP32[(($arrayidx) >> 2)];
			var $call = __ZL10attrlookupPKwPK8MNEM_TAB($0, $2);
			HEAP32[(($value) >> 2)] = $call;
			var $cmp = ((($call)) | 0) >= 0;
			var $3 = $param_type_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $arrayidx1 = ((((_param_stack + 4) & 4294967295) + $3 * 4) & 4294967295);
				var $4 = HEAP32[(($arrayidx1) >> 2)];
				var $5 = HEAP32[(($value) >> 2)];
				var $mul = ((($5) * ($4)) & 4294967295);
				var $div = ((((($mul)) | 0) / 100) | 0);
				var $6 = $param_type_addr;
				var $7 = $sp_addr;
				var $parameter = (($7 + 4) & 4294967295);
				var $arrayidx2 = (($parameter + $6 * 4) & 4294967295);
				HEAP32[(($arrayidx2) >> 2)] = $div;;
			} else if (__label__ == 2) {
				var $8 = $attr1_addr;
				var $call3 = __ZL18attr_prosody_valueiPKwPi($3, $8, $value);
				$sign = $call3;
				var $9 = $sign;
				var $cmp4 = ((($9)) | 0) == 0;
				if ($cmp4) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $10 = HEAP32[(($value) >> 2)];
					var $11 = $param_type_addr;
					var $12 = $sp_addr;
					var $parameter6 = (($12 + 4) & 4294967295);
					var $arrayidx7 = (($parameter6 + $11 * 4) & 4294967295);
					HEAP32[(($arrayidx7) >> 2)] = $10;;
				} else if (__label__ == 4) {
					var $13 = $sign;
					var $cmp9 = ((($13)) | 0) == 2;
					var $14 = $param_type_addr;
					var $arrayidx11 = ((__ZL17speech_parameters + $14 * 4) & 4294967295);
					var $15 = HEAP32[(($arrayidx11) >> 2)];
					var $16 = HEAP32[(($value) >> 2)];
					if ($cmp9) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $mul12 = ((($16) * ($15)) & 4294967295);
						var $div13 = ((((($mul12)) | 0) / 100) | 0);
						var $17 = $param_type_addr;
						var $18 = $sp_addr;
						var $parameter14 = (($18 + 4) & 4294967295);
						var $arrayidx15 = (($parameter14 + $17 * 4) & 4294967295);
						HEAP32[(($arrayidx15) >> 2)] = $div13;;
					} else if (__label__ == 6) {
						var $19 = $sign;
						var $mul18 = ((($19) * ($16)) & 4294967295);
						var $add = ((($mul18) + ($15)) & 4294967295);
						var $20 = $param_type_addr;
						var $21 = $sp_addr;
						var $parameter19 = (($21 + 4) & 4294967295);
						var $arrayidx20 = (($parameter19 + $20 * 4) & 4294967295);
						HEAP32[(($arrayidx20) >> 2)] = $add;;
					}
				}
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL13PopParamStackiPcRi($tag_type, $outbuf, $outix) {;
			var __label__;
			var $tag_type_addr;
			var $outbuf_addr;
			var $outix_addr;
			var $ix;
			var $top;
			$tag_type_addr = $tag_type;
			$outbuf_addr = $outbuf;
			$outix_addr = $outix;
			$top = 0;
			var $0 = $tag_type_addr;
			var $cmp = ((($0)) | 0) >= 32;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $tag_type_addr;
				var $sub = ((($1) - 32) & 4294967295);
				$tag_type_addr = $sub;;
			}
			$ix = 0;
			var $2 = $ix;
			var $3 = HEAP32[((__ZL13n_param_stack) >> 2)];
			var $cmp11 = ((($2)) | 0) < ((($3)) | 0);
			if ($cmp11) {
				__label__ = 3;;
			} else {
				__label__ = 6;;
			}
			$for_body$$for_end$5: do {
				if (__label__ == 3) {
					while (1) {
						var $4 = $ix;
						var $arrayidx = ((_param_stack + $4 * 64) & 4294967295);
						var $type = (($arrayidx) & 4294967295);
						var $5 = HEAP32[(($type) >> 2)];
						var $6 = $tag_type_addr;
						var $cmp2 = ((($5)) | 0) == ((($6)) | 0);
						if ($cmp2) {
							__label__ = 4;;
						} else {
							__label__ = 5;;
						}
						if (__label__ == 4) {
							var $7 = $ix;
							$top = $7;;
						}
						var $8 = $ix;
						var $inc = ((($8) + 1) & 4294967295);
						$ix = $inc;
						var $9 = $ix;
						var $10 = HEAP32[((__ZL13n_param_stack) >> 2)];
						var $cmp1 = ((($9)) | 0) < ((($10)) | 0);
						if ($cmp1) {
							__label__ = 3;
							continue;
						} else {
							__label__ = 6;
							break $for_body$$for_end$5;
						}
					}
				}
			} while (0);
			var $11 = $top;
			var $cmp5 = ((($11)) | 0) > 0;
			if ($cmp5) {
				__label__ = 7;;
			} else {
				__label__ = 8;;
			}
			if (__label__ == 7) {
				var $12 = $top;
				HEAP32[((__ZL13n_param_stack) >> 2)] = $12;;
			}
			var $13 = $outbuf_addr;
			var $14 = $outix_addr;
			__ZL17ProcessParamStackPcRi($13, $14);;
			return;
			return;
		}

		function __ZL10attrnumberPKwii($pw, $default_value, $type) {;
			var __label__;
			var $retval;
			var $pw_addr;
			var $default_value_addr;
			var $type_addr;
			var $value;
			$pw_addr = $pw;
			$default_value_addr = $default_value;
			$type_addr = $type;
			$value = 0;
			var $0 = $pw_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 1;;
			}
			$if_then$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $1 = $pw_addr;
					var $2 = HEAP32[(($1) >> 2)];
					var $isdigittmp = ((($2) - 48) & 4294967295);
					var $isdigit = ((($isdigittmp)) >>> 0) < 10;
					var $call = ((($isdigit)) & 1);
					var $tobool = ((($call)) | 0) != 0;
					if (!($tobool)) {
						__label__ = 3;
						break $if_then$$lor_lhs_false$2;
					}
					var $3 = $pw_addr;
					var $4 = HEAP32[(($3) >> 2)];
					var $isdigittmp13 = ((($4) - 48) & 4294967295);
					var $isdigit24 = ((($isdigittmp13)) >>> 0) < 10;
					if ($isdigit24) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					$while_body$$while_end$5: do {
						if (__label__ == 4) {
							while (1) {
								var $6 = $value;
								var $mul = ((($6) * 10) & 4294967295);
								var $7 = $pw_addr;
								var $incdec_ptr = (($7 + 4) & 4294967295);
								$pw_addr = $incdec_ptr;
								var $8 = HEAP32[(($7) >> 2)];
								var $add = ((($mul) - 48) & 4294967295);
								var $sub = ((($add) + ($8)) & 4294967295);
								$value = $sub;
								var $9 = $pw_addr;
								var $10 = HEAP32[(($9) >> 2)];
								var $isdigittmp1 = ((($10) - 48) & 4294967295);
								var $isdigit2 = ((($isdigittmp1)) >>> 0) < 10;
								var $call1 = ((($isdigit2)) & 1);
								var $tobool2 = ((($call1)) | 0) != 0;
								if ($tobool2) {
									__label__ = 4;
									continue;
								} else {
									__label__ = 5;
									break $while_body$$while_end$5;
								}
							}
						}
					} while (0);
					var $11 = $type_addr;
					var $cmp3 = ((($11)) | 0) == 1;
					if ($cmp3) {
						__label__ = 6;;
					} else {
						__label__ = 8;;
					}
					$land_lhs_true$$if_end8$9: do {
						if (__label__ == 6) {
							var $12 = $pw_addr;
							var $13 = HEAP32[(($12) >> 2)];
							var $call4 = _towlower($13);
							var $cmp5 = ((($call4)) | 0) == 115;
							if (!($cmp5)) {
								__label__ = 8;
								break $land_lhs_true$$if_end8$9;
							}
							var $14 = $value;
							var $mul7 = ((($14) * 1000) & 4294967295);
							$value = $mul7;;
						}
					} while (0);
					var $15 = $value;
					$retval = $15;
					__label__ = 9;
					break $if_then$$lor_lhs_false$2;
				}
			} while (0);
			if (__label__ == 3) {
				var $5 = $default_value_addr;
				$retval = $5;;
			}
			var $16 = $retval;;
			return $16;
			return null;
		}

		function __ZL14ReplaceKeyNamePciRi($outbuf, $index, $outix) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 40;
			_memset(__stackBase__, 0, 40);
			var __label__;
			var $retval;
			var $outbuf_addr;
			var $index_addr;
			var $outix_addr;
			var $keynames = __stackBase__;
			var $ix;
			var $letter;
			var $p;
			$outbuf_addr = $outbuf;
			$index_addr = $index;
			$outix_addr = $outix;
			var $0 = $keynames;
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = __ZZL14ReplaceKeyNamePciRiE8keynames;
			$dest$ = $0;
			$stop$ = $src$ + 40;
			if (($dest$ % 4) == ($src$ % 4) && 40 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			var $1 = $index_addr;
			var $2 = $outbuf_addr;
			var $arrayidx = (($2 + $1) & 4294967295);
			$p = $arrayidx;
			var $arraydecay = (($keynames) & 4294967295);
			var $3 = $p;
			var $call = __Z10LookupMnemP8MNEM_TABPKc($arraydecay, $3);
			$letter = $call;
			var $cmp = ((($call)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $4 = $letter;
				var $5 = $p;
				var $call1 = __Z8utf8_outjPc($4, $5);
				$ix = $call1;
				var $6 = $index_addr;
				var $7 = $ix;
				var $add = ((($7) + ($6)) & 4294967295);
				var $8 = $outix_addr;
				HEAP32[(($8) >> 2)] = $add;
				var $9 = $letter;
				$retval = $9;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL13attrcopy_utf8PcPKwi($buf, $pw, $len) {;
			var __label__;
			var $buf_addr;
			var $pw_addr;
			var $len_addr;
			var $c;
			var $ix;
			var $n;
			var $prev_c;
			$buf_addr = $buf;
			$pw_addr = $pw;
			$len_addr = $len;
			$ix = 0;
			$prev_c = 0;
			var $0 = $pw_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 6;;
			}
			$while_cond$$if_end6$2: do {
				if (__label__ == 1) {
					while (1) {
						var $1 = $ix;
						var $2 = $len_addr;
						var $sub = ((($2) - 4) & 4294967295);
						var $cmp1 = ((($1)) | 0) < ((($sub)) | 0);
						if (!($cmp1)) {
							__label__ = 6;
							break $while_cond$$if_end6$2;
						}
						var $3 = $pw_addr;
						var $incdec_ptr = (($3 + 4) & 4294967295);
						$pw_addr = $incdec_ptr;
						var $4 = HEAP32[(($3) >> 2)];
						$c = $4;
						var $cmp2 = ((($4)) | 0) != 0;
						if (!($cmp2)) {
							__label__ = 6;
							break $while_cond$$if_end6$2;
						}
						var $5 = $c;
						var $cmp3 = ((($5)) | 0) == 34;
						if ($cmp3) {
							__label__ = 4;;
						} else {
							__label__ = 5;;
						}
						if (__label__ == 4) {
							var $6 = $prev_c;
							var $cmp4 = ((($6)) | 0) != 92;
							if ($cmp4) {
								__label__ = 6;
								break $while_cond$$if_end6$2;
							}
						}
						var $7 = $c;
						var $8 = $ix;
						var $9 = $buf_addr;
						var $arrayidx = (($9 + $8) & 4294967295);
						var $call = __Z8utf8_outjPc($7, $arrayidx);
						$n = $call;
						var $10 = $n;
						var $11 = $ix;
						var $add = ((($11) + ($10)) & 4294967295);
						$ix = $add;
						var $12 = $c;
						$prev_c = $12;
						__label__ = 1;
						continue;
					}
				}
			} while (0);
			var $13 = $ix;
			var $14 = $buf_addr;
			var $arrayidx7 = (($14 + $13) & 4294967295);
			HEAP8[($arrayidx7)] = 0;
			var $15 = $ix;;
			return $15;
			return null;
		}

		function __ZL14LoadSoundFile2PKc($fname) {;
			var __label__;
			var $retval;
			var $fname_addr;
			var $ix;
			$fname_addr = $fname;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_n_soundicon_tab) >> 2)];
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 6;
					break;
				}
				var $2 = $ix;
				var $arrayidx = ((_soundicon_tab + $2 * 16) & 4294967295);
				var $filename = (($arrayidx + 12) & 4294967295);
				var $3 = HEAP32[(($filename) >> 2)];
				var $cmp1 = ((($3)) | 0) != 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 3) {
					var $4 = $fname_addr;
					var $5 = $ix;
					var $arrayidx2 = ((_soundicon_tab + $5 * 16) & 4294967295);
					var $filename3 = (($arrayidx2 + 12) & 4294967295);
					var $6 = HEAP32[(($filename3) >> 2)];
					var $call = _strcmp($4, $6);
					var $cmp4 = ((($call)) | 0) == 0;
					if ($cmp4) {
						__label__ = 4;
						break;
					}
				}
				var $8 = $ix;
				var $inc = ((($8) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue;
			}
			if (__label__ == 6) {
				var $9 = HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)];
				var $inc5 = ((($9) + 1) & 4294967295);
				HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)] = $inc5;
				var $10 = HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)];
				var $cmp6 = ((($10)) | 0) >= 4;
				if ($cmp6) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)] = 0;;
				}
				var $11 = $fname_addr;
				var $12 = HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)];
				var $call9 = __ZL13LoadSoundFilePKci($11, $12);
				var $cmp10 = ((($call9)) | 0) != 0;
				if ($cmp10) {
					__label__ = 9;;
				} else {
					__label__ = 10;;
				}
				if (__label__ == 9) {
					$retval = -1;;
				} else if (__label__ == 10) {
					var $13 = $ix;
					var $arrayidx13 = ((_soundicon_tab + $13 * 16) & 4294967295);
					var $filename14 = (($arrayidx13 + 12) & 4294967295);
					var $14 = HEAP32[(($filename14) >> 2)];
					var $15 = $fname_addr;
					var $call15 = _strlen($15);
					var $add = ((($call15) + 1) & 4294967295);
					var $call16 = _realloc($14, $add);
					var $16 = HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)];
					var $arrayidx17 = ((_soundicon_tab + $16 * 16) & 4294967295);
					var $filename18 = (($arrayidx17 + 12) & 4294967295);
					HEAP32[(($filename18) >> 2)] = $call16;
					var $17 = HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)];
					var $arrayidx19 = ((_soundicon_tab + $17 * 16) & 4294967295);
					var $filename20 = (($arrayidx19 + 12) & 4294967295);
					var $18 = HEAP32[(($filename20) >> 2)];
					var $19 = $fname_addr;
					var $call21 = _strcpy($18, $19);
					var $20 = HEAP32[((__ZZL14LoadSoundFile2PKcE4slot) >> 2)];
					$retval = $20;;
				}
			} else if (__label__ == 4) {
				var $7 = $ix;
				$retval = $7;;
			}
			var $21 = $retval;;
			return $21;
			return null;
		}

		function __ZL18GetVoiceAttributesPwi($pw, $tag_type) {;
			var __label__;
			var $retval;
			var $pw_addr;
			var $tag_type_addr;
			var $lang;
			var $gender;
			var $name;
			var $age;
			var $variant;
			var $new_voice_id;
			var $ssml_sp;
			$pw_addr = $pw;
			$tag_type_addr = $tag_type;
			var $0 = $tag_type_addr;
			var $and = ($0) & 32;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_else$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
					var $cmp = ((($1)) | 0) > 1;
					if (!($cmp)) {
						__label__ = 10;
						break $if_then$$if_else$2;
					}
					var $2 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
					var $dec = ((($2) - 1) & 4294967295);
					HEAP32[((__ZL12n_ssml_stack) >> 2)] = $dec;
					__label__ = 10;
					break $if_then$$if_else$2;
				} else if (__label__ == 3) {
					var $3 = $pw_addr;
					var $call = __ZL16GetSsmlAttributePwPKc($3, ((__str106273) & 4294967295));
					$lang = $call;
					var $4 = $tag_type_addr;
					var $cmp2 = ((($4)) | 0) != 2;
					if ($cmp2) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 4) {
						$name = 0;
						$variant = 0;
						$age = 0;
						$gender = 0;;
					} else if (__label__ == 5) {
						var $5 = $pw_addr;
						var $call5 = __ZL16GetSsmlAttributePwPKc($5, ((__str5655) & 4294967295));
						$name = $call5;
						var $6 = $pw_addr;
						var $call6 = __ZL16GetSsmlAttributePwPKc($6, ((__str55707) & 4294967295));
						$variant = $call6;
						var $7 = $pw_addr;
						var $call7 = __ZL16GetSsmlAttributePwPKc($7, ((__str108275) & 4294967295));
						$age = $call7;
						var $8 = $pw_addr;
						var $call8 = __ZL16GetSsmlAttributePwPKc($8, ((__str7657) & 4294967295));
						$gender = $call8;;
					}
					var $9 = $tag_type_addr;
					var $cmp10 = ((($9)) | 0) != 2;
					if ($cmp10) {
						__label__ = 7;;
					} else {
						__label__ = 9;;
					}
					$land_lhs_true$$if_end13$10: do {
						if (__label__ == 7) {
							var $10 = $lang;
							var $cmp11 = ((($10)) | 0) == 0;
							if (!($cmp11)) {
								__label__ = 9;
								break $land_lhs_true$$if_end13$10;
							}
							$retval = 0;
							__label__ = 13;
							break $if_then$$if_else$2;
						}
					} while (0);
					var $11 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
					var $inc = ((($11) + 1) & 4294967295);
					HEAP32[((__ZL12n_ssml_stack) >> 2)] = $inc;
					var $arrayidx = ((__ZL10ssml_stack + $11 * 76) & 4294967295);
					$ssml_sp = $arrayidx;
					var $12 = $ssml_sp;
					var $language = (($12 + 56) & 4294967295);
					var $arraydecay = (($language) & 4294967295);
					var $13 = $lang;
					var $call14 = __ZL13attrcopy_utf8PcPKwi($arraydecay, $13, 20);
					var $14 = $ssml_sp;
					var $voice_name = (($14 + 16) & 4294967295);
					var $arraydecay15 = (($voice_name) & 4294967295);
					var $15 = $name;
					var $call16 = __ZL13attrcopy_utf8PcPKwi($arraydecay15, $15, 40);
					var $16 = $variant;
					var $call17 = __ZL10attrnumberPKwii($16, 1, 0);
					var $sub = ((($call17) - 1) & 4294967295);
					var $17 = $ssml_sp;
					var $voice_variant = (($17 + 4) & 4294967295);
					HEAP32[(($voice_variant) >> 2)] = $sub;
					var $18 = $age;
					var $call18 = __ZL10attrnumberPKwii($18, 0, 0);
					var $19 = $ssml_sp;
					var $voice_age = (($19 + 12) & 4294967295);
					HEAP32[(($voice_age) >> 2)] = $call18;
					var $20 = $gender;
					var $call19 = __ZL10attrlookupPKwPK8MNEM_TAB($20, ((__ZZL18GetVoiceAttributesPwiE11mnem_gender) & 4294967295));
					var $21 = $ssml_sp;
					var $voice_gender = (($21 + 8) & 4294967295);
					HEAP32[(($voice_gender) >> 2)] = $call19;
					var $22 = $tag_type_addr;
					var $23 = $ssml_sp;
					var $tag_type20 = (($23) & 4294967295);
					HEAP32[(($tag_type20) >> 2)] = $22;
					__label__ = 10;
					break $if_then$$if_else$2;
				}
			} while (0);
			if (__label__ == 10) {
				var $call22 = __ZL14VoiceFromStackv();
				$new_voice_id = $call22;
				var $24 = $new_voice_id;
				var $call23 = _strcmp($24, ((__ZL16current_voice_id) & 4294967295));
				var $cmp24 = ((($call23)) | 0) != 0;
				if ($cmp24) {
					__label__ = 11;;
				} else {
					__label__ = 12;;
				}
				if (__label__ == 11) {
					var $25 = $new_voice_id;
					var $call26 = _strcpy(((__ZL16current_voice_id) & 4294967295), $25);
					$retval = 131072;;
				} else if (__label__ == 12) {
					$retval = 0;;
				}
			}
			var $26 = $retval;;
			return $26;
			return null;
		}

		function __ZL14VoiceFromStackv() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 108;
			_memset(__stackBase__, 0, 108);
			var __label__;
			var $retval;
			var $ix;
			var $sp;
			var $v_id;
			var $voice_name_specified;
			var $voice_found = __stackBase__;
			var $voice_select = __stackBase__ + 4;
			var $voice_name = __stackBase__ + 28;
			var $language = __stackBase__ + 68;
			var $arraydecay = (($voice_name) & 4294967295);
			var $call = _strcpy($arraydecay, ((__ZL10ssml_stack + 16) & 4294967295));
			var $arraydecay1 = (($language) & 4294967295);
			var $call2 = _strcpy($arraydecay1, ((__ZL10ssml_stack + 56) & 4294967295));
			var $0 = HEAP32[((((__ZL10ssml_stack + 12) & 4294967295)) >> 2)];
			var $conv = ((($0)) & 255);
			var $age = (($voice_select + 13) & 4294967295);
			HEAP8[($age)] = $conv;
			var $1 = HEAP32[((((__ZL10ssml_stack + 8) & 4294967295)) >> 2)];
			var $conv3 = ((($1)) & 255);
			var $gender = (($voice_select + 12) & 4294967295);
			HEAP8[($gender)] = $conv3;
			var $2 = HEAP32[((((__ZL10ssml_stack + 4) & 4294967295)) >> 2)];
			var $conv4 = ((($2)) & 255);
			var $variant = (($voice_select + 14) & 4294967295);
			HEAP8[($variant)] = $conv4;
			var $identifier = (($voice_select + 8) & 4294967295);
			HEAP32[(($identifier) >> 2)] = 0;
			$ix = 0;
			var $3 = $ix;
			var $4 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
			var $cmp1 = ((($3)) | 0) < ((($4)) | 0);
			if ($cmp1) {
				__label__ = 1;;
			} else {
				__label__ = 15;;
			}
			$for_body_lr_ph$$for_end$2: do {
				if (__label__ == 1) {
					var $arraydecay13 = (($voice_name) & 4294967295);
					var $arrayidx17 = (($language) & 4294967295);
					var $gender18 = (($voice_select + 12) & 4294967295);
					var $age19 = (($voice_select + 13) & 4294967295);
					var $variant20 = (($voice_select + 14) & 4294967295);
					var $arraydecay26 = (($language) & 4294967295);
					var $arrayidx32 = (($voice_name) & 4294967295);
					var $gender39 = (($voice_select + 12) & 4294967295);
					var $age45 = (($voice_select + 13) & 4294967295);
					var $variant51 = (($voice_select + 14) & 4294967295);;
					$for_body$4: while (1) {
						var $5 = $ix;
						var $arrayidx = ((__ZL10ssml_stack + $5 * 76) & 4294967295);
						$sp = $arrayidx;
						$voice_name_specified = 0;
						var $6 = $sp;
						var $voice_name5 = (($6 + 16) & 4294967295);
						var $arrayidx6 = (($voice_name5) & 4294967295);
						var $7 = HEAP8[($arrayidx6)];
						var $conv7 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp8 = ((($conv7)) | 0) != 0;
						if ($cmp8) {
							__label__ = 3;;
						} else {
							__label__ = 5;;
						}
						$land_lhs_true$$if_end$6: do {
							if (__label__ == 3) {
								var $8 = $sp;
								var $voice_name9 = (($8 + 16) & 4294967295);
								var $arraydecay10 = (($voice_name9) & 4294967295);
								var $call11 = __Z17SelectVoiceByNamePP12espeak_VOICEPKc(0, $arraydecay10);
								var $cmp12 = ((($call11)) | 0) != 0;
								if (!($cmp12)) {
									__label__ = 5;
									break $land_lhs_true$$if_end$6;
								}
								$voice_name_specified = 1;
								var $9 = $sp;
								var $voice_name14 = (($9 + 16) & 4294967295);
								var $arraydecay15 = (($voice_name14) & 4294967295);
								var $call16 = _strcpy($arraydecay13, $arraydecay15);
								HEAP8[($arrayidx17)] = 0;
								HEAP8[($gender18)] = 0;
								HEAP8[($age19)] = 0;
								HEAP8[($variant20)] = 0;;
							}
						} while (0);
						var $10 = $sp;
						var $language21 = (($10 + 56) & 4294967295);
						var $arrayidx22 = (($language21) & 4294967295);
						var $11 = HEAP8[($arrayidx22)];
						var $conv23 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp24 = ((($conv23)) | 0) != 0;
						if ($cmp24) {
							__label__ = 6;;
						} else {
							__label__ = 8;;
						}
						$if_then25$$if_end34$10: do {
							if (__label__ == 6) {
								var $12 = $sp;
								var $language27 = (($12 + 56) & 4294967295);
								var $arraydecay28 = (($language27) & 4294967295);
								var $call29 = _strcpy($arraydecay26, $arraydecay28);
								var $13 = $voice_name_specified;
								var $cmp30 = ((($13)) | 0) == 0;
								if (!($cmp30)) {
									__label__ = 8;
									break $if_then25$$if_end34$10;
								}
								HEAP8[($arrayidx32)] = 0;;
							}
						} while (0);
						var $14 = $sp;
						var $voice_gender = (($14 + 8) & 4294967295);
						var $15 = HEAP32[(($voice_gender) >> 2)];
						var $cmp35 = ((($15)) | 0) != 0;
						if ($cmp35) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							var $16 = $sp;
							var $voice_gender37 = (($16 + 8) & 4294967295);
							var $17 = HEAP32[(($voice_gender37) >> 2)];
							var $conv38 = ((($17)) & 255);
							HEAP8[($gender39)] = $conv38;;
						}
						var $18 = $sp;
						var $voice_age = (($18 + 12) & 4294967295);
						var $19 = HEAP32[(($voice_age) >> 2)];
						var $cmp41 = ((($19)) | 0) != 0;
						if ($cmp41) {
							__label__ = 11;;
						} else {
							__label__ = 12;;
						}
						if (__label__ == 11) {
							var $20 = $sp;
							var $voice_age43 = (($20 + 12) & 4294967295);
							var $21 = HEAP32[(($voice_age43) >> 2)];
							var $conv44 = ((($21)) & 255);
							HEAP8[($age45)] = $conv44;;
						}
						var $22 = $sp;
						var $voice_variant = (($22 + 4) & 4294967295);
						var $23 = HEAP32[(($voice_variant) >> 2)];
						var $cmp47 = ((($23)) | 0) != 0;
						if ($cmp47) {
							__label__ = 13;;
						} else {
							__label__ = 14;;
						}
						if (__label__ == 13) {
							var $24 = $sp;
							var $voice_variant49 = (($24 + 4) & 4294967295);
							var $25 = HEAP32[(($voice_variant49) >> 2)];
							var $conv50 = ((($25)) & 255);
							HEAP8[($variant51)] = $conv50;;
						}
						var $26 = $ix;
						var $inc = ((($26) + 1) & 4294967295);
						$ix = $inc;
						var $27 = $ix;
						var $28 = HEAP32[((__ZL12n_ssml_stack) >> 2)];
						var $cmp = ((($27)) | 0) < ((($28)) | 0);
						if ($cmp) {
							__label__ = 2;
							continue $for_body$4;
						} else {
							__label__ = 15;
							break $for_body_lr_ph$$for_end$2;
						}
					}
				}
			} while (0);
			var $arraydecay53 = (($voice_name) & 4294967295);
			var $name = (($voice_select) & 4294967295);
			HEAP32[(($name) >> 2)] = $arraydecay53;
			var $arraydecay54 = (($language) & 4294967295);
			var $languages = (($voice_select + 4) & 4294967295);
			HEAP32[(($languages) >> 2)] = $arraydecay54;
			var $call55 = __Z11SelectVoiceP12espeak_VOICEPi($voice_select, $voice_found);
			$v_id = $call55;
			var $cmp56 = ((($call55)) | 0) == 0;
			if ($cmp56) {
				__label__ = 16;;
			} else {
				__label__ = 17;;
			}
			if (__label__ == 16) {
				$retval = ((__str45697) & 4294967295);;
			} else if (__label__ == 17) {
				var $29 = $v_id;
				$retval = $29;;
			}
			var $30 = $retval;
			STACKTOP = __stackBase__;
			return $30;
			return null;
		}

		function __ZL18attr_prosody_valueiPKwPi($param_type, $pw, $value_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $param_type_addr;
			var $pw_addr;
			var $value_out_addr;
			var $sign;
			var $tail = __stackBase__;
			var $value;
			var $x;
			$param_type_addr = $param_type;
			$pw_addr = $pw;
			$value_out_addr = $value_out;
			$sign = 0;
			var $0 = $pw_addr;
			var $1 = HEAP32[(($0) >> 2)];
			var $call1 = _iswspace($1);
			var $tobool2 = ((($call1)) | 0) != 0;
			var $2 = $pw_addr;
			if ($tobool2) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = __lastLabel__ == 1 ? $6 : ($2);
						var $incdec_ptr = (($3 + 4) & 4294967295);
						$pw_addr = $incdec_ptr;
						var $4 = $pw_addr;
						var $5 = HEAP32[(($4) >> 2)];
						var $call = _iswspace($5);
						var $tobool = ((($call)) | 0) != 0;
						var $6 = $pw_addr;
						if ($tobool) {
							__lastLabel__ = 1;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 1;
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			var $_lcssa = __lastLabel__ == 0 ? $2 : ($6);
			var $7 = HEAP32[(($_lcssa) >> 2)];
			var $cmp = ((($7)) | 0) == 43;
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $8 = $pw_addr;
				var $incdec_ptr1 = (($8 + 4) & 4294967295);
				$pw_addr = $incdec_ptr1;
				$sign = 1;;
			}
			var $9 = $pw_addr;
			var $10 = HEAP32[(($9) >> 2)];
			var $cmp2 = ((($10)) | 0) == 45;
			if ($cmp2) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				var $11 = $pw_addr;
				var $incdec_ptr4 = (($11 + 4) & 4294967295);
				$pw_addr = $incdec_ptr4;
				$sign = -1;;
			}
			var $12 = $pw_addr;
			var $call6 = _wcstod($12, $tail);
			var $conv = ($call6);
			$value = $conv;
			var $13 = HEAP32[(($tail) >> 2)];
			var $14 = $pw_addr;
			var $cmp7 = ((($13)) | 0) == ((($14)) | 0);
			if ($cmp7) {
				__label__ = 7;;
			} else {
				__label__ = 8;;
			}
			$if_then8$$if_end9$12: do {
				if (__label__ == 7) {
					var $15 = $value_out_addr;
					HEAP32[(($15) >> 2)] = 100;
					$retval = 2;;
				} else if (__label__ == 8) {
					var $16 = HEAP32[(($tail) >> 2)];
					var $17 = HEAP32[(($16) >> 2)];
					var $cmp10 = ((($17)) | 0) == 37;
					if ($cmp10) {
						__label__ = 9;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 9) {
						var $18 = $sign;
						var $cmp12 = ((($18)) | 0) != 0;
						if ($cmp12) {
							__label__ = 10;;
						} else {
							__label__ = 11;;
						}
						if (__label__ == 10) {
							var $19 = $sign;
							var $conv14 = ((($19)) | 0);
							var $20 = $value;
							var $mul = ($conv14) * ($20);
							var $add = 100 + ($mul);
							$value = $add;;
						}
						var $21 = $value;
						var $conv16 = ((($21)) | 0);
						var $22 = $value_out_addr;
						HEAP32[(($22) >> 2)] = $conv16;
						$retval = 2;;
					} else if (__label__ == 12) {
						var $23 = HEAP32[(($tail) >> 2)];
						var $arrayidx = (($23) & 4294967295);
						var $24 = HEAP32[(($arrayidx) >> 2)];
						var $cmp18 = ((($24)) | 0) == 115;
						if ($cmp18) {
							__label__ = 13;;
						} else {
							__label__ = 15;;
						}
						$land_lhs_true$$if_end26$21: do {
							if (__label__ == 13) {
								var $25 = HEAP32[(($tail) >> 2)];
								var $arrayidx19 = (($25 + 4) & 4294967295);
								var $26 = HEAP32[(($arrayidx19) >> 2)];
								var $cmp20 = ((($26)) | 0) == 116;
								if (!($cmp20)) {
									__label__ = 15;
									break $land_lhs_true$$if_end26$21;
								}
								var $27 = $value;
								var $28 = $sign;
								var $conv22 = ((($28)) | 0);
								var $mul23 = ($27) * ($conv22);
								var $div = ($mul23) / 12;
								var $exp2 = _exp2($div);
								var $mul24 = ($exp2) * 100;
								$x = $mul24;
								var $29 = $x;
								var $conv25 = ((($29)) | 0);
								var $30 = $value_out_addr;
								HEAP32[(($30) >> 2)] = $conv25;
								$retval = 2;
								__label__ = 21;
								break $if_then8$$if_end9$12;
							}
						} while (0);
						var $31 = $param_type_addr;
						var $cmp27 = ((($31)) | 0) == 1;
						if ($cmp27) {
							__label__ = 16;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 16) {
							var $32 = $sign;
							var $cmp29 = ((($32)) | 0) == 0;
							if ($cmp29) {
								__label__ = 17;;
							} else {
								__label__ = 18;;
							}
							if (__label__ == 17) {
								var $33 = $value;
								var $mul31 = ($33) * 100;
								var $conv32 = ((($mul31)) | 0);
								var $34 = $value_out_addr;
								HEAP32[(($34) >> 2)] = $conv32;;
							} else if (__label__ == 18) {
								var $35 = $sign;
								var $conv33 = ((($35)) | 0);
								var $36 = $value;
								var $mul34 = ($conv33) * ($36);
								var $mul35 = ($mul34) * 100;
								var $conv36 = ((($mul35)) | 0);
								var $add37 = ((($conv36) + 100) & 4294967295);
								var $37 = $value_out_addr;
								HEAP32[(($37) >> 2)] = $add37;;
							}
							$retval = 2;;
						} else if (__label__ == 20) {
							var $38 = $value;
							var $conv40 = ((($38)) | 0);
							var $39 = $value_out_addr;
							HEAP32[(($39) >> 2)] = $conv40;
							var $40 = $sign;
							$retval = $40;;
						}
					}
				}
			} while (0);
			var $41 = $retval;
			STACKTOP = __stackBase__;
			return $41;
			return null;
		}

		function __ZL8GetC_getv() {;
			var __label__;
			var $retval;
			var $c;
			var $c2;
			var $0 = HEAP32[((__ZL7f_input) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 8;;
			}
			$if_then$$if_end13$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((__ZL7f_input) >> 2)];
					var $call = _fgetc($1);
					$c = $call;
					var $2 = HEAP32[((__ZL7f_input) >> 2)];
					var $_flags = (($2 + 12) & 4294967295);
					var $3 = HEAP16[(($_flags) >> 1)];
					var $conv = (tempInt = (($3)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $and = ($conv) & 32;
					var $cmp1 = ((($and)) | 0) != 0;
					if ($cmp1) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						$c = 32;;
					}
					var $4 = HEAP32[((_option_multibyte) >> 2)];
					var $cmp3 = ((($4)) | 0) == 4;
					if ($cmp3) {
						__label__ = 4;;
					} else {
						__label__ = 7;;
					}
					if (__label__ == 4) {
						var $5 = HEAP32[((__ZL7f_input) >> 2)];
						var $call5 = _fgetc($5);
						$c2 = $call5;
						var $6 = HEAP32[((__ZL7f_input) >> 2)];
						var $_flags6 = (($6 + 12) & 4294967295);
						var $7 = HEAP16[(($_flags6) >> 1)];
						var $conv7 = (tempInt = (($7)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $and8 = ($conv7) & 32;
						var $cmp9 = ((($and8)) | 0) != 0;
						if ($cmp9) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							$c2 = 0;;
						}
						var $8 = $c;
						var $9 = $c2;
						var $shl = ((($9) * 256) & 4294967295);
						var $add = ((($shl) + ($8)) & 4294967295);
						$c = $add;;
					}
					var $10 = $c;
					$retval = $10;;
				} else if (__label__ == 8) {
					var $11 = HEAP32[((_option_multibyte) >> 2)];
					var $cmp14 = ((($11)) | 0) == 3;
					if ($cmp14) {
						__label__ = 9;;
					} else {
						__label__ = 13;;
					}
					$if_then15$$if_else$14: do {
						if (__label__ == 9) {
							var $12 = HEAP32[((_p_wchar_input) >> 2)];
							var $13 = HEAP32[(($12) >> 2)];
							var $cmp16 = ((($13)) | 0) == 0;
							if ($cmp16) {
								__label__ = 10;;
							} else {
								__label__ = 11;;
							}
							if (__label__ == 10) {
								HEAP8[(__ZL12end_of_input_b)] = 1;
								$retval = 0;
								__label__ = 20;
								break $if_then$$if_end13$2;
							} else if (__label__ == 11) {
								var $_b1 = HEAPU8[(__ZL12end_of_input_b)];
								var $14 = ((($_b1)) & 1);
								var $tobool = ((($14)) | 0) != 0;
								if ($tobool) {
									__label__ = 19;
									break $if_then15$$if_else$14;
								}
								var $15 = HEAP32[((_p_wchar_input) >> 2)];
								var $incdec_ptr = (($15 + 4) & 4294967295);
								HEAP32[((_p_wchar_input) >> 2)] = $incdec_ptr;
								var $16 = HEAP32[(($15) >> 2)];
								$retval = $16;
								__label__ = 20;
								break $if_then$$if_end13$2;
							}
						} else if (__label__ == 13) {
							var $17 = HEAP32[((_p_textinput) >> 2)];
							var $18 = HEAPU8[($17)];
							var $conv21 = ((($18)) & 255);
							var $cmp22 = ((($conv21)) | 0) == 0;
							if ($cmp22) {
								__label__ = 14;;
							} else {
								__label__ = 15;;
							}
							if (__label__ == 14) {
								HEAP8[(__ZL12end_of_input_b)] = 1;
								$retval = 0;
								__label__ = 20;
								break $if_then$$if_end13$2;
							} else if (__label__ == 15) {
								var $_b = HEAPU8[(__ZL12end_of_input_b)];
								var $19 = ((($_b)) & 1);
								var $tobool25 = ((($19)) | 0) != 0;
								if ($tobool25) {
									__label__ = 19;
									break $if_then15$$if_else$14;
								}
								var $20 = HEAP32[((_option_multibyte) >> 2)];
								var $cmp27 = ((($20)) | 0) == 4;
								var $21 = HEAPU32[((_p_textinput) >> 2)];
								if ($cmp27) {
									__label__ = 17;;
								} else {
									__label__ = 18;;
								}
								if (__label__ == 17) {
									var $arrayidx = (($21) & 4294967295);
									var $22 = HEAPU8[($arrayidx)];
									var $conv29 = ((($22)) & 255);
									var $23 = HEAP32[((_p_textinput) >> 2)];
									var $arrayidx30 = (($23 + 1) & 4294967295);
									var $24 = HEAPU8[($arrayidx30)];
									var $conv31 = ((($24)) & 255);
									var $shl32 = ((($conv31) * 256) & 4294967295);
									var $add33 = ((($shl32) + ($conv29)) & 4294967295);
									$c = $add33;
									var $25 = HEAP32[((_p_textinput) >> 2)];
									var $add_ptr = (($25 + 2) & 4294967295);
									HEAP32[((_p_textinput) >> 2)] = $add_ptr;
									var $26 = $c;
									$retval = $26;
									__label__ = 20;
									break $if_then$$if_end13$2;
								} else if (__label__ == 18) {
									var $incdec_ptr35 = (($21 + 1) & 4294967295);
									HEAP32[((_p_textinput) >> 2)] = $incdec_ptr35;
									var $27 = HEAPU8[($21)];
									var $conv36 = ((($27)) & 255);
									var $and37 = ($conv36) & 255;
									$retval = $and37;
									__label__ = 20;
									break $if_then$$if_end13$2;
								}
							}
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $28 = $retval;;
			return $28;
			return null;
		}

		function __ZL10GetC_ungeti($c) {;
			var __label__;
			var $c_addr;
			$c_addr = $c;
			var $0 = HEAP32[((__ZL7f_input) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $c_addr;
				var $2 = HEAP32[((__ZL7f_input) >> 2)];
				var $call = _ungetc($1, $2);;
			} else if (__label__ == 2) {
				var $3 = HEAP32[((_p_textinput) >> 2)];
				var $incdec_ptr = (($3 + -1) & 4294967295);
				HEAP32[((_p_textinput) >> 2)] = $incdec_ptr;
				var $4 = $c_addr;
				var $conv = ((($4)) & 255);
				var $5 = HEAP32[((_p_textinput) >> 2)];
				HEAP8[($5)] = $conv;
				HEAP8[(__ZL12end_of_input_b)] = 0;;
			};
			return;
			return;
		}

		function __Z8SetSpeedi($control) {;
			var __label__;
			var __lastLabel__ = null;
			var $control_addr;
			var $x;
			var $s1;
			var $wpm;
			var $wpm2;
			var $wpm_value;
			var $sonic;
			$control_addr = $control;
			HEAP32[((((_speed + 28) & 4294967295)) >> 2)] = 0;
			HEAP32[((((_speed + 24) & 4294967295)) >> 2)] = 450;
			HEAP32[((((_speed + 16) & 4294967295)) >> 2)] = 110;
			HEAP32[((((_speed + 20) & 4294967295)) >> 2)] = 100;
			HEAP32[((((_speed + 8) & 4294967295)) >> 2)] = 5;
			var $0 = HEAP32[((((_embedded_value + 8) & 4294967295)) >> 2)];
			$wpm = $0;
			var $1 = $control_addr;
			var $cmp = ((($1)) | 0) == 2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = HEAP32[((((_embedded_value + 32) & 4294967295)) >> 2)];
				$wpm = $2;;
			}
			var $3 = $wpm;
			$wpm_value = $3;
			var $4 = HEAP32[((_voice) >> 2)];
			var $speed_percent = (($4 + 64) & 4294967295);
			var $5 = HEAP32[(($speed_percent) >> 2)];
			var $cmp1 = ((($5)) | 0) > 0;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $6 = $wpm;
				var $7 = HEAP32[((_voice) >> 2)];
				var $speed_percent3 = (($7 + 64) & 4294967295);
				var $8 = HEAP32[(($speed_percent3) >> 2)];
				var $mul = ((($8) * ($6)) & 4294967295);
				var $div = ((((($mul)) | 0) / 100) | 0);
				$wpm = $div;;
			}
			var $9 = $control_addr;
			var $and = ($9) & 2;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				__Z12DoSonicSpeedi(1024);;
			}
			var $10 = $wpm_value;
			var $cmp7 = ((($10)) | 0) > 450;
			if ($cmp7) {
				__label__ = 10;;
			} else {
				__label__ = 7;;
			}
			$if_then10$$lor_lhs_false$11: do {
				if (__label__ == 7) {
					var $11 = $wpm_value;
					var $12 = HEAP32[((((_speed + 32) & 4294967295)) >> 2)];
					var $cmp8 = ((($11)) | 0) > ((($12)) | 0);
					var $13 = $wpm;
					if ($cmp8) {
						__label__ = 8;;
					} else {
						__label__ = 14;;
					}
					$land_lhs_true$$if_end29$13: do {
						if (__label__ == 8) {
							var $cmp9 = ((($13)) | 0) > 350;
							if ($cmp9) {
								__label__ = 10;
								break $if_then10$$lor_lhs_false$11;
							}
							var $_pr2 = $wpm;
							__lastLabel__ = 9;
							__label__ = 16;
							break $land_lhs_true$$if_end29$13;
						} else if (__label__ == 14) {
							var $cmp30 = ((($13)) | 0) > 450;
							if ($cmp30) {
								__lastLabel__ = 14;;
							} else {
								__lastLabel__ = 14;
								__label__ = 16;
								break $land_lhs_true$$if_end29$13;
							}
							$wpm = 450;
							__label__ = 17;
							break $land_lhs_true$$if_end29$13;
						}
					} while (0);
					$if_end32$$if_then34$18: do {
						if (__label__ == 16) {
							var $29 = __lastLabel__ == 9 ? $_pr2 : ($13);
							var $cmp33 = ((($29)) | 0) > 360;
							if ($cmp33) {
								__label__ = 17;
								break $if_end32$$if_then34$18;
							} else {
								__label__ = 18;
								break $if_end32$$if_then34$18;
							}
						}
					} while (0);
					if (__label__ == 17) {
						var $30 = $wpm;
						var $sub = ((($30) - 360) & 4294967295);
						var $div35 = ((((($sub)) | 0) / 8) | 0);
						HEAP32[((((_speed + 28) & 4294967295)) >> 2)] = $div35;;
					}
					var $31 = $wpm;
					$wpm2 = $31;
					var $cmp37 = ((($31)) | 0) > 359;
					if ($cmp37) {
						__lastLabel__ = 18;
						__label__ = 19;;
					} else {
						__lastLabel__ = 18;
						__label__ = 20;;
					}
					if (__label__ == 19) {
						$wpm2 = 359;
						var $_pr4 = $wpm;
						__lastLabel__ = 19;;
					}
					var $32 = __lastLabel__ == 19 ? $_pr4 : ($31);
					var $cmp40 = ((($32)) | 0) < 80;
					if ($cmp40) {
						__label__ = 21;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 21) {
						$wpm2 = 80;;
					}
					var $33 = $wpm2;
					var $sub43 = ((($33) - 80) & 4294967295);
					var $arrayidx = ((__ZL12speed_lookup + $sub43) & 4294967295);
					var $34 = HEAPU8[($arrayidx)];
					var $conv44 = ((($34)) & 255);
					$x = $conv44;
					var $35 = $wpm;
					var $cmp45 = ((($35)) | 0) >= 380;
					if ($cmp45) {
						__label__ = 23;;
					} else {
						__label__ = 25;;
					}
					$if_end47$$if_end50$29: do {
						if (__label__ == 23) {
							$x = 7;
							var $_pr5 = $wpm;
							var $cmp48 = ((($_pr5)) | 0) >= 400;
							if (!($cmp48)) {
								__label__ = 25;
								break $if_end47$$if_end50$29;
							}
							$x = 6;;
						}
					} while (0);
					var $36 = $control_addr;
					var $and51 = ($36) & 1;
					var $tobool52 = ((($and51)) | 0) != 0;
					if ($tobool52) {
						__label__ = 26;;
					} else {
						__label__ = 28;;
					}
					$if_then53$$if_end67$33: do {
						if (__label__ == 26) {
							var $37 = $x;
							var $38 = HEAP32[((_voice) >> 2)];
							var $speedf154 = (($38 + 52) & 4294967295);
							var $39 = HEAP32[(($speedf154) >> 2)];
							var $mul55 = ((($39) * ($37)) & 4294967295);
							var $div56 = ((((($mul55)) | 0) / 256) | 0);
							HEAP32[((__ZL6speed1) >> 2)] = $div56;
							var $40 = $x;
							var $41 = HEAP32[((_voice) >> 2)];
							var $speedf257 = (($41 + 56) & 4294967295);
							var $42 = HEAP32[(($speedf257) >> 2)];
							var $mul58 = ((($42) * ($40)) & 4294967295);
							var $div59 = ((((($mul58)) | 0) / 256) | 0);
							HEAP32[((__ZL6speed2) >> 2)] = $div59;
							var $43 = $x;
							var $44 = HEAP32[((_voice) >> 2)];
							var $speedf360 = (($44 + 60) & 4294967295);
							var $45 = HEAP32[(($speedf360) >> 2)];
							var $mul61 = ((($45) * ($43)) & 4294967295);
							var $div62 = ((((($mul61)) | 0) / 256) | 0);
							HEAP32[((__ZL6speed3) >> 2)] = $div62;
							var $46 = $x;
							var $cmp63 = ((($46)) | 0) <= 7;
							if (!($cmp63)) {
								__label__ = 28;
								break $if_then53$$if_end67$33;
							}
							var $47 = $x;
							HEAP32[((__ZL6speed1) >> 2)] = $47;
							var $48 = $x;
							var $sub65 = ((($48) - 1) & 4294967295);
							HEAP32[((__ZL6speed3) >> 2)] = $sub65;
							HEAP32[((__ZL6speed2) >> 2)] = $sub65;;
						}
					} while (0);
					var $49 = $control_addr;
					var $and68 = ($49) & 2;
					var $tobool69 = ((($and68)) | 0) != 0;
					if (!($tobool69)) {
						__label__ = 51;
						break $if_then10$$lor_lhs_false$11;
					}
					var $50 = $wpm;
					var $cmp71 = ((($50)) | 0) > 350;
					var $51 = $wpm;
					if ($cmp71) {
						__label__ = 30;;
					} else {
						__label__ = 31;;
					}
					$if_then72$$if_else$38: do {
						if (__label__ == 30) {
							var $sub73 = ((($51) - 350) & 4294967295);
							var $div74 = ((((($sub73)) | 0) / 3) | 0);
							var $sub75 = ((85 - ($div74)) & 4294967295);
							HEAP32[((((_speed + 16) & 4294967295)) >> 2)] = $sub75;
							var $52 = $wpm;
							var $sub76 = ((($52) - 350) & 4294967295);
							var $div77 = ((((($sub76)) | 0) / 8) | 0);
							var $sub78 = ((60 - ($div77)) & 4294967295);
							HEAP32[((((_speed + 20) & 4294967295)) >> 2)] = $sub78;;
						} else if (__label__ == 31) {
							var $cmp79 = ((($51)) | 0) > 250;
							if (!($cmp79)) {
								__label__ = 33;
								break $if_then72$$if_else$38;
							}
							var $53 = $wpm;
							var $sub81 = ((($53) - 250) & 4294967295);
							var $div82 = ((((($sub81)) | 0) / 4) | 0);
							var $sub83 = ((110 - ($div82)) & 4294967295);
							HEAP32[((((_speed + 16) & 4294967295)) >> 2)] = $sub83;
							var $54 = $wpm;
							var $sub84 = ((($54) - 250) & 4294967295);
							var $div85 = ((((($sub84)) | 0) / 2) | 0);
							var $sub86 = ((110 - ($div85)) & 4294967295);
							HEAP32[((((_speed + 20) & 4294967295)) >> 2)] = $sub86;;
						}
					} while (0);
					var $55 = $x;
					var $56 = HEAP32[((_voice) >> 2)];
					var $speedf189 = (($56 + 52) & 4294967295);
					var $57 = HEAP32[(($speedf189) >> 2)];
					var $mul90 = ((($57) * ($55)) & 4294967295);
					var $div91 = ((((($mul90)) | 0) / 256) | 0);
					$s1 = $div91;
					var $58 = $wpm;
					var $cmp92 = ((($58)) | 0) >= 170;
					var $59 = $s1;
					if ($cmp92) {
						__label__ = 34;;
					} else {
						__label__ = 35;;
					}
					if (__label__ == 34) {
						var $mul94 = ((($59) * 150) & 4294967295);
						var $div95 = ((((($mul94)) | 0) / 128) | 0);
						var $add = ((($div95) + 110) & 4294967295);
						HEAP32[((((_speed + 12) & 4294967295)) >> 2)] = $add;;
					} else if (__label__ == 35) {
						var $mul97 = ((($59) * 128) & 4294967295);
						var $div98 = ((((($mul97)) | 0) / 130) | 0);
						var $add99 = ((($div98) + 128) & 4294967295);
						HEAP32[((((_speed + 12) & 4294967295)) >> 2)] = $add99;;
					}
					var $60 = $wpm;
					var $cmp101 = ((($60)) | 0) >= 350;
					if ($cmp101) {
						__label__ = 37;;
					} else {
						__label__ = 40;;
					}
					$if_end106$$if_end117$47: do {
						if (__label__ == 37) {
							var $61 = $wpm;
							var $sub103 = ((($61) - 350) & 4294967295);
							var $arrayidx104 = ((__ZL14wav_factor_350 + $sub103) & 4294967295);
							var $62 = HEAPU8[($arrayidx104)];
							var $conv105 = ((($62)) & 255);
							HEAP32[((((_speed + 12) & 4294967295)) >> 2)] = $conv105;
							var $_pr7 = $wpm;
							var $cmp107 = ((($_pr7)) | 0) >= 390;
							if (!($cmp107)) {
								__label__ = 40;
								break $if_end106$$if_end117$47;
							}
							var $63 = $wpm;
							var $sub109 = ((($63) - 400) & 4294967295);
							var $div110 = ((((($sub109)) | 0) / 2) | 0);
							var $sub111 = ((450 - ($div110)) & 4294967295);
							HEAP32[((((_speed + 24) & 4294967295)) >> 2)] = $sub111;
							var $64 = $wpm;
							var $cmp112 = ((($64)) | 0) > 440;
							if (!($cmp112)) {
								__label__ = 40;
								break $if_end106$$if_end117$47;
							}
							var $65 = $wpm;
							var $_neg = (((-($65))) & 4294967295);
							var $sub115 = ((($_neg) + 860) & 4294967295);
							HEAP32[((((_speed + 24) & 4294967295)) >> 2)] = $sub115;;
						}
					} while (0);
					var $66 = $s1;
					var $mul118 = ((($66) * 256) & 4294967295);
					var $div119 = ((((($mul118)) | 0) / 115) | 0);
					HEAP32[((((_speed) & 4294967295)) >> 2)] = $div119;
					HEAP32[((((_speed + 4) & 4294967295)) >> 2)] = 0;
					var $67 = $wpm;
					var $cmp120 = ((($67)) | 0) > 430;
					if ($cmp120) {
						__label__ = 41;;
					} else {
						__label__ = 42;;
					}
					$if_then121$$if_else122$52: do {
						if (__label__ == 41) {
							HEAP32[((((_speed) & 4294967295)) >> 2)] = 12;;
						} else if (__label__ == 42) {
							var $68 = $wpm;
							var $cmp123 = ((($68)) | 0) > 400;
							if ($cmp123) {
								__label__ = 43;;
							} else {
								__label__ = 44;;
							}
							if (__label__ == 43) {
								HEAP32[((((_speed) & 4294967295)) >> 2)] = 13;;
							} else if (__label__ == 44) {
								var $69 = $wpm;
								var $cmp126 = ((($69)) | 0) > 374;
								if ($cmp126) {
									__label__ = 45;;
								} else {
									__label__ = 46;;
								}
								if (__label__ == 45) {
									HEAP32[((((_speed) & 4294967295)) >> 2)] = 14;;
								} else if (__label__ == 46) {
									var $70 = $wpm;
									var $cmp129 = ((($70)) | 0) > 350;
									if (!($cmp129)) {
										__label__ = 48;
										break $if_then121$$if_else122$52;
									}
									var $71 = $wpm;
									var $sub131 = ((($71) - 350) & 4294967295);
									var $arrayidx132 = ((__ZL16pause_factor_350 + $sub131) & 4294967295);
									var $72 = HEAPU8[($arrayidx132)];
									var $conv133 = ((($72)) & 255);
									HEAP32[((((_speed) & 4294967295)) >> 2)] = $conv133;;
								}
							}
						}
					} while (0);
					var $73 = HEAP32[((((_speed + 4) & 4294967295)) >> 2)];
					var $cmp138 = ((($73)) | 0) == 0;
					if (!($cmp138)) {
						__label__ = 51;
						break $if_then10$$lor_lhs_false$11;
					}
					var $74 = HEAP32[((((_speed) & 4294967295)) >> 2)];
					HEAP32[((((_speed + 4) & 4294967295)) >> 2)] = $74;
					var $cmp140 = ((($74)) | 0) < 16;
					if (!($cmp140)) {
						__label__ = 51;
						break $if_then10$$lor_lhs_false$11;
					}
					HEAP32[((((_speed + 4) & 4294967295)) >> 2)] = 16;
					__label__ = 51;
					break $if_then10$$lor_lhs_false$11;
				}
			} while (0);
			$if_then10$$if_end144$65: do {
				if (__label__ == 10) {
					var $14 = $wpm;
					$wpm2 = $14;
					$wpm = 175;
					$x = 73;
					var $15 = $control_addr;
					var $and11 = ($15) & 1;
					var $tobool12 = ((($and11)) | 0) != 0;
					if ($tobool12) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						var $16 = $x;
						var $17 = HEAP32[((_voice) >> 2)];
						var $speedf1 = (($17 + 52) & 4294967295);
						var $18 = HEAP32[(($speedf1) >> 2)];
						var $mul14 = ((($18) * ($16)) & 4294967295);
						var $div15 = ((((($mul14)) | 0) / 256) | 0);
						HEAP32[((__ZL6speed1) >> 2)] = $div15;
						var $19 = $x;
						var $20 = HEAP32[((_voice) >> 2)];
						var $speedf2 = (($20 + 56) & 4294967295);
						var $21 = HEAP32[(($speedf2) >> 2)];
						var $mul16 = ((($21) * ($19)) & 4294967295);
						var $div17 = ((((($mul16)) | 0) / 256) | 0);
						HEAP32[((__ZL6speed2) >> 2)] = $div17;
						var $22 = $x;
						var $23 = HEAP32[((_voice) >> 2)];
						var $speedf3 = (($23 + 60) & 4294967295);
						var $24 = HEAP32[(($speedf3) >> 2)];
						var $mul18 = ((($24) * ($22)) & 4294967295);
						var $div19 = ((((($mul18)) | 0) / 256) | 0);
						HEAP32[((__ZL6speed3) >> 2)] = $div19;;
					}
					var $25 = $control_addr;
					var $and21 = ($25) & 2;
					var $tobool22 = ((($and21)) | 0) != 0;
					if (!($tobool22)) {
						__label__ = 51;
						break $if_then10$$if_end144$65;
					}
					var $26 = $wpm2;
					var $conv = ((($26)) | 0);
					var $27 = $wpm;
					var $conv24 = ((($27)) | 0);
					var $div25 = ($conv) / ($conv24);
					$sonic = $div25;
					var $28 = $sonic;
					var $mul26 = ($28) * 1024;
					var $conv27 = ((($mul26)) | 0);
					__Z12DoSonicSpeedi($conv27);
					HEAP32[((((_speed) & 4294967295)) >> 2)] = 85;
					HEAP32[((((_speed + 4) & 4294967295)) >> 2)] = 80;
					HEAP32[((((_speed + 8) & 4294967295)) >> 2)] = 22;
					HEAP32[((((_speed + 24) & 4294967295)) >> 2)] = 900;
					HEAP32[((((_speed + 12) & 4294967295)) >> 2)] = 211;
					HEAP32[((((_speed + 16) & 4294967295)) >> 2)] = 210;
					HEAP32[((((_speed + 20) & 4294967295)) >> 2)] = 170;;
				}
			} while (0);;
			return;
			return;
		}

		function __Z12SetParameteriii($parameter, $value, $relative) {;
			var __label__;
			var $parameter_addr;
			var $value_addr;
			var $relative_addr;
			var $new_value;
			var $default_value;
			$parameter_addr = $parameter;
			$value_addr = $value;
			$relative_addr = $relative;
			var $0 = $value_addr;
			$new_value = $0;
			var $1 = $relative_addr;
			var $tobool = ((($1)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end2$2: do {
				if (__label__ == 1) {
					var $2 = $parameter_addr;
					var $cmp = ((($2)) | 0) < 5;
					if (!($cmp)) {
						__label__ = 3;
						break $if_then$$if_end2$2;
					}
					var $3 = $parameter_addr;
					var $arrayidx = ((_param_defaults + $3 * 4) & 4294967295);
					var $4 = HEAP32[(($arrayidx) >> 2)];
					$default_value = $4;
					var $5 = $default_value;
					var $6 = $default_value;
					var $7 = $value_addr;
					var $mul = ((($7) * ($6)) & 4294967295);
					var $div = ((((($mul)) | 0) / 100) | 0);
					var $add = ((($div) + ($5)) & 4294967295);
					$new_value = $add;;
				}
			} while (0);
			var $8 = $new_value;
			var $9 = $parameter_addr;
			var $arrayidx3 = ((((_param_stack + 4) & 4294967295) + $9 * 4) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = $8;
			var $10 = $parameter_addr;
			if ($10 == 1) {
				__label__ = 4;;
			} else if ($10 == 2) {
				__label__ = 5;;
			} else if ($10 == 3) {
				__label__ = 6;;
			} else if ($10 == 4) {
				__label__ = 11;;
			} else if ($10 == 13) {
				__label__ = 14;;
			} else if ($10 == 7) {
				__label__ = 15;;
			} else if ($10 == 9) {
				__label__ = 16;;
			} else {
				__label__ = 19;;
			}
			if (__label__ == 4) {
				var $11 = $new_value;
				HEAP32[((((_embedded_value + 8) & 4294967295)) >> 2)] = $11;
				var $12 = $new_value;
				HEAP32[((((_embedded_value + 32) & 4294967295)) >> 2)] = $12;
				__Z8SetSpeedi(3);;
			} else if (__label__ == 5) {
				var $13 = $new_value;
				HEAP32[((((_embedded_value + 12) & 4294967295)) >> 2)] = $13;
				var $call = __Z12GetAmplitudev();;
			} else if (__label__ == 6) {
				var $14 = $new_value;
				var $cmp6 = ((($14)) | 0) > 99;
				if ($cmp6) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				$if_end8_thread$$if_end8$10: do {
					if (__label__ == 7) {
						$new_value = 99;;
					} else if (__label__ == 8) {
						var $cmp9 = ((($14)) | 0) < 0;
						if (!($cmp9)) {
							__label__ = 10;
							break $if_end8_thread$$if_end8$10;
						}
						$new_value = 0;;
					}
				} while (0);
				var $15 = $new_value;
				HEAP32[((((_embedded_value + 4) & 4294967295)) >> 2)] = $15;;
			} else if (__label__ == 11) {
				var $16 = $new_value;
				var $cmp13 = ((($16)) | 0) > 99;
				if ($cmp13) {
					__label__ = 12;;
				} else {
					__label__ = 13;;
				}
				if (__label__ == 12) {
					$new_value = 99;;
				}
				var $17 = $new_value;
				HEAP32[((((_embedded_value + 16) & 4294967295)) >> 2)] = $17;;
			} else if (__label__ == 14) {
				var $18 = $new_value;
				HEAP32[((_option_linelength) >> 2)] = $18;;
			} else if (__label__ == 15) {
				var $19 = $new_value;
				HEAP32[((_option_wordgap) >> 2)] = $19;;
			} else if (__label__ == 16) {
				var $20 = $new_value;
				var $and = ($20) & 255;
				var $cmp19 = ((($and)) | 0) != 0;
				if ($cmp19) {
					__label__ = 17;;
				} else {
					__label__ = 18;;
				}
				if (__label__ == 17) {
					var $21 = $new_value;
					var $and21 = ($21) & 255;
					var $22 = HEAP32[((_translator) >> 2)];
					var $langopts = (($22) & 4294967295);
					var $intonation_group = (($langopts + 228) & 4294967295);
					HEAP32[(($intonation_group) >> 2)] = $and21;;
				}
				var $23 = $new_value;
				HEAP32[((_option_tone_flags) >> 2)] = $23;;
			};
			return;
			return;
		}

		function __Z11CalcLengthsP10Translator($tr) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 156;
			_memset(__stackBase__, 0, 156);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $ix;
			var $ix2;
			var $prev;
			var $next;
			var $next2;
			var $next3;
			var $p;
			var $p2;
			var $stress;
			var $type;
			var $pre_sonorant;
			var $pre_voiced;
			var $last_pitch;
			var $pitch_start;
			var $length_mod;
			var $len;
			var $env2;
			var $end_of_clause;
			var $embedded_ix = __stackBase__;
			var $min_drop;
			var $pitch1;
			var $emphasized;
			var $tone_mod;
			var $pitch_env;
			var $phdata_tone = __stackBase__ + 4;
			$tr_addr = $tr;
			$pre_sonorant = 0;
			$pre_voiced = 0;
			$last_pitch = 0;
			HEAP32[(($embedded_ix) >> 2)] = 0;
			$pitch_env = 0;
			$ix = 1;
			var $0 = $ix;
			var $1 = HEAP32[((_n_phoneme_list) >> 2)];
			var $cmp7 = ((($0)) | 0) < ((($1)) | 0);
			if ($cmp7) {
				__label__ = 1;;
			} else {
				__label__ = 193;;
			}
			$for_body_lr_ph$$for_end733$2: do {
				if (__label__ == 1) {
					var $pitch_env595 = (($phdata_tone + 124) & 4294967295);;
					$for_body$4: while (1) {
						var $2 = $ix;
						var $sub = ((($2) - 1) & 4294967295);
						var $arrayidx = ((_phoneme_list + $sub * 24) & 4294967295);
						$prev = $arrayidx;
						var $3 = $ix;
						var $arrayidx1 = ((_phoneme_list + $3 * 24) & 4294967295);
						$p = $arrayidx1;
						var $4 = $p;
						var $stresslevel = (($4 + 1) & 4294967295);
						var $5 = HEAPU8[($stresslevel)];
						var $conv = ((($5)) & 255);
						var $and = ($conv) & 7;
						$stress = $and;
						var $6 = $p;
						var $stresslevel2 = (($6 + 1) & 4294967295);
						var $7 = HEAPU8[($stresslevel2)];
						var $conv3 = ((($7)) & 255);
						var $and4 = ($conv3) & 8;
						$emphasized = $and4;
						var $8 = $ix;
						var $add = ((($8) + 1) & 4294967295);
						var $arrayidx5 = ((_phoneme_list + $add * 24) & 4294967295);
						$next = $arrayidx5;
						var $9 = $p;
						var $synthflags = (($9 + 4) & 4294967295);
						var $10 = HEAPU16[(($synthflags) >> 1)];
						var $conv6 = ((($10)) & 65535);
						var $and7 = ($conv6) & 2;
						var $tobool = ((($and7)) | 0) != 0;
						if ($tobool) {
							__label__ = 3;;
						} else {
							__label__ = 4;;
						}
						if (__label__ == 3) {
							__ZL11DoEmbedded2Pi($embedded_ix);;
						}
						var $11 = $p;
						var $type8 = (($11 + 15) & 4294967295);
						var $12 = HEAPU8[($type8)];
						var $conv9 = ((($12)) & 255);
						$type = $conv9;
						var $13 = $p;
						var $synthflags10 = (($13 + 4) & 4294967295);
						var $14 = HEAPU16[(($synthflags10) >> 1)];
						var $conv11 = ((($14)) & 65535);
						var $and12 = ($conv11) & 4;
						var $tobool13 = ((($and12)) | 0) != 0;
						if ($tobool13) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						$if_end15_thread$$if_end15$9: do {
							if (__label__ == 5) {
								$type = 2;
								__label__ = 98;
								break $if_end15_thread$$if_end15$9;
							} else if (__label__ == 6) {
								var $_pr = $type;
								if ($_pr == 0) {
									__label__ = 7;;
								} else if ($_pr == 4) {
									__label__ = 8;;
								} else if ($_pr == 7) {
									__label__ = 23;;
								} else if ($_pr == 6) {
									__label__ = 23;;
								} else if ($_pr == 5) {
									__label__ = 49;;
								} else if ($_pr == 3) {
									__label__ = 74;;
								} else if ($_pr == 8) {
									__label__ = 74;;
								} else if ($_pr == 2) {
									__label__ = 98;
									break $if_end15_thread$$if_end15$9;
								} else {
									__label__ = 192;
									break $if_end15_thread$$if_end15$9;
								}
								if (__label__ == 7) {
									$last_pitch = 0;
									__label__ = 192;
									break $if_end15_thread$$if_end15$9;
								} else if (__label__ == 8) {
									$last_pitch = 0;
									var $15 = $prev;
									var $type17 = (($15 + 15) & 4294967295);
									var $16 = HEAPU8[($type17)];
									var $conv18 = ((($16)) & 255);
									var $cmp19 = ((($conv18)) | 0) == 6;
									if ($cmp19) {
										__label__ = 9;;
									} else {
										__label__ = 10;;
									}
									$if_then20$$if_else$15: do {
										if (__label__ == 9) {
											var $17 = $p;
											var $prepause = (($17 + 16) & 4294967295);
											HEAP8[($prepause)] = 25;;
										} else if (__label__ == 10) {
											var $18 = HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)];
											var $cmp21 = ((($18)) | 0) > 0;
											if ($cmp21) {
												__label__ = 12;;
											} else {
												__label__ = 11;;
											}
											$if_then23$$lor_lhs_false$18: do {
												if (__label__ == 11) {
													var $19 = $stress;
													var $cmp22 = ((($19)) | 0) < 4;
													if ($cmp22) {
														__label__ = 12;
														break $if_then23$$lor_lhs_false$18;
													}
													var $21 = $p;
													var $prepause26 = (($21 + 16) & 4294967295);
													HEAP8[($prepause26)] = 60;
													__label__ = 14;
													break $if_then20$$if_else$15;
												}
											} while (0);
											var $20 = $p;
											var $prepause24 = (($20 + 16) & 4294967295);
											HEAP8[($prepause24)] = 48;;
										}
									} while (0);
									var $22 = $prev;
									var $type29 = (($22 + 15) & 4294967295);
									var $23 = HEAPU8[($type29)];
									var $conv30 = ((($23)) & 255);
									var $cmp31 = ((($conv30)) | 0) == 4;
									if ($cmp31) {
										__label__ = 15;;
									} else {
										__label__ = 16;;
									}
									if (__label__ == 15) {
										var $24 = $p;
										var $prepause33 = (($24 + 16) & 4294967295);
										HEAP8[($prepause33)] = 60;;
									}
									var $25 = $tr_addr;
									var $langopts = (($25) & 4294967295);
									var $word_gap = (($langopts) & 4294967295);
									var $26 = HEAP32[(($word_gap) >> 2)];
									var $and35 = ($26) & 16;
									var $tobool36 = ((($and35)) | 0) != 0;
									if ($tobool36) {
										__label__ = 17;;
									} else {
										__label__ = 19;;
									}
									$land_lhs_true$$if_end40$26: do {
										if (__label__ == 17) {
											var $27 = $p;
											var $newword = (($27 + 19) & 4294967295);
											var $28 = HEAP8[($newword)];
											var $tobool37 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
											if (!($tobool37)) {
												__label__ = 19;
												break $land_lhs_true$$if_end40$26;
											}
											var $29 = $p;
											var $prepause39 = (($29 + 16) & 4294967295);
											HEAP8[($prepause39)] = 60;;
										}
									} while (0);
									var $30 = $p;
									var $ph = (($30 + 8) & 4294967295);
									var $31 = HEAP32[(($ph) >> 2)];
									var $phflags = (($31 + 4) & 4294967295);
									var $32 = HEAP32[(($phflags) >> 2)];
									var $and41 = ($32) & 4194304;
									var $tobool42 = ((($and41)) | 0) != 0;
									if ($tobool42) {
										__label__ = 20;;
									} else {
										__label__ = 21;;
									}
									if (__label__ == 20) {
										var $33 = $p;
										var $prepause44 = (($33 + 16) & 4294967295);
										var $34 = HEAPU8[($prepause44)];
										var $conv45 = ((($34)) & 255);
										var $add46 = ((($conv45) + 30) & 4294967295);
										var $conv47 = ((($add46)) & 255);
										HEAP8[($prepause44)] = $conv47;;
									}
									var $35 = $p;
									var $synthflags49 = (($35 + 4) & 4294967295);
									var $36 = HEAPU16[(($synthflags49) >> 1)];
									var $conv50 = ((($36)) & 65535);
									var $and51 = ($conv50) & 8;
									var $tobool52 = ((($and51)) | 0) != 0;
									if (!($tobool52)) {
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									}
									var $37 = $tr_addr;
									var $langopts54 = (($37) & 4294967295);
									var $long_stop = (($langopts54 + 240) & 4294967295);
									var $38 = HEAP32[(($long_stop) >> 2)];
									var $39 = $p;
									var $prepause55 = (($39 + 16) & 4294967295);
									var $40 = HEAPU8[($prepause55)];
									var $conv56 = ((($40)) & 255);
									var $add57 = ((($conv56) + ($38)) & 4294967295);
									var $conv58 = ((($add57)) & 255);
									HEAP8[($prepause55)] = $conv58;
									__label__ = 192;
									break $if_end15_thread$$if_end15$9;
								} else if (__label__ == 23) {
									var $41 = $p;
									var $newword61 = (($41 + 19) & 4294967295);
									var $42 = HEAP8[($newword61)];
									var $tobool62 = (tempInt = (($42)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
									if ($tobool62) {
										__label__ = 24;;
									} else {
										__label__ = 27;;
									}
									$if_then63$$if_end76$35: do {
										if (__label__ == 24) {
											var $43 = $prev;
											var $type64 = (($43 + 15) & 4294967295);
											var $44 = HEAPU8[($type64)];
											var $conv65 = ((($44)) & 255);
											var $cmp66 = ((($conv65)) | 0) == 2;
											if ($cmp66) {
												__label__ = 25;;
											} else {
												__label__ = 26;;
											}
											if (__label__ == 25) {
												var $45 = $p;
												var $ph68 = (($45 + 8) & 4294967295);
												var $46 = HEAP32[(($ph68) >> 2)];
												var $phflags69 = (($46 + 4) & 4294967295);
												var $47 = HEAP32[(($phflags69) >> 2)];
												var $and70 = ($47) & 16777216;
												var $tobool71 = ((($and70)) | 0) != 0;
												if ($tobool71) {
													__label__ = 27;
													break $if_then63$$if_end76$35;
												}
											}
											var $48 = $p;
											var $prepause74 = (($48 + 16) & 4294967295);
											HEAP8[($prepause74)] = 15;;
										}
									} while (0);
									var $49 = $next;
									var $type77 = (($49 + 15) & 4294967295);
									var $50 = HEAPU8[($type77)];
									var $conv78 = ((($50)) & 255);
									var $cmp79 = ((($conv78)) | 0) == 0;
									if ($cmp79) {
										__label__ = 28;;
									} else {
										__label__ = 31;;
									}
									$land_lhs_true80$$if_end91$41: do {
										if (__label__ == 28) {
											var $51 = $prev;
											var $type81 = (($51 + 15) & 4294967295);
											var $52 = HEAPU8[($type81)];
											var $conv82 = ((($52)) & 255);
											var $cmp83 = ((($conv82)) | 0) == 8;
											if (!($cmp83)) {
												__label__ = 31;
												break $land_lhs_true80$$if_end91$41;
											}
											var $53 = $p;
											var $ph85 = (($53 + 8) & 4294967295);
											var $54 = HEAP32[(($ph85) >> 2)];
											var $phflags86 = (($54 + 4) & 4294967295);
											var $55 = HEAP32[(($phflags86) >> 2)];
											var $and87 = ($55) & 8;
											var $tobool88 = ((($and87)) | 0) != 0;
											if ($tobool88) {
												__label__ = 31;
												break $land_lhs_true80$$if_end91$41;
											}
											var $56 = $p;
											var $prepause90 = (($56 + 16) & 4294967295);
											HEAP8[($prepause90)] = 25;;
										}
									} while (0);
									var $57 = $prev;
									var $ph92 = (($57 + 8) & 4294967295);
									var $58 = HEAP32[(($ph92) >> 2)];
									var $phflags93 = (($58 + 4) & 4294967295);
									var $59 = HEAP32[(($phflags93) >> 2)];
									var $and94 = ($59) & 16384;
									var $tobool95 = ((($and94)) | 0) != 0;
									if ($tobool95) {
										__label__ = 32;;
									} else {
										__label__ = 33;;
									}
									if (__label__ == 32) {
										var $60 = $p;
										var $prepause97 = (($60 + 16) & 4294967295);
										HEAP8[($prepause97)] = 30;;
									}
									var $61 = $tr_addr;
									var $langopts99 = (($61) & 4294967295);
									var $word_gap100 = (($langopts99) & 4294967295);
									var $62 = HEAP32[(($word_gap100) >> 2)];
									var $and101 = ($62) & 16;
									var $tobool102 = ((($and101)) | 0) != 0;
									if ($tobool102) {
										__label__ = 34;;
									} else {
										__label__ = 36;;
									}
									$land_lhs_true103$$if_end108$49: do {
										if (__label__ == 34) {
											var $63 = $p;
											var $newword104 = (($63 + 19) & 4294967295);
											var $64 = HEAP8[($newword104)];
											var $tobool105 = (tempInt = (($64)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
											if (!($tobool105)) {
												__label__ = 36;
												break $land_lhs_true103$$if_end108$49;
											}
											var $65 = $p;
											var $prepause107 = (($65 + 16) & 4294967295);
											HEAP8[($prepause107)] = 30;;
										}
									} while (0);
									var $66 = $p;
									var $ph109 = (($66 + 8) & 4294967295);
									var $67 = HEAP32[(($ph109) >> 2)];
									var $phflags110 = (($67 + 4) & 4294967295);
									var $68 = HEAP32[(($phflags110) >> 2)];
									var $and111 = ($68) & 32;
									var $tobool112 = ((($and111)) | 0) != 0;
									if ($tobool112) {
										__label__ = 37;;
									} else {
										__label__ = 42;;
									}
									$land_lhs_true113$$if_else128$53: do {
										if (__label__ == 37) {
											var $69 = $next;
											var $type114 = (($69 + 15) & 4294967295);
											var $70 = HEAPU8[($type114)];
											var $conv115 = ((($70)) & 255);
											var $cmp116 = ((($conv115)) | 0) == 4;
											if (!($cmp116)) {
												__label__ = 42;
												break $land_lhs_true113$$if_else128$53;
											}
											var $71 = $next;
											var $newword118 = (($71 + 19) & 4294967295);
											var $72 = HEAP8[($newword118)];
											var $tobool119 = (tempInt = (($72)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
											if ($tobool119) {
												__label__ = 42;
												break $land_lhs_true113$$if_else128$53;
											}
											var $73 = $prev;
											var $type121 = (($73 + 15) & 4294967295);
											var $74 = HEAPU8[($type121)];
											var $conv122 = ((($74)) & 255);
											var $cmp123 = ((($conv122)) | 0) == 2;
											var $75 = $p;
											var $length = (($75 + 12) & 4294967295);
											if ($cmp123) {
												__label__ = 40;;
											} else {
												__label__ = 41;;
											}
											if (__label__ == 40) {
												HEAP16[(($length) >> 1)] = 200;
												__label__ = 43;
												break $land_lhs_true113$$if_else128$53;
											} else if (__label__ == 41) {
												HEAP16[(($length) >> 1)] = 150;
												__label__ = 43;
												break $land_lhs_true113$$if_else128$53;
											}
										}
									} while (0);
									if (__label__ == 42) {
										var $76 = $p;
										var $length129 = (($76 + 12) & 4294967295);
										HEAP16[(($length129) >> 1)] = 256;;
									}
									var $77 = $type;
									var $cmp131 = ((($77)) | 0) == 7;
									if (!($cmp131)) {
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									}
									var $78 = $next;
									var $type133 = (($78 + 15) & 4294967295);
									var $79 = HEAPU8[($type133)];
									var $conv134 = ((($79)) & 255);
									var $cmp135 = ((($conv134)) | 0) == 2;
									if ($cmp135) {
										__label__ = 45;;
									} else {
										__label__ = 46;;
									}
									if (__label__ == 45) {
										$pre_voiced = 1;;
									}
									var $80 = $prev;
									var $type138 = (($80 + 15) & 4294967295);
									var $81 = HEAPU8[($type138)];
									var $conv139 = ((($81)) & 255);
									var $cmp140 = ((($conv139)) | 0) == 2;
									if ($cmp140) {
										__label__ = 48;;
									} else {
										__label__ = 47;;
									}
									if (__label__ == 47) {
										var $82 = $prev;
										var $type142 = (($82 + 15) & 4294967295);
										var $83 = HEAPU8[($type142)];
										var $conv143 = ((($83)) & 255);
										var $cmp144 = ((($conv143)) | 0) == 3;
										if (!($cmp144)) {
											__label__ = 192;
											break $if_end15_thread$$if_end15$9;
										}
									}
									var $84 = $prev;
									var $length146 = (($84 + 12) & 4294967295);
									var $85 = HEAP16[(($length146) >> 1)];
									var $conv147 = (tempInt = (($85)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $add148 = ((($conv147) + 255) & 4294967295);
									var $div = ((((($add148)) | 0) / 2) | 0);
									var $conv149 = ((($div)) & 65535);
									var $86 = $p;
									var $length150 = (($86 + 12) & 4294967295);
									HEAP16[(($length150) >> 1)] = $conv149;
									__label__ = 192;
									break $if_end15_thread$$if_end15$9;
								} else if (__label__ == 49) {
									var $87 = $prev;
									var $type154 = (($87 + 15) & 4294967295);
									var $88 = HEAPU8[($type154)];
									var $conv155 = ((($88)) & 255);
									var $cmp156 = ((($conv155)) | 0) == 7;
									if ($cmp156) {
										__label__ = 53;;
									} else {
										__label__ = 50;;
									}
									$if_then170$$lor_lhs_false157$71: do {
										if (__label__ == 50) {
											var $89 = $prev;
											var $type158 = (($89 + 15) & 4294967295);
											var $90 = HEAPU8[($type158)];
											var $conv159 = ((($90)) & 255);
											var $cmp160 = ((($conv159)) | 0) == 6;
											if ($cmp160) {
												__label__ = 53;
												break $if_then170$$lor_lhs_false157$71;
											}
											var $91 = $prev;
											var $ph162 = (($91 + 8) & 4294967295);
											var $92 = HEAP32[(($ph162) >> 2)];
											var $phflags163 = (($92 + 4) & 4294967295);
											var $93 = HEAP32[(($phflags163) >> 2)];
											var $and164 = ($93) & 32;
											var $tobool165 = ((($and164)) | 0) != 0;
											if ($tobool165) {
												__label__ = 53;
												break $if_then170$$lor_lhs_false157$71;
											}
											var $94 = $prev;
											var $type167 = (($94 + 15) & 4294967295);
											var $95 = HEAPU8[($type167)];
											var $conv168 = ((($95)) & 255);
											var $cmp169 = ((($conv168)) | 0) == 3;
											if ($cmp169) {
												__label__ = 53;
												break $if_then170$$lor_lhs_false157$71;
											} else {
												__label__ = 54;
												break $if_then170$$lor_lhs_false157$71;
											}
										}
									} while (0);
									if (__label__ == 53) {
										var $96 = $p;
										var $prepause171 = (($96 + 16) & 4294967295);
										HEAP8[($prepause171)] = 30;;
									}
									var $97 = $next;
									var $type173 = (($97 + 15) & 4294967295);
									var $98 = HEAPU8[($type173)];
									var $conv174 = ((($98)) & 255);
									var $cmp175 = ((($conv174)) | 0) == 2;
									if ($cmp175) {
										__label__ = 56;;
									} else {
										__label__ = 55;;
									}
									$if_then180$$lor_lhs_false176$78: do {
										if (__label__ == 55) {
											var $99 = $next;
											var $type177 = (($99 + 15) & 4294967295);
											var $100 = HEAPU8[($type177)];
											var $conv178 = ((($100)) & 255);
											var $cmp179 = ((($conv178)) | 0) == 3;
											if ($cmp179) {
												__label__ = 56;
												break $if_then180$$lor_lhs_false176$78;
											} else {
												__label__ = 70;
												break $if_then180$$lor_lhs_false176$78;
											}
										}
									} while (0);
									$if_then180$$if_end229$80: do {
										if (__label__ == 56) {
											var $101 = $next;
											var $type181 = (($101 + 15) & 4294967295);
											var $102 = HEAPU8[($type181)];
											var $conv182 = ((($102)) & 255);
											var $cmp183 = ((($conv182)) | 0) == 2;
											if ($cmp183) {
												__label__ = 58;;
											} else {
												__label__ = 57;;
											}
											$if_then187$$lor_lhs_false184$82: do {
												if (__label__ == 57) {
													var $103 = $next;
													var $newword185 = (($103 + 19) & 4294967295);
													var $104 = HEAP8[($newword185)];
													var $tobool186 = (tempInt = (($104)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
													if ($tobool186) {
														__label__ = 59;
														break $if_then187$$lor_lhs_false184$82;
													} else {
														__label__ = 58;
														break $if_then187$$lor_lhs_false184$82;
													}
												}
											} while (0);
											if (__label__ == 58) {
												$pre_voiced = 1;;
											}
											var $105 = $p;
											var $prepause189 = (($105 + 16) & 4294967295);
											HEAP8[($prepause189)] = 40;
											var $106 = $prev;
											var $type190 = (($106 + 15) & 4294967295);
											var $107 = HEAPU8[($type190)];
											var $conv191 = ((($107)) & 255);
											var $cmp192 = ((($conv191)) | 0) == 0;
											if ($cmp192) {
												__label__ = 61;;
											} else {
												__label__ = 60;;
											}
											$if_then197$$lor_lhs_false193$87: do {
												if (__label__ == 60) {
													var $108 = $prev;
													var $type194 = (($108 + 15) & 4294967295);
													var $109 = HEAPU8[($type194)];
													var $conv195 = ((($109)) & 255);
													var $cmp196 = ((($conv195)) | 0) == 2;
													if ($cmp196) {
														__label__ = 61;
														break $if_then197$$lor_lhs_false193$87;
													}
													var $111 = $p;
													var $newword200 = (($111 + 19) & 4294967295);
													var $112 = HEAPU8[($newword200)];
													var $conv201 = ((($112)) & 255);
													var $cmp202 = ((($conv201)) | 0) == 0;
													if (!($cmp202)) {
														__label__ = 70;
														break $if_then180$$if_end229$80;
													}
													var $113 = $prev;
													var $type204 = (($113 + 15) & 4294967295);
													var $114 = HEAPU8[($type204)];
													var $conv205 = ((($114)) & 255);
													var $cmp206 = ((($conv205)) | 0) == 3;
													if ($cmp206) {
														__label__ = 64;;
													} else {
														__label__ = 65;;
													}
													if (__label__ == 64) {
														var $115 = $p;
														var $prepause208 = (($115 + 16) & 4294967295);
														HEAP8[($prepause208)] = 20;;
													}
													var $116 = $prev;
													var $type210 = (($116 + 15) & 4294967295);
													var $117 = HEAPU8[($type210)];
													var $conv211 = ((($117)) & 255);
													var $cmp212 = ((($conv211)) | 0) == 8;
													if ($cmp212) {
														__label__ = 66;;
													} else {
														__label__ = 67;;
													}
													if (__label__ == 66) {
														var $118 = $p;
														var $prepause214 = (($118 + 16) & 4294967295);
														HEAP8[($prepause214)] = 12;;
													}
													var $119 = $prev;
													var $type216 = (($119 + 15) & 4294967295);
													var $120 = HEAPU8[($type216)];
													var $conv217 = ((($120)) & 255);
													var $cmp218 = ((($conv217)) | 0) == 4;
													if (!($cmp218)) {
														__label__ = 70;
														break $if_then180$$if_end229$80;
													}
													var $121 = $prev;
													var $ph220 = (($121 + 8) & 4294967295);
													var $122 = HEAP32[(($ph220) >> 2)];
													var $phflags221 = (($122 + 4) & 4294967295);
													var $123 = HEAP32[(($phflags221) >> 2)];
													var $and222 = ($123) & 8;
													var $tobool223 = ((($and222)) | 0) != 0;
													if ($tobool223) {
														__label__ = 70;
														break $if_then180$$if_end229$80;
													}
													var $124 = $p;
													var $prepause225 = (($124 + 16) & 4294967295);
													HEAP8[($prepause225)] = 0;
													__label__ = 70;
													break $if_then180$$if_end229$80;
												}
											} while (0);
											var $110 = $p;
											var $prepause198 = (($110 + 16) & 4294967295);
											HEAP8[($prepause198)] = 0;;
										}
									} while (0);
									var $125 = $tr_addr;
									var $langopts230 = (($125) & 4294967295);
									var $word_gap231 = (($langopts230) & 4294967295);
									var $126 = HEAP32[(($word_gap231) >> 2)];
									var $and232 = ($126) & 16;
									var $tobool233 = ((($and232)) | 0) != 0;
									if (!($tobool233)) {
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									}
									var $127 = $p;
									var $newword235 = (($127 + 19) & 4294967295);
									var $128 = HEAP8[($newword235)];
									var $tobool236 = (tempInt = (($128)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
									if (!($tobool236)) {
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									}
									var $129 = $p;
									var $prepause238 = (($129 + 16) & 4294967295);
									var $130 = HEAPU8[($prepause238)];
									var $conv239 = ((($130)) & 255);
									var $cmp240 = ((($conv239)) | 0) < 20;
									if (!($cmp240)) {
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									}
									var $131 = $p;
									var $prepause242 = (($131 + 16) & 4294967295);
									HEAP8[($prepause242)] = 20;
									__label__ = 192;
									break $if_end15_thread$$if_end15$9;
								} else if (__label__ == 74) {
									var $132 = $tr_addr;
									var $stress_amps = (($132 + 660) & 4294967295);
									var $arrayidx245 = (($stress_amps) & 4294967295);
									var $133 = HEAP8[($arrayidx245)];
									var $134 = $p;
									var $amp = (($134 + 18) & 4294967295);
									HEAP8[($amp)] = $133;
									var $135 = $p;
									var $length246 = (($135 + 12) & 4294967295);
									HEAP16[(($length246) >> 1)] = 256;
									$min_drop = 0;
									var $136 = $p;
									var $newword247 = (($136 + 19) & 4294967295);
									var $137 = HEAP8[($newword247)];
									var $tobool248 = (tempInt = (($137)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
									if ($tobool248) {
										__label__ = 75;;
									} else {
										__label__ = 80;;
									}
									$if_then249$$if_end268$105: do {
										if (__label__ == 75) {
											var $138 = $prev;
											var $type250 = (($138 + 15) & 4294967295);
											var $139 = HEAPU8[($type250)];
											var $conv251 = ((($139)) & 255);
											var $cmp252 = ((($conv251)) | 0) == 3;
											if ($cmp252) {
												__label__ = 76;;
											} else {
												__label__ = 77;;
											}
											if (__label__ == 76) {
												var $140 = $p;
												var $prepause254 = (($140 + 16) & 4294967295);
												HEAP8[($prepause254)] = 25;;
											}
											var $141 = $prev;
											var $type256 = (($141 + 15) & 4294967295);
											var $142 = HEAPU8[($type256)];
											var $conv257 = ((($142)) & 255);
											var $cmp258 = ((($conv257)) | 0) == 2;
											if (!($cmp258)) {
												__label__ = 80;
												break $if_then249$$if_end268$105;
											}
											var $143 = $p;
											var $ph260 = (($143 + 8) & 4294967295);
											var $144 = HEAP32[(($ph260) >> 2)];
											var $phflags261 = (($144 + 4) & 4294967295);
											var $145 = HEAP32[(($phflags261) >> 2)];
											var $and262 = ($145) & 16777216;
											var $tobool263 = ((($and262)) | 0) != 0;
											if ($tobool263) {
												__label__ = 80;
												break $if_then249$$if_end268$105;
											}
											var $146 = $p;
											var $prepause265 = (($146 + 16) & 4294967295);
											HEAP8[($prepause265)] = 12;;
										}
									} while (0);
									var $147 = $next;
									var $type269 = (($147 + 15) & 4294967295);
									var $148 = HEAPU8[($type269)];
									var $conv270 = ((($148)) & 255);
									var $cmp271 = ((($conv270)) | 0) == 2;
									if ($cmp271) {
										__label__ = 81;;
									} else {
										__label__ = 82;;
									}
									if (__label__ == 81) {
										$pre_sonorant = 1;
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									} else if (__label__ == 82) {
										var $149 = $last_pitch;
										var $conv274 = ((($149)) & 255);
										var $150 = $p;
										var $pitch2 = (($150 + 21) & 4294967295);
										HEAP8[($pitch2)] = $conv274;
										var $151 = $prev;
										var $type275 = (($151 + 15) & 4294967295);
										var $152 = HEAPU8[($type275)];
										var $conv276 = ((($152)) & 255);
										var $cmp277 = ((($conv276)) | 0) == 2;
										if ($cmp277) {
											__label__ = 84;;
										} else {
											__label__ = 83;;
										}
										$if_then282$$lor_lhs_false278$116: do {
											if (__label__ == 83) {
												var $153 = $prev;
												var $type279 = (($153 + 15) & 4294967295);
												var $154 = HEAPU8[($type279)];
												var $conv280 = ((($154)) & 255);
												var $cmp281 = ((($conv280)) | 0) == 3;
												if ($cmp281) {
													__label__ = 84;
													break $if_then282$$lor_lhs_false278$116;
												}
												var $172 = $ix;
												$ix2 = $172;;
												while (1) {
													var $173 = $ix2;
													var $174 = HEAP32[((_n_phoneme_list) >> 2)];
													var $cmp315 = ((($173)) | 0) < ((($174)) | 0);
													if (!($cmp315)) {
														__label__ = 95;
														break $if_then282$$lor_lhs_false278$116;
													}
													var $175 = $ix2;
													var $arrayidx317 = ((_phoneme_list + $175 * 24) & 4294967295);
													var $type318 = (($arrayidx317 + 15) & 4294967295);
													var $176 = HEAPU8[($type318)];
													var $conv319 = ((($176)) & 255);
													var $cmp320 = ((($conv319)) | 0) == 2;
													var $177 = $ix2;
													if ($cmp320) {
														__label__ = 93;
														break;
													}
													var $inc = ((($177) + 1) & 4294967295);
													$ix2 = $inc;
													__label__ = 91;
													continue;
												}
												var $arrayidx322 = ((_phoneme_list + $177 * 24) & 4294967295);
												var $pitch2323 = (($arrayidx322 + 21) & 4294967295);
												var $178 = HEAP8[($pitch2323)];
												var $179 = $p;
												var $pitch2324 = (($179 + 21) & 4294967295);
												HEAP8[($pitch2324)] = $178;
												__label__ = 95;
												break $if_then282$$lor_lhs_false278$116;
											}
										} while (0);
										$if_then282$$if_end326$124: do {
											if (__label__ == 84) {
												var $155 = $prev;
												var $length283 = (($155 + 12) & 4294967295);
												var $156 = HEAP16[(($length283) >> 1)];
												var $157 = $p;
												var $length284 = (($157 + 12) & 4294967295);
												HEAP16[(($length284) >> 1)] = $156;
												var $158 = $p;
												var $type285 = (($158 + 15) & 4294967295);
												var $159 = HEAPU8[($type285)];
												var $conv286 = ((($159)) & 255);
												var $cmp287 = ((($conv286)) | 0) == 3;
												if ($cmp287) {
													__label__ = 85;;
												} else {
													__label__ = 86;;
												}
												if (__label__ == 85) {
													var $160 = HEAP32[((__ZL6speed1) >> 2)];
													var $conv289 = ((($160)) & 65535);
													var $161 = $p;
													var $length290 = (($161 + 12) & 4294967295);
													HEAP16[(($length290) >> 1)] = $conv289;;
												}
												var $162 = $next;
												var $type292 = (($162 + 15) & 4294967295);
												var $163 = HEAPU8[($type292)];
												var $conv293 = ((($163)) & 255);
												var $cmp294 = ((($conv293)) | 0) == 5;
												if ($cmp294) {
													__label__ = 87;;
												} else {
													__label__ = 88;;
												}
												if (__label__ == 87) {
													var $164 = $p;
													var $length296 = (($164 + 12) & 4294967295);
													var $165 = HEAP16[(($length296) >> 1)];
													var $conv297 = (tempInt = (($165)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
													var $mul = ((($conv297) * 160) & 4294967295);
													var $div298 = ((((($mul)) | 0) / 100) | 0);
													var $conv299 = ((($div298)) & 65535);
													var $166 = $p;
													var $length300 = (($166 + 12) & 4294967295);
													HEAP16[(($length300) >> 1)] = $conv299;;
												}
												var $167 = $next;
												var $type302 = (($167 + 15) & 4294967295);
												var $168 = HEAPU8[($type302)];
												var $conv303 = ((($168)) & 255);
												var $cmp304 = ((($conv303)) | 0) == 7;
												if (!($cmp304)) {
													__label__ = 95;
													break $if_then282$$if_end326$124;
												}
												var $169 = $p;
												var $length306 = (($169 + 12) & 4294967295);
												var $170 = HEAP16[(($length306) >> 1)];
												var $conv307 = (tempInt = (($170)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
												var $mul308 = ((($conv307) * 120) & 4294967295);
												var $div309 = ((((($mul308)) | 0) / 100) | 0);
												var $conv310 = ((($div309)) & 65535);
												var $171 = $p;
												var $length311 = (($171 + 12) & 4294967295);
												HEAP16[(($length311) >> 1)] = $conv310;;
											}
										} while (0);
										var $180 = $p;
										var $pitch2327 = (($180 + 21) & 4294967295);
										var $181 = HEAPU8[($pitch2327)];
										var $conv328 = ((($181)) & 255);
										var $sub329 = ((($conv328) - 16) & 4294967295);
										var $conv330 = ((($sub329)) & 255);
										var $182 = $p;
										var $pitch1331 = (($182 + 20) & 4294967295);
										HEAP8[($pitch1331)] = $conv330;
										var $183 = $p;
										var $pitch2332 = (($183 + 21) & 4294967295);
										var $184 = HEAPU8[($pitch2332)];
										var $conv333 = ((($184)) & 255);
										var $cmp334 = ((($conv333)) | 0) < 16;
										if ($cmp334) {
											__label__ = 96;;
										} else {
											__label__ = 97;;
										}
										if (__label__ == 96) {
											var $185 = $p;
											var $pitch1336 = (($185 + 20) & 4294967295);
											HEAP8[($pitch1336)] = 0;;
										}
										var $186 = $p;
										var $env = (($186 + 14) & 4294967295);
										HEAP8[($env)] = 0;
										$pre_voiced = 0;
										__label__ = 192;
										break $if_end15_thread$$if_end15$9;
									}
								}
							}
						} while (0);
						if (__label__ == 98) {
							$min_drop = 0;
							var $187 = $ix;
							var $add340 = ((($187) + 2) & 4294967295);
							var $arrayidx341 = ((_phoneme_list + $add340 * 24) & 4294967295);
							$next2 = $arrayidx341;
							var $188 = $ix;
							var $add342 = ((($188) + 3) & 4294967295);
							var $arrayidx343 = ((_phoneme_list + $add342 * 24) & 4294967295);
							$next3 = $arrayidx343;
							var $189 = $stress;
							var $cmp344 = ((($189)) | 0) > 7;
							if ($cmp344) {
								__label__ = 99;;
							} else {
								__label__ = 100;;
							}
							$if_end346_thread$$if_end346$139: do {
								if (__label__ == 99) {
									$stress = 7;;
								} else if (__label__ == 100) {
									var $cmp347 = ((($189)) | 0) <= 1;
									if (!($cmp347)) {
										__label__ = 102;
										break $if_end346_thread$$if_end346$139;
									}
									var $190 = $stress;
									var $xor = ($190) ^ 1;
									$stress = $xor;;
								}
							} while (0);
							var $191 = $pre_sonorant;
							var $tobool350 = ((($191)) | 0) != 0;
							var $192 = $stress;
							var $193 = $tr_addr;
							var $stress_amps352 = (($193 + 660) & 4294967295);
							var $arrayidx353 = (($stress_amps352 + $192) & 4294967295);
							var $194 = HEAPU8[($arrayidx353)];
							if ($tobool350) {
								__label__ = 103;;
							} else {
								__label__ = 104;;
							}
							if (__label__ == 103) {
								var $conv354 = ((($194)) & 255);
								var $sub355 = ((($conv354) - 1) & 4294967295);
								var $conv356 = ((($sub355)) & 255);
								var $195 = $p;
								var $amp357 = (($195 + 18) & 4294967295);
								HEAP8[($amp357)] = $conv356;;
							} else if (__label__ == 104) {
								var $196 = $p;
								var $amp361 = (($196 + 18) & 4294967295);
								HEAP8[($amp361)] = $194;;
							}
							var $197 = $emphasized;
							var $tobool363 = ((($197)) | 0) != 0;
							if ($tobool363) {
								__label__ = 106;;
							} else {
								__label__ = 107;;
							}
							if (__label__ == 106) {
								var $198 = $p;
								var $amp365 = (($198 + 18) & 4294967295);
								HEAP8[($amp365)] = 25;;
							}
							var $199 = $ix;
							var $200 = HEAP32[((_n_phoneme_list) >> 2)];
							var $sub367 = ((($200) - 3) & 4294967295);
							var $cmp368 = ((($199)) | 0) >= ((($sub367)) | 0);
							if ($cmp368) {
								__label__ = 108;;
							} else {
								__label__ = 110;;
							}
							$if_then369$$if_end382$151: do {
								if (__label__ == 108) {
									var $201 = $p;
									var $amp370 = (($201 + 18) & 4294967295);
									var $202 = HEAPU8[($amp370)];
									var $conv371 = ((($202)) & 255);
									var $203 = $tr_addr;
									var $langopts372 = (($203) & 4294967295);
									var $param = (($langopts372 + 24) & 4294967295);
									var $arrayidx373 = (($param + 36) & 4294967295);
									var $204 = HEAP32[(($arrayidx373) >> 2)];
									var $cmp374 = ((($conv371)) | 0) > ((($204)) | 0);
									if (!($cmp374)) {
										__label__ = 110;
										break $if_then369$$if_end382$151;
									}
									var $205 = $tr_addr;
									var $langopts376 = (($205) & 4294967295);
									var $param377 = (($langopts376 + 24) & 4294967295);
									var $arrayidx378 = (($param377 + 36) & 4294967295);
									var $206 = HEAP32[(($arrayidx378) >> 2)];
									var $conv379 = ((($206)) & 255);
									var $207 = $p;
									var $amp380 = (($207 + 18) & 4294967295);
									HEAP8[($amp380)] = $conv379;;
								}
							} while (0);
							HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)] = 0;
							$end_of_clause = 0;
							var $208 = $p;
							var $add_ptr = (($208 + 24) & 4294967295);
							$p2 = $add_ptr;
							var $209 = $p2;
							var $newword3843 = (($209 + 19) & 4294967295);
							var $210 = HEAPU8[($newword3843)];
							var $conv3854 = ((($210)) & 255);
							var $cmp3865 = ((($conv3854)) | 0) == 0;
							var $211 = $p2;
							if ($cmp3865) {
								__lastLabel__ = 110;
								__label__ = 111;;
							} else {
								__lastLabel__ = 110;
								__label__ = 117;;
							}
							$for_body387$$for_end405$155: do {
								if (__label__ == 111) {
									$for_body387$156: while (1) {
										var $212 = __lastLabel__ == 116 ? $224 : ($211);
										var $type388 = (($212 + 15) & 4294967295);
										var $213 = HEAPU8[($type388)];
										var $conv389 = ((($213)) & 255);
										var $cmp390 = ((($conv389)) | 0) == 2;
										if ($cmp390) {
											__label__ = 112;;
										} else {
											__label__ = 114;;
										}
										$land_lhs_true391$$if_end398$158: do {
											if (__label__ == 112) {
												var $214 = $p2;
												var $ph392 = (($214 + 8) & 4294967295);
												var $215 = HEAP32[(($ph392) >> 2)];
												var $phflags393 = (($215 + 4) & 4294967295);
												var $216 = HEAP32[(($phflags393) >> 2)];
												var $and394 = ($216) & 1048576;
												var $tobool395 = ((($and394)) | 0) != 0;
												if ($tobool395) {
													__label__ = 114;
													break $land_lhs_true391$$if_end398$158;
												}
												var $217 = HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)];
												var $inc397 = ((($217) + 1) & 4294967295);
												HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)] = $inc397;;
											}
										} while (0);
										var $218 = $p2;
										var $ph399 = (($218 + 8) & 4294967295);
										var $219 = HEAP32[(($ph399) >> 2)];
										var $code = (($219 + 10) & 4294967295);
										var $220 = HEAPU8[($code)];
										var $conv400 = ((($220)) & 255);
										var $cmp401 = ((($conv400)) | 0) == 27;
										if ($cmp401) {
											__label__ = 115;;
										} else {
											__label__ = 116;;
										}
										if (__label__ == 115) {
											$end_of_clause = 2;;
										}
										var $221 = $p2;
										var $incdec_ptr = (($221 + 24) & 4294967295);
										$p2 = $incdec_ptr;
										var $222 = $p2;
										var $newword384 = (($222 + 19) & 4294967295);
										var $223 = HEAPU8[($newword384)];
										var $conv385 = ((($223)) & 255);
										var $cmp386 = ((($conv385)) | 0) == 0;
										var $224 = $p2;
										if ($cmp386) {
											__lastLabel__ = 116;
											__label__ = 111;
											continue $for_body387$156;
										} else {
											__lastLabel__ = 116;
											__label__ = 117;
											break $for_body387$$for_end405$155;
										}
									}
								}
							} while (0);
							var $_lcssa = __lastLabel__ == 110 ? $211 : ($224);
							var $ph406 = (($_lcssa + 8) & 4294967295);
							var $225 = HEAP32[(($ph406) >> 2)];
							var $code407 = (($225 + 10) & 4294967295);
							var $226 = HEAPU8[($code407)];
							var $conv408 = ((($226)) & 255);
							var $cmp409 = ((($conv408)) | 0) == 27;
							if ($cmp409) {
								__label__ = 118;;
							} else {
								__label__ = 119;;
							}
							if (__label__ == 118) {
								$end_of_clause = 2;;
							}
							var $227 = $p2;
							var $newword412 = (($227 + 19) & 4294967295);
							var $228 = HEAPU8[($newword412)];
							var $conv413 = ((($228)) & 255);
							var $and414 = ($conv413) & 2;
							var $tobool415 = ((($and414)) | 0) != 0;
							var $229 = HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)];
							var $cmp417 = ((($229)) | 0) == 0;
							var $or_cond = ($tobool415) & ($cmp417);
							if ($or_cond) {
								__label__ = 120;;
							} else {
								__label__ = 121;;
							}
							if (__label__ == 120) {
								$end_of_clause = 2;;
							}
							var $230 = $next;
							var $ph420 = (($230 + 8) & 4294967295);
							var $231 = HEAP32[(($ph420) >> 2)];
							var $code421 = (($231 + 10) & 4294967295);
							var $232 = HEAPU8[($code421)];
							var $conv422 = ((($232)) & 255);
							var $cmp423 = ((($conv422)) | 0) == 23;
							if ($cmp423) {
								__label__ = 122;;
							} else {
								__label__ = 124;;
							}
							$land_lhs_true424$$if_end431$172: do {
								if (__label__ == 122) {
									var $233 = $next2;
									var $type425 = (($233 + 15) & 4294967295);
									var $234 = HEAPU8[($type425)];
									var $conv426 = ((($234)) & 255);
									var $cmp427 = ((($conv426)) | 0) == 0;
									if (!($cmp427)) {
										__label__ = 124;
										break $land_lhs_true424$$if_end431$172;
									}
									var $235 = $next2;
									$next = $235;
									var $236 = $next3;
									$next2 = $236;
									var $237 = $ix;
									var $add429 = ((($237) + 4) & 4294967295);
									var $arrayidx430 = ((_phoneme_list + $add429 * 24) & 4294967295);
									$next3 = $arrayidx430;;
								}
							} while (0);
							var $238 = HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)];
							var $cmp432 = ((($238)) | 0) == 0;
							var $239 = $next2;
							var $ph434 = (($239 + 8) & 4294967295);
							var $240 = HEAP32[(($ph434) >> 2)];
							var $length_mod435 = (($240 + 15) & 4294967295);
							var $241 = HEAPU8[($length_mod435)];
							var $conv436 = ((($241)) & 255);
							var $mul437 = ((($conv436) * 10) & 4294967295);
							var $242 = $next;
							var $ph438 = (($242 + 8) & 4294967295);
							var $243 = HEAP32[(($ph438) >> 2)];
							var $length_mod439 = (($243 + 15) & 4294967295);
							var $244 = HEAPU8[($length_mod439)];
							var $conv440 = ((($244)) & 255);
							var $add441 = ((($conv440) + ($mul437)) & 4294967295);
							var $245 = $tr_addr;
							var $langopts442 = (($245) & 4294967295);
							if ($cmp432) {
								__label__ = 125;;
							} else {
								__label__ = 129;;
							}
							$if_then433$$if_else466$176: do {
								if (__label__ == 125) {
									var $length_mods0 = (($langopts442 + 180) & 4294967295);
									var $246 = HEAP32[(($length_mods0) >> 2)];
									var $arrayidx443 = (($246 + $add441) & 4294967295);
									var $247 = HEAPU8[($arrayidx443)];
									var $conv444 = ((($247)) & 255);
									$len = $conv444;
									var $248 = $next;
									var $newword445 = (($248 + 19) & 4294967295);
									var $249 = HEAP8[($newword445)];
									var $tobool446 = (tempInt = (($249)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
									if ($tobool446) {
										__label__ = 126;;
									} else {
										__label__ = 128;;
									}
									$land_lhs_true447$$if_else464$178: do {
										if (__label__ == 126) {
											var $250 = $tr_addr;
											var $langopts448 = (($250) & 4294967295);
											var $word_gap449 = (($langopts448) & 4294967295);
											var $251 = HEAP32[(($word_gap449) >> 2)];
											var $and450 = ($251) & 32;
											var $tobool451 = ((($and450)) | 0) != 0;
											if (!($tobool451)) {
												__label__ = 128;
												break $land_lhs_true447$$if_else464$178;
											}
											var $252 = $len;
											var $253 = $next;
											var $ph453 = (($253 + 8) & 4294967295);
											var $254 = HEAP32[(($ph453) >> 2)];
											var $length_mod454 = (($254 + 15) & 4294967295);
											var $255 = HEAPU8[($length_mod454)];
											var $conv455 = ((($255)) & 255);
											var $mul456 = ((($conv455) * 10) & 4294967295);
											var $add457 = ((($mul456) + 1) & 4294967295);
											var $256 = $tr_addr;
											var $langopts458 = (($256) & 4294967295);
											var $length_mods0459 = (($langopts458 + 180) & 4294967295);
											var $257 = HEAP32[(($length_mods0459) >> 2)];
											var $arrayidx460 = (($257 + $add457) & 4294967295);
											var $258 = HEAPU8[($arrayidx460)];
											var $conv461 = ((($258)) & 255);
											var $add462 = ((($conv461) + ($252)) & 4294967295);
											var $div463 = ((((($add462)) | 0) / 2) | 0);
											$length_mod = $div463;
											__label__ = 134;
											break $if_then433$$if_else466$176;
										}
									} while (0);
									var $259 = $len;
									$length_mod = $259;;
								} else if (__label__ == 129) {
									var $length_mods = (($langopts442 + 176) & 4294967295);
									var $260 = HEAP32[(($length_mods) >> 2)];
									var $arrayidx476 = (($260 + $add441) & 4294967295);
									var $261 = HEAPU8[($arrayidx476)];
									var $conv477 = ((($261)) & 255);
									$length_mod = $conv477;
									var $262 = $next;
									var $type478 = (($262 + 15) & 4294967295);
									var $263 = HEAPU8[($type478)];
									var $conv479 = ((($263)) & 255);
									var $cmp480 = ((($conv479)) | 0) == 8;
									if (!($cmp480)) {
										__label__ = 134;
										break $if_then433$$if_else466$176;
									}
									var $264 = $next2;
									var $type482 = (($264 + 15) & 4294967295);
									var $265 = HEAPU8[($type482)];
									var $conv483 = ((($265)) & 255);
									var $cmp484 = ((($conv483)) | 0) == 4;
									if ($cmp484) {
										__label__ = 132;;
									} else {
										__label__ = 131;;
									}
									if (__label__ == 131) {
										var $266 = $next2;
										var $type486 = (($266 + 15) & 4294967295);
										var $267 = HEAPU8[($type486)];
										var $conv487 = ((($267)) & 255);
										var $cmp488 = ((($conv487)) | 0) == 5;
										if (!($cmp488)) {
											__label__ = 134;
											break $if_then433$$if_else466$176;
										}
									}
									var $268 = $next3;
									var $ph490 = (($268 + 8) & 4294967295);
									var $269 = HEAP32[(($ph490) >> 2)];
									var $phflags491 = (($269 + 4) & 4294967295);
									var $270 = HEAP32[(($phflags491) >> 2)];
									var $and492 = ($270) & 8;
									var $tobool493 = ((($and492)) | 0) != 0;
									if (!($tobool493)) {
										__label__ = 134;
										break $if_then433$$if_else466$176;
									}
									var $271 = $length_mod;
									var $sub495 = ((($271) - 15) & 4294967295);
									$length_mod = $sub495;;
								}
							} while (0);
							var $272 = HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)];
							var $cmp498 = ((($272)) | 0) == 0;
							if ($cmp498) {
								__label__ = 135;;
							} else {
								__label__ = 136;;
							}
							if (__label__ == 135) {
								var $273 = HEAP32[((__ZL6speed1) >> 2)];
								var $274 = $length_mod;
								var $mul500 = ((($274) * ($273)) & 4294967295);
								$length_mod = $mul500;;
							} else if (__label__ == 136) {
								var $275 = HEAP32[((__ZZ11CalcLengthsP10TranslatorE14more_syllables) >> 2)];
								var $cmp502 = ((($275)) | 0) == 1;
								if ($cmp502) {
									__label__ = 137;;
								} else {
									__label__ = 138;;
								}
								if (__label__ == 137) {
									var $276 = HEAP32[((__ZL6speed2) >> 2)];
									var $277 = $length_mod;
									var $mul504 = ((($277) * ($276)) & 4294967295);
									$length_mod = $mul504;;
								} else if (__label__ == 138) {
									var $278 = HEAP32[((__ZL6speed3) >> 2)];
									var $279 = $length_mod;
									var $mul506 = ((($279) * ($278)) & 4294967295);
									$length_mod = $mul506;;
								}
							}
							var $280 = $length_mod;
							var $div509 = ((((($280)) | 0) / 128) | 0);
							$length_mod = $div509;
							var $cmp510 = ((($div509)) | 0) < 8;
							if ($cmp510) {
								__label__ = 140;;
							} else {
								__label__ = 141;;
							}
							if (__label__ == 140) {
								$length_mod = 8;;
							}
							var $281 = $stress;
							var $cmp513 = ((($281)) | 0) >= 7;
							if ($cmp513) {
								__label__ = 142;;
							} else {
								__label__ = 144;;
							}
							$if_then514$$if_else520$199: do {
								if (__label__ == 142) {
									var $282 = $length_mod;
									var $add515 = ((($282) + 20) & 4294967295);
									$length_mod = $add515;
									var $283 = $emphasized;
									var $tobool516 = ((($283)) | 0) != 0;
									if (!($tobool516)) {
										__label__ = 146;
										break $if_then514$$if_else520$199;
									}
									var $284 = $length_mod;
									var $add518 = ((($284) + 10) & 4294967295);
									$length_mod = $add518;;
								} else if (__label__ == 144) {
									var $285 = $emphasized;
									var $tobool521 = ((($285)) | 0) != 0;
									if (!($tobool521)) {
										__label__ = 146;
										break $if_then514$$if_else520$199;
									}
									var $286 = $length_mod;
									var $add523 = ((($286) + 20) & 4294967295);
									$length_mod = $add523;;
								}
							} while (0);
							var $287 = $stress;
							var $288 = $tr_addr;
							var $stress_lengths = (($288 + 676) & 4294967295);
							var $arrayidx526 = (($stress_lengths + $287 * 2) & 4294967295);
							var $289 = HEAP16[(($arrayidx526) >> 1)];
							var $conv527 = (tempInt = (($289)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							$len = $conv527;
							var $cmp528 = ((($conv527)) | 0) == 0;
							if ($cmp528) {
								__label__ = 147;;
							} else {
								__label__ = 148;;
							}
							if (__label__ == 147) {
								var $290 = $tr_addr;
								var $stress_lengths530 = (($290 + 676) & 4294967295);
								var $arrayidx531 = (($stress_lengths530 + 12) & 4294967295);
								var $291 = HEAP16[(($arrayidx531) >> 1)];
								var $conv532 = (tempInt = (($291)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								$len = $conv532;;
							}
							var $292 = $length_mod;
							var $293 = $len;
							var $mul534 = ((($293) * ($292)) & 4294967295);
							$length_mod = $mul534;
							var $294 = $p;
							var $tone_ph = (($294 + 3) & 4294967295);
							var $295 = HEAPU8[($tone_ph)];
							var $conv535 = ((($295)) & 255);
							var $cmp536 = ((($conv535)) | 0) != 0;
							if ($cmp536) {
								__label__ = 149;;
							} else {
								__label__ = 151;;
							}
							$if_then537$$if_end546$208: do {
								if (__label__ == 149) {
									var $296 = $p;
									var $tone_ph538 = (($296 + 3) & 4294967295);
									var $297 = HEAPU8[($tone_ph538)];
									var $idxprom = ((($297)) & 255);
									var $arrayidx539 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
									var $298 = HEAP32[(($arrayidx539) >> 2)];
									var $std_length = (($298 + 14) & 4294967295);
									var $299 = HEAPU8[($std_length)];
									var $conv540 = ((($299)) & 255);
									$tone_mod = $conv540;
									var $cmp541 = ((($conv540)) | 0) > 0;
									if (!($cmp541)) {
										__label__ = 151;
										break $if_then537$$if_end546$208;
									}
									var $300 = $length_mod;
									var $301 = $tone_mod;
									var $mul543 = ((($301) * ($300)) & 4294967295);
									var $div544 = ((((($mul543)) | 0) / 100) | 0);
									$length_mod = $div544;;
								}
							} while (0);
							var $302 = $end_of_clause;
							var $cmp547 = ((($302)) | 0) == 2;
							if ($cmp547) {
								__label__ = 152;;
							} else {
								__label__ = 155;;
							}
							if (__label__ == 152) {
								var $303 = $p;
								var $ph549 = (($303 + 8) & 4294967295);
								var $304 = HEAP32[(($ph549) >> 2)];
								var $std_length550 = (($304 + 14) & 4294967295);
								var $305 = HEAPU8[($std_length550)];
								var $conv551 = ((($305)) & 255);
								var $mul552 = ((($conv551) * 2) & 4294967295);
								$len = $mul552;
								var $306 = $tr_addr;
								var $langopts553 = (($306) & 4294967295);
								var $stress_flags = (($langopts553 + 12) & 4294967295);
								var $307 = HEAP32[(($stress_flags) >> 2)];
								var $and554 = ($307) & 262144;
								var $tobool555 = ((($and554)) | 0) != 0;
								if ($tobool555) {
									__label__ = 153;;
								} else {
									__label__ = 154;;
								}
								if (__label__ == 153) {
									$len = 200;;
								}
								var $308 = $length_mod;
								var $309 = $len;
								var $sub558 = ((280 - ($309)) & 4294967295);
								var $div559 = ((((($sub558)) | 0) / 3) | 0);
								var $add560 = ((($div559) + 256) & 4294967295);
								var $mul561 = ((($add560) * ($308)) & 4294967295);
								var $div562 = ((((($mul561)) | 0) / 256) | 0);
								$length_mod = $div562;;
							}
							var $310 = $length_mod;
							var $311 = $tr_addr;
							var $langopts564 = (($311) & 4294967295);
							var $max_lengthmod = (($langopts564 + 272) & 4294967295);
							var $312 = HEAP32[(($max_lengthmod) >> 2)];
							var $313 = HEAP32[((__ZL6speed1) >> 2)];
							var $mul565 = ((($313) * ($312)) & 4294967295);
							var $cmp566 = ((($310)) | 0) > ((($mul565)) | 0);
							if ($cmp566) {
								__label__ = 156;;
							} else {
								__label__ = 157;;
							}
							if (__label__ == 156) {
								var $314 = $tr_addr;
								var $langopts568 = (($314) & 4294967295);
								var $max_lengthmod569 = (($langopts568 + 272) & 4294967295);
								var $315 = HEAP32[(($max_lengthmod569) >> 2)];
								var $316 = HEAP32[((__ZL6speed1) >> 2)];
								var $mul570 = ((($316) * ($315)) & 4294967295);
								$length_mod = $mul570;;
							}
							var $317 = $length_mod;
							var $div572 = ((((($317)) | 0) / 128) | 0);
							$length_mod = $div572;
							var $318 = $p;
							var $type573 = (($318 + 15) & 4294967295);
							var $319 = HEAPU8[($type573)];
							var $conv574 = ((($319)) & 255);
							var $cmp575 = ((($conv574)) | 0) != 2;
							if ($cmp575) {
								__label__ = 158;;
							} else {
								__label__ = 159;;
							}
							if (__label__ == 158) {
								$length_mod = 256;
								$min_drop = 16;;
							}
							var $320 = $length_mod;
							var $conv578 = ((($320)) & 65535);
							var $321 = $p;
							var $length579 = (($321 + 12) & 4294967295);
							HEAP16[(($length579) >> 1)] = $conv578;
							var $322 = $p;
							var $env580 = (($322 + 14) & 4294967295);
							var $323 = HEAPU8[($env580)];
							var $conv581 = ((($323)) & 255);
							var $cmp582 = ((($conv581)) | 0) >= 19;
							if ($cmp582) {
								__label__ = 160;;
							} else {
								__label__ = 161;;
							}
							if (__label__ == 160) {
								var $324 = HEAP32[((__impure_ptr) >> 2)];
								var $_stderr = (($324 + 12) & 4294967295);
								var $325 = HEAP32[(($_stderr) >> 2)];
								var $326 = _fwrite(((__str294) & 4294967295), 28, 1, $325);
								var $327 = $p;
								var $env584 = (($327 + 14) & 4294967295);
								HEAP8[($env584)] = 0;;
							}
							var $328 = $p;
							var $env586 = (($328 + 14) & 4294967295);
							var $329 = HEAPU8[($env586)];
							var $conv587 = ((($329)) & 255);
							var $add588 = ((($conv587) + 1) & 4294967295);
							$env2 = $add588;
							var $330 = $p;
							var $tone_ph589 = (($330 + 3) & 4294967295);
							var $331 = HEAPU8[($tone_ph589)];
							var $conv590 = ((($331)) & 255);
							var $cmp591 = ((($conv590)) | 0) != 0;
							if ($cmp591) {
								__label__ = 162;;
							} else {
								__label__ = 163;;
							}
							if (__label__ == 162) {
								var $332 = $p;
								var $tone_ph593 = (($332 + 3) & 4294967295);
								var $333 = HEAPU8[($tone_ph593)];
								var $conv594 = ((($333)) & 255);
								__Z17InterpretPhoneme2iP12PHONEME_DATA($conv594, $phdata_tone);
								var $334 = HEAP32[(($pitch_env595) >> 2)];
								var $call596 = __Z11GetEnvelopei($334);
								$pitch_env = $call596;;
							} else if (__label__ == 163) {
								var $335 = $env2;
								var $arrayidx598 = ((_envelope_data + $335 * 4) & 4294967295);
								var $336 = HEAP32[(($arrayidx598) >> 2)];
								$pitch_env = $336;;
							}
							var $337 = $p;
							var $pitch1600 = (($337 + 20) & 4294967295);
							var $338 = HEAPU8[($pitch1600)];
							var $conv601 = ((($338)) & 255);
							var $339 = $p;
							var $pitch2602 = (($339 + 21) & 4294967295);
							var $340 = HEAPU8[($pitch2602)];
							var $conv603 = ((($340)) & 255);
							var $341 = $p;
							var $pitch1604 = (($341 + 20) & 4294967295);
							var $342 = HEAPU8[($pitch1604)];
							var $conv605 = ((($342)) & 255);
							var $sub606 = ((($conv603) - ($conv605)) & 4294967295);
							var $343 = $pitch_env;
							var $arrayidx607 = (($343) & 4294967295);
							var $344 = HEAPU8[($arrayidx607)];
							var $conv608 = ((($344)) & 255);
							var $mul609 = ((($conv608) * ($sub606)) & 4294967295);
							var $div610 = ((((($mul609)) | 0) / 256) | 0);
							var $add611 = ((($div610) + ($conv601)) & 4294967295);
							$pitch_start = $add611;
							var $345 = $pre_sonorant;
							var $tobool612 = ((($345)) | 0) != 0;
							if ($tobool612) {
								__lastLabel__ = 164;
								__label__ = 167;;
							} else {
								__lastLabel__ = 164;
								__label__ = 165;;
							}
							$if_then615$$lor_lhs_false613$231: do {
								if (__label__ == 165) {
									var $346 = $pre_voiced;
									var $tobool614 = ((($346)) | 0) != 0;
									if (!($tobool614)) {
										__label__ = 177;
										break $if_then615$$lor_lhs_false613$231;
									}
									var $_pr2 = $pitch_start;
									__lastLabel__ = 166;
									__label__ = 167;
									break $if_then615$$lor_lhs_false613$231;
								}
							} while (0);
							$if_then615$$if_end650$234: do {
								if (__label__ == 167) {
									var $347 = __lastLabel__ == 166 ? $_pr2 : ($add611);
									var $cmp616 = ((($347)) | 0) == 255;
									if ($cmp616) {
										__label__ = 168;;
									} else {
										__label__ = 169;;
									}
									if (__label__ == 168) {
										var $348 = $pitch_start;
										$last_pitch = $348;;
									}
									var $349 = $pitch_start;
									var $350 = $last_pitch;
									var $sub619 = ((($349) - ($350)) & 4294967295);
									var $cmp620 = ((($sub619)) | 0) > 16;
									if ($cmp620) {
										__label__ = 170;;
									} else {
										__label__ = 171;;
									}
									if (__label__ == 170) {
										var $351 = $pitch_start;
										var $sub622 = ((($351) - 16) & 4294967295);
										$last_pitch = $sub622;;
									}
									var $352 = $last_pitch;
									var $conv624 = ((($352)) & 255);
									var $353 = $prev;
									var $pitch1625 = (($353 + 20) & 4294967295);
									HEAP8[($pitch1625)] = $conv624;
									var $354 = $pitch_start;
									var $conv626 = ((($354)) & 255);
									var $355 = $prev;
									var $pitch2627 = (($355 + 21) & 4294967295);
									HEAP8[($pitch2627)] = $conv626;
									var $356 = $last_pitch;
									var $357 = $pitch_start;
									var $cmp628 = ((($356)) | 0) < ((($357)) | 0);
									var $358 = $prev;
									var $env630 = (($358 + 14) & 4294967295);
									if ($cmp628) {
										__label__ = 172;;
									} else {
										__label__ = 173;;
									}
									if (__label__ == 172) {
										HEAP8[($env630)] = 2;
										var $359 = $env2;
										var $conv631 = ((($359)) & 255);
										var $360 = $p;
										var $env632 = (($360 + 14) & 4294967295);
										HEAP8[($env632)] = $conv631;;
									} else if (__label__ == 173) {
										HEAP8[($env630)] = 0;;
									}
									var $361 = $length_mod;
									var $conv636 = ((($361)) & 65535);
									var $362 = $prev;
									var $length637 = (($362 + 12) & 4294967295);
									HEAP16[(($length637) >> 1)] = $conv636;
									var $363 = $p;
									var $amp638 = (($363 + 18) & 4294967295);
									var $364 = HEAP8[($amp638)];
									var $365 = $prev;
									var $amp639 = (($365 + 18) & 4294967295);
									HEAP8[($amp639)] = $364;
									var $366 = $prev;
									var $type640 = (($366 + 15) & 4294967295);
									var $367 = HEAPU8[($type640)];
									var $conv641 = ((($367)) & 255);
									var $cmp642 = ((($conv641)) | 0) != 3;
									if (!($cmp642)) {
										__label__ = 177;
										break $if_then615$$if_end650$234;
									}
									var $368 = $prev;
									var $amp644 = (($368 + 18) & 4294967295);
									var $369 = HEAPU8[($amp644)];
									var $conv645 = ((($369)) & 255);
									var $cmp646 = ((($conv645)) | 0) > 18;
									if (!($cmp646)) {
										__label__ = 177;
										break $if_then615$$if_end650$234;
									}
									var $370 = $prev;
									var $amp648 = (($370 + 18) & 4294967295);
									HEAP8[($amp648)] = 18;;
								}
							} while (0);
							var $371 = $next;
							var $synthflags651 = (($371 + 4) & 4294967295);
							var $372 = HEAPU16[(($synthflags651) >> 1)];
							var $conv652 = ((($372)) & 65535);
							var $and653 = ($conv652) & -2;
							var $conv654 = ((($and653)) & 65535);
							HEAP16[(($synthflags651) >> 1)] = $conv654;
							var $373 = $next;
							var $type655 = (($373 + 15) & 4294967295);
							var $374 = HEAPU8[($type655)];
							var $conv656 = ((($374)) & 255);
							var $cmp657 = ((($conv656)) | 0) == 8;
							if ($cmp657) {
								__label__ = 178;;
							} else {
								__label__ = 180;;
							}
							$land_lhs_true658$$if_end666$249: do {
								if (__label__ == 178) {
									var $375 = $next2;
									var $type659 = (($375 + 15) & 4294967295);
									var $376 = HEAPU8[($type659)];
									var $conv660 = ((($376)) & 255);
									var $cmp661 = ((($conv660)) | 0) != 2;
									if (!($cmp661)) {
										__label__ = 180;
										break $land_lhs_true658$$if_end666$249;
									}
									var $377 = $next;
									var $synthflags663 = (($377 + 4) & 4294967295);
									var $378 = HEAPU16[(($synthflags663) >> 1)];
									var $conv664 = ((($378)) & 65535);
									var $or = ($conv664) | 1;
									var $conv665 = ((($or)) & 65535);
									HEAP16[(($synthflags663) >> 1)] = $conv665;;
								}
							} while (0);
							var $379 = $next;
							var $type667 = (($379 + 15) & 4294967295);
							var $380 = HEAPU8[($type667)];
							var $conv668 = ((($380)) & 255);
							var $cmp669 = ((($conv668)) | 0) == 3;
							if ($cmp669) {
								__label__ = 181;;
							} else {
								__label__ = 186;;
							}
							$if_then670$$if_end697$253: do {
								if (__label__ == 181) {
									var $381 = $next;
									var $synthflags671 = (($381 + 4) & 4294967295);
									var $382 = HEAPU16[(($synthflags671) >> 1)];
									var $conv672 = ((($382)) & 65535);
									var $or673 = ($conv672) | 1;
									var $conv674 = ((($or673)) & 65535);
									HEAP16[(($synthflags671) >> 1)] = $conv674;
									var $383 = $next2;
									var $type675 = (($383 + 15) & 4294967295);
									var $384 = HEAPU8[($type675)];
									var $conv676 = ((($384)) & 255);
									var $cmp677 = ((($conv676)) | 0) == 2;
									if ($cmp677) {
										__label__ = 182;;
									} else {
										__label__ = 183;;
									}
									if (__label__ == 182) {
										var $385 = $next;
										var $synthflags679 = (($385 + 4) & 4294967295);
										var $386 = HEAPU16[(($synthflags679) >> 1)];
										var $conv680 = ((($386)) & 65535);
										var $and681 = ($conv680) & -2;
										var $conv682 = ((($and681)) & 65535);
										HEAP16[(($synthflags679) >> 1)] = $conv682;;
									}
									var $387 = $next2;
									var $type684 = (($387 + 15) & 4294967295);
									var $388 = HEAPU8[($type684)];
									var $conv685 = ((($388)) & 255);
									var $cmp686 = ((($conv685)) | 0) != 2;
									if (!($cmp686)) {
										__label__ = 186;
										break $if_then670$$if_end697$253;
									}
									var $389 = $next;
									var $ph688 = (($389 + 8) & 4294967295);
									var $390 = HEAP32[(($ph688) >> 2)];
									var $mnemonic = (($390) & 4294967295);
									var $391 = HEAP32[(($mnemonic) >> 2)];
									var $cmp689 = ((($391)) | 0) == 12146;
									if (!($cmp689)) {
										__label__ = 186;
										break $if_then670$$if_end697$253;
									}
									var $392 = $next;
									var $synthflags691 = (($392 + 4) & 4294967295);
									var $393 = HEAPU16[(($synthflags691) >> 1)];
									var $conv692 = ((($393)) & 65535);
									var $and693 = ($conv692) & -2;
									var $conv694 = ((($and693)) & 65535);
									HEAP16[(($synthflags691) >> 1)] = $conv694;;
								}
							} while (0);
							var $394 = $min_drop;
							var $cmp698 = ((($394)) | 0) > 0;
							if ($cmp698) {
								__label__ = 187;;
							} else {
								__label__ = 191;;
							}
							$land_lhs_true699$$if_end715$261: do {
								if (__label__ == 187) {
									var $395 = $p;
									var $pitch2700 = (($395 + 21) & 4294967295);
									var $396 = HEAPU8[($pitch2700)];
									var $conv701 = ((($396)) & 255);
									var $397 = $p;
									var $pitch1702 = (($397 + 20) & 4294967295);
									var $398 = HEAPU8[($pitch1702)];
									var $conv703 = ((($398)) & 255);
									var $sub704 = ((($conv701) - ($conv703)) & 4294967295);
									var $399 = $min_drop;
									var $cmp705 = ((($sub704)) | 0) < ((($399)) | 0);
									if (!($cmp705)) {
										__label__ = 191;
										break $land_lhs_true699$$if_end715$261;
									}
									var $400 = $p;
									var $pitch2707 = (($400 + 21) & 4294967295);
									var $401 = HEAPU8[($pitch2707)];
									var $conv708 = ((($401)) & 255);
									var $402 = $min_drop;
									var $sub709 = ((($conv708) - ($402)) & 4294967295);
									$pitch1 = $sub709;
									var $403 = $pitch1;
									var $cmp710 = ((($403)) | 0) < 0;
									if ($cmp710) {
										__label__ = 189;;
									} else {
										__label__ = 190;;
									}
									if (__label__ == 189) {
										$pitch1 = 0;;
									}
									var $404 = $pitch1;
									var $conv713 = ((($404)) & 255);
									var $405 = $p;
									var $pitch1714 = (($405 + 20) & 4294967295);
									HEAP8[($pitch1714)] = $conv713;;
								}
							} while (0);
							var $406 = $p;
							var $pitch1716 = (($406 + 20) & 4294967295);
							var $407 = HEAPU8[($pitch1716)];
							var $conv717 = ((($407)) & 255);
							var $408 = $p;
							var $pitch2718 = (($408 + 21) & 4294967295);
							var $409 = HEAPU8[($pitch2718)];
							var $conv719 = ((($409)) & 255);
							var $410 = $p;
							var $pitch1720 = (($410 + 20) & 4294967295);
							var $411 = HEAPU8[($pitch1720)];
							var $conv721 = ((($411)) & 255);
							var $sub722 = ((($conv719) - ($conv721)) & 4294967295);
							var $412 = $p;
							var $env723 = (($412 + 14) & 4294967295);
							var $413 = HEAPU8[($env723)];
							var $idxprom724 = ((($413)) & 255);
							var $arrayidx725 = ((_envelope_data + $idxprom724 * 4) & 4294967295);
							var $414 = HEAP32[(($arrayidx725) >> 2)];
							var $arrayidx726 = (($414 + 127) & 4294967295);
							var $415 = HEAPU8[($arrayidx726)];
							var $conv727 = ((($415)) & 255);
							var $mul728 = ((($conv727) * ($sub722)) & 4294967295);
							var $div729 = ((((($mul728)) | 0) / 256) | 0);
							var $add730 = ((($div729) + ($conv717)) & 4294967295);
							$last_pitch = $add730;
							$pre_sonorant = 0;
							$pre_voiced = 0;;
						}
						var $416 = $ix;
						var $inc732 = ((($416) + 1) & 4294967295);
						$ix = $inc732;
						var $417 = $ix;
						var $418 = HEAP32[((_n_phoneme_list) >> 2)];
						var $cmp = ((($417)) | 0) < ((($418)) | 0);
						if ($cmp) {
							__label__ = 2;
							continue $for_body$4;
						} else {
							__label__ = 193;
							break $for_body_lr_ph$$for_end733$2;
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL11DoEmbedded2Pi($embix) {;
			var __label__;
			var $embix_addr;
			var $word;
			$embix_addr = $embix;;
			while (1) {
				var $0 = $embix_addr;
				var $1 = HEAP32[(($0) >> 2)];
				var $inc = ((($1) + 1) & 4294967295);
				HEAP32[(($0) >> 2)] = $inc;
				var $arrayidx = ((_embedded_list + $1 * 4) & 4294967295);
				var $2 = HEAP32[(($arrayidx) >> 2)];
				$word = $2;
				var $3 = $word;
				var $and = ($3) & 31;
				var $cmp = ((($and)) | 0) == 2;
				if ($cmp) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $4 = $word;
					var $and1 = ($4) & 127;
					var $5 = $word;
					var $shr = ($5) >>> 8;
					__Z11SetEmbeddedii($and1, $shr);
					__Z8SetSpeedi(1);;
				}
				var $6 = $word;
				var $and2 = ($6) & 128;
				var $cmp3 = ((($and2)) | 0) == 0;
				if ($cmp3) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 4;
					break;
				}
			};
			return;
			return;
		}

		function __Z20LookupAccentedLetterP10TranslatorjPc($tr, $letter, $ph_buf) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 128;
			_memset(__stackBase__, 0, 128);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $letter_addr;
			var $ph_buf_addr;
			var $accent_data;
			var $accent1;
			var $accent2;
			var $basic_letter;
			var $letter2;
			var $ph_letter1 = __stackBase__;
			var $ph_letter2 = __stackBase__ + 32;
			var $ph_accent1 = __stackBase__ + 64;
			var $ph_accent2 = __stackBase__ + 96;
			$tr_addr = $tr;
			$letter_addr = $letter;
			$ph_buf_addr = $ph_buf;
			$accent_data = 0;
			$accent1 = 0;
			$accent2 = 0;
			$letter2 = 0;
			var $arrayidx = (($ph_accent2) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $0 = $letter_addr;
			var $cmp = ((($0)) >>> 0) >= 224;
			var $1 = $letter_addr;
			var $cmp1 = ((($1)) >>> 0) < 383;
			var $or_cond = ($cmp) & ($cmp1);
			var $2 = $letter_addr;
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $sub = ((($2) - 224) & 4294967295);
				var $arrayidx2 = ((__ZL18letter_accents_0e0 + $sub * 2) & 4294967295);
				var $3 = HEAPU16[(($arrayidx2) >> 1)];
				var $conv = ((($3)) & 65535);
				$accent_data = $conv;
				__lastLabel__ = 1;;
			} else if (__label__ == 2) {
				var $cmp3 = ((($2)) >>> 0) >= 592;
				var $4 = $letter_addr;
				var $cmp5 = ((($4)) >>> 0) <= 680;
				var $or_cond1 = ($cmp3) & ($cmp5);
				if ($or_cond1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $5 = $letter_addr;
					var $sub7 = ((($5) - 592) & 4294967295);
					var $arrayidx8 = ((__ZL18letter_accents_250 + $sub7 * 2) & 4294967295);
					var $6 = HEAPU16[(($arrayidx8) >> 1)];
					var $conv9 = ((($6)) & 65535);
					$accent_data = $conv9;
					__lastLabel__ = 3;;
				} else if (__label__ == 4) {
					var $_pr = $accent_data;
					__lastLabel__ = 4;;
				}
			}
			var $7 = __lastLabel__ == 4 ? $_pr : (__lastLabel__ == 3 ? $conv9 : ($conv));
			var $cmp11 = ((($7)) | 0) != 0;
			if ($cmp11) {
				__label__ = 6;;
			} else {
				__label__ = 24;;
			}
			$if_then12$$if_end91$9: do {
				if (__label__ == 6) {
					var $8 = $accent_data;
					var $and = ($8) & 63;
					var $add = ((($and) + 59) & 4294967295);
					$basic_letter = $add;
					var $9 = $basic_letter;
					var $cmp13 = ((($9)) | 0) < 97;
					if ($cmp13) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						var $10 = $basic_letter;
						var $sub15 = ((($10) - 59) & 4294967295);
						var $arrayidx16 = ((__ZL13non_ascii_tab + $sub15 * 2) & 4294967295);
						var $11 = HEAP16[(($arrayidx16) >> 1)];
						var $conv17 = (tempInt = (($11)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						$basic_letter = $conv17;;
					}
					var $12 = $accent_data;
					var $and19 = ($12) & 32768;
					var $tobool = ((($and19)) | 0) != 0;
					var $13 = $accent_data;
					var $shr = ($13) >> 6;
					if ($tobool) {
						__label__ = 9;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 9) {
						var $and21 = ($shr) & 63;
						$letter2 = $and21;
						var $14 = $letter2;
						var $add22 = ((($14) + 59) & 4294967295);
						$letter2 = $add22;
						var $15 = $accent_data;
						var $shr23 = ($15) >> 12;
						var $and24 = ($shr23) & 7;
						$accent2 = $and24;;
					} else if (__label__ == 10) {
						var $and27 = ($shr) & 31;
						$accent1 = $and27;
						var $16 = $accent_data;
						var $shr28 = ($16) >> 11;
						var $and29 = ($shr28) & 15;
						$accent2 = $and29;;
					}
					var $17 = $tr_addr;
					var $18 = $accent1;
					var $arrayidx31 = ((__ZL11accents_tab + $18 * 8) & 4294967295);
					var $name = (($arrayidx31) & 4294967295);
					var $19 = HEAP32[(($name) >> 2)];
					var $arraydecay = (($ph_accent1) & 4294967295);
					var $call = __Z6LookupP10TranslatorPKcPc($17, $19, $arraydecay);
					var $cmp32 = ((($call)) | 0) != 0;
					if (!($cmp32)) {
						__label__ = 24;
						break $if_then12$$if_end91$9;
					}
					var $20 = $tr_addr;
					var $21 = $basic_letter;
					var $arraydecay34 = (($ph_letter1) & 4294967295);
					var $call35 = __ZL13LookupLetter2P10TranslatorjPc($20, $21, $arraydecay34);
					var $cmp36 = ((($call35)) | 0) != 0;
					if (!($cmp36)) {
						__label__ = 24;
						break $if_then12$$if_end91$9;
					}
					var $22 = $accent2;
					var $cmp38 = ((($22)) | 0) != 0;
					if ($cmp38) {
						__label__ = 14;;
					} else {
						__label__ = 16;;
					}
					$if_then39$$if_end56$20: do {
						if (__label__ == 14) {
							var $23 = $tr_addr;
							var $24 = $accent2;
							var $arrayidx40 = ((__ZL11accents_tab + $24 * 8) & 4294967295);
							var $name41 = (($arrayidx40) & 4294967295);
							var $25 = HEAP32[(($name41) >> 2)];
							var $arraydecay42 = (($ph_accent2) & 4294967295);
							var $call43 = __Z6LookupP10TranslatorPKcPc($23, $25, $arraydecay42);
							var $26 = $accent2;
							var $arrayidx47 = ((__ZL11accents_tab + $26 * 8) & 4294967295);
							var $flags = (($arrayidx47 + 4) & 4294967295);
							var $27 = HEAP32[(($flags) >> 2)];
							var $and48 = ($27) & 1;
							var $tobool49 = ((($and48)) | 0) != 0;
							if (!($tobool49)) {
								__label__ = 16;
								break $if_then39$$if_end56$20;
							}
							var $28 = $ph_buf_addr;
							var $arraydecay51 = (($ph_accent2) & 4294967295);
							var $call52 = _strcpy($28, $arraydecay51);
							var $29 = $ph_buf_addr;
							var $call53 = _strlen($29);
							var $30 = $ph_buf_addr;
							var $add_ptr = (($30 + $call53) & 4294967295);
							$ph_buf_addr = $add_ptr;
							var $arrayidx54 = (($ph_accent2) & 4294967295);
							HEAP8[($arrayidx54)] = 0;;
						}
					} while (0);
					var $31 = $letter2;
					var $cmp57 = ((($31)) | 0) != 0;
					if ($cmp57) {
						__label__ = 17;;
					} else {
						__label__ = 18;;
					}
					if (__label__ == 17) {
						var $32 = $tr_addr;
						var $33 = $letter2;
						var $arraydecay59 = (($ph_letter2) & 4294967295);
						var $call60 = __ZL13LookupLetter2P10TranslatorjPc($32, $33, $arraydecay59);
						var $34 = $ph_buf_addr;
						var $arraydecay61 = (($ph_accent1) & 4294967295);
						var $arraydecay62 = (($ph_letter1) & 4294967295);
						var $arraydecay63 = (($ph_letter2) & 4294967295);
						var $arraydecay64 = (($ph_accent2) & 4294967295);
						var $call65 = _sprintf($34, ((__str297) & 4294967295), allocate([$arraydecay61, 0, 0, 0, 23, 0, 0, 0, $arraydecay62, 0, 0, 0, 6, 0, 0, 0, $arraydecay63, 0, 0, 0, $arraydecay64, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
					} else if (__label__ == 18) {
						var $35 = $accent1;
						var $cmp67 = ((($35)) | 0) == 0;
						if ($cmp67) {
							__label__ = 19;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 19) {
							var $36 = $ph_buf_addr;
							var $arraydecay69 = (($ph_letter1) & 4294967295);
							var $call70 = _strcpy($36, $arraydecay69);;
						} else if (__label__ == 20) {
							var $37 = $tr_addr;
							var $langopts = (($37) & 4294967295);
							var $accents = (($langopts + 220) & 4294967295);
							var $38 = HEAP32[(($accents) >> 2)];
							var $and72 = ($38) & 1;
							var $tobool73 = ((($and72)) | 0) != 0;
							if ($tobool73) {
								__label__ = 22;;
							} else {
								__label__ = 21;;
							}
							$if_then78$$lor_lhs_false$30: do {
								if (__label__ == 21) {
									var $39 = $accent1;
									var $arrayidx74 = ((__ZL11accents_tab + $39 * 8) & 4294967295);
									var $flags75 = (($arrayidx74 + 4) & 4294967295);
									var $40 = HEAP32[(($flags75) >> 2)];
									var $and76 = ($40) & 1;
									var $tobool77 = ((($and76)) | 0) != 0;
									if ($tobool77) {
										__label__ = 22;
										break $if_then78$$lor_lhs_false$30;
									}
									var $42 = $ph_buf_addr;
									var $arraydecay83 = (($ph_letter1) & 4294967295);
									var $arraydecay84 = (($ph_accent1) & 4294967295);
									var $call85 = _sprintf($42, ((__str2299) & 4294967295), allocate([4, 0, 0, 0, $arraydecay83, 0, 0, 0, 23, 0, 0, 0, $arraydecay84, 0, 0, 0, 23, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
									__label__ = 24;
									break $if_then12$$if_end91$9;
								}
							} while (0);
							var $41 = $ph_buf_addr;
							var $arraydecay79 = (($ph_accent1) & 4294967295);
							var $arraydecay80 = (($ph_letter1) & 4294967295);
							var $call81 = _sprintf($41, ((__str1298) & 4294967295), allocate([$arraydecay79, 0, 0, 0, 23, 0, 0, 0, 6, 0, 0, 0, $arraydecay80, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL13LookupLetter2P10TranslatorjPc($tr, $letter, $ph_buf) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 12;
			_memset(__stackBase__, 0, 12);
			var __label__;
			var $tr_addr;
			var $letter_addr;
			var $ph_buf_addr;
			var $len;
			var $single_letter = __stackBase__;
			$tr_addr = $tr;
			$letter_addr = $letter;
			$ph_buf_addr = $ph_buf;
			var $arrayidx = (($single_letter) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arrayidx1 = (($single_letter + 1) & 4294967295);
			HEAP8[($arrayidx1)] = 95;
			var $0 = $letter_addr;
			var $arrayidx2 = (($single_letter + 2) & 4294967295);
			var $call = __Z8utf8_outjPc($0, $arrayidx2);
			$len = $call;
			var $1 = $len;
			var $add = ((($1) + 2) & 4294967295);
			var $arrayidx3 = (($single_letter + $add) & 4294967295);
			HEAP8[($arrayidx3)] = 32;
			var $2 = $len;
			var $add4 = ((($2) + 3) & 4294967295);
			var $arrayidx5 = (($single_letter + $add4) & 4294967295);
			HEAP8[($arrayidx5)] = 0;
			var $3 = $tr_addr;
			var $arrayidx6 = (($single_letter + 1) & 4294967295);
			var $4 = $ph_buf_addr;
			var $call7 = __Z6LookupP10TranslatorPKcPc($3, $arrayidx6, $4);
			var $cmp = ((($call7)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end15$2: do {
				if (__label__ == 1) {
					var $arrayidx8 = (($single_letter + 1) & 4294967295);
					HEAP8[($arrayidx8)] = 32;
					var $5 = $tr_addr;
					var $arrayidx9 = (($single_letter + 2) & 4294967295);
					var $6 = $ph_buf_addr;
					var $call10 = __Z6LookupP10TranslatorPKcPc($5, $arrayidx9, $6);
					var $cmp11 = ((($call10)) | 0) == 0;
					if (!($cmp11)) {
						__label__ = 3;
						break $if_then$$if_end15$2;
					}
					var $7 = $tr_addr;
					var $arrayidx13 = (($single_letter + 2) & 4294967295);
					var $8 = $ph_buf_addr;
					var $call14 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($7, $arrayidx13, $8, 20, 0, 0, 0);;
				}
			} while (0);
			var $9 = $ph_buf_addr;
			var $arrayidx16 = (($9) & 4294967295);
			var $10 = HEAP8[($arrayidx16)];
			var $conv = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			STACKTOP = __stackBase__;
			return $conv;
			return null;
		}

		function __Z12LookupLetterP10TranslatorjiPci($tr, $letter, $next_byte, $ph_buf1, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 48;
			_memset(__stackBase__, 0, 48);
			var __label__;
			var $tr_addr;
			var $letter_addr;
			var $next_byte_addr;
			var $ph_buf1_addr;
			var $control_addr;
			var $len;
			var $dict_flags = __stackBase__;
			var $ph_buf3 = __stackBase__ + 8;
			var $ptr;
			$tr_addr = $tr;
			$letter_addr = $letter;
			$next_byte_addr = $next_byte;
			$ph_buf1_addr = $ph_buf1;
			$control_addr = $control;
			var $0 = $ph_buf1_addr;
			var $arrayidx = (($0) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $1 = $letter_addr;
			var $call = __Z8utf8_outjPc($1, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 2) & 4294967295));
			$len = $call;
			var $2 = $len;
			var $add = ((($2) + 2) & 4294967295);
			var $arrayidx1 = ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + $add) & 4294967295);
			HEAP8[($arrayidx1)] = 32;
			var $3 = $next_byte_addr;
			var $cmp = ((($3)) | 0) == -1;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 7;;
			}
			$if_then$$if_end19$2: do {
				if (__label__ == 1) {
					var $4 = $tr_addr;
					var $5 = $ph_buf1_addr;
					var $call2 = __Z6LookupP10TranslatorPKcPc($4, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 2) & 4294967295), $5);
					var $cmp3 = ((($call2)) | 0) != 0;
					if ($cmp3) {
						__label__ = 20;
						break $if_then$$if_end19$2;
					}
					HEAP8[(((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295))] = 95;
					var $6 = $tr_addr;
					var $arraydecay = (($ph_buf3) & 4294967295);
					var $call5 = __Z6LookupP10TranslatorPKcPc($6, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295), $arraydecay);
					var $cmp6 = ((($call5)) | 0) != 0;
					if ($cmp6) {
						__label__ = 20;
						break $if_then$$if_end19$2;
					}
					var $7 = $tr_addr;
					var $translator_name = (($7 + 280) & 4294967295);
					var $8 = HEAP32[(($translator_name) >> 2)];
					var $cmp9 = ((($8)) | 0) == 25966;
					if ($cmp9) {
						__label__ = 20;
						break $if_then$$if_end19$2;
					}
					var $call12 = __Z14SetTranslator2PKc(((__str52704) & 4294967295));
					var $9 = HEAP32[((_translator2) >> 2)];
					var $arraydecay13 = (($ph_buf3) & 4294967295);
					var $call14 = __Z6LookupP10TranslatorPKcPc($9, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 2) & 4294967295), $arraydecay13);
					var $cmp15 = ((($call14)) | 0) != 0;
					if ($cmp15) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $10 = $ph_buf1_addr;
						HEAP8[($10)] = 21;
						var $nul = (($10 + 1) & 4294967295);
						HEAP8[($nul)] = 0;;
					}
					var $11 = HEAP32[((_voice) >> 2)];
					var $phoneme_tab_ix = (($11 + 40) & 4294967295);
					var $12 = HEAP32[(($phoneme_tab_ix) >> 2)];
					__Z18SelectPhonemeTablei($12);;
				} else if (__label__ == 7) {
					var $13 = $letter_addr;
					var $cmp20 = ((($13)) >>> 0) <= 32;
					if ($cmp20) {
						__label__ = 9;;
					} else {
						__label__ = 8;;
					}
					$if_then22$$lor_lhs_false$11: do {
						if (__label__ == 8) {
							var $14 = $letter_addr;
							var $call21 = _iswspace($14);
							var $tobool = ((($call21)) | 0) != 0;
							if ($tobool) {
								__label__ = 9;
								break $if_then22$$lor_lhs_false$11;
							}
							var $18 = $next_byte_addr;
							var $cmp26 = ((($18)) | 0) != 32;
							if ($cmp26) {
								__label__ = 11;;
							} else {
								__label__ = 12;;
							}
							if (__label__ == 11) {
								$next_byte_addr = 31;;
							}
							var $19 = $next_byte_addr;
							var $conv = ((($19)) & 255);
							var $20 = $len;
							var $add29 = ((($20) + 3) & 4294967295);
							var $arrayidx30 = ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + $add29) & 4294967295);
							HEAP8[($arrayidx30)] = $conv;
							HEAP8[(((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295))] = 95;
							var $arrayidx31 = (($dict_flags + 4) & 4294967295);
							HEAP32[(($arrayidx31) >> 2)] = 0;
							$ptr = ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295);
							var $21 = $tr_addr;
							var $arraydecay32 = (($ph_buf3) & 4294967295);
							var $call33 = __Z6LookupP10TranslatorPKcPc($21, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295), $arraydecay32);
							var $cmp34 = ((($call33)) | 0) == 0;
							if ($cmp34) {
								__label__ = 13;;
							} else {
								__label__ = 15;;
							}
							$if_then35$$if_end43$17: do {
								if (__label__ == 13) {
									HEAP8[(((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295))] = 32;
									var $22 = $tr_addr;
									var $arraydecay36 = (($ph_buf3) & 4294967295);
									var $call37 = __Z6LookupP10TranslatorPKcPc($22, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 2) & 4294967295), $arraydecay36);
									var $cmp38 = ((($call37)) | 0) == 0;
									if (!($cmp38)) {
										__label__ = 15;
										break $if_then35$$if_end43$17;
									}
									var $23 = $tr_addr;
									var $arraydecay40 = (($ph_buf3) & 4294967295);
									var $call41 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($23, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 2) & 4294967295), $arraydecay40, 40, 0, 268435456, 0);;
								}
							} while (0);
							var $arrayidx44 = (($ph_buf3) & 4294967295);
							var $24 = HEAP8[($arrayidx44)];
							var $conv45 = (tempInt = (($24)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp46 = ((($conv45)) | 0) == 0;
							if ($cmp46) {
								__label__ = 16;;
							} else {
								__label__ = 17;;
							}
							if (__label__ == 16) {
								var $25 = $tr_addr;
								var $26 = $letter_addr;
								var $arraydecay48 = (($ph_buf3) & 4294967295);
								__Z20LookupAccentedLetterP10TranslatorjPc($25, $26, $arraydecay48);;
							}
							var $27 = $ph_buf1_addr;
							var $arraydecay50 = (($ph_buf3) & 4294967295);
							var $call51 = _strcpy($27, $arraydecay50);
							var $28 = $ph_buf1_addr;
							var $arrayidx52 = (($28) & 4294967295);
							var $29 = HEAP8[($arrayidx52)];
							var $conv53 = (tempInt = (($29)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp54 = ((($conv53)) | 0) == 0;
							if ($cmp54) {
								__label__ = 20;
								break $if_then$$if_end19$2;
							}
							var $30 = $ph_buf1_addr;
							var $arrayidx56 = (($30) & 4294967295);
							var $31 = HEAP8[($arrayidx56)];
							var $conv57 = (tempInt = (($31)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp58 = ((($conv57)) | 0) == 21;
							if ($cmp58) {
								__label__ = 20;
								break $if_then$$if_end19$2;
							}
							var $arrayidx61 = (($dict_flags) & 4294967295);
							HEAP32[(($arrayidx61) >> 2)] = 0;
							var $arrayidx62 = (($dict_flags + 4) & 4294967295);
							HEAP32[(($arrayidx62) >> 2)] = 0;
							var $32 = $tr_addr;
							var $33 = $ph_buf1_addr;
							var $arraydecay63 = (($dict_flags) & 4294967295);
							var $34 = $control_addr;
							var $and = ($34) & 1;
							__Z13SetWordStressP10TranslatorPcPjii($32, $33, $arraydecay63, -1, $and);
							__label__ = 20;
							break $if_then$$if_end19$2;
						}
					} while (0);
					var $15 = $letter_addr;
					var $call23 = _sprintf(((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295), ((__str5302) & 4294967295), allocate([$15, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
					var $16 = $tr_addr;
					var $17 = $ph_buf1_addr;
					var $call24 = __Z6LookupP10TranslatorPKcPc($16, ((__ZZ12LookupLetterP10TranslatorjiPciE13single_letter + 1) & 4294967295), $17);;
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z15TranslateLetterP10TranslatorPcS1_i($tr, $word, $phonemes, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 152;
			_memset(__stackBase__, 0, 152);
			var __label__;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $phonemes_addr;
			var $control_addr;
			var $n_bytes;
			var $letter = __stackBase__;
			var $len;
			var $save_option_phonemes;
			var $p2;
			var $pbuf;
			var $capital = __stackBase__ + 4;
			var $ph_buf = __stackBase__ + 24;
			var $ph_buf2 = __stackBase__ + 84;
			var $hexbuf = __stackBase__ + 144;
			$tr_addr = $tr;
			$word_addr = $word;
			$phonemes_addr = $phonemes;
			$control_addr = $control;
			var $arrayidx = (($ph_buf) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arrayidx1 = (($capital) & 4294967295);
			HEAP8[($arrayidx1)] = 0;
			var $0 = $word_addr;
			var $call = __Z7utf8_inPiPKc($letter, $0);
			$n_bytes = $call;
			var $1 = HEAP32[(($letter) >> 2)];
			var $and = ($1) & 1048320;
			var $cmp = ((($and)) | 0) == 57344;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = HEAP32[(($letter) >> 2)];
				var $and2 = ($2) & 255;
				HEAP32[(($letter) >> 2)] = $and2;;
			}
			var $3 = $control_addr;
			var $and3 = ($3) & 2;
			var $tobool = ((($and3)) | 0) != 0;
			if ($tobool) {
				__label__ = 3;;
			} else {
				__label__ = 5;;
			}
			$if_then4$$if_end10$5: do {
				if (__label__ == 3) {
					var $4 = HEAP32[(($letter) >> 2)];
					var $call5 = _iswupper($4);
					var $tobool6 = ((($call5)) | 0) != 0;
					if (!($tobool6)) {
						__label__ = 5;
						break $if_then4$$if_end10$5;
					}
					var $5 = $tr_addr;
					var $arraydecay = (($capital) & 4294967295);
					var $call8 = __Z6LookupP10TranslatorPKcPc($5, ((__str6303) & 4294967295), $arraydecay);;
				}
			} while (0);
			var $6 = HEAP32[(($letter) >> 2)];
			var $call11 = __Z9towlower2j($6);
			HEAP32[(($letter) >> 2)] = $call11;
			var $7 = $tr_addr;
			var $8 = HEAP32[(($letter) >> 2)];
			var $9 = $n_bytes;
			var $10 = $word_addr;
			var $arrayidx12 = (($10 + $9) & 4294967295);
			var $11 = HEAP8[($arrayidx12)];
			var $conv = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $arraydecay13 = (($ph_buf) & 4294967295);
			var $12 = $control_addr;
			var $and14 = ($12) & 1;
			__Z12LookupLetterP10TranslatorjiPci($7, $8, $conv, $arraydecay13, $and14);
			var $arrayidx15 = (($ph_buf) & 4294967295);
			var $13 = HEAP8[($arrayidx15)];
			var $conv16 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp17 = ((($conv16)) | 0) == 21;
			if ($cmp17) {
				__label__ = 6;;
			} else {
				__label__ = 7;;
			}
			$if_then18$$if_end21$9: do {
				if (__label__ == 6) {
					var $14 = $phonemes_addr;
					var $arraydecay19 = (($ph_buf) & 4294967295);
					var $call20 = _strcpy($14, $arraydecay19);
					$retval = 0;;
				} else if (__label__ == 7) {
					var $arrayidx22 = (($ph_buf) & 4294967295);
					var $15 = HEAP8[($arrayidx22)];
					var $conv23 = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp24 = ((($conv23)) | 0) == 0;
					if ($cmp24) {
						__label__ = 8;;
					} else {
						__label__ = 11;;
					}
					$land_lhs_true$$if_end38$12: do {
						if (__label__ == 8) {
							var $16 = $tr_addr;
							var $translator_name = (($16 + 280) & 4294967295);
							var $17 = HEAP32[(($translator_name) >> 2)];
							var $cmp25 = ((($17)) | 0) != 25966;
							if (!($cmp25)) {
								__label__ = 11;
								break $land_lhs_true$$if_end38$12;
							}
							var $call27 = __Z14SetTranslator2PKc(((__str52704) & 4294967295));
							var $18 = HEAP32[((_option_phonemes) >> 2)];
							$save_option_phonemes = $18;
							HEAP32[((_option_phonemes) >> 2)] = 0;
							var $19 = HEAP32[((_translator2) >> 2)];
							var $20 = HEAP32[(($letter) >> 2)];
							var $21 = $n_bytes;
							var $22 = $word_addr;
							var $arrayidx28 = (($22 + $21) & 4294967295);
							var $23 = HEAP8[($arrayidx28)];
							var $conv29 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $arraydecay30 = (($ph_buf) & 4294967295);
							var $24 = $control_addr;
							var $and31 = ($24) & 1;
							__Z12LookupLetterP10TranslatorjiPci($19, $20, $conv29, $arraydecay30, $and31);
							var $25 = HEAP32[((_voice) >> 2)];
							var $phoneme_tab_ix = (($25 + 40) & 4294967295);
							var $26 = HEAP32[(($phoneme_tab_ix) >> 2)];
							__Z18SelectPhonemeTablei($26);
							var $27 = $save_option_phonemes;
							HEAP32[((_option_phonemes) >> 2)] = $27;
							var $arrayidx32 = (($ph_buf) & 4294967295);
							var $28 = HEAP8[($arrayidx32)];
							var $conv33 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp34 = ((($conv33)) | 0) != 0;
							if (!($cmp34)) {
								__label__ = 11;
								break $land_lhs_true$$if_end38$12;
							}
							var $29 = $phonemes_addr;
							var $call36 = _sprintf($29, ((__str7304) & 4294967295), allocate([21, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							$retval = 0;
							__label__ = 26;
							break $if_then18$$if_end21$9;
						}
					} while (0);
					var $arrayidx39 = (($ph_buf) & 4294967295);
					var $30 = HEAP8[($arrayidx39)];
					var $conv40 = (tempInt = (($30)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp41 = ((($conv40)) | 0) == 0;
					if ($cmp41) {
						__label__ = 12;;
					} else {
						__label__ = 20;;
					}
					$if_then42$$if_end73$17: do {
						if (__label__ == 12) {
							var $31 = HEAP32[(($letter) >> 2)];
							var $call43 = _iswalpha($31);
							var $tobool44 = ((($call43)) | 0) != 0;
							if ($tobool44) {
								__label__ = 13;;
							} else {
								__label__ = 14;;
							}
							if (__label__ == 13) {
								var $32 = $tr_addr;
								var $arraydecay46 = (($ph_buf) & 4294967295);
								var $call47 = __Z6LookupP10TranslatorPKcPc($32, ((__str8305) & 4294967295), $arraydecay46);;
							}
							var $arrayidx49 = (($ph_buf) & 4294967295);
							var $33 = HEAP8[($arrayidx49)];
							var $conv50 = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp51 = ((($conv50)) | 0) == 0;
							if ($cmp51) {
								__label__ = 15;;
							} else {
								__label__ = 17;;
							}
							$land_lhs_true52$$if_end58$22: do {
								if (__label__ == 15) {
									var $34 = HEAP32[(($letter) >> 2)];
									var $call53 = _iswspace($34);
									var $tobool54 = ((($call53)) | 0) != 0;
									if ($tobool54) {
										__label__ = 17;
										break $land_lhs_true52$$if_end58$22;
									}
									var $35 = $tr_addr;
									var $arraydecay56 = (($ph_buf) & 4294967295);
									var $call57 = __Z6LookupP10TranslatorPKcPc($35, ((__str9306) & 4294967295), $arraydecay56);;
								}
							} while (0);
							var $arrayidx59 = (($ph_buf) & 4294967295);
							var $36 = HEAP8[($arrayidx59)];
							var $conv60 = (tempInt = (($36)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp61 = ((($conv60)) | 0) != 0;
							if (!($cmp61)) {
								__label__ = 20;
								break $if_then42$$if_end73$17;
							}
							var $arraydecay63 = (($hexbuf) & 4294967295);
							var $37 = HEAP32[(($letter) >> 2)];
							var $call64 = _sprintf($arraydecay63, ((__str10307) & 4294967295), allocate([$37, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $arraydecay65 = (($ph_buf) & 4294967295);
							$pbuf = $arraydecay65;
							var $arraydecay66 = (($hexbuf) & 4294967295);
							$p2 = $arraydecay66;
							var $38 = $p2;
							var $39 = HEAP8[($38)];
							var $conv671 = (tempInt = (($39)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp682 = ((($conv671)) | 0) != 0;
							if (!($cmp682)) {
								__label__ = 20;
								break $if_then42$$if_end73$17;
							}
							while (1) {
								var $40 = $pbuf;
								var $call69 = _strlen($40);
								var $41 = $pbuf;
								var $add_ptr = (($41 + $call69) & 4294967295);
								$pbuf = $add_ptr;
								var $42 = $pbuf;
								var $incdec_ptr = (($42 + 1) & 4294967295);
								$pbuf = $incdec_ptr;
								HEAP8[($42)] = 23;
								var $43 = $tr_addr;
								var $44 = $p2;
								var $45 = HEAP8[($44)];
								var $conv70 = (tempInt = (($45)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $46 = $pbuf;
								__Z12LookupLetterP10TranslatorjiPci($43, $conv70, 0, $46, 1);
								var $47 = $p2;
								var $incdec_ptr71 = (($47 + 1) & 4294967295);
								$p2 = $incdec_ptr71;
								var $48 = $p2;
								var $49 = HEAP8[($48)];
								var $conv67 = (tempInt = (($49)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp68 = ((($conv67)) | 0) != 0;
								if ($cmp68) {
									__label__ = 19;
									continue;
								} else {
									__label__ = 20;
									break $if_then42$$if_end73$17;
								}
							}
						}
					} while (0);
					var $50 = $phonemes_addr;
					var $call74 = _strlen($50);
					$len = $call74;
					var $51 = $tr_addr;
					var $langopts = (($51) & 4294967295);
					var $accents = (($langopts + 220) & 4294967295);
					var $52 = HEAP32[(($accents) >> 2)];
					var $and75 = ($52) & 2;
					var $tobool76 = ((($and75)) | 0) != 0;
					var $arraydecay78 = (($ph_buf2) & 4294967295);
					if ($tobool76) {
						__label__ = 21;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 21) {
						var $arraydecay79 = (($ph_buf) & 4294967295);
						var $arraydecay80 = (($capital) & 4294967295);
						var $call81 = _sprintf($arraydecay78, ((__str11308) & 4294967295), allocate([255, 0, 0, 0, $arraydecay79, 0, 0, 0, $arraydecay80, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
					} else if (__label__ == 22) {
						var $arraydecay83 = (($capital) & 4294967295);
						var $arraydecay84 = (($ph_buf) & 4294967295);
						var $call85 = _sprintf($arraydecay78, ((__str11308) & 4294967295), allocate([255, 0, 0, 0, $arraydecay83, 0, 0, 0, $arraydecay84, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
					}
					var $53 = $len;
					var $arraydecay87 = (($ph_buf2) & 4294967295);
					var $call88 = _strlen($arraydecay87);
					var $add = ((($call88) + ($53)) & 4294967295);
					var $cmp89 = ((($add)) >>> 0) < 160;
					if ($cmp89) {
						__label__ = 24;;
					} else {
						__label__ = 25;;
					}
					if (__label__ == 24) {
						var $54 = $len;
						var $55 = $phonemes_addr;
						var $arrayidx91 = (($55 + $54) & 4294967295);
						var $arraydecay92 = (($ph_buf2) & 4294967295);
						var $call93 = _strcpy($arrayidx91, $arraydecay92);;
					}
					var $56 = $n_bytes;
					$retval = $56;;
				}
			} while (0);
			var $57 = $retval;
			STACKTOP = __stackBase__;
			return $57;
			return null;
		}

		function __Z17SetSpellingStressP10TranslatorPcii($tr, $phonemes, $control, $n_chars) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 160;
			_memset(__stackBase__, 0, 160);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $phonemes_addr;
			var $control_addr;
			var $n_chars_addr;
			var $ix;
			var $c;
			var $n_stress;
			var $count;
			var $buf = __stackBase__;
			$tr_addr = $tr;
			$phonemes_addr = $phonemes;
			$control_addr = $control;
			$n_chars_addr = $n_chars;
			$n_stress = 0;
			$ix = 0;
			var $0 = $ix;
			var $1 = $phonemes_addr;
			var $arrayidx4 = (($1 + $0) & 4294967295);
			var $2 = HEAP8[($arrayidx4)];
			var $conv5 = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			$c = $conv5;
			var $cmp6 = ((($conv5)) | 0) != 0;
			if ($cmp6) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 4;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = __lastLabel__ == 0 ? $conv5 : ($conv);
						var $cmp1 = ((($3)) | 0) == 6;
						if ($cmp1) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						if (__label__ == 2) {
							var $4 = $n_stress;
							var $inc = ((($4) + 1) & 4294967295);
							$n_stress = $inc;;
						}
						var $5 = $c;
						var $conv2 = ((($5)) & 255);
						var $6 = $ix;
						var $arrayidx3 = (($buf + $6) & 4294967295);
						HEAP8[($arrayidx3)] = $conv2;
						var $7 = $ix;
						var $inc4 = ((($7) + 1) & 4294967295);
						$ix = $inc4;
						var $8 = $ix;
						var $9 = $phonemes_addr;
						var $arrayidx = (($9 + $8) & 4294967295);
						var $10 = HEAP8[($arrayidx)];
						var $conv = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$c = $conv;
						var $cmp = ((($conv)) | 0) != 0;
						if ($cmp) {
							__lastLabel__ = 3;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 3;
							__label__ = 4;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			var $11 = $ix;
			var $arrayidx5 = (($buf + $11) & 4294967295);
			HEAP8[($arrayidx5)] = 0;
			$count = 0;
			$ix = 0;
			var $12 = $ix;
			var $arrayidx71 = (($buf + $12) & 4294967295);
			var $13 = HEAPU8[($arrayidx71)];
			var $conv82 = ((($13)) & 255);
			$c = $conv82;
			var $cmp93 = ((($conv82)) | 0) != 0;
			if ($cmp93) {
				__lastLabel__ = 4;
				__label__ = 5;;
			} else {
				__lastLabel__ = 4;
				__label__ = 26;;
			}
			$for_body10$$for_end52$9: do {
				if (__label__ == 5) {
					$for_body10$10: while (1) {
						var $14 = __lastLabel__ == 4 ? $conv82 : ($conv8);
						var $cmp11 = ((($14)) | 0) == 6;
						if ($cmp11) {
							__lastLabel__ = 5;
							__label__ = 6;;
						} else {
							__lastLabel__ = 5;
							__label__ = 15;;
						}
						$land_lhs_true$$if_else29$12: do {
							if (__label__ == 6) {
								var $15 = $n_chars_addr;
								var $cmp12 = ((($15)) | 0) > 1;
								if ($cmp12) {
									__label__ = 7;;
								} else {
									__label__ = 14;;
								}
								if (__label__ == 7) {
									var $16 = $count;
									var $inc14 = ((($16) + 1) & 4294967295);
									$count = $inc14;
									var $17 = $tr_addr;
									var $langopts = (($17) & 4294967295);
									var $spelling_stress = (($langopts + 249) & 4294967295);
									var $18 = HEAP8[($spelling_stress)];
									var $conv15 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp16 = ((($conv15)) | 0) == 1;
									var $19 = $count;
									if ($cmp16) {
										__label__ = 8;;
									} else {
										__label__ = 10;;
									}
									if (__label__ == 8) {
										var $cmp18 = ((($19)) | 0) > 1;
										if (!($cmp18)) {
											__label__ = 24;
											break $land_lhs_true$$if_else29$12;
										}
										$c = 5;
										__label__ = 24;
										break $land_lhs_true$$if_else29$12;
									} else if (__label__ == 10) {
										var $20 = $n_stress;
										var $cmp21 = ((($19)) | 0) != ((($20)) | 0);
										if (!($cmp21)) {
											__label__ = 24;
											break $land_lhs_true$$if_else29$12;
										}
										var $21 = $count;
										var $rem = ((($21)) | 0) % 3;
										var $cmp23 = ((($rem)) | 0) != 0;
										if ($cmp23) {
											__label__ = 13;;
										} else {
											__label__ = 12;;
										}
										if (__label__ == 12) {
											var $22 = $count;
											var $23 = $n_stress;
											var $sub = ((($23) - 1) & 4294967295);
											var $cmp24 = ((($22)) | 0) == ((($sub)) | 0);
											if (!($cmp24)) {
												__label__ = 24;
												break $land_lhs_true$$if_else29$12;
											}
										}
										$c = 5;
										__label__ = 24;
										break $land_lhs_true$$if_else29$12;
									}
								} else if (__label__ == 14) {
									var $_pr = $c;
									__lastLabel__ = 14;
									__label__ = 15;
									break $land_lhs_true$$if_else29$12;
								}
							}
						} while (0);
						$if_end48$$if_else29$25: do {
							if (__label__ == 15) {
								var $24 = __lastLabel__ == 14 ? $_pr : ($14);
								var $cmp30 = ((($24)) | 0) == 255;
								if (!($cmp30)) {
									__label__ = 24;
									break $if_end48$$if_else29$25;
								}
								var $25 = $control_addr;
								var $cmp32 = ((($25)) | 0) < 2;
								if ($cmp32) {
									__label__ = 25;
									break $if_end48$$if_else29$25;
								}
								var $26 = $ix;
								var $cmp34 = ((($26)) | 0) == 0;
								if ($cmp34) {
									__label__ = 25;
									break $if_end48$$if_else29$25;
								}
								var $27 = $control_addr;
								var $cmp37 = ((($27)) | 0) == 4;
								if ($cmp37) {
									__label__ = 19;;
								} else {
									__label__ = 20;;
								}
								if (__label__ == 19) {
									$c = 9;;
								}
								var $28 = $count;
								var $rem40 = ((($28)) | 0) % 3;
								var $cmp41 = ((($rem40)) | 0) == 0;
								if ($cmp41) {
									__label__ = 22;;
								} else {
									__label__ = 21;;
								}
								$if_then44$$lor_lhs_false42$33: do {
									if (__label__ == 21) {
										var $29 = $control_addr;
										var $cmp43 = ((($29)) | 0) > 2;
										if ($cmp43) {
											__label__ = 22;
											break $if_then44$$lor_lhs_false42$33;
										}
										$c = 23;
										__label__ = 24;
										break $if_end48$$if_else29$25;
									}
								} while (0);
								$c = 11;
								__label__ = 24;
								break $if_end48$$if_else29$25;
							}
						} while (0);
						if (__label__ == 24) {
							var $30 = $c;
							var $conv49 = ((($30)) & 255);
							var $31 = $phonemes_addr;
							var $incdec_ptr = (($31 + 1) & 4294967295);
							$phonemes_addr = $incdec_ptr;
							HEAP8[($31)] = $conv49;;
						}
						var $32 = $ix;
						var $inc51 = ((($32) + 1) & 4294967295);
						$ix = $inc51;
						var $33 = $ix;
						var $arrayidx7 = (($buf + $33) & 4294967295);
						var $34 = HEAPU8[($arrayidx7)];
						var $conv8 = ((($34)) & 255);
						$c = $conv8;
						var $cmp9 = ((($conv8)) | 0) != 0;
						if ($cmp9) {
							__lastLabel__ = 25;
							__label__ = 5;
							continue $for_body10$10;
						} else {
							__lastLabel__ = 25;
							__label__ = 26;
							break $for_body10$$for_end52$9;
						}
					}
				}
			} while (0);
			var $35 = $control_addr;
			var $cmp53 = ((($35)) | 0) >= 2;
			if ($cmp53) {
				__label__ = 27;;
			} else {
				__label__ = 28;;
			}
			if (__label__ == 27) {
				var $36 = $phonemes_addr;
				var $incdec_ptr55 = (($36 + 1) & 4294967295);
				$phonemes_addr = $incdec_ptr55;
				HEAP8[($36)] = 11;;
			}
			var $37 = $phonemes_addr;
			HEAP8[($37)] = 0;
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z14TranslateRomanP10TranslatorPcS1_P8WORD_TAB($tr, $word, $ph_out, $wtab) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 200;
			_memset(__stackBase__, 0, 200);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $ph_out_addr;
			var $wtab_addr;
			var $c;
			var $p;
			var $p2;
			var $acc;
			var $prev;
			var $value;
			var $subtract;
			var $repeat;
			var $n_digits;
			var $word_start;
			var $num_control;
			var $flags = __stackBase__;
			var $ph_roman = __stackBase__ + 8;
			var $number_chars = __stackBase__ + 40;
			$tr_addr = $tr;
			$word_addr = $word;
			$ph_out_addr = $ph_out;
			$wtab_addr = $wtab;
			$repeat = 0;
			$n_digits = 0;
			$num_control = 0;
			$acc = 0;
			$prev = 0;
			$subtract = 32767;
			var $0 = $ph_out_addr;
			var $arrayidx = (($0) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arrayidx1 = (($flags) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 0;
			var $arrayidx2 = (($flags + 4) & 4294967295);
			HEAP32[(($arrayidx2) >> 2)] = 0;
			var $1 = $tr_addr;
			var $langopts = (($1) & 4294967295);
			var $numbers = (($langopts + 184) & 4294967295);
			var $2 = HEAP32[(($numbers) >> 2)];
			var $and = ($2) & 33554432;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$land_lhs_true$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $3 = $wtab_addr;
					var $arrayidx3 = (($3) & 4294967295);
					var $flags4 = (($arrayidx3) & 4294967295);
					var $4 = HEAP32[(($flags4) >> 2)];
					var $and5 = ($4) & 1;
					var $tobool6 = ((($and5)) | 0) != 0;
					if ($tobool6) {
						__label__ = 2;
						break $land_lhs_true$$lor_lhs_false$2;
					} else {
						__label__ = 3;
						break $land_lhs_true$$lor_lhs_false$2;
					}
				}
			} while (0);
			$lor_lhs_false$$if_then$4: do {
				if (__label__ == 2) {
					var $5 = $word_addr;
					var $arrayidx7 = (($5 + -2) & 4294967295);
					var $6 = HEAP8[($arrayidx7)];
					var $conv = (tempInt = (($6)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp = ((($conv) - 48) & 4294967295);
					var $isdigit = ((($isdigittmp)) >>> 0) < 10;
					var $call = ((($isdigit)) & 1);
					var $tobool8 = ((($call)) | 0) != 0;
					if ($tobool8) {
						__label__ = 3;
						break $lor_lhs_false$$if_then$4;
					}
					var $7 = $word_addr;
					$word_start = $7;;
					$while_cond$7: while (1) {
						var $8 = $word_addr;
						var $incdec_ptr = (($8 + 1) & 4294967295);
						$word_addr = $incdec_ptr;
						var $9 = HEAP8[($8)];
						var $conv9 = (tempInt = (($9)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$c = $conv9;
						var $cmp = ((($conv9)) | 0) != 32;
						if (!($cmp)) {
							__label__ = 25;
							break $while_cond$7;
						}
						var $10 = $c;
						var $memchr = _memchr(((__str12309) & 4294967295), $10, 8);
						$p2 = $memchr;
						var $cmp11 = ((($memchr)) | 0) == 0;
						if ($cmp11) {
							__label__ = 7;
							break $while_cond$7;
						}
						var $11 = $p2;
						var $sub_ptr_lhs_cast = ($11);
						var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - (__str12309)) & 4294967295);
						var $arrayidx14 = ((__ZZ14TranslateRomanP10TranslatorPcS1_P8WORD_TABE12roman_values + $sub_ptr_sub * 4) & 4294967295);
						var $12 = HEAP32[(($arrayidx14) >> 2)];
						$value = $12;
						var $13 = $value;
						var $14 = $prev;
						var $cmp15 = ((($13)) | 0) == ((($14)) | 0);
						if ($cmp15) {
							__label__ = 9;;
						} else {
							__label__ = 11;;
						}
						if (__label__ == 9) {
							var $15 = $repeat;
							var $inc = ((($15) + 1) & 4294967295);
							$repeat = $inc;
							var $16 = $repeat;
							var $cmp17 = ((($16)) | 0) >= 3;
							if ($cmp17) {
								__label__ = 10;
								break $while_cond$7;
							}
						} else if (__label__ == 11) {
							$repeat = 0;;
						}
						var $17 = $prev;
						var $cmp21 = ((($17)) | 0) > 1;
						var $18 = $prev;
						var $cmp23 = ((($18)) | 0) != 10;
						var $or_cond = ($cmp21) & ($cmp23);
						var $19 = $prev;
						var $cmp25 = ((($19)) | 0) != 100;
						var $or_cond1 = ($or_cond) & ($cmp25);
						if ($or_cond1) {
							__lastLabel__ = 12;
							__label__ = 13;;
						} else {
							__lastLabel__ = 12;
							__label__ = 15;;
						}
						if (__label__ == 13) {
							var $20 = $value;
							var $21 = $prev;
							var $cmp27 = ((($20)) | 0) >= ((($21)) | 0);
							if ($cmp27) {
								__lastLabel__ = 13;
								__label__ = 14;
								break $while_cond$7;
							} else {
								__lastLabel__ = 13;;
							}
						}
						var $22 = __lastLabel__ == 13 ? $21 : ($19);
						var $cmp31 = ((($22)) | 0) != 0;
						if ($cmp31) {
							__label__ = 16;;
						} else {
							__label__ = 21;;
						}
						$land_lhs_true32$$if_else40$18: do {
							if (__label__ == 16) {
								var $23 = $prev;
								var $24 = $value;
								var $cmp33 = ((($23)) | 0) < ((($24)) | 0);
								if (!($cmp33)) {
									__label__ = 21;
									break $land_lhs_true32$$if_else40$18;
								}
								var $25 = $acc;
								var $rem = ((($25)) | 0) % 10;
								var $cmp35 = ((($rem)) | 0) != 0;
								if ($cmp35) {
									__label__ = 19;
									break $while_cond$7;
								}
								var $26 = $prev;
								var $mul = ((($26) * 10) & 4294967295);
								var $27 = $value;
								var $cmp37 = ((($mul)) | 0) < ((($27)) | 0);
								if ($cmp37) {
									__label__ = 19;
									break $while_cond$7;
								}
								var $28 = $prev;
								$subtract = $28;
								var $29 = $subtract;
								var $30 = $value;
								var $sub = ((($30) - ($29)) & 4294967295);
								$value = $sub;
								__label__ = 24;
								break $land_lhs_true32$$if_else40$18;
							}
						} while (0);
						if (__label__ == 21) {
							var $31 = $value;
							var $32 = $subtract;
							var $cmp41 = ((($31)) | 0) >= ((($32)) | 0);
							if ($cmp41) {
								__label__ = 22;
								break $while_cond$7;
							}
							var $33 = $prev;
							var $34 = $acc;
							var $add = ((($34) + ($33)) & 4294967295);
							$acc = $add;;
						}
						var $35 = $value;
						$prev = $35;
						var $36 = $n_digits;
						var $inc46 = ((($36) + 1) & 4294967295);
						$n_digits = $inc46;
						__label__ = 5;
						continue $while_cond$7;
					}
					if (__label__ == 25) {
						var $37 = $word_addr;
						var $arrayidx47 = (($37) & 4294967295);
						var $38 = HEAP8[($arrayidx47)];
						var $conv48 = (tempInt = (($38)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp2 = ((($conv48) - 48) & 4294967295);
						var $isdigit3 = ((($isdigittmp2)) >>> 0) < 10;
						var $call49 = ((($isdigit3)) & 1);
						var $tobool50 = ((($call49)) | 0) != 0;
						if ($tobool50) {
							__label__ = 26;;
						} else {
							__label__ = 27;;
						}
						if (__label__ == 26) {
							$retval = 0;
							__label__ = 48;
							break $lor_lhs_false$$if_then$4;
						} else if (__label__ == 27) {
							var $39 = $prev;
							var $40 = $acc;
							var $add53 = ((($40) + ($39)) & 4294967295);
							$acc = $add53;
							var $41 = $acc;
							var $42 = $tr_addr;
							var $langopts54 = (($42) & 4294967295);
							var $min_roman = (($langopts54 + 200) & 4294967295);
							var $43 = HEAP32[(($min_roman) >> 2)];
							var $cmp55 = ((($41)) | 0) < ((($43)) | 0);
							if ($cmp55) {
								__label__ = 28;;
							} else {
								__label__ = 29;;
							}
							if (__label__ == 28) {
								$retval = 0;
								__label__ = 48;
								break $lor_lhs_false$$if_then$4;
							} else if (__label__ == 29) {
								var $44 = $acc;
								var $45 = $tr_addr;
								var $langopts58 = (($45) & 4294967295);
								var $max_roman = (($langopts58 + 196) & 4294967295);
								var $46 = HEAP32[(($max_roman) >> 2)];
								var $cmp59 = ((($44)) | 0) > ((($46)) | 0);
								if ($cmp59) {
									__label__ = 30;;
								} else {
									__label__ = 31;;
								}
								if (__label__ == 30) {
									$retval = 0;
									__label__ = 48;
									break $lor_lhs_false$$if_then$4;
								} else if (__label__ == 31) {
									var $47 = $tr_addr;
									var $arraydecay = (($ph_roman) & 4294967295);
									var $call62 = __Z6LookupP10TranslatorPKcPc($47, ((__str13310) & 4294967295), $arraydecay);
									var $48 = $ph_out_addr;
									var $arrayidx63 = (($48) & 4294967295);
									$p = $arrayidx63;
									var $49 = $tr_addr;
									var $langopts64 = (($49) & 4294967295);
									var $numbers65 = (($langopts64 + 184) & 4294967295);
									var $50 = HEAP32[(($numbers65) >> 2)];
									var $and66 = ($50) & 67108864;
									var $cmp67 = ((($and66)) | 0) == 0;
									if ($cmp67) {
										__label__ = 32;;
									} else {
										__label__ = 33;;
									}
									if (__label__ == 32) {
										var $51 = $ph_out_addr;
										var $arraydecay69 = (($ph_roman) & 4294967295);
										var $call70 = _strcpy($51, $arraydecay69);
										var $arraydecay71 = (($ph_roman) & 4294967295);
										var $call72 = _strlen($arraydecay71);
										var $52 = $ph_out_addr;
										var $arrayidx73 = (($52 + $call72) & 4294967295);
										$p = $arrayidx73;;
									}
									var $arraydecay75 = (($number_chars) & 4294967295);
									var $53 = $acc;
									var $call76 = _sprintf($arraydecay75, ((__str14311) & 4294967295), allocate([$53, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
									var $54 = $word_addr;
									var $arrayidx77 = (($54) & 4294967295);
									var $55 = HEAP8[($arrayidx77)];
									var $conv78 = (tempInt = (($55)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp79 = ((($conv78)) | 0) == 46;
									if ($cmp79) {
										__label__ = 34;;
									} else {
										__label__ = 35;;
									}
									if (__label__ == 34) {
										$retval = 0;
										__label__ = 48;
										break $lor_lhs_false$$if_then$4;
									} else if (__label__ == 35) {
										var $56 = $tr_addr;
										var $57 = $word_start;
										var $58 = $word_addr;
										var $59 = $wtab_addr;
										var $call82 = __ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($56, $57, $58, $59, 1);
										var $tobool83 = ((($call82)) | 0) != 0;
										if ($tobool83) {
											__label__ = 36;;
										} else {
											__label__ = 37;;
										}
										if (__label__ == 36) {
											var $60 = $wtab_addr;
											var $arrayidx85 = (($60) & 4294967295);
											var $flags86 = (($arrayidx85) & 4294967295);
											var $61 = HEAP32[(($flags86) >> 2)];
											var $or = ($61) | 32768;
											HEAP32[(($flags86) >> 2)] = $or;;
										}
										var $62 = $tr_addr;
										var $langopts88 = (($62) & 4294967295);
										var $numbers89 = (($langopts88 + 184) & 4294967295);
										var $63 = HEAP32[(($numbers89) >> 2)];
										var $and90 = ($63) & 134217728;
										var $tobool91 = ((($and90)) | 0) != 0;
										if ($tobool91) {
											__label__ = 38;;
										} else {
											__label__ = 45;;
										}
										$if_then92$$if_end117$47: do {
											if (__label__ == 38) {
												var $64 = $tr_addr;
												var $translator_name = (($64 + 280) & 4294967295);
												var $65 = HEAP32[(($translator_name) >> 2)];
												var $cmp93 = ((($65)) | 0) == 26741;
												var $66 = $wtab_addr;
												var $arrayidx95 = (($66) & 4294967295);
												var $flags96 = (($arrayidx95) & 4294967295);
												var $67 = HEAP32[(($flags96) >> 2)];
												if ($cmp93) {
													__label__ = 39;;
												} else {
													__label__ = 44;;
												}
												if (__label__ == 39) {
													var $and97 = ($67) & 32768;
													var $tobool98 = ((($and97)) | 0) != 0;
													if ($tobool98) {
														__label__ = 45;
														break $if_then92$$if_end117$47;
													}
													var $68 = $wtab_addr;
													var $arrayidx100 = (($68) & 4294967295);
													var $flags101 = (($arrayidx100) & 4294967295);
													var $69 = HEAP32[(($flags101) >> 2)];
													var $and102 = ($69) & 16384;
													var $tobool103 = ((($and102)) | 0) != 0;
													if ($tobool103) {
														__label__ = 41;;
													} else {
														__label__ = 43;;
													}
													$land_lhs_true104$$if_else109$52: do {
														if (__label__ == 41) {
															var $70 = $word_addr;
															var $71 = $acc;
															var $call105 = __ZL11hu_number_ePKcii($70, 0, $71);
															var $tobool106 = ((($call105)) | 0) != 0;
															if (!($tobool106)) {
																__label__ = 43;
																break $land_lhs_true104$$if_else109$52;
															}
															var $72 = $num_control;
															var $or108 = ($72) | 1;
															$num_control = $or108;
															__label__ = 45;
															break $if_then92$$if_end117$47;
														}
													} while (0);
													$retval = 0;
													__label__ = 48;
													break $lor_lhs_false$$if_then$4;
												} else if (__label__ == 44) {
													var $or115 = ($67) | 32768;
													HEAP32[(($flags96) >> 2)] = $or115;;
												}
											}
										} while (0);
										var $73 = $tr_addr;
										var $prev_dict_flags = (($73 + 8320) & 4294967295);
										HEAP32[(($prev_dict_flags) >> 2)] = 0;
										var $74 = $tr_addr;
										var $arrayidx118 = (($number_chars + 2) & 4294967295);
										var $75 = $p;
										var $arraydecay119 = (($flags) & 4294967295);
										var $76 = $wtab_addr;
										var $77 = $num_control;
										var $call120 = __Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($74, $arrayidx118, $75, $arraydecay119, $76, $77);
										var $78 = $tr_addr;
										var $langopts121 = (($78) & 4294967295);
										var $numbers122 = (($langopts121 + 184) & 4294967295);
										var $79 = HEAP32[(($numbers122) >> 2)];
										var $and123 = ($79) & 67108864;
										var $tobool124 = ((($and123)) | 0) != 0;
										if ($tobool124) {
											__label__ = 46;;
										} else {
											__label__ = 47;;
										}
										if (__label__ == 46) {
											var $80 = $ph_out_addr;
											var $arraydecay126 = (($ph_roman) & 4294967295);
											var $call127 = _strcat($80, $arraydecay126);;
										}
										$retval = 1;
										__label__ = 48;
										break $lor_lhs_false$$if_then$4;
									}
								}
							}
						}
					} else if (__label__ == 7) {
						$retval = 0;
						__label__ = 48;
						break $lor_lhs_false$$if_then$4;
					} else if (__label__ == 10) {
						$retval = 0;
						__label__ = 48;
						break $lor_lhs_false$$if_then$4;
					} else if (__label__ == 14) {
						$retval = 0;
						__label__ = 48;
						break $lor_lhs_false$$if_then$4;
					} else if (__label__ == 19) {
						$retval = 0;
						__label__ = 48;
						break $lor_lhs_false$$if_then$4;
					} else if (__label__ == 22) {
						$retval = 0;
						__label__ = 48;
						break $lor_lhs_false$$if_then$4;
					}
				}
			} while (0);
			if (__label__ == 3) {
				$retval = 0;;
			}
			var $81 = $retval;
			STACKTOP = __stackBase__;
			return $81;
			return null;
		}

		function __ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($tr, $word, $word_end, $wtab, $roman) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $tr_addr;
			var $word_addr;
			var $word_end_addr;
			var $wtab_addr;
			var $roman_addr;
			var $ordinal;
			var $c2 = __stackBase__;
			var $nextflags;
			$tr_addr = $tr;
			$word_addr = $word;
			$word_end_addr = $word_end;
			$wtab_addr = $wtab;
			$roman_addr = $roman;
			$ordinal = 0;
			var $0 = $tr_addr;
			var $langopts = (($0) & 4294967295);
			var $numbers = (($langopts + 184) & 4294967295);
			var $1 = HEAP32[(($numbers) >> 2)];
			var $and = ($1) & 65536;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 32;;
			}
			$land_lhs_true$$if_end92$2: do {
				if (__label__ == 1) {
					var $2 = $word_end_addr;
					var $arrayidx = (($2) & 4294967295);
					var $3 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($3)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp = ((($conv)) | 0) == 46;
					if ($cmp) {
						__label__ = 3;;
					} else {
						__label__ = 2;;
					}
					if (__label__ == 2) {
						var $4 = $wtab_addr;
						var $arrayidx1 = (($4) & 4294967295);
						var $flags = (($arrayidx1) & 4294967295);
						var $5 = HEAP32[(($flags) >> 2)];
						var $and2 = ($5) & 65536;
						var $tobool3 = ((($and2)) | 0) != 0;
						if (!($tobool3)) {
							__label__ = 32;
							break $land_lhs_true$$if_end92$2;
						}
					}
					var $6 = $wtab_addr;
					var $arrayidx5 = (($6 + 12) & 4294967295);
					var $flags6 = (($arrayidx5) & 4294967295);
					var $7 = HEAP32[(($flags6) >> 2)];
					var $and7 = ($7) & 256;
					var $tobool8 = ((($and7)) | 0) != 0;
					if ($tobool8) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					var $8 = $roman_addr;
					var $tobool9 = ((($8)) | 0) != 0;
					if ($tobool9) {
						__label__ = 6;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 5) {
						var $9 = $wtab_addr;
						var $arrayidx11 = (($9 + 12) & 4294967295);
						var $flags12 = (($arrayidx11) & 4294967295);
						var $10 = HEAP32[(($flags12) >> 2)];
						var $and13 = ($10) & 2;
						var $tobool14 = ((($and13)) | 0) != 0;
						if ($tobool14) {
							__label__ = 32;
							break $land_lhs_true$$if_end92$2;
						}
					}
					var $11 = $word_end_addr;
					var $arrayidx16 = (($11) & 4294967295);
					var $12 = HEAP8[($arrayidx16)];
					var $conv17 = (tempInt = (($12)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp18 = ((($conv17)) | 0) == 46;
					var $13 = $word_end_addr;
					if ($cmp18) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						var $arrayidx20 = (($13 + 2) & 4294967295);
						var $call = __Z7utf8_inPiPKc($c2, $arrayidx20);;
					} else if (__label__ == 8) {
						var $arrayidx21 = (($13) & 4294967295);
						var $call22 = __Z7utf8_inPiPKc($c2, $arrayidx21);;
					}
					var $14 = $word_end_addr;
					var $arrayidx23 = (($14) & 4294967295);
					var $15 = HEAP8[($arrayidx23)];
					var $conv24 = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp25 = ((($conv24)) | 0) != 0;
					if (!($cmp25)) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					var $16 = $word_end_addr;
					var $arrayidx27 = (($16 + 1) & 4294967295);
					var $17 = HEAP8[($arrayidx27)];
					var $conv28 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp29 = ((($conv28)) | 0) != 0;
					if (!($cmp29)) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					var $18 = HEAP32[(($c2) >> 2)];
					var $cmp31 = ((($18)) | 0) == 0;
					if ($cmp31) {
						__label__ = 14;;
					} else {
						__label__ = 12;;
					}
					$if_then40$$lor_lhs_false32$17: do {
						if (__label__ == 12) {
							var $19 = $wtab_addr;
							var $arrayidx33 = (($19) & 4294967295);
							var $flags34 = (($arrayidx33) & 4294967295);
							var $20 = HEAP32[(($flags34) >> 2)];
							var $and35 = ($20) & 131072;
							var $tobool36 = ((($and35)) | 0) != 0;
							if ($tobool36) {
								__label__ = 14;
								break $if_then40$$lor_lhs_false32$17;
							}
							var $21 = HEAP32[(($c2) >> 2)];
							var $call38 = __Z7IsAlphaj($21);
							var $tobool39 = ((($call38)) | 0) != 0;
							if (!($tobool39)) {
								__label__ = 32;
								break $land_lhs_true$$if_end92$2;
							}
						}
					} while (0);
					$ordinal = 2;
					var $22 = $word_end_addr;
					var $arrayidx41 = (($22) & 4294967295);
					var $23 = HEAP8[($arrayidx41)];
					var $conv42 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp43 = ((($conv42)) | 0) == 46;
					if ($cmp43) {
						__label__ = 15;;
					} else {
						__label__ = 16;;
					}
					if (__label__ == 15) {
						var $24 = $word_end_addr;
						var $arrayidx45 = (($24) & 4294967295);
						HEAP8[($arrayidx45)] = 32;;
					}
					var $25 = $roman_addr;
					var $cmp47 = ((($25)) | 0) == 0;
					if (!($cmp47)) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					var $26 = $tr_addr;
					var $translator_name = (($26 + 280) & 4294967295);
					var $27 = HEAP32[(($translator_name) >> 2)];
					var $cmp49 = ((($27)) | 0) == 26741;
					if (!($cmp49)) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					$nextflags = 0;
					var $28 = HEAP32[(($c2) >> 2)];
					var $call51 = __Z7IsAlphaj($28);
					var $tobool52 = ((($call51)) | 0) != 0;
					if ($tobool52) {
						__label__ = 19;;
					} else {
						__label__ = 20;;
					}
					if (__label__ == 19) {
						var $29 = $tr_addr;
						var $30 = $word_end_addr;
						var $arrayidx54 = (($30 + 2) & 4294967295);
						var $call55 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($29, $arrayidx54, 0, 0);
						$nextflags = $call55;;
					}
					var $31 = $tr_addr;
					var $prev_dict_flags = (($31 + 8320) & 4294967295);
					var $32 = HEAP32[(($prev_dict_flags) >> 2)];
					var $and57 = ($32) & 1048576;
					var $tobool58 = ((($and57)) | 0) != 0;
					if ($tobool58) {
						__label__ = 21;;
					} else {
						__label__ = 25;;
					}
					$land_lhs_true59$$if_end70$29: do {
						if (__label__ == 21) {
							var $33 = HEAP32[(($c2) >> 2)];
							var $cmp60 = ((($33)) | 0) == 0;
							if ($cmp60) {
								__label__ = 24;;
							} else {
								__label__ = 22;;
							}
							$if_then69$$lor_lhs_false61$31: do {
								if (__label__ == 22) {
									var $34 = $wtab_addr;
									var $arrayidx62 = (($34) & 4294967295);
									var $flags63 = (($arrayidx62) & 4294967295);
									var $35 = HEAP32[(($flags63) >> 2)];
									var $and64 = ($35) & 131072;
									var $tobool65 = ((($and64)) | 0) != 0;
									if ($tobool65) {
										__label__ = 24;
										break $if_then69$$lor_lhs_false61$31;
									}
									var $36 = HEAP32[(($c2) >> 2)];
									var $call67 = _iswdigit($36);
									var $tobool68 = ((($call67)) | 0) != 0;
									if (!($tobool68)) {
										__label__ = 25;
										break $land_lhs_true59$$if_end70$29;
									}
								}
							} while (0);
							$ordinal = 0;;
						}
					} while (0);
					var $37 = $nextflags;
					var $and71 = ($37) & 1048576;
					var $tobool72 = ((($and71)) | 0) != 0;
					if ($tobool72) {
						__label__ = 26;;
					} else {
						__label__ = 27;;
					}
					if (__label__ == 26) {
						$ordinal = 0;;
					}
					var $38 = $nextflags;
					var $and75 = ($38) & 4194304;
					var $tobool76 = ((($and75)) | 0) != 0;
					if (!($tobool76)) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					var $39 = $word_addr;
					var $arrayidx78 = (($39 + -2) & 4294967295);
					var $40 = HEAP8[($arrayidx78)];
					var $conv79 = (tempInt = (($40)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp80 = ((($conv79)) | 0) == 45;
					if ($cmp80) {
						__label__ = 29;;
					} else {
						__label__ = 30;;
					}
					if (__label__ == 29) {
						$ordinal = 0;;
					}
					var $41 = $tr_addr;
					var $prev_dict_flags83 = (($41 + 8320) & 4294967295);
					var $42 = HEAP32[(($prev_dict_flags83) >> 2)];
					var $and84 = ($42) & 5242880;
					var $tobool85 = ((($and84)) | 0) != 0;
					if (!($tobool85)) {
						__label__ = 32;
						break $land_lhs_true$$if_end92$2;
					}
					$ordinal = 34;;
				}
			} while (0);
			var $43 = $ordinal;
			STACKTOP = __stackBase__;
			return $43;
			return null;
		}

		function __ZL11hu_number_ePKcii($word, $thousandplex, $value) {;
			var __label__;
			var $retval;
			var $word_addr;
			var $thousandplex_addr;
			var $value_addr;
			$word_addr = $word;
			$thousandplex_addr = $thousandplex;
			$value_addr = $value;
			var $0 = $word_addr;
			var $arrayidx = (($0) & 4294967295);
			var $1 = HEAP8[($arrayidx)];
			var $conv = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp = ((($conv)) | 0) == 97;
			if ($cmp) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$if_then$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $2 = $word_addr;
					var $arrayidx1 = (($2) & 4294967295);
					var $3 = HEAP8[($arrayidx1)];
					var $conv2 = (tempInt = (($3)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp3 = ((($conv2)) | 0) == 101;
					if ($cmp3) {
						__label__ = 2;
						break $if_then$$lor_lhs_false$2;
					}
					$retval = 0;
					__label__ = 13;
					break $if_then$$lor_lhs_false$2;
				}
			} while (0);
			$if_then$$return$5: do {
				if (__label__ == 2) {
					var $4 = $word_addr;
					var $arrayidx4 = (($4 + 1) & 4294967295);
					var $5 = HEAP8[($arrayidx4)];
					var $conv5 = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp6 = ((($conv5)) | 0) == 32;
					if ($cmp6) {
						__label__ = 6;;
					} else {
						__label__ = 3;;
					}
					$if_then18$$lor_lhs_false7$7: do {
						if (__label__ == 3) {
							var $6 = $word_addr;
							var $arrayidx8 = (($6 + 1) & 4294967295);
							var $7 = HEAP8[($arrayidx8)];
							var $conv9 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp10 = ((($conv9)) | 0) == 122;
							if ($cmp10) {
								__label__ = 6;
								break $if_then18$$lor_lhs_false7$7;
							}
							var $8 = $word_addr;
							var $arrayidx12 = (($8 + 1) & 4294967295);
							var $9 = HEAP8[($arrayidx12)];
							var $conv13 = (tempInt = (($9)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp14 = ((($conv13)) | 0) == 116;
							if ($cmp14) {
								__label__ = 5;;
							} else {
								__label__ = 7;;
							}
							if (__label__ == 5) {
								var $10 = $word_addr;
								var $arrayidx15 = (($10 + 2) & 4294967295);
								var $11 = HEAP8[($arrayidx15)];
								var $conv16 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp17 = ((($conv16)) | 0) == 116;
								if ($cmp17) {
									__label__ = 6;
									break $if_then18$$lor_lhs_false7$7;
								}
							}
							var $12 = $thousandplex_addr;
							var $cmp19 = ((($12)) | 0) == 1;
							if ($cmp19) {
								__label__ = 9;;
							} else {
								__label__ = 8;;
							}
							$land_lhs_true22$$lor_lhs_false20$13: do {
								if (__label__ == 8) {
									var $13 = $value_addr;
									var $rem = ((($13)) | 0) % 1000;
									var $cmp21 = ((($rem)) | 0) == 0;
									if ($cmp21) {
										__label__ = 9;
										break $land_lhs_true22$$lor_lhs_false20$13;
									} else {
										__label__ = 11;
										break $land_lhs_true22$$lor_lhs_false20$13;
									}
								}
							} while (0);
							$land_lhs_true22$$if_end27$15: do {
								if (__label__ == 9) {
									var $14 = $word_addr;
									var $arrayidx23 = (($14 + 1) & 4294967295);
									var $15 = HEAP8[($arrayidx23)];
									var $conv24 = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp25 = ((($conv24)) | 0) == 108;
									if (!($cmp25)) {
										__label__ = 11;
										break $land_lhs_true22$$if_end27$15;
									}
									$retval = 0;
									__label__ = 13;
									break $if_then$$return$5;
								}
							} while (0);
							$retval = 1;
							__label__ = 13;
							break $if_then$$return$5;
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $16 = $retval;;
			return $16;
			return null;
		}

		function __Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($tr, $word1, $ph_out, $flags, $wtab, $control) {;
			var __label__;
			var $retval;
			var $tr_addr;
			var $word1_addr;
			var $ph_out_addr;
			var $flags_addr;
			var $wtab_addr;
			var $control_addr;
			$tr_addr = $tr;
			$word1_addr = $word1;
			$ph_out_addr = $ph_out;
			$flags_addr = $flags;
			$wtab_addr = $wtab;
			$control_addr = $control;
			var $0 = HEAP32[((_option_sayas) >> 2)];
			var $cmp = ((($0)) | 0) == 193;
			if ($cmp) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$if_then$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $1 = $wtab_addr;
					var $arrayidx = (($1) & 4294967295);
					var $flags1 = (($arrayidx) & 4294967295);
					var $2 = HEAP32[(($flags1) >> 2)];
					var $and = ($2) & 524288;
					var $tobool = ((($and)) | 0) != 0;
					if ($tobool) {
						__label__ = 2;
						break $if_then$$lor_lhs_false$2;
					}
					var $3 = $tr_addr;
					var $langopts = (($3) & 4294967295);
					var $numbers = (($langopts + 184) & 4294967295);
					var $4 = HEAP32[(($numbers) >> 2)];
					var $cmp2 = ((($4)) | 0) != 0;
					if ($cmp2) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 4) {
						var $5 = $tr_addr;
						var $6 = $word1_addr;
						var $7 = $ph_out_addr;
						var $8 = $flags_addr;
						var $9 = $wtab_addr;
						var $10 = $control_addr;
						var $call = __ZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABi($5, $6, $7, $8, $9, $10);
						$retval = $call;
						__label__ = 6;
						break $if_then$$lor_lhs_false$2;
					} else if (__label__ == 5) {
						$retval = 0;
						__label__ = 6;
						break $if_then$$lor_lhs_false$2;
					}
				}
			} while (0);
			if (__label__ == 2) {
				$retval = 0;;
			}
			var $11 = $retval;;
			return $11;
			return null;
		}

		function __ZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABi($tr, $word, $ph_out, $flags, $wtab, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 560;
			_memset(__stackBase__, 0, 560);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $ph_out_addr;
			var $flags_addr;
			var $wtab_addr;
			var $control_addr;
			var $n_digits;
			var $value;
			var $ix;
			var $digix;
			var $c;
			var $suppress_null;
			var $decimal_point;
			var $thousandplex;
			var $thousands_exact;
			var $thousands_inc;
			var $prev_thousands;
			var $ordinal;
			var $dot_ordinal;
			var $this_value;
			var $decimal_count;
			var $max_decimal_count;
			var $decimal_mode;
			var $hyphen;
			var $suffix_ix;
			var $skipwords;
			var $p = __stackBase__;
			var $string = __stackBase__ + 4;
			var $buf1 = __stackBase__ + 24;
			var $ph_append = __stackBase__ + 124;
			var $ph_buf = __stackBase__ + 176;
			var $ph_buf2 = __stackBase__ + 376;
			var $ph_zeros = __stackBase__ + 428;
			var $suffix = __stackBase__ + 480;
			var $buf_digit_lookup = __stackBase__ + 500;
			var $p2 = __stackBase__ + 552;
			var $next_char = __stackBase__ + 556;
			var $p562;
			$tr_addr = $tr;
			$word_addr = $word;
			$ph_out_addr = $ph_out;
			$flags_addr = $flags;
			$wtab_addr = $wtab;
			$control_addr = $control;
			$suppress_null = 0;
			$decimal_point = 0;
			$thousandplex = 0;
			$thousands_exact = 1;
			$thousands_inc = 0;
			$prev_thousands = 0;
			$ordinal = 0;
			$skipwords = 0;
			var $0 = $flags_addr;
			HEAP32[(($0) >> 2)] = 0;
			HEAP32[((__ZL14n_digit_lookup) >> 2)] = 0;
			var $arrayidx = (($buf_digit_lookup) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arraydecay = (($buf_digit_lookup) & 4294967295);
			HEAP32[((__ZL12digit_lookup) >> 2)] = $arraydecay;
			var $1 = $control_addr;
			HEAP32[((__ZL14number_control) >> 2)] = $1;
			$ix = 0;
			var $2 = $ix;
			var $3 = $word_addr;
			var $arrayidx167 = (($3 + $2) & 4294967295);
			var $4 = HEAP8[($arrayidx167)];
			var $conv68 = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $isdigittmp69 = ((($conv68) - 48) & 4294967295);
			var $isdigit70 = ((($isdigittmp69)) >>> 0) < 10;
			var $5 = $ix;
			if ($isdigit70) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			$for_inc$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $6 = __lastLabel__ == 1 ? $10 : ($5);
						var $inc = ((($6) + 1) & 4294967295);
						$ix = $inc;
						var $7 = $ix;
						var $8 = $word_addr;
						var $arrayidx1 = (($8 + $7) & 4294967295);
						var $9 = HEAP8[($arrayidx1)];
						var $conv = (tempInt = (($9)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp = ((($conv) - 48) & 4294967295);
						var $isdigit = ((($isdigittmp)) >>> 0) < 10;
						var $call = ((($isdigit)) & 1);
						var $tobool = ((($call)) | 0) != 0;
						var $10 = $ix;
						if ($tobool) {
							__lastLabel__ = 1;
							__label__ = 1;
							continue;
						} else {
							__lastLabel__ = 1;
							__label__ = 2;
							break $for_inc$$for_end$2;
						}
					}
				}
			} while (0);
			var $_lcssa65 = __lastLabel__ == 0 ? $5 : ($10);
			$n_digits = $_lcssa65;
			var $11 = $word_addr;
			var $call2 = _atoi($11);
			$this_value = $call2;
			$value = $call2;
			var $cmp = ((($_lcssa65)) | 0) == 3;
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 6;;
			}
			$land_lhs_true$$if_else$6: do {
				if (__label__ == 3) {
					var $12 = $word_addr;
					var $arrayidx3 = (($12 + -2) & 4294967295);
					var $13 = HEAP8[($arrayidx3)];
					var $conv4 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $14 = $tr_addr;
					var $langopts = (($14) & 4294967295);
					var $thousands_sep = (($langopts + 204) & 4294967295);
					var $15 = HEAP32[(($thousands_sep) >> 2)];
					var $cmp5 = ((($conv4)) | 0) == ((($15)) | 0);
					if (!($cmp5)) {
						__label__ = 6;
						break $land_lhs_true$$if_else$6;
					}
					var $16 = $word_addr;
					var $arrayidx7 = (($16 + -3) & 4294967295);
					var $17 = HEAP8[($arrayidx7)];
					var $conv8 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp6 = ((($conv8) - 48) & 4294967295);
					var $isdigit7 = ((($isdigittmp6)) >>> 0) < 10;
					var $call9 = ((($isdigit7)) & 1);
					var $tobool10 = ((($call9)) | 0) != 0;
					if (!($tobool10)) {
						__label__ = 6;
						break $land_lhs_true$$if_else$6;
					}
					$prev_thousands = 1;
					__label__ = 14;
					break $land_lhs_true$$if_else$6;
				}
			} while (0);
			$if_end32$$if_else$10: do {
				if (__label__ == 6) {
					var $18 = $tr_addr;
					var $langopts11 = (($18) & 4294967295);
					var $thousands_sep12 = (($langopts11 + 204) & 4294967295);
					var $19 = HEAP32[(($thousands_sep12) >> 2)];
					var $cmp13 = ((($19)) | 0) == 32;
					if ($cmp13) {
						__label__ = 8;;
					} else {
						__label__ = 7;;
					}
					$if_then16$$lor_lhs_false$12: do {
						if (__label__ == 7) {
							var $20 = $tr_addr;
							var $langopts14 = (($20) & 4294967295);
							var $numbers = (($langopts14 + 184) & 4294967295);
							var $21 = HEAP32[(($numbers) >> 2)];
							var $and = ($21) & 4096;
							var $tobool15 = ((($and)) | 0) != 0;
							if ($tobool15) {
								__label__ = 8;
								break $if_then16$$lor_lhs_false$12;
							} else {
								__label__ = 12;
								break $if_then16$$lor_lhs_false$12;
							}
						}
					} while (0);
					$if_then16$$if_end29$14: do {
						if (__label__ == 8) {
							var $22 = $n_digits;
							var $cmp17 = ((($22)) | 0) == 3;
							if (!($cmp17)) {
								__label__ = 12;
								break $if_then16$$if_end29$14;
							}
							var $23 = $wtab_addr;
							var $flags19 = (($23) & 4294967295);
							var $24 = HEAP32[(($flags19) >> 2)];
							var $and20 = ($24) & 262144;
							var $tobool21 = ((($and20)) | 0) != 0;
							if ($tobool21) {
								__label__ = 12;
								break $if_then16$$if_end29$14;
							}
							var $25 = $word_addr;
							var $arrayidx23 = (($25 + -2) & 4294967295);
							var $26 = HEAP8[($arrayidx23)];
							var $conv24 = (tempInt = (($26)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp8 = ((($conv24) - 48) & 4294967295);
							var $isdigit9 = ((($isdigittmp8)) >>> 0) < 10;
							var $call25 = ((($isdigit9)) & 1);
							var $tobool26 = ((($call25)) | 0) != 0;
							if (!($tobool26)) {
								__label__ = 12;
								break $if_then16$$if_end29$14;
							}
							$prev_thousands = 1;
							__label__ = 14;
							break $if_end32$$if_else$10;
						}
					} while (0);
					var $_pr = $prev_thousands;
					var $cmp30 = ((($_pr)) | 0) == 0;
					if (!($cmp30)) {
						__label__ = 14;
						break $if_end32$$if_else$10;
					}
					HEAP32[((__ZL23speak_missing_thousands) >> 2)] = 0;;
				}
			} while (0);
			HEAP8[(((__ZL11ph_ordinal2) & 4294967295))] = 0;
			var $arrayidx33 = (($ph_zeros) & 4294967295);
			HEAP8[($arrayidx33)] = 0;
			var $27 = $prev_thousands;
			var $tobool34 = ((($27)) | 0) != 0;
			if ($tobool34) {
				__label__ = 16;;
			} else {
				__label__ = 15;;
			}
			$if_then39$$lor_lhs_false35$22: do {
				if (__label__ == 15) {
					var $28 = $word_addr;
					var $arrayidx36 = (($28) & 4294967295);
					var $29 = HEAP8[($arrayidx36)];
					var $conv37 = (tempInt = (($29)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp38 = ((($conv37)) | 0) != 48;
					if ($cmp38) {
						__label__ = 16;
						break $if_then39$$lor_lhs_false35$22;
					} else {
						__label__ = 18;
						break $if_then39$$lor_lhs_false35$22;
					}
				}
			} while (0);
			$if_then39$$if_end45$24: do {
				if (__label__ == 16) {
					var $30 = $tr_addr;
					var $31 = $word_addr;
					var $32 = $ix;
					var $33 = $word_addr;
					var $arrayidx40 = (($33 + $32) & 4294967295);
					var $34 = $wtab_addr;
					var $call41 = __ZL15CheckDotOrdinalP10TranslatorPcS1_P8WORD_TABi($30, $31, $arrayidx40, $34, 0);
					$ordinal = $call41;
					var $cmp42 = ((($call41)) | 0) != 0;
					if (!($cmp42)) {
						__label__ = 18;
						break $if_then39$$if_end45$24;
					}
					$dot_ordinal = 1;;
				}
			} while (0);
			var $35 = $ix;
			var $36 = $word_addr;
			var $arrayidx46 = (($36 + $35) & 4294967295);
			var $37 = HEAP8[($arrayidx46)];
			var $conv47 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp48 = ((($conv47)) | 0) == 46;
			if ($cmp48) {
				__label__ = 19;;
			} else {
				__label__ = 23;;
			}
			$land_lhs_true49$$if_end67$28: do {
				if (__label__ == 19) {
					var $38 = $ix;
					var $add = ((($38) + 1) & 4294967295);
					var $39 = $word_addr;
					var $arrayidx50 = (($39 + $add) & 4294967295);
					var $40 = HEAP8[($arrayidx50)];
					var $conv51 = (tempInt = (($40)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp10 = ((($conv51) - 48) & 4294967295);
					var $isdigit11 = ((($isdigittmp10)) >>> 0) < 10;
					var $call52 = ((($isdigit11)) & 1);
					var $tobool53 = ((($call52)) | 0) != 0;
					if ($tobool53) {
						__label__ = 23;
						break $land_lhs_true49$$if_end67$28;
					}
					var $41 = $ix;
					var $add55 = ((($41) + 2) & 4294967295);
					var $42 = $word_addr;
					var $arrayidx56 = (($42 + $add55) & 4294967295);
					var $43 = HEAP8[($arrayidx56)];
					var $conv57 = (tempInt = (($43)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp12 = ((($conv57) - 48) & 4294967295);
					var $isdigit13 = ((($isdigittmp12)) >>> 0) < 10;
					var $call58 = ((($isdigit13)) & 1);
					var $tobool59 = ((($call58)) | 0) != 0;
					if ($tobool59) {
						__label__ = 23;
						break $land_lhs_true49$$if_end67$28;
					}
					var $44 = $wtab_addr;
					var $arrayidx61 = (($44 + 12) & 4294967295);
					var $flags62 = (($arrayidx61) & 4294967295);
					var $45 = HEAP32[(($flags62) >> 2)];
					var $and63 = ($45) & 256;
					var $tobool64 = ((($and63)) | 0) != 0;
					if ($tobool64) {
						__label__ = 23;
						break $land_lhs_true49$$if_end67$28;
					}
					var $46 = $ix;
					var $47 = $word_addr;
					var $arrayidx66 = (($47 + $46) & 4294967295);
					HEAP8[($arrayidx66)] = 0;;
				}
			} while (0);
			var $48 = $ordinal;
			var $cmp68 = ((($48)) | 0) == 0;
			if ($cmp68) {
				__label__ = 25;;
			} else {
				__label__ = 24;;
			}
			$if_then71$$lor_lhs_false69$34: do {
				if (__label__ == 24) {
					var $49 = $tr_addr;
					var $translator_name = (($49 + 280) & 4294967295);
					var $50 = HEAP32[(($translator_name) >> 2)];
					var $cmp70 = ((($50)) | 0) == 26741;
					if ($cmp70) {
						__label__ = 25;
						break $if_then71$$lor_lhs_false69$34;
					} else {
						__label__ = 38;
						break $if_then71$$lor_lhs_false69$34;
					}
				}
			} while (0);
			$if_then71$$if_end123$36: do {
				if (__label__ == 25) {
					var $51 = $ix;
					var $inc72 = ((($51) + 1) & 4294967295);
					$ix = $inc72;
					$hyphen = 0;
					var $arraydecay73 = (($suffix) & 4294967295);
					HEAP32[(($p) >> 2)] = $arraydecay73;
					var $52 = $wtab_addr;
					var $arrayidx74 = (($52) & 4294967295);
					var $flags75 = (($arrayidx74) & 4294967295);
					var $53 = HEAP32[(($flags75) >> 2)];
					var $and76 = ($53) & 16384;
					var $tobool77 = ((($and76)) | 0) != 0;
					if ($tobool77) {
						__label__ = 26;;
					} else {
						__label__ = 27;;
					}
					if (__label__ == 26) {
						var $54 = HEAP32[(($p) >> 2)];
						var $incdec_ptr = (($54 + 1) & 4294967295);
						HEAP32[(($p) >> 2)] = $incdec_ptr;
						HEAP8[($54)] = 45;
						$hyphen = 1;
						var $55 = $ix;
						var $inc79 = ((($55) + 1) & 4294967295);
						$ix = $inc79;;
					}
					$while_cond$40: while (1) {
						var $56 = $ix;
						var $57 = $word_addr;
						var $arrayidx81 = (($57 + $56) & 4294967295);
						var $58 = HEAP8[($arrayidx81)];
						var $conv82 = (tempInt = (($58)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp83 = ((($conv82)) | 0) != 0;
						if (!($cmp83)) {
							__label__ = 31;
							break $while_cond$40;
						}
						var $59 = $ix;
						var $60 = $word_addr;
						var $arrayidx85 = (($60 + $59) & 4294967295);
						var $61 = HEAP8[($arrayidx85)];
						var $conv86 = (tempInt = (($61)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp87 = ((($conv86)) | 0) != 32;
						if (!($cmp87)) {
							__label__ = 31;
							break $while_cond$40;
						}
						var $62 = $ix;
						var $cmp88 = ((($62)) | 0) < 19;
						if (!($cmp88)) {
							__label__ = 31;
							break $while_cond$40;
						}
						var $63 = $ix;
						var $inc89 = ((($63) + 1) & 4294967295);
						$ix = $inc89;
						var $64 = $word_addr;
						var $arrayidx90 = (($64 + $63) & 4294967295);
						var $65 = HEAP8[($arrayidx90)];
						var $66 = HEAP32[(($p) >> 2)];
						var $incdec_ptr91 = (($66 + 1) & 4294967295);
						HEAP32[(($p) >> 2)] = $incdec_ptr91;
						HEAP8[($66)] = $65;
						__label__ = 27;
						continue $while_cond$40;
					}
					var $67 = HEAP32[(($p) >> 2)];
					HEAP8[($67)] = 0;
					var $arrayidx92 = (($suffix) & 4294967295);
					var $68 = HEAP8[($arrayidx92)];
					var $conv93 = (tempInt = (($68)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp94 = ((($conv93)) | 0) != 0;
					if (!($cmp94)) {
						__label__ = 38;
						break $if_then71$$if_end123$36;
					}
					var $69 = $tr_addr;
					var $langopts96 = (($69) & 4294967295);
					var $ordinal_indicator = (($langopts96 + 216) & 4294967295);
					var $70 = HEAP32[(($ordinal_indicator) >> 2)];
					var $cmp97 = ((($70)) | 0) != 0;
					if ($cmp97) {
						__label__ = 33;;
					} else {
						__label__ = 35;;
					}
					$land_lhs_true98$$if_else105$47: do {
						if (__label__ == 33) {
							var $arraydecay99 = (($suffix) & 4294967295);
							var $71 = $tr_addr;
							var $langopts100 = (($71) & 4294967295);
							var $ordinal_indicator101 = (($langopts100 + 216) & 4294967295);
							var $72 = HEAP32[(($ordinal_indicator101) >> 2)];
							var $call102 = _strcmp($arraydecay99, $72);
							var $cmp103 = ((($call102)) | 0) == 0;
							if (!($cmp103)) {
								__label__ = 35;
								break $land_lhs_true98$$if_else105$47;
							}
							$ordinal = 2;
							__label__ = 38;
							break $if_then71$$if_end123$36;
						}
					} while (0);
					var $arrayidx106 = (($suffix) & 4294967295);
					var $73 = HEAP8[($arrayidx106)];
					var $conv107 = (tempInt = (($73)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp14 = ((($conv107) - 48) & 4294967295);
					var $isdigit15 = ((($isdigittmp14)) >>> 0) < 10;
					var $call108 = ((($isdigit15)) & 1);
					var $tobool109 = ((($call108)) | 0) != 0;
					if ($tobool109) {
						__label__ = 38;
						break $if_then71$$if_end123$36;
					}
					var $arraydecay111 = (($string) & 4294967295);
					var $arraydecay112 = (($suffix) & 4294967295);
					var $call113 = _sprintf($arraydecay111, ((__str15312) & 4294967295), allocate([$arraydecay112, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					var $74 = $tr_addr;
					var $arraydecay114 = (($string) & 4294967295);
					var $call115 = __Z6LookupP10TranslatorPKcPc($74, $arraydecay114, ((__ZL11ph_ordinal2) & 4294967295));
					var $tobool116 = ((($call115)) | 0) != 0;
					if (!($tobool116)) {
						__label__ = 38;
						break $if_then71$$if_end123$36;
					}
					$ordinal = 2;
					var $75 = $flags_addr;
					var $arrayidx118 = (($75) & 4294967295);
					var $76 = HEAP32[(($arrayidx118) >> 2)];
					var $or = ($76) | 128;
					HEAP32[(($arrayidx118) >> 2)] = $or;
					$skipwords = 1;;
				}
			} while (0);
			var $77 = $wtab_addr;
			var $arrayidx124 = (($77) & 4294967295);
			var $flags125 = (($arrayidx124) & 4294967295);
			var $78 = HEAP32[(($flags125) >> 2)];
			var $and126 = ($78) & 32768;
			var $tobool127 = ((($and126)) | 0) != 0;
			if ($tobool127) {
				__label__ = 39;;
			} else {
				__label__ = 40;;
			}
			if (__label__ == 39) {
				$ordinal = 2;;
			}
			var $arrayidx130 = (($ph_append) & 4294967295);
			HEAP8[($arrayidx130)] = 0;
			var $arrayidx131 = (($ph_buf2) & 4294967295);
			HEAP8[($arrayidx131)] = 0;
			var $79 = $word_addr;
			var $arrayidx132 = (($79) & 4294967295);
			var $80 = HEAP8[($arrayidx132)];
			var $conv133 = (tempInt = (($80)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp134 = ((($conv133)) | 0) == 48;
			if ($cmp134) {
				__label__ = 41;;
			} else {
				__label__ = 55;;
			}
			$land_lhs_true135$$if_end185$57: do {
				if (__label__ == 41) {
					var $81 = $prev_thousands;
					var $cmp136 = ((($81)) | 0) == 0;
					if (!($cmp136)) {
						__label__ = 55;
						break $land_lhs_true135$$if_end185$57;
					}
					var $82 = $word_addr;
					var $arrayidx138 = (($82 + 1) & 4294967295);
					var $83 = HEAP8[($arrayidx138)];
					var $conv139 = (tempInt = (($83)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp140 = ((($conv139)) | 0) != 32;
					if (!($cmp140)) {
						__label__ = 55;
						break $land_lhs_true135$$if_end185$57;
					}
					var $84 = $word_addr;
					var $arrayidx142 = (($84 + 1) & 4294967295);
					var $85 = HEAP8[($arrayidx142)];
					var $conv143 = (tempInt = (($85)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $86 = $tr_addr;
					var $langopts144 = (($86) & 4294967295);
					var $decimal_sep = (($langopts144 + 208) & 4294967295);
					var $87 = HEAP32[(($decimal_sep) >> 2)];
					var $cmp145 = ((($conv143)) | 0) != ((($87)) | 0);
					if (!($cmp145)) {
						__label__ = 55;
						break $land_lhs_true135$$if_end185$57;
					}
					var $88 = $n_digits;
					var $cmp147 = ((($88)) | 0) == 2;
					if ($cmp147) {
						__lastLabel__ = 44;
						__label__ = 45;;
					} else {
						__lastLabel__ = 44;
						__label__ = 49;;
					}
					if (__label__ == 45) {
						var $89 = $word_addr;
						var $arrayidx149 = (($89 + 3) & 4294967295);
						var $90 = HEAP8[($arrayidx149)];
						var $conv150 = (tempInt = (($90)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp151 = ((($conv150)) | 0) == 58;
						if ($cmp151) {
							__label__ = 46;;
						} else {
							__label__ = 48;;
						}
						$land_lhs_true152$$if_else163thread_pre_split$64: do {
							if (__label__ == 46) {
								var $91 = $word_addr;
								var $arrayidx153 = (($91 + 5) & 4294967295);
								var $92 = HEAP8[($arrayidx153)];
								var $conv154 = (tempInt = (($92)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $isdigittmp16 = ((($conv154) - 48) & 4294967295);
								var $isdigit17 = ((($isdigittmp16)) >>> 0) < 10;
								var $call155 = ((($isdigit17)) & 1);
								var $tobool156 = ((($call155)) | 0) != 0;
								if (!($tobool156)) {
									__label__ = 48;
									break $land_lhs_true152$$if_else163thread_pre_split$64;
								}
								var $93 = $word_addr;
								var $arrayidx158 = (($93 + 7) & 4294967295);
								var $94 = HEAP8[($arrayidx158)];
								var $conv159 = (tempInt = (($94)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call160 = _isspace($conv159);
								var $tobool161 = ((($call160)) | 0) != 0;
								if ($tobool161) {
									__label__ = 55;
									break $land_lhs_true135$$if_end185$57;
								}
							}
						} while (0);
						var $_pr43 = $n_digits;
						__lastLabel__ = 48;;
					}
					var $95 = __lastLabel__ == 48 ? $_pr43 : ($88);
					var $cmp164 = ((($95)) | 0) > 3;
					if ($cmp164) {
						__label__ = 50;;
					} else {
						__label__ = 51;;
					}
					if (__label__ == 50) {
						var $96 = $flags_addr;
						var $arrayidx166 = (($96) & 4294967295);
						var $97 = HEAP32[(($arrayidx166) >> 2)];
						var $and167 = ($97) & -129;
						HEAP32[(($arrayidx166) >> 2)] = $and167;
						$retval = 0;
						__label__ = 157;
						break $land_lhs_true135$$if_end185$57;
					} else if (__label__ == 51) {
						$ix = 0;
						var $arraydecay177 = (($ph_zeros) & 4294967295);;
						while (1) {
							var $98 = $ix;
							var $99 = $word_addr;
							var $arrayidx170 = (($99 + $98) & 4294967295);
							var $100 = HEAP8[($arrayidx170)];
							var $conv171 = (tempInt = (($100)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp172 = ((($conv171)) | 0) == 48;
							if (!($cmp172)) {
								__label__ = 55;
								break $land_lhs_true135$$if_end185$57;
							}
							var $101 = $ix;
							var $102 = $n_digits;
							var $sub = ((($102) - 1) & 4294967295);
							var $cmp174 = ((($101)) | 0) < ((($sub)) | 0);
							if (!($cmp174)) {
								__label__ = 55;
								break $land_lhs_true135$$if_end185$57;
							}
							var $103 = $tr_addr;
							var $call178 = _strlen($arraydecay177);
							var $arrayidx179 = (($ph_zeros + $call178) & 4294967295);
							var $call180 = __Z6LookupP10TranslatorPKcPc($103, ((__str16313) & 4294967295), $arrayidx179);
							var $104 = $ix;
							var $inc182 = ((($104) + 1) & 4294967295);
							$ix = $inc182;
							__label__ = 52;
							continue;
						}
					}
				}
			} while (0);
			if (__label__ == 55) {
				var $105 = $tr_addr;
				var $langopts186 = (($105) & 4294967295);
				var $numbers187 = (($langopts186 + 184) & 4294967295);
				var $106 = HEAP32[(($numbers187) >> 2)];
				var $and188 = ($106) & 4096;
				var $tobool189 = ((($and188)) | 0) != 0;
				if ($tobool189) {
					__label__ = 56;;
				} else {
					__label__ = 58;;
				}
				$land_lhs_true190$$if_else195$78: do {
					if (__label__ == 56) {
						var $107 = $n_digits;
						var $108 = $word_addr;
						var $arrayidx191 = (($108 + $107) & 4294967295);
						var $109 = HEAP8[($arrayidx191)];
						var $conv192 = (tempInt = (($109)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp193 = ((($conv192)) | 0) == 32;
						if (!($cmp193)) {
							__label__ = 58;
							break $land_lhs_true190$$if_else195$78;
						}
						$thousands_inc = 1;
						__label__ = 60;
						break $land_lhs_true190$$if_else195$78;
					}
				} while (0);
				$if_end203_thread$$if_else195$81: do {
					if (__label__ == 58) {
						var $110 = $n_digits;
						var $111 = $word_addr;
						var $arrayidx196 = (($111 + $110) & 4294967295);
						var $112 = HEAP8[($arrayidx196)];
						var $conv197 = (tempInt = (($112)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $113 = $tr_addr;
						var $langopts198 = (($113) & 4294967295);
						var $thousands_sep199 = (($langopts198 + 204) & 4294967295);
						var $114 = HEAP32[(($thousands_sep199) >> 2)];
						var $cmp200 = ((($conv197)) | 0) == ((($114)) | 0);
						if ($cmp200) {
							__label__ = 59;;
						} else {
							__label__ = 61;;
						}
						if (__label__ == 59) {
							$thousands_inc = 2;
							__label__ = 60;
							break $if_end203_thread$$if_else195$81;
						} else if (__label__ == 61) {
							var $_pr44 = $thousands_inc;
							var $116 = $n_digits;
							var $add204 = ((($116) + 2) & 4294967295);
							$suffix_ix = $add204;
							var $cmp205 = ((($_pr44)) | 0) > 0;
							if ($cmp205) {
								__label__ = 62;
								break $if_end203_thread$$if_else195$81;
							} else {
								__label__ = 77;
								break $if_end203_thread$$if_else195$81;
							}
						}
					}
				} while (0);
				$if_end203_thread$$if_then206$$if_end282$86: do {
					if (__label__ == 60) {
						var $115 = $n_digits;
						var $add20445 = ((($115) + 2) & 4294967295);
						$suffix_ix = $add20445;
						__label__ = 62;
						break $if_end203_thread$$if_then206$$if_end282$86;
					}
				} while (0);
				$if_then206$$if_end282$88: do {
					if (__label__ == 62) {
						var $117 = $n_digits;
						var $118 = $thousands_inc;
						var $add207 = ((($118) + ($117)) & 4294967295);
						$digix = $add207;;
						$while_cond208$90: while (1) {
							var $119 = $thousandplex;
							var $add209 = ((($119) + 1) & 4294967295);
							var $120 = $wtab_addr;
							var $arrayidx210 = (($120 + 12 * $add209) & 4294967295);
							var $flags211 = (($arrayidx210) & 4294967295);
							var $121 = HEAP32[(($flags211) >> 2)];
							var $and212 = ($121) & 262144;
							var $cmp213 = ((($and212)) | 0) == 0;
							if (!($cmp213)) {
								__label__ = 77;
								break $if_then206$$if_end282$88;
							}
							var $122 = $digix;
							var $123 = $word_addr;
							var $arrayidx215 = (($123 + $122) & 4294967295);
							var $124 = HEAP8[($arrayidx215)];
							var $conv216 = (tempInt = (($124)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp18 = ((($conv216) - 48) & 4294967295);
							var $isdigit19 = ((($isdigittmp18)) >>> 0) < 10;
							var $call217 = ((($isdigit19)) & 1);
							var $tobool218 = ((($call217)) | 0) != 0;
							if (!($tobool218)) {
								__label__ = 77;
								break $if_then206$$if_end282$88;
							}
							var $125 = $digix;
							var $add220 = ((($125) + 1) & 4294967295);
							var $126 = $word_addr;
							var $arrayidx221 = (($126 + $add220) & 4294967295);
							var $127 = HEAP8[($arrayidx221)];
							var $conv222 = (tempInt = (($127)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp20 = ((($conv222) - 48) & 4294967295);
							var $isdigit21 = ((($isdigittmp20)) >>> 0) < 10;
							var $call223 = ((($isdigit21)) & 1);
							var $tobool224 = ((($call223)) | 0) != 0;
							if (!($tobool224)) {
								__label__ = 77;
								break $if_then206$$if_end282$88;
							}
							var $128 = $digix;
							var $add226 = ((($128) + 2) & 4294967295);
							var $129 = $word_addr;
							var $arrayidx227 = (($129 + $add226) & 4294967295);
							var $130 = HEAP8[($arrayidx227)];
							var $conv228 = (tempInt = (($130)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp22 = ((($conv228) - 48) & 4294967295);
							var $isdigit23 = ((($isdigittmp22)) >>> 0) < 10;
							var $call229 = ((($isdigit23)) & 1);
							var $tobool230 = ((($call229)) | 0) != 0;
							if (!($tobool230)) {
								__label__ = 77;
								break $if_then206$$if_end282$88;
							}
							var $131 = $digix;
							var $add232 = ((($131) + 3) & 4294967295);
							var $132 = $word_addr;
							var $arrayidx233 = (($132 + $add232) & 4294967295);
							var $133 = HEAP8[($arrayidx233)];
							var $conv234 = (tempInt = (($133)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp24 = ((($conv234) - 48) & 4294967295);
							var $isdigit25 = ((($isdigittmp24)) >>> 0) < 10;
							var $call235 = ((($isdigit25)) & 1);
							var $tobool236 = ((($call235)) | 0) != 0;
							if ($tobool236) {
								__label__ = 77;
								break $if_then206$$if_end282$88;
							}
							var $134 = $digix;
							var $sub238 = ((($134) - 1) & 4294967295);
							var $135 = $word_addr;
							var $arrayidx239 = (($135 + $sub238) & 4294967295);
							var $136 = HEAP8[($arrayidx239)];
							var $conv240 = (tempInt = (($136)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp26 = ((($conv240) - 48) & 4294967295);
							var $isdigit27 = ((($isdigittmp26)) >>> 0) < 10;
							var $call241 = ((($isdigit27)) & 1);
							var $tobool242 = ((($call241)) | 0) != 0;
							var $lnot = ($tobool242) ^ 1;
							if (!($lnot)) {
								__label__ = 77;
								break $if_then206$$if_end282$88;
							}
							var $137 = $digix;
							var $138 = $word_addr;
							var $arrayidx245 = (($138 + $137) & 4294967295);
							var $139 = HEAP8[($arrayidx245)];
							var $conv246 = (tempInt = (($139)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp247 = ((($conv246)) | 0) != 48;
							if ($cmp247) {
								__label__ = 72;;
							} else {
								__label__ = 70;;
							}
							$if_then258$$lor_lhs_false248$98: do {
								if (__label__ == 70) {
									var $140 = $digix;
									var $add249 = ((($140) + 1) & 4294967295);
									var $141 = $word_addr;
									var $arrayidx250 = (($141 + $add249) & 4294967295);
									var $142 = HEAP8[($arrayidx250)];
									var $conv251 = (tempInt = (($142)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp252 = ((($conv251)) | 0) != 48;
									if ($cmp252) {
										__label__ = 72;
										break $if_then258$$lor_lhs_false248$98;
									}
									var $143 = $digix;
									var $add254 = ((($143) + 2) & 4294967295);
									var $144 = $word_addr;
									var $arrayidx255 = (($144 + $add254) & 4294967295);
									var $145 = HEAP8[($arrayidx255)];
									var $conv256 = (tempInt = (($145)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp257 = ((($conv256)) | 0) != 48;
									if ($cmp257) {
										__label__ = 72;
										break $if_then258$$lor_lhs_false248$98;
									} else {
										__label__ = 73;
										break $if_then258$$lor_lhs_false248$98;
									}
								}
							} while (0);
							if (__label__ == 72) {
								$thousands_exact = 0;;
							}
							var $146 = $thousandplex;
							var $inc260 = ((($146) + 1) & 4294967295);
							$thousandplex = $inc260;
							var $147 = $digix;
							var $add261 = ((($147) + 3) & 4294967295);
							$digix = $add261;
							var $148 = $digix;
							var $149 = $word_addr;
							var $arrayidx262 = (($149 + $148) & 4294967295);
							var $150 = HEAP8[($arrayidx262)];
							var $conv263 = (tempInt = (($150)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $151 = $tr_addr;
							var $langopts264 = (($151) & 4294967295);
							var $thousands_sep265 = (($langopts264 + 204) & 4294967295);
							var $152 = HEAP32[(($thousands_sep265) >> 2)];
							var $cmp266 = ((($conv263)) | 0) == ((($152)) | 0);
							if ($cmp266) {
								__label__ = 76;;
							} else {
								__label__ = 74;;
							}
							if (__label__ == 74) {
								var $153 = $tr_addr;
								var $langopts268 = (($153) & 4294967295);
								var $numbers269 = (($langopts268 + 184) & 4294967295);
								var $154 = HEAP32[(($numbers269) >> 2)];
								var $and270 = ($154) & 4096;
								var $tobool271 = ((($and270)) | 0) != 0;
								if (!($tobool271)) {
									__label__ = 77;
									break $if_then206$$if_end282$88;
								}
								var $155 = $digix;
								var $156 = $word_addr;
								var $arrayidx273 = (($156 + $155) & 4294967295);
								var $157 = HEAP8[($arrayidx273)];
								var $conv274 = (tempInt = (($157)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp275 = ((($conv274)) | 0) == 32;
								if (!($cmp275)) {
									__label__ = 77;
									break $if_then206$$if_end282$88;
								}
							}
							var $158 = $digix;
							var $add277 = ((($158) + 2) & 4294967295);
							$suffix_ix = $add277;
							var $159 = $thousands_inc;
							var $160 = $digix;
							var $add278 = ((($160) + ($159)) & 4294967295);
							$digix = $add278;
							__label__ = 63;
							continue $while_cond208$90;
						}
					}
				} while (0);
				var $161 = $value;
				var $cmp283 = ((($161)) | 0) == 0;
				if ($cmp283) {
					__label__ = 78;;
				} else {
					__label__ = 80;;
				}
				$land_lhs_true284$$if_end287$109: do {
					if (__label__ == 78) {
						var $162 = $prev_thousands;
						var $tobool285 = ((($162)) | 0) != 0;
						if (!($tobool285)) {
							__label__ = 80;
							break $land_lhs_true284$$if_end287$109;
						}
						$suppress_null = 1;;
					}
				} while (0);
				var $163 = $tr_addr;
				var $translator_name288 = (($163 + 280) & 4294967295);
				var $164 = HEAP32[(($translator_name288) >> 2)];
				var $cmp289 = ((($164)) | 0) == 26741;
				if ($cmp289) {
					__label__ = 81;;
				} else {
					__label__ = 85;;
				}
				$if_then290$$if_end304$113: do {
					if (__label__ == 81) {
						var $165 = $thousandplex;
						var $166 = $wtab_addr;
						var $arrayidx291 = (($166 + 12 * $165) & 4294967295);
						var $flags292 = (($arrayidx291) & 4294967295);
						var $167 = HEAP32[(($flags292) >> 2)];
						var $and293 = ($167) & 16384;
						var $tobool294 = ((($and293)) | 0) != 0;
						if (!($tobool294)) {
							__label__ = 85;
							break $if_then290$$if_end304$113;
						}
						var $168 = $thousands_exact;
						var $cmp296 = ((($168)) | 0) == 1;
						if (!($cmp296)) {
							__label__ = 85;
							break $if_then290$$if_end304$113;
						}
						var $169 = $suffix_ix;
						var $170 = $word_addr;
						var $arrayidx298 = (($170 + $169) & 4294967295);
						var $171 = $thousandplex;
						var $172 = $value;
						var $call299 = __ZL11hu_number_ePKcii($arrayidx298, $171, $172);
						var $tobool300 = ((($call299)) | 0) != 0;
						if (!($tobool300)) {
							__label__ = 85;
							break $if_then290$$if_end304$113;
						}
						var $173 = HEAP32[((__ZL14number_control) >> 2)];
						var $or302 = ($173) | 1;
						HEAP32[((__ZL14number_control) >> 2)] = $or302;;
					}
				} while (0);
				var $174 = $n_digits;
				var $175 = $word_addr;
				var $arrayidx305 = (($175 + $174) & 4294967295);
				var $176 = HEAP8[($arrayidx305)];
				var $conv306 = (tempInt = (($176)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $177 = $tr_addr;
				var $langopts307 = (($177) & 4294967295);
				var $decimal_sep308 = (($langopts307 + 208) & 4294967295);
				var $178 = HEAP32[(($decimal_sep308) >> 2)];
				var $cmp309 = ((($conv306)) | 0) == ((($178)) | 0);
				if ($cmp309) {
					__label__ = 86;;
				} else {
					__label__ = 88;;
				}
				$land_lhs_true310$$if_else319$119: do {
					if (__label__ == 86) {
						var $179 = $n_digits;
						var $add311 = ((($179) + 1) & 4294967295);
						var $180 = $word_addr;
						var $arrayidx312 = (($180 + $add311) & 4294967295);
						var $181 = HEAP8[($arrayidx312)];
						var $conv313 = (tempInt = (($181)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp28 = ((($conv313) - 48) & 4294967295);
						var $isdigit29 = ((($isdigittmp28)) >>> 0) < 10;
						var $call314 = ((($isdigit29)) & 1);
						var $tobool315 = ((($call314)) | 0) != 0;
						if (!($tobool315)) {
							__label__ = 88;
							break $land_lhs_true310$$if_else319$119;
						}
						var $182 = $tr_addr;
						var $arraydecay317 = (($ph_append) & 4294967295);
						var $call318 = __Z6LookupP10TranslatorPKcPc($182, ((__str17314) & 4294967295), $arraydecay317);
						$decimal_point = 1;
						__label__ = 98;
						break $land_lhs_true310$$if_else319$119;
					}
				} while (0);
				$if_end356$$if_else319$122: do {
					if (__label__ == 88) {
						var $183 = $suppress_null;
						var $cmp320 = ((($183)) | 0) == 0;
						if ($cmp320) {
							__label__ = 89;;
						} else {
							__label__ = 95;;
						}
						if (__label__ == 89) {
							var $184 = $thousands_inc;
							var $cmp322 = ((($184)) | 0) > 0;
							if (!($cmp322)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							var $185 = $thousandplex;
							var $cmp324 = ((($185)) | 0) > 0;
							if (!($cmp324)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							var $186 = $value;
							var $cmp326 = ((($186)) | 0) < 1000;
							if (!($cmp326)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							var $187 = $suppress_null;
							var $cmp328 = ((($187)) | 0) == 0;
							if (!($cmp328)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							var $188 = $tr_addr;
							var $189 = $value;
							var $190 = $thousandplex;
							var $191 = $thousands_exact;
							var $arraydecay330 = (($ph_append) & 4294967295);
							var $call331 = __ZL15LookupThousandsP10TranslatoriiiPc($188, $189, $190, $191, $arraydecay330);
							var $tobool332 = ((($call331)) | 0) != 0;
							if (!($tobool332)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							$value = 0;
							$suppress_null = 1;;
						} else if (__label__ == 95) {
							var $192 = HEAP32[((__ZL23speak_missing_thousands) >> 2)];
							var $cmp338 = ((($192)) | 0) == 1;
							if (!($cmp338)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							var $arraydecay340 = (($string) & 4294967295);
							var $193 = $thousandplex;
							var $add341 = ((($193) + 1) & 4294967295);
							var $call342 = _sprintf($arraydecay340, ((__str18315) & 4294967295), allocate([$add341, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $194 = $tr_addr;
							var $arraydecay343 = (($string) & 4294967295);
							var $arraydecay344 = (($buf1) & 4294967295);
							var $call345 = __Z6LookupP10TranslatorPKcPc($194, $arraydecay343, $arraydecay344);
							var $cmp346 = ((($call345)) | 0) == 0;
							if (!($cmp346)) {
								__label__ = 98;
								break $if_end356$$if_else319$122;
							}
							var $arraydecay348 = (($string) & 4294967295);
							var $195 = $thousandplex;
							var $call349 = _sprintf($arraydecay348, ((__str18315) & 4294967295), allocate([$195, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $196 = $tr_addr;
							var $arraydecay350 = (($string) & 4294967295);
							var $arraydecay351 = (($ph_append) & 4294967295);
							var $call352 = __Z6LookupP10TranslatorPKcPc($196, $arraydecay350, $arraydecay351);;
						}
					}
				} while (0);
				var $arrayidx357 = (($ph_append) & 4294967295);
				var $197 = HEAP8[($arrayidx357)];
				var $conv358 = (tempInt = (($197)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp359 = ((($conv358)) | 0) == 0;
				if ($cmp359) {
					__label__ = 99;;
				} else {
					__label__ = 102;;
				}
				$land_lhs_true360$$if_end369$135: do {
					if (__label__ == 99) {
						var $198 = $n_digits;
						var $199 = $word_addr;
						var $arrayidx361 = (($199 + $198) & 4294967295);
						var $200 = HEAP8[($arrayidx361)];
						var $conv362 = (tempInt = (($200)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp363 = ((($conv362)) | 0) == 46;
						if (!($cmp363)) {
							__label__ = 102;
							break $land_lhs_true360$$if_end369$135;
						}
						var $201 = $thousandplex;
						var $cmp365 = ((($201)) | 0) == 0;
						if (!($cmp365)) {
							__label__ = 112;
							break $land_lhs_true360$$if_end369$135;
						}
						var $202 = $tr_addr;
						var $arraydecay367 = (($ph_append) & 4294967295);
						var $call368 = __Z6LookupP10TranslatorPKcPc($202, ((__str19316) & 4294967295), $arraydecay367);
						__label__ = 102;
						break $land_lhs_true360$$if_end369$135;
					}
				} while (0);
				$if_end369$$if_end404$139: do {
					if (__label__ == 102) {
						var $_pr47 = $thousandplex;
						var $cmp370 = ((($_pr47)) | 0) == 0;
						if (!($cmp370)) {
							__label__ = 112;
							break $if_end369$$if_end404$139;
						}
						var $203 = $word_addr;
						HEAP32[(($p) >> 2)] = $203;
						var $204 = HEAP32[(($p) >> 2)];
						var $arrayidx37360 = (($204 + 1) & 4294967295);
						var $205 = HEAP8[($arrayidx37360)];
						var $conv37461 = (tempInt = (($205)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp3062 = ((($conv37461) - 48) & 4294967295);
						var $isdigit3163 = ((($isdigittmp3062)) >>> 0) < 10;
						var $206 = HEAPU32[(($p) >> 2)];
						if ($isdigit3163) {
							__lastLabel__ = 103;
							__label__ = 104;;
						} else {
							__lastLabel__ = 103;
							__label__ = 105;;
						}
						$while_body377$$while_end379$142: do {
							if (__label__ == 104) {
								while (1) {
									var $207 = __lastLabel__ == 104 ? $210 : ($206);
									var $incdec_ptr378 = (($207 + 1) & 4294967295);
									HEAP32[(($p) >> 2)] = $incdec_ptr378;
									var $208 = HEAP32[(($p) >> 2)];
									var $arrayidx373 = (($208 + 1) & 4294967295);
									var $209 = HEAP8[($arrayidx373)];
									var $conv374 = (tempInt = (($209)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $isdigittmp30 = ((($conv374) - 48) & 4294967295);
									var $isdigit31 = ((($isdigittmp30)) >>> 0) < 10;
									var $call375 = ((($isdigit31)) & 1);
									var $tobool376 = ((($call375)) | 0) != 0;
									var $210 = HEAPU32[(($p) >> 2)];
									if ($tobool376) {
										__lastLabel__ = 104;
										__label__ = 104;
										continue;
									} else {
										__lastLabel__ = 104;
										__label__ = 105;
										break $while_body377$$while_end379$142;
									}
								}
							}
						} while (0);
						var $_lcssa = __lastLabel__ == 103 ? $206 : ($210);
						var $arrayidx380 = (($_lcssa + -1) & 4294967295);
						var $211 = HEAP8[($arrayidx380)];
						var $conv381 = (tempInt = (($211)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp32 = ((($conv381) - 48) & 4294967295);
						var $isdigit33 = ((($isdigittmp32)) >>> 0) < 10;
						var $call382 = ((($isdigit33)) & 1);
						var $tobool383 = ((($call382)) | 0) != 0;
						if ($tobool383) {
							__label__ = 106;;
						} else {
							__label__ = 108;;
						}
						$if_then384$$if_end390$146: do {
							if (__label__ == 106) {
								var $212 = HEAP32[(($p) >> 2)];
								var $add_ptr = (($212 + -1) & 4294967295);
								HEAP32[(($p2) >> 2)] = $add_ptr;
								var $213 = $tr_addr;
								var $arraydecay385 = (($buf_digit_lookup) & 4294967295);
								var $214 = $flags_addr;
								var $215 = $wtab_addr;
								var $call386 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($213, $p2, $arraydecay385, $214, 4, $215);
								var $tobool387 = ((($call386)) | 0) != 0;
								if (!($tobool387)) {
									__label__ = 108;
									break $if_then384$$if_end390$146;
								}
								HEAP32[((__ZL14n_digit_lookup) >> 2)] = 2;;
							}
						} while (0);
						var $arrayidx391 = (($buf_digit_lookup) & 4294967295);
						var $216 = HEAP8[($arrayidx391)];
						var $conv392 = (tempInt = (($216)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp393 = ((($conv392)) | 0) == 0;
						if (!($cmp393)) {
							__label__ = 112;
							break $if_end369$$if_end404$139;
						}
						var $217 = HEAP32[(($p) >> 2)];
						var $218 = HEAP8[($217)];
						var $conv395 = (tempInt = (($218)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp396 = ((($conv395)) | 0) != 48;
						if (!($cmp396)) {
							__label__ = 112;
							break $if_end369$$if_end404$139;
						}
						var $219 = $tr_addr;
						var $arraydecay398 = (($buf_digit_lookup) & 4294967295);
						var $220 = $flags_addr;
						var $221 = $wtab_addr;
						var $call399 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($219, $p, $arraydecay398, $220, 4, $221);
						var $tobool400 = ((($call399)) | 0) != 0;
						if (!($tobool400)) {
							__label__ = 112;
							break $if_end369$$if_end404$139;
						}
						HEAP32[((__ZL14n_digit_lookup) >> 2)] = 1;;
					}
				} while (0);
				var $222 = $tr_addr;
				var $223 = $value;
				var $arraydecay405 = (($ph_buf) & 4294967295);
				var $224 = $suppress_null;
				var $225 = $thousandplex;
				var $226 = $prev_thousands;
				var $227 = $ordinal;
				var $or406 = ($227) | ($226);
				__ZL10LookupNum3P10TranslatoriPciii($222, $223, $arraydecay405, $224, $225, $or406);
				var $228 = $thousandplex;
				var $cmp408 = ((($228)) | 0) > 0;
				if ($cmp408) {
					__label__ = 113;;
				} else {
					__label__ = 115;;
				}
				$land_lhs_true409$$if_else419$154: do {
					if (__label__ == 113) {
						var $229 = $tr_addr;
						var $langopts410 = (($229) & 4294967295);
						var $numbers2 = (($langopts410 + 188) & 4294967295);
						var $230 = HEAP32[(($numbers2) >> 2)];
						var $and411 = ($230) & 512;
						var $tobool412 = ((($and411)) | 0) != 0;
						if (!($tobool412)) {
							__label__ = 115;
							break $land_lhs_true409$$if_else419$154;
						}
						var $231 = $ph_out_addr;
						var $arraydecay414 = (($ph_zeros) & 4294967295);
						var $arraydecay415 = (($ph_append) & 4294967295);
						var $arraydecay416 = (($ph_buf2) & 4294967295);
						var $arraydecay417 = (($ph_buf) & 4294967295);
						var $call418 = _sprintf($231, ((__str20317) & 4294967295), allocate([$arraydecay414, 0, 0, 0, $arraydecay415, 0, 0, 0, $arraydecay416, 0, 0, 0, $arraydecay417, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						__label__ = 116;
						break $land_lhs_true409$$if_else419$154;
					}
				} while (0);
				if (__label__ == 115) {
					var $232 = $ph_out_addr;
					var $arraydecay420 = (($ph_zeros) & 4294967295);
					var $arraydecay421 = (($ph_buf2) & 4294967295);
					var $arraydecay422 = (($ph_buf) & 4294967295);
					var $arraydecay423 = (($ph_append) & 4294967295);
					var $call424 = _sprintf($232, ((__str20317) & 4294967295), allocate([$arraydecay420, 0, 0, 0, $arraydecay421, 0, 0, 0, $arraydecay422, 0, 0, 0, $arraydecay423, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
				}
				var $arraydecay472 = (($ph_buf) & 4294967295);
				var $arraydecay480 = (($string) & 4294967295);
				var $arraydecay482 = (($string) & 4294967295);
				var $arraydecay483 = (($buf1) & 4294967295);
				var $arraydecay488 = (($ph_buf) & 4294967295);
				var $arraydecay489 = (($buf1) & 4294967295);
				var $arraydecay492 = (($ph_buf) & 4294967295);
				var $arraydecay504 = (($buf1) & 4294967295);
				var $arraydecay506 = (($buf1) & 4294967295);
				var $arraydecay463 = (($buf1) & 4294967295);
				var $arraydecay465 = (($buf1) & 4294967295);
				var $arraydecay448 = (($buf1) & 4294967295);
				var $arraydecay450 = (($buf1) & 4294967295);
				var $arraydecay524 = (($buf1) & 4294967295);
				var $arraydecay526 = (($buf1) & 4294967295);
				var $arraydecay529 = (($buf1) & 4294967295);
				var $arraydecay533 = (($buf1) & 4294967295);
				var $arraydecay547 = (($buf1) & 4294967295);
				var $arraydecay549 = (($buf1) & 4294967295);;
				$while_cond426thread_pre_split$160: while (1) {
					var $_pr49 = $decimal_point;
					__lastLabel__ = 117;;
					$while_cond426$162: while (1) {
						var $233 = __lastLabel__ == 117 ? $_pr49 : (0);
						var $tobool427 = ((($233)) | 0) != 0;
						if (!($tobool427)) {
							__label__ = 145;
							break $while_cond426thread_pre_split$160;
						}
						var $234 = $n_digits;
						var $inc429 = ((($234) + 1) & 4294967295);
						$n_digits = $inc429;
						$decimal_count = 0;
						var $235 = $n_digits;
						var $236 = $decimal_count;
						var $add43153 = ((($236) + ($235)) & 4294967295);
						var $237 = $word_addr;
						var $arrayidx43254 = (($237 + $add43153) & 4294967295);
						var $238 = HEAP8[($arrayidx43254)];
						var $conv43355 = (tempInt = (($238)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp3456 = ((($conv43355) - 48) & 4294967295);
						var $isdigit3557 = ((($isdigittmp3456)) >>> 0) < 10;
						var $call43458 = ((($isdigit3557)) & 1);
						var $tobool43559 = ((($call43458)) | 0) != 0;
						if ($tobool43559) {
							__label__ = 120;;
						} else {
							__label__ = 121;;
						}
						$while_body436$$while_end438$165: do {
							if (__label__ == 120) {
								while (1) {
									var $239 = $decimal_count;
									var $inc437 = ((($239) + 1) & 4294967295);
									$decimal_count = $inc437;
									var $240 = $n_digits;
									var $241 = $decimal_count;
									var $add431 = ((($241) + ($240)) & 4294967295);
									var $242 = $word_addr;
									var $arrayidx432 = (($242 + $add431) & 4294967295);
									var $243 = HEAP8[($arrayidx432)];
									var $conv433 = (tempInt = (($243)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $isdigittmp34 = ((($conv433) - 48) & 4294967295);
									var $isdigit35 = ((($isdigittmp34)) >>> 0) < 10;
									var $call434 = ((($isdigit35)) & 1);
									var $tobool435 = ((($call434)) | 0) != 0;
									if ($tobool435) {
										__label__ = 120;
										continue;
									} else {
										__label__ = 121;
										break $while_body436$$while_end438$165;
									}
								}
							}
						} while (0);
						$max_decimal_count = 2;
						var $244 = $tr_addr;
						var $langopts439 = (($244) & 4294967295);
						var $numbers440 = (($langopts439 + 184) & 4294967295);
						var $245 = HEAP32[(($numbers440) >> 2)];
						var $and441 = ($245) & 57344;
						$decimal_mode = $and441;
						if ($and441 == 32768) {
							__label__ = 122;;
						} else if ($and441 == 16384) {
							__label__ = 123;;
						} else if ($and441 == 8192) {
							__label__ = 128;;
						} else if ($and441 == 40960) {
							__label__ = 128;;
						} else if ($and441 == 24576) {
							__label__ = 133;;
						} else {
							__label__ = 136;;
						}
						$while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169: do {
							if (__label__ == 122) {
								$max_decimal_count = 5;
								__label__ = 123;
								break $while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169;
							} else if (__label__ == 128) {
								var $267 = $tr_addr;
								var $268 = $n_digits;
								var $269 = $word_addr;
								var $arrayidx470 = (($269 + $268) & 4294967295);
								var $call471 = _atoi($arrayidx470);
								__ZL10LookupNum3P10TranslatoriPciii($267, $call471, $arraydecay472, 0, 0, 0);
								var $270 = $n_digits;
								var $271 = $word_addr;
								var $arrayidx474 = (($271 + $270) & 4294967295);
								var $272 = HEAP8[($arrayidx474)];
								var $conv475 = (tempInt = (($272)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp476 = ((($conv475)) | 0) == 48;
								if ($cmp476) {
									__label__ = 130;;
								} else {
									__label__ = 129;;
								}
								$if_then479$$lor_lhs_false477$172: do {
									if (__label__ == 129) {
										var $273 = $decimal_mode;
										var $cmp478 = ((($273)) | 0) == 40960;
										if ($cmp478) {
											__label__ = 130;
											break $if_then479$$lor_lhs_false477$172;
										} else {
											__label__ = 132;
											break $if_then479$$lor_lhs_false477$172;
										}
									}
								} while (0);
								if (__label__ == 130) {
									var $274 = $decimal_count;
									var $call481 = _sprintf($arraydecay480, ((__str21318) & 4294967295), allocate([$274, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
									var $275 = $tr_addr;
									var $call484 = __Z6LookupP10TranslatorPKcPc($275, $arraydecay482, $arraydecay483);
									var $cmp485 = ((($call484)) | 0) == 0;
									if ($cmp485) {
										__label__ = 136;
										break $while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169;
									}
									var $call490 = _strcat($arraydecay488, $arraydecay489);;
								}
								var $276 = $ph_out_addr;
								var $call493 = _strcat($276, $arraydecay492);
								var $277 = $decimal_count;
								var $278 = $n_digits;
								var $add494 = ((($278) + ($277)) & 4294967295);
								$n_digits = $add494;
								__label__ = 136;
								break $while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169;
							} else if (__label__ == 133) {
								var $279 = $decimal_count;
								var $cmp496 = ((($279)) | 0) <= 4;
								if (!($cmp496)) {
									__label__ = 136;
									break $while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169;
								}
								var $280 = $n_digits;
								var $281 = $word_addr;
								var $arrayidx498 = (($281 + $280) & 4294967295);
								var $282 = HEAP8[($arrayidx498)];
								var $conv499 = (tempInt = (($282)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp500 = ((($conv499)) | 0) != 48;
								if (!($cmp500)) {
									__label__ = 136;
									break $while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169;
								}
								var $283 = $tr_addr;
								var $284 = $n_digits;
								var $285 = $word_addr;
								var $arrayidx502 = (($285 + $284) & 4294967295);
								var $call503 = _atoi($arrayidx502);
								__ZL10LookupNum3P10TranslatoriPciii($283, $call503, $arraydecay504, 0, 0, 0);
								var $286 = $ph_out_addr;
								var $call507 = _strcat($286, $arraydecay506);
								var $287 = $decimal_count;
								var $288 = $n_digits;
								var $add508 = ((($288) + ($287)) & 4294967295);
								$n_digits = $add508;
								__label__ = 136;
								break $while_cond510$$sw_bb$$while_cond443_preheader$$sw_bb469$$sw_bb495$169;
							}
						} while (0);
						$while_cond510$$while_cond443_preheader$181: do {
							if (__label__ == 123) {
								var $246 = $n_digits;
								var $247 = $word_addr;
								var $arrayidx44450 = (($247 + $246) & 4294967295);
								var $248 = HEAP8[($arrayidx44450)];
								var $conv44551 = (tempInt = (($248)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp44652 = ((($conv44551)) | 0) == 48;
								if ($cmp44652) {
									__label__ = 124;;
								} else {
									__label__ = 125;;
								}
								$while_body447$$while_end453$183: do {
									if (__label__ == 124) {
										while (1) {
											var $249 = $tr_addr;
											var $call449 = __Z6LookupP10TranslatorPKcPc($249, ((__str16313) & 4294967295), $arraydecay448);
											var $250 = $ph_out_addr;
											var $call451 = _strcat($250, $arraydecay450);
											var $251 = $decimal_count;
											var $dec = ((($251) - 1) & 4294967295);
											$decimal_count = $dec;
											var $252 = $n_digits;
											var $inc452 = ((($252) + 1) & 4294967295);
											$n_digits = $inc452;
											var $253 = $n_digits;
											var $254 = $word_addr;
											var $arrayidx444 = (($254 + $253) & 4294967295);
											var $255 = HEAP8[($arrayidx444)];
											var $conv445 = (tempInt = (($255)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp446 = ((($conv445)) | 0) == 48;
											if ($cmp446) {
												__label__ = 124;
												continue;
											} else {
												__label__ = 125;
												break $while_body447$$while_end453$183;
											}
										}
									}
								} while (0);
								var $256 = $decimal_count;
								var $257 = $max_decimal_count;
								var $cmp454 = ((($256)) | 0) <= ((($257)) | 0);
								if (!($cmp454)) {
									__label__ = 136;
									break $while_cond510$$while_cond443_preheader$181;
								}
								var $258 = $n_digits;
								var $259 = $word_addr;
								var $arrayidx456 = (($259 + $258) & 4294967295);
								var $260 = HEAP8[($arrayidx456)];
								var $conv457 = (tempInt = (($260)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $isdigittmp36 = ((($conv457) - 48) & 4294967295);
								var $isdigit37 = ((($isdigittmp36)) >>> 0) < 10;
								var $call458 = ((($isdigit37)) & 1);
								var $tobool459 = ((($call458)) | 0) != 0;
								if (!($tobool459)) {
									__label__ = 136;
									break $while_cond510$$while_cond443_preheader$181;
								}
								var $261 = $tr_addr;
								var $262 = $n_digits;
								var $263 = $word_addr;
								var $arrayidx461 = (($263 + $262) & 4294967295);
								var $call462 = _atoi($arrayidx461);
								__ZL10LookupNum3P10TranslatoriPciii($261, $call462, $arraydecay463, 0, 0, 0);
								var $264 = $ph_out_addr;
								var $call466 = _strcat($264, $arraydecay465);
								var $265 = $decimal_count;
								var $266 = $n_digits;
								var $add467 = ((($266) + ($265)) & 4294967295);
								$n_digits = $add467;;
							}
						} while (0);
						while (1) {
							var $289 = $n_digits;
							var $290 = $word_addr;
							var $arrayidx511 = (($290 + $289) & 4294967295);
							var $291 = HEAPU8[($arrayidx511)];
							$c = $291;
							var $conv512 = ((($291)) & 255);
							var $isdigittmp38 = ((($conv512) - 48) & 4294967295);
							var $isdigit39 = ((($isdigittmp38)) >>> 0) < 10;
							var $call513 = ((($isdigit39)) & 1);
							var $tobool514 = ((($call513)) | 0) != 0;
							if (!($tobool514)) {
								__label__ = 139;
								break;
							}
							var $292 = $ph_out_addr;
							var $call516 = _strlen($292);
							var $cmp517 = ((($call516)) >>> 0) < 150;
							if (!($cmp517)) {
								__label__ = 139;
								break;
							}
							var $293 = $n_digits;
							var $inc520 = ((($293) + 1) & 4294967295);
							$n_digits = $inc520;
							var $294 = $word_addr;
							var $arrayidx521 = (($294 + $293) & 4294967295);
							var $295 = HEAP8[($arrayidx521)];
							var $conv522 = (tempInt = (($295)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $sub523 = ((($conv522) - 48) & 4294967295);
							$value = $sub523;
							var $296 = $tr_addr;
							var $297 = $value;
							var $call525 = __ZL10LookupNum2P10TranslatoriiPc($296, $297, 2, $arraydecay524);
							var $298 = $ph_out_addr;
							var $call527 = _strcat($298, $arraydecay526);
							__label__ = 136;
							continue;
						}
						var $299 = $tr_addr;
						var $call530 = __Z6LookupP10TranslatorPKcPc($299, ((__str22319) & 4294967295), $arraydecay529);
						var $tobool531 = ((($call530)) | 0) != 0;
						if ($tobool531) {
							__label__ = 140;;
						} else {
							__label__ = 141;;
						}
						if (__label__ == 140) {
							var $300 = $ph_out_addr;
							var $call534 = _strcat($300, $arraydecay533);;
						}
						var $301 = $c;
						var $conv536 = ((($301)) & 255);
						var $302 = $tr_addr;
						var $langopts537 = (($302) & 4294967295);
						var $decimal_sep538 = (($langopts537 + 208) & 4294967295);
						var $303 = HEAP32[(($decimal_sep538) >> 2)];
						var $cmp539 = ((($conv536)) | 0) == ((($303)) | 0);
						if ($cmp539) {
							__label__ = 142;;
						} else {
							__label__ = 144;;
						}
						if (__label__ == 142) {
							var $304 = $n_digits;
							var $add541 = ((($304) + 1) & 4294967295);
							var $305 = $word_addr;
							var $arrayidx542 = (($305 + $add541) & 4294967295);
							var $306 = HEAP8[($arrayidx542)];
							var $conv543 = (tempInt = (($306)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $isdigittmp40 = ((($conv543) - 48) & 4294967295);
							var $isdigit41 = ((($isdigittmp40)) >>> 0) < 10;
							var $call544 = ((($isdigit41)) & 1);
							var $tobool545 = ((($call544)) | 0) != 0;
							if ($tobool545) {
								__label__ = 143;
								break $while_cond426$162;
							}
						}
						$decimal_point = 0;
						__lastLabel__ = 144;
						__label__ = 118;
						continue $while_cond426$162;
					}
					var $307 = $tr_addr;
					var $call548 = __Z6LookupP10TranslatorPKcPc($307, ((__str17314) & 4294967295), $arraydecay547);
					var $308 = $ph_out_addr;
					var $call550 = _strcat($308, $arraydecay549);
					__label__ = 117;
					continue $while_cond426thread_pre_split$160;
				}
				var $309 = $ph_out_addr;
				var $arrayidx554 = (($309) & 4294967295);
				var $310 = HEAP8[($arrayidx554)];
				var $conv555 = (tempInt = (($310)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp556 = ((($conv555)) | 0) != 0;
				if ($cmp556) {
					__label__ = 146;;
				} else {
					__label__ = 154;;
				}
				$land_lhs_true557$$if_end588$202: do {
					if (__label__ == 146) {
						var $311 = $ph_out_addr;
						var $arrayidx558 = (($311) & 4294967295);
						var $312 = HEAP8[($arrayidx558)];
						var $conv559 = (tempInt = (($312)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp560 = ((($conv559)) | 0) != 21;
						if (!($cmp560)) {
							__label__ = 154;
							break $land_lhs_true557$$if_end588$202;
						}
						var $313 = $n_digits;
						var $add563 = ((($313) + 1) & 4294967295);
						var $314 = $word_addr;
						var $arrayidx564 = (($314 + $add563) & 4294967295);
						$p562 = $arrayidx564;
						var $315 = $p562;
						var $call565 = __Z7utf8_inPiPKc($next_char, $315);
						var $316 = $p562;
						var $add_ptr566 = (($316 + $call565) & 4294967295);
						$p562 = $add_ptr566;
						var $317 = $tr_addr;
						var $langopts567 = (($317) & 4294967295);
						var $numbers568 = (($langopts567 + 184) & 4294967295);
						var $318 = HEAP32[(($numbers568) >> 2)];
						var $and569 = ($318) & 131072;
						var $tobool570 = ((($and569)) | 0) != 0;
						if ($tobool570) {
							__label__ = 148;;
						} else {
							__label__ = 150;;
						}
						$land_lhs_true571$$if_end575$205: do {
							if (__label__ == 148) {
								var $319 = HEAP32[(($next_char) >> 2)];
								var $cmp572 = ((($319)) | 0) == 32;
								if (!($cmp572)) {
									__label__ = 150;
									break $land_lhs_true571$$if_end575$205;
								}
								var $320 = $p562;
								var $call574 = __Z7utf8_inPiPKc($next_char, $320);;
							}
						} while (0);
						var $321 = HEAP32[(($next_char) >> 2)];
						var $call576 = _iswalpha($321);
						var $tobool577 = ((($call576)) | 0) != 0;
						if ($tobool577) {
							__label__ = 154;
							break $land_lhs_true557$$if_end588$202;
						}
						var $322 = $thousandplex;
						var $323 = $wtab_addr;
						var $arrayidx579 = (($323 + 12 * $322) & 4294967295);
						var $flags580 = (($arrayidx579) & 4294967295);
						var $324 = HEAP32[(($flags580) >> 2)];
						var $and581 = ($324) & 16384;
						var $tobool582 = ((($and581)) | 0) != 0;
						if ($tobool582) {
							__label__ = 152;;
						} else {
							__label__ = 153;;
						}
						if (__label__ == 152) {
							var $325 = $thousands_exact;
							var $cmp584 = ((($325)) | 0) != 0;
							if ($cmp584) {
								__label__ = 154;
								break $land_lhs_true557$$if_end588$202;
							}
						}
						var $326 = $ph_out_addr;
						var $strlen = _strlen($326);
						var $endptr = (($326 + $strlen) & 4294967295);
						var $src$, $dest$, $stop$, $stop4$, $fast$;
						$src$ = ((__ZZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABiE9str_pause) & 4294967295);
						$dest$ = $endptr;
						$stop$ = $src$ + 2;
						if (($dest$ % 4) == ($src$ % 4) && 2 > 8) {
							while ($src$ % 4 !== 0 && $src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							}
							$src$ >>= 2;
							$dest$ >>= 2;
							$stop4$ = $stop$ >> 2;
							while ($src$ < $stop4$) {;;;
								HEAP32[$dest$++] = HEAP32[$src$++];
							}
							$src$ <<= 2;
							$dest$ <<= 2;
						}
						while ($src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						};;
					}
				} while (0);
				var $327 = $flags_addr;
				var $328 = HEAP32[(($327) >> 2)];
				var $or589 = ($328) | -2147483648;
				HEAP32[(($327) >> 2)] = $or589;
				var $329 = HEAP32[((__ZL23speak_missing_thousands) >> 2)];
				var $dec590 = ((($329) - 1) & 4294967295);
				HEAP32[((__ZL23speak_missing_thousands) >> 2)] = $dec590;
				var $330 = $skipwords;
				var $tobool591 = ((($330)) | 0) != 0;
				if ($tobool591) {
					__label__ = 155;;
				} else {
					__label__ = 156;;
				}
				if (__label__ == 155) {
					var $331 = $skipwords;
					HEAP32[((_dictionary_skipwords) >> 2)] = $331;;
				}
				$retval = 1;;
			}
			var $332 = $retval;
			STACKTOP = __stackBase__;
			return $332;
			return null;
		}

		function __ZL15LookupThousandsP10TranslatoriiiPc($tr, $value, $thousandplex, $thousands_exact, $ph_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 104;
			_memset(__stackBase__, 0, 104);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $value_addr;
			var $thousandplex_addr;
			var $thousands_exact_addr;
			var $ph_out_addr;
			var $found;
			var $found_value;
			var $string = __stackBase__;
			var $ph_of = __stackBase__ + 12;
			var $ph_thousands = __stackBase__ + 24;
			var $ph_buf = __stackBase__ + 64;
			$tr_addr = $tr;
			$value_addr = $value;
			$thousandplex_addr = $thousandplex;
			$thousands_exact_addr = $thousands_exact;
			$ph_out_addr = $ph_out;
			$found_value = 0;
			var $arrayidx = (($ph_of) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $0 = $value_addr;
			var $cmp = ((($0)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 12;;
			}
			$if_then$$if_end36thread_pre_split$2: do {
				if (__label__ == 1) {
					var $1 = $thousands_exact_addr;
					var $and = ($1) & 1;
					var $tobool = ((($and)) | 0) != 0;
					if ($tobool) {
						__label__ = 2;;
					} else {
						__label__ = 9;;
					}
					$if_then1$$if_end27thread_pre_split$4: do {
						if (__label__ == 2) {
							var $2 = $thousands_exact_addr;
							var $and2 = ($2) & 2;
							var $tobool3 = ((($and2)) | 0) != 0;
							if ($tobool3) {
								__label__ = 3;;
							} else {
								__label__ = 4;;
							}
							if (__label__ == 3) {
								var $arraydecay = (($string) & 4294967295);
								var $3 = $value_addr;
								var $4 = $thousandplex_addr;
								var $call = _sprintf($arraydecay, ((__str42339) & 4294967295), allocate([$3, 0, 0, 0, $4, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
								var $5 = $tr_addr;
								var $arraydecay5 = (($string) & 4294967295);
								var $arraydecay6 = (($ph_thousands) & 4294967295);
								var $call7 = __Z6LookupP10TranslatorPKcPc($5, $arraydecay5, $arraydecay6);
								$found_value = $call7;;
							}
							var $6 = $found_value;
							var $tobool8 = ((($6)) | 0) != 0;
							var $lnot = ($tobool8) ^ 1;
							var $conv = ((($lnot)) & 1);
							var $7 = HEAP32[((__ZL14number_control) >> 2)];
							var $and9 = ($7) & 1;
							var $and10 = ($and9) & ($conv);
							var $tobool11 = ((($and10)) | 0) != 0;
							if ($tobool11) {
								__label__ = 5;;
							} else {
								__label__ = 6;;
							}
							if (__label__ == 5) {
								var $arraydecay13 = (($string) & 4294967295);
								var $8 = $value_addr;
								var $9 = $thousandplex_addr;
								var $call14 = _sprintf($arraydecay13, ((__str43340) & 4294967295), allocate([$8, 0, 0, 0, $9, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
								var $10 = $tr_addr;
								var $arraydecay15 = (($string) & 4294967295);
								var $arraydecay16 = (($ph_thousands) & 4294967295);
								var $call17 = __Z6LookupP10TranslatorPKcPc($10, $arraydecay15, $arraydecay16);
								$found_value = $call17;
								__lastLabel__ = 5;;
							} else if (__label__ == 6) {
								var $_pr = $found_value;
								__lastLabel__ = 6;;
							}
							var $11 = __lastLabel__ == 6 ? $_pr : ($call17);
							var $tobool19 = ((($11)) | 0) != 0;
							if ($tobool19) {
								__label__ = 9;
								break $if_then1$$if_end27thread_pre_split$4;
							}
							var $arraydecay21 = (($string) & 4294967295);
							var $12 = $value_addr;
							var $13 = $thousandplex_addr;
							var $call22 = _sprintf($arraydecay21, ((__str44341) & 4294967295), allocate([$12, 0, 0, 0, $13, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
							var $14 = $tr_addr;
							var $arraydecay23 = (($string) & 4294967295);
							var $arraydecay24 = (($ph_thousands) & 4294967295);
							var $call25 = __Z6LookupP10TranslatorPKcPc($14, $arraydecay23, $arraydecay24);
							$found_value = $call25;
							__lastLabel__ = 8;
							__label__ = 10;
							break $if_then1$$if_end27thread_pre_split$4;
						}
					} while (0);
					if (__label__ == 9) {
						var $_pr1 = $found_value;
						__lastLabel__ = 9;;
					}
					var $15 = __lastLabel__ == 9 ? $_pr1 : ($call25);
					var $cmp28 = ((($15)) | 0) == 0;
					if (!($cmp28)) {
						__label__ = 12;
						break $if_then$$if_end36thread_pre_split$2;
					}
					var $arraydecay30 = (($string) & 4294967295);
					var $16 = $value_addr;
					var $17 = $thousandplex_addr;
					var $call31 = _sprintf($arraydecay30, ((__str45342) & 4294967295), allocate([$16, 0, 0, 0, $17, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
					var $18 = $tr_addr;
					var $arraydecay32 = (($string) & 4294967295);
					var $arraydecay33 = (($ph_thousands) & 4294967295);
					var $call34 = __Z6LookupP10TranslatorPKcPc($18, $arraydecay32, $arraydecay33);
					$found_value = $call34;
					__lastLabel__ = 11;
					__label__ = 13;
					break $if_then$$if_end36thread_pre_split$2;
				}
			} while (0);
			if (__label__ == 12) {
				var $_pr2 = $found_value;
				__lastLabel__ = 12;;
			}
			var $19 = __lastLabel__ == 12 ? $_pr2 : ($call34);
			var $cmp37 = ((($19)) | 0) == 0;
			if ($cmp37) {
				__label__ = 14;;
			} else {
				__label__ = 36;;
			}
			$if_then38$$if_end118$21: do {
				if (__label__ == 14) {
					var $20 = $value_addr;
					var $rem = ((($20)) | 0) % 100;
					var $cmp39 = ((($rem)) | 0) >= 20;
					if ($cmp39) {
						__label__ = 15;;
					} else {
						__label__ = 16;;
					}
					if (__label__ == 15) {
						var $21 = $tr_addr;
						var $arraydecay41 = (($ph_of) & 4294967295);
						var $call42 = __Z6LookupP10TranslatorPKcPc($21, ((__str46343) & 4294967295), $arraydecay41);;
					}
					$found = 0;
					var $22 = $thousands_exact_addr;
					var $and44 = ($22) & 1;
					var $tobool45 = ((($and44)) | 0) != 0;
					if ($tobool45) {
						__label__ = 17;;
					} else {
						__label__ = 28;;
					}
					if (__label__ == 17) {
						var $23 = $thousands_exact_addr;
						var $and47 = ($23) & 2;
						var $tobool48 = ((($and47)) | 0) != 0;
						if ($tobool48) {
							__label__ = 18;;
						} else {
							__label__ = 19;;
						}
						if (__label__ == 18) {
							var $arraydecay50 = (($string) & 4294967295);
							var $24 = $value_addr;
							var $call51 = __ZL9M_Varianti($24);
							var $25 = $thousandplex_addr;
							var $call52 = _sprintf($arraydecay50, ((__str47344) & 4294967295), allocate([$call51, 0, 0, 0, $25, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
							var $26 = $tr_addr;
							var $arraydecay53 = (($string) & 4294967295);
							var $arraydecay54 = (($ph_thousands) & 4294967295);
							var $call55 = __Z6LookupP10TranslatorPKcPc($26, $arraydecay53, $arraydecay54);
							$found = $call55;
							__lastLabel__ = 18;;
						} else if (__label__ == 19) {
							var $_pr3 = $found;
							__lastLabel__ = 19;;
						}
						var $27 = __lastLabel__ == 19 ? $_pr3 : ($call55);
						var $tobool57 = ((($27)) | 0) != 0;
						if ($tobool57) {
							__label__ = 23;;
						} else {
							__label__ = 21;;
						}
						$if_end67thread_pre_split$$land_lhs_true$32: do {
							if (__label__ == 21) {
								var $28 = HEAP32[((__ZL14number_control) >> 2)];
								var $and58 = ($28) & 1;
								var $tobool59 = ((($and58)) | 0) != 0;
								if (!($tobool59)) {
									__label__ = 23;
									break $if_end67thread_pre_split$$land_lhs_true$32;
								}
								var $arraydecay61 = (($string) & 4294967295);
								var $29 = $value_addr;
								var $call62 = __ZL9M_Varianti($29);
								var $30 = $thousandplex_addr;
								var $call63 = _sprintf($arraydecay61, ((__str48345) & 4294967295), allocate([$call62, 0, 0, 0, $30, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
								var $31 = $tr_addr;
								var $arraydecay64 = (($string) & 4294967295);
								var $arraydecay65 = (($ph_thousands) & 4294967295);
								var $call66 = __Z6LookupP10TranslatorPKcPc($31, $arraydecay64, $arraydecay65);
								$found = $call66;
								__lastLabel__ = 22;
								__label__ = 24;
								break $if_end67thread_pre_split$$land_lhs_true$32;
							}
						} while (0);
						if (__label__ == 23) {
							var $_pr4 = $found;
							__lastLabel__ = 23;;
						}
						var $32 = __lastLabel__ == 23 ? $_pr4 : ($call66);
						var $tobool68 = ((($32)) | 0) != 0;
						if ($tobool68) {
							__label__ = 26;;
						} else {
							__label__ = 25;;
						}
						if (__label__ == 26) {
							var $_pr5 = $found;
							__lastLabel__ = 26;;
						} else if (__label__ == 25) {
							var $arraydecay70 = (($string) & 4294967295);
							var $33 = $value_addr;
							var $call71 = __ZL9M_Varianti($33);
							var $34 = $thousandplex_addr;
							var $call72 = _sprintf($arraydecay70, ((__str49346) & 4294967295), allocate([$call71, 0, 0, 0, $34, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
							var $35 = $tr_addr;
							var $arraydecay73 = (($string) & 4294967295);
							var $arraydecay74 = (($ph_thousands) & 4294967295);
							var $call75 = __Z6LookupP10TranslatorPKcPc($35, $arraydecay73, $arraydecay74);
							$found = $call75;
							__lastLabel__ = 25;;
						}
						var $36 = __lastLabel__ == 26 ? $_pr5 : ($call75);
						var $cmp78 = ((($36)) | 0) == 0;
						if (!($cmp78)) {
							__label__ = 36;
							break $if_then38$$if_end118$21;
						}
					}
					var $arraydecay80 = (($string) & 4294967295);
					var $37 = $value_addr;
					var $call81 = __ZL9M_Varianti($37);
					var $38 = $thousandplex_addr;
					var $call82 = _sprintf($arraydecay80, ((__str50347) & 4294967295), allocate([$call81, 0, 0, 0, $38, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
					var $39 = $tr_addr;
					var $arraydecay83 = (($string) & 4294967295);
					var $arraydecay84 = (($ph_thousands) & 4294967295);
					var $call85 = __Z6LookupP10TranslatorPKcPc($39, $arraydecay83, $arraydecay84);
					var $cmp86 = ((($call85)) | 0) == 0;
					if (!($cmp86)) {
						__label__ = 36;
						break $if_then38$$if_end118$21;
					}
					var $40 = $thousandplex_addr;
					var $cmp88 = ((($40)) | 0) > 3;
					if ($cmp88) {
						__label__ = 30;;
					} else {
						__label__ = 32;;
					}
					$if_then89$$if_end100$44: do {
						if (__label__ == 30) {
							var $arraydecay90 = (($string) & 4294967295);
							var $41 = $thousandplex_addr;
							var $sub = ((($41) - 1) & 4294967295);
							var $call91 = _sprintf($arraydecay90, ((__str18315) & 4294967295), allocate([$sub, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $42 = $tr_addr;
							var $arraydecay92 = (($string) & 4294967295);
							var $arraydecay93 = (($ph_buf) & 4294967295);
							var $call94 = __Z6LookupP10TranslatorPKcPc($42, $arraydecay92, $arraydecay93);
							var $cmp95 = ((($call94)) | 0) == 0;
							if (!($cmp95)) {
								__label__ = 32;
								break $if_then89$$if_end100$44;
							}
							var $43 = $tr_addr;
							var $arraydecay97 = (($ph_thousands) & 4294967295);
							var $call98 = __Z6LookupP10TranslatorPKcPc($43, ((__str51348) & 4294967295), $arraydecay97);
							HEAP32[((__ZL23speak_missing_thousands) >> 2)] = 3;;
						}
					} while (0);
					var $arrayidx101 = (($ph_thousands) & 4294967295);
					var $44 = HEAP8[($arrayidx101)];
					var $conv102 = (tempInt = (($44)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp103 = ((($conv102)) | 0) == 0;
					if (!($cmp103)) {
						__label__ = 36;
						break $if_then38$$if_end118$21;
					}
					var $arraydecay105 = (($string) & 4294967295);
					var $45 = $value_addr;
					var $call106 = _sprintf($arraydecay105, ((__str52349) & 4294967295), allocate([$45, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
					var $46 = $tr_addr;
					var $arraydecay107 = (($string) & 4294967295);
					var $arraydecay108 = (($ph_thousands) & 4294967295);
					var $call109 = __Z6LookupP10TranslatorPKcPc($46, $arraydecay107, $arraydecay108);
					$found_value = $call109;
					var $cmp110 = ((($call109)) | 0) == 0;
					if ($cmp110) {
						__label__ = 34;;
					} else {
						__label__ = 35;;
					}
					if (__label__ == 34) {
						var $47 = $tr_addr;
						var $arraydecay112 = (($ph_thousands) & 4294967295);
						var $call113 = __Z6LookupP10TranslatorPKcPc($47, ((__str53350) & 4294967295), $arraydecay112);;
					}
					HEAP32[((__ZL23speak_missing_thousands) >> 2)] = 2;;
				}
			} while (0);
			var $48 = $ph_out_addr;
			var $arraydecay119 = (($ph_of) & 4294967295);
			var $arraydecay120 = (($ph_thousands) & 4294967295);
			var $call121 = _sprintf($48, ((__str47699) & 4294967295), allocate([$arraydecay119, 0, 0, 0, $arraydecay120, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $49 = $value_addr;
			var $cmp122 = ((($49)) | 0) == 1;
			if ($cmp122) {
				__label__ = 37;;
			} else {
				__label__ = 40;;
			}
			$land_lhs_true123$$if_end129$53: do {
				if (__label__ == 37) {
					var $50 = $thousandplex_addr;
					var $cmp124 = ((($50)) | 0) == 1;
					if (!($cmp124)) {
						__label__ = 40;
						break $land_lhs_true123$$if_end129$53;
					}
					var $51 = $tr_addr;
					var $langopts = (($51) & 4294967295);
					var $numbers = (($langopts + 184) & 4294967295);
					var $52 = HEAP32[(($numbers) >> 2)];
					var $and126 = ($52) & 2097152;
					var $tobool127 = ((($and126)) | 0) != 0;
					if (!($tobool127)) {
						__label__ = 40;
						break $land_lhs_true123$$if_end129$53;
					}
					$retval = 1;
					__label__ = 41;
					break $land_lhs_true123$$if_end129$53;
				}
			} while (0);
			if (__label__ == 40) {
				var $53 = $found_value;
				$retval = $53;;
			}
			var $54 = $retval;
			STACKTOP = __stackBase__;
			return $54;
			return null;
		}

		function __ZL10LookupNum3P10TranslatoriPciii($tr, $value, $ph_out, $suppress_null, $thousandplex, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 380;
			_memset(__stackBase__, 0, 380);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $value_addr;
			var $ph_out_addr;
			var $suppress_null_addr;
			var $thousandplex_addr;
			var $control_addr;
			var $found;
			var $hundreds;
			var $tensunits;
			var $x;
			var $ix;
			var $exact;
			var $ordinal;
			var $say_zero_hundred;
			var $string = __stackBase__;
			var $buf1 = __stackBase__ + 12;
			var $buf2 = __stackBase__ + 112;
			var $ph_100 = __stackBase__ + 212;
			var $ph_10T = __stackBase__ + 232;
			var $ph_digits = __stackBase__ + 252;
			var $ph_thousands = __stackBase__ + 304;
			var $ph_hundred_and = __stackBase__ + 356;
			var $ph_thousand_and = __stackBase__ + 368;
			$tr_addr = $tr;
			$value_addr = $value;
			$ph_out_addr = $ph_out;
			$suppress_null_addr = $suppress_null;
			$thousandplex_addr = $thousandplex;
			$control_addr = $control;
			$say_zero_hundred = 0;
			var $0 = $control_addr;
			var $and = ($0) & 34;
			$ordinal = $and;
			var $1 = $value_addr;
			var $div = ((((($1)) | 0) / 100) | 0);
			$hundreds = $div;
			var $2 = $value_addr;
			var $rem = ((($2)) | 0) % 100;
			$tensunits = $rem;
			var $arrayidx = (($buf1) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arrayidx1 = (($ph_thousands) & 4294967295);
			HEAP8[($arrayidx1)] = 0;
			var $arrayidx2 = (($ph_thousand_and) & 4294967295);
			HEAP8[($arrayidx2)] = 0;
			var $3 = $tr_addr;
			var $langopts = (($3) & 4294967295);
			var $numbers = (($langopts + 184) & 4294967295);
			var $4 = HEAP32[(($numbers) >> 2)];
			var $and3 = ($4) & 4194304;
			var $tobool = ((($and3)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$land_lhs_true$$if_endthread_pre_split$2: do {
				if (__label__ == 1) {
					var $5 = $control_addr;
					var $and4 = ($5) & 1;
					var $tobool5 = ((($and4)) | 0) != 0;
					if ($tobool5) {
						__label__ = 3;;
					} else {
						__label__ = 2;;
					}
					if (__label__ == 2) {
						var $6 = $hundreds;
						var $cmp = ((($6)) | 0) >= 10;
						if ($cmp) {
							__lastLabel__ = 2;;
						} else {
							__lastLabel__ = 2;
							__label__ = 5;
							break $land_lhs_true$$if_endthread_pre_split$2;
						}
					}
					$say_zero_hundred = 1;
					__label__ = 4;
					break $land_lhs_true$$if_endthread_pre_split$2;
				}
			} while (0);
			if (__label__ == 4) {
				var $_pr = $hundreds;
				__lastLabel__ = 4;;
			}
			var $7 = __lastLabel__ == 4 ? $_pr : ($6);
			var $cmp6 = ((($7)) | 0) > 0;
			if ($cmp6) {
				__label__ = 7;;
			} else {
				__label__ = 6;;
			}
			$if_then9$$lor_lhs_false7$10: do {
				if (__label__ == 6) {
					var $8 = $say_zero_hundred;
					var $tobool8 = ((($8)) | 0) != 0;
					if ($tobool8) {
						__label__ = 7;
						break $if_then9$$lor_lhs_false7$10;
					} else {
						__label__ = 61;
						break $if_then9$$lor_lhs_false7$10;
					}
				}
			} while (0);
			if (__label__ == 7) {
				$found = 0;
				var $9 = $ordinal;
				var $tobool10 = ((($9)) | 0) != 0;
				if ($tobool10) {
					__label__ = 8;;
				} else {
					__label__ = 12;;
				}
				$land_lhs_true11$$if_then16$14: do {
					if (__label__ == 8) {
						var $10 = $tensunits;
						var $cmp12 = ((($10)) | 0) == 0;
						if ($cmp12) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							var $11 = $tr_addr;
							var $arraydecay = (($ph_100) & 4294967295);
							var $call = __Z6LookupP10TranslatorPKcPc($11, ((__str35332) & 4294967295), $arraydecay);
							$found = $call;
							__lastLabel__ = 9;;
						} else if (__label__ == 10) {
							var $_pr1 = $found;
							__lastLabel__ = 10;;
						}
						var $12 = __lastLabel__ == 10 ? $_pr1 : ($call);
						var $cmp15 = ((($12)) | 0) == 0;
						if ($cmp15) {
							__label__ = 12;
							break $land_lhs_true11$$if_then16$14;
						} else {
							__label__ = 17;
							break $land_lhs_true11$$if_then16$14;
						}
					}
				} while (0);
				$if_then16$$if_end27$20: do {
					if (__label__ == 12) {
						var $13 = $tensunits;
						var $cmp17 = ((($13)) | 0) == 0;
						if ($cmp17) {
							__label__ = 13;;
						} else {
							__label__ = 14;;
						}
						if (__label__ == 13) {
							var $14 = $tr_addr;
							var $arraydecay19 = (($ph_100) & 4294967295);
							var $call20 = __Z6LookupP10TranslatorPKcPc($14, ((__str36333) & 4294967295), $arraydecay19);
							$found = $call20;
							__lastLabel__ = 13;;
						} else if (__label__ == 14) {
							var $_pr3 = $found;
							__lastLabel__ = 14;;
						}
						var $15 = __lastLabel__ == 14 ? $_pr3 : ($call20);
						var $tobool22 = ((($15)) | 0) != 0;
						if ($tobool22) {
							__label__ = 17;
							break $if_then16$$if_end27$20;
						}
						var $16 = $tr_addr;
						var $arraydecay24 = (($ph_100) & 4294967295);
						var $call25 = __Z6LookupP10TranslatorPKcPc($16, ((__str37334) & 4294967295), $arraydecay24);;
					}
				} while (0);
				var $17 = $tr_addr;
				var $langopts28 = (($17) & 4294967295);
				var $numbers29 = (($langopts28 + 184) & 4294967295);
				var $18 = HEAP32[(($numbers29) >> 2)];
				var $and30 = ($18) & 2048;
				var $cmp31 = ((($and30)) | 0) != 0;
				var $19 = $hundreds;
				if ($cmp31) {
					__label__ = 18;;
				} else {
					__label__ = 19;;
				}
				$land_lhs_true32$$if_else$28: do {
					if (__label__ == 18) {
						var $cmp33 = ((($19)) | 0) != 19;
						var $20 = $hundreds;
						var $cmp35 = ((($20)) | 0) >= 10;
						var $or_cond = ($cmp33) & ($cmp35);
						if ($or_cond) {
							__label__ = 20;
							break $land_lhs_true32$$if_else$28;
						} else {
							__label__ = 33;
							break $land_lhs_true32$$if_else$28;
						}
					} else if (__label__ == 19) {
						var $cmp35_old = ((($19)) | 0) >= 10;
						if ($cmp35_old) {
							__label__ = 20;
							break $land_lhs_true32$$if_else$28;
						} else {
							__label__ = 33;
							break $land_lhs_true32$$if_else$28;
						}
					}
				} while (0);
				if (__label__ == 20) {
					var $arrayidx37 = (($ph_digits) & 4294967295);
					HEAP8[($arrayidx37)] = 0;
					$exact = 0;
					var $21 = $value_addr;
					var $rem38 = ((($21)) | 0) % 1000;
					var $cmp39 = ((($rem38)) | 0) == 0;
					if ($cmp39) {
						__label__ = 21;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 21) {
						$exact = 1;;
					}
					var $22 = $tr_addr;
					var $23 = $hundreds;
					var $div42 = ((((($23)) | 0) / 10) | 0);
					var $24 = $thousandplex_addr;
					var $add = ((($24) + 1) & 4294967295);
					var $25 = $exact;
					var $26 = $ordinal;
					var $or = ($26) | ($25);
					var $arraydecay43 = (($ph_10T) & 4294967295);
					var $call44 = __ZL15LookupThousandsP10TranslatoriiiPc($22, $div42, $add, $or, $arraydecay43);
					var $cmp45 = ((($call44)) | 0) == 0;
					if ($cmp45) {
						__label__ = 23;;
					} else {
						__label__ = 26;;
					}
					if (__label__ == 23) {
						$x = 0;
						var $27 = $tr_addr;
						var $langopts47 = (($27) & 4294967295);
						var $numbers2 = (($langopts47 + 188) & 4294967295);
						var $28 = HEAP32[(($numbers2) >> 2)];
						var $29 = $thousandplex_addr;
						var $add48 = ((($29) + 1) & 4294967295);
						var $shl = 1 << ($add48);
						var $and49 = ($shl) & ($28);
						var $tobool50 = ((($and49)) | 0) != 0;
						if ($tobool50) {
							__label__ = 24;;
						} else {
							__label__ = 25;;
						}
						if (__label__ == 24) {
							$x = 8;;
						}
						var $30 = $tr_addr;
						var $31 = $hundreds;
						var $div53 = ((((($31)) | 0) / 10) | 0);
						var $32 = $x;
						var $arraydecay54 = (($ph_digits) & 4294967295);
						var $call55 = __ZL10LookupNum2P10TranslatoriiPc($30, $div53, $32, $arraydecay54);;
					}
					var $33 = $tr_addr;
					var $langopts57 = (($33) & 4294967295);
					var $numbers258 = (($langopts57 + 188) & 4294967295);
					var $34 = HEAP32[(($numbers258) >> 2)];
					var $and59 = ($34) & 512;
					var $tobool60 = ((($and59)) | 0) != 0;
					var $arraydecay62 = (($ph_thousands) & 4294967295);
					if ($tobool60) {
						__label__ = 27;;
					} else {
						__label__ = 28;;
					}
					if (__label__ == 27) {
						var $arraydecay63 = (($ph_10T) & 4294967295);
						var $arraydecay64 = (($ph_digits) & 4294967295);
						var $call65 = _sprintf($arraydecay62, ((__str47699) & 4294967295), allocate([$arraydecay63, 0, 0, 0, $arraydecay64, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
					} else if (__label__ == 28) {
						var $arraydecay68 = (($ph_digits) & 4294967295);
						var $arraydecay69 = (($ph_10T) & 4294967295);
						var $call70 = _sprintf($arraydecay62, ((__str47699) & 4294967295), allocate([$arraydecay68, 0, 0, 0, $arraydecay69, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
					}
					var $35 = $hundreds;
					var $rem72 = ((($35)) | 0) % 10;
					$hundreds = $rem72;
					var $cmp73 = ((($rem72)) | 0) == 0;
					if ($cmp73) {
						__label__ = 30;;
					} else {
						__label__ = 32;;
					}
					$land_lhs_true74$$if_end78$46: do {
						if (__label__ == 30) {
							var $36 = $say_zero_hundred;
							var $cmp75 = ((($36)) | 0) == 0;
							if (!($cmp75)) {
								__label__ = 32;
								break $land_lhs_true74$$if_end78$46;
							}
							var $arrayidx77 = (($ph_100) & 4294967295);
							HEAP8[($arrayidx77)] = 0;;
						}
					} while (0);
					$suppress_null_addr = 1;;
				}
				var $arrayidx81 = (($ph_digits) & 4294967295);
				HEAP8[($arrayidx81)] = 0;
				var $37 = $hundreds;
				var $cmp82 = ((($37)) | 0) > 0;
				if ($cmp82) {
					__label__ = 35;;
				} else {
					__label__ = 34;;
				}
				$if_then85$$lor_lhs_false83$51: do {
					if (__label__ == 34) {
						var $38 = $say_zero_hundred;
						var $tobool84 = ((($38)) | 0) != 0;
						if ($tobool84) {
							__label__ = 35;
							break $if_then85$$lor_lhs_false83$51;
						} else {
							__label__ = 60;
							break $if_then85$$lor_lhs_false83$51;
						}
					}
				} while (0);
				$if_then85$$if_end166$53: do {
					if (__label__ == 35) {
						var $39 = $tr_addr;
						var $langopts86 = (($39) & 4294967295);
						var $numbers87 = (($langopts86 + 184) & 4294967295);
						var $40 = HEAP32[(($numbers87) >> 2)];
						var $and88 = ($40) & 262144;
						var $tobool89 = ((($and88)) | 0) != 0;
						if ($tobool89) {
							__label__ = 36;;
						} else {
							__label__ = 39;;
						}
						$land_lhs_true90$$if_end99$55: do {
							if (__label__ == 36) {
								var $41 = $control_addr;
								var $and91 = ($41) & 1;
								var $tobool92 = ((($and91)) | 0) != 0;
								if ($tobool92) {
									__label__ = 38;;
								} else {
									__label__ = 37;;
								}
								if (__label__ == 37) {
									var $arrayidx94 = (($ph_thousands) & 4294967295);
									var $42 = HEAP8[($arrayidx94)];
									var $conv = (tempInt = (($42)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp95 = ((($conv)) | 0) != 0;
									if (!($cmp95)) {
										__label__ = 39;
										break $land_lhs_true90$$if_end99$55;
									}
								}
								var $43 = $tr_addr;
								var $arraydecay97 = (($ph_thousand_and) & 4294967295);
								var $call98 = __Z6LookupP10TranslatorPKcPc($43, ((__str33330) & 4294967295), $arraydecay97);;
							}
						} while (0);
						$suppress_null_addr = 1;
						$found = 0;
						var $44 = $ordinal;
						var $tobool100 = ((($44)) | 0) != 0;
						if ($tobool100) {
							__label__ = 40;;
						} else {
							__label__ = 45;;
						}
						$land_lhs_true101$$if_end124$61: do {
							if (__label__ == 40) {
								var $45 = $tensunits;
								var $cmp102 = ((($45)) | 0) == 0;
								if ($cmp102) {
									__label__ = 42;;
								} else {
									__label__ = 41;;
								}
								if (__label__ == 41) {
									var $46 = $tr_addr;
									var $langopts104 = (($46) & 4294967295);
									var $numbers2105 = (($langopts104 + 188) & 4294967295);
									var $47 = HEAP32[(($numbers2105) >> 2)];
									var $and106 = ($47) & 4096;
									var $tobool107 = ((($and106)) | 0) != 0;
									if (!($tobool107)) {
										__label__ = 45;
										break $land_lhs_true101$$if_end124$61;
									}
								}
								var $arraydecay109 = (($string) & 4294967295);
								var $48 = $hundreds;
								var $call110 = _sprintf($arraydecay109, ((__str39336) & 4294967295), allocate([$48, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $49 = $tr_addr;
								var $arraydecay111 = (($string) & 4294967295);
								var $arraydecay112 = (($ph_digits) & 4294967295);
								var $call113 = __Z6LookupP10TranslatorPKcPc($49, $arraydecay111, $arraydecay112);
								$found = $call113;
								var $50 = $tr_addr;
								var $langopts114 = (($50) & 4294967295);
								var $numbers2115 = (($langopts114 + 188) & 4294967295);
								var $51 = HEAP32[(($numbers2115) >> 2)];
								var $and116 = ($51) & 4096;
								var $tobool117 = ((($and116)) | 0) != 0;
								if (!($tobool117)) {
									__label__ = 45;
									break $land_lhs_true101$$if_end124$61;
								}
								var $52 = $tensunits;
								var $cmp119 = ((($52)) | 0) > 0;
								if (!($cmp119)) {
									__label__ = 45;
									break $land_lhs_true101$$if_end124$61;
								}
								var $arraydecay121 = (($ph_digits) & 4294967295);
								var $call122 = _strcat($arraydecay121, ((__ZL11ph_ordinal2) & 4294967295));;
							}
						} while (0);
						var $53 = $hundreds;
						var $cmp125 = ((($53)) | 0) == 0;
						if ($cmp125) {
							__label__ = 46;;
						} else {
							__label__ = 48;;
						}
						$land_lhs_true126$$if_else131$69: do {
							if (__label__ == 46) {
								var $54 = $say_zero_hundred;
								var $tobool127 = ((($54)) | 0) != 0;
								if (!($tobool127)) {
									__label__ = 48;
									break $land_lhs_true126$$if_else131$69;
								}
								var $55 = $tr_addr;
								var $arraydecay129 = (($ph_digits) & 4294967295);
								var $call130 = __Z6LookupP10TranslatorPKcPc($55, ((__str16313) & 4294967295), $arraydecay129);
								__label__ = 60;
								break $if_then85$$if_end166$53;
							}
						} while (0);
						var $56 = $found;
						var $tobool132 = ((($56)) | 0) != 0;
						if ($tobool132) {
							__label__ = 54;;
						} else {
							__label__ = 49;;
						}
						$if_end149thread_pre_split$$land_lhs_true133$73: do {
							if (__label__ == 49) {
								var $57 = $tensunits;
								var $cmp134 = ((($57)) | 0) == 0;
								if ($cmp134) {
									__label__ = 50;;
								} else {
									__label__ = 51;;
								}
								if (__label__ == 50) {
									var $arraydecay136 = (($string) & 4294967295);
									var $58 = $hundreds;
									var $call137 = _sprintf($arraydecay136, ((__str40337) & 4294967295), allocate([$58, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
									var $59 = $tr_addr;
									var $arraydecay138 = (($string) & 4294967295);
									var $arraydecay139 = (($ph_digits) & 4294967295);
									var $call140 = __Z6LookupP10TranslatorPKcPc($59, $arraydecay138, $arraydecay139);
									$found = $call140;
									__lastLabel__ = 50;;
								} else if (__label__ == 51) {
									var $_pr4 = $found;
									__lastLabel__ = 51;;
								}
								var $60 = __lastLabel__ == 51 ? $_pr4 : ($call140);
								var $tobool142 = ((($60)) | 0) != 0;
								if ($tobool142) {
									__label__ = 54;
									break $if_end149thread_pre_split$$land_lhs_true133$73;
								}
								var $arraydecay144 = (($string) & 4294967295);
								var $61 = $hundreds;
								var $call145 = _sprintf($arraydecay144, ((__str41338) & 4294967295), allocate([$61, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $62 = $tr_addr;
								var $arraydecay146 = (($string) & 4294967295);
								var $arraydecay147 = (($ph_digits) & 4294967295);
								var $call148 = __Z6LookupP10TranslatorPKcPc($62, $arraydecay146, $arraydecay147);
								$found = $call148;
								__lastLabel__ = 53;
								__label__ = 55;
								break $if_end149thread_pre_split$$land_lhs_true133$73;
							}
						} while (0);
						if (__label__ == 54) {
							var $_pr6 = $found;
							__lastLabel__ = 54;;
						}
						var $63 = __lastLabel__ == 54 ? $_pr6 : ($call148);
						var $tobool150 = ((($63)) | 0) != 0;
						if ($tobool150) {
							__label__ = 56;;
						} else {
							__label__ = 57;;
						}
						if (__label__ == 56) {
							var $arrayidx152 = (($ph_100) & 4294967295);
							HEAP8[($arrayidx152)] = 0;;
						} else if (__label__ == 57) {
							var $64 = $hundreds;
							var $cmp154 = ((($64)) | 0) > 1;
							if ($cmp154) {
								__label__ = 59;;
							} else {
								__label__ = 58;;
							}
							if (__label__ == 58) {
								var $65 = $tr_addr;
								var $langopts156 = (($65) & 4294967295);
								var $numbers157 = (($langopts156 + 184) & 4294967295);
								var $66 = HEAP32[(($numbers157) >> 2)];
								var $and158 = ($66) & 1024;
								var $cmp159 = ((($and158)) | 0) == 0;
								if (!($cmp159)) {
									__label__ = 60;
									break $if_then85$$if_end166$53;
								}
							}
							var $67 = $tr_addr;
							var $68 = $hundreds;
							var $arraydecay161 = (($ph_digits) & 4294967295);
							var $call162 = __ZL10LookupNum2P10TranslatoriiPc($67, $68, 0, $arraydecay161);;
						}
					}
				} while (0);
				var $arraydecay167 = (($buf1) & 4294967295);
				var $arraydecay168 = (($ph_thousands) & 4294967295);
				var $arraydecay169 = (($ph_thousand_and) & 4294967295);
				var $arraydecay170 = (($ph_digits) & 4294967295);
				var $arraydecay171 = (($ph_100) & 4294967295);
				var $call172 = _sprintf($arraydecay167, ((__str20317) & 4294967295), allocate([$arraydecay168, 0, 0, 0, $arraydecay169, 0, 0, 0, $arraydecay170, 0, 0, 0, $arraydecay171, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
			}
			var $arrayidx174 = (($ph_hundred_and) & 4294967295);
			HEAP8[($arrayidx174)] = 0;
			var $69 = $tensunits;
			var $cmp175 = ((($69)) | 0) > 0;
			if ($cmp175) {
				__label__ = 62;;
			} else {
				__label__ = 74;;
			}
			$if_then176$$if_end217$91: do {
				if (__label__ == 62) {
					var $70 = $value_addr;
					var $cmp177 = ((($70)) | 0) > 100;
					if ($cmp177) {
						__label__ = 65;;
					} else {
						__label__ = 63;;
					}
					$if_then183$$lor_lhs_false178$93: do {
						if (__label__ == 63) {
							var $71 = $control_addr;
							var $and179 = ($71) & 1;
							var $tobool180 = ((($and179)) | 0) != 0;
							if (!($tobool180)) {
								__label__ = 69;
								break $if_then183$$lor_lhs_false178$93;
							}
							var $72 = $thousandplex_addr;
							var $cmp182 = ((($72)) | 0) == 0;
							if ($cmp182) {
								__label__ = 65;
								break $if_then183$$lor_lhs_false178$93;
							} else {
								__label__ = 69;
								break $if_then183$$lor_lhs_false178$93;
							}
						}
					} while (0);
					$if_then183$$if_end199$96: do {
						if (__label__ == 65) {
							var $73 = $tr_addr;
							var $langopts184 = (($73) & 4294967295);
							var $numbers185 = (($langopts184 + 184) & 4294967295);
							var $74 = HEAP32[(($numbers185) >> 2)];
							var $and186 = ($74) & 64;
							var $tobool187 = ((($and186)) | 0) != 0;
							if ($tobool187) {
								__label__ = 68;;
							} else {
								__label__ = 66;;
							}
							if (__label__ == 66) {
								var $75 = $tr_addr;
								var $langopts189 = (($75) & 4294967295);
								var $numbers190 = (($langopts189 + 184) & 4294967295);
								var $76 = HEAP32[(($numbers190) >> 2)];
								var $and191 = ($76) & 8388608;
								var $tobool192 = ((($and191)) | 0) != 0;
								if (!($tobool192)) {
									__label__ = 69;
									break $if_then183$$if_end199$96;
								}
								var $77 = $tensunits;
								var $cmp194 = ((($77)) | 0) < 10;
								if (!($cmp194)) {
									__label__ = 69;
									break $if_then183$$if_end199$96;
								}
							}
							var $78 = $tr_addr;
							var $arraydecay196 = (($ph_hundred_and) & 4294967295);
							var $call197 = __Z6LookupP10TranslatorPKcPc($78, ((__str33330) & 4294967295), $arraydecay196);;
						}
					} while (0);
					var $79 = $tr_addr;
					var $langopts200 = (($79) & 4294967295);
					var $numbers201 = (($langopts200 + 184) & 4294967295);
					var $80 = HEAP32[(($numbers201) >> 2)];
					var $and202 = ($80) & 524288;
					var $tobool203 = ((($and202)) | 0) != 0;
					if (!($tobool203)) {
						__label__ = 74;
						break $if_then176$$if_end217$91;
					}
					var $81 = $hundreds;
					var $cmp205 = ((($81)) | 0) == 0;
					if (!($cmp205)) {
						__label__ = 74;
						break $if_then176$$if_end217$91;
					}
					var $82 = $control_addr;
					var $and207 = ($82) & 1;
					var $tobool208 = ((($and207)) | 0) != 0;
					if ($tobool208) {
						__label__ = 73;;
					} else {
						__label__ = 72;;
					}
					if (__label__ == 72) {
						var $arrayidx210 = (($ph_thousands) & 4294967295);
						var $83 = HEAP8[($arrayidx210)];
						var $conv211 = (tempInt = (($83)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp212 = ((($conv211)) | 0) != 0;
						if (!($cmp212)) {
							__label__ = 74;
							break $if_then176$$if_end217$91;
						}
					}
					var $84 = $tr_addr;
					var $arraydecay214 = (($ph_hundred_and) & 4294967295);
					var $call215 = __Z6LookupP10TranslatorPKcPc($84, ((__str33330) & 4294967295), $arraydecay214);;
				}
			} while (0);
			var $arrayidx218 = (($buf2) & 4294967295);
			HEAP8[($arrayidx218)] = 0;
			var $85 = $tensunits;
			var $cmp219 = ((($85)) | 0) != 0;
			if ($cmp219) {
				__label__ = 76;;
			} else {
				__label__ = 75;;
			}
			$if_then222$$lor_lhs_false220$109: do {
				if (__label__ == 75) {
					var $86 = $suppress_null_addr;
					var $cmp221 = ((($86)) | 0) == 0;
					if ($cmp221) {
						__label__ = 76;
						break $if_then222$$lor_lhs_false220$109;
					}
					var $102 = HEAP8[(((__ZL11ph_ordinal2) & 4294967295))];
					var $conv262 = (tempInt = (($102)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp263 = ((($conv262)) | 0) != 0;
					if (!($cmp263)) {
						__label__ = 94;
						break $if_then222$$lor_lhs_false220$109;
					}
					var $arraydecay265 = (($buf1) & 4294967295);
					var $call266 = _strlen($arraydecay265);
					$ix = $call266;
					var $103 = $ix;
					var $cmp267 = ((($103)) | 0) > 0;
					if ($cmp267) {
						__label__ = 91;;
					} else {
						__label__ = 93;;
					}
					$land_lhs_true268$$if_end275$113: do {
						if (__label__ == 91) {
							var $104 = $ix;
							var $sub = ((($104) - 1) & 4294967295);
							var $arrayidx269 = (($buf1 + $sub) & 4294967295);
							var $105 = HEAP8[($arrayidx269)];
							var $conv270 = (tempInt = (($105)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp271 = ((($conv270)) | 0) == 10;
							if (!($cmp271)) {
								__label__ = 93;
								break $land_lhs_true268$$if_end275$113;
							}
							var $106 = $ix;
							var $sub273 = ((($106) - 1) & 4294967295);
							var $arrayidx274 = (($buf1 + $sub273) & 4294967295);
							HEAP8[($arrayidx274)] = 0;;
						}
					} while (0);
					var $arraydecay276 = (($buf2) & 4294967295);
					var $call277 = _strcpy($arraydecay276, ((__ZL11ph_ordinal2) & 4294967295));
					__label__ = 94;
					break $if_then222$$lor_lhs_false220$109;
				}
			} while (0);
			$if_then222$$if_end279$117: do {
				if (__label__ == 76) {
					$x = 0;
					var $87 = $thousandplex_addr;
					var $cmp223 = ((($87)) | 0) == 0;
					if ($cmp223) {
						__label__ = 77;;
					} else {
						__label__ = 84;;
					}
					$if_then224$$if_else240$119: do {
						if (__label__ == 77) {
							$x = 2;
							var $88 = $ordinal;
							var $tobool225 = ((($88)) | 0) != 0;
							if ($tobool225) {
								__label__ = 78;;
							} else {
								__label__ = 79;;
							}
							if (__label__ == 78) {
								$x = 3;;
							}
							var $89 = $value_addr;
							var $cmp228 = ((($89)) | 0) < 100;
							if ($cmp228) {
								__label__ = 80;;
							} else {
								__label__ = 82;;
							}
							$land_lhs_true229$$if_end234$124: do {
								if (__label__ == 80) {
									var $90 = $control_addr;
									var $and230 = ($90) & 1;
									var $tobool231 = ((($and230)) | 0) != 0;
									if ($tobool231) {
										__label__ = 82;
										break $land_lhs_true229$$if_end234$124;
									}
									var $91 = $x;
									var $or233 = ($91) | 4;
									$x = $or233;;
								}
							} while (0);
							var $92 = $ordinal;
							var $and235 = ($92) & 32;
							var $tobool236 = ((($and235)) | 0) != 0;
							if (!($tobool236)) {
								__label__ = 86;
								break $if_then224$$if_else240$119;
							}
							var $93 = $x;
							var $or238 = ($93) | 32;
							$x = $or238;;
						} else if (__label__ == 84) {
							var $94 = $tr_addr;
							var $langopts241 = (($94) & 4294967295);
							var $numbers2242 = (($langopts241 + 188) & 4294967295);
							var $95 = HEAP32[(($numbers2242) >> 2)];
							var $96 = $thousandplex_addr;
							var $shl243 = 1 << ($96);
							var $and244 = ($shl243) & ($95);
							var $tobool245 = ((($and244)) | 0) != 0;
							if (!($tobool245)) {
								__label__ = 86;
								break $if_then224$$if_else240$119;
							}
							$x = 8;;
						}
					} while (0);
					var $97 = $tr_addr;
					var $98 = $tensunits;
					var $99 = $x;
					var $arraydecay249 = (($buf2) & 4294967295);
					var $call250 = __ZL10LookupNum2P10TranslatoriiPc($97, $98, $99, $arraydecay249);
					var $cmp251 = ((($call250)) | 0) != 0;
					if (!($cmp251)) {
						__label__ = 94;
						break $if_then222$$if_end279$117;
					}
					var $100 = $tr_addr;
					var $langopts253 = (($100) & 4294967295);
					var $numbers254 = (($langopts253 + 184) & 4294967295);
					var $101 = HEAP32[(($numbers254) >> 2)];
					var $and255 = ($101) & 128;
					var $tobool256 = ((($and255)) | 0) != 0;
					if (!($tobool256)) {
						__label__ = 94;
						break $if_then222$$if_end279$117;
					}
					var $arrayidx258 = (($ph_hundred_and) & 4294967295);
					HEAP8[($arrayidx258)] = 0;;
				}
			} while (0);
			var $107 = $ph_out_addr;
			var $arraydecay280 = (($buf1) & 4294967295);
			var $arraydecay281 = (($ph_hundred_and) & 4294967295);
			var $arraydecay282 = (($buf2) & 4294967295);
			var $call283 = _sprintf($107, ((__str6549) & 4294967295), allocate([$arraydecay280, 0, 0, 0, $arraydecay281, 0, 0, 0, $arraydecay282, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL10LookupNum2P10TranslatoriiPc($tr, $value, $control, $ph_out) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 148;
			_memset(__stackBase__, 0, 148);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $value_addr;
			var $control_addr;
			var $ph_out_addr;
			var $found;
			var $ix;
			var $units;
			var $tens;
			var $used_and;
			var $found_ordinal;
			var $next_phtype;
			var $ord_type;
			var $string = __stackBase__;
			var $ph_ordinal = __stackBase__ + 12;
			var $ph_tens = __stackBase__ + 32;
			var $ph_digits = __stackBase__ + 84;
			var $ph_and = __stackBase__ + 136;
			$tr_addr = $tr;
			$value_addr = $value;
			$control_addr = $control;
			$ph_out_addr = $ph_out;
			$used_and = 0;
			$found_ordinal = 0;
			$ord_type = 111;
			var $0 = $value_addr;
			var $rem = ((($0)) | 0) % 10;
			$units = $rem;
			var $1 = $value_addr;
			var $div = ((((($1)) | 0) / 10) | 0);
			$tens = $div;
			$found = 0;
			var $arrayidx = (($ph_ordinal) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arrayidx1 = (($ph_tens) & 4294967295);
			HEAP8[($arrayidx1)] = 0;
			var $arrayidx2 = (($ph_digits) & 4294967295);
			HEAP8[($arrayidx2)] = 0;
			var $arrayidx3 = (($ph_and) & 4294967295);
			HEAP8[($arrayidx3)] = 0;
			var $2 = $control_addr;
			var $and = ($2) & 32;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$ord_type = 113;;
			}
			var $3 = $control_addr;
			var $and4 = ($3) & 2;
			var $tobool5 = ((($and4)) | 0) != 0;
			var $4 = HEAP32[((__ZL14n_digit_lookup) >> 2)];
			var $cmp = ((($4)) | 0) == 2;
			var $or_cond = ($tobool5) & ($cmp);
			if ($or_cond) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			$if_then6$$if_else$5: do {
				if (__label__ == 3) {
					var $5 = $ph_out_addr;
					var $6 = HEAP32[((__ZL12digit_lookup) >> 2)];
					var $call = _strcpy($5, $6);;
				} else if (__label__ == 4) {
					var $7 = HEAP32[((__ZL12digit_lookup) >> 2)];
					var $arrayidx7 = (($7) & 4294967295);
					var $8 = HEAP8[($arrayidx7)];
					var $conv = (tempInt = (($8)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp8 = ((($conv)) | 0) == 0;
					if ($cmp8) {
						__label__ = 5;;
					} else {
						__label__ = 23;;
					}
					$if_then9$$if_end72$8: do {
						if (__label__ == 5) {
							var $9 = $control_addr;
							var $and10 = ($9) & 8;
							var $tobool11 = ((($and10)) | 0) != 0;
							if ($tobool11) {
								__label__ = 6;;
							} else {
								__label__ = 7;;
							}
							if (__label__ == 6) {
								var $arraydecay = (($string) & 4294967295);
								var $10 = $value_addr;
								var $call13 = _sprintf($arraydecay, ((__str23320) & 4294967295), allocate([$10, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $11 = $tr_addr;
								var $arraydecay14 = (($string) & 4294967295);
								var $arraydecay15 = (($ph_digits) & 4294967295);
								var $call16 = __Z6LookupP10TranslatorPKcPc($11, $arraydecay14, $arraydecay15);
								$found = $call16;
								__lastLabel__ = 6;;
							} else if (__label__ == 7) {
								var $12 = $control_addr;
								var $and18 = ($12) & 1;
								var $tobool19 = ((($and18)) | 0) != 0;
								if ($tobool19) {
									__label__ = 8;;
								} else {
									__label__ = 14;;
								}
								if (__label__ == 8) {
									var $arraydecay21 = (($ph_ordinal) & 4294967295);
									var $call22 = _strcpy($arraydecay21, ((__ZL11ph_ordinal2) & 4294967295));
									var $13 = $control_addr;
									var $and23 = ($13) & 4;
									var $tobool24 = ((($and23)) | 0) != 0;
									if ($tobool24) {
										__label__ = 9;;
									} else {
										__label__ = 10;;
									}
									if (__label__ == 9) {
										var $arraydecay26 = (($string) & 4294967295);
										var $14 = $value_addr;
										var $15 = $ord_type;
										var $call27 = _sprintf($arraydecay26, ((__str24321) & 4294967295), allocate([$14, 0, 0, 0, $15, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $16 = $tr_addr;
										var $arraydecay28 = (($string) & 4294967295);
										var $arraydecay29 = (($ph_digits) & 4294967295);
										var $call30 = __Z6LookupP10TranslatorPKcPc($16, $arraydecay28, $arraydecay29);
										$found = $call30;
										__lastLabel__ = 9;;
									} else if (__label__ == 10) {
										var $_pr = $found;
										__lastLabel__ = 10;;
									}
									var $17 = __lastLabel__ == 10 ? $_pr : ($call30);
									var $cmp32 = ((($17)) | 0) == 0;
									if ($cmp32) {
										__label__ = 12;;
									} else {
										__label__ = 13;;
									}
									if (__label__ == 12) {
										var $arraydecay34 = (($string) & 4294967295);
										var $18 = $value_addr;
										var $19 = $ord_type;
										var $call35 = _sprintf($arraydecay34, ((__str25322) & 4294967295), allocate([$18, 0, 0, 0, $19, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $20 = $tr_addr;
										var $arraydecay36 = (($string) & 4294967295);
										var $arraydecay37 = (($ph_digits) & 4294967295);
										var $call38 = __Z6LookupP10TranslatorPKcPc($20, $arraydecay36, $arraydecay37);
										$found = $call38;;
									}
									var $21 = $found;
									$found_ordinal = $21;
									__lastLabel__ = 13;;
								} else if (__label__ == 14) {
									var $_pr1 = $found;
									__lastLabel__ = 14;;
								}
							}
							var $22 = __lastLabel__ == 14 ? $_pr1 : (__lastLabel__ == 13 ? $21 : ($call16));
							var $cmp42 = ((($22)) | 0) == 0;
							if (!($cmp42)) {
								__label__ = 23;
								break $if_then9$$if_end72$8;
							}
							var $23 = $control_addr;
							var $and44 = ($23) & 2;
							var $tobool45 = ((($and44)) | 0) != 0;
							if ($tobool45) {
								__label__ = 17;;
							} else {
								__label__ = 19;;
							}
							if (__label__ == 17) {
								var $24 = HEAP32[((__ZL14number_control) >> 2)];
								var $and47 = ($24) & 1;
								var $tobool48 = ((($and47)) | 0) != 0;
								if ($tobool48) {
									__label__ = 18;;
								} else {
									__label__ = 20;;
								}
								if (__label__ == 18) {
									var $arraydecay50 = (($string) & 4294967295);
									var $25 = $value_addr;
									var $call51 = _sprintf($arraydecay50, ((__str26323) & 4294967295), allocate([$25, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
									var $26 = $tr_addr;
									var $arraydecay52 = (($string) & 4294967295);
									var $arraydecay53 = (($ph_digits) & 4294967295);
									var $call54 = __Z6LookupP10TranslatorPKcPc($26, $arraydecay52, $arraydecay53);
									$found = $call54;
									__lastLabel__ = 18;;
								} else if (__label__ == 20) {
									var $_pr2 = $found;
									__lastLabel__ = 20;;
								}
							} else if (__label__ == 19) {
								var $arraydecay57 = (($string) & 4294967295);
								var $27 = $value_addr;
								var $call58 = _sprintf($arraydecay57, ((__str27324) & 4294967295), allocate([$27, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $28 = $tr_addr;
								var $arraydecay59 = (($string) & 4294967295);
								var $arraydecay60 = (($ph_digits) & 4294967295);
								var $call61 = __Z6LookupP10TranslatorPKcPc($28, $arraydecay59, $arraydecay60);
								$found = $call61;
								__lastLabel__ = 19;;
							}
							var $29 = __lastLabel__ == 20 ? $_pr2 : (__lastLabel__ == 18 ? $call54 : ($call61));
							var $tobool63 = ((($29)) | 0) != 0;
							if ($tobool63) {
								__label__ = 23;
								break $if_then9$$if_end72$8;
							}
							var $arraydecay65 = (($string) & 4294967295);
							var $30 = $value_addr;
							var $call66 = _sprintf($arraydecay65, ((__str28325) & 4294967295), allocate([$30, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $31 = $tr_addr;
							var $arraydecay67 = (($string) & 4294967295);
							var $arraydecay68 = (($ph_digits) & 4294967295);
							var $call69 = __Z6LookupP10TranslatorPKcPc($31, $arraydecay67, $arraydecay68);
							$found = $call69;;
						}
					} while (0);
					var $32 = $control_addr;
					var $and73 = ($32) & 16;
					var $tobool74 = ((($and73)) | 0) != 0;
					if ($tobool74) {
						__label__ = 24;;
					} else {
						__label__ = 26;;
					}
					$land_lhs_true75$$if_else80$34: do {
						if (__label__ == 24) {
							var $33 = $value_addr;
							var $cmp76 = ((($33)) | 0) < 10;
							if (!($cmp76)) {
								__label__ = 26;
								break $land_lhs_true75$$if_else80$34;
							}
							var $34 = $tr_addr;
							var $arraydecay78 = (($ph_tens) & 4294967295);
							var $call79 = __Z6LookupP10TranslatorPKcPc($34, ((__str16313) & 4294967295), $arraydecay78);
							__label__ = 61;
							break $land_lhs_true75$$if_else80$34;
						}
					} while (0);
					$if_end221$$if_else80$37: do {
						if (__label__ == 26) {
							var $35 = $found;
							var $tobool81 = ((($35)) | 0) != 0;
							if ($tobool81) {
								__label__ = 27;;
							} else {
								__label__ = 28;;
							}
							if (__label__ == 27) {
								var $arrayidx83 = (($ph_tens) & 4294967295);
								HEAP8[($arrayidx83)] = 0;;
							} else if (__label__ == 28) {
								var $36 = $control_addr;
								var $and85 = ($36) & 1;
								var $tobool86 = ((($and85)) | 0) != 0;
								if ($tobool86) {
									__label__ = 29;;
								} else {
									__label__ = 36;;
								}
								$land_lhs_true87$$if_end114$42: do {
									if (__label__ == 29) {
										var $37 = $units;
										var $cmp88 = ((($37)) | 0) == 0;
										if ($cmp88) {
											__label__ = 32;;
										} else {
											__label__ = 30;;
										}
										$if_then95$$lor_lhs_false$44: do {
											if (__label__ == 30) {
												var $38 = $tr_addr;
												var $langopts = (($38) & 4294967295);
												var $numbers = (($langopts + 184) & 4294967295);
												var $39 = HEAP32[(($numbers) >> 2)];
												var $and89 = ($39) & 16;
												var $tobool90 = ((($and89)) | 0) != 0;
												if ($tobool90) {
													__label__ = 32;
													break $if_then95$$lor_lhs_false$44;
												}
												var $40 = $tr_addr;
												var $langopts92 = (($40) & 4294967295);
												var $numbers2 = (($langopts92 + 188) & 4294967295);
												var $41 = HEAP32[(($numbers2) >> 2)];
												var $and93 = ($41) & 4096;
												var $tobool94 = ((($and93)) | 0) != 0;
												if (!($tobool94)) {
													__label__ = 36;
													break $land_lhs_true87$$if_end114$42;
												}
											}
										} while (0);
										var $arraydecay96 = (($string) & 4294967295);
										var $42 = $tens;
										var $43 = $ord_type;
										var $call97 = _sprintf($arraydecay96, ((__str29326) & 4294967295), allocate([$42, 0, 0, 0, $43, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $44 = $tr_addr;
										var $arraydecay98 = (($string) & 4294967295);
										var $arraydecay99 = (($ph_tens) & 4294967295);
										var $call100 = __Z6LookupP10TranslatorPKcPc($44, $arraydecay98, $arraydecay99);
										var $cmp101 = ((($call100)) | 0) != 0;
										if (!($cmp101)) {
											__label__ = 36;
											break $land_lhs_true87$$if_end114$42;
										}
										$found_ordinal = 1;
										var $45 = $units;
										var $cmp103 = ((($45)) | 0) != 0;
										if (!($cmp103)) {
											__label__ = 38;
											break $land_lhs_true87$$if_end114$42;
										}
										var $46 = $tr_addr;
										var $langopts105 = (($46) & 4294967295);
										var $numbers2106 = (($langopts105 + 188) & 4294967295);
										var $47 = HEAP32[(($numbers2106) >> 2)];
										var $and107 = ($47) & 4096;
										var $tobool108 = ((($and107)) | 0) != 0;
										if (!($tobool108)) {
											__label__ = 36;
											break $land_lhs_true87$$if_end114$42;
										}
										var $arraydecay110 = (($ph_tens) & 4294967295);
										var $call111 = _strcat($arraydecay110, ((__ZL11ph_ordinal2) & 4294967295));
										__label__ = 36;
										break $land_lhs_true87$$if_end114$42;
									}
								} while (0);
								$if_end114$$if_end122$51: do {
									if (__label__ == 36) {
										var $_pr3 = $found_ordinal;
										var $cmp115 = ((($_pr3)) | 0) == 0;
										if (!($cmp115)) {
											__label__ = 38;
											break $if_end114$$if_end122$51;
										}
										var $arraydecay117 = (($string) & 4294967295);
										var $48 = $tens;
										var $call118 = _sprintf($arraydecay117, ((__str30327) & 4294967295), allocate([$48, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
										var $49 = $tr_addr;
										var $arraydecay119 = (($string) & 4294967295);
										var $arraydecay120 = (($ph_tens) & 4294967295);
										var $call121 = __Z6LookupP10TranslatorPKcPc($49, $arraydecay119, $arraydecay120);;
									}
								} while (0);
								var $arrayidx123 = (($ph_tens) & 4294967295);
								var $50 = HEAP8[($arrayidx123)];
								var $conv124 = (tempInt = (($50)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp125 = ((($conv124)) | 0) == 0;
								if ($cmp125) {
									__label__ = 39;;
								} else {
									__label__ = 41;;
								}
								$land_lhs_true126$$if_end139$55: do {
									if (__label__ == 39) {
										var $51 = $tr_addr;
										var $langopts127 = (($51) & 4294967295);
										var $numbers128 = (($langopts127 + 184) & 4294967295);
										var $52 = HEAP32[(($numbers128) >> 2)];
										var $and129 = ($52) & 1048576;
										var $tobool130 = ((($and129)) | 0) != 0;
										if (!($tobool130)) {
											__label__ = 41;
											break $land_lhs_true126$$if_end139$55;
										}
										var $53 = $value_addr;
										var $rem132 = ((($53)) | 0) % 20;
										$units = $rem132;
										var $arraydecay133 = (($string) & 4294967295);
										var $54 = $tens;
										var $and134 = ($54) & 254;
										var $call135 = _sprintf($arraydecay133, ((__str30327) & 4294967295), allocate([$and134, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
										var $55 = $tr_addr;
										var $arraydecay136 = (($string) & 4294967295);
										var $arraydecay137 = (($ph_tens) & 4294967295);
										var $call138 = __Z6LookupP10TranslatorPKcPc($55, $arraydecay136, $arraydecay137);;
									}
								} while (0);
								var $arrayidx140 = (($ph_digits) & 4294967295);
								HEAP8[($arrayidx140)] = 0;
								var $56 = $units;
								var $cmp141 = ((($56)) | 0) > 0;
								if (!($cmp141)) {
									__label__ = 61;
									break $if_end221$$if_else80$37;
								}
								$found = 0;
								var $57 = $control_addr;
								var $and143 = ($57) & 2;
								var $tobool144 = ((($and143)) | 0) != 0;
								if ($tobool144) {
									__label__ = 43;;
								} else {
									__label__ = 45;;
								}
								$land_lhs_true145$$if_else153$60: do {
									if (__label__ == 43) {
										var $58 = HEAP32[((__ZL12digit_lookup) >> 2)];
										var $arrayidx146 = (($58) & 4294967295);
										var $59 = HEAP8[($arrayidx146)];
										var $conv147 = (tempInt = (($59)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp148 = ((($conv147)) | 0) != 0;
										if (!($cmp148)) {
											__label__ = 45;
											break $land_lhs_true145$$if_else153$60;
										}
										var $arraydecay150 = (($ph_digits) & 4294967295);
										var $60 = HEAP32[((__ZL12digit_lookup) >> 2)];
										var $call151 = _strcpy($arraydecay150, $60);
										$found_ordinal = 1;
										var $arrayidx152 = (($ph_ordinal) & 4294967295);
										HEAP8[($arrayidx152)] = 0;
										__label__ = 61;
										break $if_end221$$if_else80$37;
									}
								} while (0);
								var $61 = $control_addr;
								var $and154 = ($61) & 8;
								var $tobool155 = ((($and154)) | 0) != 0;
								if ($tobool155) {
									__label__ = 46;;
								} else {
									__label__ = 47;;
								}
								if (__label__ == 46) {
									var $arraydecay157 = (($string) & 4294967295);
									var $62 = $units;
									var $call158 = _sprintf($arraydecay157, ((__str23320) & 4294967295), allocate([$62, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
									var $63 = $tr_addr;
									var $arraydecay159 = (($string) & 4294967295);
									var $arraydecay160 = (($ph_digits) & 4294967295);
									var $call161 = __Z6LookupP10TranslatorPKcPc($63, $arraydecay159, $arraydecay160);
									$found = $call161;;
								}
								var $64 = $control_addr;
								var $and163 = ($64) & 1;
								var $tobool164 = ((($and163)) | 0) != 0;
								if ($tobool164) {
									__label__ = 48;;
								} else {
									__label__ = 51;;
								}
								$land_lhs_true165$$if_end179$67: do {
									if (__label__ == 48) {
										var $65 = $tr_addr;
										var $langopts166 = (($65) & 4294967295);
										var $numbers167 = (($langopts166 + 184) & 4294967295);
										var $66 = HEAP32[(($numbers167) >> 2)];
										var $and168 = ($66) & 16;
										var $cmp169 = ((($and168)) | 0) == 0;
										if (!($cmp169)) {
											__label__ = 51;
											break $land_lhs_true165$$if_end179$67;
										}
										var $arraydecay171 = (($string) & 4294967295);
										var $67 = $units;
										var $68 = $ord_type;
										var $call172 = _sprintf($arraydecay171, ((__str25322) & 4294967295), allocate([$67, 0, 0, 0, $68, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
										var $69 = $tr_addr;
										var $arraydecay173 = (($string) & 4294967295);
										var $arraydecay174 = (($ph_digits) & 4294967295);
										var $call175 = __Z6LookupP10TranslatorPKcPc($69, $arraydecay173, $arraydecay174);
										$found = $call175;
										var $cmp176 = ((($call175)) | 0) != 0;
										if (!($cmp176)) {
											__label__ = 52;
											break $land_lhs_true165$$if_end179$67;
										}
										$found_ordinal = 1;
										__label__ = 51;
										break $land_lhs_true165$$if_end179$67;
									}
								} while (0);
								if (__label__ == 51) {
									var $_pr5 = $found;
									var $cmp180 = ((($_pr5)) | 0) == 0;
									if (!($cmp180)) {
										__label__ = 61;
										break $if_end221$$if_else80$37;
									}
								}
								var $70 = HEAP32[((__ZL14number_control) >> 2)];
								var $and182 = ($70) & 1;
								var $tobool183 = ((($and182)) | 0) != 0;
								if ($tobool183) {
									__label__ = 53;;
								} else {
									__label__ = 55;;
								}
								$land_lhs_true184$$if_else193$74: do {
									if (__label__ == 53) {
										var $71 = $control_addr;
										var $and185 = ($71) & 2;
										var $tobool186 = ((($and185)) | 0) != 0;
										if (!($tobool186)) {
											__label__ = 55;
											break $land_lhs_true184$$if_else193$74;
										}
										var $arraydecay188 = (($string) & 4294967295);
										var $72 = $units;
										var $call189 = _sprintf($arraydecay188, ((__str26323) & 4294967295), allocate([$72, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
										var $73 = $tr_addr;
										var $arraydecay190 = (($string) & 4294967295);
										var $arraydecay191 = (($ph_digits) & 4294967295);
										var $call192 = __Z6LookupP10TranslatorPKcPc($73, $arraydecay190, $arraydecay191);
										$found = $call192;
										__lastLabel__ = 54;
										__label__ = 59;
										break $land_lhs_true184$$if_else193$74;
									}
								} while (0);
								$if_end209$$if_else193$77: do {
									if (__label__ == 55) {
										var $74 = $control_addr;
										var $and194 = ($74) & 2;
										var $cmp195 = ((($and194)) | 0) == 0;
										if ($cmp195) {
											__label__ = 57;;
										} else {
											__label__ = 56;;
										}
										$if_then201$$lor_lhs_false196$79: do {
											if (__label__ == 56) {
												var $75 = $tr_addr;
												var $langopts197 = (($75) & 4294967295);
												var $numbers198 = (($langopts197 + 184) & 4294967295);
												var $76 = HEAP32[(($numbers198) >> 2)];
												var $and199 = ($76) & 16;
												var $cmp200 = ((($and199)) | 0) != 0;
												if ($cmp200) {
													__label__ = 57;
													break $if_then201$$lor_lhs_false196$79;
												}
												var $_pr7 = $found;
												__lastLabel__ = 58;
												__label__ = 59;
												break $if_end209$$if_else193$77;
											}
										} while (0);
										var $arraydecay202 = (($string) & 4294967295);
										var $77 = $units;
										var $call203 = _sprintf($arraydecay202, ((__str27324) & 4294967295), allocate([$77, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
										var $78 = $tr_addr;
										var $arraydecay204 = (($string) & 4294967295);
										var $arraydecay205 = (($ph_digits) & 4294967295);
										var $call206 = __Z6LookupP10TranslatorPKcPc($78, $arraydecay204, $arraydecay205);
										$found = $call206;
										__lastLabel__ = 57;;
									}
								} while (0);
								var $79 = __lastLabel__ == 58 ? $_pr7 : (__lastLabel__ == 54 ? $call192 : ($call206));
								var $cmp210 = ((($79)) | 0) == 0;
								if (!($cmp210)) {
									__label__ = 61;
									break $if_end221$$if_else80$37;
								}
								var $arraydecay212 = (($string) & 4294967295);
								var $80 = $units;
								var $call213 = _sprintf($arraydecay212, ((__str28325) & 4294967295), allocate([$80, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $81 = $tr_addr;
								var $arraydecay214 = (($string) & 4294967295);
								var $arraydecay215 = (($ph_digits) & 4294967295);
								var $call216 = __Z6LookupP10TranslatorPKcPc($81, $arraydecay214, $arraydecay215);;
							}
						}
					} while (0);
					var $82 = $control_addr;
					var $and222 = ($82) & 1;
					var $tobool223 = ((($and222)) | 0) != 0;
					if ($tobool223) {
						__label__ = 62;;
					} else {
						__label__ = 70;;
					}
					$land_lhs_true224$$if_end251$86: do {
						if (__label__ == 62) {
							var $83 = $found_ordinal;
							var $cmp225 = ((($83)) | 0) == 0;
							if (!($cmp225)) {
								__label__ = 70;
								break $land_lhs_true224$$if_end251$86;
							}
							var $arrayidx227 = (($ph_ordinal) & 4294967295);
							var $84 = HEAP8[($arrayidx227)];
							var $conv228 = (tempInt = (($84)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp229 = ((($conv228)) | 0) == 0;
							if (!($cmp229)) {
								__label__ = 70;
								break $land_lhs_true224$$if_end251$86;
							}
							var $85 = $value_addr;
							var $cmp231 = ((($85)) | 0) >= 20;
							if ($cmp231) {
								__label__ = 65;;
							} else {
								__label__ = 68;;
							}
							$land_lhs_true232$$if_end243$90: do {
								if (__label__ == 65) {
									var $86 = $value_addr;
									var $rem233 = ((($86)) | 0) % 10;
									var $cmp234 = ((($rem233)) | 0) == 0;
									if ($cmp234) {
										__label__ = 67;;
									} else {
										__label__ = 66;;
									}
									if (__label__ == 66) {
										var $87 = $tr_addr;
										var $langopts236 = (($87) & 4294967295);
										var $numbers237 = (($langopts236 + 184) & 4294967295);
										var $88 = HEAP32[(($numbers237) >> 2)];
										var $and238 = ($88) & 16;
										var $tobool239 = ((($and238)) | 0) != 0;
										if (!($tobool239)) {
											__label__ = 68;
											break $land_lhs_true232$$if_end243$90;
										}
									}
									var $89 = $tr_addr;
									var $arraydecay241 = (($ph_ordinal) & 4294967295);
									var $call242 = __Z6LookupP10TranslatorPKcPc($89, ((__str31328) & 4294967295), $arraydecay241);;
								}
							} while (0);
							var $arrayidx244 = (($ph_ordinal) & 4294967295);
							var $90 = HEAP8[($arrayidx244)];
							var $conv245 = (tempInt = (($90)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp246 = ((($conv245)) | 0) == 0;
							if (!($cmp246)) {
								__label__ = 70;
								break $land_lhs_true224$$if_end251$86;
							}
							var $91 = $tr_addr;
							var $arraydecay248 = (($ph_ordinal) & 4294967295);
							var $call249 = __Z6LookupP10TranslatorPKcPc($91, ((__str32329) & 4294967295), $arraydecay248);;
						}
					} while (0);
					var $92 = $tr_addr;
					var $langopts252 = (($92) & 4294967295);
					var $numbers253 = (($langopts252 + 184) & 4294967295);
					var $93 = HEAP32[(($numbers253) >> 2)];
					var $and254 = ($93) & 48;
					var $tobool255 = ((($and254)) | 0) != 0;
					if ($tobool255) {
						__label__ = 71;;
					} else {
						__label__ = 79;;
					}
					$land_lhs_true256$$if_else291$98: do {
						if (__label__ == 71) {
							var $arrayidx257 = (($ph_tens) & 4294967295);
							var $94 = HEAP8[($arrayidx257)];
							var $conv258 = (tempInt = (($94)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp259 = ((($conv258)) | 0) != 0;
							if (!($cmp259)) {
								__label__ = 79;
								break $land_lhs_true256$$if_else291$98;
							}
							var $arrayidx261 = (($ph_digits) & 4294967295);
							var $95 = HEAP8[($arrayidx261)];
							var $conv262 = (tempInt = (($95)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp263 = ((($conv262)) | 0) != 0;
							if (!($cmp263)) {
								__label__ = 79;
								break $land_lhs_true256$$if_else291$98;
							}
							var $96 = $tr_addr;
							var $arraydecay265 = (($ph_and) & 4294967295);
							var $call266 = __Z6LookupP10TranslatorPKcPc($96, ((__str33330) & 4294967295), $arraydecay265);
							var $97 = $tr_addr;
							var $langopts267 = (($97) & 4294967295);
							var $numbers2268 = (($langopts267 + 188) & 4294967295);
							var $98 = HEAP32[(($numbers2268) >> 2)];
							var $and269 = ($98) & 4096;
							var $tobool270 = ((($and269)) | 0) != 0;
							if ($tobool270) {
								__label__ = 74;;
							} else {
								__label__ = 75;;
							}
							if (__label__ == 74) {
								var $arrayidx272 = (($ph_and) & 4294967295);
								HEAP8[($arrayidx272)] = 0;;
							}
							var $99 = $tr_addr;
							var $langopts274 = (($99) & 4294967295);
							var $numbers275 = (($langopts274 + 184) & 4294967295);
							var $100 = HEAP32[(($numbers275) >> 2)];
							var $and276 = ($100) & 16;
							var $tobool277 = ((($and276)) | 0) != 0;
							var $101 = $ph_out_addr;
							if ($tobool277) {
								__label__ = 76;;
							} else {
								__label__ = 77;;
							}
							if (__label__ == 76) {
								var $arraydecay279 = (($ph_digits) & 4294967295);
								var $arraydecay280 = (($ph_and) & 4294967295);
								var $arraydecay281 = (($ph_tens) & 4294967295);
								var $arraydecay282 = (($ph_ordinal) & 4294967295);
								var $call283 = _sprintf($101, ((__str20317) & 4294967295), allocate([$arraydecay279, 0, 0, 0, $arraydecay280, 0, 0, 0, $arraydecay281, 0, 0, 0, $arraydecay282, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
							} else if (__label__ == 77) {
								var $arraydecay285 = (($ph_tens) & 4294967295);
								var $arraydecay286 = (($ph_and) & 4294967295);
								var $arraydecay287 = (($ph_digits) & 4294967295);
								var $arraydecay288 = (($ph_ordinal) & 4294967295);
								var $call289 = _sprintf($101, ((__str20317) & 4294967295), allocate([$arraydecay285, 0, 0, 0, $arraydecay286, 0, 0, 0, $arraydecay287, 0, 0, 0, $arraydecay288, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
							}
							$used_and = 1;
							__label__ = 88;
							break $if_then6$$if_else$5;
						}
					} while (0);
					var $102 = $tr_addr;
					var $langopts292 = (($102) & 4294967295);
					var $numbers293 = (($langopts292 + 184) & 4294967295);
					var $103 = HEAP32[(($numbers293) >> 2)];
					var $and294 = ($103) & 512;
					var $tobool295 = ((($and294)) | 0) != 0;
					if ($tobool295) {
						__label__ = 80;;
					} else {
						__label__ = 87;;
					}
					$if_then296$$if_end329$110: do {
						if (__label__ == 80) {
							var $arraydecay297 = (($ph_tens) & 4294967295);
							var $call298 = _strlen($arraydecay297);
							var $sub = ((($call298) - 1) & 4294967295);
							$ix = $sub;
							var $cmp299 = ((($sub)) | 0) >= 0;
							if (!($cmp299)) {
								__label__ = 87;
								break $if_then296$$if_end329$110;
							}
							var $arrayidx301 = (($ph_digits) & 4294967295);
							var $104 = HEAP8[($arrayidx301)];
							var $conv302 = (tempInt = (($104)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp303 = ((($conv302)) | 0) != 0;
							if (!($cmp303)) {
								__label__ = 87;
								break $if_then296$$if_end329$110;
							}
							var $arrayidx305 = (($ph_digits) & 4294967295);
							var $105 = HEAP8[($arrayidx305)];
							var $conv306 = (tempInt = (($105)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $arrayidx307 = ((_phoneme_tab + $conv306 * 4) & 4294967295);
							var $106 = HEAP32[(($arrayidx307) >> 2)];
							var $type = (($106 + 11) & 4294967295);
							var $107 = HEAPU8[($type)];
							var $conv308 = ((($107)) & 255);
							$next_phtype = $conv308;
							var $cmp309 = ((($conv308)) | 0) == 1;
							if ($cmp309) {
								__label__ = 83;;
							} else {
								__label__ = 84;;
							}
							if (__label__ == 83) {
								var $arrayidx311 = (($ph_digits + 1) & 4294967295);
								var $108 = HEAP8[($arrayidx311)];
								var $conv312 = (tempInt = (($108)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $arrayidx313 = ((_phoneme_tab + $conv312 * 4) & 4294967295);
								var $109 = HEAP32[(($arrayidx313) >> 2)];
								var $type314 = (($109 + 11) & 4294967295);
								var $110 = HEAPU8[($type314)];
								var $conv315 = ((($110)) & 255);
								$next_phtype = $conv315;;
							}
							var $111 = $ix;
							var $arrayidx317 = (($ph_tens + $111) & 4294967295);
							var $112 = HEAP8[($arrayidx317)];
							var $conv318 = (tempInt = (($112)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $arrayidx319 = ((_phoneme_tab + $conv318 * 4) & 4294967295);
							var $113 = HEAP32[(($arrayidx319) >> 2)];
							var $type320 = (($113 + 11) & 4294967295);
							var $114 = HEAPU8[($type320)];
							var $conv321 = ((($114)) & 255);
							var $cmp322 = ((($conv321)) | 0) == 2;
							if (!($cmp322)) {
								__label__ = 87;
								break $if_then296$$if_end329$110;
							}
							var $115 = $next_phtype;
							var $cmp324 = ((($115)) | 0) == 2;
							if (!($cmp324)) {
								__label__ = 87;
								break $if_then296$$if_end329$110;
							}
							var $116 = $ix;
							var $arrayidx326 = (($ph_tens + $116) & 4294967295);
							HEAP8[($arrayidx326)] = 0;;
						}
					} while (0);
					var $117 = $ph_out_addr;
					var $arraydecay330 = (($ph_tens) & 4294967295);
					var $arraydecay331 = (($ph_digits) & 4294967295);
					var $arraydecay332 = (($ph_ordinal) & 4294967295);
					var $call333 = _sprintf($117, ((__str6549) & 4294967295), allocate([$arraydecay330, 0, 0, 0, $arraydecay331, 0, 0, 0, $arraydecay332, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
				}
			} while (0);
			var $118 = $tr_addr;
			var $langopts336 = (($118) & 4294967295);
			var $numbers337 = (($langopts336 + 184) & 4294967295);
			var $119 = HEAP32[(($numbers337) >> 2)];
			var $and338 = ($119) & 256;
			var $tobool339 = ((($and338)) | 0) != 0;
			if ($tobool339) {
				__label__ = 89;;
			} else {
				__label__ = 95;;
			}
			$if_then340$$if_end354$121: do {
				if (__label__ == 89) {
					$found = 0;
					var $120 = $ph_out_addr;
					var $call341 = _strlen($120);
					var $sub342 = ((($call341) - 1) & 4294967295);
					$ix = $sub342;
					var $cmp3439 = ((($sub342)) | 0) >= 0;
					if (!($cmp3439)) {
						__label__ = 95;
						break $if_then340$$if_end354$121;
					}
					while (1) {
						var $121 = $ix;
						var $122 = $ph_out_addr;
						var $arrayidx344 = (($122 + $121) & 4294967295);
						var $123 = HEAP8[($arrayidx344)];
						var $conv345 = (tempInt = (($123)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp346 = ((($conv345)) | 0) == 6;
						if ($cmp346) {
							__label__ = 91;;
						} else {
							__label__ = 94;;
						}
						if (__label__ == 91) {
							var $124 = $found;
							var $tobool348 = ((($124)) | 0) != 0;
							if ($tobool348) {
								__label__ = 92;;
							} else {
								__label__ = 93;;
							}
							if (__label__ == 92) {
								var $125 = $ix;
								var $126 = $ph_out_addr;
								var $arrayidx350 = (($126 + $125) & 4294967295);
								HEAP8[($arrayidx350)] = 5;;
							} else if (__label__ == 93) {
								$found = 1;;
							}
						}
						var $127 = $ix;
						var $dec = ((($127) - 1) & 4294967295);
						$ix = $dec;
						var $cmp343 = ((($dec)) | 0) >= 0;
						if ($cmp343) {
							__label__ = 90;
							continue;
						} else {
							__label__ = 95;
							break $if_then340$$if_end354$121;
						}
					}
				}
			} while (0);
			var $128 = $used_and;
			STACKTOP = __stackBase__;
			return $128;
			return null;
		}

		function __ZL9M_Varianti($value) {;
			var __label__;
			var $retval;
			var $value_addr;
			$value_addr = $value;
			var $0 = HEAP32[((_translator) >> 2)];
			var $langopts = (($0) & 4294967295);
			var $numbers2 = (($langopts + 188) & 4294967295);
			var $1 = HEAP32[(($numbers2) >> 2)];
			var $and = ($1) & 256;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$land_lhs_true$$if_else$2: do {
				if (__label__ == 1) {
					var $2 = $value_addr;
					var $cmp = ((($2)) | 0) >= 2;
					var $3 = $value_addr;
					var $cmp2 = ((($3)) | 0) <= 4;
					var $or_cond = ($cmp) & ($cmp2);
					if (!($or_cond)) {
						__label__ = 3;
						break $land_lhs_true$$if_else$2;
					}
					$retval = ((__str54351) & 4294967295);
					__label__ = 13;
					break $land_lhs_true$$if_else$2;
				}
			} while (0);
			$return$$if_else$5: do {
				if (__label__ == 3) {
					var $4 = $value_addr;
					var $rem = ((($4)) | 0) % 100;
					var $cmp3 = ((($rem)) | 0) < 10;
					if ($cmp3) {
						__label__ = 5;;
					} else {
						__label__ = 4;;
					}
					$if_then6$$lor_lhs_false$7: do {
						if (__label__ == 4) {
							var $5 = $value_addr;
							var $rem4 = ((($5)) | 0) % 100;
							var $cmp5 = ((($rem4)) | 0) > 20;
							if ($cmp5) {
								__label__ = 5;
								break $if_then6$$lor_lhs_false$7;
							} else {
								__label__ = 12;
								break $if_then6$$lor_lhs_false$7;
							}
						}
					} while (0);
					$if_then6$$if_end28$9: do {
						if (__label__ == 5) {
							var $6 = HEAP32[((_translator) >> 2)];
							var $langopts7 = (($6) & 4294967295);
							var $numbers28 = (($langopts7 + 188) & 4294967295);
							var $7 = HEAP32[(($numbers28) >> 2)];
							var $and9 = ($7) & 64;
							var $tobool10 = ((($and9)) | 0) != 0;
							if ($tobool10) {
								__label__ = 6;;
							} else {
								__label__ = 9;;
							}
							$land_lhs_true11$$if_end$11: do {
								if (__label__ == 6) {
									var $8 = $value_addr;
									var $rem12 = ((($8)) | 0) % 10;
									var $cmp13 = ((($rem12)) | 0) >= 2;
									if (!($cmp13)) {
										__label__ = 9;
										break $land_lhs_true11$$if_end$11;
									}
									var $9 = $value_addr;
									var $rem15 = ((($9)) | 0) % 10;
									var $cmp16 = ((($rem15)) | 0) <= 4;
									if (!($cmp16)) {
										__label__ = 9;
										break $land_lhs_true11$$if_end$11;
									}
									$retval = ((__str54351) & 4294967295);
									__label__ = 13;
									break $return$$if_else$5;
								}
							} while (0);
							var $10 = HEAP32[((_translator) >> 2)];
							var $langopts18 = (($10) & 4294967295);
							var $numbers219 = (($langopts18 + 188) & 4294967295);
							var $11 = HEAP32[(($numbers219) >> 2)];
							var $and20 = ($11) & 128;
							var $tobool21 = ((($and20)) | 0) != 0;
							if (!($tobool21)) {
								__label__ = 12;
								break $if_then6$$if_end28$9;
							}
							var $12 = $value_addr;
							var $rem23 = ((($12)) | 0) % 10;
							var $cmp24 = ((($rem23)) | 0) == 1;
							if (!($cmp24)) {
								__label__ = 12;
								break $if_then6$$if_end28$9;
							}
							$retval = ((__str55352) & 4294967295);
							__label__ = 13;
							break $return$$if_else$5;
						}
					} while (0);
					$retval = ((__str56353) & 4294967295);;
				}
			} while (0);
			var $13 = $retval;;
			return $13;
			return null;
		}

		function __Z15LoadMbrolaTablePKcS0_i($mbrola_voice, $phtrans, $srate) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 168;
			_memset(__stackBase__, 0, 168);
			var __label__;
			var $retval;
			var $mbrola_voice_addr;
			var $phtrans_addr;
			var $srate_addr;
			var $size;
			var $ix;
			var $pw;
			var $f_in;
			var $path = __stackBase__;
			$mbrola_voice_addr = $mbrola_voice;
			$phtrans_addr = $phtrans;
			$srate_addr = $srate;
			HEAP8[(((_mbrola_name) & 4294967295))] = 0;
			HEAP32[((_mbrola_delay) >> 2)] = 0;
			HEAP32[((__ZL15mbr_name_prefix) >> 2)] = 0;
			var $0 = $mbrola_voice_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((_samplerate_native) >> 2)];
				HEAP32[((_samplerate) >> 2)] = $1;
				__Z12SetParameteriii(14, 0, 0);
				$retval = 0;;
			} else if (__label__ == 2) {
				var $arraydecay = (($path) & 4294967295);
				var $2 = $mbrola_voice_addr;
				var $call = _sprintf($arraydecay, ((__str382) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, $2, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
				var $arraydecay1 = (($path) & 4294967295);
				var $call2 = __Z13GetFileLengthPKc($arraydecay1);
				var $cmp3 = ((($call2)) | 0) <= 0;
				if ($cmp3) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $arraydecay5 = (($path) & 4294967295);
					var $3 = $mbrola_voice_addr;
					var $call6 = _sprintf($arraydecay5, ((__str1383) & 4294967295), allocate([$3, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
				}
				var $arraydecay8 = (($path) & 4294967295);
				var $call9 = __Z13GetFileLengthPKc($arraydecay8);
				var $cmp10 = ((($call9)) | 0) <= 0;
				if ($cmp10) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $arraydecay12 = (($path) & 4294967295);
					var $4 = $mbrola_voice_addr;
					var $5 = $mbrola_voice_addr;
					var $call13 = _sprintf($arraydecay12, ((__str2384) & 4294967295), allocate([$4, 0, 0, 0, $5, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
				}
				var $arraydecay15 = (($path) & 4294967295);
				var $call16 = __Z13GetFileLengthPKc($arraydecay15);
				var $cmp17 = ((($call16)) | 0) <= 0;
				if ($cmp17) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $arraydecay19 = (($path) & 4294967295);
					var $6 = $mbrola_voice_addr;
					var $call20 = _sprintf($arraydecay19, ((__str3385) & 4294967295), allocate([$6, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
				}
				var $arraydecay22 = (($path) & 4294967295);
				var $call23 = _init_MBR($arraydecay22);
				var $cmp24 = ((($call23)) | 0) != 0;
				if ($cmp24) {
					__label__ = 9;;
				} else {
					__label__ = 10;;
				}
				if (__label__ == 9) {
					$retval = 2;;
				} else if (__label__ == 10) {
					_setNoError_MBR();
					var $arraydecay27 = (($path) & 4294967295);
					var $7 = $phtrans_addr;
					var $call28 = _sprintf($arraydecay27, ((__str4386) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, $7, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay29 = (($path) & 4294967295);
					var $call30 = __Z13GetFileLengthPKc($arraydecay29);
					$size = $call30;
					var $arraydecay31 = (($path) & 4294967295);
					var $call32 = _fopen($arraydecay31, ((__str18429) & 4294967295));
					$f_in = $call32;
					var $cmp33 = ((($call32)) | 0) == 0;
					if ($cmp33) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						_close_MBR();
						$retval = 2;;
					} else if (__label__ == 12) {
						var $8 = HEAP32[((__ZL10mbrola_tab) >> 2)];
						var $9 = $8;
						var $10 = $size;
						var $call36 = _realloc($9, $10);
						var $11 = $call36;
						HEAP32[((__ZL10mbrola_tab) >> 2)] = $11;
						var $cmp37 = ((($11)) | 0) == 0;
						var $12 = $f_in;
						if ($cmp37) {
							__label__ = 13;;
						} else {
							__label__ = 14;;
						}
						if (__label__ == 13) {
							var $call39 = _fclose($12);
							_close_MBR();
							$retval = -1;;
						} else if (__label__ == 14) {
							var $call41 = __Z10Read4BytesP7__sFILE($12);
							HEAP32[((__ZL14mbrola_control) >> 2)] = $call41;
							var $13 = HEAP32[((__ZL10mbrola_tab) >> 2)];
							var $14 = $13;
							$pw = $14;
							$ix = 4;
							var $15 = $ix;
							var $16 = $size;
							var $cmp421 = ((($15)) | 0) < ((($16)) | 0);
							if ($cmp421) {
								__label__ = 15;;
							} else {
								__label__ = 16;;
							}
							$for_body$$for_end$23: do {
								if (__label__ == 15) {
									while (1) {
										var $17 = $f_in;
										var $call43 = __Z10Read4BytesP7__sFILE($17);
										var $18 = $pw;
										var $incdec_ptr = (($18 + 4) & 4294967295);
										$pw = $incdec_ptr;
										HEAP32[(($18) >> 2)] = $call43;
										var $19 = $ix;
										var $add = ((($19) + 4) & 4294967295);
										$ix = $add;
										var $20 = $ix;
										var $21 = $size;
										var $cmp42 = ((($20)) | 0) < ((($21)) | 0);
										if ($cmp42) {
											__label__ = 15;
											continue;
										} else {
											__label__ = 16;
											break $for_body$$for_end$23;
										}
									}
								}
							} while (0);
							var $22 = HEAP32[((__ZL10mbrola_tab) >> 2)];
							var $23 = $22;
							var $24 = $size;
							var $25 = $f_in;
							var $call44 = _fread($23, 1, $24, $25);
							$size = $call44;
							var $26 = $f_in;
							var $call45 = _fclose($26);
							var $27 = HEAP32[((__ZL14mbrola_control) >> 2)];
							var $and = ($27) & 255;
							var $conv = ((($and)) | 0);
							var $div = ($conv) / 16;
							_setVolumeRatio_MBR($div);
							var $28 = $srate_addr;
							HEAP32[((_samplerate) >> 2)] = $28;
							var $cmp46 = ((($28)) | 0) == 22050;
							if ($cmp46) {
								__label__ = 17;;
							} else {
								__label__ = 18;;
							}
							if (__label__ == 17) {
								__Z12SetParameteriii(14, 0, 0);;
							} else if (__label__ == 18) {
								__Z12SetParameteriii(14, 1, 0);;
							}
							var $29 = $mbrola_voice_addr;
							var $call49 = _strcpy(((_mbrola_name) & 4294967295), $29);
							HEAP32[((_mbrola_delay) >> 2)] = 1000;
							$retval = 0;;
						}
					}
				}
			}
			var $30 = $retval;
			STACKTOP = __stackBase__;
			return $30;
			return null;
		}

		function _setNoError_MBR() {;
			var __label__;;
			return;
			return;
		}

		function __Z15MbrolaTranslateP12PHONEME_LISTiiP7__sFILE($plist, $n_phonemes, $resume, $f_mbrola) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 332;
			_memset(__stackBase__, 0, 332);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $plist_addr;
			var $n_phonemes_addr;
			var $resume_addr;
			var $f_mbrola_addr;
			var $name;
			var $len;
			var $len1;
			var $ph;
			var $ph_next;
			var $ph_prev;
			var $p;
			var $next;
			var $prev;
			var $phdata = __stackBase__;
			var $fmtp = __stackBase__ + 152;
			var $pause;
			var $released;
			var $name2 = __stackBase__ + 200;
			var $control = __stackBase__ + 204;
			var $done;
			var $len_percent = __stackBase__ + 208;
			var $final_pitch;
			var $ptr;
			var $mbr_buf = __stackBase__ + 212;
			var $pitch;
			var $pitch101;
			var $res;
			$plist_addr = $plist;
			$n_phonemes_addr = $n_phonemes;
			$resume_addr = $resume;
			$f_mbrola_addr = $f_mbrola;
			$pause = 0;
			var $0 = $resume_addr;
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 1) {
				HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)] = 1;
				HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE11embedded_ix) >> 2)] = 0;
				HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE10word_count) >> 2)] = 0;;
			}
			var $arraydecay = (($mbr_buf) & 4294967295);
			var $arraydecay233 = (($mbr_buf) & 4294967295);
			var $arraydecay234 = (($mbr_buf) & 4294967295);
			var $sub_ptr_rhs_cast = ($arraydecay234);
			var $1 = $fmtp;
			var $sound_addr = (($phdata + 68) & 4294967295);
			var $arrayidx176 = (($sound_addr) & 4294967295);
			var $fmt_addr = (($fmtp + 8) & 4294967295);;
			$while_cond$5: while (1) {
				var $2 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
				var $3 = $n_phonemes_addr;
				var $cmp = ((($2)) | 0) < ((($3)) | 0);
				if (!($cmp)) {
					__label__ = 64;
					break $while_cond$5;
				}
				var $call = __Z9WcmdqFreev();
				var $cmp1 = ((($call)) | 0) < 22;
				if ($cmp1) {
					__label__ = 5;
					break $while_cond$5;
				}
				$ptr = $arraydecay;
				var $4 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
				var $5 = $plist_addr;
				var $arrayidx = (($5 + 24 * $4) & 4294967295);
				$p = $arrayidx;
				var $6 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
				var $add = ((($6) + 1) & 4294967295);
				var $7 = $plist_addr;
				var $arrayidx4 = (($7 + 24 * $add) & 4294967295);
				$next = $arrayidx4;
				var $8 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
				var $sub = ((($8) - 1) & 4294967295);
				var $9 = $plist_addr;
				var $arrayidx5 = (($9 + 24 * $sub) & 4294967295);
				$prev = $arrayidx5;
				var $10 = $p;
				var $ph6 = (($10 + 8) & 4294967295);
				var $11 = HEAP32[(($ph6) >> 2)];
				$ph = $11;
				var $12 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
				var $sub7 = ((($12) - 1) & 4294967295);
				var $13 = $plist_addr;
				var $arrayidx8 = (($13 + 24 * $sub7) & 4294967295);
				var $ph9 = (($arrayidx8 + 8) & 4294967295);
				var $14 = HEAP32[(($ph9) >> 2)];
				$ph_prev = $14;
				var $15 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
				var $add10 = ((($15) + 1) & 4294967295);
				var $16 = $plist_addr;
				var $arrayidx11 = (($16 + 24 * $add10) & 4294967295);
				var $ph12 = (($arrayidx11 + 8) & 4294967295);
				var $17 = HEAP32[(($ph12) >> 2)];
				$ph_next = $17;
				var $18 = $p;
				var $synthflags = (($18 + 4) & 4294967295);
				var $19 = HEAPU16[(($synthflags) >> 1)];
				var $conv = ((($19)) & 65535);
				var $and = ($conv) & 2;
				var $tobool13 = ((($and)) | 0) != 0;
				if ($tobool13) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $20 = $p;
					var $sourceix = (($20 + 6) & 4294967295);
					var $21 = HEAPU16[(($sourceix) >> 1)];
					var $conv15 = ((($21)) & 65535);
					__Z10DoEmbeddedPii(__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE11embedded_ix, $conv15);;
				}
				var $22 = $p;
				var $newword = (($22 + 19) & 4294967295);
				var $23 = HEAPU8[($newword)];
				var $conv17 = ((($23)) & 255);
				var $and18 = ($conv17) & 4;
				var $tobool19 = ((($and18)) | 0) != 0;
				if ($tobool19) {
					__label__ = 9;;
				} else {
					__label__ = 10;;
				}
				if (__label__ == 9) {
					var $24 = $p;
					var $sourceix21 = (($24 + 6) & 4294967295);
					var $25 = HEAPU16[(($sourceix21) >> 1)];
					var $conv22 = ((($25)) & 65535);
					var $and23 = ($conv22) & 2047;
					var $26 = HEAP32[((_clause_start_char) >> 2)];
					var $add24 = ((($and23) + ($26)) & 4294967295);
					var $27 = HEAP32[((_count_sentences) >> 2)];
					__Z8DoMarkeriiii(2, $add24, 0, $27);;
				}
				var $28 = $p;
				var $newword26 = (($28 + 19) & 4294967295);
				var $29 = HEAPU8[($newword26)];
				var $conv27 = ((($29)) & 255);
				var $and28 = ($conv27) & 1;
				var $tobool29 = ((($and28)) | 0) != 0;
				if ($tobool29) {
					__label__ = 11;;
				} else {
					__label__ = 12;;
				}
				if (__label__ == 11) {
					var $30 = $p;
					var $sourceix31 = (($30 + 6) & 4294967295);
					var $31 = HEAPU16[(($sourceix31) >> 1)];
					var $conv32 = ((($31)) & 65535);
					var $and33 = ($conv32) & 2047;
					var $32 = HEAP32[((_clause_start_char) >> 2)];
					var $add34 = ((($and33) + ($32)) & 4294967295);
					var $33 = $p;
					var $sourceix35 = (($33 + 6) & 4294967295);
					var $34 = HEAPU16[(($sourceix35) >> 1)];
					var $conv36 = ((($34)) & 65535);
					var $shr = ($conv36) >> 11;
					var $35 = HEAP32[((_clause_start_word) >> 2)];
					var $36 = HEAPU32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE10word_count) >> 2)];
					var $inc = ((($36) + 1) & 4294967295);
					HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE10word_count) >> 2)] = $inc;
					var $add37 = ((($36) + ($35)) & 4294967295);
					__Z8DoMarkeriiii(1, $add34, $shr, $add37);;
				}
				var $37 = $p;
				var $38 = $ph;
				var $39 = $ph_prev;
				var $40 = $ph_next;
				var $call39 = __ZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_($37, $38, $39, $40, $name2, $len_percent, $control);
				$name = $call39;
				var $41 = HEAP32[(($control) >> 2)];
				var $and40 = ($41) & 1;
				var $tobool41 = ((($and40)) | 0) != 0;
				if ($tobool41) {
					__lastLabel__ = 12;
					__label__ = 13;;
				} else {
					__lastLabel__ = 12;
					__label__ = 14;;
				}
				if (__label__ == 13) {
					var $42 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
					var $inc43 = ((($42) + 1) & 4294967295);
					HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)] = $inc43;
					var $_pr = $name;
					__lastLabel__ = 13;;
				}
				var $43 = __lastLabel__ == 13 ? $_pr : ($call39);
				var $cmp45 = ((($43)) | 0) == 0;
				if ($cmp45) {
					__label__ = 15;;
				} else {
					__label__ = 16;;
				}
				if (__label__ == 15) {
					var $44 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
					var $inc47 = ((($44) + 1) & 4294967295);
					HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)] = $inc47;
					__label__ = 3;
					continue $while_cond$5;
				} else if (__label__ == 16) {
					var $45 = $ph;
					var $type = (($45 + 11) & 4294967295);
					var $46 = HEAPU8[($type)];
					var $conv49 = ((($46)) & 255);
					var $cmp50 = ((($conv49)) | 0) == 0;
					if ($cmp50) {
						__label__ = 17;;
					} else {
						__label__ = 20;;
					}
					$land_lhs_true$$if_else$24: do {
						if (__label__ == 17) {
							var $47 = $name;
							var $48 = $ph;
							var $mnemonic = (($48) & 4294967295);
							var $49 = HEAP32[(($mnemonic) >> 2)];
							var $cmp51 = ((($47)) | 0) == ((($49)) | 0);
							if (!($cmp51)) {
								__label__ = 20;
								break $land_lhs_true$$if_else$24;
							}
							$name = 95;
							var $50 = $p;
							var $length = (($50 + 12) & 4294967295);
							var $51 = HEAP16[(($length) >> 1)];
							var $conv53 = (tempInt = (($51)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $52 = HEAP32[((((_speed) & 4294967295)) >> 2)];
							var $mul = ((($conv53) * ($52)) & 4294967295);
							var $div = ((((($mul)) | 0) / 256) | 0);
							$len = $div;
							var $53 = $len;
							var $cmp54 = ((($53)) | 0) == 0;
							if (!($cmp54)) {
								__label__ = 21;
								break $land_lhs_true$$if_else$24;
							}
							$len = 1;
							__label__ = 21;
							break $land_lhs_true$$if_else$24;
						}
					} while (0);
					if (__label__ == 20) {
						var $54 = HEAP32[((((_speed + 12) & 4294967295)) >> 2)];
						var $mul57 = ((($54) * 80) & 4294967295);
						var $div58 = ((((($mul57)) | 0) / 256) | 0);
						$len = $div58;;
					}
					var $55 = $p;
					var $sourceix60 = (($55 + 6) & 4294967295);
					var $56 = HEAPU16[(($sourceix60) >> 1)];
					var $conv61 = ((($56)) & 65535);
					var $and62 = ($conv61) & 2047;
					var $57 = HEAP32[((_clause_start_char) >> 2)];
					var $add63 = ((($and62) + ($57)) & 4294967295);
					var $58 = $ph;
					var $mnemonic64 = (($58) & 4294967295);
					var $59 = HEAP32[(($mnemonic64) >> 2)];
					__Z8DoMarkeriiii(7, $add63, 0, $59);
					var $60 = $ptr;
					var $61 = $name;
					var $call65 = __Z12WordToStringj($61);
					var $call66 = _sprintf($60, ((__str6388) & 4294967295), allocate([((__ZZ12WordToStringjE3buf) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					var $62 = $ptr;
					var $add_ptr = (($62 + $call66) & 4294967295);
					$ptr = $add_ptr;
					var $63 = HEAP32[(($name2) >> 2)];
					var $cmp67 = ((($63)) | 0) == 95;
					if ($cmp67) {
						__label__ = 22;;
					} else {
						__label__ = 23;;
					}
					if (__label__ == 22) {
						var $64 = HEAP32[(($len_percent) >> 2)];
						$pause = $64;
						HEAP32[(($name2) >> 2)] = 0;;
					}
					$done = 0;
					$final_pitch = ((__str13643) & 4294967295);
					var $65 = $ph;
					var $type70 = (($65 + 11) & 4294967295);
					var $66 = HEAPU8[($type70)];
					var $conv71 = ((($66)) & 255);
					if ($conv71 == 2) {
						__label__ = 24;;
					} else if ($conv71 == 4) {
						__label__ = 32;;
					} else if ($conv71 == 5) {
						__label__ = 40;;
					} else if ($conv71 == 6) {
						__label__ = 41;;
					} else if ($conv71 == 8) {
						__label__ = 44;;
					} else if ($conv71 == 3) {
						__label__ = 48;;
					} else {
						__label__ = 50;;
					}
					$sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34: do {
						if (__label__ == 24) {
							var $67 = $ph;
							var $std_length = (($67 + 14) & 4294967295);
							var $68 = HEAPU8[($std_length)];
							var $conv72 = ((($68)) & 255);
							$len = $conv72;
							var $69 = $p;
							var $synthflags73 = (($69 + 4) & 4294967295);
							var $70 = HEAPU16[(($synthflags73) >> 1)];
							var $conv74 = ((($70)) & 65535);
							var $and75 = ($conv74) & 8;
							var $tobool76 = ((($and75)) | 0) != 0;
							if ($tobool76) {
								__label__ = 25;;
							} else {
								__label__ = 26;;
							}
							if (__label__ == 25) {
								var $71 = HEAP32[((((_phoneme_tab + 48) & 4294967295)) >> 2)];
								var $std_length78 = (($71 + 14) & 4294967295);
								var $72 = HEAPU8[($std_length78)];
								var $conv79 = ((($72)) & 255);
								var $73 = $len;
								var $add80 = ((($73) + ($conv79)) & 4294967295);
								$len = $add80;;
							}
							var $74 = $ph_next;
							var $type82 = (($74 + 11) & 4294967295);
							var $75 = HEAPU8[($type82)];
							var $conv83 = ((($75)) & 255);
							var $cmp84 = ((($conv83)) | 0) == 0;
							if ($cmp84) {
								__label__ = 27;;
							} else {
								__label__ = 28;;
							}
							if (__label__ == 27) {
								var $76 = $len;
								var $add86 = ((($76) + 50) & 4294967295);
								$len = $add86;;
							}
							var $77 = $len;
							var $78 = $p;
							var $length88 = (($78 + 12) & 4294967295);
							var $79 = HEAP16[(($length88) >> 1)];
							var $conv89 = (tempInt = (($79)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $mul90 = ((($conv89) * ($77)) & 4294967295);
							var $div91 = ((((($mul90)) | 0) / 256) | 0);
							$len = $div91;
							var $80 = HEAP32[(($name2) >> 2)];
							var $cmp92 = ((($80)) | 0) == 0;
							var $81 = $p;
							var $env = (($81 + 14) & 4294967295);
							var $82 = HEAPU8[($env)];
							var $conv94 = ((($82)) & 255);
							var $83 = $p;
							var $pitch1 = (($83 + 20) & 4294967295);
							var $84 = HEAPU8[($pitch1)];
							var $conv95 = ((($84)) & 255);
							var $85 = $p;
							var $pitch2 = (($85 + 21) & 4294967295);
							var $86 = HEAPU8[($pitch2)];
							var $conv96 = ((($86)) & 255);
							if ($cmp92) {
								__label__ = 29;;
							} else {
								__label__ = 30;;
							}
							if (__label__ == 29) {
								__ZL10WritePitchiiiii($conv94, $conv95, $conv96, 0, 0);
								$pitch = ((__ZZL10WritePitchiiiiiE6output) & 4294967295);
								var $87 = $ptr;
								var $88 = $len;
								var $89 = $pitch;
								var $call98 = _sprintf($87, ((__str8390) & 4294967295), allocate([$88, 0, 0, 0, $89, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
								var $90 = $ptr;
								var $add_ptr99 = (($90 + $call98) & 4294967295);
								$ptr = $add_ptr99;;
							} else if (__label__ == 30) {
								var $91 = HEAP32[(($len_percent) >> 2)];
								__ZL10WritePitchiiiii($conv94, $conv95, $conv96, $91, 0);
								$pitch101 = ((__ZZL10WritePitchiiiiiE6output) & 4294967295);
								var $92 = $len;
								var $93 = HEAP32[(($len_percent) >> 2)];
								var $mul109 = ((($93) * ($92)) & 4294967295);
								var $div110 = ((((($mul109)) | 0) / 100) | 0);
								$len1 = $div110;
								var $94 = $ptr;
								var $95 = $len1;
								var $96 = $pitch101;
								var $call111 = _sprintf($94, ((__str8390) & 4294967295), allocate([$95, 0, 0, 0, $96, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
								var $97 = $ptr;
								var $add_ptr112 = (($97 + $call111) & 4294967295);
								$ptr = $add_ptr112;
								var $98 = $p;
								var $env113 = (($98 + 14) & 4294967295);
								var $99 = HEAPU8[($env113)];
								var $conv114 = ((($99)) & 255);
								var $100 = $p;
								var $pitch1115 = (($100 + 20) & 4294967295);
								var $101 = HEAPU8[($pitch1115)];
								var $conv116 = ((($101)) & 255);
								var $102 = $p;
								var $pitch2117 = (($102 + 21) & 4294967295);
								var $103 = HEAPU8[($pitch2117)];
								var $conv118 = ((($103)) & 255);
								var $104 = HEAP32[(($len_percent) >> 2)];
								var $sub119 = (((-($104))) & 4294967295);
								__ZL10WritePitchiiiii($conv114, $conv116, $conv118, $sub119, 0);
								$pitch101 = ((__ZZL10WritePitchiiiiiE6output) & 4294967295);
								var $105 = $ptr;
								var $106 = HEAP32[(($name2) >> 2)];
								var $call121 = __Z12WordToStringj($106);
								var $107 = $len;
								var $108 = $len1;
								var $sub122 = ((($107) - ($108)) & 4294967295);
								var $109 = $pitch101;
								var $call123 = _sprintf($105, ((__str9391) & 4294967295), allocate([((__ZZ12WordToStringjE3buf) & 4294967295), 0, 0, 0, $sub122, 0, 0, 0, $109, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
								var $110 = $ptr;
								var $add_ptr124 = (($110 + $call123) & 4294967295);
								$ptr = $add_ptr124;;
							}
							$done = 1;
							__label__ = 54;
							break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
						} else if (__label__ == 32) {
							$released = 0;
							var $111 = $next;
							var $type127 = (($111 + 15) & 4294967295);
							var $112 = HEAPU8[($type127)];
							var $conv128 = ((($112)) & 255);
							var $cmp129 = ((($conv128)) | 0) == 2;
							if ($cmp129) {
								__label__ = 33;;
							} else {
								__label__ = 34;;
							}
							if (__label__ == 33) {
								$released = 1;;
							}
							var $113 = $next;
							var $type132 = (($113 + 15) & 4294967295);
							var $114 = HEAPU8[($type132)];
							var $conv133 = ((($114)) & 255);
							var $cmp134 = ((($conv133)) | 0) == 3;
							if ($cmp134) {
								__label__ = 35;;
							} else {
								__label__ = 37;;
							}
							$land_lhs_true135$$if_end139$50: do {
								if (__label__ == 35) {
									var $115 = $next;
									var $newword136 = (($115 + 19) & 4294967295);
									var $116 = HEAP8[($newword136)];
									var $tobool137 = (tempInt = (($116)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
									if ($tobool137) {
										__label__ = 37;
										break $land_lhs_true135$$if_end139$50;
									}
									$released = 1;
									__label__ = 39;
									break $land_lhs_true135$$if_end139$50;
								}
							} while (0);
							$if_end139$$if_end145$53: do {
								if (__label__ == 37) {
									var $_pr1 = $released;
									var $cmp140 = ((($_pr1)) | 0) == 0;
									if (!($cmp140)) {
										__label__ = 39;
										break $if_end139$$if_end145$53;
									}
									var $117 = $p;
									var $synthflags142 = (($117 + 4) & 4294967295);
									var $118 = HEAPU16[(($synthflags142) >> 1)];
									var $conv143 = ((($118)) & 65535);
									var $or = ($conv143) | 8192;
									var $conv144 = ((($or)) & 65535);
									HEAP16[(($synthflags142) >> 1)] = $conv144;;
								}
							} while (0);
							var $119 = $p;
							__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $119, $phdata);
							var $call146 = __Z9DoSample3P12PHONEME_DATAii($phdata, 0, -1);
							$len = $call146;
							var $120 = $len;
							var $mul147 = ((($120) * 1000) & 4294967295);
							var $121 = HEAP32[((_samplerate) >> 2)];
							var $div148 = ((((($mul147)) | 0) / ((($121)) | 0)) | 0);
							$len = $div148;
							var $122 = $p;
							var $prepause = (($122 + 16) & 4294967295);
							var $123 = HEAPU8[($prepause)];
							var $conv149 = ((($123)) & 255);
							var $call150 = __Z11PauseLengthii($conv149, 1);
							var $124 = $len;
							var $add151 = ((($124) + ($call150)) & 4294967295);
							$len = $add151;
							__label__ = 50;
							break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
						} else if (__label__ == 40) {
							var $125 = HEAP32[((((_speed + 12) & 4294967295)) >> 2)];
							var $mul153 = ((($125) * 80) & 4294967295);
							var $div154 = ((((($mul153)) | 0) / 256) | 0);
							$len = $div154;
							__label__ = 50;
							break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
						} else if (__label__ == 41) {
							$len = 0;
							var $126 = $p;
							__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $126, $phdata);
							var $127 = $p;
							var $synthflags156 = (($127 + 4) & 4294967295);
							var $128 = HEAPU16[(($synthflags156) >> 1)];
							var $conv157 = ((($128)) & 65535);
							var $and158 = ($conv157) & 8;
							var $tobool159 = ((($and158)) | 0) != 0;
							if ($tobool159) {
								__label__ = 42;;
							} else {
								__label__ = 43;;
							}
							if (__label__ == 42) {
								var $129 = $p;
								var $length161 = (($129 + 12) & 4294967295);
								var $130 = HEAP16[(($length161) >> 1)];
								var $conv162 = (tempInt = (($130)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $call163 = __Z9DoSample3P12PHONEME_DATAii($phdata, $conv162, -1);
								$len = $call163;;
							}
							var $131 = $p;
							var $length165 = (($131 + 12) & 4294967295);
							var $132 = HEAP16[(($length165) >> 1)];
							var $conv166 = (tempInt = (($132)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $call167 = __Z9DoSample3P12PHONEME_DATAii($phdata, $conv166, -1);
							var $133 = $len;
							var $add168 = ((($133) + ($call167)) & 4294967295);
							$len = $add168;
							var $134 = $len;
							var $mul169 = ((($134) * 1000) & 4294967295);
							var $135 = HEAP32[((_samplerate) >> 2)];
							var $div170 = ((((($mul169)) | 0) / ((($135)) | 0)) | 0);
							$len = $div170;
							__label__ = 50;
							break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
						} else if (__label__ == 44) {
							var $136 = $next;
							var $type172 = (($136 + 15) & 4294967295);
							var $137 = HEAPU8[($type172)];
							var $conv173 = ((($137)) & 255);
							var $cmp174 = ((($conv173)) | 0) != 2;
							if (!($cmp174)) {
								__label__ = 50;
								break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
							}
							var $dest$, $stop$, $stop4$, $fast$, $value4$;
							$dest$ = $1;
							$stop$ = $dest$ + 48;
							$value4$ = 0;
							if ($value4$ < 0) $value4$ += 256;
							$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
							while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
								HEAP8[$dest$++] = 0;
							}
							$dest$ >>= 2;
							$stop4$ = $stop$ >> 2;
							while ($dest$ < $stop4$) {;;;;;;;
								HEAP32[$dest$++] = $value4$;
							}
							$dest$ <<= 2;
							while ($dest$ < $stop$) {;;
								HEAP8[$dest$++] = 0;
							};
							var $138 = $p;
							__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $138, $phdata);
							var $139 = HEAP32[(($arrayidx176) >> 2)];
							HEAP32[(($fmt_addr) >> 2)] = $139;
							var $140 = $p;
							var $ph177 = (($140 + 8) & 4294967295);
							var $141 = HEAP32[(($ph177) >> 2)];
							var $142 = $p;
							var $call178 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($141, 0, $fmtp, $142, -1);
							$len = $call178;
							var $143 = $len;
							var $mul179 = ((($143) * 1000) & 4294967295);
							var $144 = HEAP32[((_samplerate) >> 2)];
							var $div180 = ((((($mul179)) | 0) / ((($144)) | 0)) | 0);
							$len = $div180;
							var $145 = $next;
							var $type181 = (($145 + 15) & 4294967295);
							var $146 = HEAPU8[($type181)];
							var $conv182 = ((($146)) & 255);
							var $cmp183 = ((($conv182)) | 0) == 0;
							if ($cmp183) {
								__label__ = 46;;
							} else {
								__label__ = 47;;
							}
							if (__label__ == 46) {
								var $147 = $len;
								var $add185 = ((($147) + 50) & 4294967295);
								$len = $add185;;
							}
							var $148 = $p;
							var $env187 = (($148 + 14) & 4294967295);
							var $149 = HEAPU8[($env187)];
							var $conv188 = ((($149)) & 255);
							var $150 = $p;
							var $pitch1189 = (($150 + 20) & 4294967295);
							var $151 = HEAPU8[($pitch1189)];
							var $conv190 = ((($151)) & 255);
							var $152 = $p;
							var $pitch2191 = (($152 + 21) & 4294967295);
							var $153 = HEAPU8[($pitch2191)];
							var $conv192 = ((($153)) & 255);
							__ZL10WritePitchiiiii($conv188, $conv190, $conv192, 0, 1);
							$final_pitch = ((__ZZL10WritePitchiiiiiE6output) & 4294967295);
							__label__ = 50;
							break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
						} else if (__label__ == 48) {
							var $154 = $next;
							var $type196 = (($154 + 15) & 4294967295);
							var $155 = HEAPU8[($type196)];
							var $conv197 = ((($155)) & 255);
							var $cmp198 = ((($conv197)) | 0) == 0;
							if (!($cmp198)) {
								__label__ = 50;
								break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
							}
							var $156 = $len;
							var $add200 = ((($156) + 50) & 4294967295);
							$len = $add200;
							var $157 = $p;
							var $env201 = (($157 + 14) & 4294967295);
							var $158 = HEAPU8[($env201)];
							var $conv202 = ((($158)) & 255);
							var $159 = $p;
							var $pitch1203 = (($159 + 20) & 4294967295);
							var $160 = HEAPU8[($pitch1203)];
							var $conv204 = ((($160)) & 255);
							var $161 = $p;
							var $pitch2205 = (($161 + 21) & 4294967295);
							var $162 = HEAPU8[($pitch2205)];
							var $conv206 = ((($162)) & 255);
							__ZL10WritePitchiiiii($conv202, $conv204, $conv206, 0, 1);
							$final_pitch = ((__ZZL10WritePitchiiiiiE6output) & 4294967295);
							__label__ = 50;
							break $sw_epilog$$sw_bb$$sw_bb126$$sw_bb152$$sw_bb155$$sw_bb171$$sw_bb195$34;
						}
					} while (0);
					$sw_epilog$$if_end222$69: do {
						if (__label__ == 50) {
							var $_pr3 = $done;
							var $tobool209 = ((($_pr3)) | 0) != 0;
							if ($tobool209) {
								__label__ = 54;
								break $sw_epilog$$if_end222$69;
							}
							var $163 = HEAP32[(($name2) >> 2)];
							var $cmp211 = ((($163)) | 0) != 0;
							if ($cmp211) {
								__label__ = 52;;
							} else {
								__label__ = 53;;
							}
							if (__label__ == 52) {
								var $164 = $len;
								var $165 = HEAP32[(($len_percent) >> 2)];
								var $mul213 = ((($165) * ($164)) & 4294967295);
								var $div214 = ((((($mul213)) | 0) / 100) | 0);
								$len1 = $div214;
								var $166 = $ptr;
								var $167 = $len1;
								var $168 = HEAP32[(($name2) >> 2)];
								var $call215 = __Z12WordToStringj($168);
								var $call216 = _sprintf($166, ((__str10392) & 4294967295), allocate([$167, 0, 0, 0, ((__ZZ12WordToStringjE3buf) & 4294967295), 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
								var $169 = $ptr;
								var $add_ptr217 = (($169 + $call216) & 4294967295);
								$ptr = $add_ptr217;
								var $170 = $len1;
								var $171 = $len;
								var $sub218 = ((($171) - ($170)) & 4294967295);
								$len = $sub218;;
							}
							var $172 = $ptr;
							var $173 = $len;
							var $174 = $final_pitch;
							var $call220 = _sprintf($172, ((__str11393) & 4294967295), allocate([$173, 0, 0, 0, $174, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							var $175 = $ptr;
							var $add_ptr221 = (($175 + $call220) & 4294967295);
							$ptr = $add_ptr221;;
						}
					} while (0);
					var $176 = $pause;
					var $tobool223 = ((($176)) | 0) != 0;
					if ($tobool223) {
						__label__ = 55;;
					} else {
						__label__ = 56;;
					}
					if (__label__ == 55) {
						var $177 = $pause;
						var $call225 = __Z11PauseLengthii($177, 0);
						var $178 = $len;
						var $add226 = ((($178) + ($call225)) & 4294967295);
						$len = $add226;
						var $179 = $ptr;
						var $180 = $pause;
						var $call227 = __Z11PauseLengthii($180, 0);
						var $call228 = _sprintf($179, ((__str12394) & 4294967295), allocate([$call227, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
						var $181 = $ptr;
						var $add_ptr229 = (($181 + $call228) & 4294967295);
						$ptr = $add_ptr229;
						$pause = 0;;
					}
					var $182 = $f_mbrola_addr;
					var $tobool231 = ((($182)) | 0) != 0;
					if ($tobool231) {
						__label__ = 57;;
					} else {
						__label__ = 58;;
					}
					if (__label__ == 57) {
						var $183 = $ptr;
						var $sub_ptr_lhs_cast = ($183);
						var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
						var $184 = $f_mbrola_addr;
						var $call235 = _fwrite($arraydecay233, 1, $sub_ptr_sub, $184);;
					} else if (__label__ == 58) {
						var $call238 = _write_MBR($arraydecay233);
						$res = $call238;
						var $185 = $res;
						var $cmp239 = ((($185)) | 0) < 0;
						if ($cmp239) {
							__label__ = 59;
							break $while_cond$5;
						}
						var $186 = $res;
						var $cmp242 = ((($186)) | 0) == 0;
						if ($cmp242) {
							__label__ = 61;
							break $while_cond$5;
						}
						var $187 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx245 = ((_wcmdq + $187 * 16) & 4294967295);
						var $arrayidx246 = (($arrayidx245) & 4294967295);
						HEAP32[(($arrayidx246) >> 2)] = 13;
						var $188 = $len;
						var $189 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx247 = ((_wcmdq + $189 * 16) & 4294967295);
						var $arrayidx248 = (($arrayidx247 + 4) & 4294967295);
						HEAP32[(($arrayidx248) >> 2)] = $188;
						__Z8WcmdqIncv();;
					}
					var $190 = HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)];
					var $inc250 = ((($190) + 1) & 4294967295);
					HEAP32[((__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix) >> 2)] = $inc250;
					__label__ = 3;
					continue $while_cond$5;
				}
			}
			if (__label__ == 64) {
				var $191 = $f_mbrola_addr;
				var $tobool251 = ((($191)) | 0) != 0;
				if ($tobool251) {
					__label__ = 66;;
				} else {
					__label__ = 65;;
				}
				if (__label__ == 65) {
					var $call253 = _flush_MBR();
					var $192 = HEAP32[((_wcmdq_tail) >> 2)];
					var $arrayidx254 = ((_wcmdq + $192 * 16) & 4294967295);
					var $arrayidx255 = (($arrayidx254) & 4294967295);
					HEAP32[(($arrayidx255) >> 2)] = 13;
					var $193 = HEAP32[((_wcmdq_tail) >> 2)];
					var $arrayidx256 = ((_wcmdq + $193 * 16) & 4294967295);
					var $arrayidx257 = (($arrayidx256 + 4) & 4294967295);
					HEAP32[(($arrayidx257) >> 2)] = 500;
					__Z8WcmdqIncv();;
				}
				$retval = 0;;
			} else if (__label__ == 5) {
				$retval = 1;;
			} else if (__label__ == 59) {
				$retval = 0;;
			} else if (__label__ == 61) {
				$retval = 1;;
			}
			var $194 = $retval;
			STACKTOP = __stackBase__;
			return $194;
			return null;
		}

		function __ZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_($plist, $ph, $ph_prev, $ph_next, $name2, $split, $control) {;
			var __label__;
			var $retval;
			var $plist_addr;
			var $ph_addr;
			var $ph_prev_addr;
			var $ph_next_addr;
			var $name2_addr;
			var $split_addr;
			var $control_addr;
			var $pr;
			var $other_ph;
			var $found;
			$plist_addr = $plist;
			$ph_addr = $ph;
			$ph_prev_addr = $ph_prev;
			$ph_next_addr = $ph_next;
			$name2_addr = $name2;
			$split_addr = $split;
			$control_addr = $control;
			$found = 0;
			var $0 = $name2_addr;
			HEAP32[(($0) >> 2)] = 0;
			var $1 = $split_addr;
			HEAP32[(($1) >> 2)] = 0;
			var $2 = $control_addr;
			HEAP32[(($2) >> 2)] = 0;
			var $3 = $ph_addr;
			var $mnemonic = (($3) & 4294967295);
			var $4 = HEAP32[(($mnemonic) >> 2)];
			HEAP32[((__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem) >> 2)] = $4;
			var $5 = HEAP32[((__ZL10mbrola_tab) >> 2)];
			$pr = $5;;
			$while_cond$2: while (1) {
				var $6 = $pr;
				var $name = (($6) & 4294967295);
				var $7 = HEAP32[(($name) >> 2)];
				var $cmp = ((($7)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 28;
					break $while_cond$2;
				}
				var $8 = HEAP32[((__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem) >> 2)];
				var $9 = $pr;
				var $name1 = (($9) & 4294967295);
				var $10 = HEAP32[(($name1) >> 2)];
				var $cmp2 = ((($8)) | 0) == ((($10)) | 0);
				if ($cmp2) {
					__label__ = 3;;
				} else {
					__label__ = 27;;
				}
				$if_then$$if_end60$5: do {
					if (__label__ == 3) {
						var $11 = $pr;
						var $next_phoneme = (($11 + 4) & 4294967295);
						var $12 = HEAP32[(($next_phoneme) >> 2)];
						var $cmp3 = ((($12)) | 0) == 0;
						if ($cmp3) {
							__label__ = 4;;
						} else {
							__label__ = 5;;
						}
						$if_then4$$if_else$7: do {
							if (__label__ == 4) {
								$found = 1;;
							} else if (__label__ == 5) {
								var $13 = $pr;
								var $next_phoneme5 = (($13 + 4) & 4294967295);
								var $14 = HEAP32[(($next_phoneme5) >> 2)];
								var $cmp6 = ((($14)) | 0) == 58;
								if ($cmp6) {
									__label__ = 6;;
								} else {
									__label__ = 8;;
								}
								$land_lhs_true$$if_else8$10: do {
									if (__label__ == 6) {
										var $15 = $plist_addr;
										var $synthflags = (($15 + 4) & 4294967295);
										var $16 = HEAPU16[(($synthflags) >> 1)];
										var $conv = ((($16)) & 65535);
										var $and = ($conv) & 8;
										var $tobool = ((($and)) | 0) != 0;
										if (!($tobool)) {
											__label__ = 8;
											break $land_lhs_true$$if_else8$10;
										}
										$found = 1;
										__label__ = 20;
										break $if_then4$$if_else$7;
									}
								} while (0);
								var $17 = $pr;
								var $control9 = (($17 + 20) & 4294967295);
								var $18 = HEAP32[(($control9) >> 2)];
								var $and10 = ($18) & 2;
								var $tobool11 = ((($and10)) | 0) != 0;
								if ($tobool11) {
									__label__ = 9;;
								} else {
									__label__ = 10;;
								}
								$if_then12$$if_else13$14: do {
									if (__label__ == 9) {
										var $19 = $ph_prev_addr;
										$other_ph = $19;;
									} else if (__label__ == 10) {
										var $20 = $pr;
										var $control14 = (($20 + 20) & 4294967295);
										var $21 = HEAP32[(($control14) >> 2)];
										var $and15 = ($21) & 8;
										var $tobool16 = ((($and15)) | 0) != 0;
										if ($tobool16) {
											__label__ = 11;;
										} else {
											__label__ = 13;;
										}
										$land_lhs_true17$$if_else20$17: do {
											if (__label__ == 11) {
												var $22 = $plist_addr;
												var $add_ptr = (($22 + 24) & 4294967295);
												var $newword = (($add_ptr + 19) & 4294967295);
												var $23 = HEAP8[($newword)];
												var $tobool18 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
												if (!($tobool18)) {
													__label__ = 13;
													break $land_lhs_true17$$if_else20$17;
												}
												var $24 = HEAP32[((((_phoneme_tab) & 4294967295)) >> 2)];
												$other_ph = $24;
												__label__ = 14;
												break $if_then12$$if_else13$14;
											}
										} while (0);
										var $25 = $ph_next_addr;
										$other_ph = $25;;
									}
								} while (0);
								var $26 = $pr;
								var $next_phoneme22 = (($26 + 4) & 4294967295);
								var $27 = HEAP32[(($next_phoneme22) >> 2)];
								var $28 = $other_ph;
								var $mnemonic23 = (($28) & 4294967295);
								var $29 = HEAP32[(($mnemonic23) >> 2)];
								var $cmp24 = ((($27)) | 0) == ((($29)) | 0);
								if ($cmp24) {
									__label__ = 19;;
								} else {
									__label__ = 15;;
								}
								$if_then37$$lor_lhs_false$22: do {
									if (__label__ == 15) {
										var $30 = $pr;
										var $next_phoneme25 = (($30 + 4) & 4294967295);
										var $31 = HEAP32[(($next_phoneme25) >> 2)];
										var $cmp26 = ((($31)) | 0) == 2;
										if ($cmp26) {
											__label__ = 16;;
										} else {
											__label__ = 17;;
										}
										if (__label__ == 16) {
											var $32 = $other_ph;
											var $type = (($32 + 11) & 4294967295);
											var $33 = HEAPU8[($type)];
											var $conv28 = ((($33)) & 255);
											var $cmp29 = ((($conv28)) | 0) == 2;
											if ($cmp29) {
												__label__ = 19;
												break $if_then37$$lor_lhs_false$22;
											}
										}
										var $34 = $pr;
										var $next_phoneme31 = (($34 + 4) & 4294967295);
										var $35 = HEAP32[(($next_phoneme31) >> 2)];
										var $cmp32 = ((($35)) | 0) == 95;
										if (!($cmp32)) {
											__label__ = 20;
											break $if_then4$$if_else$7;
										}
										var $36 = $other_ph;
										var $type34 = (($36 + 11) & 4294967295);
										var $37 = HEAPU8[($type34)];
										var $conv35 = ((($37)) & 255);
										var $cmp36 = ((($conv35)) | 0) == 0;
										if (!($cmp36)) {
											__label__ = 20;
											break $if_then4$$if_else$7;
										}
									}
								} while (0);
								$found = 1;;
							}
						} while (0);
						var $38 = $pr;
						var $control41 = (($38 + 20) & 4294967295);
						var $39 = HEAP32[(($control41) >> 2)];
						var $and42 = ($39) & 4;
						var $tobool43 = ((($and42)) | 0) != 0;
						if ($tobool43) {
							__label__ = 21;;
						} else {
							__label__ = 23;;
						}
						$land_lhs_true44$$if_end49$30: do {
							if (__label__ == 21) {
								var $40 = $plist_addr;
								var $newword45 = (($40 + 19) & 4294967295);
								var $41 = HEAPU8[($newword45)];
								var $conv46 = ((($41)) & 255);
								var $cmp47 = ((($conv46)) | 0) == 0;
								if (!($cmp47)) {
									__label__ = 23;
									break $land_lhs_true44$$if_end49$30;
								}
								$found = 0;
								__label__ = 27;
								break $if_then$$if_end60$5;
							}
						} while (0);
						var $_pr = $found;
						var $tobool50 = ((($_pr)) | 0) != 0;
						if ($tobool50) {
							__label__ = 24;
							break $while_cond$2;
						}
					}
				} while (0);
				var $55 = $pr;
				var $incdec_ptr = (($55 + 24) & 4294967295);
				$pr = $incdec_ptr;
				__label__ = 1;
				continue $while_cond$2;
			}
			$while_end$$if_then51$35: do {
				if (__label__ == 24) {
					var $42 = $pr;
					var $mbr_name2 = (($42 + 12) & 4294967295);
					var $43 = HEAP32[(($mbr_name2) >> 2)];
					var $44 = $name2_addr;
					HEAP32[(($44) >> 2)] = $43;
					var $45 = $pr;
					var $percent = (($45 + 16) & 4294967295);
					var $46 = HEAP32[(($percent) >> 2)];
					var $47 = $split_addr;
					HEAP32[(($47) >> 2)] = $46;
					var $48 = $pr;
					var $control52 = (($48 + 20) & 4294967295);
					var $49 = HEAP32[(($control52) >> 2)];
					var $50 = $control_addr;
					HEAP32[(($50) >> 2)] = $49;
					var $51 = $pr;
					var $control53 = (($51 + 20) & 4294967295);
					var $52 = HEAP32[(($control53) >> 2)];
					var $and54 = ($52) & 16;
					var $tobool55 = ((($and54)) | 0) != 0;
					var $53 = $pr;
					var $mbr_name = (($53 + 8) & 4294967295);
					var $54 = HEAP32[(($mbr_name) >> 2)];
					if ($tobool55) {
						__label__ = 25;;
					} else {
						__label__ = 26;;
					}
					if (__label__ == 25) {
						HEAP32[((__ZL15mbr_name_prefix) >> 2)] = $54;
						$retval = 0;
						__label__ = 31;
						break $while_end$$if_then51$35;
					} else if (__label__ == 26) {
						HEAP32[((__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem) >> 2)] = $54;
						__label__ = 28;
						break $while_end$$if_then51$35;
					}
				}
			} while (0);
			if (__label__ == 28) {
				var $56 = HEAP32[((__ZL15mbr_name_prefix) >> 2)];
				var $cmp61 = ((($56)) | 0) != 0;
				if ($cmp61) {
					__label__ = 29;;
				} else {
					__label__ = 30;;
				}
				if (__label__ == 29) {
					var $57 = HEAP32[((__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem) >> 2)];
					var $shl = ($57) << 8;
					var $58 = HEAP32[((__ZL15mbr_name_prefix) >> 2)];
					var $and63 = ($58) & 255;
					var $or = ($and63) | ($shl);
					HEAP32[((__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem) >> 2)] = $or;;
				}
				HEAP32[((__ZL15mbr_name_prefix) >> 2)] = 0;
				var $59 = HEAP32[((__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem) >> 2)];
				$retval = $59;;
			}
			var $60 = $retval;;
			return $60;
			return null;
		}

		function __ZL10WritePitchiiiii($env, $pitch1, $pitch2, $split, $final) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 76;
			_memset(__stackBase__, 0, 76);
			var __label__;
			var __lastLabel__ = null;
			var $env_addr;
			var $pitch1_addr;
			var $pitch2_addr;
			var $split_addr;
			var $final_addr;
			var $x;
			var $ix;
			var $pitch_base = __stackBase__;
			var $pitch_range = __stackBase__ + 4;
			var $p1;
			var $p2;
			var $p_end;
			var $pitch_env;
			var $max;
			var $min;
			var $y_max;
			var $y_min;
			var $env100;
			var $y2;
			var $y = __stackBase__ + 8;
			var $env_split;
			var $buf = __stackBase__ + 24;
			$env_addr = $env;
			$pitch1_addr = $pitch1;
			$pitch2_addr = $pitch2;
			$split_addr = $split;
			$final_addr = $final;
			$max = -1;
			$min = 999;
			$y_max = 0;
			$y_min = 0;
			$env100 = 80;
			HEAP8[(((__ZZL10WritePitchiiiiiE6output) & 4294967295))] = 0;
			var $0 = $env_addr;
			var $arrayidx = ((_envelope_data + $0 * 4) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			$pitch_env = $1;
			var $2 = HEAP32[((_voice) >> 2)];
			var $3 = $pitch1_addr;
			var $4 = $pitch2_addr;
			__Z9SetPitch2P7voice_tiiPiS1_($2, $3, $4, $pitch_base, $pitch_range);
			var $5 = $split_addr;
			var $mul = ((($5) * 128) & 4294967295);
			var $div = ((((($mul)) | 0) / 100) | 0);
			$env_split = $div;
			var $6 = $env_split;
			var $cmp = ((($6)) | 0) < 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $7 = $env_split;
				var $sub = (((-($7))) & 4294967295);
				$env_split = $sub;;
			}
			$x = 0;;
			$for_body$5: while (1) {
				var $8 = $x;
				var $9 = $pitch_env;
				var $arrayidx2 = (($9 + $8) & 4294967295);
				var $10 = HEAPU8[($arrayidx2)];
				var $conv = ((($10)) & 255);
				var $11 = $max;
				var $cmp3 = ((($conv)) | 0) > ((($11)) | 0);
				if ($cmp3) {
					__label__ = 4;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 4) {
					var $12 = $x;
					var $13 = $pitch_env;
					var $arrayidx5 = (($13 + $12) & 4294967295);
					var $14 = HEAPU8[($arrayidx5)];
					var $conv6 = ((($14)) & 255);
					$max = $conv6;
					var $15 = $x;
					$y_max = $15;;
				}
				var $16 = $x;
				var $17 = $pitch_env;
				var $arrayidx8 = (($17 + $16) & 4294967295);
				var $18 = HEAPU8[($arrayidx8)];
				var $conv9 = ((($18)) & 255);
				var $19 = $min;
				var $cmp10 = ((($conv9)) | 0) < ((($19)) | 0);
				if ($cmp10) {
					__label__ = 6;;
				} else {
					__label__ = 7;;
				}
				if (__label__ == 6) {
					var $20 = $x;
					var $21 = $pitch_env;
					var $arrayidx12 = (($21 + $20) & 4294967295);
					var $22 = HEAPU8[($arrayidx12)];
					var $conv13 = ((($22)) & 255);
					$min = $conv13;
					var $23 = $x;
					$y_min = $23;;
				}
				var $24 = $x;
				var $inc = ((($24) + 1) & 4294967295);
				$x = $inc;
				var $cmp1 = ((($inc)) | 0) < 128;
				if ($cmp1) {
					__label__ = 3;
					continue $for_body$5;
				} else {
					__label__ = 8;
					break $for_body$5;
				}
			}
			var $arrayidx15 = (($y + 8) & 4294967295);
			HEAP32[(($arrayidx15) >> 2)] = 64;
			var $25 = $y_max;
			var $cmp16 = ((($25)) | 0) > 0;
			var $26 = $y_max;
			var $cmp17 = ((($26)) | 0) < 127;
			var $or_cond = ($cmp16) & ($cmp17);
			if ($or_cond) {
				__label__ = 9;;
			} else {
				__label__ = 10;;
			}
			if (__label__ == 9) {
				var $27 = $y_max;
				var $arrayidx19 = (($y + 8) & 4294967295);
				HEAP32[(($arrayidx19) >> 2)] = $27;;
			}
			var $28 = $y_min;
			var $cmp21 = ((($28)) | 0) > 0;
			var $29 = $y_min;
			var $cmp23 = ((($29)) | 0) < 127;
			var $or_cond1 = ($cmp21) & ($cmp23);
			if ($or_cond1) {
				__label__ = 11;;
			} else {
				__label__ = 12;;
			}
			if (__label__ == 11) {
				var $30 = $y_min;
				var $arrayidx25 = (($y + 8) & 4294967295);
				HEAP32[(($arrayidx25) >> 2)] = $30;;
			}
			var $arrayidx27 = (($y + 8) & 4294967295);
			var $31 = HEAP32[(($arrayidx27) >> 2)];
			var $div28 = ((((($31)) | 0) / 2) | 0);
			var $arrayidx29 = (($y + 4) & 4294967295);
			HEAP32[(($arrayidx29) >> 2)] = $div28;
			var $arrayidx30 = (($y + 8) & 4294967295);
			var $32 = HEAP32[(($arrayidx30) >> 2)];
			var $arrayidx31 = (($y + 8) & 4294967295);
			var $33 = HEAP32[(($arrayidx31) >> 2)];
			var $sub32 = ((127 - ($33)) & 4294967295);
			var $div33 = ((((($sub32)) | 0) / 2) | 0);
			var $add = ((($div33) + ($32)) & 4294967295);
			var $arrayidx34 = (($y + 12) & 4294967295);
			HEAP32[(($arrayidx34) >> 2)] = $add;
			var $34 = $pitch_env;
			var $arrayidx35 = (($34) & 4294967295);
			var $35 = HEAPU8[($arrayidx35)];
			var $conv36 = ((($35)) & 255);
			var $36 = HEAP32[(($pitch_range) >> 2)];
			var $mul37 = ((($conv36) * ($36)) & 4294967295);
			var $shr = ($mul37) >> 8;
			var $37 = HEAP32[(($pitch_base) >> 2)];
			var $add38 = ((($shr) + ($37)) & 4294967295);
			$p1 = $add38;
			var $38 = $pitch_env;
			var $arrayidx39 = (($38 + 127) & 4294967295);
			var $39 = HEAPU8[($arrayidx39)];
			var $conv40 = ((($39)) & 255);
			var $40 = HEAP32[(($pitch_range) >> 2)];
			var $mul41 = ((($conv40) * ($40)) & 4294967295);
			var $shr42 = ($mul41) >> 8;
			var $41 = HEAP32[(($pitch_base) >> 2)];
			var $add43 = ((($shr42) + ($41)) & 4294967295);
			$p_end = $add43;
			var $42 = $split_addr;
			var $cmp44 = ((($42)) | 0) >= 0;
			if ($cmp44) {
				__label__ = 13;;
			} else {
				__label__ = 14;;
			}
			if (__label__ == 13) {
				var $arraydecay = (($buf) & 4294967295);
				var $43 = $p1;
				var $div46 = ((((($43)) | 0) / 4096) | 0);
				var $call = _sprintf($arraydecay, ((__str13395) & 4294967295), allocate([$div46, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
				var $arraydecay47 = (($buf) & 4294967295);
				var $call48 = _strcat(((__ZZL10WritePitchiiiiiE6output) & 4294967295), $arraydecay47);;
			}
			var $44 = $env_addr;
			var $cmp50 = ((($44)) | 0) > 1;
			if ($cmp50) {
				__label__ = 15;;
			} else {
				__label__ = 25;;
			}
			$if_then51$$if_end91$23: do {
				if (__label__ == 15) {
					$ix = 1;
					var $arraydecay82 = (($buf) & 4294967295);
					var $arraydecay85 = (($buf) & 4294967295);;
					$for_body54$25: while (1) {
						var $45 = $ix;
						var $arrayidx55 = (($y + $45 * 4) & 4294967295);
						var $46 = HEAP32[(($arrayidx55) >> 2)];
						var $47 = $pitch_env;
						var $arrayidx56 = (($47 + $46) & 4294967295);
						var $48 = HEAPU8[($arrayidx56)];
						var $conv57 = ((($48)) & 255);
						var $49 = HEAP32[(($pitch_range) >> 2)];
						var $mul58 = ((($conv57) * ($49)) & 4294967295);
						var $shr59 = ($mul58) >> 8;
						var $50 = HEAP32[(($pitch_base) >> 2)];
						var $add60 = ((($shr59) + ($50)) & 4294967295);
						$p2 = $add60;
						var $51 = $split_addr;
						var $cmp61 = ((($51)) | 0) > 0;
						if ($cmp61) {
							__label__ = 17;;
						} else {
							__label__ = 18;;
						}
						if (__label__ == 17) {
							var $52 = $ix;
							var $arrayidx63 = (($y + $52 * 4) & 4294967295);
							var $53 = HEAP32[(($arrayidx63) >> 2)];
							var $54 = $env100;
							var $mul64 = ((($54) * ($53)) & 4294967295);
							var $55 = $env_split;
							var $div65 = ((((($mul64)) | 0) / ((($55)) | 0)) | 0);
							$y2 = $div65;
							__lastLabel__ = 17;;
						} else if (__label__ == 18) {
							var $56 = $split_addr;
							var $cmp66 = ((($56)) | 0) < 0;
							var $57 = $ix;
							var $arrayidx68 = (($y + $57 * 4) & 4294967295);
							var $58 = HEAP32[(($arrayidx68) >> 2)];
							if ($cmp66) {
								__label__ = 19;;
							} else {
								__label__ = 20;;
							}
							if (__label__ == 19) {
								var $59 = $env_split;
								var $sub69 = ((($58) - ($59)) & 4294967295);
								var $60 = $env100;
								var $mul70 = ((($sub69) * ($60)) & 4294967295);
								var $61 = $env_split;
								var $div71 = ((((($mul70)) | 0) / ((($61)) | 0)) | 0);
								$y2 = $div71;
								__lastLabel__ = 19;;
							} else if (__label__ == 20) {
								var $62 = $env100;
								var $mul74 = ((($62) * ($58)) & 4294967295);
								var $div75 = ((((($mul74)) | 0) / 128) | 0);
								$y2 = $div75;
								__lastLabel__ = 20;;
							}
						}
						var $63 = __lastLabel__ == 19 ? $div71 : (__lastLabel__ == 20 ? $div75 : ($div65));
						var $cmp78 = ((($63)) | 0) > 0;
						if ($cmp78) {
							__label__ = 22;;
						} else {
							__label__ = 24;;
						}
						$land_lhs_true79$$for_inc88$34: do {
							if (__label__ == 22) {
								var $64 = $y2;
								var $65 = $env100;
								var $cmp80 = ((($64)) | 0) <= ((($65)) | 0);
								if (!($cmp80)) {
									__label__ = 24;
									break $land_lhs_true79$$for_inc88$34;
								}
								var $66 = $y2;
								var $67 = $p2;
								var $div83 = ((((($67)) | 0) / 4096) | 0);
								var $call84 = _sprintf($arraydecay82, ((__str14396) & 4294967295), allocate([$66, 0, 0, 0, $div83, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
								var $call86 = _strcat(((__ZZL10WritePitchiiiiiE6output) & 4294967295), $arraydecay85);;
							}
						} while (0);
						var $68 = $ix;
						var $inc89 = ((($68) + 1) & 4294967295);
						$ix = $inc89;
						var $cmp53 = ((($inc89)) | 0) < 4;
						if ($cmp53) {
							__label__ = 16;
							continue $for_body54$25;
						} else {
							__label__ = 25;
							break $if_then51$$if_end91$23;
						}
					}
				}
			} while (0);
			var $69 = $p_end;
			var $div92 = ((((($69)) | 0) / 4096) | 0);
			$p_end = $div92;
			var $70 = $split_addr;
			var $cmp93 = ((($70)) | 0) <= 0;
			if ($cmp93) {
				__label__ = 26;;
			} else {
				__label__ = 27;;
			}
			if (__label__ == 26) {
				var $arraydecay95 = (($buf) & 4294967295);
				var $71 = $env100;
				var $72 = $p_end;
				var $call96 = _sprintf($arraydecay95, ((__str14396) & 4294967295), allocate([$71, 0, 0, 0, $72, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
				var $arraydecay97 = (($buf) & 4294967295);
				var $call98 = _strcat(((__ZZL10WritePitchiiiiiE6output) & 4294967295), $arraydecay97);;
			}
			var $73 = $env100;
			var $cmp100 = ((($73)) | 0) < 100;
			if ($cmp100) {
				__label__ = 28;;
			} else {
				__label__ = 29;;
			}
			if (__label__ == 28) {
				var $arraydecay102 = (($buf) & 4294967295);
				var $74 = $p_end;
				var $call103 = _sprintf($arraydecay102, ((__str14396) & 4294967295), allocate([100, 0, 0, 0, $74, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
				var $arraydecay104 = (($buf) & 4294967295);
				var $call105 = _strcat(((__ZZL10WritePitchiiiiiE6output) & 4294967295), $arraydecay104);;
			}
			var $strlen = _strlen(((__ZZL10WritePitchiiiiiE6output) & 4294967295));
			var $endptr = ((((__ZZL10WritePitchiiiiiE6output) & 4294967295) + $strlen) & 4294967295);
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = ((__str15397) & 4294967295);
			$dest$ = $endptr;
			$stop$ = $src$ + 2;
			if (($dest$ % 4) == ($src$ % 4) && 2 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			var $75 = $final_addr;
			var $tobool = ((($75)) | 0) != 0;
			if ($tobool) {
				__label__ = 30;;
			} else {
				__label__ = 31;;
			}
			if (__label__ == 30) {
				var $76 = $p_end;
				var $call109 = _sprintf(((__ZZL10WritePitchiiiiiE6output) & 4294967295), ((__str16398) & 4294967295), allocate([$76, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z14MbrolaGenerateP12PHONEME_LISTPii($phoneme_list, $n_ph, $resume) {;
			var __label__;
			var $retval;
			var $phoneme_list_addr;
			var $n_ph_addr;
			var $resume_addr;
			var $f_mbrola;
			var $again;
			$phoneme_list_addr = $phoneme_list;
			$n_ph_addr = $n_ph;
			$resume_addr = $resume;
			$f_mbrola = 0;
			var $0 = $n_ph_addr;
			var $1 = HEAP32[(($0) >> 2)];
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $2 = HEAP32[((_option_mbrola_phonemes) >> 2)];
				var $tobool = ((($2)) | 0) != 0;
				if ($tobool) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $3 = HEAP32[((_f_trans) >> 2)];
					$f_mbrola = $3;;
				}
				var $4 = $phoneme_list_addr;
				var $5 = $n_ph_addr;
				var $6 = HEAP32[(($5) >> 2)];
				var $7 = $resume_addr;
				var $8 = $f_mbrola;
				var $call = __Z15MbrolaTranslateP12PHONEME_LISTiiP7__sFILE($4, $6, $7, $8);
				$again = $call;
				var $tobool3 = ((($call)) | 0) != 0;
				if ($tobool3) {
					__label__ = 6;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 5) {
					var $9 = $n_ph_addr;
					HEAP32[(($9) >> 2)] = 0;;
				}
				var $10 = $again;
				$retval = $10;;
			}
			var $11 = $retval;;
			return $11;
			return null;
		}

		function __Z10MbrolaFillii($length, $resume) {;
			var __label__;
			var $retval;
			var $length_addr;
			var $resume_addr;
			var $req_samples;
			var $result;
			$length_addr = $length;
			$resume_addr = $resume;
			var $0 = $resume_addr;
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((_samplerate) >> 2)];
				var $2 = $length_addr;
				var $mul = ((($2) * ($1)) & 4294967295);
				var $div = ((((($mul)) | 0) / 1000) | 0);
				HEAP32[((__ZZ10MbrolaFilliiE9n_samples) >> 2)] = $div;;
			}
			var $3 = HEAP32[((_out_end) >> 2)];
			var $4 = HEAP32[((_out_ptr) >> 2)];
			var $sub_ptr_lhs_cast = ($3);
			var $sub_ptr_rhs_cast = ($4);
			var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
			var $div1 = ((((($sub_ptr_sub)) | 0) / 2) | 0);
			$req_samples = $div1;
			var $5 = $req_samples;
			var $6 = HEAP32[((__ZZ10MbrolaFilliiE9n_samples) >> 2)];
			var $cmp = ((($5)) | 0) > ((($6)) | 0);
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $7 = HEAP32[((__ZZ10MbrolaFilliiE9n_samples) >> 2)];
				$req_samples = $7;;
			}
			var $8 = HEAP32[((_out_ptr) >> 2)];
			var $9 = $8;
			var $10 = $9;
			var $11 = $req_samples;
			var $call = _read_MBR($10, $11);
			$result = $call;
			var $cmp4 = ((($call)) | 0) <= 0;
			if ($cmp4) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				$retval = 0;;
			} else if (__label__ == 6) {
				var $12 = $result;
				var $mul7 = ((($12) * 2) & 4294967295);
				var $13 = HEAP32[((_out_ptr) >> 2)];
				var $add_ptr = (($13 + $mul7) & 4294967295);
				HEAP32[((_out_ptr) >> 2)] = $add_ptr;
				var $14 = $result;
				var $15 = HEAP32[((__ZZ10MbrolaFilliiE9n_samples) >> 2)];
				var $sub = ((($15) - ($14)) & 4294967295);
				HEAP32[((__ZZ10MbrolaFilliiE9n_samples) >> 2)] = $sub;
				var $16 = HEAP32[((__ZZ10MbrolaFilliiE9n_samples) >> 2)];
				var $tobool8 = ((($16)) | 0) != 0;
				var $cond = ($tobool8) ? 1 : 0;
				$retval = $cond;;
			}
			var $17 = $retval;;
			return $17;
			return null;
		}

		function __Z11MbrolaResetv() {;
			var __label__;
			var $call = _reset_MBR();;
			return;
			return;
		}

		function __Z10LoadPhDatav() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $retval;
			var $ix;
			var $n_phonemes;
			var $version;
			var $result;
			var $length = __stackBase__;
			var $p;
			var $pw;
			$result = 1;
			var $0 = HEAP32[((__ZL16phoneme_tab_data) >> 2)];
			var $call = __ZL10ReadPhFilePvPKcPi($0, ((__str1412) & 4294967295), 0);
			HEAP32[((__ZL16phoneme_tab_data) >> 2)] = $call;
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = -1;;
			} else if (__label__ == 2) {
				var $1 = HEAP32[((_phoneme_index) >> 2)];
				var $2 = $1;
				var $call1 = __ZL10ReadPhFilePvPKcPi($2, ((__str2413) & 4294967295), 0);
				var $3 = $call1;
				HEAP32[((_phoneme_index) >> 2)] = $3;
				var $cmp2 = ((($3)) | 0) == 0;
				if ($cmp2) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = -1;;
				} else if (__label__ == 4) {
					var $4 = HEAP32[((_phondata_ptr) >> 2)];
					var $call5 = __ZL10ReadPhFilePvPKcPi($4, ((__str3414) & 4294967295), 0);
					HEAP32[((_phondata_ptr) >> 2)] = $call5;
					var $cmp6 = ((($call5)) | 0) == 0;
					if ($cmp6) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = -1;;
					} else if (__label__ == 6) {
						var $5 = HEAP32[((_tunes) >> 2)];
						var $6 = $5;
						var $call9 = __ZL10ReadPhFilePvPKcPi($6, ((__str4415) & 4294967295), $length);
						var $7 = $call9;
						HEAP32[((_tunes) >> 2)] = $7;
						var $cmp10 = ((($7)) | 0) == 0;
						if ($cmp10) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							$retval = -1;;
						} else if (__label__ == 8) {
							var $8 = HEAP32[((_phondata_ptr) >> 2)];
							HEAP32[((_wavefile_data) >> 2)] = $8;
							var $9 = HEAPU32[(($length) >> 2)];
							var $div = Math.floor(((($9)) >>> 0) / 68);
							HEAP32[((_n_tunes) >> 2)] = $div;
							$version = 0;
							$ix = 0;;
							$for_body$14: while (1) {
								var $10 = $ix;
								var $11 = HEAP32[((_wavefile_data) >> 2)];
								var $arrayidx = (($11 + $10) & 4294967295);
								var $12 = HEAPU8[($arrayidx)];
								var $conv = ((($12)) & 255);
								var $13 = $ix;
								var $mul = ((($13) * 8) & 4294967295);
								var $shl = ($conv) << ($mul);
								var $14 = $version;
								var $add = ((($shl) + ($14)) & 4294967295);
								$version = $add;
								var $15 = $ix;
								var $inc = ((($15) + 1) & 4294967295);
								$ix = $inc;
								var $cmp13 = ((($inc)) | 0) < 4;
								if ($cmp13) {
									__label__ = 9;
									continue $for_body$14;
								} else {
									__label__ = 10;
									break $for_body$14;
								}
							}
							var $16 = $version;
							var $cmp14 = ((($16)) | 0) != 83200;
							if ($cmp14) {
								__label__ = 11;;
							} else {
								__label__ = 12;;
							}
							if (__label__ == 11) {
								var $17 = $version;
								$result = $17;;
							}
							var $18 = HEAP32[((__ZL16phoneme_tab_data) >> 2)];
							$p = $18;
							var $19 = $p;
							var $arrayidx17 = (($19) & 4294967295);
							var $20 = HEAPU8[($arrayidx17)];
							var $conv18 = ((($20)) & 255);
							HEAP32[((_n_phoneme_tables) >> 2)] = $conv18;
							var $21 = $p;
							var $add_ptr = (($21 + 4) & 4294967295);
							$p = $add_ptr;
							$ix = 0;
							var $22 = $ix;
							var $23 = HEAP32[((_n_phoneme_tables) >> 2)];
							var $cmp201 = ((($22)) | 0) < ((($23)) | 0);
							if ($cmp201) {
								__label__ = 13;;
							} else {
								__label__ = 14;;
							}
							$for_body21$$for_end42$20: do {
								if (__label__ == 13) {
									while (1) {
										var $24 = $p;
										var $arrayidx22 = (($24) & 4294967295);
										var $25 = HEAPU8[($arrayidx22)];
										var $conv23 = ((($25)) & 255);
										$n_phonemes = $conv23;
										var $26 = $p;
										var $arrayidx24 = (($26) & 4294967295);
										var $27 = HEAPU8[($arrayidx24)];
										var $conv25 = ((($27)) & 255);
										var $28 = $ix;
										var $arrayidx26 = ((_phoneme_tab_list + $28 * 48) & 4294967295);
										var $n_phonemes27 = (($arrayidx26 + 36) & 4294967295);
										HEAP32[(($n_phonemes27) >> 2)] = $conv25;
										var $29 = $p;
										var $arrayidx28 = (($29 + 1) & 4294967295);
										var $30 = HEAPU8[($arrayidx28)];
										var $conv29 = ((($30)) & 255);
										var $31 = $ix;
										var $arrayidx30 = ((_phoneme_tab_list + $31 * 48) & 4294967295);
										var $includes = (($arrayidx30 + 40) & 4294967295);
										HEAP32[(($includes) >> 2)] = $conv29;
										var $32 = $p;
										var $33 = $32;
										$pw = $33;
										var $34 = $pw;
										var $arrayidx31 = (($34 + 4) & 4294967295);
										var $35 = HEAP32[(($arrayidx31) >> 2)];
										var $call32 = __Z13Reverse4Bytesi($35);
										var $36 = $ix;
										var $arrayidx33 = ((_phoneme_tab_list + $36 * 48) & 4294967295);
										var $equivalence_tables = (($arrayidx33 + 44) & 4294967295);
										HEAP32[(($equivalence_tables) >> 2)] = $call32;
										var $37 = $p;
										var $add_ptr34 = (($37 + 8) & 4294967295);
										$p = $add_ptr34;
										var $38 = $ix;
										var $arrayidx35 = ((_phoneme_tab_list + $38 * 48) & 4294967295);
										var $name = (($arrayidx35) & 4294967295);
										var $arraydecay = (($name) & 4294967295);
										var $39 = $p;
										var $src$, $dest$, $stop$, $stop4$, $fast$;
										$src$ = $39;
										$dest$ = $arraydecay;
										$stop$ = $src$ + 32;
										if (($dest$ % 4) == ($src$ % 4) && 32 > 8) {
											while ($src$ % 4 !== 0 && $src$ < $stop$) {;
												HEAP8[$dest$++] = HEAP8[$src$++];
											}
											$src$ >>= 2;
											$dest$ >>= 2;
											$stop4$ = $stop$ >> 2;
											while ($src$ < $stop4$) {;;;
												HEAP32[$dest$++] = HEAP32[$src$++];
											}
											$src$ <<= 2;
											$dest$ <<= 2;
										}
										while ($src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										};
										var $40 = $p;
										var $add_ptr36 = (($40 + 32) & 4294967295);
										$p = $add_ptr36;
										var $41 = $p;
										var $42 = $41;
										var $43 = $ix;
										var $arrayidx37 = ((_phoneme_tab_list + $43 * 48) & 4294967295);
										var $phoneme_tab_ptr = (($arrayidx37 + 32) & 4294967295);
										HEAP32[(($phoneme_tab_ptr) >> 2)] = $42;
										var $44 = $n_phonemes;
										var $mul38 = ((($44) * 16) & 4294967295);
										var $45 = $p;
										var $add_ptr39 = (($45 + $mul38) & 4294967295);
										$p = $add_ptr39;
										var $46 = $ix;
										var $inc41 = ((($46) + 1) & 4294967295);
										$ix = $inc41;
										var $47 = $ix;
										var $48 = HEAP32[((_n_phoneme_tables) >> 2)];
										var $cmp20 = ((($47)) | 0) < ((($48)) | 0);
										if ($cmp20) {
											__label__ = 13;
											continue;
										} else {
											__label__ = 14;
											break $for_body21$$for_end42$20;
										}
									}
								}
							} while (0);
							var $49 = HEAP32[((_phoneme_tab_number) >> 2)];
							var $50 = HEAP32[((_n_phoneme_tables) >> 2)];
							var $cmp43 = ((($49)) | 0) >= ((($50)) | 0);
							if ($cmp43) {
								__label__ = 15;;
							} else {
								__label__ = 16;;
							}
							if (__label__ == 15) {
								HEAP32[((_phoneme_tab_number) >> 2)] = 0;;
							}
							var $51 = $result;
							$retval = $51;;
						}
					}
				}
			}
			var $52 = $retval;
			STACKTOP = __stackBase__;
			return $52;
			return null;
		}

		function __ZL10ReadPhFilePvPKcPi($ptr, $fname, $size) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 192;
			_memset(__stackBase__, 0, 192);
			var __label__;
			var $retval;
			var $ptr_addr;
			var $fname_addr;
			var $size_addr;
			var $f_in;
			var $p;
			var $length;
			var $buf = __stackBase__;
			$ptr_addr = $ptr;
			$fname_addr = $fname;
			$size_addr = $size;
			var $arraydecay = (($buf) & 4294967295);
			var $0 = $fname_addr;
			var $call = _sprintf($arraydecay, ((__str74726) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0, $0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay1 = (($buf) & 4294967295);
			var $call2 = __Z13GetFileLengthPKc($arraydecay1);
			$length = $call2;
			var $arraydecay3 = (($buf) & 4294967295);
			var $call4 = _fopen($arraydecay3, ((__str18429) & 4294967295));
			$f_in = $call4;
			var $cmp = ((($call4)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__impure_ptr) >> 2)];
				var $_stderr = (($1 + 12) & 4294967295);
				var $2 = HEAP32[(($_stderr) >> 2)];
				var $arraydecay5 = (($buf) & 4294967295);
				var $call6 = _fprintf($2, ((__str19430) & 4294967295), allocate([$arraydecay5, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
				$retval = 0;;
			} else if (__label__ == 2) {
				var $3 = $ptr_addr;
				var $cmp7 = ((($3)) | 0) != 0;
				if ($cmp7) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $4 = $ptr_addr;
					__Z4FreePv($4);;
				}
				var $5 = $length;
				var $call10 = __Z5Alloci($5);
				$p = $call10;
				var $cmp11 = ((($call10)) | 0) == 0;
				if ($cmp11) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $6 = $f_in;
					var $call13 = _fclose($6);
					$retval = 0;;
				} else if (__label__ == 6) {
					var $7 = $p;
					var $8 = $length;
					var $9 = $f_in;
					var $call15 = _fread($7, 1, $8, $9);
					var $10 = $length;
					var $cmp16 = ((($call15)) | 0) != ((($10)) | 0);
					var $11 = $f_in;
					var $call18 = _fclose($11);
					if ($cmp16) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						$retval = 0;;
					} else if (__label__ == 8) {
						var $12 = $size_addr;
						var $cmp21 = ((($12)) | 0) != 0;
						if ($cmp21) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							var $13 = $length;
							var $14 = $size_addr;
							HEAP32[(($14) >> 2)] = $13;;
						}
						var $15 = $p;
						$retval = $15;;
					}
				}
			}
			var $16 = $retval;
			STACKTOP = __stackBase__;
			return $16;
			return null;
		}

		function __Z10FreePhDatav() {;
			var __label__;
			var $0 = HEAP32[((__ZL16phoneme_tab_data) >> 2)];
			__Z4FreePv($0);
			var $1 = HEAP32[((_phoneme_index) >> 2)];
			var $2 = $1;
			__Z4FreePv($2);
			var $3 = HEAP32[((_phondata_ptr) >> 2)];
			__Z4FreePv($3);
			HEAP32[((__ZL16phoneme_tab_data) >> 2)] = 0;
			HEAP32[((_phoneme_index) >> 2)] = 0;
			HEAP32[((_phondata_ptr) >> 2)] = 0;;
			return;
			return;
		}

		function __Z11PhonemeCodej($mnem) {;
			var __label__;
			var $retval;
			var $mnem_addr;
			var $ix;
			$mnem_addr = $mnem;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_n_phoneme_tab) >> 2)];
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 6;
					break;
				}
				var $2 = $ix;
				var $arrayidx = ((_phoneme_tab + $2 * 4) & 4294967295);
				var $3 = HEAP32[(($arrayidx) >> 2)];
				var $cmp1 = ((($3)) | 0) == 0;
				if ($cmp1) {
					__label__ = 5;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 3) {
					var $4 = $ix;
					var $arrayidx2 = ((_phoneme_tab + $4 * 4) & 4294967295);
					var $5 = HEAP32[(($arrayidx2) >> 2)];
					var $mnemonic = (($5) & 4294967295);
					var $6 = HEAP32[(($mnemonic) >> 2)];
					var $7 = $mnem_addr;
					var $cmp3 = ((($6)) | 0) == ((($7)) | 0);
					if ($cmp3) {
						__label__ = 4;
						break;
					}
				}
				var $11 = $ix;
				var $inc = ((($11) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue;
			}
			if (__label__ == 6) {
				$retval = 0;;
			} else if (__label__ == 4) {
				var $8 = $ix;
				var $arrayidx5 = ((_phoneme_tab + $8 * 4) & 4294967295);
				var $9 = HEAP32[(($arrayidx5) >> 2)];
				var $code = (($9 + 10) & 4294967295);
				var $10 = HEAPU8[($code)];
				var $conv = ((($10)) & 255);
				$retval = $conv;;
			}
			var $12 = $retval;;
			return $12;
			return null;
		}

		function __Z19LookupPhonemeStringPKc($string) {;
			var __label__;
			var __lastLabel__ = null;
			var $string_addr;
			var $ix;
			var $c;
			var $mnem;
			$string_addr = $string;
			$mnem = 0;
			$ix = 0;
			__lastLabel__ = 0;;
			while (1) {
				var $0 = __lastLabel__ == 3 ? $inc : (0);
				var $cmp = ((($0)) | 0) < 4;
				if (!($cmp)) {
					__label__ = 4;
					break;
				}
				var $1 = $ix;
				var $2 = $string_addr;
				var $arrayidx = (($2 + $1) & 4294967295);
				var $3 = HEAP8[($arrayidx)];
				var $conv = (tempInt = (($3)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp1 = ((($conv)) | 0) == 0;
				if ($cmp1) {
					__label__ = 4;
					break;
				}
				var $4 = $ix;
				var $5 = $string_addr;
				var $arrayidx2 = (($5 + $4) & 4294967295);
				var $6 = HEAP8[($arrayidx2)];
				$c = $6;
				var $7 = $c;
				var $conv3 = ((($7)) & 255);
				var $8 = $ix;
				var $mul = ((($8) * 8) & 4294967295);
				var $shl = ($conv3) << ($mul);
				var $9 = $mnem;
				var $or = ($shl) | ($9);
				$mnem = $or;
				var $10 = $ix;
				var $inc = ((($10) + 1) & 4294967295);
				$ix = $inc;
				__lastLabel__ = 3;
				__label__ = 1;
				continue;
			}
			var $11 = $mnem;
			var $call = __Z11PhonemeCodej($11);;
			return $call;
			return null;
		}

		function __Z11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LIST($this_ph, $which, $fmt_params, $n_frames, $plist) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var __lastLabel__ = null;
			var $this_ph_addr;
			var $which_addr;
			var $fmt_params_addr;
			var $n_frames_addr;
			var $plist_addr;
			var $ix;
			var $nf = __stackBase__;
			var $nf1;
			var $seq_break;
			var $frames;
			var $length1;
			var $length_std;
			var $length_factor;
			var $seq;
			var $seq2;
			var $seqk;
			var $seqk2;
			var $frame;
			$this_ph_addr = $this_ph;
			$which_addr = $which;
			$fmt_params_addr = $fmt_params;
			$n_frames_addr = $n_frames;
			$plist_addr = $plist;
			var $0 = $fmt_params_addr;
			var $fmt_addr = (($0 + 8) & 4294967295);
			var $1 = HEAP32[(($fmt_addr) >> 2)];
			var $2 = HEAP32[((_phondata_ptr) >> 2)];
			var $arrayidx = (($2 + $1) & 4294967295);
			var $3 = $arrayidx;
			$seq = $3;
			var $4 = $seq;
			var $5 = $4;
			$seqk = $5;
			var $6 = $seq;
			var $n_frames1 = (($6 + 2) & 4294967295);
			var $7 = HEAPU8[($n_frames1)];
			var $conv = ((($7)) & 255);
			HEAP32[(($nf) >> 2)] = $conv;
			var $8 = HEAP32[(($nf) >> 2)];
			var $cmp = ((($8)) | 0) >= 25;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[(($nf) >> 2)] = 24;;
			}
			var $9 = $fmt_params_addr;
			var $fmt2_lenadj = (($9 + 24) & 4294967295);
			var $10 = HEAP32[(($fmt2_lenadj) >> 2)];
			var $11 = $fmt_params_addr;
			var $fmt_length = (($11 + 12) & 4294967295);
			var $12 = HEAP32[(($fmt_length) >> 2)];
			var $add = ((($12) + ($10)) & 4294967295);
			HEAP32[((_seq_len_adjust) >> 2)] = $add;
			$seq_break = 0;
			$ix = 0;
			var $13 = $ix;
			var $14 = HEAP32[(($nf) >> 2)];
			var $cmp29 = ((($13)) | 0) < ((($14)) | 0);
			if ($cmp29) {
				__label__ = 4;;
			} else {
				__label__ = 3;;
			}
			$for_body$$for_end_thread$5: do {
				if (__label__ == 4) {
					while (1) {
						var $15 = $seq;
						var $frame3 = (($15 + 4) & 4294967295);
						var $arrayidx4 = (($frame3) & 4294967295);
						var $frflags = (($arrayidx4) & 4294967295);
						var $16 = HEAP16[(($frflags) >> 1)];
						var $conv5 = (tempInt = (($16)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $and = ($conv5) & 1;
						var $tobool = ((($and)) | 0) != 0;
						var $17 = $ix;
						if ($tobool) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							var $18 = $seqk;
							var $frame7 = (($18 + 4) & 4294967295);
							var $arrayidx8 = (($frame7 + $17 * 64) & 4294967295);
							$frame = $arrayidx8;;
						} else if (__label__ == 6) {
							var $19 = $seq;
							var $frame9 = (($19 + 4) & 4294967295);
							var $arrayidx10 = (($frame9 + $17 * 44) & 4294967295);
							var $20 = $arrayidx10;
							$frame = $20;;
						}
						var $21 = $frame;
						var $22 = $ix;
						var $arrayidx12 = ((__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf + $22 * 8) & 4294967295);
						var $frame13 = (($arrayidx12 + 4) & 4294967295);
						HEAP32[(($frame13) >> 2)] = $21;
						var $23 = $frame;
						var $frflags14 = (($23) & 4294967295);
						var $24 = HEAP16[(($frflags14) >> 1)];
						var $25 = $ix;
						var $arrayidx15 = ((__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf + $25 * 8) & 4294967295);
						var $frflags16 = (($arrayidx15 + 2) & 4294967295);
						HEAP16[(($frflags16) >> 1)] = $24;
						var $26 = $frame;
						var $length = (($26 + 16) & 4294967295);
						var $27 = HEAPU8[($length)];
						var $conv17 = ((($27)) & 255);
						var $28 = $ix;
						var $arrayidx18 = ((__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf + $28 * 8) & 4294967295);
						var $length19 = (($arrayidx18) & 4294967295);
						HEAP16[(($length19) >> 1)] = $conv17;
						var $29 = $frame;
						var $frflags20 = (($29) & 4294967295);
						var $30 = HEAP16[(($frflags20) >> 1)];
						var $conv21 = (tempInt = (($30)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $and22 = ($conv21) & 2;
						var $tobool23 = ((($and22)) | 0) != 0;
						if ($tobool23) {
							__label__ = 8;;
						} else {
							__label__ = 9;;
						}
						if (__label__ == 8) {
							var $31 = $ix;
							$seq_break = $31;;
						}
						var $32 = $ix;
						var $inc = ((($32) + 1) & 4294967295);
						$ix = $inc;
						var $33 = $ix;
						var $34 = HEAP32[(($nf) >> 2)];
						var $cmp2 = ((($33)) | 0) < ((($34)) | 0);
						if ($cmp2) {
							__label__ = 4;
							continue;
						} else {
							__label__ = 10;
							break;
						}
					}
					var $_pr10 = $seq_break;
					$frames = ((__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf) & 4294967295);
					var $cmp26 = ((($_pr10)) | 0) > 0;
					if (!($cmp26)) {
						__label__ = 14;
						break $for_body$$for_end_thread$5;
					}
					var $35 = $which_addr;
					var $cmp28 = ((($35)) | 0) == 1;
					var $36 = $seq_break;
					if ($cmp28) {
						__label__ = 12;;
					} else {
						__label__ = 13;;
					}
					if (__label__ == 12) {
						var $add30 = ((($36) + 1) & 4294967295);
						HEAP32[(($nf) >> 2)] = $add30;;
					} else if (__label__ == 13) {
						var $arrayidx32 = ((__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf + $36 * 8) & 4294967295);
						$frames = $arrayidx32;
						var $37 = $seq_break;
						var $38 = HEAP32[(($nf) >> 2)];
						var $sub = ((($38) - ($37)) & 4294967295);
						HEAP32[(($nf) >> 2)] = $sub;;
					}
				} else if (__label__ == 3) {
					$frames = ((__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf) & 4294967295);;
				}
			} while (0);
			var $39 = $this_ph_addr;
			var $type = (($39 + 11) & 4294967295);
			var $40 = HEAPU8[($type)];
			var $conv35 = ((($40)) & 255);
			var $cmp36 = ((($conv35)) | 0) == 2;
			if ($cmp36) {
				__label__ = 15;;
			} else {
				__label__ = 18;;
			}
			$land_lhs_true$$if_end42$22: do {
				if (__label__ == 15) {
					var $41 = $fmt_params_addr;
					var $fmt2_addr = (($41 + 20) & 4294967295);
					var $42 = HEAP32[(($fmt2_addr) >> 2)];
					var $cmp37 = ((($42)) | 0) == 0;
					if (!($cmp37)) {
						__label__ = 18;
						break $land_lhs_true$$if_end42$22;
					}
					var $43 = $fmt_params_addr;
					var $use_vowelin = (($43 + 4) & 4294967295);
					var $44 = HEAP32[(($use_vowelin) >> 2)];
					var $tobool39 = ((($44)) | 0) != 0;
					if (!($tobool39)) {
						__label__ = 18;
						break $land_lhs_true$$if_end42$22;
					}
					var $45 = $frames;
					var $46 = $fmt_params_addr;
					var $transition0 = (($46 + 36) & 4294967295);
					var $47 = HEAP32[(($transition0) >> 2)];
					var $48 = $fmt_params_addr;
					var $transition1 = (($48 + 40) & 4294967295);
					var $49 = HEAP32[(($transition1) >> 2)];
					var $50 = $which_addr;
					var $call = __Z18FormantTransition2P10frameref_tRijjP11PHONEME_TABi($45, $nf, $47, $49, 0, $50);
					var $51 = HEAP32[((_seq_len_adjust) >> 2)];
					var $add41 = ((($51) + ($call)) & 4294967295);
					HEAP32[((_seq_len_adjust) >> 2)] = $add41;;
				}
			} while (0);
			$length1 = 0;
			var $52 = HEAP32[(($nf) >> 2)];
			var $sub43 = ((($52) - 1) & 4294967295);
			$nf1 = $sub43;
			$ix = 0;
			var $53 = $ix;
			var $54 = $nf1;
			var $cmp457 = ((($53)) | 0) < ((($54)) | 0);
			if ($cmp457) {
				__label__ = 19;;
			} else {
				__label__ = 20;;
			}
			$for_body46$$for_end53$27: do {
				if (__label__ == 19) {
					while (1) {
						var $55 = $ix;
						var $56 = $frames;
						var $arrayidx47 = (($56 + 8 * $55) & 4294967295);
						var $length48 = (($arrayidx47) & 4294967295);
						var $57 = HEAP16[(($length48) >> 1)];
						var $conv49 = (tempInt = (($57)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $58 = $length1;
						var $add50 = ((($58) + ($conv49)) & 4294967295);
						$length1 = $add50;
						var $59 = $ix;
						var $inc52 = ((($59) + 1) & 4294967295);
						$ix = $inc52;
						var $60 = $ix;
						var $61 = $nf1;
						var $cmp45 = ((($60)) | 0) < ((($61)) | 0);
						if ($cmp45) {
							__label__ = 19;
							continue;
						} else {
							__label__ = 20;
							break $for_body46$$for_end53$27;
						}
					}
				}
			} while (0);
			var $62 = $fmt_params_addr;
			var $fmt2_addr54 = (($62 + 20) & 4294967295);
			var $63 = HEAP32[(($fmt2_addr54) >> 2)];
			var $cmp55 = ((($63)) | 0) != 0;
			if ($cmp55) {
				__label__ = 21;;
			} else {
				__label__ = 29;;
			}
			if (__label__ == 21) {
				var $64 = $fmt_params_addr;
				var $fmt2_addr57 = (($64 + 20) & 4294967295);
				var $65 = HEAP32[(($fmt2_addr57) >> 2)];
				var $66 = HEAP32[((_phondata_ptr) >> 2)];
				var $arrayidx58 = (($66 + $65) & 4294967295);
				var $67 = $arrayidx58;
				$seq2 = $67;
				var $68 = $seq2;
				var $69 = $68;
				$seqk2 = $69;
				var $70 = HEAP32[(($nf) >> 2)];
				var $dec = ((($70) - 1) & 4294967295);
				HEAP32[(($nf) >> 2)] = $dec;
				$ix = 0;
				var $71 = $ix;
				var $72 = $seq2;
				var $n_frames604 = (($72 + 2) & 4294967295);
				var $73 = HEAPU8[($n_frames604)];
				var $conv615 = ((($73)) & 255);
				var $cmp626 = ((($71)) | 0) < ((($conv615)) | 0);
				if ($cmp626) {
					__label__ = 22;;
				} else {
					__label__ = 28;;
				}
				$for_body63$$for_end92$33: do {
					if (__label__ == 22) {
						while (1) {
							var $74 = $seq2;
							var $frame64 = (($74 + 4) & 4294967295);
							var $arrayidx65 = (($frame64) & 4294967295);
							var $frflags66 = (($arrayidx65) & 4294967295);
							var $75 = HEAP16[(($frflags66) >> 1)];
							var $conv67 = (tempInt = (($75)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $and68 = ($conv67) & 1;
							var $tobool69 = ((($and68)) | 0) != 0;
							var $76 = $ix;
							if ($tobool69) {
								__label__ = 23;;
							} else {
								__label__ = 24;;
							}
							if (__label__ == 23) {
								var $77 = $seqk2;
								var $frame71 = (($77 + 4) & 4294967295);
								var $arrayidx72 = (($frame71 + $76 * 64) & 4294967295);
								$frame = $arrayidx72;;
							} else if (__label__ == 24) {
								var $78 = $seq2;
								var $frame74 = (($78 + 4) & 4294967295);
								var $arrayidx75 = (($frame74 + $76 * 44) & 4294967295);
								var $79 = $arrayidx75;
								$frame = $79;;
							}
							var $80 = $frame;
							var $length77 = (($80 + 16) & 4294967295);
							var $81 = HEAPU8[($length77)];
							var $conv78 = ((($81)) & 255);
							var $82 = HEAP32[(($nf) >> 2)];
							var $83 = $frames;
							var $arrayidx79 = (($83 + 8 * $82) & 4294967295);
							var $length80 = (($arrayidx79) & 4294967295);
							HEAP16[(($length80) >> 1)] = $conv78;
							var $84 = $ix;
							var $cmp81 = ((($84)) | 0) > 0;
							if ($cmp81) {
								__label__ = 26;;
							} else {
								__label__ = 27;;
							}
							if (__label__ == 26) {
								var $85 = $frame;
								var $86 = HEAP32[(($nf) >> 2)];
								var $87 = $frames;
								var $arrayidx83 = (($87 + 8 * $86) & 4294967295);
								var $frame84 = (($arrayidx83 + 4) & 4294967295);
								HEAP32[(($frame84) >> 2)] = $85;
								var $88 = $frame;
								var $frflags85 = (($88) & 4294967295);
								var $89 = HEAP16[(($frflags85) >> 1)];
								var $90 = HEAP32[(($nf) >> 2)];
								var $91 = $frames;
								var $arrayidx86 = (($91 + 8 * $90) & 4294967295);
								var $frflags87 = (($arrayidx86 + 2) & 4294967295);
								HEAP16[(($frflags87) >> 1)] = $89;;
							}
							var $92 = HEAP32[(($nf) >> 2)];
							var $inc89 = ((($92) + 1) & 4294967295);
							HEAP32[(($nf) >> 2)] = $inc89;
							var $93 = $ix;
							var $inc91 = ((($93) + 1) & 4294967295);
							$ix = $inc91;
							var $94 = $ix;
							var $95 = $seq2;
							var $n_frames60 = (($95 + 2) & 4294967295);
							var $96 = HEAPU8[($n_frames60)];
							var $conv61 = ((($96)) & 255);
							var $cmp62 = ((($94)) | 0) < ((($conv61)) | 0);
							if ($cmp62) {
								__label__ = 22;
								continue;
							} else {
								__label__ = 28;
								break $for_body63$$for_end92$33;
							}
						}
					}
				} while (0);
				HEAP32[((_wavefile_ix) >> 2)] = 0;;
			}
			var $97 = $length1;
			var $cmp94 = ((($97)) | 0) > 0;
			if ($cmp94) {
				__label__ = 30;;
			} else {
				__label__ = 47;;
			}
			$if_then95$$if_end175$45: do {
				if (__label__ == 30) {
					var $98 = $which_addr;
					var $cmp96 = ((($98)) | 0) == 2;
					if ($cmp96) {
						__label__ = 31;;
					} else {
						__label__ = 37;;
					}
					if (__label__ == 31) {
						var $99 = $fmt_params_addr;
						var $std_length = (($99 + 44) & 4294967295);
						var $100 = HEAP32[(($std_length) >> 2)];
						var $101 = HEAP32[((_seq_len_adjust) >> 2)];
						var $add98 = ((($100) - 45) & 4294967295);
						var $sub99 = ((($add98) + ($101)) & 4294967295);
						$length_std = $sub99;
						var $102 = $length_std;
						var $cmp100 = ((($102)) | 0) < 10;
						if ($cmp100) {
							__label__ = 32;;
						} else {
							__label__ = 33;;
						}
						if (__label__ == 32) {
							$length_std = 10;;
						}
						var $103 = $plist_addr;
						var $synthflags = (($103 + 4) & 4294967295);
						var $104 = HEAPU16[(($synthflags) >> 1)];
						var $conv103 = ((($104)) & 65535);
						var $and104 = ($conv103) & 8;
						var $tobool105 = ((($and104)) | 0) != 0;
						if ($tobool105) {
							__label__ = 34;;
						} else {
							__label__ = 35;;
						}
						if (__label__ == 34) {
							var $105 = HEAP32[((((_phoneme_tab + 48) & 4294967295)) >> 2)];
							var $std_length107 = (($105 + 14) & 4294967295);
							var $106 = HEAPU8[($std_length107)];
							var $conv108 = ((($106)) & 255);
							var $mul = ((($conv108) * 2) & 4294967295);
							var $107 = $length_std;
							var $add109 = ((($mul) + ($107)) & 4294967295);
							$length_std = $add109;;
						}
						var $108 = $length_std;
						var $mul111 = ((($108) * 256) & 4294967295);
						var $109 = $length1;
						var $div = ((((($mul111)) | 0) / ((($109)) | 0)) | 0);
						$length_factor = $div;
						$ix = 0;
						var $110 = $ix;
						var $111 = $nf1;
						var $cmp1133 = ((($110)) | 0) < ((($111)) | 0);
						if (!($cmp1133)) {
							__label__ = 47;
							break $if_then95$$if_end175$45;
						}
						while (1) {
							var $112 = $ix;
							var $113 = $frames;
							var $arrayidx115 = (($113 + 8 * $112) & 4294967295);
							var $length116 = (($arrayidx115) & 4294967295);
							var $114 = HEAP16[(($length116) >> 1)];
							var $conv117 = (tempInt = (($114)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $115 = $length_factor;
							var $mul118 = ((($conv117) * ($115)) & 4294967295);
							var $div119 = ((((($mul118)) | 0) / 256) | 0);
							var $conv120 = ((($div119)) & 65535);
							var $116 = $ix;
							var $117 = $frames;
							var $arrayidx121 = (($117 + 8 * $116) & 4294967295);
							var $length122 = (($arrayidx121) & 4294967295);
							HEAP16[(($length122) >> 1)] = $conv120;
							var $118 = $ix;
							var $inc124 = ((($118) + 1) & 4294967295);
							$ix = $inc124;
							var $119 = $ix;
							var $120 = $nf1;
							var $cmp113 = ((($119)) | 0) < ((($120)) | 0);
							if ($cmp113) {
								__label__ = 36;
								continue;
							} else {
								__label__ = 47;
								break $if_then95$$if_end175$45;
							}
						}
					} else if (__label__ == 37) {
						var $121 = $which_addr;
						var $cmp127 = ((($121)) | 0) == 1;
						var $122 = $fmt_params_addr;
						if ($cmp127) {
							__label__ = 38;;
						} else {
							__label__ = 41;;
						}
						$if_then128$$if_else145$58: do {
							if (__label__ == 38) {
								var $fmt_control = (($122) & 4294967295);
								var $123 = HEAP32[(($fmt_control) >> 2)];
								var $cmp129 = ((($123)) | 0) == 1;
								if (!($cmp129)) {
									__label__ = 43;
									break $if_then128$$if_else145$58;
								}
								var $124 = $fmt_params_addr;
								var $std_length131 = (($124 + 44) & 4294967295);
								var $125 = HEAP32[(($std_length131) >> 2)];
								var $cmp132 = ((($125)) | 0) < 130;
								if (!($cmp132)) {
									__label__ = 43;
									break $if_then128$$if_else145$58;
								}
								var $126 = $frames;
								var $arrayidx134 = (($126) & 4294967295);
								var $length135 = (($arrayidx134) & 4294967295);
								var $127 = HEAP16[(($length135) >> 1)];
								var $conv136 = (tempInt = (($127)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $128 = $fmt_params_addr;
								var $std_length137 = (($128 + 44) & 4294967295);
								var $129 = HEAP32[(($std_length137) >> 2)];
								var $mul138 = ((($129) * ($conv136)) & 4294967295);
								var $div139 = ((((($mul138)) | 0) / 130) | 0);
								var $conv140 = ((($div139)) & 65535);
								var $130 = $frames;
								var $arrayidx141 = (($130) & 4294967295);
								var $length142 = (($arrayidx141) & 4294967295);
								HEAP16[(($length142) >> 1)] = $conv140;
								__label__ = 43;
								break $if_then128$$if_else145$58;
							} else if (__label__ == 41) {
								var $std_length146 = (($122 + 44) & 4294967295);
								var $131 = HEAP32[(($std_length146) >> 2)];
								var $cmp147 = ((($131)) | 0) > 0;
								if (!($cmp147)) {
									__label__ = 43;
									break $if_then128$$if_else145$58;
								}
								var $132 = $fmt_params_addr;
								var $std_length149 = (($132 + 44) & 4294967295);
								var $133 = HEAP32[(($std_length149) >> 2)];
								var $134 = $length1;
								var $sub150 = ((($133) - ($134)) & 4294967295);
								var $135 = HEAP32[((_seq_len_adjust) >> 2)];
								var $add151 = ((($135) + ($sub150)) & 4294967295);
								HEAP32[((_seq_len_adjust) >> 2)] = $add151;
								__lastLabel__ = 42;
								__label__ = 44;
								break $if_then128$$if_else145$58;
							}
						} while (0);
						if (__label__ == 43) {
							var $_pr = HEAP32[((_seq_len_adjust) >> 2)];
							__lastLabel__ = 43;;
						}
						var $136 = __lastLabel__ == 43 ? $_pr : ($add151);
						var $cmp154 = ((($136)) | 0) != 0;
						if (!($cmp154)) {
							__label__ = 47;
							break $if_then95$$if_end175$45;
						}
						var $137 = $length1;
						var $138 = HEAP32[((_seq_len_adjust) >> 2)];
						var $add156 = ((($138) + ($137)) & 4294967295);
						var $mul157 = ((($add156) * 256) & 4294967295);
						var $139 = $length1;
						var $div158 = ((((($mul157)) | 0) / ((($139)) | 0)) | 0);
						$length_factor = $div158;
						$ix = 0;
						var $140 = $ix;
						var $141 = $nf1;
						var $cmp1601 = ((($140)) | 0) < ((($141)) | 0);
						if (!($cmp1601)) {
							__label__ = 47;
							break $if_then95$$if_end175$45;
						}
						while (1) {
							var $142 = $ix;
							var $143 = $frames;
							var $arrayidx162 = (($143 + 8 * $142) & 4294967295);
							var $length163 = (($arrayidx162) & 4294967295);
							var $144 = HEAP16[(($length163) >> 1)];
							var $conv164 = (tempInt = (($144)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $145 = $length_factor;
							var $mul165 = ((($conv164) * ($145)) & 4294967295);
							var $div166 = ((((($mul165)) | 0) / 256) | 0);
							var $conv167 = ((($div166)) & 65535);
							var $146 = $ix;
							var $147 = $frames;
							var $arrayidx168 = (($147 + 8 * $146) & 4294967295);
							var $length169 = (($arrayidx168) & 4294967295);
							HEAP16[(($length169) >> 1)] = $conv167;
							var $148 = $ix;
							var $inc171 = ((($148) + 1) & 4294967295);
							$ix = $inc171;
							var $149 = $ix;
							var $150 = $nf1;
							var $cmp160 = ((($149)) | 0) < ((($150)) | 0);
							if ($cmp160) {
								__label__ = 46;
								continue;
							} else {
								__label__ = 47;
								break $if_then95$$if_end175$45;
							}
						}
					}
				}
			} while (0);
			var $151 = HEAP32[(($nf) >> 2)];
			var $152 = $n_frames_addr;
			HEAP32[(($152) >> 2)] = $151;
			var $153 = $frames;
			STACKTOP = __stackBase__;
			return $153;
			return null;
		}

		function __Z11GetEnvelopei($index) {;
			var __label__;
			var $retval;
			var $index_addr;
			$index_addr = $index;
			var $0 = $index_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__impure_ptr) >> 2)];
				var $_stderr = (($1 + 12) & 4294967295);
				var $2 = HEAP32[(($_stderr) >> 2)];
				var $3 = _fwrite(((__str5416) & 4294967295), 20, 1, $2);
				var $4 = HEAP32[((((_envelope_data) & 4294967295)) >> 2)];
				$retval = $4;;
			} else if (__label__ == 2) {
				var $5 = $index_addr;
				var $6 = HEAP32[((_phondata_ptr) >> 2)];
				var $arrayidx = (($6 + $5) & 4294967295);
				$retval = $arrayidx;;
			}
			var $7 = $retval;;
			return $7;
			return null;
		}

		function __Z18SelectPhonemeTablei($number) {;
			var __label__;
			var $number_addr;
			$number_addr = $number;
			HEAP32[((_n_phoneme_tab) >> 2)] = 0;
			var $0 = $number_addr;
			__ZL17SetUpPhonemeTableii($0, 0);
			var $1 = HEAP32[((_n_phoneme_tab) >> 2)];
			var $inc = ((($1) + 1) & 4294967295);
			HEAP32[((_n_phoneme_tab) >> 2)] = $inc;
			var $2 = $number_addr;
			HEAP32[((_current_phoneme_table) >> 2)] = $2;;
			return;
			return;
		}

		function __ZL17SetUpPhonemeTableii($number, $recursing) {;
			var __label__;
			var $number_addr;
			var $recursing_addr;
			var $ix;
			var $includes;
			var $ph_code;
			var $phtab;
			$number_addr = $number;
			$recursing_addr = $recursing;
			var $0 = $recursing_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = ((_phoneme_tab_flags) & 4294967295);
				$stop$ = $dest$ + 256;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};;
			}
			var $1 = $number_addr;
			var $arrayidx = ((_phoneme_tab_list + $1 * 48) & 4294967295);
			var $includes1 = (($arrayidx + 40) & 4294967295);
			var $2 = HEAP32[(($includes1) >> 2)];
			$includes = $2;
			var $cmp2 = ((($2)) | 0) > 0;
			if ($cmp2) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $3 = $includes;
				var $sub = ((($3) - 1) & 4294967295);
				__ZL17SetUpPhonemeTableii($sub, 1);;
			}
			var $4 = $number_addr;
			var $arrayidx5 = ((_phoneme_tab_list + $4 * 48) & 4294967295);
			var $phoneme_tab_ptr = (($arrayidx5 + 32) & 4294967295);
			var $5 = HEAP32[(($phoneme_tab_ptr) >> 2)];
			$phtab = $5;
			$ix = 0;
			var $6 = $ix;
			var $7 = $number_addr;
			var $arrayidx61 = ((_phoneme_tab_list + $7 * 48) & 4294967295);
			var $n_phonemes2 = (($arrayidx61 + 36) & 4294967295);
			var $8 = HEAP32[(($n_phonemes2) >> 2)];
			var $cmp73 = ((($6)) | 0) < ((($8)) | 0);
			if ($cmp73) {
				__label__ = 5;;
			} else {
				__label__ = 10;;
			}
			$for_body$$for_end$8: do {
				if (__label__ == 5) {
					while (1) {
						var $9 = $ix;
						var $10 = $phtab;
						var $arrayidx8 = (($10 + 16 * $9) & 4294967295);
						var $code = (($arrayidx8 + 10) & 4294967295);
						var $11 = HEAPU8[($code)];
						var $conv = ((($11)) & 255);
						$ph_code = $conv;
						var $12 = $ix;
						var $13 = $phtab;
						var $arrayidx9 = (($13 + 16 * $12) & 4294967295);
						var $14 = $ph_code;
						var $arrayidx10 = ((_phoneme_tab + $14 * 4) & 4294967295);
						HEAP32[(($arrayidx10) >> 2)] = $arrayidx9;
						var $15 = $ph_code;
						var $16 = HEAP32[((_n_phoneme_tab) >> 2)];
						var $cmp11 = ((($15)) | 0) > ((($16)) | 0);
						if ($cmp11) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						if (__label__ == 6) {
							var $17 = $ph_code;
							HEAP32[((_n_phoneme_tab) >> 2)] = $17;;
						}
						var $18 = $recursing_addr;
						var $cmp14 = ((($18)) | 0) == 0;
						if ($cmp14) {
							__label__ = 8;;
						} else {
							__label__ = 9;;
						}
						if (__label__ == 8) {
							var $19 = $ph_code;
							var $arrayidx16 = ((_phoneme_tab_flags + $19) & 4294967295);
							var $20 = HEAPU8[($arrayidx16)];
							var $conv17 = ((($20)) & 255);
							var $or = ($conv17) | 1;
							var $conv18 = ((($or)) & 255);
							HEAP8[($arrayidx16)] = $conv18;;
						}
						var $21 = $ix;
						var $inc = ((($21) + 1) & 4294967295);
						$ix = $inc;
						var $22 = $ix;
						var $23 = $number_addr;
						var $arrayidx6 = ((_phoneme_tab_list + $23 * 48) & 4294967295);
						var $n_phonemes = (($arrayidx6 + 36) & 4294967295);
						var $24 = HEAP32[(($n_phonemes) >> 2)];
						var $cmp7 = ((($22)) | 0) < ((($24)) | 0);
						if ($cmp7) {
							__label__ = 5;
							continue;
						} else {
							__label__ = 10;
							break $for_body$$for_end$8;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __Z18LookupPhonemeTablePKc($name) {;
			var __label__;
			var $retval;
			var $name_addr;
			var $ix;
			$name_addr = $name;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_n_phoneme_tables) >> 2)];
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $name_addr;
				var $3 = $ix;
				var $arrayidx = ((_phoneme_tab_list + $3 * 48) & 4294967295);
				var $name1 = (($arrayidx) & 4294967295);
				var $arraydecay = (($name1) & 4294967295);
				var $call = _strcmp($2, $arraydecay);
				var $cmp2 = ((($call)) | 0) == 0;
				var $4 = $ix;
				if ($cmp2) {
					__label__ = 3;
					break;
				}
				var $inc = ((($4) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue;
			}
			if (__label__ == 3) {
				HEAP32[((_phoneme_tab_number) >> 2)] = $4;;
			}
			var $5 = $ix;
			var $6 = HEAP32[((_n_phoneme_tables) >> 2)];
			var $cmp3 = ((($5)) | 0) == ((($6)) | 0);
			if ($cmp3) {
				__label__ = 6;;
			} else {
				__label__ = 7;;
			}
			if (__label__ == 6) {
				$retval = -1;;
			} else if (__label__ == 7) {
				var $7 = $ix;
				$retval = $7;;
			}
			var $8 = $retval;;
			return $8;
			return null;
		}

		function __Z22SelectPhonemeTableNamePKc($name) {;
			var __label__;
			var $retval;
			var $name_addr;
			var $ix;
			$name_addr = $name;
			var $0 = $name_addr;
			var $call = __Z18LookupPhonemeTablePKc($0);
			$ix = $call;
			var $cmp = ((($call)) | 0) == -1;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = -1;;
			} else if (__label__ == 2) {
				var $1 = $ix;
				__Z18SelectPhonemeTablei($1);
				var $2 = $ix;
				$retval = $2;;
			}
			var $3 = $retval;;
			return $3;
			return null;
		}

		function __Z10LoadConfigv() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 364;
			_memset(__stackBase__, 0, 364);
			var __label__;
			var $buf = __stackBase__;
			var $f;
			var $ix;
			var $c1 = __stackBase__ + 160;
			var $p;
			var $string = __stackBase__ + 164;
			HEAP32[((_logging_type) >> 2)] = 0;
			$ix = 0;;
			$for_body$2: while (1) {
				var $0 = $ix;
				var $arrayidx = ((_soundicon_tab + $0 * 16) & 4294967295);
				var $filename = (($arrayidx + 12) & 4294967295);
				HEAP32[(($filename) >> 2)] = 0;
				var $1 = $ix;
				var $arrayidx1 = ((_soundicon_tab + $1 * 16) & 4294967295);
				var $data = (($arrayidx1 + 8) & 4294967295);
				HEAP32[(($data) >> 2)] = 0;
				var $2 = $ix;
				var $inc = ((($2) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 4;
				if ($cmp) {
					__label__ = 1;
					continue $for_body$2;
				} else {
					__label__ = 2;
					break $for_body$2;
				}
			}
			var $arraydecay = (($buf) & 4294967295);
			var $call = _sprintf($arraydecay, ((__str74726) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0, ((__str7418) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay2 = (($buf) & 4294967295);
			var $call3 = _fopen($arraydecay2, ((__str51703) & 4294967295));
			$f = $call3;
			var $cmp4 = ((($call3)) | 0) == 0;
			if ($cmp4) {
				__label__ = 17;;
			} else {
				__label__ = 3;;
			}
			$while_end$$while_cond_preheader$5: do {
				if (__label__ == 3) {
					var $arraydecay5 = (($buf) & 4294967295);
					var $3 = $f;
					var $call61 = _fgets($arraydecay5, 160, $3);
					var $cmp72 = ((($call61)) | 0) != 0;
					if (!($cmp72)) {
						__label__ = 17;
						break $while_end$$while_cond_preheader$5;
					}
					var $arrayidx8 = (($buf) & 4294967295);
					var $arraydecay12 = (($buf) & 4294967295);
					var $arrayidx16 = (($buf + 4) & 4294967295);
					var $arraydecay17 = (($string) & 4294967295);
					var $arraydecay21 = (($string) & 4294967295);
					var $arraydecay24 = (($buf) & 4294967295);
					var $arrayidx28 = (($buf + 5) & 4294967295);
					var $arraydecay30 = (($buf) & 4294967295);
					var $arrayidx34 = (($buf + 10) & 4294967295);
					var $arraydecay37 = (($buf) & 4294967295);
					var $arrayidx41 = (($buf + 10) & 4294967295);
					var $arraydecay42 = (($string) & 4294967295);
					var $arraydecay48 = (($string) & 4294967295);
					var $arraydecay51 = (($string) & 4294967295);;
					$while_body$8: while (1) {
						var $4 = HEAP8[($arrayidx8)];
						var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp9 = ((($conv)) | 0) == 47;
						if ($cmp9) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						$while_cond_backedge$$if_end11$10: do {
							if (__label__ == 7) {
								var $call13 = _memcmp($arraydecay12, ((__str9420) & 4294967295), 3);
								var $cmp14 = ((($call13)) | 0) == 0;
								if ($cmp14) {
									__label__ = 8;;
								} else {
									__label__ = 10;;
								}
								if (__label__ == 8) {
									var $call18 = _sscanf($arrayidx16, ((__str10421) & 4294967295), allocate([_logging_type, 0, 0, 0, $arraydecay17, 0, 0, 0], ["i32*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
									var $cmp19 = ((($call18)) | 0) == 2;
									if (!($cmp19)) {
										__label__ = 6;
										break $while_cond_backedge$$if_end11$10;
									}
									var $call22 = _fopen($arraydecay21, ((__str11422) & 4294967295));
									HEAP32[((_f_logespeak) >> 2)] = $call22;;
								} else if (__label__ == 10) {
									var $call25 = _memcmp($arraydecay24, ((__str27677) & 4294967295), 4);
									var $cmp26 = ((($call25)) | 0) == 0;
									if ($cmp26) {
										__label__ = 11;;
									} else {
										__label__ = 12;;
									}
									if (__label__ == 11) {
										__Z14ReadTonePointsPcPi($arrayidx28, ((_tone_points) & 4294967295));;
									} else if (__label__ == 12) {
										var $call31 = _memcmp($arraydecay30, ((__str13424) & 4294967295), 9);
										var $cmp32 = ((($call31)) | 0) == 0;
										if ($cmp32) {
											__label__ = 13;;
										} else {
											__label__ = 14;;
										}
										if (__label__ == 13) {
											var $call35 = _sscanf($arrayidx34, ((__str63715) & 4294967295), allocate([_option_device_number, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));;
										} else if (__label__ == 14) {
											var $call38 = _memcmp($arraydecay37, ((__str15426) & 4294967295), 9);
											var $cmp39 = ((($call38)) | 0) == 0;
											if (!($cmp39)) {
												__label__ = 6;
												break $while_cond_backedge$$if_end11$10;
											}
											var $call43 = _sscanf($arrayidx41, ((__str16427) & 4294967295), allocate([$c1, 0, 0, 0, $arraydecay42, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
											$ix = $call43;
											var $6 = $ix;
											var $cmp44 = ((($6)) | 0) == 2;
											if (!($cmp44)) {
												__label__ = 6;
												break $while_cond_backedge$$if_end11$10;
											}
											var $7 = HEAP8[($c1)];
											var $conv46 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $8 = HEAP32[((_n_soundicon_tab) >> 2)];
											var $arrayidx47 = ((_soundicon_tab + $8 * 16) & 4294967295);
											var $name = (($arrayidx47) & 4294967295);
											HEAP32[(($name) >> 2)] = $conv46;
											var $call49 = _strlen($arraydecay48);
											var $add = ((($call49) + 1) & 4294967295);
											var $call50 = __Z5Alloci($add);
											$p = $call50;
											var $9 = $p;
											var $call52 = _strcpy($9, $arraydecay51);
											var $10 = $p;
											var $11 = HEAP32[((_n_soundicon_tab) >> 2)];
											var $arrayidx53 = ((_soundicon_tab + $11 * 16) & 4294967295);
											var $filename54 = (($arrayidx53 + 12) & 4294967295);
											HEAP32[(($filename54) >> 2)] = $10;
											var $12 = HEAP32[((_n_soundicon_tab) >> 2)];
											var $inc55 = ((($12) + 1) & 4294967295);
											HEAP32[((_n_soundicon_tab) >> 2)] = $inc55;
											var $arrayidx56 = ((_soundicon_tab + $12 * 16) & 4294967295);
											var $length = (($arrayidx56 + 4) & 4294967295);
											HEAP32[(($length) >> 2)] = 0;;
										}
									}
								}
							}
						} while (0);
						var $5 = $f;
						var $call6 = _fgets($arraydecay5, 160, $5);
						var $cmp7 = ((($call6)) | 0) != 0;
						if ($cmp7) {
							__label__ = 5;
							continue $while_body$8;
						} else {
							__label__ = 17;
							break $while_end$$while_cond_preheader$5;
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA($tr, $control, $plist, $phdata) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 44;
			_memset(__stackBase__, 0, 44);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $control_addr;
			var $plist_addr;
			var $phdata_addr;
			var $ph;
			var $prog = __stackBase__;
			var $instn;
			var $instn2;
			var $or_flag;
			var $truth;
			var $data;
			var $end_flag;
			var $ix;
			var $param_sc;
			var $n_return;
			var $return_addr = __stackBase__ + 4;
			$tr_addr = $tr;
			$control_addr = $control;
			$plist_addr = $plist;
			$phdata_addr = $phdata;
			$n_return = 0;
			var $0 = $plist_addr;
			var $ph1 = (($0 + 8) & 4294967295);
			var $1 = HEAP32[(($ph1) >> 2)];
			$ph = $1;
			var $2 = $phdata_addr;
			var $3 = $2;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $3;
			$stop$ = $dest$ + 152;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $4 = $ph;
			var $std_length = (($4 + 14) & 4294967295);
			var $5 = HEAPU8[($std_length)];
			var $conv = ((($5)) & 255);
			var $6 = $phdata_addr;
			var $pd_param = (($6 + 4) & 4294967295);
			var $arrayidx = (($pd_param + 40) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = $conv;
			var $7 = $ph;
			var $length_mod = (($7 + 15) & 4294967295);
			var $8 = HEAPU8[($length_mod)];
			var $conv2 = ((($8)) & 255);
			var $9 = $phdata_addr;
			var $pd_param3 = (($9 + 4) & 4294967295);
			var $arrayidx4 = (($pd_param3 + 36) & 4294967295);
			HEAP32[(($arrayidx4) >> 2)] = $conv2;
			var $10 = $ph;
			var $program = (($10 + 8) & 4294967295);
			var $11 = HEAPU16[(($program) >> 1)];
			var $conv5 = ((($11)) & 65535);
			var $cmp = ((($conv5)) | 0) == 0;
			if ($cmp) {
				__label__ = 69;;
			} else {
				__label__ = 1;;
			}
			$for_end237$$if_end$2: do {
				if (__label__ == 1) {
					$end_flag = 0;
					var $12 = $ph;
					var $program6 = (($12 + 8) & 4294967295);
					var $13 = HEAPU16[(($program6) >> 1)];
					var $idxprom = ((($13)) & 65535);
					var $14 = HEAP32[((_phoneme_index) >> 2)];
					var $arrayidx7 = (($14 + 2 * $idxprom) & 4294967295);
					HEAP32[(($prog) >> 2)] = $arrayidx7;
					var $15 = $end_flag;
					var $cmp89 = ((($15)) | 0) != 1;
					if (!($cmp89)) {
						__label__ = 69;
						break $for_end237$$if_end$2;
					}
					$for_body$4: while (1) {
						var $16 = HEAP32[(($prog) >> 2)];
						var $17 = HEAP16[(($16) >> 1)];
						$instn = $17;
						var $18 = $instn;
						var $conv9 = ((($18)) & 65535);
						var $shr = ($conv9) >> 8;
						var $and = ($shr) & 15;
						$instn2 = $and;
						$or_flag = 0;
						var $19 = $instn;
						var $conv10 = ((($19)) & 65535);
						var $shr11 = ($conv10) >> 12;
						if ($shr11 == 0) {
							__label__ = 3;;
						} else if ($shr11 == 1) {
							__label__ = 21;;
						} else if ($shr11 == 2) {
							__label__ = 25;;
						} else if ($shr11 == 3) {
							__label__ = 25;;
						} else if ($shr11 == 6) {
							__label__ = 40;;
						} else if ($shr11 == 9) {
							__label__ = 44;;
						} else if ($shr11 == 10) {
							__label__ = 49;;
						} else if ($shr11 == 11) {
							__label__ = 53;;
						} else if ($shr11 == 12) {
							__label__ = 53;;
						} else if ($shr11 == 13) {
							__label__ = 53;;
						} else if ($shr11 == 14) {
							__label__ = 53;;
						} else if ($shr11 == 15) {
							__label__ = 53;;
						} else {
							__label__ = 61;;
						}
						$sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6: do {
							if (__label__ == 61) {
								var $153 = $ph;
								var $154 = $instn;
								var $conv222 = ((($154)) & 65535);
								__ZL12InvalidInstnP11PHONEME_TABi($153, $conv222);;
							} else if (__label__ == 3) {
								var $20 = $instn;
								var $conv12 = ((($20)) & 65535);
								var $and13 = ($conv12) & 255;
								$data = $and13;
								var $21 = $instn2;
								var $cmp14 = ((($21)) | 0) == 0;
								if ($cmp14) {
									__label__ = 4;;
								} else {
									__label__ = 7;;
								}
								if (__label__ == 4) {
									var $22 = $data;
									if ($22 == 1) {
										__label__ = 5;;
									} else if ($22 == 2) {
										__label__ = 62;
										break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
									} else {
										__label__ = 6;;
									}
									if (__label__ == 6) {
										var $23 = $ph;
										var $24 = $instn;
										var $conv17 = ((($24)) & 65535);
										__ZL12InvalidInstnP11PHONEME_TABi($23, $conv17);;
									} else if (__label__ == 5) {
										$end_flag = 1;;
									}
								} else if (__label__ == 7) {
									var $25 = $instn2;
									var $cmp18 = ((($25)) | 0) == 5;
									if ($cmp18) {
										__label__ = 8;;
									} else {
										__label__ = 10;;
									}
									if (__label__ == 8) {
										var $26 = $plist_addr;
										var $arrayidx20 = (($26 + 24) & 4294967295);
										var $phcode = (($arrayidx20) & 4294967295);
										var $27 = HEAPU8[($phcode)];
										var $idxprom21 = ((($27)) & 255);
										var $arrayidx22 = ((_phoneme_tab + $idxprom21 * 4) & 4294967295);
										var $28 = HEAP32[(($arrayidx22) >> 2)];
										var $type = (($28 + 11) & 4294967295);
										var $29 = HEAPU8[($type)];
										var $conv23 = ((($29)) & 255);
										var $cmp24 = ((($conv23)) | 0) == 2;
										if (!($cmp24)) {
											__label__ = 62;
											break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
										}
										var $30 = $data;
										var $31 = $phdata_addr;
										var $pd_param26 = (($31 + 4) & 4294967295);
										var $arrayidx27 = (($pd_param26 + 16) & 4294967295);
										HEAP32[(($arrayidx27) >> 2)] = $30;;
									} else if (__label__ == 10) {
										var $32 = $instn2;
										var $cmp30 = ((($32)) | 0) == 13;
										if ($cmp30) {
											__label__ = 11;;
										} else {
											__label__ = 14;;
										}
										if (__label__ == 11) {
											$ix = 0;
											var $33 = $ix;
											var $34 = $data;
											var $cmp333 = ((($33)) | 0) < ((($34)) | 0);
											var $35 = $ix;
											var $cmp344 = ((($35)) | 0) < 16;
											var $or_cond15 = ($cmp333) & ($cmp344);
											if ($or_cond15) {
												__label__ = 12;;
											} else {
												__label__ = 13;;
											}
											$for_body35$$for_end$21: do {
												if (__label__ == 12) {
													while (1) {
														var $36 = HEAP32[(($prog) >> 2)];
														var $incdec_ptr = (($36 + 2) & 4294967295);
														HEAP32[(($prog) >> 2)] = $incdec_ptr;
														var $37 = HEAP32[(($prog) >> 2)];
														var $arrayidx36 = (($37) & 4294967295);
														var $38 = HEAPU16[(($arrayidx36) >> 1)];
														var $conv37 = ((($38)) & 65535);
														var $shr38 = ($conv37) >> 8;
														var $conv39 = ((($shr38)) & 255);
														var $39 = $ix;
														var $40 = $phdata_addr;
														var $ipa_string = (($40 + 132) & 4294967295);
														var $arrayidx40 = (($ipa_string + $39) & 4294967295);
														HEAP8[($arrayidx40)] = $conv39;
														var $41 = HEAP32[(($prog) >> 2)];
														var $arrayidx41 = (($41) & 4294967295);
														var $42 = HEAPU16[(($arrayidx41) >> 1)];
														var $conv42 = ((($42)) & 65535);
														var $and43 = ($conv42) & 255;
														var $conv44 = ((($and43)) & 255);
														var $43 = $ix;
														var $add = ((($43) + 1) & 4294967295);
														var $44 = $phdata_addr;
														var $ipa_string45 = (($44 + 132) & 4294967295);
														var $arrayidx46 = (($ipa_string45 + $add) & 4294967295);
														HEAP8[($arrayidx46)] = $conv44;
														var $45 = $ix;
														var $add47 = ((($45) + 2) & 4294967295);
														$ix = $add47;
														var $46 = $ix;
														var $47 = $data;
														var $cmp33 = ((($46)) | 0) < ((($47)) | 0);
														var $48 = $ix;
														var $cmp34 = ((($48)) | 0) < 16;
														var $or_cond1 = ($cmp33) & ($cmp34);
														if ($or_cond1) {
															__label__ = 12;
															continue;
														} else {
															__label__ = 13;
															break $for_body35$$for_end$21;
														}
													}
												}
											} while (0);
											var $49 = $ix;
											var $50 = $phdata_addr;
											var $ipa_string48 = (($50 + 132) & 4294967295);
											var $arrayidx49 = (($ipa_string48 + $49) & 4294967295);
											HEAP8[($arrayidx49)] = 0;;
										} else if (__label__ == 14) {
											var $51 = $instn2;
											var $cmp51 = ((($51)) | 0) < 16;
											if ($cmp51) {
												__label__ = 15;;
											} else {
												__label__ = 20;;
											}
											if (__label__ == 15) {
												var $52 = $instn2;
												var $cmp53 = ((($52)) | 0) == 12;
												if ($cmp53) {
													__label__ = 16;;
												} else {
													__label__ = 17;;
												}
												if (__label__ == 16) {
													var $53 = $data;
													var $54 = $phdata_addr;
													var $pd_param55 = (($54 + 4) & 4294967295);
													var $arrayidx56 = (($pd_param55 + 4) & 4294967295);
													HEAP32[(($arrayidx56) >> 2)] = $53;;
												}
												var $55 = $data;
												var $56 = $instn2;
												var $57 = $phdata_addr;
												var $pd_param58 = (($57 + 4) & 4294967295);
												var $arrayidx59 = (($pd_param58 + $56 * 4) & 4294967295);
												HEAP32[(($arrayidx59) >> 2)] = $55;
												var $58 = $instn2;
												var $cmp60 = ((($58)) | 0) == 1;
												if (!($cmp60)) {
													__label__ = 62;
													break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
												}
												var $59 = $control_addr;
												var $and61 = ($59) & 256;
												var $tobool = ((($and61)) | 0) != 0;
												if (!($tobool)) {
													__label__ = 62;
													break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
												}
												$end_flag = 1;;
											} else if (__label__ == 20) {
												var $60 = $ph;
												var $61 = $instn;
												var $conv65 = ((($61)) & 65535);
												__ZL12InvalidInstnP11PHONEME_TABi($60, $conv65);;
											}
										}
									}
								}
							} else if (__label__ == 21) {
								var $62 = $tr_addr;
								var $cmp71 = ((($62)) | 0) == 0;
								if ($cmp71) {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								var $63 = $instn2;
								var $cmp74 = ((($63)) | 0) < 8;
								if (!($cmp74)) {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								var $64 = $tr_addr;
								var $65 = $plist_addr;
								var $66 = $instn2;
								var $and76 = ($66) & 7;
								var $call = __ZL15StressConditionP10TranslatorP12PHONEME_LISTii($64, $65, $and76, 1);
								if (!($call)) {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								var $67 = $instn;
								var $conv78 = ((($67)) & 65535);
								var $and79 = ($conv78) & 255;
								var $68 = $phdata_addr;
								var $pd_param80 = (($68 + 4) & 4294967295);
								var $arrayidx81 = (($pd_param80 + 4) & 4294967295);
								HEAP32[(($arrayidx81) >> 2)] = $and79;
								$end_flag = 1;;
							} else if (__label__ == 25) {
								$or_flag = 0;
								$truth = 1;
								var $69 = $instn;
								var $conv856 = ((($69)) & 65535);
								var $and867 = ($conv856) & 57344;
								var $cmp878 = ((($and867)) | 0) == 8192;
								if ($cmp878) {
									__label__ = 26;;
								} else {
									__label__ = 34;;
								}
								$while_body$$while_end$39: do {
									if (__label__ == 26) {
										while (1) {
											var $70 = $or_flag;
											var $tobool88 = ((($70)) | 0) != 0;
											var $71 = $truth;
											var $tobool90 = ((($71)) & 1);
											if ($tobool88) {
												__label__ = 27;;
											} else {
												__label__ = 30;;
											}
											if (__label__ == 27) {
												if ($tobool90) {
													__lastLabel__ = 27;
													__label__ = 29;;
												} else {
													__lastLabel__ = 27;
													__label__ = 28;;
												}
												if (__label__ == 28) {
													var $72 = $tr_addr;
													var $73 = $control_addr;
													var $74 = $plist_addr;
													var $75 = $instn;
													var $conv91 = ((($75)) & 65535);
													var $and92 = ($conv91) & 4095;
													var $call93 = __ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTi($72, $73, $74, $and92);
													__lastLabel__ = 28;;
												}
												var $76 = __lastLabel__ == 27 ? 1 : ($call93);
												var $frombool = ((($76)) & 1);
												$truth = $frombool;;
											} else if (__label__ == 30) {
												if ($tobool90) {
													__lastLabel__ = 30;
													__label__ = 31;;
												} else {
													__lastLabel__ = 30;
													__label__ = 32;;
												}
												if (__label__ == 31) {
													var $77 = $tr_addr;
													var $78 = $control_addr;
													var $79 = $plist_addr;
													var $80 = $instn;
													var $conv97 = ((($80)) & 65535);
													var $and98 = ($conv97) & 4095;
													var $call99 = __ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTi($77, $78, $79, $and98);
													__lastLabel__ = 31;;
												}
												var $81 = __lastLabel__ == 30 ? 0 : ($call99);
												var $frombool101 = ((($81)) & 1);
												$truth = $frombool101;;
											}
											var $82 = $instn;
											var $conv103 = ((($82)) & 65535);
											var $and104 = ($conv103) & 4096;
											$or_flag = $and104;
											var $83 = HEAP32[(($prog) >> 2)];
											var $incdec_ptr105 = (($83 + 2) & 4294967295);
											HEAP32[(($prog) >> 2)] = $incdec_ptr105;
											var $84 = HEAP16[(($incdec_ptr105) >> 1)];
											$instn = $84;
											var $85 = $instn;
											var $conv85 = ((($85)) & 65535);
											var $and86 = ($conv85) & 57344;
											var $cmp87 = ((($and86)) | 0) == 8192;
											if ($cmp87) {
												__label__ = 26;
												continue;
											} else {
												__label__ = 34;
												break $while_body$$while_end$39;
											}
										}
									}
								} while (0);
								var $86 = $truth;
								var $tobool106 = ((($86)) & 1);
								var $conv107 = ((($tobool106)) & 1);
								var $cmp108 = ((($conv107)) | 0) == 0;
								if ($cmp108) {
									__label__ = 35;;
								} else {
									__label__ = 39;;
								}
								$if_then109$$if_end127$53: do {
									if (__label__ == 35) {
										var $87 = $instn;
										var $conv110 = ((($87)) & 65535);
										var $and111 = ($conv110) & 63488;
										var $cmp112 = ((($and111)) | 0) == 26624;
										if ($cmp112) {
											__label__ = 36;;
										} else {
											__label__ = 37;;
										}
										if (__label__ == 36) {
											var $88 = $instn;
											var $conv114 = ((($88)) & 65535);
											var $and115 = ($conv114) & 255;
											var $89 = HEAP32[(($prog) >> 2)];
											var $add_ptr = (($89 + 2 * $and115) & 4294967295);
											HEAP32[(($prog) >> 2)] = $add_ptr;;
										} else if (__label__ == 37) {
											var $90 = HEAP32[(($prog) >> 2)];
											var $call117 = __ZL13NumInstnWordsPt($90);
											var $91 = HEAP32[(($prog) >> 2)];
											var $add_ptr118 = (($91 + 2 * $call117) & 4294967295);
											HEAP32[(($prog) >> 2)] = $add_ptr118;
											var $92 = HEAP32[(($prog) >> 2)];
											var $arrayidx119 = (($92) & 4294967295);
											var $93 = HEAPU16[(($arrayidx119) >> 1)];
											var $conv120 = ((($93)) & 65535);
											var $and121 = ($conv120) & 65024;
											var $cmp122 = ((($and121)) | 0) == 24576;
											if (!($cmp122)) {
												__label__ = 39;
												break $if_then109$$if_end127$53;
											}
											var $94 = HEAP32[(($prog) >> 2)];
											var $incdec_ptr124 = (($94 + 2) & 4294967295);
											HEAP32[(($prog) >> 2)] = $incdec_ptr124;;
										}
									}
								} while (0);
								var $95 = HEAP32[(($prog) >> 2)];
								var $incdec_ptr128 = (($95 + -2) & 4294967295);
								HEAP32[(($prog) >> 2)] = $incdec_ptr128;;
							} else if (__label__ == 40) {
								var $96 = $instn2;
								var $shr130 = ($96) >> 1;
								if ($shr130 == 0) {
									__label__ = 41;;
								} else if ($shr130 == 6) {
									__label__ = 43;;
								} else if ($shr130 == 5) {
									__label__ = 42;;
								} else {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								if (__label__ == 41) {
									var $97 = $instn;
									var $conv132 = ((($97)) & 65535);
									var $and133 = ($conv132) & 255;
									var $sub = ((($and133) - 1) & 4294967295);
									var $98 = HEAP32[(($prog) >> 2)];
									var $add_ptr134 = (($98 + 2 * $sub) & 4294967295);
									HEAP32[(($prog) >> 2)] = $add_ptr134;;
								} else if (__label__ == 43) {
									var $101 = $plist_addr;
									var $102 = $phdata_addr;
									__ZL15SwitchVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($101, $102, $prog, 3);;
								} else if (__label__ == 42) {
									var $99 = $plist_addr;
									var $100 = $phdata_addr;
									__ZL15SwitchVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($99, $100, $prog, 2);;
								}
							} else if (__label__ == 44) {
								var $103 = $instn;
								var $conv139 = ((($103)) & 65535);
								var $and140 = ($conv139) & 15;
								var $shl = ((($and140) * 65536) & 4294967295);
								var $104 = HEAP32[(($prog) >> 2)];
								var $arrayidx141 = (($104 + 2) & 4294967295);
								var $105 = HEAPU16[(($arrayidx141) >> 1)];
								var $conv142 = ((($105)) & 65535);
								var $add143 = ((($shl) + ($conv142)) & 4294967295);
								$data = $add143;
								var $106 = HEAP32[(($prog) >> 2)];
								var $incdec_ptr144 = (($106 + 2) & 4294967295);
								HEAP32[(($prog) >> 2)] = $incdec_ptr144;
								var $107 = $instn2;
								if ($107 == 1) {
									__label__ = 45;;
								} else if ($107 == 2) {
									__label__ = 47;;
								} else if ($107 == 3) {
									__label__ = 48;;
								} else {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								if (__label__ == 45) {
									var $108 = $n_return;
									var $cmp146 = ((($108)) | 0) < 10;
									if (!($cmp146)) {
										__label__ = 62;
										break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
									}
									var $109 = HEAP32[(($prog) >> 2)];
									var $110 = $n_return;
									var $inc = ((($110) + 1) & 4294967295);
									$n_return = $inc;
									var $arrayidx148 = (($return_addr + $110 * 4) & 4294967295);
									HEAP32[(($arrayidx148) >> 2)] = $109;
									var $111 = $data;
									var $112 = HEAP32[((_phoneme_index) >> 2)];
									var $arrayidx149 = (($112 + 2 * $111) & 4294967295);
									var $add_ptr150 = (($arrayidx149 + -2) & 4294967295);
									HEAP32[(($prog) >> 2)] = $add_ptr150;;
								} else if (__label__ == 47) {
									var $113 = $data;
									var $114 = $phdata_addr;
									var $pitch_env = (($114 + 124) & 4294967295);
									HEAP32[(($pitch_env) >> 2)] = $113;;
								} else if (__label__ == 48) {
									var $115 = $data;
									var $116 = $phdata_addr;
									var $amp_env = (($116 + 128) & 4294967295);
									HEAP32[(($amp_env) >> 2)] = $115;;
								}
							} else if (__label__ == 49) {
								var $117 = $instn2;
								var $cmp156 = ((($117)) | 0) == 1;
								if ($cmp156) {
									__label__ = 50;;
								} else {
									__label__ = 51;;
								}
								if (__label__ == 50) {
									$ix = 0;;
								} else if (__label__ == 51) {
									$ix = 2;;
								}
								var $118 = HEAP32[(($prog) >> 2)];
								var $arrayidx160 = (($118) & 4294967295);
								var $119 = HEAPU16[(($arrayidx160) >> 1)];
								var $conv161 = ((($119)) & 65535);
								var $and162 = ($conv161) & 255;
								var $shl163 = ((($and162) * 65536) & 4294967295);
								var $120 = HEAP32[(($prog) >> 2)];
								var $arrayidx164 = (($120 + 2) & 4294967295);
								var $121 = HEAPU16[(($arrayidx164) >> 1)];
								var $conv165 = ((($121)) & 65535);
								var $add166 = ((($shl163) + ($conv165)) & 4294967295);
								var $122 = $ix;
								var $123 = $phdata_addr;
								var $vowel_transition = (($123 + 108) & 4294967295);
								var $arrayidx167 = (($vowel_transition + $122 * 4) & 4294967295);
								HEAP32[(($arrayidx167) >> 2)] = $add166;
								var $124 = HEAP32[(($prog) >> 2)];
								var $arrayidx168 = (($124 + 4) & 4294967295);
								var $125 = HEAPU16[(($arrayidx168) >> 1)];
								var $conv169 = ((($125)) & 65535);
								var $shl170 = ((($conv169) * 65536) & 4294967295);
								var $126 = HEAP32[(($prog) >> 2)];
								var $arrayidx171 = (($126 + 6) & 4294967295);
								var $127 = HEAPU16[(($arrayidx171) >> 1)];
								var $conv172 = ((($127)) & 65535);
								var $add173 = ((($conv172) + ($shl170)) & 4294967295);
								var $128 = $ix;
								var $add174 = ((($128) + 1) & 4294967295);
								var $129 = $phdata_addr;
								var $vowel_transition175 = (($129 + 108) & 4294967295);
								var $arrayidx176 = (($vowel_transition175 + $add174 * 4) & 4294967295);
								HEAP32[(($arrayidx176) >> 2)] = $add173;
								var $130 = HEAP32[(($prog) >> 2)];
								var $add_ptr177 = (($130 + 6) & 4294967295);
								HEAP32[(($prog) >> 2)] = $add_ptr177;;
							} else if (__label__ == 53) {
								var $131 = $instn;
								var $conv179 = ((($131)) & 65535);
								var $shr180 = ($conv179) >> 12;
								var $sub181 = ((($shr180) - 11) & 4294967295);
								$instn2 = $sub181;
								var $132 = $instn;
								var $conv182 = ((($132)) & 65535);
								var $and183 = ($conv182) & 15;
								var $shl184 = ((($and183) * 262144) & 4294967295);
								var $133 = HEAP32[(($prog) >> 2)];
								var $arrayidx185 = (($133 + 2) & 4294967295);
								var $134 = HEAPU16[(($arrayidx185) >> 1)];
								var $conv186 = ((($134)) & 65535);
								var $shl187 = ((($conv186) * 4) & 4294967295);
								var $add188 = ((($shl187) + ($shl184)) & 4294967295);
								var $135 = $instn2;
								var $136 = $phdata_addr;
								var $sound_addr = (($136 + 68) & 4294967295);
								var $arrayidx189 = (($sound_addr + $135 * 4) & 4294967295);
								HEAP32[(($arrayidx189) >> 2)] = $add188;
								var $137 = $instn;
								var $conv190 = ((($137)) & 65535);
								var $shr191 = ($conv190) >> 4;
								var $and192 = ($shr191) & 255;
								var $138 = $instn2;
								var $139 = $phdata_addr;
								var $sound_param = (($139 + 88) & 4294967295);
								var $arrayidx193 = (($sound_param + $138 * 4) & 4294967295);
								HEAP32[(($arrayidx193) >> 2)] = $and192;
								var $conv194 = ((($and192)) & 255);
								$param_sc = $conv194;
								var $140 = HEAP32[(($prog) >> 2)];
								var $incdec_ptr195 = (($140 + 2) & 4294967295);
								HEAP32[(($prog) >> 2)] = $incdec_ptr195;
								var $141 = HEAP32[(($prog) >> 2)];
								var $arrayidx196 = (($141 + 2) & 4294967295);
								var $142 = HEAPU16[(($arrayidx196) >> 1)];
								var $conv197 = ((($142)) & 65535);
								var $cmp198 = ((($conv197)) | 0) != 2;
								if (!($cmp198)) {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								var $143 = $instn2;
								var $cmp200 = ((($143)) | 0) < 2;
								if ($cmp200) {
									__label__ = 55;;
								} else {
									__label__ = 57;;
								}
								$if_then201$$if_else208$78: do {
									if (__label__ == 55) {
										$end_flag = 1;
										var $144 = HEAP32[(($prog) >> 2)];
										var $arrayidx202 = (($144 + 2) & 4294967295);
										var $145 = HEAPU16[(($arrayidx202) >> 1)];
										var $conv203 = ((($145)) & 65535);
										var $shr204 = ($conv203) >> 12;
										var $cmp205 = ((($shr204)) | 0) == 15;
										if (!($cmp205)) {
											__label__ = 59;
											break $if_then201$$if_else208$78;
										}
										$end_flag = 2;;
									} else if (__label__ == 57) {
										var $146 = $instn2;
										var $cmp209 = ((($146)) | 0) == 4;
										if (!($cmp209)) {
											__label__ = 59;
											break $if_then201$$if_else208$78;
										}
										var $147 = $end_flag;
										var $dec = ((($147) - 1) & 4294967295);
										$end_flag = $dec;;
									}
								} while (0);
								var $148 = $instn2;
								var $cmp213 = ((($148)) | 0) == 2;
								var $149 = $instn2;
								var $cmp214 = ((($149)) | 0) == 3;
								var $or_cond = ($cmp213) | ($cmp214);
								if (!($or_cond)) {
									__label__ = 62;
									break $sw_default221$$sw_bb$$sw_bb70$$sw_bb84$$sw_bb129$$sw_bb138$$sw_bb155$$sw_bb178$6;
								}
								var $150 = $param_sc;
								var $conv216 = (tempInt = (($150)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $151 = $instn2;
								var $152 = $phdata_addr;
								var $sound_param217 = (($152 + 88) & 4294967295);
								var $arrayidx218 = (($sound_param217 + $151 * 4) & 4294967295);
								HEAP32[(($arrayidx218) >> 2)] = $conv216;;
							}
						} while (0);
						var $155 = $ph;
						var $phflags = (($155 + 4) & 4294967295);
						var $156 = HEAP32[(($phflags) >> 2)];
						var $and224 = ($156) & 4096;
						var $tobool225 = ((($and224)) | 0) != 0;
						if ($tobool225) {
							__label__ = 63;;
						} else {
							__label__ = 64;;
						}
						$if_end227_thread$$if_end227$86: do {
							if (__label__ == 63) {
								$end_flag = 1;;
							} else if (__label__ == 64) {
								var $_pr = $end_flag;
								var $cmp228 = ((($_pr)) | 0) == 1;
								if ($cmp228) {
									__label__ = 66;
									break $if_end227_thread$$if_end227$86;
								}
								var $157 = HEAP32[(($prog) >> 2)];
								var $incdec_ptr23611 = (($157 + 2) & 4294967295);
								HEAP32[(($prog) >> 2)] = $incdec_ptr23611;
								__label__ = 2;
								continue $for_body$4;
							}
						} while (0);
						var $158 = $n_return;
						var $cmp230 = ((($158)) | 0) > 0;
						if ($cmp230) {
							__label__ = 67;;
						} else {
							__label__ = 68;;
						}
						if (__label__ == 67) {
							$end_flag = 0;
							var $159 = $n_return;
							var $dec232 = ((($159) - 1) & 4294967295);
							$n_return = $dec232;
							var $arrayidx233 = (($return_addr + $dec232 * 4) & 4294967295);
							var $160 = HEAP32[(($arrayidx233) >> 2)];
							HEAP32[(($prog) >> 2)] = $160;;
						}
						var $_pr10 = $end_flag;
						var $161 = HEAP32[(($prog) >> 2)];
						var $incdec_ptr236 = (($161 + 2) & 4294967295);
						HEAP32[(($prog) >> 2)] = $incdec_ptr236;
						var $cmp8 = ((($_pr10)) | 0) != 1;
						if ($cmp8) {
							__label__ = 2;
							continue $for_body$4;
						} else {
							__label__ = 69;
							break $for_end237$$if_end$2;
						}
					}
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL12InvalidInstnP11PHONEME_TABi($ph, $instn) {;
			var __label__;
			var $ph_addr;
			var $instn_addr;
			$ph_addr = $ph;
			$instn_addr = $instn;
			var $0 = HEAP32[((__impure_ptr) >> 2)];
			var $_stderr = (($0 + 12) & 4294967295);
			var $1 = HEAP32[(($_stderr) >> 2)];
			var $2 = $instn_addr;
			var $3 = $ph_addr;
			var $mnemonic = (($3) & 4294967295);
			var $4 = HEAP32[(($mnemonic) >> 2)];
			var $call = __Z12WordToStringj($4);
			var $call1 = _fprintf($1, ((__str17428) & 4294967295), allocate([$2, 0, 0, 0, ((__ZZ12WordToStringjE3buf) & 4294967295), 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
			return;
			return;
		}

		function __ZL15StressConditionP10TranslatorP12PHONEME_LISTii($tr, $plist, $condition, $control) {;
			var __label__;
			var $retval;
			var $tr_addr;
			var $plist_addr;
			var $condition_addr;
			var $control_addr;
			var $stress_level;
			var $pl;
			$tr_addr = $tr;
			$plist_addr = $plist;
			$condition_addr = $condition;
			$control_addr = $control;
			var $0 = $plist_addr;
			var $arrayidx = (($0) & 4294967295);
			var $phcode = (($arrayidx) & 4294967295);
			var $1 = HEAPU8[($phcode)];
			var $idxprom = ((($1)) & 255);
			var $arrayidx1 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
			var $2 = HEAP32[(($arrayidx1) >> 2)];
			var $type = (($2 + 11) & 4294967295);
			var $3 = HEAPU8[($type)];
			var $conv = ((($3)) & 255);
			var $cmp = ((($conv)) | 0) == 2;
			var $4 = $plist_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_else$2: do {
				if (__label__ == 1) {
					$pl = $4;
					__label__ = 5;
					break $if_then$$if_else$2;
				} else if (__label__ == 2) {
					var $arrayidx2 = (($4 + 24) & 4294967295);
					var $phcode3 = (($arrayidx2) & 4294967295);
					var $5 = HEAPU8[($phcode3)];
					var $idxprom4 = ((($5)) & 255);
					var $arrayidx5 = ((_phoneme_tab + $idxprom4 * 4) & 4294967295);
					var $6 = HEAP32[(($arrayidx5) >> 2)];
					var $type6 = (($6 + 11) & 4294967295);
					var $7 = HEAPU8[($type6)];
					var $conv7 = ((($7)) & 255);
					var $cmp8 = ((($conv7)) | 0) == 2;
					if ($cmp8) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $8 = $plist_addr;
						var $arrayidx10 = (($8 + 24) & 4294967295);
						$pl = $arrayidx10;
						__label__ = 5;
						break $if_then$$if_else$2;
					} else if (__label__ == 4) {
						$retval = 0;
						__label__ = 21;
						break $if_then$$if_else$2;
					}
				}
			} while (0);
			$if_end12$$return$8: do {
				if (__label__ == 5) {
					var $9 = $pl;
					var $stresslevel = (($9 + 1) & 4294967295);
					var $10 = HEAPU8[($stresslevel)];
					var $conv13 = ((($10)) & 255);
					var $and = ($conv13) & 15;
					$stress_level = $and;
					var $11 = $tr_addr;
					var $cmp14 = ((($11)) | 0) != 0;
					if ($cmp14) {
						__label__ = 6;;
					} else {
						__label__ = 13;;
					}
					$if_then15$$if_end36$10: do {
						if (__label__ == 6) {
							var $12 = $control_addr;
							var $and16 = ($12) & 1;
							var $tobool = ((($and16)) | 0) != 0;
							if ($tobool) {
								__label__ = 7;;
							} else {
								__label__ = 10;;
							}
							$land_lhs_true$$if_end25$12: do {
								if (__label__ == 7) {
									var $13 = $plist_addr;
									var $synthflags = (($13 + 4) & 4294967295);
									var $14 = HEAPU16[(($synthflags) >> 1)];
									var $conv17 = ((($14)) & 65535);
									var $and18 = ($conv17) & 16;
									var $tobool19 = ((($and18)) | 0) != 0;
									if (!($tobool19)) {
										__label__ = 10;
										break $land_lhs_true$$if_end25$12;
									}
									var $15 = $tr_addr;
									var $langopts = (($15) & 4294967295);
									var $param = (($langopts + 24) & 4294967295);
									var $arrayidx21 = (($param + 40) & 4294967295);
									var $16 = HEAP32[(($arrayidx21) >> 2)];
									var $and22 = ($16) & 1;
									var $cmp23 = ((($and22)) | 0) == 0;
									if (!($cmp23)) {
										__label__ = 10;
										break $land_lhs_true$$if_end25$12;
									}
									$retval = 0;
									__label__ = 21;
									break $if_end12$$return$8;
								}
							} while (0);
							var $17 = $tr_addr;
							var $langopts26 = (($17) & 4294967295);
							var $param27 = (($langopts26 + 24) & 4294967295);
							var $arrayidx28 = (($param27 + 40) & 4294967295);
							var $18 = HEAP32[(($arrayidx28) >> 2)];
							var $and29 = ($18) & 2;
							var $tobool30 = ((($and29)) | 0) != 0;
							if (!($tobool30)) {
								__label__ = 13;
								break $if_then15$$if_end36$10;
							}
							var $19 = $stress_level;
							var $20 = $pl;
							var $wordstress = (($20 + 2) & 4294967295);
							var $21 = HEAPU8[($wordstress)];
							var $conv32 = ((($21)) & 255);
							var $cmp33 = ((($19)) | 0) >= ((($conv32)) | 0);
							if (!($cmp33)) {
								__label__ = 13;
								break $if_then15$$if_end36$10;
							}
							$stress_level = 4;;
						}
					} while (0);
					var $22 = $condition_addr;
					var $cmp37 = ((($22)) | 0) == 4;
					if ($cmp37) {
						__label__ = 14;;
					} else {
						__label__ = 15;;
					}
					if (__label__ == 14) {
						var $23 = $stress_level;
						var $24 = $pl;
						var $wordstress39 = (($24 + 2) & 4294967295);
						var $25 = HEAPU8[($wordstress39)];
						var $conv40 = ((($25)) & 255);
						var $cmp41 = ((($23)) | 0) >= ((($conv40)) | 0);
						$retval = $cmp41;;
					} else if (__label__ == 15) {
						var $26 = $condition_addr;
						var $cmp43 = ((($26)) | 0) == 3;
						var $27 = $stress_level;
						if ($cmp43) {
							__label__ = 16;;
						} else {
							__label__ = 18;;
						}
						$if_then44$$if_else48$23: do {
							if (__label__ == 16) {
								var $cmp45 = ((($27)) | 0) > 3;
								if (!($cmp45)) {
									__label__ = 20;
									break $if_then44$$if_else48$23;
								}
								$retval = 1;
								__label__ = 21;
								break $if_end12$$return$8;
							} else if (__label__ == 18) {
								var $28 = $condition_addr;
								var $arrayidx49 = ((__ZZL15StressConditionP10TranslatorP12PHONEME_LISTiiE15condition_level + $28 * 4) & 4294967295);
								var $29 = HEAP32[(($arrayidx49) >> 2)];
								var $cmp50 = ((($27)) | 0) < ((($29)) | 0);
								if (!($cmp50)) {
									__label__ = 20;
									break $if_then44$$if_else48$23;
								}
								$retval = 1;
								__label__ = 21;
								break $if_end12$$return$8;
							}
						} while (0);
						$retval = 0;;
					}
				}
			} while (0);
			var $30 = $retval;;
			return $30;
			return null;
		}

		function __ZL18InterpretConditionP10TranslatoriP12PHONEME_LISTi($tr, $control, $plist, $instn) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $control_addr;
			var $plist_addr;
			var $instn_addr;
			var $which;
			var $data;
			var $instn2;
			var $count;
			var $ph;
			var $plist_this;
			$tr_addr = $tr;
			$control_addr = $control;
			$plist_addr = $plist;
			$instn_addr = $instn;
			var $0 = $instn_addr;
			var $and = ($0) & 255;
			$data = $and;
			var $1 = $instn_addr;
			var $shr = ($1) >> 8;
			$instn2 = $shr;
			var $2 = $instn2;
			var $cmp = ((($2)) | 0) < 14;
			var $3 = $instn2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 67;;
			}
			$if_then$$if_else187$2: do {
				if (__label__ == 1) {
					var $rem = ((($3)) | 0) % 7;
					$which = $rem;
					var $4 = $which;
					var $cmp1 = ((($4)) | 0) == 4;
					if ($cmp1) {
						__lastLabel__ = 1;
						__label__ = 2;;
					} else {
						__lastLabel__ = 1;
						__label__ = 5;;
					}
					if (__label__ == 2) {
						var $5 = $plist_addr;
						var $arrayidx = (($5 + 24) & 4294967295);
						var $sourceix = (($arrayidx + 6) & 4294967295);
						var $6 = HEAP16[(($sourceix) >> 1)];
						var $tobool = (tempInt = (($6)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
						if ($tobool) {
							__label__ = 3;;
						} else {
							__label__ = 4;;
						}
						if (__label__ == 3) {
							$retval = 0;
							__label__ = 73;
							break $if_then$$if_else187$2;
						} else if (__label__ == 4) {
							var $_pr = $which;
							__lastLabel__ = 4;;
						}
					}
					var $7 = __lastLabel__ == 4 ? $_pr : ($4);
					var $cmp5 = ((($7)) | 0) == 5;
					if ($cmp5) {
						__label__ = 6;;
					} else {
						__label__ = 8;;
					}
					$if_then6$$if_end12$10: do {
						if (__label__ == 6) {
							var $8 = $plist_addr;
							var $arrayidx7 = (($8) & 4294967295);
							var $sourceix8 = (($arrayidx7 + 6) & 4294967295);
							var $9 = HEAP16[(($sourceix8) >> 1)];
							var $tobool9 = (tempInt = (($9)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
							if (!($tobool9)) {
								__label__ = 8;
								break $if_then6$$if_end12$10;
							}
							$retval = 0;
							__label__ = 73;
							break $if_then$$if_else187$2;
						}
					} while (0);
					var $10 = $which;
					var $cmp13 = ((($10)) | 0) == 7;
					if ($cmp13) {
						__lastLabel__ = 8;
						__label__ = 9;;
					} else {
						__lastLabel__ = 8;
						__label__ = 13;;
					}
					$if_then14$$if_end23$14: do {
						if (__label__ == 9) {
							var $11 = $plist_addr;
							var $arrayidx15 = (($11 + 24) & 4294967295);
							var $sourceix16 = (($arrayidx15 + 6) & 4294967295);
							var $12 = HEAP16[(($sourceix16) >> 1)];
							var $tobool17 = (tempInt = (($12)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
							if ($tobool17) {
								__label__ = 11;;
							} else {
								__label__ = 10;;
							}
							$if_then21$$lor_lhs_false$16: do {
								if (__label__ == 10) {
									var $13 = $plist_addr;
									var $arrayidx18 = (($13 + 48) & 4294967295);
									var $sourceix19 = (($arrayidx18 + 6) & 4294967295);
									var $14 = HEAP16[(($sourceix19) >> 1)];
									var $tobool20 = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
									if ($tobool20) {
										__label__ = 11;
										break $if_then21$$lor_lhs_false$16;
									}
									var $_pr1 = $which;
									__lastLabel__ = 12;
									__label__ = 13;
									break $if_then14$$if_end23$14;
								}
							} while (0);
							$retval = 0;
							__label__ = 73;
							break $if_then$$if_else187$2;
						}
					} while (0);
					var $15 = __lastLabel__ == 12 ? $_pr1 : ($10);
					var $cmp24 = ((($15)) | 0) == 6;
					if ($cmp24) {
						__label__ = 14;;
					} else {
						__label__ = 19;;
					}
					$if_then25$$if_else$21: do {
						if (__label__ == 14) {
							$which = 2;;
							while (1) {
								var $16 = $which;
								var $sub = ((($16) - 1) & 4294967295);
								var $17 = $plist_addr;
								var $arrayidx26 = (($17 + 24 * $sub) & 4294967295);
								var $sourceix27 = (($arrayidx26 + 6) & 4294967295);
								var $18 = HEAP16[(($sourceix27) >> 1)];
								var $tobool28 = (tempInt = (($18)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
								if ($tobool28) {
									__label__ = 16;
									break;
								}
								var $19 = $which;
								var $sub31 = ((($19) - 1) & 4294967295);
								var $20 = $plist_addr;
								var $arrayidx32 = (($20 + 24 * $sub31) & 4294967295);
								var $phcode = (($arrayidx32) & 4294967295);
								var $21 = HEAPU8[($phcode)];
								var $idxprom = ((($21)) & 255);
								var $arrayidx33 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
								var $22 = HEAP32[(($arrayidx33) >> 2)];
								var $type = (($22 + 11) & 4294967295);
								var $23 = HEAPU8[($type)];
								var $conv = ((($23)) & 255);
								var $cmp34 = ((($conv)) | 0) == 2;
								var $_pr2 = $which;
								if ($cmp34) {
									__lastLabel__ = 17;
									__label__ = 20;
									break $if_then25$$if_else$21;
								} else {
									__lastLabel__ = 17;;
								}
								var $inc = ((($_pr2) + 1) & 4294967295);
								$which = $inc;
								__label__ = 15;
								continue;
							}
							$retval = 0;
							__label__ = 73;
							break $if_then$$if_else187$2;
						} else if (__label__ == 19) {
							var $24 = $which;
							var $arrayidx37 = ((__ZZL18InterpretConditionP10TranslatoriP12PHONEME_LISTiE11ph_position + $24 * 4) & 4294967295);
							var $25 = HEAP32[(($arrayidx37) >> 2)];
							$which = $25;
							__lastLabel__ = 19;;
						}
					} while (0);
					var $26 = __lastLabel__ == 19 ? $25 : ($_pr2);
					var $27 = $plist_addr;
					$plist_this = $27;
					var $sub39 = ((($26) - 1) & 4294967295);
					var $28 = $plist_addr;
					var $arrayidx40 = (($28 + 24 * $sub39) & 4294967295);
					$plist_addr = $arrayidx40;
					var $cmp41 = ((($26)) | 0) == 0;
					if ($cmp41) {
						__label__ = 21;;
					} else {
						__label__ = 23;;
					}
					$if_then42$$if_end49$30: do {
						if (__label__ == 21) {
							var $29 = $plist_addr;
							var $phcode43 = (($29) & 4294967295);
							var $30 = HEAPU8[($phcode43)];
							var $conv44 = ((($30)) & 255);
							var $cmp45 = ((($conv44)) | 0) == 1;
							if (!($cmp45)) {
								__label__ = 23;
								break $if_then42$$if_end49$30;
							}
							var $31 = $plist_addr;
							var $arrayidx47 = (($31 + -24) & 4294967295);
							$plist_addr = $arrayidx47;;
						}
					} while (0);
					var $32 = $control_addr;
					var $and50 = ($32) & 256;
					var $tobool51 = ((($and50)) | 0) != 0;
					if ($tobool51) {
						__label__ = 24;;
					} else {
						__label__ = 25;;
					}
					if (__label__ == 24) {
						var $33 = $plist_addr;
						var $phcode53 = (($33) & 4294967295);
						var $34 = HEAPU8[($phcode53)];
						var $idxprom54 = ((($34)) & 255);
						var $arrayidx55 = ((_phoneme_tab + $idxprom54 * 4) & 4294967295);
						var $35 = HEAP32[(($arrayidx55) >> 2)];
						var $36 = $plist_addr;
						var $ph56 = (($36 + 8) & 4294967295);
						HEAP32[(($ph56) >> 2)] = $35;;
					}
					var $37 = $plist_addr;
					var $ph58 = (($37 + 8) & 4294967295);
					var $38 = HEAP32[(($ph58) >> 2)];
					$ph = $38;
					var $39 = $instn2;
					var $cmp59 = ((($39)) | 0) < 7;
					if ($cmp59) {
						__label__ = 26;;
					} else {
						__label__ = 32;;
					}
					if (__label__ == 26) {
						var $40 = $data;
						var $arrayidx61 = ((_phoneme_tab + $40 * 4) & 4294967295);
						var $41 = HEAP32[(($arrayidx61) >> 2)];
						var $mnemonic = (($41) & 4294967295);
						var $42 = HEAP32[(($mnemonic) >> 2)];
						var $43 = $ph;
						var $mnemonic62 = (($43) & 4294967295);
						var $44 = HEAP32[(($mnemonic62) >> 2)];
						var $cmp63 = ((($42)) | 0) == ((($44)) | 0);
						var $conv64 = ((($cmp63)) & 1);
						var $cmp65 = ((($conv64)) | 0) == 1;
						if ($cmp65) {
							__label__ = 27;;
						} else {
							__label__ = 28;;
						}
						if (__label__ == 27) {
							$retval = 1;;
						} else if (__label__ == 28) {
							var $45 = $which;
							var $cmp68 = ((($45)) | 0) == 0;
							if ($cmp68) {
								__label__ = 29;;
							} else {
								__label__ = 31;;
							}
							$land_lhs_true$$if_end75$42: do {
								if (__label__ == 29) {
									var $46 = $ph;
									var $type69 = (($46 + 11) & 4294967295);
									var $47 = HEAPU8[($type69)];
									var $conv70 = ((($47)) & 255);
									var $cmp71 = ((($conv70)) | 0) == 2;
									if (!($cmp71)) {
										__label__ = 31;
										break $land_lhs_true$$if_end75$42;
									}
									var $48 = $data;
									var $49 = $ph;
									var $end_type = (($49 + 13) & 4294967295);
									var $50 = HEAPU8[($end_type)];
									var $conv73 = ((($50)) & 255);
									var $cmp74 = ((($48)) | 0) == ((($conv73)) | 0);
									$retval = $cmp74;
									__label__ = 73;
									break $if_then$$if_else187$2;
								}
							} while (0);
							var $51 = $data;
							var $52 = $ph;
							var $start_type = (($52 + 12) & 4294967295);
							var $53 = HEAPU8[($start_type)];
							var $conv76 = ((($53)) & 255);
							var $cmp77 = ((($51)) | 0) == ((($conv76)) | 0);
							$retval = $cmp77;;
						}
					} else if (__label__ == 32) {
						var $54 = $instn_addr;
						var $and79 = ($54) & 31;
						$data = $and79;
						var $55 = $instn_addr;
						var $and80 = ($55) & 224;
						if ($and80 == 0) {
							__label__ = 33;;
						} else if ($and80 == 32) {
							__label__ = 34;;
						} else if ($and80 == 64) {
							__label__ = 35;;
						} else if ($and80 == 128) {
							__label__ = 36;;
						} else {
							__label__ = 66;;
						}
						if (__label__ == 66) {
							$retval = 0;;
						} else if (__label__ == 33) {
							var $56 = $ph;
							var $type81 = (($56 + 11) & 4294967295);
							var $57 = HEAPU8[($type81)];
							var $conv82 = ((($57)) & 255);
							var $58 = $data;
							var $cmp83 = ((($conv82)) | 0) == ((($58)) | 0);
							$retval = $cmp83;;
						} else if (__label__ == 34) {
							var $59 = $ph;
							var $phflags = (($59 + 4) & 4294967295);
							var $60 = HEAPU32[(($phflags) >> 2)];
							var $shr85 = ($60) >>> 16;
							var $and86 = ($shr85) & 15;
							var $61 = $data;
							var $cmp87 = ((($and86)) | 0) == ((($61)) | 0);
							$retval = $cmp87;;
						} else if (__label__ == 35) {
							var $62 = $ph;
							var $phflags89 = (($62 + 4) & 4294967295);
							var $63 = HEAP32[(($phflags89) >> 2)];
							var $64 = $data;
							var $shl = 1 << ($64);
							var $and90 = ($shl) & ($63);
							var $cmp91 = ((($and90)) | 0) != 0;
							$retval = $cmp91;;
						} else if (__label__ == 36) {
							var $65 = $data;
							if ($65 == 0) {
								__label__ = 37;;
							} else if ($65 == 1) {
								__label__ = 37;;
							} else if ($65 == 2) {
								__label__ = 37;;
							} else if ($65 == 3) {
								__label__ = 37;;
							} else if ($65 == 4) {
								__label__ = 37;;
							} else if ($65 == 5) {
								__label__ = 38;;
							} else if ($65 == 6) {
								__label__ = 41;;
							} else if ($65 == 7) {
								__label__ = 42;;
							} else if ($65 == 8) {
								__label__ = 43;;
							} else if ($65 == 9) {
								__label__ = 46;;
							} else if ($65 == 10) {
								__label__ = 51;;
							} else if ($65 == 11) {
								__label__ = 52;;
							} else if ($65 == 12) {
								__label__ = 56;;
							} else {
								__label__ = 60;;
							}
							$sw_bb169$$sw_bb93$$sw_bb94$$sw_bb101$$sw_bb105$$sw_bb109$$sw_bb120$$sw_bb134$$for_cond139$$sw_bb156$53: do {
								if (__label__ == 37) {
									var $66 = $tr_addr;
									var $67 = $plist_addr;
									var $68 = $data;
									var $call = __ZL15StressConditionP10TranslatorP12PHONEME_LISTii($66, $67, $68, 0);
									$retval = $call;
									__label__ = 73;
									break $if_then$$if_else187$2;
								} else if (__label__ == 38) {
									var $69 = $ph;
									var $type95 = (($69 + 11) & 4294967295);
									var $70 = HEAPU8[($type95)];
									var $conv96 = ((($70)) & 255);
									var $cmp97 = ((($conv96)) | 0) == 0;
									if ($cmp97) {
										__lastLabel__ = 38;
										__label__ = 40;;
									} else {
										__lastLabel__ = 38;
										__label__ = 39;;
									}
									if (__label__ == 39) {
										var $71 = $plist_this;
										var $synthflags = (($71 + 4) & 4294967295);
										var $72 = HEAPU16[(($synthflags) >> 1)];
										var $conv98 = ((($72)) & 65535);
										var $and99 = ($conv98) & 8192;
										var $tobool100 = ((($and99)) | 0) != 0;
										__lastLabel__ = 39;;
									}
									var $73 = __lastLabel__ == 38 ? 1 : ($tobool100);
									$retval = $73;
									__label__ = 73;
									break $if_then$$if_else187$2;
								} else if (__label__ == 41) {
									var $74 = $plist_addr;
									var $sourceix102 = (($74 + 6) & 4294967295);
									var $75 = HEAPU16[(($sourceix102) >> 1)];
									var $conv103 = ((($75)) & 65535);
									var $cmp104 = ((($conv103)) | 0) != 0;
									$retval = $cmp104;
									__label__ = 73;
									break $if_then$$if_else187$2;
								} else if (__label__ == 42) {
									var $76 = $plist_addr;
									var $sourceix106 = (($76 + 6) & 4294967295);
									var $77 = HEAPU16[(($sourceix106) >> 1)];
									var $conv107 = ((($77)) & 65535);
									var $cmp108 = ((($conv107)) | 0) == 0;
									$retval = $cmp108;
									__label__ = 73;
									break $if_then$$if_else187$2;
								} else if (__label__ == 43) {
									var $78 = $plist_addr;
									var $arrayidx110 = (($78 + 24) & 4294967295);
									var $sourceix111 = (($arrayidx110 + 6) & 4294967295);
									var $79 = HEAP16[(($sourceix111) >> 1)];
									var $tobool112 = (tempInt = (($79)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
									if ($tobool112) {
										__lastLabel__ = 43;
										__label__ = 45;;
									} else {
										__lastLabel__ = 43;
										__label__ = 44;;
									}
									if (__label__ == 44) {
										var $80 = $plist_addr;
										var $arrayidx114 = (($80 + 24) & 4294967295);
										var $ph115 = (($arrayidx114 + 8) & 4294967295);
										var $81 = HEAP32[(($ph115) >> 2)];
										var $type116 = (($81 + 11) & 4294967295);
										var $82 = HEAPU8[($type116)];
										var $conv117 = ((($82)) & 255);
										var $cmp118 = ((($conv117)) | 0) == 0;
										__lastLabel__ = 44;;
									}
									var $83 = __lastLabel__ == 43 ? 1 : ($cmp118);
									$retval = $83;
									__label__ = 73;
									break $if_then$$if_else187$2;
								} else if (__label__ == 46) {
									var $84 = $plist_addr;
									var $sourceix121 = (($84 + 6) & 4294967295);
									var $85 = HEAPU16[(($sourceix121) >> 1)];
									var $conv122 = ((($85)) & 65535);
									var $cmp123 = ((($conv122)) | 0) != 0;
									if ($cmp123) {
										__label__ = 47;;
									} else {
										__label__ = 48;;
									}
									if (__label__ == 47) {
										$retval = 0;
										__label__ = 73;
										break $if_then$$if_else187$2;
									} else if (__label__ == 48) {
										while (1) {
											var $86 = $plist_addr;
											var $incdec_ptr = (($86 + -24) & 4294967295);
											$plist_addr = $incdec_ptr;
											var $87 = $plist_addr;
											var $stresslevel = (($87 + 1) & 4294967295);
											var $88 = HEAPU8[($stresslevel)];
											var $conv126 = ((($88)) & 255);
											var $and127 = ($conv126) & 15;
											var $cmp128 = ((($and127)) | 0) >= 4;
											if ($cmp128) {
												__label__ = 49;
												break;
											}
											var $89 = $plist_addr;
											var $sourceix131 = (($89 + 6) & 4294967295);
											var $90 = HEAPU16[(($sourceix131) >> 1)];
											var $conv132 = ((($90)) & 65535);
											var $cmp133 = ((($conv132)) | 0) == 0;
											if ($cmp133) {
												__label__ = 48;
												continue;
											} else {
												__label__ = 60;
												break $sw_bb169$$sw_bb93$$sw_bb94$$sw_bb101$$sw_bb105$$sw_bb109$$sw_bb120$$sw_bb134$$for_cond139$$sw_bb156$53;
											}
										}
										$retval = 1;
										__label__ = 73;
										break $if_then$$if_else187$2;
									}
								} else if (__label__ == 51) {
									var $91 = $ph;
									var $type135 = (($91 + 11) & 4294967295);
									var $92 = HEAPU8[($type135)];
									var $conv136 = ((($92)) & 255);
									var $cmp137 = ((($conv136)) | 0) != 2;
									$retval = $cmp137;
									__label__ = 73;
									break $if_then$$if_else187$2;
								} else if (__label__ == 52) {
									while (1) {
										var $93 = $plist_addr;
										var $incdec_ptr140 = (($93 + 24) & 4294967295);
										$plist_addr = $incdec_ptr140;
										var $94 = $plist_addr;
										var $phcode141 = (($94) & 4294967295);
										var $95 = HEAPU8[($phcode141)];
										var $idxprom142 = ((($95)) & 255);
										var $arrayidx143 = ((_phoneme_tab + $idxprom142 * 4) & 4294967295);
										var $96 = HEAP32[(($arrayidx143) >> 2)];
										var $97 = $plist_addr;
										var $ph144 = (($97 + 8) & 4294967295);
										HEAP32[(($ph144) >> 2)] = $96;
										var $98 = $plist_addr;
										var $sourceix145 = (($98 + 6) & 4294967295);
										var $99 = HEAPU16[(($sourceix145) >> 1)];
										var $conv146 = ((($99)) & 65535);
										var $cmp147 = ((($conv146)) | 0) != 0;
										if ($cmp147) {
											__label__ = 53;
											break;
										}
										var $100 = $plist_addr;
										var $ph150 = (($100 + 8) & 4294967295);
										var $101 = HEAP32[(($ph150) >> 2)];
										var $type151 = (($101 + 11) & 4294967295);
										var $102 = HEAPU8[($type151)];
										var $conv152 = ((($102)) & 255);
										var $cmp153 = ((($conv152)) | 0) == 2;
										if ($cmp153) {
											__label__ = 55;
											break;
										} else {
											__label__ = 52;
											continue;
										}
									}
									if (__label__ == 53) {
										$retval = 1;
										__label__ = 73;
										break $if_then$$if_else187$2;
									} else if (__label__ == 55) {
										$retval = 0;
										__label__ = 73;
										break $if_then$$if_else187$2;
									}
								} else if (__label__ == 56) {
									var $103 = $ph;
									var $type157 = (($103 + 11) & 4294967295);
									var $104 = HEAPU8[($type157)];
									var $conv158 = ((($104)) & 255);
									var $cmp159 = ((($conv158)) | 0) == 2;
									if ($cmp159) {
										__lastLabel__ = 56;
										__label__ = 59;;
									} else {
										__lastLabel__ = 56;
										__label__ = 57;;
									}
									$lor_end168$$lor_lhs_false160$80: do {
										if (__label__ == 57) {
											var $105 = $ph;
											var $type161 = (($105 + 11) & 4294967295);
											var $106 = HEAPU8[($type161)];
											var $conv162 = ((($106)) & 255);
											var $cmp163 = ((($conv162)) | 0) == 3;
											if ($cmp163) {
												__lastLabel__ = 57;
												__label__ = 59;
												break $lor_end168$$lor_lhs_false160$80;
											} else {
												__lastLabel__ = 57;;
											}
											var $107 = $ph;
											var $phflags165 = (($107 + 4) & 4294967295);
											var $108 = HEAP32[(($phflags165) >> 2)];
											var $and166 = ($108) & 16;
											var $tobool167 = ((($and166)) | 0) != 0;
											__lastLabel__ = 58;;
										}
									} while (0);
									var $109 = __lastLabel__ == 57 ? 1 : (__lastLabel__ == 56 ? 1 : ($tobool167));
									$retval = $109;
									__label__ = 73;
									break $if_then$$if_else187$2;
								}
							} while (0);
							$count = 0;;
							while (1) {
								var $110 = $plist_addr;
								var $ph171 = (($110 + 8) & 4294967295);
								var $111 = HEAP32[(($ph171) >> 2)];
								var $type172 = (($111 + 11) & 4294967295);
								var $112 = HEAPU8[($type172)];
								var $conv173 = ((($112)) & 255);
								var $cmp174 = ((($conv173)) | 0) == 2;
								if ($cmp174) {
									__label__ = 62;;
								} else {
									__label__ = 63;;
								}
								if (__label__ == 62) {
									var $113 = $count;
									var $inc176 = ((($113) + 1) & 4294967295);
									$count = $inc176;;
								}
								var $114 = $plist_addr;
								var $sourceix178 = (($114 + 6) & 4294967295);
								var $115 = HEAPU16[(($sourceix178) >> 1)];
								var $conv179 = ((($115)) & 65535);
								var $cmp180 = ((($conv179)) | 0) != 0;
								if ($cmp180) {
									__label__ = 65;
									break;
								}
								var $116 = $plist_addr;
								var $incdec_ptr183 = (($116 + -24) & 4294967295);
								$plist_addr = $incdec_ptr183;
								__label__ = 61;
								continue;
							}
							var $117 = $count;
							var $cmp185 = ((($117)) | 0) == 1;
							$retval = $cmp185;;
						}
					}
				} else if (__label__ == 67) {
					var $cmp188 = ((($3)) | 0) == 15;
					if ($cmp188) {
						__label__ = 68;;
					} else {
						__label__ = 72;;
					}
					$if_then189$$if_end201$93: do {
						if (__label__ == 68) {
							var $118 = $data;
							if ($118 == 1) {
								__label__ = 69;;
							} else if ($118 == 2) {
								__label__ = 70;;
							} else if ($118 == 3) {
								__label__ = 71;;
							} else {
								__label__ = 72;
								break $if_then189$$if_end201$93;
							}
							if (__label__ == 69) {
								var $119 = $control_addr;
								var $and191 = ($119) & 1;
								var $tobool192 = ((($and191)) | 0) != 0;
								$retval = $tobool192;
								__label__ = 73;
								break $if_then$$if_else187$2;
							} else if (__label__ == 70) {
								var $120 = HEAP32[((_voice) >> 2)];
								var $klattv = (($120 + 112) & 4294967295);
								var $arrayidx194 = (($klattv) & 4294967295);
								var $121 = HEAP32[(($arrayidx194) >> 2)];
								var $cmp195 = ((($121)) | 0) != 0;
								$retval = $cmp195;
								__label__ = 73;
								break $if_then$$if_else187$2;
							} else if (__label__ == 71) {
								var $122 = HEAP8[(((_mbrola_name) & 4294967295))];
								var $conv197 = (tempInt = (($122)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp198 = ((($conv197)) | 0) != 0;
								$retval = $cmp198;
								__label__ = 73;
								break $if_then$$if_else187$2;
							}
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $123 = $retval;;
			return $123;
			return null;
		}

		function __ZL13NumInstnWordsPt($prog) {;
			var __label__;
			var $retval;
			var $prog_addr;
			var $instn;
			var $instn2;
			var $instn_type;
			$prog_addr = $prog;
			var $0 = $prog_addr;
			var $1 = HEAPU16[(($0) >> 1)];
			var $conv = ((($1)) & 65535);
			$instn = $conv;
			var $2 = $instn;
			var $shr = ($2) >> 12;
			$instn_type = $shr;
			var $3 = $instn_type;
			var $cmp = ((($3)) | 0) < 11;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $4 = $instn_type;
				var $arrayidx = ((__ZZL13NumInstnWordsPtE7n_words + $4) & 4294967295);
				var $5 = HEAP8[($arrayidx)];
				var $conv1 = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				$retval = $conv1;;
			} else if (__label__ == 2) {
				var $6 = $prog_addr;
				var $arrayidx2 = (($6 + 4) & 4294967295);
				var $7 = HEAPU16[(($arrayidx2) >> 1)];
				var $conv3 = ((($7)) & 65535);
				$instn2 = $conv3;
				var $8 = $instn2;
				var $shr4 = ($8) >> 12;
				var $cmp5 = ((($shr4)) | 0) == 15;
				if ($cmp5) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 4;;
				} else if (__label__ == 4) {
					var $9 = $instn2;
					var $cmp8 = ((($9)) | 0) == 2;
					if ($cmp8) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = 3;;
					} else if (__label__ == 6) {
						$retval = 2;;
					}
				}
			}
			var $10 = $retval;;
			return $10;
			return null;
		}

		function __ZL15SwitchVowelTypeP12PHONEME_LISTP12PHONEME_DATAPPti($plist, $phdata, $p_prog, $instn_type) {;
			var __label__;
			var $plist_addr;
			var $phdata_addr;
			var $p_prog_addr;
			var $instn_type_addr;
			var $prog;
			var $voweltype;
			var $x;
			$plist_addr = $plist;
			$phdata_addr = $phdata;
			$p_prog_addr = $p_prog;
			$instn_type_addr = $instn_type;
			var $0 = $instn_type_addr;
			var $cmp = ((($0)) | 0) == 2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $phdata_addr;
				var $pd_control = (($1) & 4294967295);
				var $2 = HEAP32[(($pd_control) >> 2)];
				var $or = ($2) | 2;
				HEAP32[(($pd_control) >> 2)] = $or;
				var $3 = $plist_addr;
				var $arrayidx = (($3 + 24) & 4294967295);
				var $ph = (($arrayidx + 8) & 4294967295);
				var $4 = HEAP32[(($ph) >> 2)];
				var $start_type = (($4 + 12) & 4294967295);
				var $5 = HEAPU8[($start_type)];
				var $conv = ((($5)) & 255);
				$voweltype = $conv;;
			} else if (__label__ == 2) {
				var $6 = $plist_addr;
				var $arrayidx1 = (($6 + -24) & 4294967295);
				var $ph2 = (($arrayidx1 + 8) & 4294967295);
				var $7 = HEAP32[(($ph2) >> 2)];
				var $end_type = (($7 + 13) & 4294967295);
				var $8 = HEAPU8[($end_type)];
				var $conv3 = ((($8)) & 255);
				$voweltype = $conv3;;
			}
			var $9 = $voweltype;
			var $sub = ((($9) - 28) & 4294967295);
			$voweltype = $sub;
			var $10 = $voweltype;
			var $cmp4 = ((($10)) | 0) >= 0;
			var $11 = $voweltype;
			var $cmp5 = ((($11)) | 0) < 6;
			var $or_cond = ($cmp4) & ($cmp5);
			if ($or_cond) {
				__label__ = 4;;
			} else {
				__label__ = 5;;
			}
			if (__label__ == 4) {
				var $12 = $p_prog_addr;
				var $13 = HEAP32[(($12) >> 2)];
				var $14 = $voweltype;
				var $mul = ((($14) * 2) & 4294967295);
				var $add_ptr = (($13 + 2 * $mul) & 4294967295);
				$prog = $add_ptr;
				var $15 = $prog;
				var $arrayidx7 = (($15 + 2) & 4294967295);
				var $16 = HEAPU16[(($arrayidx7) >> 1)];
				var $conv8 = ((($16)) & 65535);
				var $and = ($conv8) & 15;
				var $shl = ((($and) * 65536) & 4294967295);
				var $17 = $prog;
				var $arrayidx9 = (($17 + 4) & 4294967295);
				var $18 = HEAPU16[(($arrayidx9) >> 1)];
				var $conv10 = ((($18)) & 65535);
				var $add = ((($shl) + ($conv10)) & 4294967295);
				var $mul11 = ((($add) * 4) & 4294967295);
				var $19 = $instn_type_addr;
				var $20 = $phdata_addr;
				var $sound_addr = (($20 + 68) & 4294967295);
				var $arrayidx12 = (($sound_addr + $19 * 4) & 4294967295);
				HEAP32[(($arrayidx12) >> 2)] = $mul11;
				var $21 = $prog;
				var $arrayidx13 = (($21 + 2) & 4294967295);
				var $22 = HEAPU16[(($arrayidx13) >> 1)];
				var $conv14 = ((($22)) & 65535);
				var $shr = ($conv14) >> 4;
				var $and15 = ($shr) & 255;
				var $conv16 = ((($and15)) & 255);
				$x = $conv16;
				var $23 = $x;
				var $conv17 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $24 = $instn_type_addr;
				var $25 = $phdata_addr;
				var $sound_param = (($25 + 88) & 4294967295);
				var $arrayidx18 = (($sound_param + $24 * 4) & 4294967295);
				HEAP32[(($arrayidx18) >> 2)] = $conv17;;
			}
			var $26 = $p_prog_addr;
			var $27 = HEAP32[(($26) >> 2)];
			var $add_ptr20 = (($27 + 24) & 4294967295);
			HEAP32[(($26) >> 2)] = $add_ptr20;;
			return;
			return;
		}

		function __Z17InterpretPhoneme2iP12PHONEME_DATA($phcode, $phdata) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 96;
			_memset(__stackBase__, 0, 96);
			var __label__;
			var $phcode_addr;
			var $phdata_addr;
			var $ix;
			var $plist = __stackBase__;
			$phcode_addr = $phcode;
			$phdata_addr = $phdata;
			var $arraydecay = (($plist) & 4294967295);
			var $0 = $arraydecay;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $0;
			$stop$ = $dest$ + 96;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			$ix = 0;;
			while (1) {
				var $1 = $ix;
				var $arrayidx = (($plist + $1 * 24) & 4294967295);
				var $phcode1 = (($arrayidx) & 4294967295);
				HEAP8[($phcode1)] = 9;
				var $2 = HEAP32[((((_phoneme_tab + 36) & 4294967295)) >> 2)];
				var $3 = $ix;
				var $arrayidx2 = (($plist + $3 * 24) & 4294967295);
				var $ph = (($arrayidx2 + 8) & 4294967295);
				HEAP32[(($ph) >> 2)] = $2;
				var $4 = $ix;
				var $inc = ((($4) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 4;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			var $5 = $phcode_addr;
			var $conv = ((($5)) & 255);
			var $arrayidx3 = (($plist + 24) & 4294967295);
			var $phcode4 = (($arrayidx3) & 4294967295);
			HEAP8[($phcode4)] = $conv;
			var $6 = $phcode_addr;
			var $arrayidx5 = ((_phoneme_tab + $6 * 4) & 4294967295);
			var $7 = HEAP32[(($arrayidx5) >> 2)];
			var $arrayidx6 = (($plist + 24) & 4294967295);
			var $ph7 = (($arrayidx6 + 8) & 4294967295);
			HEAP32[(($ph7) >> 2)] = $7;
			var $arrayidx8 = (($plist + 48) & 4294967295);
			var $sourceix = (($arrayidx8 + 6) & 4294967295);
			HEAP16[(($sourceix) >> 1)] = 1;
			var $arrayidx9 = (($plist + 24) & 4294967295);
			var $8 = $phdata_addr;
			__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $arrayidx9, $8);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z12WordToStringj($word) {;
			var __label__;
			var $word_addr;
			var $ix;
			$word_addr = $word;
			$ix = 0;;
			while (1) {
				var $0 = $word_addr;
				var $1 = $ix;
				var $mul = ((($1) * 8) & 4294967295);
				var $shr = ($0) >>> ((($mul)) >>> 0);
				var $conv = ((($shr)) & 255);
				var $2 = $ix;
				var $arrayidx = ((__ZZ12WordToStringjE3buf + $2) & 4294967295);
				HEAP8[($arrayidx)] = $conv;
				var $3 = $ix;
				var $inc = ((($3) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 3;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			HEAP8[(((__ZZ12WordToStringjE3buf + 4) & 4294967295))] = 0;;
			return ((__ZZ12WordToStringjE3buf) & 4294967295);
			return null;
		}

		function __Z14SynthesizeInitv() {;
			var __label__;
			HEAP32[((__ZL14last_pitch_cmd) >> 2)] = 0;
			HEAP32[((__ZL12last_amp_cmd) >> 2)] = 0;
			HEAP32[((__ZL10last_frame) >> 2)] = 0;
			HEAP32[((__ZL15syllable_centre) >> 2)] = -1;;
			return;
			return;
		}

		function __Z11PauseLengthii($pause, $control) {;
			var __label__;
			var $pause_addr;
			var $control_addr;
			var $len;
			$pause_addr = $pause;
			$control_addr = $control;
			var $0 = $control_addr;
			var $cmp = ((($0)) | 0) == 0;
			var $1 = $pause_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 1) {
				var $cmp1 = ((($1)) | 0) >= 200;
				var $2 = $pause_addr;
				if ($cmp1) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $3 = HEAP32[((((_speed + 4) & 4294967295)) >> 2)];
					var $mul = ((($3) * ($2)) & 4294967295);
					var $div = ((((($mul)) | 0) / 256) | 0);
					$len = $div;;
				} else if (__label__ == 3) {
					var $4 = HEAP32[((((_speed) & 4294967295)) >> 2)];
					var $mul3 = ((($4) * ($2)) & 4294967295);
					var $div4 = ((((($mul3)) | 0) / 256) | 0);
					$len = $div4;;
				}
			} else if (__label__ == 4) {
				var $5 = HEAP32[((((_speed + 12) & 4294967295)) >> 2)];
				var $mul6 = ((($5) * ($1)) & 4294967295);
				var $div7 = ((((($mul6)) | 0) / 256) | 0);
				$len = $div7;;
			}
			var $6 = $len;
			var $7 = HEAP32[((((_speed + 8) & 4294967295)) >> 2)];
			var $cmp9 = ((($6)) | 0) < ((($7)) | 0);
			if ($cmp9) {
				__label__ = 6;;
			} else {
				__label__ = 7;;
			}
			if (__label__ == 6) {
				var $8 = HEAP32[((((_speed + 8) & 4294967295)) >> 2)];
				$len = $8;;
			}
			var $9 = $len;;
			return $9;
			return null;
		}

		function __Z9DoSample3P12PHONEME_DATAii($phdata, $length_mod, $amp) {;
			var __label__;
			var $phdata_addr;
			var $length_mod_addr;
			var $amp_addr;
			var $amp2;
			var $len;
			$phdata_addr = $phdata;
			$length_mod_addr = $length_mod;
			$amp_addr = $amp;
			__ZL8EndPitchi(1);
			var $0 = $amp_addr;
			var $cmp = ((($0)) | 0) == -1;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $amp_addr;
				$amp2 = $1;;
			} else if (__label__ == 2) {
				var $2 = $phdata_addr;
				var $sound_param = (($2 + 88) & 4294967295);
				var $arrayidx = (($sound_param + 4) & 4294967295);
				var $3 = HEAP32[(($arrayidx) >> 2)];
				$amp2 = $3;
				var $4 = $amp2;
				var $cmp1 = ((($4)) | 0) == 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$amp2 = 100;;
				}
				var $5 = $amp2;
				var $mul = ((($5) * 32) & 4294967295);
				var $div = ((((($mul)) | 0) / 100) | 0);
				$amp2 = $div;;
			}
			HEAP32[((_seq_len_adjust) >> 2)] = 0;
			var $6 = $phdata_addr;
			var $sound_addr = (($6 + 68) & 4294967295);
			var $arrayidx4 = (($sound_addr + 4) & 4294967295);
			var $7 = HEAP32[(($arrayidx4) >> 2)];
			var $cmp5 = ((($7)) | 0) == 0;
			if ($cmp5) {
				__label__ = 6;;
			} else {
				__label__ = 7;;
			}
			if (__label__ == 6) {
				$len = 0;;
			} else if (__label__ == 7) {
				var $8 = $phdata_addr;
				var $sound_addr8 = (($8 + 68) & 4294967295);
				var $arrayidx9 = (($sound_addr8 + 4) & 4294967295);
				var $9 = HEAP32[(($arrayidx9) >> 2)];
				var $10 = $phdata_addr;
				var $pd_param = (($10 + 4) & 4294967295);
				var $arrayidx10 = (($pd_param + 40) & 4294967295);
				var $11 = HEAP32[(($arrayidx10) >> 2)];
				var $mul11 = ((($11) * 2) & 4294967295);
				var $12 = $phdata_addr;
				var $pd_control = (($12) & 4294967295);
				var $13 = HEAP32[(($pd_control) >> 2)];
				var $14 = $length_mod_addr;
				var $15 = $amp2;
				var $call = __ZL9DoSample2iiiiii($9, 2, $mul11, $13, $14, $15);
				$len = $call;;
			}
			HEAP32[((__ZL10last_frame) >> 2)] = 0;
			var $16 = $len;;
			return $16;
			return null;
		}

		function __ZL8EndPitchi($voice_break) {;
			var __label__;
			var $voice_break_addr;
			$voice_break_addr = $voice_break;
			var $0 = HEAP32[((__ZL12pitch_length) >> 2)];
			var $cmp = ((($0)) | 0) > 0;
			var $1 = HEAP32[((__ZL14last_pitch_cmd) >> 2)];
			var $cmp1 = ((($1)) | 0) >= 0;
			var $or_cond = ($cmp) & ($cmp1);
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 1) {
				var $2 = HEAP32[((__ZL14last_pitch_cmd) >> 2)];
				var $arrayidx = ((_wcmdq + $2 * 16) & 4294967295);
				var $arrayidx2 = (($arrayidx + 4) & 4294967295);
				var $3 = HEAP32[(($arrayidx2) >> 2)];
				var $cmp3 = ((($3)) | 0) == 0;
				if ($cmp3) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $4 = HEAP32[((__ZL12pitch_length) >> 2)];
					var $5 = HEAP32[((__ZL14last_pitch_cmd) >> 2)];
					var $arrayidx5 = ((_wcmdq + $5 * 16) & 4294967295);
					var $arrayidx6 = (($arrayidx5 + 4) & 4294967295);
					HEAP32[(($arrayidx6) >> 2)] = $4;;
				}
				HEAP32[((__ZL12pitch_length) >> 2)] = 0;;
			}
			var $6 = $voice_break_addr;
			var $tobool = ((($6)) | 0) != 0;
			if ($tobool) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				HEAP32[((__ZL10last_wcmdq) >> 2)] = -1;
				HEAP32[((__ZL10last_frame) >> 2)] = 0;
				var $7 = HEAP32[((_wcmdq_tail) >> 2)];
				HEAP32[((__ZL12syllable_end) >> 2)] = $7;
				__ZL11SmoothSpectv();
				HEAP32[((__ZL15syllable_centre) >> 2)] = -1;
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = _vowel_transition;
				$stop$ = $dest$ + 16;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};;
			};
			return;
			return;
		}

		function __ZL9DoSample2iiiiii($index, $which, $std_length, $control, $length_mod, $amp) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $index_addr;
			var $which_addr;
			var $std_length_addr;
			var $control_addr;
			var $length_mod_addr;
			var $amp_addr;
			var $length;
			var $wav_length;
			var $wav_scale;
			var $min_length;
			var $x;
			var $len4;
			var $q;
			var $p;
			$index_addr = $index;
			$which_addr = $which;
			$std_length_addr = $std_length;
			$control_addr = $control;
			$length_mod_addr = $length_mod;
			$amp_addr = $amp;
			var $0 = $index_addr;
			var $and = ($0) & 8388607;
			$index_addr = $and;
			var $1 = $index_addr;
			var $2 = HEAP32[((_wavefile_data) >> 2)];
			var $arrayidx = (($2 + $1) & 4294967295);
			$p = $arrayidx;
			var $3 = $p;
			var $arrayidx1 = (($3 + 2) & 4294967295);
			var $4 = HEAPU8[($arrayidx1)];
			var $conv = ((($4)) & 255);
			$wav_scale = $conv;
			var $5 = $p;
			var $arrayidx2 = (($5 + 1) & 4294967295);
			var $6 = HEAPU8[($arrayidx2)];
			var $conv3 = ((($6)) & 255);
			var $mul = ((($conv3) * 256) & 4294967295);
			$wav_length = $mul;
			var $7 = $p;
			var $arrayidx4 = (($7) & 4294967295);
			var $8 = HEAPU8[($arrayidx4)];
			var $conv5 = ((($8)) & 255);
			var $9 = $wav_length;
			var $add = ((($9) + ($conv5)) & 4294967295);
			$wav_length = $add;
			var $10 = $wav_length;
			var $cmp = ((($10)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $11 = HEAP32[((((_speed + 24) & 4294967295)) >> 2)];
				$min_length = $11;
				var $12 = $wav_scale;
				var $cmp6 = ((($12)) | 0) == 0;
				if ($cmp6) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $13 = $min_length;
					var $mul8 = ((($13) * 2) & 4294967295);
					$min_length = $mul8;;
				}
				var $14 = $std_length_addr;
				var $cmp10 = ((($14)) | 0) > 0;
				if ($cmp10) {
					__label__ = 5;;
				} else {
					__label__ = 9;;
				}
				$if_then11$$if_else22$8: do {
					if (__label__ == 5) {
						var $15 = $std_length_addr;
						var $16 = HEAP32[((_samplerate) >> 2)];
						var $mul12 = ((($16) * ($15)) & 4294967295);
						var $div = ((((($mul12)) | 0) / 1000) | 0);
						$std_length_addr = $div;
						var $17 = $wav_scale;
						var $cmp13 = ((($17)) | 0) == 0;
						if ($cmp13) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						if (__label__ == 6) {
							var $18 = $std_length_addr;
							var $mul15 = ((($18) * 2) & 4294967295);
							$std_length_addr = $mul15;;
						}
						var $19 = $min_length;
						var $20 = $std_length_addr;
						var $mul17 = ((($20) * ($19)) & 4294967295);
						var $21 = $wav_length;
						var $div18 = ((((($mul17)) | 0) / ((($21)) | 0)) | 0);
						$x = $div18;
						var $22 = $x;
						var $23 = $min_length;
						var $cmp19 = ((($22)) | 0) > ((($23)) | 0);
						if (!($cmp19)) {
							__label__ = 10;
							break $if_then11$$if_else22$8;
						}
						var $24 = $x;
						$min_length = $24;;
					} else if (__label__ == 9) {
						var $25 = $wav_length;
						$std_length_addr = $25;;
					}
				} while (0);
				var $26 = $length_mod_addr;
				var $cmp24 = ((($26)) | 0) > 0;
				if ($cmp24) {
					__label__ = 11;;
				} else {
					__label__ = 12;;
				}
				if (__label__ == 11) {
					var $27 = $std_length_addr;
					var $28 = $length_mod_addr;
					var $mul26 = ((($28) * ($27)) & 4294967295);
					var $div27 = ((((($mul26)) | 0) / 256) | 0);
					$std_length_addr = $div27;;
				}
				var $29 = $std_length_addr;
				var $30 = HEAP32[((((_speed + 12) & 4294967295)) >> 2)];
				var $mul29 = ((($30) * ($29)) & 4294967295);
				var $div30 = ((((($mul29)) | 0) / 256) | 0);
				$length = $div30;
				var $31 = $control_addr;
				var $and31 = ($31) & 4;
				var $tobool = ((($and31)) | 0) != 0;
				if ($tobool) {
					__label__ = 13;;
				} else {
					__label__ = 15;;
				}
				$if_then32$$if_end37$19: do {
					if (__label__ == 13) {
						var $32 = $length;
						var $33 = $std_length_addr;
						var $cmp33 = ((($32)) | 0) > ((($33)) | 0);
						if (!($cmp33)) {
							__label__ = 15;
							break $if_then32$$if_end37$19;
						}
						var $34 = $std_length_addr;
						$length = $34;;
					}
				} while (0);
				var $35 = $length;
				var $36 = $min_length;
				var $cmp38 = ((($35)) | 0) < ((($36)) | 0);
				if ($cmp38) {
					__label__ = 16;;
				} else {
					__label__ = 17;;
				}
				if (__label__ == 16) {
					var $37 = $min_length;
					$length = $37;;
				}
				var $38 = $wav_scale;
				var $cmp41 = ((($38)) | 0) == 0;
				if ($cmp41) {
					__label__ = 18;;
				} else {
					__label__ = 19;;
				}
				if (__label__ == 18) {
					var $39 = $length;
					var $div43 = ((((($39)) | 0) / 2) | 0);
					$length = $div43;
					var $40 = $wav_length;
					var $div44 = ((((($40)) | 0) / 2) | 0);
					$wav_length = $div44;;
				}
				var $41 = $amp_addr;
				var $cmp46 = ((($41)) | 0) < 0;
				if ($cmp46) {
					__label__ = 20;;
				} else {
					__label__ = 21;;
				}
				if (__label__ == 20) {
					var $42 = $length;
					$retval = $42;;
				} else if (__label__ == 21) {
					var $43 = $wav_length;
					var $div49 = ((((($43)) | 0) / 4) | 0);
					$len4 = $div49;
					var $44 = $index_addr;
					var $add50 = ((($44) + 4) & 4294967295);
					$index_addr = $add50;
					var $45 = $which_addr;
					var $and51 = ($45) & 256;
					var $tobool52 = ((($and51)) | 0) != 0;
					if ($tobool52) {
						__label__ = 22;;
					} else {
						__label__ = 23;;
					}
					if (__label__ == 22) {
						var $46 = HEAP32[((_wcmdq_tail) >> 2)];
						HEAP32[((__ZL10last_wcmdq) >> 2)] = $46;
						var $47 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx54 = ((_wcmdq + $47 * 16) & 4294967295);
						var $arraydecay = (($arrayidx54) & 4294967295);
						$q = $arraydecay;
						var $48 = $q;
						var $arrayidx55 = (($48) & 4294967295);
						HEAP32[(($arrayidx55) >> 2)] = 7;
						var $49 = $length;
						var $50 = $wav_length;
						var $shl = ($50) << 16;
						var $or = ($shl) | ($49);
						var $51 = $q;
						var $arrayidx56 = (($51 + 4) & 4294967295);
						HEAP32[(($arrayidx56) >> 2)] = $or;
						var $52 = $index_addr;
						var $53 = HEAP32[((_wavefile_data) >> 2)];
						var $arrayidx57 = (($53 + $52) & 4294967295);
						var $54 = ($arrayidx57);
						var $55 = $q;
						var $arrayidx58 = (($55 + 8) & 4294967295);
						HEAP32[(($arrayidx58) >> 2)] = $54;
						var $56 = $wav_scale;
						var $57 = $amp_addr;
						var $shl59 = ((($57) * 256) & 4294967295);
						var $add60 = ((($shl59) + ($56)) & 4294967295);
						var $58 = $q;
						var $arrayidx61 = (($58 + 12) & 4294967295);
						HEAP32[(($arrayidx61) >> 2)] = $add60;
						__Z8WcmdqIncv();
						var $59 = $length;
						$retval = $59;;
					} else if (__label__ == 23) {
						var $60 = $length;
						var $61 = $wav_length;
						var $cmp63 = ((($60)) | 0) > ((($61)) | 0);
						if ($cmp63) {
							__label__ = 24;;
						} else {
							__label__ = 25;;
						}
						if (__label__ == 24) {
							var $62 = $len4;
							var $mul65 = ((($62) * 3) & 4294967295);
							$x = $mul65;
							var $63 = $x;
							var $64 = $length;
							var $sub = ((($64) - ($63)) & 4294967295);
							$length = $sub;;
						} else if (__label__ == 25) {
							var $65 = $length;
							$x = $65;
							$length = 0;;
						}
						var $66 = HEAP32[((_wcmdq_tail) >> 2)];
						HEAP32[((__ZL10last_wcmdq) >> 2)] = $66;
						var $67 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx68 = ((_wcmdq + $67 * 16) & 4294967295);
						var $arraydecay69 = (($arrayidx68) & 4294967295);
						$q = $arraydecay69;
						var $68 = $q;
						var $arrayidx70 = (($68) & 4294967295);
						HEAP32[(($arrayidx70) >> 2)] = 6;
						var $69 = $x;
						var $70 = $q;
						var $arrayidx71 = (($70 + 4) & 4294967295);
						HEAP32[(($arrayidx71) >> 2)] = $69;
						var $71 = $index_addr;
						var $72 = HEAP32[((_wavefile_data) >> 2)];
						var $arrayidx72 = (($72 + $71) & 4294967295);
						var $73 = ($arrayidx72);
						var $74 = $q;
						var $arrayidx73 = (($74 + 8) & 4294967295);
						HEAP32[(($arrayidx73) >> 2)] = $73;
						var $75 = $wav_scale;
						var $76 = $amp_addr;
						var $shl74 = ((($76) * 256) & 4294967295);
						var $add75 = ((($shl74) + ($75)) & 4294967295);
						var $77 = $q;
						var $arrayidx76 = (($77 + 12) & 4294967295);
						HEAP32[(($arrayidx76) >> 2)] = $add75;
						__Z8WcmdqIncv();
						var $78 = $length;
						var $79 = $len4;
						var $mul771 = ((($79) * 3) & 4294967295);
						var $cmp782 = ((($78)) | 0) > ((($mul771)) | 0);
						if ($cmp782) {
							__lastLabel__ = 26;
							__label__ = 27;;
						} else {
							__lastLabel__ = 26;
							__label__ = 30;;
						}
						$while_body$$while_end$39: do {
							if (__label__ == 27) {
								while (1) {
									var $80 = $len4;
									$x = $80;
									var $81 = $wav_scale;
									var $cmp79 = ((($81)) | 0) == 0;
									if ($cmp79) {
										__label__ = 28;;
									} else {
										__label__ = 29;;
									}
									if (__label__ == 28) {
										var $82 = $x;
										var $mul81 = ((($82) * 2) & 4294967295);
										$x = $mul81;;
									}
									var $83 = HEAP32[((_wcmdq_tail) >> 2)];
									HEAP32[((__ZL10last_wcmdq) >> 2)] = $83;
									var $84 = HEAP32[((_wcmdq_tail) >> 2)];
									var $arrayidx83 = ((_wcmdq + $84 * 16) & 4294967295);
									var $arraydecay84 = (($arrayidx83) & 4294967295);
									$q = $arraydecay84;
									var $85 = $q;
									var $arrayidx85 = (($85) & 4294967295);
									HEAP32[(($arrayidx85) >> 2)] = 6;
									var $86 = $len4;
									var $mul86 = ((($86) * 2) & 4294967295);
									var $87 = $q;
									var $arrayidx87 = (($87 + 4) & 4294967295);
									HEAP32[(($arrayidx87) >> 2)] = $mul86;
									var $88 = $index_addr;
									var $89 = $x;
									var $add88 = ((($89) + ($88)) & 4294967295);
									var $90 = HEAP32[((_wavefile_data) >> 2)];
									var $arrayidx89 = (($90 + $add88) & 4294967295);
									var $91 = ($arrayidx89);
									var $92 = $q;
									var $arrayidx90 = (($92 + 8) & 4294967295);
									HEAP32[(($arrayidx90) >> 2)] = $91;
									var $93 = $wav_scale;
									var $94 = $amp_addr;
									var $shl91 = ((($94) * 256) & 4294967295);
									var $add92 = ((($shl91) + ($93)) & 4294967295);
									var $95 = $q;
									var $arrayidx93 = (($95 + 12) & 4294967295);
									HEAP32[(($arrayidx93) >> 2)] = $add92;
									__Z8WcmdqIncv();
									var $96 = $len4;
									var $mul94 = ((($96) * 2) & 4294967295);
									var $97 = $length;
									var $sub95 = ((($97) - ($mul94)) & 4294967295);
									$length = $sub95;
									var $98 = $length;
									var $99 = $len4;
									var $mul77 = ((($99) * 3) & 4294967295);
									var $cmp78 = ((($98)) | 0) > ((($mul77)) | 0);
									if ($cmp78) {
										__lastLabel__ = 29;
										__label__ = 27;
										continue;
									} else {
										__lastLabel__ = 29;
										__label__ = 30;
										break $while_body$$while_end$39;
									}
								}
							}
						} while (0);
						var $100 = __lastLabel__ == 29 ? $98 : ($78);
						var $cmp96 = ((($100)) | 0) > 0;
						if ($cmp96) {
							__label__ = 31;;
						} else {
							__label__ = 34;;
						}
						if (__label__ == 31) {
							var $101 = $wav_length;
							var $102 = $length;
							var $sub98 = ((($101) - ($102)) & 4294967295);
							$x = $sub98;
							var $103 = $wav_scale;
							var $cmp99 = ((($103)) | 0) == 0;
							if ($cmp99) {
								__label__ = 32;;
							} else {
								__label__ = 33;;
							}
							if (__label__ == 32) {
								var $104 = $x;
								var $mul101 = ((($104) * 2) & 4294967295);
								$x = $mul101;;
							}
							var $105 = HEAP32[((_wcmdq_tail) >> 2)];
							HEAP32[((__ZL10last_wcmdq) >> 2)] = $105;
							var $106 = HEAP32[((_wcmdq_tail) >> 2)];
							var $arrayidx103 = ((_wcmdq + $106 * 16) & 4294967295);
							var $arraydecay104 = (($arrayidx103) & 4294967295);
							$q = $arraydecay104;
							var $107 = $q;
							var $arrayidx105 = (($107) & 4294967295);
							HEAP32[(($arrayidx105) >> 2)] = 6;
							var $108 = $length;
							var $109 = $q;
							var $arrayidx106 = (($109 + 4) & 4294967295);
							HEAP32[(($arrayidx106) >> 2)] = $108;
							var $110 = $index_addr;
							var $111 = $x;
							var $add107 = ((($111) + ($110)) & 4294967295);
							var $112 = HEAP32[((_wavefile_data) >> 2)];
							var $arrayidx108 = (($112 + $add107) & 4294967295);
							var $113 = ($arrayidx108);
							var $114 = $q;
							var $arrayidx109 = (($114 + 8) & 4294967295);
							HEAP32[(($arrayidx109) >> 2)] = $113;
							var $115 = $wav_scale;
							var $116 = $amp_addr;
							var $shl110 = ((($116) * 256) & 4294967295);
							var $add111 = ((($shl110) + ($115)) & 4294967295);
							var $117 = $q;
							var $arrayidx112 = (($117 + 12) & 4294967295);
							HEAP32[(($arrayidx112) >> 2)] = $add111;
							__Z8WcmdqIncv();;
						}
						var $118 = $length;
						$retval = $118;;
					}
				}
			}
			var $119 = $retval;;
			return $119;
			return null;
		}

		function __Z18FormantTransition2P10frameref_tRijjP11PHONEME_TABi($seq, $n_frames, $data1, $data2, $other_ph, $which) {;
			var __label__;
			var $retval;
			var $seq_addr;
			var $n_frames_addr;
			var $data1_addr;
			var $data2_addr;
			var $other_ph_addr;
			var $which_addr;
			var $ix;
			var $formant;
			var $next_rms;
			var $len;
			var $rms;
			var $f1;
			var $f2;
			var $f2_min;
			var $f2_max;
			var $f3_adj;
			var $f3_amp;
			var $flags;
			var $vcolour;
			var $fr;
			var $x;
			$seq_addr = $seq;
			$n_frames_addr = $n_frames;
			$data1_addr = $data1;
			$data2_addr = $data2;
			$other_ph_addr = $other_ph;
			$which_addr = $which;
			$fr = 0;
			var $0 = $n_frames_addr;
			var $1 = HEAP32[(($0) >> 2)];
			var $cmp = ((($1)) | 0) < 2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $2 = $data1_addr;
				var $and = ($2) & 63;
				var $mul = ((($and) * 2) & 4294967295);
				$len = $mul;
				var $3 = $data1_addr;
				var $shr = ($3) >>> 6;
				var $and1 = ($shr) & 63;
				$rms = $and1;
				var $4 = $data1_addr;
				var $shr2 = ($4) >>> 12;
				$flags = $shr2;
				var $5 = $data2_addr;
				var $and3 = ($5) & 63;
				var $mul4 = ((($and3) * 50) & 4294967295);
				$f2 = $mul4;
				var $6 = $data2_addr;
				var $shr5 = ($6) >>> 6;
				var $and6 = ($shr5) & 31;
				var $sub = ((($and6) - 15) & 4294967295);
				var $mul7 = ((($sub) * 50) & 4294967295);
				$f2_min = $mul7;
				var $7 = $data2_addr;
				var $shr8 = ($7) >>> 11;
				var $and9 = ($shr8) & 31;
				var $sub10 = ((($and9) - 15) & 4294967295);
				var $mul11 = ((($sub10) * 50) & 4294967295);
				$f2_max = $mul11;
				var $8 = $data2_addr;
				var $shr12 = ($8) >>> 16;
				var $and13 = ($shr12) & 31;
				var $sub14 = ((($and13) - 15) & 4294967295);
				var $mul15 = ((($sub14) * 50) & 4294967295);
				$f3_adj = $mul15;
				var $9 = $data2_addr;
				var $shr16 = ($9) >>> 21;
				var $and17 = ($shr16) & 31;
				var $mul18 = ((($and17) * 8) & 4294967295);
				$f3_amp = $mul18;
				var $10 = $data2_addr;
				var $shr19 = ($10) >>> 26;
				var $and20 = ($shr19) & 7;
				$f1 = $and20;
				var $11 = $data2_addr;
				var $shr21 = ($11) >>> 29;
				$vcolour = $shr21;
				var $12 = $other_ph_addr;
				var $cmp22 = ((($12)) | 0) != 0;
				if ($cmp22) {
					__label__ = 3;;
				} else {
					__label__ = 5;;
				}
				$land_lhs_true$$if_end25$5: do {
					if (__label__ == 3) {
						var $13 = $other_ph_addr;
						var $mnemonic = (($13) & 4294967295);
						var $14 = HEAP32[(($mnemonic) >> 2)];
						var $cmp23 = ((($14)) | 0) == 63;
						if (!($cmp23)) {
							__label__ = 5;
							break $land_lhs_true$$if_end25$5;
						}
						var $15 = $flags;
						var $or = ($15) | 8;
						$flags = $or;;
					}
				} while (0);
				var $16 = $which_addr;
				var $cmp26 = ((($16)) | 0) == 1;
				if ($cmp26) {
					__label__ = 6;;
				} else {
					__label__ = 20;;
				}
				$if_then27$$if_else85$9: do {
					if (__label__ == 6) {
						var $17 = $seq_addr;
						var $arrayidx = (($17) & 4294967295);
						var $frame = (($arrayidx + 4) & 4294967295);
						var $18 = HEAP32[(($frame) >> 2)];
						var $call = __ZL9CopyFrameP7frame_ti($18, 0);
						$fr = $call;
						var $19 = $fr;
						var $20 = $seq_addr;
						var $arrayidx28 = (($20) & 4294967295);
						var $frame29 = (($arrayidx28 + 4) & 4294967295);
						HEAP32[(($frame29) >> 2)] = $19;
						var $21 = $seq_addr;
						var $arrayidx30 = (($21) & 4294967295);
						var $length = (($arrayidx30) & 4294967295);
						HEAP16[(($length) >> 1)] = 50;
						var $22 = $len;
						var $cmp31 = ((($22)) | 0) > 0;
						if ($cmp31) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							var $23 = $len;
							var $conv = ((($23)) & 65535);
							var $24 = $seq_addr;
							var $arrayidx33 = (($24) & 4294967295);
							var $length34 = (($arrayidx33) & 4294967295);
							HEAP16[(($length34) >> 1)] = $conv;;
						}
						var $25 = $seq_addr;
						var $arrayidx36 = (($25) & 4294967295);
						var $frflags = (($arrayidx36 + 2) & 4294967295);
						var $26 = HEAP16[(($frflags) >> 1)];
						var $conv37 = (tempInt = (($26)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $or38 = ($conv37) | 16384;
						var $conv39 = ((($or38)) & 65535);
						HEAP16[(($frflags) >> 1)] = $conv39;
						var $27 = $fr;
						var $frflags40 = (($27) & 4294967295);
						var $28 = HEAP16[(($frflags40) >> 1)];
						var $conv41 = (tempInt = (($28)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $or42 = ($conv41) | 16384;
						var $conv43 = ((($or42)) & 65535);
						HEAP16[(($frflags40) >> 1)] = $conv43;
						var $29 = $seq_addr;
						var $arrayidx44 = (($29 + 8) & 4294967295);
						var $frame45 = (($arrayidx44 + 4) & 4294967295);
						var $30 = HEAP32[(($frame45) >> 2)];
						var $rms46 = (($30 + 17) & 4294967295);
						var $31 = HEAPU8[($rms46)];
						var $conv47 = ((($31)) & 255);
						$next_rms = $conv47;
						var $32 = HEAP32[((_voice) >> 2)];
						var $klattv = (($32 + 112) & 4294967295);
						var $arrayidx48 = (($klattv) & 4294967295);
						var $33 = HEAP32[(($arrayidx48) >> 2)];
						var $tobool = ((($33)) | 0) != 0;
						if ($tobool) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							var $34 = $seq_addr;
							var $arrayidx50 = (($34 + 8) & 4294967295);
							var $frame51 = (($arrayidx50 + 4) & 4294967295);
							var $35 = HEAP32[(($frame51) >> 2)];
							var $klattp = (($35 + 39) & 4294967295);
							var $arrayidx52 = (($klattp) & 4294967295);
							var $36 = HEAPU8[($arrayidx52)];
							var $conv53 = ((($36)) & 255);
							var $sub54 = ((($conv53) - 4) & 4294967295);
							var $conv55 = ((($sub54)) & 255);
							var $37 = $fr;
							var $klattp56 = (($37 + 39) & 4294967295);
							var $arrayidx57 = (($klattp56) & 4294967295);
							HEAP8[($arrayidx57)] = $conv55;;
						}
						var $38 = $f2;
						var $cmp59 = ((($38)) | 0) != 0;
						if ($cmp59) {
							__label__ = 11;;
						} else {
							__label__ = 15;;
						}
						$if_then60$$if_else$17: do {
							if (__label__ == 11) {
								var $39 = $rms;
								var $and61 = ($39) & 32;
								var $tobool62 = ((($and61)) | 0) != 0;
								if ($tobool62) {
									__label__ = 12;;
								} else {
									__label__ = 13;;
								}
								if (__label__ == 12) {
									var $40 = $fr;
									var $41 = $next_rms;
									var $42 = $rms;
									var $and64 = ($42) & 31;
									var $mul65 = ((($and64) * ($41)) & 4294967295);
									var $div = ((((($mul65)) | 0) / 30) | 0);
									__ZL13set_frame_rmsP7frame_ti($40, $div);;
								}
								var $43 = $fr;
								var $44 = $f2;
								var $45 = $f2_min;
								var $46 = $f2_max;
								var $47 = $f1;
								var $48 = $f3_adj;
								var $49 = $f3_amp;
								var $50 = $flags;
								__ZL14AdjustFormantsP7frame_tiiiiiii($43, $44, $45, $46, $47, $48, $49, $50);
								var $51 = $rms;
								var $and67 = ($51) & 32;
								var $cmp68 = ((($and67)) | 0) == 0;
								if (!($cmp68)) {
									__label__ = 18;
									break $if_then60$$if_else$17;
								}
								var $52 = $fr;
								var $53 = $rms;
								var $mul70 = ((($53) * 2) & 4294967295);
								__ZL13set_frame_rmsP7frame_ti($52, $mul70);;
							} else if (__label__ == 15) {
								var $54 = $flags;
								var $and72 = ($54) & 8;
								var $tobool73 = ((($and72)) | 0) != 0;
								var $55 = $fr;
								if ($tobool73) {
									__label__ = 16;;
								} else {
									__label__ = 17;;
								}
								if (__label__ == 16) {
									var $56 = $next_rms;
									var $mul75 = ((($56) * 24) & 4294967295);
									var $div76 = ((((($mul75)) | 0) / 32) | 0);
									__ZL13set_frame_rmsP7frame_ti($55, $div76);;
								} else if (__label__ == 17) {
									__ZL13set_frame_rmsP7frame_ti($55, 28);;
								}
							}
						} while (0);
						var $57 = $flags;
						var $and80 = ($57) & 8;
						var $tobool81 = ((($and80)) | 0) != 0;
						if (!($tobool81)) {
							__label__ = 33;
							break $if_then27$$if_else85$9;
						}
						var $58 = $fr;
						var $call83 = __ZL14VowelClosenessP7frame_t($58);
						var $shl = ((($call83) * 256) & 4294967295);
						var $add = ((($shl) + 2048) & 4294967295);
						HEAP32[((__ZL10modn_flags) >> 2)] = $add;;
					} else if (__label__ == 20) {
						var $59 = $rms;
						var $mul86 = ((($59) * 2) & 4294967295);
						$rms = $mul86;
						var $60 = $f2;
						var $cmp87 = ((($60)) | 0) != 0;
						if ($cmp87) {
							__label__ = 22;;
						} else {
							__label__ = 21;;
						}
						if (__label__ == 21) {
							var $61 = $flags;
							var $cmp88 = ((($61)) | 0) != 0;
							if (!($cmp88)) {
								__label__ = 33;
								break $if_then27$$if_else85$9;
							}
						}
						var $62 = $flags;
						var $and90 = ($62) & 8;
						var $tobool91 = ((($and90)) | 0) != 0;
						if ($tobool91) {
							__label__ = 23;;
						} else {
							__label__ = 24;;
						}
						$if_then92$$if_else103$33: do {
							if (__label__ == 23) {
								var $63 = $n_frames_addr;
								var $64 = HEAP32[(($63) >> 2)];
								var $sub93 = ((($64) - 1) & 4294967295);
								var $65 = $seq_addr;
								var $arrayidx94 = (($65 + 8 * $sub93) & 4294967295);
								var $frame95 = (($arrayidx94 + 4) & 4294967295);
								var $66 = HEAP32[(($frame95) >> 2)];
								var $call96 = __ZL9CopyFrameP7frame_ti($66, 0);
								$fr = $call96;
								var $67 = $fr;
								var $68 = $n_frames_addr;
								var $69 = HEAP32[(($68) >> 2)];
								var $sub97 = ((($69) - 1) & 4294967295);
								var $70 = $seq_addr;
								var $arrayidx98 = (($70 + 8 * $sub97) & 4294967295);
								var $frame99 = (($arrayidx98 + 4) & 4294967295);
								HEAP32[(($frame99) >> 2)] = $67;
								$rms = 35;
								var $71 = $fr;
								var $call100 = __ZL14VowelClosenessP7frame_t($71);
								var $shl101 = ((($call100) * 256) & 4294967295);
								var $add102 = ((($shl101) + 1024) & 4294967295);
								HEAP32[((__ZL10modn_flags) >> 2)] = $add102;;
							} else if (__label__ == 24) {
								var $72 = $seq_addr;
								var $73 = $n_frames_addr;
								var $74 = HEAP32[(($73) >> 2)];
								var $inc = ((($74) + 1) & 4294967295);
								HEAP32[(($73) >> 2)] = $inc;
								var $75 = $len;
								var $call104 = __ZL18DuplicateLastFrameP10frameref_tii($72, $74, $75);
								$fr = $call104;
								var $76 = $len;
								var $cmp105 = ((($76)) | 0) > 36;
								if ($cmp105) {
									__label__ = 25;;
								} else {
									__label__ = 26;;
								}
								if (__label__ == 25) {
									var $77 = $len;
									var $78 = HEAP32[((_seq_len_adjust) >> 2)];
									var $sub107 = ((($77) - 36) & 4294967295);
									var $add108 = ((($sub107) + ($78)) & 4294967295);
									HEAP32[((_seq_len_adjust) >> 2)] = $add108;;
								}
								var $79 = $f2;
								var $cmp110 = ((($79)) | 0) != 0;
								if (!($cmp110)) {
									__label__ = 28;
									break $if_then92$$if_else103$33;
								}
								var $80 = $fr;
								var $81 = $f2;
								var $82 = $f2_min;
								var $83 = $f2_max;
								var $84 = $f1;
								var $85 = $f3_adj;
								var $86 = $f3_amp;
								var $87 = $flags;
								__ZL14AdjustFormantsP7frame_tiiiiiii($80, $81, $82, $83, $84, $85, $86, $87);;
							}
						} while (0);
						var $88 = $fr;
						var $89 = $rms;
						__ZL13set_frame_rmsP7frame_ti($88, $89);
						var $90 = $vcolour;
						var $cmp114 = ((($90)) | 0) > 0;
						var $91 = $vcolour;
						var $cmp116 = ((($91)) | 0) <= 2;
						var $or_cond = ($cmp114) & ($cmp116);
						if (!($or_cond)) {
							__label__ = 33;
							break $if_then27$$if_else85$9;
						}
						$ix = 0;
						var $92 = $ix;
						var $93 = $n_frames_addr;
						var $94 = HEAP32[(($93) >> 2)];
						var $cmp1181 = ((($92)) | 0) < ((($94)) | 0);
						if (!($cmp1181)) {
							__label__ = 33;
							break $if_then27$$if_else85$9;
						}
						$for_body$42: while (1) {
							var $95 = $ix;
							var $96 = $seq_addr;
							var $arrayidx119 = (($96 + 8 * $95) & 4294967295);
							var $frame120 = (($arrayidx119 + 4) & 4294967295);
							var $97 = HEAP32[(($frame120) >> 2)];
							var $call121 = __ZL9CopyFrameP7frame_ti($97, 0);
							$fr = $call121;
							var $98 = $fr;
							var $99 = $ix;
							var $100 = $seq_addr;
							var $arrayidx122 = (($100 + 8 * $99) & 4294967295);
							var $frame123 = (($arrayidx122 + 4) & 4294967295);
							HEAP32[(($frame123) >> 2)] = $98;
							$formant = 1;;
							while (1) {
								var $101 = $formant;
								var $102 = $fr;
								var $ffreq = (($102 + 2) & 4294967295);
								var $arrayidx127 = (($ffreq + $101 * 2) & 4294967295);
								var $103 = HEAP16[(($arrayidx127) >> 1)];
								var $conv128 = (tempInt = (($103)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $104 = $formant;
								var $sub129 = ((($104) - 1) & 4294967295);
								var $105 = $vcolour;
								var $sub130 = ((($105) - 1) & 4294967295);
								var $arrayidx131 = ((__ZZ18FormantTransition2P10frameref_tRijjP11PHONEME_TABiE10vcolouring + $sub130 * 10) & 4294967295);
								var $arrayidx132 = (($arrayidx131 + $sub129 * 2) & 4294967295);
								var $106 = HEAP16[(($arrayidx132) >> 1)];
								var $conv133 = (tempInt = (($106)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $mul134 = ((($conv133) * ($conv128)) & 4294967295);
								$x = $mul134;
								var $107 = $x;
								var $div135 = ((((($107)) | 0) / 256) | 0);
								var $conv136 = ((($div135)) & 65535);
								var $108 = $formant;
								var $109 = $fr;
								var $ffreq137 = (($109 + 2) & 4294967295);
								var $arrayidx138 = (($ffreq137 + $108 * 2) & 4294967295);
								HEAP16[(($arrayidx138) >> 1)] = $conv136;
								var $110 = $formant;
								var $inc139 = ((($110) + 1) & 4294967295);
								$formant = $inc139;
								var $cmp125 = ((($inc139)) | 0) <= 5;
								if ($cmp125) {
									__label__ = 31;
									continue;
								} else {
									__label__ = 32;
									break;
								}
							}
							var $111 = $ix;
							var $inc141 = ((($111) + 1) & 4294967295);
							$ix = $inc141;
							var $112 = $ix;
							var $113 = $n_frames_addr;
							var $114 = HEAP32[(($113) >> 2)];
							var $cmp118 = ((($112)) | 0) < ((($114)) | 0);
							if ($cmp118) {
								__label__ = 30;
								continue $for_body$42;
							} else {
								__label__ = 33;
								break $if_then27$$if_else85$9;
							}
						}
					}
				} while (0);
				var $115 = $fr;
				var $cmp146 = ((($115)) | 0) != 0;
				if ($cmp146) {
					__label__ = 34;;
				} else {
					__label__ = 38;;
				}
				$if_then147$$if_end164$48: do {
					if (__label__ == 34) {
						var $116 = $flags;
						var $and148 = ($116) & 4;
						var $tobool149 = ((($and148)) | 0) != 0;
						if ($tobool149) {
							__label__ = 35;;
						} else {
							__label__ = 36;;
						}
						if (__label__ == 35) {
							var $117 = $fr;
							var $frflags151 = (($117) & 4294967295);
							var $118 = HEAP16[(($frflags151) >> 1)];
							var $conv152 = (tempInt = (($118)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $or153 = ($conv152) | 32;
							var $conv154 = ((($or153)) & 65535);
							HEAP16[(($frflags151) >> 1)] = $conv154;;
						}
						var $119 = $flags;
						var $and156 = ($119) & 2;
						var $tobool157 = ((($and156)) | 0) != 0;
						if (!($tobool157)) {
							__label__ = 38;
							break $if_then147$$if_end164$48;
						}
						var $120 = $fr;
						var $frflags159 = (($120) & 4294967295);
						var $121 = HEAP16[(($frflags159) >> 1)];
						var $conv160 = (tempInt = (($121)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $or161 = ($conv160) | 16;
						var $conv162 = ((($or161)) & 65535);
						HEAP16[(($frflags159) >> 1)] = $conv162;;
					}
				} while (0);
				var $122 = $flags;
				var $and165 = ($122) & 64;
				var $tobool166 = ((($and165)) | 0) != 0;
				if ($tobool166) {
					__label__ = 39;;
				} else {
					__label__ = 40;;
				}
				if (__label__ == 39) {
					__ZL7DoPauseii(12, 0);;
				}
				var $123 = $flags;
				var $and169 = ($123) & 16;
				var $tobool170 = ((($and169)) | 0) != 0;
				if ($tobool170) {
					__label__ = 41;;
				} else {
					__label__ = 42;;
				}
				if (__label__ == 41) {
					var $124 = $len;
					$retval = $124;;
				} else if (__label__ == 42) {
					$retval = 0;;
				}
			}
			var $125 = $retval;;
			return $125;
			return null;
		}

		function __ZL9CopyFrameP7frame_ti($frame1, $copy) {;
			var __label__;
			var $retval;
			var $frame1_addr;
			var $copy_addr;
			var $frame2;
			$frame1_addr = $frame1;
			$copy_addr = $copy;
			var $0 = $copy_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$land_lhs_true$$if_end$2: do {
				if (__label__ == 1) {
					var $1 = $frame1_addr;
					var $frflags = (($1) & 4294967295);
					var $2 = HEAP16[(($frflags) >> 1)];
					var $conv = (tempInt = (($2)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $and = ($conv) & 32768;
					var $tobool = ((($and)) | 0) != 0;
					if (!($tobool)) {
						__label__ = 3;
						break $land_lhs_true$$if_end$2;
					}
					var $3 = $frame1_addr;
					$retval = $3;
					__label__ = 6;
					break $land_lhs_true$$if_end$2;
				}
			} while (0);
			if (__label__ == 3) {
				var $call = __ZL10AllocFramev();
				$frame2 = $call;
				var $cmp1 = ((($call)) | 0) != 0;
				if ($cmp1) {
					__label__ = 4;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 4) {
					var $4 = $frame2;
					var $5 = $4;
					var $6 = $frame1_addr;
					var $7 = $6;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $7;
					$dest$ = $5;
					$stop$ = $src$ + 64;
					if (($dest$ % 4) == ($src$ % 4) && 64 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $8 = $frame2;
					var $length = (($8 + 16) & 4294967295);
					HEAP8[($length)] = 0;
					var $9 = $frame2;
					var $frflags3 = (($9) & 4294967295);
					var $10 = HEAP16[(($frflags3) >> 1)];
					var $conv4 = (tempInt = (($10)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $or = ($conv4) | 32768;
					var $conv5 = ((($or)) & 65535);
					HEAP16[(($frflags3) >> 1)] = $conv5;;
				}
				var $11 = $frame2;
				$retval = $11;;
			}
			var $12 = $retval;;
			return $12;
			return null;
		}

		function __ZL13set_frame_rmsP7frame_ti($fr, $new_rms) {;
			var __label__;
			var $fr_addr;
			var $new_rms_addr;
			var $x;
			var $h;
			var $ix;
			$fr_addr = $fr;
			$new_rms_addr = $new_rms;
			var $0 = HEAP32[((_voice) >> 2)];
			var $klattv = (($0 + 112) & 4294967295);
			var $arrayidx = (($klattv) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			var $tobool = ((($1)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end3$2: do {
				if (__label__ == 1) {
					var $2 = $new_rms_addr;
					var $cmp = ((($2)) | 0) == -1;
					if (!($cmp)) {
						__label__ = 8;
						break $if_then$$if_end3$2;
					}
					var $3 = $fr_addr;
					var $klattp = (($3 + 39) & 4294967295);
					var $arrayidx2 = (($klattp) & 4294967295);
					HEAP8[($arrayidx2)] = 50;;
				} else if (__label__ == 3) {
					var $4 = $fr_addr;
					var $rms = (($4 + 17) & 4294967295);
					var $5 = HEAPU8[($rms)];
					var $conv = ((($5)) & 255);
					var $cmp4 = ((($conv)) | 0) == 0;
					if ($cmp4) {
						__label__ = 8;
						break $if_then$$if_end3$2;
					}
					var $6 = $new_rms_addr;
					var $mul = ((($6) * 64) & 4294967295);
					var $7 = $fr_addr;
					var $rms7 = (($7 + 17) & 4294967295);
					var $8 = HEAPU8[($rms7)];
					var $conv8 = ((($8)) & 255);
					var $div = ((((($mul)) | 0) / ((($conv8)) | 0)) | 0);
					$x = $div;
					var $9 = $x;
					var $cmp9 = ((($9)) | 0) >= 200;
					if ($cmp9) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$x = 199;;
					}
					var $10 = $x;
					var $arrayidx12 = ((__ZZL13set_frame_rmsP7frame_tiE8sqrt_tab + $10 * 2) & 4294967295);
					var $11 = HEAP16[(($arrayidx12) >> 1)];
					var $conv13 = (tempInt = (($11)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					$x = $conv13;
					$ix = 0;;
					while (1) {
						var $12 = $ix;
						var $13 = $fr_addr;
						var $fheight = (($13 + 18) & 4294967295);
						var $arrayidx15 = (($fheight + $12) & 4294967295);
						var $14 = HEAPU8[($arrayidx15)];
						var $conv16 = ((($14)) & 255);
						var $15 = $x;
						var $mul17 = ((($conv16) * ($15)) & 4294967295);
						$h = $mul17;
						var $16 = $h;
						var $div18 = ((((($16)) | 0) / 512) | 0);
						var $conv19 = ((($div18)) & 255);
						var $17 = $ix;
						var $18 = $fr_addr;
						var $fheight20 = (($18 + 18) & 4294967295);
						var $arrayidx21 = (($fheight20 + $17) & 4294967295);
						HEAP8[($arrayidx21)] = $conv19;
						var $19 = $ix;
						var $inc = ((($19) + 1) & 4294967295);
						$ix = $inc;
						var $cmp14 = ((($inc)) | 0) < 8;
						if ($cmp14) {
							__label__ = 7;
							continue;
						} else {
							__label__ = 8;
							break $if_then$$if_end3$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL14AdjustFormantsP7frame_tiiiiiii($fr, $target, $min, $max, $f1_adj, $f3_adj, $hf_reduce, $flags) {;
			var __label__;
			var __lastLabel__ = null;
			var $fr_addr;
			var $target_addr;
			var $min_addr;
			var $max_addr;
			var $f1_adj_addr;
			var $f3_adj_addr;
			var $hf_reduce_addr;
			var $flags_addr;
			var $x;
			$fr_addr = $fr;
			$target_addr = $target;
			$min_addr = $min;
			$max_addr = $max;
			$f1_adj_addr = $f1_adj;
			$f3_adj_addr = $f3_adj;
			$hf_reduce_addr = $hf_reduce;
			$flags_addr = $flags;
			var $0 = $target_addr;
			var $1 = HEAP32[((_voice) >> 2)];
			var $formant_factor = (($1 + 96) & 4294967295);
			var $2 = HEAP32[(($formant_factor) >> 2)];
			var $mul = ((($2) * ($0)) & 4294967295);
			var $div = ((((($mul)) | 0) / 256) | 0);
			$target_addr = $div;
			var $3 = $target_addr;
			var $4 = $fr_addr;
			var $ffreq = (($4 + 2) & 4294967295);
			var $arrayidx = (($ffreq + 4) & 4294967295);
			var $5 = HEAP16[(($arrayidx) >> 1)];
			var $conv = (tempInt = (($5)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $sub = ((($3) - ($conv)) & 4294967295);
			var $div1 = ((((($sub)) | 0) / 2) | 0);
			$x = $div1;
			var $6 = $x;
			var $7 = $max_addr;
			var $cmp = ((($6)) | 0) > ((($7)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $8 = $max_addr;
				$x = $8;;
			}
			var $9 = $x;
			var $10 = $min_addr;
			var $cmp2 = ((($9)) | 0) < ((($10)) | 0);
			if ($cmp2) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $11 = $min_addr;
				$x = $11;;
			}
			var $12 = $x;
			var $13 = $fr_addr;
			var $ffreq5 = (($13 + 2) & 4294967295);
			var $arrayidx6 = (($ffreq5 + 4) & 4294967295);
			var $14 = HEAP16[(($arrayidx6) >> 1)];
			var $conv7 = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $add = ((($conv7) + ($12)) & 4294967295);
			var $conv8 = ((($add)) & 65535);
			HEAP16[(($arrayidx6) >> 1)] = $conv8;
			var $15 = $f3_adj_addr;
			var $16 = $fr_addr;
			var $ffreq9 = (($16 + 2) & 4294967295);
			var $arrayidx10 = (($ffreq9 + 6) & 4294967295);
			var $17 = HEAP16[(($arrayidx10) >> 1)];
			var $conv11 = (tempInt = (($17)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $add12 = ((($conv11) + ($15)) & 4294967295);
			var $conv13 = ((($add12)) & 65535);
			HEAP16[(($arrayidx10) >> 1)] = $conv13;
			var $18 = $flags_addr;
			var $and = ($18) & 32;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				var $19 = $f3_adj_addr;
				var $sub15 = (((-($19))) & 4294967295);
				$f3_adj_addr = $sub15;;
			}
			var $20 = $f3_adj_addr;
			var $21 = $fr_addr;
			var $ffreq17 = (($21 + 2) & 4294967295);
			var $arrayidx18 = (($ffreq17 + 8) & 4294967295);
			var $22 = HEAP16[(($arrayidx18) >> 1)];
			var $conv19 = (tempInt = (($22)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $add20 = ((($conv19) + ($20)) & 4294967295);
			var $conv21 = ((($add20)) & 65535);
			HEAP16[(($arrayidx18) >> 1)] = $conv21;
			var $23 = $f3_adj_addr;
			var $24 = $fr_addr;
			var $ffreq22 = (($24 + 2) & 4294967295);
			var $arrayidx23 = (($ffreq22 + 10) & 4294967295);
			var $25 = HEAP16[(($arrayidx23) >> 1)];
			var $conv24 = (tempInt = (($25)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $add25 = ((($conv24) + ($23)) & 4294967295);
			var $conv26 = ((($add25)) & 65535);
			HEAP16[(($arrayidx23) >> 1)] = $conv26;
			var $26 = $f1_adj_addr;
			var $cmp27 = ((($26)) | 0) == 1;
			if ($cmp27) {
				__lastLabel__ = 6;
				__label__ = 7;;
			} else {
				__lastLabel__ = 6;
				__label__ = 12;;
			}
			if (__label__ == 7) {
				var $27 = $fr_addr;
				var $ffreq29 = (($27 + 2) & 4294967295);
				var $arrayidx30 = (($ffreq29 + 2) & 4294967295);
				var $28 = HEAP16[(($arrayidx30) >> 1)];
				var $conv31 = (tempInt = (($28)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $sub32 = ((235 - ($conv31)) & 4294967295);
				$x = $sub32;
				var $29 = $x;
				var $cmp33 = ((($29)) | 0) < -100;
				if ($cmp33) {
					__label__ = 8;;
				} else {
					__label__ = 9;;
				}
				$if_end35_thread$$if_end35$13: do {
					if (__label__ == 8) {
						$x = -100;;
					} else if (__label__ == 9) {
						var $cmp36 = ((($29)) | 0) > -60;
						if (!($cmp36)) {
							__label__ = 11;
							break $if_end35_thread$$if_end35$13;
						}
						$x = -60;;
					}
				} while (0);
				var $30 = $x;
				var $31 = $fr_addr;
				var $ffreq39 = (($31 + 2) & 4294967295);
				var $arrayidx40 = (($ffreq39 + 2) & 4294967295);
				var $32 = HEAP16[(($arrayidx40) >> 1)];
				var $conv41 = (tempInt = (($32)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $add42 = ((($conv41) + ($30)) & 4294967295);
				var $conv43 = ((($add42)) & 65535);
				HEAP16[(($arrayidx40) >> 1)] = $conv43;
				var $_pr = $f1_adj_addr;
				__lastLabel__ = 11;;
			}
			var $33 = __lastLabel__ == 11 ? $_pr : ($26);
			var $cmp45 = ((($33)) | 0) == 2;
			if ($cmp45) {
				__label__ = 13;;
			} else {
				__label__ = 18;;
			}
			if (__label__ == 13) {
				var $34 = $fr_addr;
				var $ffreq47 = (($34 + 2) & 4294967295);
				var $arrayidx48 = (($ffreq47 + 2) & 4294967295);
				var $35 = HEAP16[(($arrayidx48) >> 1)];
				var $conv49 = (tempInt = (($35)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $sub50 = ((235 - ($conv49)) & 4294967295);
				$x = $sub50;
				var $36 = $x;
				var $cmp51 = ((($36)) | 0) < -300;
				if ($cmp51) {
					__label__ = 14;;
				} else {
					__label__ = 15;;
				}
				$if_end53_thread$$if_end53$21: do {
					if (__label__ == 14) {
						$x = -300;;
					} else if (__label__ == 15) {
						var $cmp54 = ((($36)) | 0) > -150;
						if (!($cmp54)) {
							__label__ = 17;
							break $if_end53_thread$$if_end53$21;
						}
						$x = -150;;
					}
				} while (0);
				var $37 = $x;
				var $38 = $fr_addr;
				var $ffreq57 = (($38 + 2) & 4294967295);
				var $arrayidx58 = (($ffreq57 + 2) & 4294967295);
				var $39 = HEAP16[(($arrayidx58) >> 1)];
				var $conv59 = (tempInt = (($39)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $add60 = ((($conv59) + ($37)) & 4294967295);
				var $conv61 = ((($add60)) & 65535);
				HEAP16[(($arrayidx58) >> 1)] = $conv61;
				var $40 = $x;
				var $41 = $fr_addr;
				var $ffreq62 = (($41 + 2) & 4294967295);
				var $arrayidx63 = (($ffreq62) & 4294967295);
				var $42 = HEAP16[(($arrayidx63) >> 1)];
				var $conv64 = (tempInt = (($42)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $add65 = ((($conv64) + ($40)) & 4294967295);
				var $conv66 = ((($add65)) & 65535);
				HEAP16[(($arrayidx63) >> 1)] = $conv66;;
			}
			var $43 = $f1_adj_addr;
			var $cmp68 = ((($43)) | 0) == 3;
			if ($cmp68) {
				__label__ = 19;;
			} else {
				__label__ = 24;;
			}
			if (__label__ == 19) {
				var $44 = $fr_addr;
				var $ffreq70 = (($44 + 2) & 4294967295);
				var $arrayidx71 = (($ffreq70 + 2) & 4294967295);
				var $45 = HEAP16[(($arrayidx71) >> 1)];
				var $conv72 = (tempInt = (($45)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $sub73 = ((100 - ($conv72)) & 4294967295);
				$x = $sub73;
				var $46 = $x;
				var $cmp74 = ((($46)) | 0) < -400;
				if ($cmp74) {
					__label__ = 20;;
				} else {
					__label__ = 21;;
				}
				$if_end76_thread$$if_end76$29: do {
					if (__label__ == 20) {
						$x = -400;;
					} else if (__label__ == 21) {
						var $cmp77 = ((($46)) | 0) > -300;
						if (!($cmp77)) {
							__label__ = 23;
							break $if_end76_thread$$if_end76$29;
						}
						$x = -400;;
					}
				} while (0);
				var $47 = $x;
				var $48 = $fr_addr;
				var $ffreq80 = (($48 + 2) & 4294967295);
				var $arrayidx81 = (($ffreq80 + 2) & 4294967295);
				var $49 = HEAP16[(($arrayidx81) >> 1)];
				var $conv82 = (tempInt = (($49)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $add83 = ((($conv82) + ($47)) & 4294967295);
				var $conv84 = ((($add83)) & 65535);
				HEAP16[(($arrayidx81) >> 1)] = $conv84;
				var $50 = $x;
				var $51 = $fr_addr;
				var $ffreq85 = (($51 + 2) & 4294967295);
				var $arrayidx86 = (($ffreq85) & 4294967295);
				var $52 = HEAP16[(($arrayidx86) >> 1)];
				var $conv87 = (tempInt = (($52)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $add88 = ((($conv87) + ($50)) & 4294967295);
				var $conv89 = ((($add88)) & 65535);
				HEAP16[(($arrayidx86) >> 1)] = $conv89;;
			}
			var $53 = $fr_addr;
			var $54 = $hf_reduce_addr;
			__ZL18formants_reduce_hfP7frame_ti($53, $54);;
			return;
			return;
		}

		function __ZL14VowelClosenessP7frame_t($fr) {;
			var __label__;
			var $retval;
			var $fr_addr;
			var $f1;
			$fr_addr = $fr;
			var $0 = $fr_addr;
			var $ffreq = (($0 + 2) & 4294967295);
			var $arrayidx = (($ffreq + 2) & 4294967295);
			var $1 = HEAP16[(($arrayidx) >> 1)];
			var $conv = (tempInt = (($1)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			$f1 = $conv;
			var $cmp = ((($conv)) | 0) < 300;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 3;;
			} else if (__label__ == 2) {
				var $2 = $f1;
				var $cmp1 = ((($2)) | 0) < 400;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 2;;
				} else if (__label__ == 4) {
					var $3 = $f1;
					var $cmp4 = ((($3)) | 0) < 500;
					if ($cmp4) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = 1;;
					} else if (__label__ == 6) {
						$retval = 0;;
					}
				}
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function __ZL18DuplicateLastFrameP10frameref_tii($seq, $n_frames, $length) {;
			var __label__;
			var $seq_addr;
			var $n_frames_addr;
			var $length_addr;
			var $fr;
			$seq_addr = $seq;
			$n_frames_addr = $n_frames;
			$length_addr = $length;
			var $0 = $length_addr;
			var $conv = ((($0)) & 65535);
			var $1 = $n_frames_addr;
			var $sub = ((($1) - 1) & 4294967295);
			var $2 = $seq_addr;
			var $arrayidx = (($2 + 8 * $sub) & 4294967295);
			var $length1 = (($arrayidx) & 4294967295);
			HEAP16[(($length1) >> 1)] = $conv;
			var $3 = $n_frames_addr;
			var $sub2 = ((($3) - 1) & 4294967295);
			var $4 = $seq_addr;
			var $arrayidx3 = (($4 + 8 * $sub2) & 4294967295);
			var $frame = (($arrayidx3 + 4) & 4294967295);
			var $5 = HEAP32[(($frame) >> 2)];
			var $call = __ZL9CopyFrameP7frame_ti($5, 1);
			$fr = $call;
			var $6 = $fr;
			var $7 = $n_frames_addr;
			var $8 = $seq_addr;
			var $arrayidx4 = (($8 + 8 * $7) & 4294967295);
			var $frame5 = (($arrayidx4 + 4) & 4294967295);
			HEAP32[(($frame5) >> 2)] = $6;
			var $9 = $n_frames_addr;
			var $10 = $seq_addr;
			var $arrayidx6 = (($10 + 8 * $9) & 4294967295);
			var $length7 = (($arrayidx6) & 4294967295);
			HEAP16[(($length7) >> 1)] = 0;
			var $11 = $fr;;
			return $11;
			return null;
		}

		function __ZL7DoPauseii($length, $control) {;
			var __label__;
			var $length_addr;
			var $control_addr;
			var $len;
			$length_addr = $length;
			$control_addr = $control;
			var $0 = $length_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$len = 0;;
			} else if (__label__ == 2) {
				var $1 = $length_addr;
				var $2 = $control_addr;
				var $call = __Z11PauseLengthii($1, $2);
				$len = $call;
				var $3 = $len;
				var $4 = HEAP32[((_samplerate) >> 2)];
				var $mul = ((($4) * ($3)) & 4294967295);
				var $div = ((((($mul)) | 0) / 1000) | 0);
				$len = $div;;
			}
			__ZL8EndPitchi(1);
			var $5 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx = ((_wcmdq + $5 * 16) & 4294967295);
			var $arrayidx1 = (($arrayidx) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 5;
			var $6 = $len;
			var $7 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx2 = ((_wcmdq + $7 * 16) & 4294967295);
			var $arrayidx3 = (($arrayidx2 + 4) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = $6;
			__Z8WcmdqIncv();
			HEAP32[((__ZL10last_frame) >> 2)] = 0;
			var $8 = HEAP32[((__ZL13fmt_amplitude) >> 2)];
			var $cmp4 = ((($8)) | 0) != 0;
			if ($cmp4) {
				__label__ = 4;;
			} else {
				__label__ = 5;;
			}
			if (__label__ == 4) {
				var $9 = HEAP32[((_wcmdq_tail) >> 2)];
				var $arrayidx6 = ((_wcmdq + $9 * 16) & 4294967295);
				var $arrayidx7 = (($arrayidx6) & 4294967295);
				HEAP32[(($arrayidx7) >> 2)] = 14;
				HEAP32[((__ZL13fmt_amplitude) >> 2)] = 0;
				var $10 = HEAP32[((_wcmdq_tail) >> 2)];
				var $arrayidx8 = ((_wcmdq + $10 * 16) & 4294967295);
				var $arrayidx9 = (($arrayidx8 + 4) & 4294967295);
				HEAP32[(($arrayidx9) >> 2)] = 0;
				__Z8WcmdqIncv();;
			};
			return;
			return;
		}

		function __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($this_ph, $which, $fmt_params, $plist, $modulation) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 104;
			_memset(__stackBase__, 0, 104);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $this_ph_addr;
			var $which_addr;
			var $fmt_params_addr;
			var $plist_addr;
			var $modulation_addr;
			var $n_frames = __stackBase__;
			var $frames;
			var $frameix;
			var $frame1;
			var $frame2;
			var $fr;
			var $ix;
			var $q;
			var $len;
			var $frame_length;
			var $length_factor;
			var $length_mod;
			var $length_sum;
			var $length_min;
			var $total_len;
			var $wcmd_spect;
			var $frame_lengths = __stackBase__ + 4;
			$this_ph_addr = $this_ph;
			$which_addr = $which;
			$fmt_params_addr = $fmt_params;
			$plist_addr = $plist;
			$modulation_addr = $modulation;
			$total_len = 0;
			$wcmd_spect = 3;
			var $0 = $fmt_params_addr;
			var $fmt_addr = (($0 + 8) & 4294967295);
			var $1 = HEAP32[(($fmt_addr) >> 2)];
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $2 = $plist_addr;
				var $length = (($2 + 12) & 4294967295);
				var $3 = HEAP16[(($length) >> 1)];
				var $conv = (tempInt = (($3)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				$length_mod = $conv;
				var $4 = $length_mod;
				var $cmp1 = ((($4)) | 0) == 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$length_mod = 256;;
				}
				var $5 = HEAP32[((_samplerate) >> 2)];
				var $div = ((((($5)) | 0) / 70) | 0);
				$length_min = $div;
				var $6 = $which_addr;
				var $cmp4 = ((($6)) | 0) == 2;
				if ($cmp4) {
					__lastLabel__ = 4;
					__label__ = 5;;
				} else {
					__lastLabel__ = 4;
					__label__ = 11;;
				}
				if (__label__ == 5) {
					var $7 = HEAP32[((_translator) >> 2)];
					var $langopts = (($7) & 4294967295);
					var $param = (($langopts + 24) & 4294967295);
					var $arrayidx = (($param + 72) & 4294967295);
					var $8 = HEAP32[(($arrayidx) >> 2)];
					var $cmp6 = ((($8)) | 0) > 0;
					if ($cmp6) {
						__label__ = 6;;
					} else {
						__label__ = 10;;
					}
					$land_lhs_true$$if_end18thread_pre_split$10: do {
						if (__label__ == 6) {
							var $9 = $this_ph_addr;
							var $std_length = (($9 + 14) & 4294967295);
							var $10 = HEAPU8[($std_length)];
							var $conv7 = ((($10)) & 255);
							var $11 = HEAP32[((_translator) >> 2)];
							var $langopts8 = (($11) & 4294967295);
							var $param9 = (($langopts8 + 24) & 4294967295);
							var $arrayidx10 = (($param9 + 72) & 4294967295);
							var $12 = HEAP32[(($arrayidx10) >> 2)];
							var $cmp11 = ((($conv7)) | 0) >= ((($12)) | 0);
							if ($cmp11) {
								__label__ = 9;;
							} else {
								__label__ = 7;;
							}
							$if_then16$$lor_lhs_false$12: do {
								if (__label__ == 7) {
									var $13 = $plist_addr;
									var $synthflags = (($13 + 4) & 4294967295);
									var $14 = HEAPU16[(($synthflags) >> 1)];
									var $conv12 = ((($14)) & 65535);
									var $and = ($conv12) & 8;
									var $tobool = ((($and)) | 0) != 0;
									if ($tobool) {
										__label__ = 9;
										break $if_then16$$lor_lhs_false$12;
									}
									var $15 = $this_ph_addr;
									var $phflags = (($15 + 4) & 4294967295);
									var $16 = HEAP32[(($phflags) >> 2)];
									var $and14 = ($16) & 2097152;
									var $tobool15 = ((($and14)) | 0) != 0;
									if (!($tobool15)) {
										__label__ = 10;
										break $land_lhs_true$$if_end18thread_pre_split$10;
									}
								}
							} while (0);
							var $17 = $length_min;
							var $mul = ((($17) * 2) & 4294967295);
							$length_min = $mul;;
						}
					} while (0);
					var $_pr = $which_addr;
					__lastLabel__ = 10;;
				}
				var $18 = __lastLabel__ == 10 ? $_pr : ($6);
				var $cmp19 = ((($18)) | 0) == 1;
				if ($cmp19) {
					__label__ = 12;;
				} else {
					__label__ = 17;;
				}
				$if_then20$$if_end41$18: do {
					if (__label__ == 12) {
						var $19 = $this_ph_addr;
						var $type = (($19 + 11) & 4294967295);
						var $20 = HEAPU8[($type)];
						var $conv21 = ((($20)) & 255);
						var $cmp22 = ((($conv21)) | 0) == 3;
						if ($cmp22) {
							__label__ = 15;;
						} else {
							__label__ = 13;;
						}
						$if_then33$$lor_lhs_false23$20: do {
							if (__label__ == 13) {
								var $21 = $plist_addr;
								var $arrayidx24 = (($21 + -24) & 4294967295);
								var $type25 = (($arrayidx24 + 15) & 4294967295);
								var $22 = HEAPU8[($type25)];
								var $conv26 = ((($22)) & 255);
								var $cmp27 = ((($conv26)) | 0) == 3;
								if ($cmp27) {
									__label__ = 15;
									break $if_then33$$lor_lhs_false23$20;
								}
								var $23 = $plist_addr;
								var $arrayidx29 = (($23 + -24) & 4294967295);
								var $type30 = (($arrayidx29 + 15) & 4294967295);
								var $24 = HEAPU8[($type30)];
								var $conv31 = ((($24)) & 255);
								var $cmp32 = ((($conv31)) | 0) == 8;
								if (!($cmp32)) {
									__label__ = 17;
									break $if_then20$$if_end41$18;
								}
							}
						} while (0);
						var $25 = $length_mod;
						var $26 = HEAP32[((_translator) >> 2)];
						var $langopts34 = (($26) & 4294967295);
						var $param35 = (($langopts34 + 24) & 4294967295);
						var $arrayidx36 = (($param35 + 28) & 4294967295);
						var $27 = HEAP32[(($arrayidx36) >> 2)];
						$len = $27;
						var $cmp37 = ((($25)) | 0) < ((($27)) | 0);
						if (!($cmp37)) {
							__label__ = 17;
							break $if_then20$$if_end41$18;
						}
						var $28 = $len;
						$length_mod = $28;;
					}
				} while (0);
				HEAP32[((__ZL10modn_flags) >> 2)] = 0;
				var $29 = $this_ph_addr;
				var $30 = $which_addr;
				var $31 = $fmt_params_addr;
				var $32 = $plist_addr;
				var $call = __Z11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LIST($29, $30, $31, $n_frames, $32);
				$frames = $call;
				var $cmp42 = ((($call)) | 0) == 0;
				if ($cmp42) {
					__label__ = 18;;
				} else {
					__label__ = 19;;
				}
				if (__label__ == 18) {
					$retval = 0;;
				} else if (__label__ == 19) {
					var $33 = $fmt_params_addr;
					var $fmt_amp = (($33 + 16) & 4294967295);
					var $34 = HEAP32[(($fmt_amp) >> 2)];
					var $35 = HEAP32[((__ZL13fmt_amplitude) >> 2)];
					var $cmp45 = ((($34)) | 0) != ((($35)) | 0);
					if ($cmp45) {
						__label__ = 20;;
					} else {
						__label__ = 21;;
					}
					if (__label__ == 20) {
						var $36 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx47 = ((_wcmdq + $36 * 16) & 4294967295);
						var $arraydecay = (($arrayidx47) & 4294967295);
						$q = $arraydecay;
						var $37 = $q;
						var $arrayidx48 = (($37) & 4294967295);
						HEAP32[(($arrayidx48) >> 2)] = 14;
						var $38 = $fmt_params_addr;
						var $fmt_amp49 = (($38 + 16) & 4294967295);
						var $39 = HEAP32[(($fmt_amp49) >> 2)];
						HEAP32[((__ZL13fmt_amplitude) >> 2)] = $39;
						var $40 = $q;
						var $arrayidx50 = (($40 + 4) & 4294967295);
						HEAP32[(($arrayidx50) >> 2)] = $39;
						__Z8WcmdqIncv();;
					}
					var $41 = $frames;
					var $arrayidx52 = (($41) & 4294967295);
					var $frame = (($arrayidx52 + 4) & 4294967295);
					var $42 = HEAP32[(($frame) >> 2)];
					$frame1 = $42;
					var $43 = HEAP32[((_voice) >> 2)];
					var $klattv = (($43 + 112) & 4294967295);
					var $arrayidx53 = (($klattv) & 4294967295);
					var $44 = HEAP32[(($arrayidx53) >> 2)];
					var $tobool54 = ((($44)) | 0) != 0;
					if ($tobool54) {
						__label__ = 22;;
					} else {
						__label__ = 23;;
					}
					if (__label__ == 22) {
						$wcmd_spect = 1;;
					}
					var $45 = $fmt_params_addr;
					var $wav_addr = (($45 + 28) & 4294967295);
					var $46 = HEAP32[(($wav_addr) >> 2)];
					HEAP32[((_wavefile_ix) >> 2)] = $46;
					var $47 = $fmt_params_addr;
					var $wav_amp = (($47 + 32) & 4294967295);
					var $48 = HEAP32[(($wav_amp) >> 2)];
					var $cmp57 = ((($48)) | 0) == 0;
					if ($cmp57) {
						__label__ = 24;;
					} else {
						__label__ = 25;;
					}
					if (__label__ == 24) {
						HEAP32[((_wavefile_amp) >> 2)] = 32;;
					} else if (__label__ == 25) {
						var $49 = $fmt_params_addr;
						var $wav_amp59 = (($49 + 32) & 4294967295);
						var $50 = HEAP32[(($wav_amp59) >> 2)];
						var $mul60 = ((($50) * 32) & 4294967295);
						var $div61 = ((((($mul60)) | 0) / 100) | 0);
						HEAP32[((_wavefile_amp) >> 2)] = $div61;;
					}
					var $51 = HEAP32[((_wavefile_ix) >> 2)];
					var $cmp63 = ((($51)) | 0) == 0;
					if ($cmp63) {
						__label__ = 27;;
					} else {
						__label__ = 33;;
					}
					$if_then64$$if_end79$39: do {
						if (__label__ == 27) {
							var $_b = HEAPU8[(__ZZ8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTiE9wave_flag_b)];
							var $52 = ((($_b)) & 1);
							var $tobool65 = ((($52)) | 0) != 0;
							if ($tobool65) {
								__label__ = 28;;
							} else {
								__label__ = 31;;
							}
							if (__label__ == 28) {
								$wcmd_spect = 4;
								var $53 = HEAP32[((_voice) >> 2)];
								var $klattv67 = (($53 + 112) & 4294967295);
								var $arrayidx68 = (($klattv67) & 4294967295);
								var $54 = HEAP32[(($arrayidx68) >> 2)];
								var $tobool69 = ((($54)) | 0) != 0;
								if ($tobool69) {
									__label__ = 29;;
								} else {
									__label__ = 30;;
								}
								if (__label__ == 29) {
									$wcmd_spect = 2;;
								}
								HEAP8[(__ZZ8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTiE9wave_flag_b)] = 0;;
							} else if (__label__ == 31) {
								$wcmd_spect = 3;
								var $55 = HEAP32[((_voice) >> 2)];
								var $klattv73 = (($55 + 112) & 4294967295);
								var $arrayidx74 = (($klattv73) & 4294967295);
								var $56 = HEAP32[(($arrayidx74) >> 2)];
								var $tobool75 = ((($56)) | 0) != 0;
								if (!($tobool75)) {
									__label__ = 33;
									break $if_then64$$if_end79$39;
								}
								$wcmd_spect = 1;;
							}
						}
					} while (0);
					var $57 = HEAP32[((__ZL10last_frame) >> 2)];
					var $cmp80 = ((($57)) | 0) != 0;
					if ($cmp80) {
						__label__ = 34;;
					} else {
						__label__ = 43;;
					}
					$if_then81$$if_end117$49: do {
						if (__label__ == 34) {
							var $58 = HEAP32[((__ZL10last_frame) >> 2)];
							var $length82 = (($58 + 16) & 4294967295);
							var $59 = HEAPU8[($length82)];
							var $conv83 = ((($59)) & 255);
							var $cmp84 = ((($conv83)) | 0) < 2;
							if ($cmp84) {
								__label__ = 36;;
							} else {
								__label__ = 35;;
							}
							if (__label__ == 35) {
								var $60 = HEAP32[((__ZL10last_frame) >> 2)];
								var $frflags = (($60) & 4294967295);
								var $61 = HEAP16[(($frflags) >> 1)];
								var $conv86 = (tempInt = (($61)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $and87 = ($conv86) & 2;
								var $tobool88 = ((($and87)) | 0) != 0;
								if (!($tobool88)) {
									__label__ = 43;
									break $if_then81$$if_end117$49;
								}
							}
							var $62 = HEAP32[((__ZL10last_frame) >> 2)];
							var $frflags90 = (($62) & 4294967295);
							var $63 = HEAP16[(($frflags90) >> 1)];
							var $conv91 = (tempInt = (($63)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $and92 = ($conv91) & 16;
							var $tobool93 = ((($and92)) | 0) != 0;
							if ($tobool93) {
								__label__ = 43;
								break $if_then81$$if_end117$49;
							}
							var $64 = $frame1;
							var $65 = ($64);
							var $66 = HEAP32[((__ZL10last_wcmdq) >> 2)];
							var $arrayidx95 = ((_wcmdq + $66 * 16) & 4294967295);
							var $arrayidx96 = (($arrayidx95 + 12) & 4294967295);
							HEAP32[(($arrayidx96) >> 2)] = $65;
							var $67 = HEAP32[((__ZL10last_frame) >> 2)];
							var $frflags97 = (($67) & 4294967295);
							var $68 = HEAP16[(($frflags97) >> 1)];
							var $conv98 = (tempInt = (($68)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $and99 = ($conv98) & 8;
							var $tobool100 = ((($and99)) | 0) != 0;
							if (!($tobool100)) {
								__label__ = 43;
								break $if_then81$$if_end117$49;
							}
							var $69 = $frame1;
							var $call102 = __ZL9CopyFrameP7frame_ti($69, 1);
							$fr = $call102;
							$ix = 3;
							__lastLabel__ = 38;;
							while (1) {
								var $70 = __lastLabel__ == 38 ? 3 : ($inc);
								var $cmp104 = ((($70)) | 0) < 7;
								if ($cmp104) {
									__label__ = 40;;
								} else {
									__label__ = 41;;
								}
								if (__label__ == 40) {
									var $71 = $ix;
									var $72 = HEAP32[((__ZL10last_frame) >> 2)];
									var $ffreq = (($72 + 2) & 4294967295);
									var $arrayidx106 = (($ffreq + $71 * 2) & 4294967295);
									var $73 = HEAP16[(($arrayidx106) >> 1)];
									var $74 = $ix;
									var $75 = $fr;
									var $ffreq107 = (($75 + 2) & 4294967295);
									var $arrayidx108 = (($ffreq107 + $74 * 2) & 4294967295);
									HEAP16[(($arrayidx108) >> 1)] = $73;;
								}
								var $76 = $ix;
								var $77 = HEAP32[((__ZL10last_frame) >> 2)];
								var $fheight = (($77 + 18) & 4294967295);
								var $arrayidx110 = (($fheight + $76) & 4294967295);
								var $78 = HEAP8[($arrayidx110)];
								var $79 = $ix;
								var $80 = $fr;
								var $fheight111 = (($80 + 18) & 4294967295);
								var $arrayidx112 = (($fheight111 + $79) & 4294967295);
								HEAP8[($arrayidx112)] = $78;
								var $81 = $ix;
								var $inc = ((($81) + 1) & 4294967295);
								$ix = $inc;
								var $cmp103 = ((($inc)) | 0) < 8;
								if ($cmp103) {
									__lastLabel__ = 41;
									__label__ = 39;
									continue;
								} else {
									__lastLabel__ = 41;
									__label__ = 42;
									break;
								}
							}
							var $82 = $fr;
							var $83 = ($82);
							var $84 = HEAP32[((__ZL10last_wcmdq) >> 2)];
							var $arrayidx113 = ((_wcmdq + $84 * 16) & 4294967295);
							var $arrayidx114 = (($arrayidx113 + 12) & 4294967295);
							HEAP32[(($arrayidx114) >> 2)] = $83;;
						}
					} while (0);
					var $85 = $this_ph_addr;
					var $type118 = (($85 + 11) & 4294967295);
					var $86 = HEAPU8[($type118)];
					var $conv119 = ((($86)) & 255);
					var $cmp120 = ((($conv119)) | 0) == 2;
					if ($cmp120) {
						__label__ = 44;;
					} else {
						__label__ = 46;;
					}
					$land_lhs_true121$$if_end124$63: do {
						if (__label__ == 44) {
							var $87 = $which_addr;
							var $cmp122 = ((($87)) | 0) == 2;
							if (!($cmp122)) {
								__label__ = 46;
								break $land_lhs_true121$$if_end124$63;
							}
							__ZL11SmoothSpectv();
							var $88 = HEAP32[((_wcmdq_tail) >> 2)];
							HEAP32[((__ZL15syllable_centre) >> 2)] = $88;;
						}
					} while (0);
					$length_sum = 0;
					$frameix = 1;
					var $89 = $frameix;
					var $90 = HEAP32[(($n_frames) >> 2)];
					var $cmp1263 = ((($89)) | 0) < ((($90)) | 0);
					if ($cmp1263) {
						__label__ = 47;;
					} else {
						__label__ = 56;;
					}
					$for_body127$$if_end180$67: do {
						if (__label__ == 47) {
							$for_body127$68: while (1) {
								var $91 = $length_mod;
								$length_factor = $91;
								var $92 = $frameix;
								var $sub = ((($92) - 1) & 4294967295);
								var $93 = $frames;
								var $arrayidx128 = (($93 + 8 * $sub) & 4294967295);
								var $frflags129 = (($arrayidx128 + 2) & 4294967295);
								var $94 = HEAP16[(($frflags129) >> 1)];
								var $conv130 = (tempInt = (($94)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $and131 = ($conv130) & 4;
								var $tobool132 = ((($and131)) | 0) != 0;
								if ($tobool132) {
									__label__ = 48;;
								} else {
									__label__ = 49;;
								}
								$if_then133$$if_else138$70: do {
									if (__label__ == 48) {
										var $95 = $length_mod;
										var $96 = HEAP32[((((_speed + 16) & 4294967295)) >> 2)];
										var $sub134 = ((256 - ($96)) & 4294967295);
										var $mul135 = ((($sub134) * ($95)) & 4294967295);
										var $97 = HEAP32[((((_speed + 16) & 4294967295)) >> 2)];
										var $mul136 = ((($97) * 256) & 4294967295);
										var $add = ((($mul135) + ($mul136)) & 4294967295);
										var $div137 = ((((($add)) | 0) / 256) | 0);
										$length_factor = $div137;;
									} else if (__label__ == 49) {
										var $98 = $frameix;
										var $sub139 = ((($98) - 1) & 4294967295);
										var $99 = $frames;
										var $arrayidx140 = (($99 + 8 * $sub139) & 4294967295);
										var $frflags141 = (($arrayidx140 + 2) & 4294967295);
										var $100 = HEAP16[(($frflags141) >> 1)];
										var $conv142 = (tempInt = (($100)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and143 = ($conv142) & 16384;
										var $tobool144 = ((($and143)) | 0) != 0;
										if (!($tobool144)) {
											__label__ = 51;
											break $if_then133$$if_else138$70;
										}
										var $101 = $length_mod;
										var $102 = HEAP32[((((_speed + 20) & 4294967295)) >> 2)];
										var $sub146 = ((256 - ($102)) & 4294967295);
										var $mul147 = ((($sub146) * ($101)) & 4294967295);
										var $103 = HEAP32[((((_speed + 20) & 4294967295)) >> 2)];
										var $mul148 = ((($103) * 256) & 4294967295);
										var $add149 = ((($mul147) + ($mul148)) & 4294967295);
										var $div150 = ((((($add149)) | 0) / 256) | 0);
										$length_factor = $div150;;
									}
								} while (0);
								var $104 = $frameix;
								var $sub153 = ((($104) - 1) & 4294967295);
								var $105 = $frames;
								var $arrayidx154 = (($105 + 8 * $sub153) & 4294967295);
								var $length155 = (($arrayidx154) & 4294967295);
								var $106 = HEAP16[(($length155) >> 1)];
								var $conv156 = (tempInt = (($106)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								$frame_length = $conv156;
								var $107 = $frame_length;
								var $108 = HEAP32[((_samplerate) >> 2)];
								var $mul157 = ((($108) * ($107)) & 4294967295);
								var $div158 = ((((($mul157)) | 0) / 1000) | 0);
								$len = $div158;
								var $109 = $len;
								var $110 = $length_factor;
								var $mul159 = ((($110) * ($109)) & 4294967295);
								var $div160 = ((((($mul159)) | 0) / 256) | 0);
								$len = $div160;
								var $111 = $len;
								var $112 = $length_sum;
								var $add161 = ((($112) + ($111)) & 4294967295);
								$length_sum = $add161;
								var $113 = $len;
								var $114 = $frameix;
								var $arrayidx162 = (($frame_lengths + $114 * 4) & 4294967295);
								HEAP32[(($arrayidx162) >> 2)] = $113;
								var $115 = $frameix;
								var $inc164 = ((($115) + 1) & 4294967295);
								$frameix = $inc164;
								var $116 = $frameix;
								var $117 = HEAP32[(($n_frames) >> 2)];
								var $cmp126 = ((($116)) | 0) < ((($117)) | 0);
								if ($cmp126) {
									__label__ = 47;
									continue $for_body127$68;
								} else {
									__label__ = 52;
									break $for_body127$68;
								}
							}
							var $_pr4 = $length_sum;
							var $cmp166 = ((($_pr4)) | 0) > 0;
							if (!($cmp166)) {
								__label__ = 56;
								break $for_body127$$if_end180$67;
							}
							var $118 = $length_sum;
							var $119 = $length_min;
							var $cmp168 = ((($118)) | 0) < ((($119)) | 0);
							if (!($cmp168)) {
								__label__ = 56;
								break $for_body127$$if_end180$67;
							}
							$frameix = 1;
							var $120 = $frameix;
							var $121 = HEAP32[(($n_frames) >> 2)];
							var $cmp1712 = ((($120)) | 0) < ((($121)) | 0);
							if (!($cmp1712)) {
								__label__ = 56;
								break $for_body127$$if_end180$67;
							}
							while (1) {
								var $122 = $frameix;
								var $arrayidx173 = (($frame_lengths + $122 * 4) & 4294967295);
								var $123 = HEAP32[(($arrayidx173) >> 2)];
								var $124 = $length_min;
								var $mul174 = ((($124) * ($123)) & 4294967295);
								var $125 = $length_sum;
								var $div175 = ((((($mul174)) | 0) / ((($125)) | 0)) | 0);
								var $126 = $frameix;
								var $arrayidx176 = (($frame_lengths + $126 * 4) & 4294967295);
								HEAP32[(($arrayidx176) >> 2)] = $div175;
								var $127 = $frameix;
								var $inc178 = ((($127) + 1) & 4294967295);
								$frameix = $inc178;
								var $128 = $frameix;
								var $129 = HEAP32[(($n_frames) >> 2)];
								var $cmp171 = ((($128)) | 0) < ((($129)) | 0);
								if ($cmp171) {
									__label__ = 55;
									continue;
								} else {
									__label__ = 56;
									break $for_body127$$if_end180$67;
								}
							}
						}
					} while (0);
					$frameix = 1;
					var $130 = $frameix;
					var $131 = HEAP32[(($n_frames) >> 2)];
					var $cmp1821 = ((($130)) | 0) < ((($131)) | 0);
					if ($cmp1821) {
						__label__ = 57;;
					} else {
						__label__ = 72;;
					}
					$for_body183$$for_end235$81: do {
						if (__label__ == 57) {
							$for_body183$82: while (1) {
								var $132 = $frameix;
								var $133 = $frames;
								var $arrayidx184 = (($133 + 8 * $132) & 4294967295);
								var $frame185 = (($arrayidx184 + 4) & 4294967295);
								var $134 = HEAP32[(($frame185) >> 2)];
								$frame2 = $134;
								var $135 = $fmt_params_addr;
								var $wav_addr186 = (($135 + 28) & 4294967295);
								var $136 = HEAP32[(($wav_addr186) >> 2)];
								var $cmp187 = ((($136)) | 0) != 0;
								if ($cmp187) {
									__label__ = 58;;
								} else {
									__label__ = 60;;
								}
								$land_lhs_true188$$if_end198$84: do {
									if (__label__ == 58) {
										var $137 = $frame1;
										var $frflags189 = (($137) & 4294967295);
										var $138 = HEAP16[(($frflags189) >> 1)];
										var $conv190 = (tempInt = (($138)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and191 = ($conv190) & 128;
										var $cmp192 = ((($and191)) | 0) == 0;
										if (!($cmp192)) {
											__label__ = 60;
											break $land_lhs_true188$$if_end198$84;
										}
										HEAP32[((_seq_len_adjust) >> 2)] = 0;
										var $139 = $fmt_params_addr;
										var $wav_addr194 = (($139 + 28) & 4294967295);
										var $140 = HEAP32[(($wav_addr194) >> 2)];
										var $141 = $which_addr;
										var $add195 = ((($141) + 256) & 4294967295);
										var $142 = $fmt_params_addr;
										var $fmt_control = (($142) & 4294967295);
										var $143 = HEAP32[(($fmt_control) >> 2)];
										var $144 = HEAP32[((_wavefile_amp) >> 2)];
										var $call196 = __ZL9DoSample2iiiiii($140, $add195, 0, $143, 0, $144);
										HEAP8[(__ZZ8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTiE9wave_flag_b)] = 1;
										HEAP32[((_wavefile_ix) >> 2)] = 0;
										var $145 = $fmt_params_addr;
										var $wav_addr197 = (($145 + 28) & 4294967295);
										HEAP32[(($wav_addr197) >> 2)] = 0;;
									}
								} while (0);
								var $146 = $modulation_addr;
								var $cmp199 = ((($146)) | 0) >= 0;
								if ($cmp199) {
									__label__ = 61;;
								} else {
									__label__ = 66;;
								}
								$if_then200$$if_end214$88: do {
									if (__label__ == 61) {
										var $147 = $frame1;
										var $frflags201 = (($147) & 4294967295);
										var $148 = HEAP16[(($frflags201) >> 1)];
										var $conv202 = (tempInt = (($148)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and203 = ($conv202) & 64;
										var $tobool204 = ((($and203)) | 0) != 0;
										if ($tobool204) {
											__label__ = 62;;
										} else {
											__label__ = 63;;
										}
										if (__label__ == 62) {
											$modulation_addr = 6;;
										}
										var $149 = $frameix;
										var $150 = HEAP32[(($n_frames) >> 2)];
										var $sub207 = ((($150) - 1) & 4294967295);
										var $cmp208 = ((($149)) | 0) == ((($sub207)) | 0);
										if (!($cmp208)) {
											__label__ = 66;
											break $if_then200$$if_end214$88;
										}
										var $151 = HEAP32[((__ZL10modn_flags) >> 2)];
										var $and210 = ($151) & 3840;
										var $tobool211 = ((($and210)) | 0) != 0;
										if (!($tobool211)) {
											__label__ = 66;
											break $if_then200$$if_end214$88;
										}
										var $152 = HEAP32[((__ZL10modn_flags) >> 2)];
										var $153 = $modulation_addr;
										var $or = ($153) | ($152);
										$modulation_addr = $or;;
									}
								} while (0);
								var $154 = $frameix;
								var $arrayidx215 = (($frame_lengths + $154 * 4) & 4294967295);
								var $155 = HEAP32[(($arrayidx215) >> 2)];
								$len = $155;
								var $156 = HEAP32[((__ZL12pitch_length) >> 2)];
								var $add216 = ((($156) + ($155)) & 4294967295);
								HEAP32[((__ZL12pitch_length) >> 2)] = $add216;
								var $157 = HEAP32[((__ZL10amp_length) >> 2)];
								var $add217 = ((($157) + ($155)) & 4294967295);
								HEAP32[((__ZL10amp_length) >> 2)] = $add217;
								var $cmp218 = ((($155)) | 0) == 0;
								if ($cmp218) {
									__label__ = 67;;
								} else {
									__label__ = 68;;
								}
								if (__label__ == 67) {
									HEAP32[((__ZL10last_frame) >> 2)] = 0;
									var $158 = $frame2;
									$frame1 = $158;;
								} else if (__label__ == 68) {
									var $159 = HEAP32[((_wcmdq_tail) >> 2)];
									HEAP32[((__ZL10last_wcmdq) >> 2)] = $159;
									var $160 = $modulation_addr;
									var $cmp221 = ((($160)) | 0) >= 0;
									if ($cmp221) {
										__label__ = 69;;
									} else {
										__label__ = 70;;
									}
									if (__label__ == 69) {
										var $161 = HEAP32[((_wcmdq_tail) >> 2)];
										var $arrayidx223 = ((_wcmdq + $161 * 16) & 4294967295);
										var $arraydecay224 = (($arrayidx223) & 4294967295);
										$q = $arraydecay224;
										var $162 = $wcmd_spect;
										var $163 = $q;
										var $arrayidx225 = (($163) & 4294967295);
										HEAP32[(($arrayidx225) >> 2)] = $162;
										var $164 = $len;
										var $165 = $modulation_addr;
										var $shl = ((($165) * 65536) & 4294967295);
										var $add226 = ((($shl) + ($164)) & 4294967295);
										var $166 = $q;
										var $arrayidx227 = (($166 + 4) & 4294967295);
										HEAP32[(($arrayidx227) >> 2)] = $add226;
										var $167 = $frame1;
										var $168 = ($167);
										var $169 = $q;
										var $arrayidx228 = (($169 + 8) & 4294967295);
										HEAP32[(($arrayidx228) >> 2)] = $168;
										var $170 = $frame2;
										var $171 = ($170);
										var $172 = $q;
										var $arrayidx229 = (($172 + 12) & 4294967295);
										HEAP32[(($arrayidx229) >> 2)] = $171;
										__Z8WcmdqIncv();;
									}
									var $173 = $frame2;
									$frame1 = $173;
									HEAP32[((__ZL10last_frame) >> 2)] = $173;
									var $174 = $len;
									var $175 = $total_len;
									var $add231 = ((($175) + ($174)) & 4294967295);
									$total_len = $add231;;
								}
								var $176 = $frameix;
								var $inc234 = ((($176) + 1) & 4294967295);
								$frameix = $inc234;
								var $177 = $frameix;
								var $178 = HEAP32[(($n_frames) >> 2)];
								var $cmp182 = ((($177)) | 0) < ((($178)) | 0);
								if ($cmp182) {
									__label__ = 57;
									continue $for_body183$82;
								} else {
									__label__ = 72;
									break $for_body183$$for_end235$81;
								}
							}
						}
					} while (0);
					var $179 = $which_addr;
					var $cmp236 = ((($179)) | 0) != 1;
					var $180 = HEAP32[((__ZL13fmt_amplitude) >> 2)];
					var $cmp238 = ((($180)) | 0) != 0;
					var $or_cond = ($cmp236) & ($cmp238);
					if ($or_cond) {
						__label__ = 73;;
					} else {
						__label__ = 74;;
					}
					if (__label__ == 73) {
						var $181 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx240 = ((_wcmdq + $181 * 16) & 4294967295);
						var $arraydecay241 = (($arrayidx240) & 4294967295);
						$q = $arraydecay241;
						var $182 = $q;
						var $arrayidx242 = (($182) & 4294967295);
						HEAP32[(($arrayidx242) >> 2)] = 14;
						HEAP32[((__ZL13fmt_amplitude) >> 2)] = 0;
						var $183 = $q;
						var $arrayidx243 = (($183 + 4) & 4294967295);
						HEAP32[(($arrayidx243) >> 2)] = 0;
						__Z8WcmdqIncv();;
					}
					var $184 = $total_len;
					$retval = $184;;
				}
			}
			var $185 = $retval;
			STACKTOP = __stackBase__;
			return $185;
			return null;
		}

		function __ZL11SmoothSpectv() {;
			var __label__;
			var __lastLabel__ = null;
			var $q;
			var $frame;
			var $frame2;
			var $frame1;
			var $frame_centre;
			var $ix;
			var $len;
			var $pk;
			var $modified;
			var $allowed;
			var $diff;
			var $f1;
			var $f2;
			var $f1142;
			var $f2143;
			var $0 = HEAP32[((__ZL14syllable_start) >> 2)];
			var $1 = HEAP32[((__ZL12syllable_end) >> 2)];
			var $cmp = ((($0)) | 0) == ((($1)) | 0);
			if ($cmp) {
				__label__ = 58;;
			} else {
				__label__ = 1;;
			}
			$return$$if_end$2: do {
				if (__label__ == 1) {
					var $2 = HEAP32[((__ZL15syllable_centre) >> 2)];
					var $cmp1 = ((($2)) | 0) < 0;
					if ($cmp1) {
						__label__ = 3;;
					} else {
						__label__ = 2;;
					}
					$if_then3$$lor_lhs_false$4: do {
						if (__label__ == 2) {
							var $3 = HEAP32[((__ZL15syllable_centre) >> 2)];
							var $4 = HEAP32[((__ZL14syllable_start) >> 2)];
							var $cmp2 = ((($3)) | 0) == ((($4)) | 0);
							if ($cmp2) {
								__label__ = 3;
								break $if_then3$$lor_lhs_false$4;
							}
							var $6 = HEAP32[((__ZL15syllable_centre) >> 2)];
							var $arrayidx = ((_wcmdq + $6 * 16) & 4294967295);
							var $arraydecay = (($arrayidx) & 4294967295);
							$q = $arraydecay;
							var $7 = $q;
							var $arrayidx5 = (($7 + 8) & 4294967295);
							var $8 = HEAP32[(($arrayidx5) >> 2)];
							var $9 = ($8);
							$frame_centre = $9;
							var $10 = HEAP32[((__ZL15syllable_centre) >> 2)];
							var $sub = ((($10) - 1) & 4294967295);
							$ix = $sub;
							var $11 = $frame_centre;
							$frame2 = $11;
							$frame = $11;
							__lastLabel__ = 4;;
							$for_cond$7: while (1) {
								var $12 = __lastLabel__ == 30 ? $dec : ($sub);
								var $cmp6 = ((($12)) | 0) < 0;
								if ($cmp6) {
									__label__ = 6;;
								} else {
									__label__ = 7;;
								}
								if (__label__ == 6) {
									$ix = 159;;
								}
								var $13 = $ix;
								var $arrayidx9 = ((_wcmdq + $13 * 16) & 4294967295);
								var $arraydecay10 = (($arrayidx9) & 4294967295);
								$q = $arraydecay10;
								var $14 = $q;
								var $arrayidx11 = (($14) & 4294967295);
								var $15 = HEAP32[(($arrayidx11) >> 2)];
								var $cmp12 = ((($15)) | 0) == 5;
								if ($cmp12) {
									__label__ = 31;
									break $for_cond$7;
								}
								var $16 = $q;
								var $arrayidx14 = (($16) & 4294967295);
								var $17 = HEAP32[(($arrayidx14) >> 2)];
								var $cmp15 = ((($17)) | 0) == 6;
								if ($cmp15) {
									__label__ = 31;
									break $for_cond$7;
								}
								var $18 = $q;
								var $arrayidx18 = (($18) & 4294967295);
								var $19 = HEAP32[(($arrayidx18) >> 2)];
								var $cmp19 = ((($19)) | 0) <= 4;
								if ($cmp19) {
									__label__ = 10;;
								} else {
									__label__ = 29;;
								}
								$if_then20$$if_end95$14: do {
									if (__label__ == 10) {
										var $20 = $q;
										var $arrayidx21 = (($20 + 4) & 4294967295);
										var $21 = HEAP32[(($arrayidx21) >> 2)];
										var $and = ($21) & 65535;
										$len = $and;
										var $22 = $q;
										var $arrayidx22 = (($22 + 12) & 4294967295);
										var $23 = HEAP32[(($arrayidx22) >> 2)];
										var $24 = ($23);
										$frame1 = $24;
										var $25 = $frame1;
										var $26 = $frame;
										var $cmp23 = ((($25)) | 0) == ((($26)) | 0);
										if (!($cmp23)) {
											__label__ = 31;
											break $for_cond$7;
										}
										var $27 = $frame2;
										var $28 = ($27);
										var $29 = $q;
										var $arrayidx25 = (($29 + 12) & 4294967295);
										HEAP32[(($arrayidx25) >> 2)] = $28;
										var $30 = $frame2;
										$frame1 = $30;
										var $31 = $q;
										var $arrayidx27 = (($31 + 8) & 4294967295);
										var $32 = HEAP32[(($arrayidx27) >> 2)];
										var $33 = ($32);
										$frame2 = $33;
										$frame = $33;
										$modified = 0;
										var $34 = $frame;
										var $frflags = (($34) & 4294967295);
										var $35 = HEAP16[(($frflags) >> 1)];
										var $conv = (tempInt = (($35)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and28 = ($conv) & 16;
										var $tobool = ((($and28)) | 0) != 0;
										if ($tobool) {
											__label__ = 31;
											break $for_cond$7;
										}
										var $36 = $frame;
										var $frflags31 = (($36) & 4294967295);
										var $37 = HEAP16[(($frflags31) >> 1)];
										var $conv32 = (tempInt = (($37)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and33 = ($conv32) & 32;
										var $tobool34 = ((($and33)) | 0) != 0;
										if ($tobool34) {
											__label__ = 13;;
										} else {
											__label__ = 14;;
										}
										if (__label__ == 13) {
											var $38 = $len;
											var $mul = ((($38) * 12) & 4294967295);
											var $div = ((((($mul)) | 0) / 10) | 0);
											$len = $div;;
										}
										$pk = 0;;
										$for_body$21: while (1) {
											var $39 = $frame;
											var $frflags39 = (($39) & 4294967295);
											var $40 = HEAP16[(($frflags39) >> 1)];
											var $conv40 = (tempInt = (($40)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $and41 = ($conv40) & 8;
											var $tobool42 = ((($and41)) | 0) != 0;
											if ($tobool42) {
												__label__ = 16;;
											} else {
												__label__ = 17;;
											}
											$land_lhs_true$$if_end45$23: do {
												if (__label__ == 16) {
													var $41 = $pk;
													var $cmp43 = ((($41)) | 0) < 3;
													if ($cmp43) {
														__label__ = 28;
														break $land_lhs_true$$if_end45$23;
													} else {
														__label__ = 17;
														break $land_lhs_true$$if_end45$23;
													}
												}
											} while (0);
											$for_inc$$if_end45$25: do {
												if (__label__ == 17) {
													var $42 = $pk;
													var $43 = $frame1;
													var $ffreq = (($43 + 2) & 4294967295);
													var $arrayidx46 = (($ffreq + $42 * 2) & 4294967295);
													var $44 = HEAP16[(($arrayidx46) >> 1)];
													var $conv47 = (tempInt = (($44)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
													$f1 = $conv47;
													var $45 = $pk;
													var $46 = $frame;
													var $ffreq48 = (($46 + 2) & 4294967295);
													var $arrayidx49 = (($ffreq48 + $45 * 2) & 4294967295);
													var $47 = HEAP16[(($arrayidx49) >> 1)];
													var $conv50 = (tempInt = (($47)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
													$f2 = $conv50;
													var $48 = $f2;
													var $49 = $f1;
													var $sub51 = ((($48) - ($49)) & 4294967295);
													$diff = $sub51;
													var $cmp52 = ((($sub51)) | 0) > 0;
													var $50 = $f1;
													if ($cmp52) {
														__label__ = 18;;
													} else {
														__label__ = 19;;
													}
													if (__label__ == 18) {
														var $mul54 = ((($50) * 2) & 4294967295);
														var $51 = $f2;
														var $add = ((($51) + ($mul54)) & 4294967295);
														$allowed = $add;;
													} else if (__label__ == 19) {
														var $52 = $f2;
														var $mul56 = ((($52) * 2) & 4294967295);
														var $add57 = ((($mul56) + ($50)) & 4294967295);
														$allowed = $add57;;
													}
													var $53 = $allowed;
													var $54 = $pk;
													var $arrayidx59 = ((_formant_rate + $54 * 4) & 4294967295);
													var $55 = HEAP32[(($arrayidx59) >> 2)];
													var $mul60 = ((($55) * ($53)) & 4294967295);
													var $div61 = ((((($mul60)) | 0) / 3000) | 0);
													$allowed = $div61;
													var $56 = $allowed;
													var $57 = $len;
													var $mul62 = ((($57) * ($56)) & 4294967295);
													var $div63 = ((((($mul62)) | 0) / 256) | 0);
													$allowed = $div63;
													var $58 = $diff;
													var $59 = $allowed;
													var $cmp64 = ((($58)) | 0) > ((($59)) | 0);
													if ($cmp64) {
														__label__ = 21;;
													} else {
														__label__ = 24;;
													}
													if (__label__ == 21) {
														var $60 = $modified;
														var $cmp66 = ((($60)) | 0) == 0;
														if ($cmp66) {
															__label__ = 22;;
														} else {
															__label__ = 23;;
														}
														if (__label__ == 22) {
															var $61 = $frame;
															var $call = __ZL9CopyFrameP7frame_ti($61, 0);
															$frame2 = $call;
															$modified = 1;;
														}
														var $62 = $pk;
														var $63 = $frame1;
														var $ffreq69 = (($63 + 2) & 4294967295);
														var $arrayidx70 = (($ffreq69 + $62 * 2) & 4294967295);
														var $64 = HEAP16[(($arrayidx70) >> 1)];
														var $conv71 = (tempInt = (($64)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
														var $65 = $allowed;
														var $add72 = ((($conv71) + ($65)) & 4294967295);
														var $conv73 = ((($add72)) & 65535);
														var $66 = $pk;
														var $67 = $frame2;
														var $ffreq74 = (($67 + 2) & 4294967295);
														var $arrayidx75 = (($ffreq74 + $66 * 2) & 4294967295);
														HEAP16[(($arrayidx75) >> 1)] = $conv73;
														var $68 = $frame2;
														var $69 = ($68);
														var $70 = $q;
														var $arrayidx76 = (($70 + 8) & 4294967295);
														HEAP32[(($arrayidx76) >> 2)] = $69;;
													} else if (__label__ == 24) {
														var $71 = $diff;
														var $72 = $allowed;
														var $sub78 = (((-($72))) & 4294967295);
														var $cmp79 = ((($71)) | 0) < ((($sub78)) | 0);
														if (!($cmp79)) {
															__label__ = 28;
															break $for_inc$$if_end45$25;
														}
														var $73 = $modified;
														var $cmp81 = ((($73)) | 0) == 0;
														if ($cmp81) {
															__label__ = 26;;
														} else {
															__label__ = 27;;
														}
														if (__label__ == 26) {
															var $74 = $frame;
															var $call83 = __ZL9CopyFrameP7frame_ti($74, 0);
															$frame2 = $call83;
															$modified = 1;;
														}
														var $75 = $pk;
														var $76 = $frame1;
														var $ffreq85 = (($76 + 2) & 4294967295);
														var $arrayidx86 = (($ffreq85 + $75 * 2) & 4294967295);
														var $77 = HEAP16[(($arrayidx86) >> 1)];
														var $conv87 = (tempInt = (($77)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
														var $78 = $allowed;
														var $sub88 = ((($conv87) - ($78)) & 4294967295);
														var $conv89 = ((($sub88)) & 65535);
														var $79 = $pk;
														var $80 = $frame2;
														var $ffreq90 = (($80 + 2) & 4294967295);
														var $arrayidx91 = (($ffreq90 + $79 * 2) & 4294967295);
														HEAP16[(($arrayidx91) >> 1)] = $conv89;
														var $81 = $frame2;
														var $82 = ($81);
														var $83 = $q;
														var $arrayidx92 = (($83 + 8) & 4294967295);
														HEAP32[(($arrayidx92) >> 2)] = $82;;
													}
												}
											} while (0);
											var $84 = $pk;
											var $inc = ((($84) + 1) & 4294967295);
											$pk = $inc;
											var $cmp38 = ((($inc)) | 0) < 6;
											if ($cmp38) {
												__label__ = 15;
												continue $for_body$21;
											} else {
												__label__ = 29;
												break $if_then20$$if_end95$14;
											}
										}
									}
								} while (0);
								var $85 = $ix;
								var $86 = HEAP32[((__ZL14syllable_start) >> 2)];
								var $cmp96 = ((($85)) | 0) == ((($86)) | 0);
								if ($cmp96) {
									__label__ = 31;
									break $for_cond$7;
								}
								var $87 = $ix;
								var $dec = ((($87) - 1) & 4294967295);
								$ix = $dec;
								__lastLabel__ = 30;
								__label__ = 5;
								continue $for_cond$7;
							}
							var $88 = HEAP32[((__ZL15syllable_centre) >> 2)];
							$ix = $88;
							$frame = 0;;
							$for_cond100$45: while (1) {
								var $89 = $ix;
								var $arrayidx101 = ((_wcmdq + $89 * 16) & 4294967295);
								var $arraydecay102 = (($arrayidx101) & 4294967295);
								$q = $arraydecay102;
								var $90 = $q;
								var $arrayidx103 = (($90) & 4294967295);
								var $91 = HEAP32[(($arrayidx103) >> 2)];
								var $cmp104 = ((($91)) | 0) == 5;
								if ($cmp104) {
									__label__ = 57;
									break $for_cond100$45;
								}
								var $92 = $q;
								var $arrayidx106 = (($92) & 4294967295);
								var $93 = HEAP32[(($arrayidx106) >> 2)];
								var $cmp107 = ((($93)) | 0) == 6;
								if ($cmp107) {
									__label__ = 57;
									break $for_cond100$45;
								}
								var $94 = $q;
								var $arrayidx110 = (($94) & 4294967295);
								var $95 = HEAP32[(($arrayidx110) >> 2)];
								var $cmp111 = ((($95)) | 0) <= 4;
								if ($cmp111) {
									__label__ = 35;;
								} else {
									__label__ = 54;;
								}
								$if_then112$$if_end199$49: do {
									if (__label__ == 35) {
										var $96 = $q;
										var $arrayidx113 = (($96 + 4) & 4294967295);
										var $97 = HEAP32[(($arrayidx113) >> 2)];
										var $and114 = ($97) & 65535;
										$len = $and114;
										var $98 = $q;
										var $arrayidx115 = (($98 + 8) & 4294967295);
										var $99 = HEAP32[(($arrayidx115) >> 2)];
										var $100 = ($99);
										$frame1 = $100;
										var $101 = $frame;
										var $cmp116 = ((($101)) | 0) != 0;
										if ($cmp116) {
											__label__ = 36;;
										} else {
											__label__ = 38;;
										}
										if (__label__ == 36) {
											var $102 = $frame1;
											var $103 = $frame;
											var $cmp118 = ((($102)) | 0) == ((($103)) | 0);
											if (!($cmp118)) {
												__label__ = 57;
												break $for_cond100$45;
											}
											var $104 = $frame2;
											var $105 = ($104);
											var $106 = $q;
											var $arrayidx120 = (($106 + 8) & 4294967295);
											HEAP32[(($arrayidx120) >> 2)] = $105;
											var $107 = $frame2;
											$frame1 = $107;;
										}
										var $108 = $q;
										var $arrayidx124 = (($108 + 12) & 4294967295);
										var $109 = HEAP32[(($arrayidx124) >> 2)];
										var $110 = ($109);
										$frame2 = $110;
										$frame = $110;
										$modified = 0;
										var $111 = $frame1;
										var $frflags125 = (($111) & 4294967295);
										var $112 = HEAP16[(($frflags125) >> 1)];
										var $conv126 = (tempInt = (($112)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and127 = ($conv126) & 16;
										var $tobool128 = ((($and127)) | 0) != 0;
										if ($tobool128) {
											__label__ = 57;
											break $for_cond100$45;
										}
										var $113 = $frame1;
										var $frflags131 = (($113) & 4294967295);
										var $114 = HEAP16[(($frflags131) >> 1)];
										var $conv132 = (tempInt = (($114)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $and133 = ($conv132) & 32;
										var $tobool134 = ((($and133)) | 0) != 0;
										if ($tobool134) {
											__label__ = 40;;
										} else {
											__label__ = 41;;
										}
										if (__label__ == 40) {
											var $115 = $len;
											var $mul136 = ((($115) * 6) & 4294967295);
											var $div137 = ((((($mul136)) | 0) / 5) | 0);
											$len = $div137;;
										}
										$pk = 0;;
										$for_body141$59: while (1) {
											var $116 = $pk;
											var $117 = $frame1;
											var $ffreq144 = (($117 + 2) & 4294967295);
											var $arrayidx145 = (($ffreq144 + $116 * 2) & 4294967295);
											var $118 = HEAP16[(($arrayidx145) >> 1)];
											var $conv146 = (tempInt = (($118)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											$f1142 = $conv146;
											var $119 = $pk;
											var $120 = $frame;
											var $ffreq147 = (($120 + 2) & 4294967295);
											var $arrayidx148 = (($ffreq147 + $119 * 2) & 4294967295);
											var $121 = HEAP16[(($arrayidx148) >> 1)];
											var $conv149 = (tempInt = (($121)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											$f2143 = $conv149;
											var $122 = $f2143;
											var $123 = $f1142;
											var $sub150 = ((($122) - ($123)) & 4294967295);
											$diff = $sub150;
											var $cmp151 = ((($sub150)) | 0) > 0;
											var $124 = $f1142;
											if ($cmp151) {
												__label__ = 43;;
											} else {
												__label__ = 44;;
											}
											if (__label__ == 43) {
												var $mul153 = ((($124) * 2) & 4294967295);
												var $125 = $f2143;
												var $add154 = ((($125) + ($mul153)) & 4294967295);
												$allowed = $add154;;
											} else if (__label__ == 44) {
												var $126 = $f2143;
												var $mul156 = ((($126) * 2) & 4294967295);
												var $add157 = ((($mul156) + ($124)) & 4294967295);
												$allowed = $add157;;
											}
											var $127 = $allowed;
											var $128 = $pk;
											var $arrayidx159 = ((_formant_rate + $128 * 4) & 4294967295);
											var $129 = HEAP32[(($arrayidx159) >> 2)];
											var $mul160 = ((($129) * ($127)) & 4294967295);
											var $div161 = ((((($mul160)) | 0) / 3000) | 0);
											$allowed = $div161;
											var $130 = $allowed;
											var $131 = $len;
											var $mul162 = ((($131) * ($130)) & 4294967295);
											var $div163 = ((((($mul162)) | 0) / 256) | 0);
											$allowed = $div163;
											var $132 = $diff;
											var $133 = $allowed;
											var $cmp164 = ((($132)) | 0) > ((($133)) | 0);
											if ($cmp164) {
												__label__ = 46;;
											} else {
												__label__ = 49;;
											}
											$if_then165$$if_else178$65: do {
												if (__label__ == 46) {
													var $134 = $modified;
													var $cmp166 = ((($134)) | 0) == 0;
													if ($cmp166) {
														__label__ = 47;;
													} else {
														__label__ = 48;;
													}
													if (__label__ == 47) {
														var $135 = $frame;
														var $call168 = __ZL9CopyFrameP7frame_ti($135, 0);
														$frame2 = $call168;
														$modified = 1;;
													}
													var $136 = $pk;
													var $137 = $frame1;
													var $ffreq170 = (($137 + 2) & 4294967295);
													var $arrayidx171 = (($ffreq170 + $136 * 2) & 4294967295);
													var $138 = HEAP16[(($arrayidx171) >> 1)];
													var $conv172 = (tempInt = (($138)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
													var $139 = $allowed;
													var $add173 = ((($conv172) + ($139)) & 4294967295);
													var $conv174 = ((($add173)) & 65535);
													var $140 = $pk;
													var $141 = $frame2;
													var $ffreq175 = (($141 + 2) & 4294967295);
													var $arrayidx176 = (($ffreq175 + $140 * 2) & 4294967295);
													HEAP16[(($arrayidx176) >> 1)] = $conv174;
													var $142 = $frame2;
													var $143 = ($142);
													var $144 = $q;
													var $arrayidx177 = (($144 + 12) & 4294967295);
													HEAP32[(($arrayidx177) >> 2)] = $143;;
												} else if (__label__ == 49) {
													var $145 = $diff;
													var $146 = $allowed;
													var $sub179 = (((-($146))) & 4294967295);
													var $cmp180 = ((($145)) | 0) < ((($sub179)) | 0);
													if (!($cmp180)) {
														__label__ = 53;
														break $if_then165$$if_else178$65;
													}
													var $147 = $modified;
													var $cmp182 = ((($147)) | 0) == 0;
													if ($cmp182) {
														__label__ = 51;;
													} else {
														__label__ = 52;;
													}
													if (__label__ == 51) {
														var $148 = $frame;
														var $call184 = __ZL9CopyFrameP7frame_ti($148, 0);
														$frame2 = $call184;
														$modified = 1;;
													}
													var $149 = $pk;
													var $150 = $frame1;
													var $ffreq186 = (($150 + 2) & 4294967295);
													var $arrayidx187 = (($ffreq186 + $149 * 2) & 4294967295);
													var $151 = HEAP16[(($arrayidx187) >> 1)];
													var $conv188 = (tempInt = (($151)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
													var $152 = $allowed;
													var $sub189 = ((($conv188) - ($152)) & 4294967295);
													var $conv190 = ((($sub189)) & 65535);
													var $153 = $pk;
													var $154 = $frame2;
													var $ffreq191 = (($154 + 2) & 4294967295);
													var $arrayidx192 = (($ffreq191 + $153 * 2) & 4294967295);
													HEAP16[(($arrayidx192) >> 1)] = $conv190;
													var $155 = $frame2;
													var $156 = ($155);
													var $157 = $q;
													var $arrayidx193 = (($157 + 12) & 4294967295);
													HEAP32[(($arrayidx193) >> 2)] = $156;;
												}
											} while (0);
											var $158 = $pk;
											var $inc197 = ((($158) + 1) & 4294967295);
											$pk = $inc197;
											var $cmp140 = ((($inc197)) | 0) < 6;
											if ($cmp140) {
												__label__ = 42;
												continue $for_body141$59;
											} else {
												__label__ = 54;
												break $if_then112$$if_end199$49;
											}
										}
									}
								} while (0);
								var $159 = $ix;
								var $inc200 = ((($159) + 1) & 4294967295);
								$ix = $inc200;
								var $cmp201 = ((($inc200)) | 0) >= 160;
								if ($cmp201) {
									__label__ = 55;;
								} else {
									__label__ = 56;;
								}
								if (__label__ == 55) {
									$ix = 0;;
								}
								var $160 = $ix;
								var $161 = HEAP32[((__ZL12syllable_end) >> 2)];
								var $cmp204 = ((($160)) | 0) == ((($161)) | 0);
								if ($cmp204) {
									__label__ = 57;
									break $for_cond100$45;
								} else {
									__label__ = 32;
									continue $for_cond100$45;
								}
							}
							var $162 = HEAP32[((__ZL12syllable_end) >> 2)];
							HEAP32[((__ZL14syllable_start) >> 2)] = $162;
							__label__ = 58;
							break $return$$if_end$2;
						}
					} while (0);
					var $5 = HEAP32[((__ZL12syllable_end) >> 2)];
					HEAP32[((__ZL14syllable_start) >> 2)] = $5;;
				}
			} while (0);;
			return;
			return;
		}

		function __Z8DoMarkeriiii($type, $char_posn, $length, $value) {;
			var __label__;
			var $type_addr;
			var $char_posn_addr;
			var $length_addr;
			var $value_addr;
			$type_addr = $type;
			$char_posn_addr = $char_posn;
			$length_addr = $length;
			$value_addr = $value;
			var $0 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx = ((_wcmdq + $0 * 16) & 4294967295);
			var $arrayidx1 = (($arrayidx) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 10;
			var $1 = $type_addr;
			var $2 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx2 = ((_wcmdq + $2 * 16) & 4294967295);
			var $arrayidx3 = (($arrayidx2 + 4) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = $1;
			var $3 = $char_posn_addr;
			var $and = ($3) & 16777215;
			var $4 = $length_addr;
			var $shl = ($4) << 24;
			var $or = ($shl) | ($and);
			var $5 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx4 = ((_wcmdq + $5 * 16) & 4294967295);
			var $arrayidx5 = (($arrayidx4 + 8) & 4294967295);
			HEAP32[(($arrayidx5) >> 2)] = $or;
			var $6 = $value_addr;
			var $7 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx6 = ((_wcmdq + $7 * 16) & 4294967295);
			var $arrayidx7 = (($arrayidx6 + 12) & 4294967295);
			HEAP32[(($arrayidx7) >> 2)] = $6;
			__Z8WcmdqIncv();;
			return;
			return;
		}

		function __Z12DoSonicSpeedi($value) {;
			var __label__;
			var $value_addr;
			$value_addr = $value;
			var $0 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx = ((_wcmdq + $0 * 16) & 4294967295);
			var $arrayidx1 = (($arrayidx) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 15;
			var $1 = $value_addr;
			var $2 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx2 = ((_wcmdq + $2 * 16) & 4294967295);
			var $arrayidx3 = (($arrayidx2 + 4) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = $1;
			__Z8WcmdqIncv();;
			return;
			return;
		}

		function __Z13DoVoiceChangeP7voice_t($v) {;
			var __label__;
			var $v_addr;
			var $v2;
			$v_addr = $v;
			var $call = _malloc(1344);
			var $0 = $call;
			$v2 = $0;
			var $1 = $v2;
			var $2 = $1;
			var $3 = $v_addr;
			var $4 = $3;
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = $4;
			$dest$ = $2;
			$stop$ = $src$ + 1344;
			if (($dest$ % 4) == ($src$ % 4) && 1344 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			var $5 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx = ((_wcmdq + $5 * 16) & 4294967295);
			var $arrayidx1 = (($arrayidx) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 11;
			var $6 = $v2;
			var $7 = ($6);
			var $8 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx2 = ((_wcmdq + $8 * 16) & 4294967295);
			var $arrayidx3 = (($arrayidx2 + 4) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = $7;
			__Z8WcmdqIncv();;
			return;
			return;
		}

		function __Z10DoEmbeddedPii($embix, $sourceix) {;
			var __label__;
			var $embix_addr;
			var $sourceix_addr;
			var $word;
			var $value;
			var $command;
			$embix_addr = $embix;
			$sourceix_addr = $sourceix;;
			$do_body$2: while (1) {
				var $0 = $embix_addr;
				var $1 = HEAP32[(($0) >> 2)];
				var $arrayidx = ((_embedded_list + $1 * 4) & 4294967295);
				var $2 = HEAP32[(($arrayidx) >> 2)];
				$word = $2;
				var $3 = $word;
				var $shr = ($3) >>> 8;
				$value = $shr;
				var $4 = $word;
				var $and = ($4) & 127;
				$command = $and;
				var $cmp = ((($and)) | 0) == 0;
				if ($cmp) {
					__label__ = 11;
					break $do_body$2;
				}
				var $5 = $embix_addr;
				var $6 = HEAP32[(($5) >> 2)];
				var $inc = ((($6) + 1) & 4294967295);
				HEAP32[(($5) >> 2)] = $inc;
				var $7 = $command;
				var $and1 = ($7) & 31;
				if ($and1 == 2) {
					__label__ = 3;;
				} else if ($and1 == 7) {
					__label__ = 4;;
				} else if ($and1 == 10) {
					__label__ = 7;;
				} else if ($and1 == 11) {
					__label__ = 8;;
				} else {
					__label__ = 9;;
				}
				$sw_default$$sw_bb$$sw_bb3$$sw_bb23$$sw_bb26$5: do {
					if (__label__ == 9) {
						__ZL7DoPauseii(10, 0);
						var $28 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx28 = ((_wcmdq + $28 * 16) & 4294967295);
						var $arrayidx29 = (($arrayidx28) & 4294967295);
						HEAP32[(($arrayidx29) >> 2)] = 12;
						var $29 = $command;
						var $30 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx30 = ((_wcmdq + $30 * 16) & 4294967295);
						var $arrayidx31 = (($arrayidx30 + 4) & 4294967295);
						HEAP32[(($arrayidx31) >> 2)] = $29;
						var $31 = $value;
						var $32 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx32 = ((_wcmdq + $32 * 16) & 4294967295);
						var $arrayidx33 = (($arrayidx32 + 8) & 4294967295);
						HEAP32[(($arrayidx33) >> 2)] = $31;
						__Z8WcmdqIncv();;
					} else if (__label__ == 3) {
						var $8 = $command;
						var $and2 = ($8) & 96;
						var $add = ((($and2) + 8) & 4294967295);
						var $9 = $value;
						__Z11SetEmbeddedii($add, $9);
						__Z8SetSpeedi(2);;
					} else if (__label__ == 4) {
						var $10 = $value;
						var $11 = HEAP32[((_n_soundicon_tab) >> 2)];
						var $cmp4 = ((($10)) | 0) < ((($11)) | 0);
						if (!($cmp4)) {
							__label__ = 10;
							break $sw_default$$sw_bb$$sw_bb3$$sw_bb23$$sw_bb26$5;
						}
						var $12 = $value;
						var $arrayidx6 = ((_soundicon_tab + $12 * 16) & 4294967295);
						var $length = (($arrayidx6 + 4) & 4294967295);
						var $13 = HEAP32[(($length) >> 2)];
						var $cmp7 = ((($13)) | 0) != 0;
						if (!($cmp7)) {
							__label__ = 10;
							break $sw_default$$sw_bb$$sw_bb3$$sw_bb23$$sw_bb26$5;
						}
						__ZL7DoPauseii(10, 0);
						var $14 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx9 = ((_wcmdq + $14 * 16) & 4294967295);
						var $arrayidx10 = (($arrayidx9) & 4294967295);
						HEAP32[(($arrayidx10) >> 2)] = 6;
						var $15 = $value;
						var $arrayidx11 = ((_soundicon_tab + $15 * 16) & 4294967295);
						var $length12 = (($arrayidx11 + 4) & 4294967295);
						var $16 = HEAP32[(($length12) >> 2)];
						var $17 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx13 = ((_wcmdq + $17 * 16) & 4294967295);
						var $arrayidx14 = (($arrayidx13 + 4) & 4294967295);
						HEAP32[(($arrayidx14) >> 2)] = $16;
						var $18 = $value;
						var $arrayidx15 = ((_soundicon_tab + $18 * 16) & 4294967295);
						var $data = (($arrayidx15 + 8) & 4294967295);
						var $19 = HEAP32[(($data) >> 2)];
						var $20 = ($19);
						var $add16 = ((($20) + 44) & 4294967295);
						var $21 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx17 = ((_wcmdq + $21 * 16) & 4294967295);
						var $arrayidx18 = (($arrayidx17 + 8) & 4294967295);
						HEAP32[(($arrayidx18) >> 2)] = $add16;
						var $22 = HEAP32[((_wcmdq_tail) >> 2)];
						var $arrayidx19 = ((_wcmdq + $22 * 16) & 4294967295);
						var $arrayidx20 = (($arrayidx19 + 12) & 4294967295);
						HEAP32[(($arrayidx20) >> 2)] = 5376;
						__Z8WcmdqIncv();;
					} else if (__label__ == 7) {
						var $23 = $sourceix_addr;
						var $and24 = ($23) & 2047;
						var $24 = HEAP32[((_clause_start_char) >> 2)];
						var $add25 = ((($and24) + ($24)) & 4294967295);
						var $25 = $value;
						__Z8DoMarkeriiii(3, $add25, 0, $25);;
					} else if (__label__ == 8) {
						var $26 = HEAP32[((_count_characters) >> 2)];
						var $add27 = ((($26) + 1) & 4294967295);
						var $27 = $value;
						__Z8DoMarkeriiii(4, $add27, 0, $27);;
					}
				} while (0);
				var $33 = $word;
				var $and34 = ($33) & 128;
				var $cmp35 = ((($and34)) | 0) == 0;
				if ($cmp35) {
					__label__ = 1;
					continue $do_body$2;
				} else {
					__label__ = 11;
					break $do_body$2;
				}
			};
			return;
			return;
		}

		function __Z8GenerateP12PHONEME_LISTPii($phoneme_list, $n_ph, $resume) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 656;
			_memset(__stackBase__, 0, 656);
			var __label__;
			var $retval;
			var $phoneme_list_addr;
			var $n_ph_addr;
			var $resume_addr;
			var $prev;
			var $next;
			var $next2;
			var $p;
			var $released;
			var $stress;
			var $modulation;
			var $pre_voiced;
			var $free_min;
			var $pitch_env;
			var $amp_env;
			var $ph;
			var $prev_ph;
			var $phdata = __stackBase__;
			var $phdata_prev = __stackBase__ + 152;
			var $phdata_next = __stackBase__ + 304;
			var $phdata_tone = __stackBase__ + 456;
			var $fmtp = __stackBase__ + 608;
			$phoneme_list_addr = $phoneme_list;
			$n_ph_addr = $n_ph;
			$resume_addr = $resume;
			$pitch_env = 0;
			var $0 = HEAP32[((_option_quiet) >> 2)];
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $1 = HEAP8[(((_mbrola_name) & 4294967295))];
				var $conv = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp = ((($conv)) | 0) != 0;
				if ($cmp) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $2 = $phoneme_list_addr;
					var $3 = $n_ph_addr;
					var $4 = $resume_addr;
					var $call = __Z14MbrolaGenerateP12PHONEME_LISTPii($2, $3, $4);
					$retval = $call;;
				} else if (__label__ == 4) {
					var $5 = $resume_addr;
					var $cmp3 = ((($5)) | 0) == 0;
					if ($cmp3) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)] = 1;
						HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE11embedded_ix) >> 2)] = 0;
						HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE10word_count) >> 2)] = 0;
						HEAP32[((__ZL12pitch_length) >> 2)] = 0;
						HEAP32[((__ZL10amp_length) >> 2)] = 0;
						HEAP32[((__ZL10last_frame) >> 2)] = 0;
						HEAP32[((__ZL10last_wcmdq) >> 2)] = -1;
						var $6 = HEAP32[((_wcmdq_tail) >> 2)];
						HEAP32[((__ZL14syllable_start) >> 2)] = $6;
						var $7 = HEAP32[((_wcmdq_tail) >> 2)];
						HEAP32[((__ZL12syllable_end) >> 2)] = $7;
						HEAP32[((__ZL15syllable_centre) >> 2)] = -1;
						HEAP32[((__ZL14last_pitch_cmd) >> 2)] = -1;
						var $dest$, $stop$, $stop4$, $fast$, $value4$;
						$dest$ = _vowel_transition;
						$stop$ = $dest$ + 16;
						$value4$ = 0;
						if ($value4$ < 0) $value4$ += 256;
						$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
						while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
							HEAP8[$dest$++] = 0;
						}
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($dest$ < $stop4$) {;;;;;;;
							HEAP32[$dest$++] = $value4$;
						}
						$dest$ <<= 2;
						while ($dest$ < $stop$) {;;
							HEAP8[$dest$++] = 0;
						};
						__ZL7DoPauseii(0, 0);;
					}
					var $pd_control = (($phdata) & 4294967295);
					var $8 = $fmtp;
					var $fmt_control = (($fmtp) & 4294967295);
					var $sound_addr = (($phdata + 68) & 4294967295);
					var $arrayidx173 = (($sound_addr) & 4294967295);
					var $fmt_addr = (($fmtp + 8) & 4294967295);
					var $sound_param = (($phdata + 88) & 4294967295);
					var $arrayidx174 = (($sound_param) & 4294967295);
					var $fmt_amp = (($fmtp + 16) & 4294967295);
					var $sound_addr199 = (($phdata + 68) & 4294967295);
					var $arrayidx200 = (($sound_addr199) & 4294967295);
					var $fmt_addr201 = (($fmtp + 8) & 4294967295);
					var $sound_param202 = (($phdata + 88) & 4294967295);
					var $arrayidx203 = (($sound_param202) & 4294967295);
					var $fmt_amp204 = (($fmtp + 16) & 4294967295);
					var $sound_addr205 = (($phdata + 68) & 4294967295);
					var $arrayidx206 = (($sound_addr205 + 16) & 4294967295);
					var $wav_addr = (($fmtp + 28) & 4294967295);
					var $sound_param207 = (($phdata + 88) & 4294967295);
					var $arrayidx208 = (($sound_param207 + 16) & 4294967295);
					var $wav_amp = (($fmtp + 32) & 4294967295);
					var $9 = $fmtp;
					var $pd_param = (($phdata + 4) & 4294967295);
					var $arrayidx290 = (($pd_param + 40) & 4294967295);
					var $std_length = (($fmtp + 44) & 4294967295);
					var $sound_addr291 = (($phdata + 68) & 4294967295);
					var $arrayidx292 = (($sound_addr291) & 4294967295);
					var $fmt_addr293 = (($fmtp + 8) & 4294967295);
					var $sound_param294 = (($phdata + 88) & 4294967295);
					var $arrayidx295 = (($sound_param294) & 4294967295);
					var $fmt_amp296 = (($fmtp + 16) & 4294967295);
					var $sound_addr297 = (($phdata + 68) & 4294967295);
					var $arrayidx298 = (($sound_addr297 + 16) & 4294967295);
					var $wav_addr299 = (($fmtp + 28) & 4294967295);
					var $sound_param300 = (($phdata + 88) & 4294967295);
					var $arrayidx301 = (($sound_param300 + 16) & 4294967295);
					var $wav_amp302 = (($fmtp + 32) & 4294967295);
					var $10 = $fmtp;
					var $pd_param334 = (($phdata + 4) & 4294967295);
					var $arrayidx335 = (($pd_param334 + 40) & 4294967295);
					var $std_length337 = (($fmtp + 44) & 4294967295);
					var $sound_addr338 = (($phdata + 68) & 4294967295);
					var $arrayidx339 = (($sound_addr338) & 4294967295);
					var $fmt_addr340 = (($fmtp + 8) & 4294967295);
					var $sound_param341 = (($phdata + 88) & 4294967295);
					var $arrayidx342 = (($sound_param341) & 4294967295);
					var $fmt_amp343 = (($fmtp + 16) & 4294967295);
					var $11 = $fmtp;
					var $pd_param400 = (($phdata + 4) & 4294967295);
					var $arrayidx401 = (($pd_param400 + 40) & 4294967295);
					var $std_length403 = (($fmtp + 44) & 4294967295);
					var $sound_addr404 = (($phdata + 68) & 4294967295);
					var $arrayidx405 = (($sound_addr404) & 4294967295);
					var $fmt_addr406 = (($fmtp + 8) & 4294967295);
					var $sound_param407 = (($phdata + 88) & 4294967295);
					var $arrayidx408 = (($sound_param407) & 4294967295);
					var $fmt_amp409 = (($fmtp + 16) & 4294967295);
					var $sound_addr410 = (($phdata + 68) & 4294967295);
					var $arrayidx411 = (($sound_addr410 + 16) & 4294967295);
					var $wav_addr412 = (($fmtp + 28) & 4294967295);
					var $sound_param413 = (($phdata + 88) & 4294967295);
					var $arrayidx414 = (($sound_param413 + 16) & 4294967295);
					var $wav_amp415 = (($fmtp + 32) & 4294967295);
					var $12 = $fmtp;
					var $pd_param422 = (($phdata + 4) & 4294967295);
					var $arrayidx423 = (($pd_param422 + 40) & 4294967295);
					var $std_length425 = (($fmtp + 44) & 4294967295);
					var $sound_addr426 = (($phdata + 68) & 4294967295);
					var $arrayidx427 = (($sound_addr426 + 8) & 4294967295);
					var $fmt_addr428 = (($fmtp + 8) & 4294967295);
					var $pd_control431 = (($phdata) & 4294967295);
					var $sound_param435 = (($phdata + 88) & 4294967295);
					var $arrayidx436 = (($sound_param435 + 8) & 4294967295);
					var $fmt_length = (($fmtp + 12) & 4294967295);
					var $fmt_addr455 = (($fmtp + 8) & 4294967295);
					var $use_vowelin = (($fmtp + 4) & 4294967295);
					var $fmt_control458 = (($fmtp) & 4294967295);
					var $sound_addr459 = (($phdata + 68) & 4294967295);
					var $arrayidx460 = (($sound_addr459) & 4294967295);
					var $fmt_addr461 = (($fmtp + 8) & 4294967295);
					var $sound_param463 = (($phdata + 88) & 4294967295);
					var $arrayidx464 = (($sound_param463) & 4294967295);
					var $fmt_amp465 = (($fmtp + 16) & 4294967295);
					var $pitch_env474 = (($phdata_tone + 124) & 4294967295);
					var $amp_env476 = (($phdata_tone + 128) & 4294967295);
					var $amp_env479 = (($phdata_tone + 128) & 4294967295);
					var $sound_addr542 = (($phdata + 68) & 4294967295);
					var $arrayidx543 = (($sound_addr542) & 4294967295);
					var $fmt_addr544 = (($fmtp + 8) & 4294967295);
					var $sound_param545 = (($phdata + 88) & 4294967295);
					var $arrayidx546 = (($sound_param545) & 4294967295);
					var $fmt_amp547 = (($fmtp + 16) & 4294967295);
					var $transition0548 = (($fmtp + 36) & 4294967295);
					var $transition1549 = (($fmtp + 40) & 4294967295);
					var $sound_addr550 = (($phdata + 68) & 4294967295);
					var $arrayidx551 = (($sound_addr550 + 12) & 4294967295);
					var $fmt2_addr = (($fmtp + 20) & 4294967295);
					var $sound_param554 = (($phdata + 88) & 4294967295);
					var $arrayidx555 = (($sound_param554 + 12) & 4294967295);
					var $fmt2_lenadj556 = (($fmtp + 24) & 4294967295);
					var $fmt2_lenadj562 = (($fmtp + 24) & 4294967295);
					var $use_vowelin563 = (($fmtp + 4) & 4294967295);
					var $vowel_transition564 = (($phdata_next + 108) & 4294967295);
					var $arrayidx565 = (($vowel_transition564 + 8) & 4294967295);
					var $transition0566 = (($fmtp + 36) & 4294967295);
					var $vowel_transition567 = (($phdata_next + 108) & 4294967295);
					var $arrayidx568 = (($vowel_transition567 + 12) & 4294967295);
					var $transition1569 = (($fmtp + 40) & 4294967295);
					var $sound_addr570 = (($phdata_next + 68) & 4294967295);
					var $arrayidx571 = (($sound_addr570 + 12) & 4294967295);
					var $fmt2_addr572 = (($fmtp + 20) & 4294967295);
					var $sound_param575 = (($phdata_next + 88) & 4294967295);
					var $arrayidx576 = (($sound_param575 + 12) & 4294967295);
					var $fmt2_lenadj577 = (($fmtp + 24) & 4294967295);
					var $sound_addr442 = (($phdata_prev + 68) & 4294967295);
					var $arrayidx443 = (($sound_addr442 + 8) & 4294967295);
					var $fmt_addr444 = (($fmtp + 8) & 4294967295);
					var $sound_param447 = (($phdata_prev + 88) & 4294967295);
					var $arrayidx448 = (($sound_param447 + 8) & 4294967295);
					var $fmt2_lenadj = (($fmtp + 24) & 4294967295);
					var $vowel_transition = (($phdata_prev + 108) & 4294967295);
					var $arrayidx450 = (($vowel_transition) & 4294967295);
					var $transition0 = (($fmtp + 36) & 4294967295);
					var $vowel_transition451 = (($phdata_prev + 108) & 4294967295);
					var $arrayidx452 = (($vowel_transition451 + 4) & 4294967295);
					var $transition1 = (($fmtp + 40) & 4294967295);;
					$while_cond$11: while (1) {
						var $13 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)];
						var $14 = $n_ph_addr;
						var $15 = HEAP32[(($14) >> 2)];
						var $cmp6 = ((($13)) | 0) < ((($15)) | 0);
						if (!($cmp6)) {
							__label__ = 134;
							break $while_cond$11;
						}
						var $16 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)];
						var $17 = $phoneme_list_addr;
						var $arrayidx = (($17 + 24 * $16) & 4294967295);
						$p = $arrayidx;
						var $18 = $p;
						var $type = (($18 + 15) & 4294967295);
						var $19 = HEAPU8[($type)];
						var $conv7 = ((($19)) & 255);
						var $cmp8 = ((($conv7)) | 0) == 0;
						if ($cmp8) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							$free_min = 5;;
						} else if (__label__ == 10) {
							var $20 = $p;
							var $type10 = (($20 + 15) & 4294967295);
							var $21 = HEAPU8[($type10)];
							var $conv11 = ((($21)) & 255);
							var $cmp12 = ((($conv11)) | 0) != 2;
							if ($cmp12) {
								__label__ = 11;;
							} else {
								__label__ = 12;;
							}
							if (__label__ == 11) {
								$free_min = 10;;
							} else if (__label__ == 12) {
								$free_min = 22;;
							}
						}
						var $call17 = __Z9WcmdqFreev();
						var $22 = $free_min;
						var $cmp18 = ((($call17)) | 0) <= ((($22)) | 0);
						if ($cmp18) {
							__label__ = 14;
							break $while_cond$11;
						}
						var $23 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)];
						var $sub = ((($23) - 1) & 4294967295);
						var $24 = $phoneme_list_addr;
						var $arrayidx21 = (($24 + 24 * $sub) & 4294967295);
						$prev = $arrayidx21;
						var $25 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)];
						var $add = ((($25) + 1) & 4294967295);
						var $26 = $phoneme_list_addr;
						var $arrayidx22 = (($26 + 24 * $add) & 4294967295);
						$next = $arrayidx22;
						var $27 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)];
						var $add23 = ((($27) + 2) & 4294967295);
						var $28 = $phoneme_list_addr;
						var $arrayidx24 = (($28 + 24 * $add23) & 4294967295);
						$next2 = $arrayidx24;
						var $29 = $p;
						var $synthflags = (($29 + 4) & 4294967295);
						var $30 = HEAPU16[(($synthflags) >> 1)];
						var $conv25 = ((($30)) & 65535);
						var $and = ($conv25) & 2;
						var $tobool26 = ((($and)) | 0) != 0;
						if ($tobool26) {
							__label__ = 16;;
						} else {
							__label__ = 17;;
						}
						if (__label__ == 16) {
							var $31 = $p;
							var $sourceix = (($31 + 6) & 4294967295);
							var $32 = HEAPU16[(($sourceix) >> 1)];
							var $conv28 = ((($32)) & 65535);
							__Z10DoEmbeddedPii(__ZZ8GenerateP12PHONEME_LISTPiiE11embedded_ix, $conv28);;
						}
						var $33 = $p;
						var $newword = (($33 + 19) & 4294967295);
						var $34 = HEAP8[($newword)];
						var $tobool30 = (tempInt = (($34)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
						if ($tobool30) {
							__label__ = 18;;
						} else {
							__label__ = 26;;
						}
						$if_then31$$if_end63$25: do {
							if (__label__ == 18) {
								var $35 = $p;
								var $type32 = (($35 + 15) & 4294967295);
								var $36 = HEAPU8[($type32)];
								var $conv33 = ((($36)) & 255);
								var $cmp34 = ((($conv33)) | 0) == 2;
								if ($cmp34) {
									__label__ = 19;;
								} else {
									__label__ = 20;;
								}
								$land_lhs_true$$lor_lhs_false$27: do {
									if (__label__ == 19) {
										var $37 = HEAP32[((_translator) >> 2)];
										var $langopts = (($37) & 4294967295);
										var $param = (($langopts + 24) & 4294967295);
										var $arrayidx35 = (($param + 32) & 4294967295);
										var $38 = HEAP32[(($arrayidx35) >> 2)];
										var $and36 = ($38) & 1;
										var $tobool37 = ((($and36)) | 0) != 0;
										if ($tobool37) {
											__label__ = 22;
											break $land_lhs_true$$lor_lhs_false$27;
										} else {
											__label__ = 20;
											break $land_lhs_true$$lor_lhs_false$27;
										}
									}
								} while (0);
								$if_end43$$lor_lhs_false$29: do {
									if (__label__ == 20) {
										var $39 = $p;
										var $ph38 = (($39 + 8) & 4294967295);
										var $40 = HEAP32[(($ph38) >> 2)];
										var $phflags = (($40 + 4) & 4294967295);
										var $41 = HEAP32[(($phflags) >> 2)];
										var $and39 = ($41) & 16777216;
										var $tobool40 = ((($and39)) | 0) != 0;
										if ($tobool40) {
											__label__ = 22;
											break $if_end43$$lor_lhs_false$29;
										}
										HEAP32[((__ZL10last_frame) >> 2)] = 0;;
									}
								} while (0);
								var $42 = $p;
								var $sourceix44 = (($42 + 6) & 4294967295);
								var $43 = HEAPU16[(($sourceix44) >> 1)];
								var $conv45 = ((($43)) & 65535);
								var $and46 = ($conv45) & 2047;
								var $44 = HEAP32[((_clause_start_char) >> 2)];
								var $add47 = ((($and46) + ($44)) & 4294967295);
								HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE8sourceix) >> 2)] = $add47;
								var $45 = $p;
								var $newword48 = (($45 + 19) & 4294967295);
								var $46 = HEAPU8[($newword48)];
								var $conv49 = ((($46)) & 255);
								var $and50 = ($conv49) & 4;
								var $tobool51 = ((($and50)) | 0) != 0;
								if ($tobool51) {
									__label__ = 23;;
								} else {
									__label__ = 24;;
								}
								if (__label__ == 23) {
									var $47 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE8sourceix) >> 2)];
									var $48 = HEAP32[((_count_sentences) >> 2)];
									__Z8DoMarkeriiii(2, $47, 0, $48);;
								}
								var $49 = $p;
								var $newword54 = (($49 + 19) & 4294967295);
								var $50 = HEAPU8[($newword54)];
								var $conv55 = ((($50)) & 255);
								var $and56 = ($conv55) & 1;
								var $tobool57 = ((($and56)) | 0) != 0;
								if (!($tobool57)) {
									__label__ = 26;
									break $if_then31$$if_end63$25;
								}
								var $51 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE8sourceix) >> 2)];
								var $52 = $p;
								var $sourceix59 = (($52 + 6) & 4294967295);
								var $53 = HEAPU16[(($sourceix59) >> 1)];
								var $conv60 = ((($53)) & 65535);
								var $shr = ($conv60) >> 11;
								var $54 = HEAP32[((_clause_start_word) >> 2)];
								var $55 = HEAPU32[((__ZZ8GenerateP12PHONEME_LISTPiiE10word_count) >> 2)];
								var $inc = ((($55) + 1) & 4294967295);
								HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE10word_count) >> 2)] = $inc;
								var $add61 = ((($55) + ($54)) & 4294967295);
								__Z8DoMarkeriiii(1, $51, $shr, $add61);;
							}
						} while (0);
						__ZL12EndAmplitudev();
						var $56 = $p;
						var $prepause = (($56 + 16) & 4294967295);
						var $57 = HEAPU8[($prepause)];
						var $conv64 = ((($57)) & 255);
						var $cmp65 = ((($conv64)) | 0) > 0;
						if ($cmp65) {
							__label__ = 27;;
						} else {
							__label__ = 28;;
						}
						if (__label__ == 27) {
							var $58 = $p;
							var $prepause67 = (($58 + 16) & 4294967295);
							var $59 = HEAPU8[($prepause67)];
							var $conv68 = ((($59)) & 255);
							__ZL7DoPauseii($conv68, 1);;
						}
						var $60 = HEAP32[((_option_phoneme_events) >> 2)];
						var $tobool70 = ((($60)) | 0) != 0;
						if ($tobool70) {
							__label__ = 29;;
						} else {
							__label__ = 31;;
						}
						$land_lhs_true71$$if_end77$41: do {
							if (__label__ == 29) {
								var $61 = $p;
								var $type72 = (($61 + 15) & 4294967295);
								var $62 = HEAPU8[($type72)];
								var $conv73 = ((($62)) & 255);
								var $cmp74 = ((($conv73)) | 0) != 2;
								if (!($cmp74)) {
									__label__ = 31;
									break $land_lhs_true71$$if_end77$41;
								}
								var $63 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE8sourceix) >> 2)];
								var $64 = $p;
								var $ph76 = (($64 + 8) & 4294967295);
								var $65 = HEAP32[(($ph76) >> 2)];
								var $mnemonic = (($65) & 4294967295);
								var $66 = HEAP32[(($mnemonic) >> 2)];
								__Z8DoMarkeriiii(7, $63, 0, $66);;
							}
						} while (0);
						var $67 = $p;
						var $type78 = (($67 + 15) & 4294967295);
						var $68 = HEAPU8[($type78)];
						var $conv79 = ((($68)) & 255);
						if ($conv79 == 0) {
							__label__ = 32;;
						} else if ($conv79 == 4) {
							__label__ = 33;;
						} else if ($conv79 == 6) {
							__label__ = 41;;
						} else if ($conv79 == 5) {
							__label__ = 44;;
						} else if ($conv79 == 7) {
							__label__ = 67;;
						} else if ($conv79 == 8) {
							__label__ = 81;;
						} else if ($conv79 == 3) {
							__label__ = 91;;
						} else if ($conv79 == 2) {
							__label__ = 100;;
						} else {
							__label__ = 133;;
						}
						$sw_epilog$$sw_bb$$sw_bb81$$sw_bb105$$sw_bb118$$sw_bb229$$sw_bb313$$sw_bb367$$sw_bb418$45: do {
							if (__label__ == 32) {
								var $69 = $p;
								var $length = (($69 + 12) & 4294967295);
								var $70 = HEAP16[(($length) >> 1)];
								var $conv80 = (tempInt = (($70)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								__ZL7DoPauseii($conv80, 0);;
							} else if (__label__ == 33) {
								$released = 0;
								var $71 = $next;
								var $type82 = (($71 + 15) & 4294967295);
								var $72 = HEAPU8[($type82)];
								var $conv83 = ((($72)) & 255);
								var $cmp84 = ((($conv83)) | 0) == 2;
								if ($cmp84) {
									__label__ = 34;;
								} else {
									__label__ = 35;;
								}
								$if_then85$$if_else86$48: do {
									if (__label__ == 34) {
										$released = 1;;
									} else if (__label__ == 35) {
										var $73 = $next;
										var $newword87 = (($73 + 19) & 4294967295);
										var $74 = HEAP8[($newword87)];
										var $tobool88 = (tempInt = (($74)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
										if ($tobool88) {
											__label__ = 38;;
										} else {
											__label__ = 36;;
										}
										$if_end96$$if_then89$51: do {
											if (__label__ == 36) {
												var $75 = $next;
												var $type90 = (($75 + 15) & 4294967295);
												var $76 = HEAPU8[($type90)];
												var $conv91 = ((($76)) & 255);
												var $cmp92 = ((($conv91)) | 0) == 3;
												if (!($cmp92)) {
													__label__ = 38;
													break $if_end96$$if_then89$51;
												}
												$released = 1;
												__label__ = 40;
												break $if_then85$$if_else86$48;
											}
										} while (0);
										var $_pr = $released;
										var $cmp97 = ((($_pr)) | 0) == 0;
										if (!($cmp97)) {
											__label__ = 40;
											break $if_then85$$if_else86$48;
										}
										var $77 = $p;
										var $synthflags99 = (($77 + 4) & 4294967295);
										var $78 = HEAPU16[(($synthflags99) >> 1)];
										var $conv100 = ((($78)) & 65535);
										var $or = ($conv100) | 8192;
										var $conv101 = ((($or)) & 65535);
										HEAP16[(($synthflags99) >> 1)] = $conv101;;
									}
								} while (0);
								var $79 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $79, $phdata);
								var $80 = HEAP32[(($pd_control) >> 2)];
								var $or103 = ($80) | 4;
								HEAP32[(($pd_control) >> 2)] = $or103;
								var $call104 = __Z9DoSample3P12PHONEME_DATAii($phdata, 0, 0);;
							} else if (__label__ == 41) {
								var $81 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $81, $phdata);
								var $82 = $p;
								var $synthflags106 = (($82 + 4) & 4294967295);
								var $83 = HEAPU16[(($synthflags106) >> 1)];
								var $conv107 = ((($83)) & 65535);
								var $and108 = ($conv107) & 8;
								var $tobool109 = ((($and108)) | 0) != 0;
								if ($tobool109) {
									__label__ = 42;;
								} else {
									__label__ = 43;;
								}
								if (__label__ == 42) {
									var $84 = $p;
									var $length111 = (($84 + 12) & 4294967295);
									var $85 = HEAP16[(($length111) >> 1)];
									var $conv112 = (tempInt = (($85)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $call113 = __Z9DoSample3P12PHONEME_DATAii($phdata, $conv112, 0);;
								}
								var $86 = $p;
								var $length115 = (($86 + 12) & 4294967295);
								var $87 = HEAP16[(($length115) >> 1)];
								var $conv116 = (tempInt = (($87)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $call117 = __Z9DoSample3P12PHONEME_DATAii($phdata, $conv116, 0);;
							} else if (__label__ == 44) {
								var $88 = $p;
								var $ph119 = (($88 + 8) & 4294967295);
								var $89 = HEAP32[(($ph119) >> 2)];
								$ph = $89;
								var $dest$, $stop$, $stop4$, $fast$, $value4$;
								$dest$ = $8;
								$stop$ = $dest$ + 48;
								$value4$ = 0;
								if ($value4$ < 0) $value4$ += 256;
								$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
								while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								}
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($dest$ < $stop4$) {;;;;;;;
									HEAP32[$dest$++] = $value4$;
								}
								$dest$ <<= 2;
								while ($dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								};
								HEAP32[(($fmt_control) >> 2)] = 4;
								$pre_voiced = 0;
								var $90 = $next;
								var $type120 = (($90 + 15) & 4294967295);
								var $91 = HEAPU8[($type120)];
								var $conv121 = ((($91)) & 255);
								var $cmp122 = ((($conv121)) | 0) == 2;
								if ($cmp122) {
									__label__ = 45;;
								} else {
									__label__ = 46;;
								}
								$if_then123$$if_else128$62: do {
									if (__label__ == 45) {
										var $92 = $p;
										var $amp = (($92 + 18) & 4294967295);
										var $93 = HEAPU8[($amp)];
										var $conv124 = ((($93)) & 255);
										__ZL11DoAmplitudeiPh($conv124, 0);
										var $94 = $p;
										var $env = (($94 + 14) & 4294967295);
										var $95 = HEAPU8[($env)];
										var $idxprom = ((($95)) & 255);
										var $arrayidx125 = ((_envelope_data + $idxprom * 4) & 4294967295);
										var $96 = HEAP32[(($arrayidx125) >> 2)];
										var $97 = $p;
										var $pitch1 = (($97 + 20) & 4294967295);
										var $98 = HEAPU8[($pitch1)];
										var $conv126 = ((($98)) & 255);
										var $99 = $p;
										var $pitch2 = (($99 + 21) & 4294967295);
										var $100 = HEAPU8[($pitch2)];
										var $conv127 = ((($100)) & 255);
										__ZL7DoPitchPhii($96, $conv126, $conv127);
										$pre_voiced = 1;;
									} else if (__label__ == 46) {
										var $101 = $next;
										var $type129 = (($101 + 15) & 4294967295);
										var $102 = HEAPU8[($type129)];
										var $conv130 = ((($102)) & 255);
										var $cmp131 = ((($conv130)) | 0) == 3;
										if ($cmp131) {
											__label__ = 47;;
										} else {
											__label__ = 49;;
										}
										$land_lhs_true132$$if_else145$65: do {
											if (__label__ == 47) {
												var $103 = $next;
												var $newword133 = (($103 + 19) & 4294967295);
												var $104 = HEAP8[($newword133)];
												var $tobool134 = (tempInt = (($104)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
												if ($tobool134) {
													__label__ = 49;
													break $land_lhs_true132$$if_else145$65;
												}
												var $105 = $next;
												var $amp136 = (($105 + 18) & 4294967295);
												var $106 = HEAPU8[($amp136)];
												var $conv137 = ((($106)) & 255);
												__ZL11DoAmplitudeiPh($conv137, 0);
												var $107 = $next;
												var $env138 = (($107 + 14) & 4294967295);
												var $108 = HEAPU8[($env138)];
												var $idxprom139 = ((($108)) & 255);
												var $arrayidx140 = ((_envelope_data + $idxprom139 * 4) & 4294967295);
												var $109 = HEAP32[(($arrayidx140) >> 2)];
												var $110 = $next;
												var $pitch1141 = (($110 + 20) & 4294967295);
												var $111 = HEAPU8[($pitch1141)];
												var $conv142 = ((($111)) & 255);
												var $112 = $next;
												var $pitch2143 = (($112 + 21) & 4294967295);
												var $113 = HEAPU8[($pitch2143)];
												var $conv144 = ((($113)) & 255);
												__ZL7DoPitchPhii($109, $conv142, $conv144);
												$pre_voiced = 1;
												__label__ = 51;
												break $if_then123$$if_else128$62;
											}
										} while (0);
										var $114 = HEAP32[((__ZL14last_pitch_cmd) >> 2)];
										var $cmp146 = ((($114)) | 0) < 0;
										if (!($cmp146)) {
											__label__ = 51;
											break $if_then123$$if_else128$62;
										}
										var $115 = $next;
										var $amp148 = (($115 + 18) & 4294967295);
										var $116 = HEAPU8[($amp148)];
										var $conv149 = ((($116)) & 255);
										__ZL11DoAmplitudeiPh($conv149, 0);
										var $117 = $p;
										var $env150 = (($117 + 14) & 4294967295);
										var $118 = HEAPU8[($env150)];
										var $idxprom151 = ((($118)) & 255);
										var $arrayidx152 = ((_envelope_data + $idxprom151 * 4) & 4294967295);
										var $119 = HEAP32[(($arrayidx152) >> 2)];
										var $120 = $p;
										var $pitch1153 = (($120 + 20) & 4294967295);
										var $121 = HEAPU8[($pitch1153)];
										var $conv154 = ((($121)) & 255);
										var $122 = $p;
										var $pitch2155 = (($122 + 21) & 4294967295);
										var $123 = HEAPU8[($pitch2155)];
										var $conv156 = ((($123)) & 255);
										__ZL7DoPitchPhii($119, $conv154, $conv156);;
									}
								} while (0);
								var $124 = $prev;
								var $type160 = (($124 + 15) & 4294967295);
								var $125 = HEAPU8[($type160)];
								var $conv161 = ((($125)) & 255);
								var $cmp162 = ((($conv161)) | 0) == 2;
								if ($cmp162) {
									__label__ = 54;;
								} else {
									__label__ = 52;;
								}
								$if_then172$$lor_lhs_false163$71: do {
									if (__label__ == 52) {
										var $126 = $prev;
										var $ph164 = (($126 + 8) & 4294967295);
										var $127 = HEAP32[(($ph164) >> 2)];
										var $phflags165 = (($127 + 4) & 4294967295);
										var $128 = HEAP32[(($phflags165) >> 2)];
										var $and166 = ($128) & 256;
										var $tobool167 = ((($and166)) | 0) != 0;
										if ($tobool167) {
											__label__ = 54;
											break $if_then172$$lor_lhs_false163$71;
										}
										var $129 = $ph;
										var $phflags169 = (($129 + 4) & 4294967295);
										var $130 = HEAP32[(($phflags169) >> 2)];
										var $and170 = ($130) & 33554432;
										var $tobool171 = ((($and170)) | 0) != 0;
										if ($tobool171) {
											__label__ = 54;
											break $if_then172$$lor_lhs_false163$71;
										}
										var $140 = $p;
										var $synthflags184 = (($140 + 4) & 4294967295);
										var $141 = HEAPU16[(($synthflags184) >> 1)];
										var $conv185 = ((($141)) & 65535);
										var $and186 = ($conv185) & 8;
										var $tobool187 = ((($and186)) | 0) != 0;
										if (!($tobool187)) {
											__label__ = 58;
											break $if_then172$$lor_lhs_false163$71;
										}
										__ZL7DoPauseii(50, 0);
										__label__ = 58;
										break $if_then172$$lor_lhs_false163$71;
									}
								} while (0);
								$if_then172$$if_end190$76: do {
									if (__label__ == 54) {
										var $131 = $p;
										__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 1, $131, $phdata);
										var $132 = HEAP32[(($arrayidx173) >> 2)];
										HEAP32[(($fmt_addr) >> 2)] = $132;
										var $133 = HEAP32[(($arrayidx174) >> 2)];
										HEAP32[(($fmt_amp) >> 2)] = $133;
										var $134 = $ph;
										var $135 = $p;
										var $call175 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($134, 0, $fmtp, $135, 0);
										var $136 = $p;
										var $synthflags176 = (($136 + 4) & 4294967295);
										var $137 = HEAPU16[(($synthflags176) >> 1)];
										var $conv177 = ((($137)) & 65535);
										var $and178 = ($conv177) & 8;
										var $tobool179 = ((($and178)) | 0) != 0;
										if (!($tobool179)) {
											__label__ = 58;
											break $if_then172$$if_end190$76;
										}
										__ZL7DoPauseii(25, 1);
										var $138 = $ph;
										var $139 = $p;
										var $call181 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($138, 0, $fmtp, $139, 0);;
									}
								} while (0);
								var $142 = $pre_voiced;
								var $tobool191 = ((($142)) | 0) != 0;
								if ($tobool191) {
									__label__ = 59;;
								} else {
									__label__ = 60;;
								}
								if (__label__ == 59) {
									__ZL13StartSyllablev();;
								} else if (__label__ == 60) {
									var $143 = $p;
									var $synthflags194 = (($143 + 4) & 4294967295);
									var $144 = HEAPU16[(($synthflags194) >> 1)];
									var $conv195 = ((($144)) & 65535);
									var $or196 = ($conv195) | 8192;
									var $conv197 = ((($or196)) & 65535);
									HEAP16[(($synthflags194) >> 1)] = $conv197;;
								}
								var $145 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $145, $phdata);
								var $146 = HEAP32[(($arrayidx200) >> 2)];
								HEAP32[(($fmt_addr201) >> 2)] = $146;
								var $147 = HEAP32[(($arrayidx203) >> 2)];
								HEAP32[(($fmt_amp204) >> 2)] = $147;
								var $148 = HEAP32[(($arrayidx206) >> 2)];
								HEAP32[(($wav_addr) >> 2)] = $148;
								var $149 = HEAP32[(($arrayidx208) >> 2)];
								HEAP32[(($wav_amp) >> 2)] = $149;
								var $150 = $ph;
								var $151 = $p;
								var $call209 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($150, 0, $fmtp, $151, 0);
								var $152 = $p;
								var $newword210 = (($152 + 19) & 4294967295);
								var $153 = HEAPU8[($newword210)];
								var $conv211 = ((($153)) & 255);
								var $cmp212 = ((($conv211)) | 0) == 0;
								if (!($cmp212)) {
									__label__ = 133;
									break $sw_epilog$$sw_bb$$sw_bb81$$sw_bb105$$sw_bb118$$sw_bb229$$sw_bb313$$sw_bb367$$sw_bb418$45;
								}
								var $154 = $next2;
								var $newword214 = (($154 + 19) & 4294967295);
								var $155 = HEAPU8[($newword214)];
								var $conv215 = ((($155)) & 255);
								var $cmp216 = ((($conv215)) | 0) == 0;
								if (!($cmp216)) {
									__label__ = 133;
									break $sw_epilog$$sw_bb$$sw_bb81$$sw_bb105$$sw_bb118$$sw_bb229$$sw_bb313$$sw_bb367$$sw_bb418$45;
								}
								var $156 = $next;
								var $type218 = (($156 + 15) & 4294967295);
								var $157 = HEAPU8[($type218)];
								var $conv219 = ((($157)) & 255);
								var $cmp220 = ((($conv219)) | 0) == 7;
								if ($cmp220) {
									__label__ = 64;;
								} else {
									__label__ = 65;;
								}
								if (__label__ == 64) {
									__ZL7DoPauseii(20, 0);;
								}
								var $158 = $next;
								var $type223 = (($158 + 15) & 4294967295);
								var $159 = HEAPU8[($type223)];
								var $conv224 = ((($159)) & 255);
								var $cmp225 = ((($conv224)) | 0) == 6;
								if (!($cmp225)) {
									__label__ = 133;
									break $sw_epilog$$sw_bb$$sw_bb81$$sw_bb105$$sw_bb118$$sw_bb229$$sw_bb313$$sw_bb367$$sw_bb418$45;
								}
								__ZL7DoPauseii(12, 0);;
							} else if (__label__ == 67) {
								var $160 = $next;
								var $type230 = (($160 + 15) & 4294967295);
								var $161 = HEAPU8[($type230)];
								var $conv231 = ((($161)) & 255);
								var $cmp232 = ((($conv231)) | 0) == 2;
								if ($cmp232) {
									__label__ = 68;;
								} else {
									__label__ = 69;;
								}
								$if_then233$$if_else243$91: do {
									if (__label__ == 68) {
										var $162 = $p;
										var $amp234 = (($162 + 18) & 4294967295);
										var $163 = HEAPU8[($amp234)];
										var $conv235 = ((($163)) & 255);
										__ZL11DoAmplitudeiPh($conv235, 0);
										var $164 = $p;
										var $env236 = (($164 + 14) & 4294967295);
										var $165 = HEAPU8[($env236)];
										var $idxprom237 = ((($165)) & 255);
										var $arrayidx238 = ((_envelope_data + $idxprom237 * 4) & 4294967295);
										var $166 = HEAP32[(($arrayidx238) >> 2)];
										var $167 = $p;
										var $pitch1239 = (($167 + 20) & 4294967295);
										var $168 = HEAPU8[($pitch1239)];
										var $conv240 = ((($168)) & 255);
										var $169 = $p;
										var $pitch2241 = (($169 + 21) & 4294967295);
										var $170 = HEAPU8[($pitch2241)];
										var $conv242 = ((($170)) & 255);
										__ZL7DoPitchPhii($166, $conv240, $conv242);;
									} else if (__label__ == 69) {
										var $171 = $next;
										var $type244 = (($171 + 15) & 4294967295);
										var $172 = HEAPU8[($type244)];
										var $conv245 = ((($172)) & 255);
										var $cmp246 = ((($conv245)) | 0) == 3;
										if ($cmp246) {
											__label__ = 70;;
										} else {
											__label__ = 71;;
										}
										if (__label__ == 70) {
											var $173 = $next;
											var $amp248 = (($173 + 18) & 4294967295);
											var $174 = HEAPU8[($amp248)];
											var $conv249 = ((($174)) & 255);
											__ZL11DoAmplitudeiPh($conv249, 0);
											var $175 = $next;
											var $env250 = (($175 + 14) & 4294967295);
											var $176 = HEAPU8[($env250)];
											var $idxprom251 = ((($176)) & 255);
											var $arrayidx252 = ((_envelope_data + $idxprom251 * 4) & 4294967295);
											var $177 = HEAP32[(($arrayidx252) >> 2)];
											var $178 = $next;
											var $pitch1253 = (($178 + 20) & 4294967295);
											var $179 = HEAPU8[($pitch1253)];
											var $conv254 = ((($179)) & 255);
											var $180 = $next;
											var $pitch2255 = (($180 + 21) & 4294967295);
											var $181 = HEAPU8[($pitch2255)];
											var $conv256 = ((($181)) & 255);
											__ZL7DoPitchPhii($177, $conv254, $conv256);;
										} else if (__label__ == 71) {
											var $182 = HEAP32[((__ZL14last_pitch_cmd) >> 2)];
											var $cmp258 = ((($182)) | 0) < 0;
											if (!($cmp258)) {
												__label__ = 73;
												break $if_then233$$if_else243$91;
											}
											var $183 = $p;
											var $amp260 = (($183 + 18) & 4294967295);
											var $184 = HEAPU8[($amp260)];
											var $conv261 = ((($184)) & 255);
											__ZL11DoAmplitudeiPh($conv261, 0);
											var $185 = $p;
											var $env262 = (($185 + 14) & 4294967295);
											var $186 = HEAPU8[($env262)];
											var $idxprom263 = ((($186)) & 255);
											var $arrayidx264 = ((_envelope_data + $idxprom263 * 4) & 4294967295);
											var $187 = HEAP32[(($arrayidx264) >> 2)];
											var $188 = $p;
											var $pitch1265 = (($188 + 20) & 4294967295);
											var $189 = HEAPU8[($pitch1265)];
											var $conv266 = ((($189)) & 255);
											var $190 = $p;
											var $pitch2267 = (($190 + 21) & 4294967295);
											var $191 = HEAPU8[($pitch2267)];
											var $conv268 = ((($191)) & 255);
											__ZL7DoPitchPhii($187, $conv266, $conv268);;
										}
									}
								} while (0);
								var $192 = $next;
								var $type272 = (($192 + 15) & 4294967295);
								var $193 = HEAPU8[($type272)];
								var $conv273 = ((($193)) & 255);
								var $cmp274 = ((($conv273)) | 0) == 2;
								if ($cmp274) {
									__label__ = 76;;
								} else {
									__label__ = 74;;
								}
								$if_then283$$lor_lhs_false275$99: do {
									if (__label__ == 74) {
										var $194 = $next;
										var $type276 = (($194 + 15) & 4294967295);
										var $195 = HEAPU8[($type276)];
										var $conv277 = ((($195)) & 255);
										var $cmp278 = ((($conv277)) | 0) == 3;
										if ($cmp278) {
											__label__ = 75;;
										} else {
											__label__ = 77;;
										}
										if (__label__ == 75) {
											var $196 = $next;
											var $newword280 = (($196 + 19) & 4294967295);
											var $197 = HEAPU8[($newword280)];
											var $conv281 = ((($197)) & 255);
											var $cmp282 = ((($conv281)) | 0) == 0;
											if ($cmp282) {
												__label__ = 76;
												break $if_then283$$lor_lhs_false275$99;
											}
										}
										var $198 = $p;
										var $synthflags285 = (($198 + 4) & 4294967295);
										var $199 = HEAPU16[(($synthflags285) >> 1)];
										var $conv286 = ((($199)) & 65535);
										var $or287 = ($conv286) | 8192;
										var $conv288 = ((($or287)) & 65535);
										HEAP16[(($synthflags285) >> 1)] = $conv288;
										__label__ = 78;
										break $if_then283$$lor_lhs_false275$99;
									}
								} while (0);
								if (__label__ == 76) {
									__ZL13StartSyllablev();;
								}
								var $200 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $200, $phdata);
								var $dest$, $stop$, $stop4$, $fast$, $value4$;
								$dest$ = $9;
								$stop$ = $dest$ + 48;
								$value4$ = 0;
								if ($value4$ < 0) $value4$ += 256;
								$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
								while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								}
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($dest$ < $stop4$) {;;;;;;;
									HEAP32[$dest$++] = $value4$;
								}
								$dest$ <<= 2;
								while ($dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								};
								var $201 = HEAP32[(($arrayidx290) >> 2)];
								var $mul = ((($201) * 2) & 4294967295);
								HEAP32[(($std_length) >> 2)] = $mul;
								var $202 = HEAP32[(($arrayidx292) >> 2)];
								HEAP32[(($fmt_addr293) >> 2)] = $202;
								var $203 = HEAP32[(($arrayidx295) >> 2)];
								HEAP32[(($fmt_amp296) >> 2)] = $203;
								var $204 = HEAP32[(($arrayidx298) >> 2)];
								HEAP32[(($wav_addr299) >> 2)] = $204;
								var $205 = HEAP32[(($arrayidx301) >> 2)];
								HEAP32[(($wav_amp302) >> 2)] = $205;
								var $206 = $p;
								var $synthflags303 = (($206 + 4) & 4294967295);
								var $207 = HEAPU16[(($synthflags303) >> 1)];
								var $conv304 = ((($207)) & 65535);
								var $and305 = ($conv304) & 8;
								var $tobool306 = ((($and305)) | 0) != 0;
								if ($tobool306) {
									__label__ = 79;;
								} else {
									__label__ = 80;;
								}
								if (__label__ == 79) {
									var $208 = $p;
									var $ph308 = (($208 + 8) & 4294967295);
									var $209 = HEAP32[(($ph308) >> 2)];
									var $210 = $p;
									var $call309 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($209, 0, $fmtp, $210, 0);;
								}
								var $211 = $p;
								var $ph311 = (($211 + 8) & 4294967295);
								var $212 = HEAP32[(($ph311) >> 2)];
								var $213 = $p;
								var $call312 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($212, 0, $fmtp, $213, 0);;
							} else if (__label__ == 81) {
								var $dest$, $stop$, $stop4$, $fast$, $value4$;
								$dest$ = $10;
								$stop$ = $dest$ + 48;
								$value4$ = 0;
								if ($value4$ < 0) $value4$ += 256;
								$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
								while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								}
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($dest$ < $stop4$) {;;;;;;;
									HEAP32[$dest$++] = $value4$;
								}
								$dest$ <<= 2;
								while ($dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								};
								var $214 = $p;
								var $synthflags314 = (($214 + 4) & 4294967295);
								var $215 = HEAPU16[(($synthflags314) >> 1)];
								var $conv315 = ((($215)) & 65535);
								var $and316 = ($conv315) & 1;
								var $tobool317 = ((($and316)) | 0) != 0;
								if ($tobool317) {
									__label__ = 83;;
								} else {
									__label__ = 82;;
								}
								if (__label__ == 82) {
									var $216 = $p;
									var $amp319 = (($216 + 18) & 4294967295);
									var $217 = HEAPU8[($amp319)];
									var $conv320 = ((($217)) & 255);
									__ZL11DoAmplitudeiPh($conv320, 0);
									var $218 = $p;
									var $env321 = (($218 + 14) & 4294967295);
									var $219 = HEAPU8[($env321)];
									var $idxprom322 = ((($219)) & 255);
									var $arrayidx323 = ((_envelope_data + $idxprom322 * 4) & 4294967295);
									var $220 = HEAP32[(($arrayidx323) >> 2)];
									var $221 = $p;
									var $pitch1324 = (($221 + 20) & 4294967295);
									var $222 = HEAPU8[($pitch1324)];
									var $conv325 = ((($222)) & 255);
									var $223 = $p;
									var $pitch2326 = (($223 + 21) & 4294967295);
									var $224 = HEAPU8[($pitch2326)];
									var $conv327 = ((($224)) & 255);
									__ZL7DoPitchPhii($220, $conv325, $conv327);;
								}
								var $225 = $prev;
								var $type329 = (($225 + 15) & 4294967295);
								var $226 = HEAPU8[($type329)];
								var $conv330 = ((($226)) & 255);
								var $cmp331 = ((($conv330)) | 0) == 8;
								if ($cmp331) {
									__label__ = 84;;
								} else {
									__label__ = 85;;
								}
								if (__label__ == 84) {
									HEAP32[((__ZL10last_frame) >> 2)] = 0;;
								}
								var $227 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $227, $phdata);
								var $228 = HEAP32[(($arrayidx335) >> 2)];
								var $mul336 = ((($228) * 2) & 4294967295);
								HEAP32[(($std_length337) >> 2)] = $mul336;
								var $229 = HEAP32[(($arrayidx339) >> 2)];
								HEAP32[(($fmt_addr340) >> 2)] = $229;
								var $230 = HEAP32[(($arrayidx342) >> 2)];
								HEAP32[(($fmt_amp343) >> 2)] = $230;
								var $231 = $next;
								var $type344 = (($231 + 15) & 4294967295);
								var $232 = HEAPU8[($type344)];
								var $conv345 = ((($232)) & 255);
								var $cmp346 = ((($conv345)) | 0) == 2;
								if ($cmp346) {
									__label__ = 86;;
								} else {
									__label__ = 87;;
								}
								if (__label__ == 86) {
									__ZL13StartSyllablev();
									var $233 = $p;
									var $ph348 = (($233 + 8) & 4294967295);
									var $234 = HEAP32[(($ph348) >> 2)];
									var $235 = $p;
									var $call349 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($234, 0, $fmtp, $235, 0);;
								} else if (__label__ == 87) {
									var $236 = $prev;
									var $type351 = (($236 + 15) & 4294967295);
									var $237 = HEAPU8[($type351)];
									var $conv352 = ((($237)) & 255);
									var $cmp353 = ((($conv352)) | 0) == 2;
									if ($cmp353) {
										__label__ = 88;;
									} else {
										__label__ = 90;;
									}
									$land_lhs_true354$$if_else362$120: do {
										if (__label__ == 88) {
											var $238 = $p;
											var $synthflags355 = (($238 + 4) & 4294967295);
											var $239 = HEAPU16[(($synthflags355) >> 1)];
											var $conv356 = ((($239)) & 65535);
											var $and357 = ($conv356) & 1;
											var $tobool358 = ((($and357)) | 0) != 0;
											if (!($tobool358)) {
												__label__ = 90;
												break $land_lhs_true354$$if_else362$120;
											}
											var $240 = $p;
											var $ph360 = (($240 + 8) & 4294967295);
											var $241 = HEAP32[(($ph360) >> 2)];
											var $242 = $p;
											var $call361 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($241, 0, $fmtp, $242, 0);
											__label__ = 133;
											break $sw_epilog$$sw_bb$$sw_bb81$$sw_bb105$$sw_bb118$$sw_bb229$$sw_bb313$$sw_bb367$$sw_bb418$45;
										}
									} while (0);
									HEAP32[((__ZL10last_frame) >> 2)] = 0;
									var $243 = $p;
									var $ph363 = (($243 + 8) & 4294967295);
									var $244 = HEAP32[(($ph363) >> 2)];
									var $245 = $p;
									var $call364 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($244, 0, $fmtp, $245, 0);
									HEAP32[((__ZL10last_frame) >> 2)] = 0;;
								}
							} else if (__label__ == 91) {
								var $dest$, $stop$, $stop4$, $fast$, $value4$;
								$dest$ = $11;
								$stop$ = $dest$ + 48;
								$value4$ = 0;
								if ($value4$ < 0) $value4$ += 256;
								$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
								while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								}
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($dest$ < $stop4$) {;;;;;;;
									HEAP32[$dest$++] = $value4$;
								}
								$dest$ <<= 2;
								while ($dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								};
								$modulation = 0;
								var $246 = $p;
								var $ph368 = (($246 + 8) & 4294967295);
								var $247 = HEAP32[(($ph368) >> 2)];
								var $phflags369 = (($247 + 4) & 4294967295);
								var $248 = HEAP32[(($phflags369) >> 2)];
								var $and370 = ($248) & 128;
								var $tobool371 = ((($and370)) | 0) != 0;
								if ($tobool371) {
									__label__ = 92;;
								} else {
									__label__ = 93;;
								}
								if (__label__ == 92) {
									$modulation = 5;;
								}
								var $249 = $prev;
								var $ph374 = (($249 + 8) & 4294967295);
								var $250 = HEAP32[(($ph374) >> 2)];
								$prev_ph = $250;
								var $251 = $p;
								var $synthflags375 = (($251 + 4) & 4294967295);
								var $252 = HEAPU16[(($synthflags375) >> 1)];
								var $conv376 = ((($252)) & 65535);
								var $and377 = ($conv376) & 1;
								var $tobool378 = ((($and377)) | 0) != 0;
								if ($tobool378) {
									__label__ = 95;;
								} else {
									__label__ = 94;;
								}
								if (__label__ == 94) {
									var $253 = $p;
									var $amp380 = (($253 + 18) & 4294967295);
									var $254 = HEAPU8[($amp380)];
									var $conv381 = ((($254)) & 255);
									__ZL11DoAmplitudeiPh($conv381, 0);
									var $255 = $p;
									var $env382 = (($255 + 14) & 4294967295);
									var $256 = HEAPU8[($env382)];
									var $idxprom383 = ((($256)) & 255);
									var $arrayidx384 = ((_envelope_data + $idxprom383 * 4) & 4294967295);
									var $257 = HEAP32[(($arrayidx384) >> 2)];
									var $258 = $p;
									var $pitch1385 = (($258 + 20) & 4294967295);
									var $259 = HEAPU8[($pitch1385)];
									var $conv386 = ((($259)) & 255);
									var $260 = $p;
									var $pitch2387 = (($260 + 21) & 4294967295);
									var $261 = HEAPU8[($pitch2387)];
									var $conv388 = ((($261)) & 255);
									__ZL7DoPitchPhii($257, $conv386, $conv388);;
								}
								var $262 = $prev;
								var $type390 = (($262 + 15) & 4294967295);
								var $263 = HEAPU8[($type390)];
								var $conv391 = ((($263)) & 255);
								var $cmp392 = ((($conv391)) | 0) == 8;
								if ($cmp392) {
									__label__ = 96;;
								} else {
									__label__ = 97;;
								}
								if (__label__ == 96) {
									HEAP32[((__ZL10last_frame) >> 2)] = 0;;
								}
								var $264 = $next;
								var $type395 = (($264 + 15) & 4294967295);
								var $265 = HEAPU8[($type395)];
								var $conv396 = ((($265)) & 255);
								var $cmp397 = ((($conv396)) | 0) == 2;
								if ($cmp397) {
									__label__ = 98;;
								} else {
									__label__ = 99;;
								}
								if (__label__ == 98) {
									__ZL13StartSyllablev();;
								}
								var $266 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $266, $phdata);
								var $267 = HEAP32[(($arrayidx401) >> 2)];
								var $mul402 = ((($267) * 2) & 4294967295);
								HEAP32[(($std_length403) >> 2)] = $mul402;
								var $268 = HEAP32[(($arrayidx405) >> 2)];
								HEAP32[(($fmt_addr406) >> 2)] = $268;
								var $269 = HEAP32[(($arrayidx408) >> 2)];
								HEAP32[(($fmt_amp409) >> 2)] = $269;
								var $270 = HEAP32[(($arrayidx411) >> 2)];
								HEAP32[(($wav_addr412) >> 2)] = $270;
								var $271 = HEAP32[(($arrayidx414) >> 2)];
								HEAP32[(($wav_amp415) >> 2)] = $271;
								var $272 = $p;
								var $ph416 = (($272 + 8) & 4294967295);
								var $273 = HEAP32[(($ph416) >> 2)];
								var $274 = $p;
								var $275 = $modulation;
								var $call417 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($273, 0, $fmtp, $274, $275);;
							} else if (__label__ == 100) {
								var $276 = $p;
								var $ph419 = (($276 + 8) & 4294967295);
								var $277 = HEAP32[(($ph419) >> 2)];
								$ph = $277;
								var $278 = $p;
								var $stresslevel = (($278 + 1) & 4294967295);
								var $279 = HEAPU8[($stresslevel)];
								var $conv420 = ((($279)) & 255);
								var $and421 = ($conv420) & 15;
								$stress = $and421;
								var $dest$, $stop$, $stop4$, $fast$, $value4$;
								$dest$ = $12;
								$stop$ = $dest$ + 48;
								$value4$ = 0;
								if ($value4$ < 0) $value4$ += 256;
								$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
								while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								}
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($dest$ < $stop4$) {;;;;;;;
									HEAP32[$dest$++] = $value4$;
								}
								$dest$ <<= 2;
								while ($dest$ < $stop$) {;;
									HEAP8[$dest$++] = 0;
								};
								var $280 = $p;
								__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $280, $phdata);
								var $281 = HEAP32[(($arrayidx423) >> 2)];
								var $mul424 = ((($281) * 2) & 4294967295);
								HEAP32[(($std_length425) >> 2)] = $mul424;
								var $282 = HEAP32[(($arrayidx427) >> 2)];
								HEAP32[(($fmt_addr428) >> 2)] = $282;
								var $cmp429 = ((($282)) | 0) != 0;
								if ($cmp429) {
									__label__ = 101;;
								} else {
									__label__ = 103;;
								}
								$land_lhs_true430$$if_else437$138: do {
									if (__label__ == 101) {
										var $283 = HEAP32[(($pd_control431) >> 2)];
										var $and432 = ($283) & 2;
										var $cmp433 = ((($and432)) | 0) == 0;
										if (!($cmp433)) {
											__label__ = 103;
											break $land_lhs_true430$$if_else437$138;
										}
										var $284 = HEAP32[(($arrayidx436) >> 2)];
										HEAP32[(($fmt_length) >> 2)] = $284;
										__label__ = 107;
										break $land_lhs_true430$$if_else437$138;
									}
								} while (0);
								$if_end454$$if_else437$141: do {
									if (__label__ == 103) {
										var $285 = $prev;
										var $type438 = (($285 + 15) & 4294967295);
										var $286 = HEAPU8[($type438)];
										var $conv439 = ((($286)) & 255);
										var $cmp440 = ((($conv439)) | 0) != 0;
										if (!($cmp440)) {
											__label__ = 107;
											break $if_end454$$if_else437$141;
										}
										var $287 = $prev;
										__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $287, $phdata_prev);
										var $288 = HEAP32[(($arrayidx443) >> 2)];
										HEAP32[(($fmt_addr444) >> 2)] = $288;
										var $cmp445 = ((($288)) | 0) != 0;
										if ($cmp445) {
											__label__ = 105;;
										} else {
											__label__ = 106;;
										}
										if (__label__ == 105) {
											var $289 = HEAP32[(($arrayidx448) >> 2)];
											HEAP32[(($fmt2_lenadj) >> 2)] = $289;;
										}
										var $290 = HEAP32[(($arrayidx450) >> 2)];
										HEAP32[(($transition0) >> 2)] = $290;
										var $291 = HEAP32[(($arrayidx452) >> 2)];
										HEAP32[(($transition1) >> 2)] = $291;;
									}
								} while (0);
								var $292 = HEAP32[(($fmt_addr455) >> 2)];
								var $cmp456 = ((($292)) | 0) == 0;
								if ($cmp456) {
									__label__ = 108;;
								} else {
									__label__ = 109;;
								}
								if (__label__ == 108) {
									HEAP32[(($use_vowelin) >> 2)] = 1;
									HEAP32[(($fmt_control458) >> 2)] = 1;
									var $293 = HEAP32[(($arrayidx460) >> 2)];
									HEAP32[(($fmt_addr461) >> 2)] = $293;;
								}
								var $294 = HEAP32[(($arrayidx464) >> 2)];
								HEAP32[(($fmt_amp465) >> 2)] = $294;
								var $295 = $p;
								var $env466 = (($295 + 14) & 4294967295);
								var $296 = HEAPU8[($env466)];
								var $idxprom467 = ((($296)) & 255);
								var $arrayidx468 = ((_envelope_data + $idxprom467 * 4) & 4294967295);
								var $297 = HEAP32[(($arrayidx468) >> 2)];
								$pitch_env = $297;
								$amp_env = 0;
								var $298 = $p;
								var $tone_ph = (($298 + 3) & 4294967295);
								var $299 = HEAPU8[($tone_ph)];
								var $conv469 = ((($299)) & 255);
								var $cmp470 = ((($conv469)) | 0) != 0;
								if ($cmp470) {
									__label__ = 110;;
								} else {
									__label__ = 112;;
								}
								$if_then471$$if_end482$151: do {
									if (__label__ == 110) {
										var $300 = $p;
										var $tone_ph472 = (($300 + 3) & 4294967295);
										var $301 = HEAPU8[($tone_ph472)];
										var $conv473 = ((($301)) & 255);
										__Z17InterpretPhoneme2iP12PHONEME_DATA($conv473, $phdata_tone);
										var $302 = HEAP32[(($pitch_env474) >> 2)];
										var $call475 = __Z11GetEnvelopei($302);
										$pitch_env = $call475;
										var $303 = HEAP32[(($amp_env476) >> 2)];
										var $cmp477 = ((($303)) | 0) > 0;
										if (!($cmp477)) {
											__label__ = 112;
											break $if_then471$$if_end482$151;
										}
										var $304 = HEAP32[(($amp_env479) >> 2)];
										var $call480 = __Z11GetEnvelopei($304);
										$amp_env = $call480;;
									}
								} while (0);
								__ZL13StartSyllablev();
								$modulation = 2;
								var $305 = $stress;
								var $cmp483 = ((($305)) | 0) <= 1;
								if ($cmp483) {
									__label__ = 113;;
								} else {
									__label__ = 114;;
								}
								$if_then484$$if_else485$155: do {
									if (__label__ == 113) {
										$modulation = 1;;
									} else if (__label__ == 114) {
										var $306 = $stress;
										var $cmp486 = ((($306)) | 0) >= 7;
										if (!($cmp486)) {
											__label__ = 116;
											break $if_then484$$if_else485$155;
										}
										$modulation = 3;;
									}
								} while (0);
								var $307 = $prev;
								var $type490 = (($307 + 15) & 4294967295);
								var $308 = HEAPU8[($type490)];
								var $conv491 = ((($308)) & 255);
								var $cmp492 = ((($conv491)) | 0) == 5;
								if ($cmp492) {
									__label__ = 118;;
								} else {
									__label__ = 117;;
								}
								$if_then497$$lor_lhs_false493$160: do {
									if (__label__ == 117) {
										var $309 = $prev;
										var $type494 = (($309 + 15) & 4294967295);
										var $310 = HEAPU8[($type494)];
										var $conv495 = ((($310)) & 255);
										var $cmp496 = ((($conv495)) | 0) == 7;
										if ($cmp496) {
											__label__ = 118;
											break $if_then497$$lor_lhs_false493$160;
										}
										var $322 = $prev;
										var $type506 = (($322 + 15) & 4294967295);
										var $323 = HEAPU8[($type506)];
										var $conv507 = ((($323)) & 255);
										var $cmp508 = ((($conv507)) | 0) == 3;
										if ($cmp508) {
											__label__ = 121;;
										} else {
											__label__ = 120;;
										}
										$if_then513$$lor_lhs_false509$163: do {
											if (__label__ == 120) {
												var $324 = $prev;
												var $type510 = (($324 + 15) & 4294967295);
												var $325 = HEAPU8[($type510)];
												var $conv511 = ((($325)) & 255);
												var $cmp512 = ((($conv511)) | 0) == 8;
												if ($cmp512) {
													__label__ = 121;
													break $if_then513$$lor_lhs_false509$163;
												}
												var $337 = $p;
												var $synthflags522 = (($337 + 4) & 4294967295);
												var $338 = HEAPU16[(($synthflags522) >> 1)];
												var $conv523 = ((($338)) & 65535);
												var $and524 = ($conv523) & 1;
												var $tobool525 = ((($and524)) | 0) != 0;
												if ($tobool525) {
													__label__ = 124;;
												} else {
													__label__ = 123;;
												}
												if (__label__ == 123) {
													var $339 = $p;
													var $amp527 = (($339 + 18) & 4294967295);
													var $340 = HEAPU8[($amp527)];
													var $conv528 = ((($340)) & 255);
													var $341 = $amp_env;
													__ZL11DoAmplitudeiPh($conv528, $341);
													var $342 = $pitch_env;
													var $343 = $p;
													var $pitch1529 = (($343 + 20) & 4294967295);
													var $344 = HEAPU8[($pitch1529)];
													var $conv530 = ((($344)) & 255);
													var $345 = $p;
													var $pitch2531 = (($345 + 21) & 4294967295);
													var $346 = HEAPU8[($pitch2531)];
													var $conv532 = ((($346)) & 255);
													__ZL7DoPitchPhii($342, $conv530, $conv532);;
												}
												var $347 = $ph;
												var $348 = $p;
												var $349 = $modulation;
												var $call534 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($347, 1, $fmtp, $348, $349);
												__label__ = 125;
												break $if_then497$$lor_lhs_false493$160;
											}
										} while (0);
										var $326 = $p;
										var $amp514 = (($326 + 18) & 4294967295);
										var $327 = HEAPU8[($amp514)];
										var $conv515 = ((($327)) & 255);
										var $328 = $amp_env;
										__ZL11DoAmplitudeiPh($conv515, $328);
										var $329 = $ph;
										var $330 = $p;
										var $331 = $modulation;
										var $call516 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($329, 1, $fmtp, $330, $331);
										var $332 = $pitch_env;
										var $333 = $p;
										var $pitch1517 = (($333 + 20) & 4294967295);
										var $334 = HEAPU8[($pitch1517)];
										var $conv518 = ((($334)) & 255);
										var $335 = $p;
										var $pitch2519 = (($335 + 21) & 4294967295);
										var $336 = HEAPU8[($pitch2519)];
										var $conv520 = ((($336)) & 255);
										__ZL7DoPitchPhii($332, $conv518, $conv520);
										__label__ = 125;
										break $if_then497$$lor_lhs_false493$160;
									}
								} while (0);
								if (__label__ == 118) {
									var $311 = $p;
									var $amp498 = (($311 + 18) & 4294967295);
									var $312 = HEAPU8[($amp498)];
									var $conv499 = ((($312)) & 255);
									var $313 = $amp_env;
									__ZL11DoAmplitudeiPh($conv499, $313);
									var $314 = $pitch_env;
									var $315 = $p;
									var $pitch1500 = (($315 + 20) & 4294967295);
									var $316 = HEAPU8[($pitch1500)];
									var $conv501 = ((($316)) & 255);
									var $317 = $p;
									var $pitch2502 = (($317 + 21) & 4294967295);
									var $318 = HEAPU8[($pitch2502)];
									var $conv503 = ((($318)) & 255);
									__ZL7DoPitchPhii($314, $conv501, $conv503);
									var $319 = $ph;
									var $320 = $p;
									var $321 = $modulation;
									var $call504 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($319, 1, $fmtp, $320, $321);;
								}
								var $350 = HEAP32[((_option_phoneme_events) >> 2)];
								var $tobool537 = ((($350)) | 0) != 0;
								if ($tobool537) {
									__label__ = 126;;
								} else {
									__label__ = 127;;
								}
								if (__label__ == 126) {
									var $351 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE8sourceix) >> 2)];
									var $352 = $p;
									var $ph539 = (($352 + 8) & 4294967295);
									var $353 = HEAP32[(($ph539) >> 2)];
									var $mnemonic540 = (($353) & 4294967295);
									var $354 = HEAP32[(($mnemonic540) >> 2)];
									__Z8DoMarkeriiii(7, $351, 0, $354);;
								}
								var $355 = HEAP32[(($arrayidx543) >> 2)];
								HEAP32[(($fmt_addr544) >> 2)] = $355;
								var $356 = HEAP32[(($arrayidx546) >> 2)];
								HEAP32[(($fmt_amp547) >> 2)] = $356;
								HEAP32[(($transition0548) >> 2)] = 0;
								HEAP32[(($transition1549) >> 2)] = 0;
								var $357 = HEAP32[(($arrayidx551) >> 2)];
								HEAP32[(($fmt2_addr) >> 2)] = $357;
								var $cmp552 = ((($357)) | 0) != 0;
								if ($cmp552) {
									__label__ = 128;;
								} else {
									__label__ = 129;;
								}
								$if_then553$$if_else557$176: do {
									if (__label__ == 128) {
										var $358 = HEAP32[(($arrayidx555) >> 2)];
										HEAP32[(($fmt2_lenadj556) >> 2)] = $358;;
									} else if (__label__ == 129) {
										var $359 = $next;
										var $type558 = (($359 + 15) & 4294967295);
										var $360 = HEAPU8[($type558)];
										var $conv559 = ((($360)) & 255);
										var $cmp560 = ((($conv559)) | 0) != 0;
										if (!($cmp560)) {
											__label__ = 132;
											break $if_then553$$if_else557$176;
										}
										HEAP32[(($fmt2_lenadj562) >> 2)] = 0;
										var $361 = $next;
										__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA(0, 0, $361, $phdata_next);
										HEAP32[(($use_vowelin563) >> 2)] = 1;
										var $362 = HEAP32[(($arrayidx565) >> 2)];
										HEAP32[(($transition0566) >> 2)] = $362;
										var $363 = HEAP32[(($arrayidx568) >> 2)];
										HEAP32[(($transition1569) >> 2)] = $363;
										var $364 = HEAP32[(($arrayidx571) >> 2)];
										HEAP32[(($fmt2_addr572) >> 2)] = $364;
										var $cmp573 = ((($364)) | 0) != 0;
										if (!($cmp573)) {
											__label__ = 132;
											break $if_then553$$if_else557$176;
										}
										var $365 = HEAP32[(($arrayidx576) >> 2)];
										HEAP32[(($fmt2_lenadj577) >> 2)] = $365;;
									}
								} while (0);
								var $366 = $ph;
								var $367 = $p;
								var $368 = $modulation;
								var $call581 = __Z8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTi($366, 2, $fmtp, $367, $368);;
							}
						} while (0);
						var $369 = HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)];
						var $inc582 = ((($369) + 1) & 4294967295);
						HEAP32[((__ZZ8GenerateP12PHONEME_LISTPiiE2ix) >> 2)] = $inc582;
						__label__ = 7;
						continue $while_cond$11;
					}
					if (__label__ == 134) {
						__ZL8EndPitchi(1);
						var $370 = $n_ph_addr;
						var $371 = HEAP32[(($370) >> 2)];
						var $cmp583 = ((($371)) | 0) > 0;
						if ($cmp583) {
							__label__ = 135;;
						} else {
							__label__ = 136;;
						}
						if (__label__ == 135) {
							var $372 = HEAP32[((_count_characters) >> 2)];
							var $373 = HEAP32[((_count_sentences) >> 2)];
							__Z8DoMarkeriiii(5, $372, 0, $373);
							var $374 = $n_ph_addr;
							HEAP32[(($374) >> 2)] = 0;;
						}
						$retval = 0;;
					} else if (__label__ == 14) {
						$retval = 1;;
					}
				}
			}
			var $375 = $retval;
			STACKTOP = __stackBase__;
			return $375;
			return null;
		}

		function __ZL12EndAmplitudev() {;
			var __label__;
			var $0 = HEAP32[((__ZL10amp_length) >> 2)];
			var $cmp = ((($0)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__ZL12last_amp_cmd) >> 2)];
				var $arrayidx = ((_wcmdq + $1 * 16) & 4294967295);
				var $arrayidx1 = (($arrayidx + 4) & 4294967295);
				var $2 = HEAP32[(($arrayidx1) >> 2)];
				var $cmp2 = ((($2)) | 0) == 0;
				if ($cmp2) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $3 = HEAP32[((__ZL10amp_length) >> 2)];
					var $4 = HEAP32[((__ZL12last_amp_cmd) >> 2)];
					var $arrayidx4 = ((_wcmdq + $4 * 16) & 4294967295);
					var $arrayidx5 = (($arrayidx4 + 4) & 4294967295);
					HEAP32[(($arrayidx5) >> 2)] = $3;;
				}
				HEAP32[((__ZL10amp_length) >> 2)] = 0;;
			};
			return;
			return;
		}

		function __ZL11DoAmplitudeiPh($amp, $amp_env) {;
			var __label__;
			var $amp_addr;
			var $amp_env_addr;
			var $q;
			$amp_addr = $amp;
			$amp_env_addr = $amp_env;
			var $0 = HEAP32[((_wcmdq_tail) >> 2)];
			HEAP32[((__ZL12last_amp_cmd) >> 2)] = $0;
			HEAP32[((__ZL10amp_length) >> 2)] = 0;
			var $1 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx = ((_wcmdq + $1 * 16) & 4294967295);
			var $arraydecay = (($arrayidx) & 4294967295);
			$q = $arraydecay;
			var $2 = $q;
			var $arrayidx1 = (($2) & 4294967295);
			HEAP32[(($arrayidx1) >> 2)] = 8;
			var $3 = $q;
			var $arrayidx2 = (($3 + 4) & 4294967295);
			HEAP32[(($arrayidx2) >> 2)] = 0;
			var $4 = $amp_env_addr;
			var $5 = ($4);
			var $6 = $q;
			var $arrayidx3 = (($6 + 8) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = $5;
			var $7 = $amp_addr;
			var $8 = $q;
			var $arrayidx4 = (($8 + 12) & 4294967295);
			HEAP32[(($arrayidx4) >> 2)] = $7;
			__Z8WcmdqIncv();;
			return;
			return;
		}

		function __ZL7DoPitchPhii($env, $pitch1, $pitch2) {;
			var __label__;
			var $env_addr;
			var $pitch1_addr;
			var $pitch2_addr;
			var $q;
			$env_addr = $env;
			$pitch1_addr = $pitch1;
			$pitch2_addr = $pitch2;
			__ZL8EndPitchi(0);
			var $0 = $pitch1_addr;
			var $cmp = ((($0)) | 0) == 255;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_end_thread$$if_end$2: do {
				if (__label__ == 1) {
					$pitch1_addr = 55;
					$pitch2_addr = 76;
					var $1 = HEAP32[((((_envelope_data) & 4294967295)) >> 2)];
					$env_addr = $1;
					var $2 = HEAP32[((_wcmdq_tail) >> 2)];
					HEAP32[((__ZL14last_pitch_cmd) >> 2)] = $2;
					HEAP32[((__ZL12pitch_length) >> 2)] = 0;;
				} else if (__label__ == 2) {
					var $_pr = $pitch2_addr;
					var $3 = HEAP32[((_wcmdq_tail) >> 2)];
					HEAP32[((__ZL14last_pitch_cmd) >> 2)] = $3;
					HEAP32[((__ZL12pitch_length) >> 2)] = 0;
					var $cmp1 = ((($_pr)) | 0) < 0;
					if (!($cmp1)) {
						__label__ = 4;
						break $if_end_thread$$if_end$2;
					}
					$pitch2_addr = 0;;
				}
			} while (0);
			var $4 = HEAP32[((_wcmdq_tail) >> 2)];
			var $arrayidx = ((_wcmdq + $4 * 16) & 4294967295);
			var $arraydecay = (($arrayidx) & 4294967295);
			$q = $arraydecay;
			var $5 = $q;
			var $arrayidx4 = (($5) & 4294967295);
			HEAP32[(($arrayidx4) >> 2)] = 9;
			var $6 = $q;
			var $arrayidx5 = (($6 + 4) & 4294967295);
			HEAP32[(($arrayidx5) >> 2)] = 0;
			var $7 = $env_addr;
			var $8 = ($7);
			var $9 = $q;
			var $arrayidx6 = (($9 + 8) & 4294967295);
			HEAP32[(($arrayidx6) >> 2)] = $8;
			var $10 = $pitch1_addr;
			var $shl = ((($10) * 65536) & 4294967295);
			var $11 = $pitch2_addr;
			var $add = ((($shl) + ($11)) & 4294967295);
			var $12 = $q;
			var $arrayidx7 = (($12 + 12) & 4294967295);
			HEAP32[(($arrayidx7) >> 2)] = $add;
			__Z8WcmdqIncv();;
			return;
			return;
		}

		function __ZL13StartSyllablev() {;
			var __label__;
			var $0 = HEAP32[((__ZL12syllable_end) >> 2)];
			var $1 = HEAP32[((__ZL14syllable_start) >> 2)];
			var $cmp = ((($0)) | 0) == ((($1)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = HEAP32[((_wcmdq_tail) >> 2)];
				HEAP32[((__ZL12syllable_end) >> 2)] = $2;;
			};
			return;
			return;
		}

		function __Z12SynthOnTimerv() {;
			var __label__;
			var $retval;
			var $_b = HEAPU8[(__ZL8timer_on_b)];
			var $0 = ((($_b)) & 1);
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 2) {
				while (1) {
					var $call1 = __Z9WcmdqUsedv();
					var $call5 = __Z8GenerateP12PHONEME_LISTPii(((_phoneme_list) & 4294967295), _n_phoneme_list, 1);
					var $cmp6 = ((($call5)) | 0) == 0;
					if ($cmp6) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $call8 = __Z15SpeakNextClauseP7__sFILEPKvi(0, 0, 1);;
					}
					var $1 = HEAP32[((_skipping_text) >> 2)];
					var $tobool10 = ((($1)) | 0) != 0;
					if ($tobool10) {
						__label__ = 2;
						continue;
					} else {
						__label__ = 5;
						break;
					}
				}
				$retval = 0;;
			} else if (__label__ == 1) {
				$retval = 0;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function __Z15SpeakNextClauseP7__sFILEPKvi($f_in, $text_in, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 8;
			_memset(__stackBase__, 0, 8);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $f_in_addr;
			var $text_in_addr;
			var $control_addr;
			var $clause_tone = __stackBase__;
			var $voice_change = __stackBase__ + 4;
			$f_in_addr = $f_in;
			$text_in_addr = $text_in;
			$control_addr = $control;
			var $0 = $control_addr;
			var $cmp = ((($0)) | 0) == 4;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
					var $cmp1 = ((($1)) | 0) == 0;
					var $2 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text) >> 2)];
					var $cmp2 = ((($2)) | 0) == 0;
					var $or_cond = ($cmp1) & ($cmp2);
					if ($or_cond) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						$retval = 0;;
					} else if (__label__ == 3) {
						$retval = 1;;
					}
				} else if (__label__ == 4) {
					var $3 = $control_addr;
					var $cmp4 = ((($3)) | 0) == 2;
					if ($cmp4) {
						__label__ = 5;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 5) {
						HEAP8[(__ZL8timer_on_b)] = 0;
						HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text) >> 2)] = 0;
						var $4 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
						var $cmp6 = ((($4)) | 0) != 0;
						if ($cmp6) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						if (__label__ == 6) {
							var $5 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
							var $call = _fclose($5);
							HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)] = 0;;
						}
						HEAP32[((_n_phoneme_list) >> 2)] = 0;
						__Z9WcmdqStopv();
						HEAP32[((((_embedded_value + 24) & 4294967295)) >> 2)] = 0;
						$retval = 0;;
					} else if (__label__ == 8) {
						var $6 = $control_addr;
						var $cmp10 = ((($6)) | 0) == 3;
						if ($cmp10) {
							__label__ = 9;;
						} else {
							__label__ = 13;;
						}
						if (__label__ == 9) {
							var $_b = HEAPU8[(__ZL6paused_b)];
							var $7 = ($_b) ? 2 : 0;
							var $cmp12 = ((($7)) | 0) == 0;
							if ($cmp12) {
								__label__ = 10;;
							} else {
								__label__ = 11;;
							}
							if (__label__ == 10) {
								HEAP8[(__ZL8timer_on_b)] = 0;
								HEAP8[(__ZL6paused_b)] = 1;;
							} else if (__label__ == 11) {
								HEAP8[(__ZL8timer_on_b)] = 1;
								HEAP8[(__ZL6paused_b)] = 0;
								var $call16 = __Z8GenerateP12PHONEME_LISTPii(((_phoneme_list) & 4294967295), _n_phoneme_list, 0);;
							}
							$retval = 0;;
						} else if (__label__ == 13) {
							var $8 = $control_addr;
							var $cmp19 = ((($8)) | 0) == 5;
							if ($cmp19) {
								__label__ = 14;;
							} else {
								__label__ = 15;;
							}
							if (__label__ == 14) {
								HEAP32[((_n_phoneme_list) >> 2)] = 0;
								__Z9WcmdqStopv();
								$retval = 0;;
							} else if (__label__ == 15) {
								var $9 = $f_in_addr;
								var $cmp22 = ((($9)) | 0) != 0;
								if ($cmp22) {
									__label__ = 17;;
								} else {
									__label__ = 16;;
								}
								$if_then24$$lor_lhs_false$24: do {
									if (__label__ == 16) {
										var $10 = $text_in_addr;
										var $cmp23 = ((($10)) | 0) != 0;
										if ($cmp23) {
											__label__ = 17;
											break $if_then24$$lor_lhs_false$24;
										} else {
											__label__ = 18;
											break $if_then24$$lor_lhs_false$24;
										}
									}
								} while (0);
								if (__label__ == 17) {
									var $11 = $f_in_addr;
									HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)] = $11;
									var $12 = $text_in_addr;
									HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text) >> 2)] = $12;
									HEAP8[(__ZL8timer_on_b)] = 1;
									HEAP8[(__ZL6paused_b)] = 0;;
								}
								var $13 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
								var $cmp26 = ((($13)) | 0) == 0;
								var $14 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text) >> 2)];
								var $cmp28 = ((($14)) | 0) == 0;
								var $or_cond1 = ($cmp26) & ($cmp28);
								if ($or_cond1) {
									__label__ = 19;;
								} else {
									__label__ = 20;;
								}
								if (__label__ == 19) {
									HEAP32[((_skipping_text) >> 2)] = 0;
									HEAP8[(__ZL8timer_on_b)] = 0;
									$retval = 0;;
								} else if (__label__ == 20) {
									var $15 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
									var $cmp31 = ((($15)) | 0) != 0;
									if ($cmp31) {
										__label__ = 21;;
									} else {
										__label__ = 23;;
									}
									$land_lhs_true32$$if_end36$32: do {
										if (__label__ == 21) {
											var $16 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
											var $_flags = (($16 + 12) & 4294967295);
											var $17 = HEAP16[(($_flags) >> 1)];
											var $conv = (tempInt = (($17)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $and = ($conv) & 32;
											var $cmp33 = ((($and)) | 0) != 0;
											if (!($cmp33)) {
												__label__ = 23;
												break $land_lhs_true32$$if_end36$32;
											}
											HEAP8[(__ZL8timer_on_b)] = 0;
											var $18 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
											var $call35 = _fclose($18);
											HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)] = 0;
											$retval = 0;
											__label__ = 39;
											break $if_then$$if_end$2;
										}
									} while (0);
									var $19 = HEAP32[((_current_phoneme_table) >> 2)];
									var $20 = HEAP32[((_voice) >> 2)];
									var $phoneme_tab_ix = (($20 + 40) & 4294967295);
									var $21 = HEAP32[(($phoneme_tab_ix) >> 2)];
									var $cmp37 = ((($19)) | 0) != ((($21)) | 0);
									if ($cmp37) {
										__label__ = 24;;
									} else {
										__label__ = 25;;
									}
									if (__label__ == 24) {
										var $22 = HEAP32[((_voice) >> 2)];
										var $phoneme_tab_ix39 = (($22 + 40) & 4294967295);
										var $23 = HEAP32[(($phoneme_tab_ix39) >> 2)];
										__Z18SelectPhonemeTablei($23);;
									}
									var $24 = HEAP32[((_translator) >> 2)];
									var $25 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text) >> 2)];
									var $26 = HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text) >> 2)];
									var $call41 = __Z15TranslateClauseP10TranslatorP7__sFILEPKvPiPPc($24, $25, $26, $clause_tone, $voice_change);
									HEAP32[((__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text) >> 2)] = $call41;
									var $27 = HEAP32[((_translator) >> 2)];
									var $28 = HEAP32[(($clause_tone) >> 2)];
									__Z11CalcPitchesP10Translatori($27, $28);
									var $29 = HEAP32[((_translator) >> 2)];
									__Z11CalcLengthsP10Translator($29);
									var $30 = HEAP32[((_option_phonemes) >> 2)];
									var $cmp42 = ((($30)) | 0) > 0;
									var $31 = HEAP32[((_phoneme_callback) >> 2)];
									var $cmp44 = ((($31)) | 0) != 0;
									var $or_cond2 = ($cmp42) | ($cmp44);
									if ($or_cond2) {
										__label__ = 26;;
									} else {
										__label__ = 31;;
									}
									$if_then45$$if_end62$39: do {
										if (__label__ == 26) {
											var $32 = HEAP32[((_translator) >> 2)];
											var $phon_out = (($32 + 332) & 4294967295);
											var $arraydecay = (($phon_out) & 4294967295);
											__Z26GetTranslatedPhonemeStringPci($arraydecay, 300);
											var $33 = HEAP32[((_option_phonemes) >> 2)];
											var $cmp46 = ((($33)) | 0) > 0;
											if ($cmp46) {
												__label__ = 27;;
											} else {
												__label__ = 29;;
											}
											$if_then47$$if_end55$41: do {
												if (__label__ == 27) {
													var $34 = HEAP32[((_f_trans) >> 2)];
													var $35 = HEAP32[((_translator) >> 2)];
													var $phon_out48 = (($35 + 332) & 4294967295);
													var $arraydecay49 = (($phon_out48) & 4294967295);
													var $call50 = _fprintf($34, ((__str459) & 4294967295), allocate([$arraydecay49, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
													var $call51 = _iswalpha(269);
													var $tobool = ((($call51)) | 0) != 0;
													if ($tobool) {
														__label__ = 29;
														break $if_then47$$if_end55$41;
													}
													var $36 = HEAP32[((__impure_ptr) >> 2)];
													var $_stderr = (($36 + 12) & 4294967295);
													var $37 = HEAP32[(($_stderr) >> 2)];
													var $38 = _fwrite(((__str1460) & 4294967295), 88, 1, $37);;
												}
											} while (0);
											var $39 = HEAP32[((_phoneme_callback) >> 2)];
											var $cmp56 = ((($39)) | 0) != 0;
											if (!($cmp56)) {
												__label__ = 31;
												break $if_then45$$if_end62$39;
											}
											var $40 = HEAP32[((_phoneme_callback) >> 2)];
											var $41 = HEAP32[((_translator) >> 2)];
											var $phon_out58 = (($41 + 332) & 4294967295);
											var $arraydecay59 = (($phon_out58) & 4294967295);
											var $call60 = FUNCTION_TABLE[$40]($arraydecay59);;
										}
									} while (0);
									var $42 = HEAP32[((_skipping_text) >> 2)];
									var $tobool63 = ((($42)) | 0) != 0;
									if ($tobool63) {
										__label__ = 32;;
									} else {
										__label__ = 33;;
									}
									if (__label__ == 32) {
										HEAP32[((_n_phoneme_list) >> 2)] = 0;
										$retval = 1;;
									} else if (__label__ == 33) {
										var $call66 = __Z8GenerateP12PHONEME_LISTPii(((_phoneme_list) & 4294967295), _n_phoneme_list, 0);
										var $43 = HEAP32[(($voice_change) >> 2)];
										var $cmp68 = ((($43)) | 0) != 0;
										if ($cmp68) {
											__label__ = 34;;
										} else {
											__label__ = 35;;
										}
										if (__label__ == 34) {
											var $44 = HEAP32[(($voice_change) >> 2)];
											var $call70 = __Z16LoadVoiceVariantPKci($44, 0);
											HEAP32[((__ZL9new_voice) >> 2)] = $call70;
											__lastLabel__ = 34;;
										} else if (__label__ == 35) {
											var $_pr = HEAP32[((__ZL9new_voice) >> 2)];
											__lastLabel__ = 35;;
										}
										var $45 = __lastLabel__ == 35 ? $_pr : ($call70);
										var $tobool72 = ((($45)) | 0) != 0;
										if ($tobool72) {
											__label__ = 37;;
										} else {
											__label__ = 38;;
										}
										if (__label__ == 37) {
											var $46 = HEAP32[((_voice) >> 2)];
											__Z13DoVoiceChangeP7voice_t($46);
											HEAP32[((__ZL9new_voice) >> 2)] = 0;;
										}
										$retval = 1;;
									}
								}
							}
						}
					}
				}
			} while (0);
			var $47 = $retval;
			STACKTOP = __stackBase__;
			return $47;
			return null;
		}

		function __Z11SynthStatusv() {;
			var __label__;
			var $_b = HEAPU8[(__ZL8timer_on_b)];
			var $0 = ((($_b)) & 1);
			var $_b1 = HEAPU8[(__ZL6paused_b)];
			var $1 = ($_b1) ? 2 : 0;
			var $or = ($1) | ($0);;
			return $or;
			return null;
		}

		function __ZL18formants_reduce_hfP7frame_ti($fr, $level) {;
			var __label__;
			var $fr_addr;
			var $level_addr;
			var $ix;
			var $x;
			$fr_addr = $fr;
			$level_addr = $level;
			var $0 = HEAP32[((_voice) >> 2)];
			var $klattv = (($0 + 112) & 4294967295);
			var $arrayidx = (($klattv) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			var $tobool = ((($1)) | 0) != 0;
			if ($tobool) {
				__label__ = 3;;
			} else {
				__label__ = 1;;
			}
			$for_end$$if_end$2: do {
				if (__label__ == 1) {
					$ix = 2;;
					while (1) {
						var $2 = $ix;
						var $3 = $fr_addr;
						var $fheight = (($3 + 18) & 4294967295);
						var $arrayidx1 = (($fheight + $2) & 4294967295);
						var $4 = HEAPU8[($arrayidx1)];
						var $conv = ((($4)) & 255);
						var $5 = $level_addr;
						var $mul = ((($conv) * ($5)) & 4294967295);
						$x = $mul;
						var $6 = $x;
						var $div = ((((($6)) | 0) / 100) | 0);
						var $conv2 = ((($div)) & 255);
						var $7 = $ix;
						var $8 = $fr_addr;
						var $fheight3 = (($8 + 18) & 4294967295);
						var $arrayidx4 = (($fheight3 + $7) & 4294967295);
						HEAP8[($arrayidx4)] = $conv2;
						var $9 = $ix;
						var $inc = ((($9) + 1) & 4294967295);
						$ix = $inc;
						var $cmp = ((($inc)) | 0) < 8;
						if ($cmp) {
							__label__ = 2;
							continue;
						} else {
							__label__ = 3;
							break $for_end$$if_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL10AllocFramev() {;
			var __label__;
			var $0 = HEAP32[((__ZZL10AllocFramevE2ix) >> 2)];
			var $inc = ((($0) + 1) & 4294967295);
			HEAP32[((__ZZL10AllocFramevE2ix) >> 2)] = $inc;
			var $cmp = ((($inc)) | 0) >= 160;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((__ZZL10AllocFramevE2ix) >> 2)] = 0;;
			}
			var $1 = HEAP32[((__ZZL10AllocFramevE2ix) >> 2)];
			var $arrayidx = ((__ZZL10AllocFramevE10frame_pool + $1 * 64) & 4294967295);;
			return $arrayidx;
			return null;
		}

		function __Z13SetLengthModsP10Translatori($tr, $value) {;
			var __label__;
			var $tr_addr;
			var $value_addr;
			var $value2;
			$tr_addr = $tr;
			$value_addr = $value;
			var $0 = $value_addr;
			var $rem = ((($0)) | 0) % 100;
			var $arrayidx = ((__ZL15length_mod_tabs + $rem * 4) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			var $2 = $tr_addr;
			var $langopts = (($2) & 4294967295);
			var $length_mods = (($langopts + 176) & 4294967295);
			HEAP32[(($length_mods) >> 2)] = $1;
			var $3 = $tr_addr;
			var $langopts1 = (($3) & 4294967295);
			var $length_mods0 = (($langopts1 + 180) & 4294967295);
			HEAP32[(($length_mods0) >> 2)] = $1;
			var $4 = $value_addr;
			var $div = ((((($4)) | 0) / 100) | 0);
			$value2 = $div;
			var $cmp = ((($div)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $5 = $value2;
				var $arrayidx2 = ((__ZL15length_mod_tabs + $5 * 4) & 4294967295);
				var $6 = HEAP32[(($arrayidx2) >> 2)];
				var $7 = $tr_addr;
				var $langopts3 = (($7) & 4294967295);
				var $length_mods04 = (($langopts3 + 180) & 4294967295);
				HEAP32[(($length_mods04) >> 2)] = $6;;
			};
			return;
			return;
		}

		function __Z7IsAlphaj($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $call = _iswalpha($0);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $1 = $c_addr;
				var $cmp = ((($1)) >>> 0) >= 2305;
				var $2 = $c_addr;
				var $cmp1 = ((($2)) >>> 0) <= 3575;
				var $or_cond = ($cmp) & ($cmp1);
				var $3 = $c_addr;
				if ($or_cond) {
					__label__ = 3;;
				} else {
					__label__ = 10;;
				}
				if (__label__ == 3) {
					var $and = ($3) & 127;
					var $cmp3 = ((($and)) >>> 0) < 100;
					if ($cmp3) {
						__label__ = 4;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 4) {
						$retval = 1;;
					} else if (__label__ == 5) {
						var $4 = $c_addr;
						var $call6 = __Z11lookupwcharPKti(((__ZZ7IsAlphajE18extra_indic_alphas) & 4294967295), $4);
						var $cmp7 = ((($call6)) | 0) != 0;
						if ($cmp7) {
							__label__ = 6;;
						} else {
							__label__ = 7;;
						}
						if (__label__ == 6) {
							$retval = 1;;
						} else if (__label__ == 7) {
							var $5 = $c_addr;
							var $cmp10 = ((($5)) >>> 0) >= 3450;
							var $6 = $c_addr;
							var $cmp12 = ((($6)) >>> 0) <= 3455;
							var $or_cond1 = ($cmp10) & ($cmp12);
							if ($or_cond1) {
								__label__ = 8;;
							} else {
								__label__ = 9;;
							}
							if (__label__ == 8) {
								$retval = 1;;
							} else if (__label__ == 9) {
								$retval = 0;;
							}
						}
					}
				} else if (__label__ == 10) {
					var $cmp16 = ((($3)) >>> 0) >= 1611;
					var $7 = $c_addr;
					var $cmp18 = ((($7)) >>> 0) <= 1630;
					var $or_cond2 = ($cmp16) & ($cmp18);
					if ($or_cond2) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						$retval = 1;;
					} else if (__label__ == 12) {
						var $8 = $c_addr;
						var $cmp21 = ((($8)) >>> 0) >= 768;
						var $9 = $c_addr;
						var $cmp23 = ((($9)) >>> 0) <= 879;
						var $or_cond3 = ($cmp21) & ($cmp23);
						if ($or_cond3) {
							__label__ = 13;;
						} else {
							__label__ = 14;;
						}
						if (__label__ == 13) {
							$retval = 1;;
						} else if (__label__ == 14) {
							var $10 = $c_addr;
							var $cmp26 = ((($10)) >>> 0) >= 1920;
							var $11 = $c_addr;
							var $cmp28 = ((($11)) >>> 0) <= 1969;
							var $or_cond4 = ($cmp26) & ($cmp28);
							if ($or_cond4) {
								__label__ = 15;;
							} else {
								__label__ = 16;;
							}
							if (__label__ == 15) {
								$retval = 1;;
							} else if (__label__ == 16) {
								var $12 = $c_addr;
								var $cmp31 = ((($12)) >>> 0) >= 4352;
								var $13 = $c_addr;
								var $cmp33 = ((($13)) >>> 0) <= 4607;
								var $or_cond5 = ($cmp31) & ($cmp33);
								if ($or_cond5) {
									__label__ = 17;;
								} else {
									__label__ = 18;;
								}
								if (__label__ == 17) {
									$retval = 1;;
								} else if (__label__ == 18) {
									var $14 = $c_addr;
									var $cmp36 = ((($14)) >>> 0) > 12352;
									var $15 = $c_addr;
									var $cmp38 = ((($15)) >>> 0) <= 42752;
									var $or_cond6 = ($cmp36) & ($cmp38);
									if ($or_cond6) {
										__label__ = 19;;
									} else {
										__label__ = 20;;
									}
									if (__label__ == 19) {
										$retval = 1;;
									} else if (__label__ == 20) {
										$retval = 0;;
									}
								}
							}
						}
					}
				}
			}
			var $16 = $retval;;
			return $16;
			return null;
		}

		function __Z11lookupwcharPKti($list, $c) {;
			var __label__;
			var $retval;
			var $list_addr;
			var $c_addr;
			var $ix;
			$list_addr = $list;
			$c_addr = $c;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = $list_addr;
				var $arrayidx = (($1 + 2 * $0) & 4294967295);
				var $2 = HEAPU16[(($arrayidx) >> 1)];
				var $conv = ((($2)) & 65535);
				var $cmp = ((($conv)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $3 = $ix;
				var $4 = $list_addr;
				var $arrayidx1 = (($4 + 2 * $3) & 4294967295);
				var $5 = HEAPU16[(($arrayidx1) >> 1)];
				var $conv2 = ((($5)) & 65535);
				var $6 = $c_addr;
				var $cmp3 = ((($conv2)) | 0) == ((($6)) | 0);
				var $7 = $ix;
				var $add = ((($7) + 1) & 4294967295);
				if ($cmp3) {
					__label__ = 3;
					break;
				}
				$ix = $add;
				__label__ = 1;
				continue;
			}
			if (__label__ == 5) {
				$retval = 0;;
			} else if (__label__ == 3) {
				$retval = $add;;
			}
			var $8 = $retval;;
			return $8;
			return null;
		}

		function __Z7IsDigitj($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $call = _iswdigit($0);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $1 = $c_addr;
				var $cmp = ((($1)) >>> 0) >= 2406;
				var $2 = $c_addr;
				var $cmp1 = ((($2)) >>> 0) <= 2415;
				var $or_cond = ($cmp) & ($cmp1);
				if ($or_cond) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 1;;
				} else if (__label__ == 4) {
					$retval = 0;;
				}
			}
			var $3 = $retval;;
			return $3;
			return null;
		}

		function __Z7IsSpacej($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $1 = $c_addr;
				var $cmp1 = ((($1)) >>> 0) >= 9472;
				var $2 = $c_addr;
				var $cmp2 = ((($2)) >>> 0) < 9632;
				var $or_cond = ($cmp1) & ($cmp2);
				if ($or_cond) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 1;;
				} else if (__label__ == 4) {
					var $3 = $c_addr;
					var $call = _iswspace($3);
					$retval = $call;;
				}
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function __Z16DeleteTranslatorP10Translator($tr) {;
			var __label__;
			var $tr_addr;
			$tr_addr = $tr;
			var $0 = $tr_addr;
			var $data_dictlist = (($0 + 1052) & 4294967295);
			var $1 = HEAP32[(($data_dictlist) >> 2)];
			var $cmp = ((($1)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = $tr_addr;
				var $data_dictlist1 = (($2 + 1052) & 4294967295);
				var $3 = HEAP32[(($data_dictlist1) >> 2)];
				__Z4FreePv($3);;
			}
			var $4 = $tr_addr;
			var $5 = $4;
			__Z4FreePv($5);;
			return;
			return;
		}

		function __Z9IsBracketi($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) | 0) >= 8212;
			var $1 = $c_addr;
			var $cmp1 = ((($1)) | 0) <= 8223;
			var $or_cond = ($cmp) & ($cmp1);
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $2 = $c_addr;
				var $call = __Z11lookupwcharPKti(((__ZL8brackets) & 4294967295), $2);
				$retval = $call;;
			}
			var $3 = $retval;;
			return $3;
			return null;
		}

		function __Z8utf8_outjPc($c, $buf) {;
			var __label__;
			var $retval;
			var $c_addr;
			var $buf_addr;
			var $n_bytes;
			var $j;
			var $shift;
			$c_addr = $c;
			$buf_addr = $buf;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) < 128;
			var $1 = $c_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $conv = ((($1)) & 255);
				var $2 = $buf_addr;
				var $arrayidx = (($2) & 4294967295);
				HEAP8[($arrayidx)] = $conv;
				$retval = 1;;
			} else if (__label__ == 2) {
				var $cmp1 = ((($1)) >>> 0) >= 1114112;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $3 = $buf_addr;
					var $arrayidx3 = (($3) & 4294967295);
					HEAP8[($arrayidx3)] = 32;
					$retval = 1;;
				} else if (__label__ == 4) {
					var $4 = $c_addr;
					var $cmp5 = ((($4)) >>> 0) < 2048;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$n_bytes = 1;;
					} else if (__label__ == 6) {
						var $5 = $c_addr;
						var $cmp7 = ((($5)) >>> 0) < 65536;
						if ($cmp7) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							$n_bytes = 2;;
						} else if (__label__ == 8) {
							$n_bytes = 3;;
						}
					}
					var $6 = $n_bytes;
					var $mul = ((($6) * 6) & 4294967295);
					$shift = $mul;
					var $7 = $n_bytes;
					var $arrayidx12 = ((__ZZ8utf8_outjPcE4code + $7) & 4294967295);
					var $8 = HEAPU8[($arrayidx12)];
					var $conv13 = ((($8)) & 255);
					var $9 = $c_addr;
					var $10 = $shift;
					var $shr = ($9) >>> ((($10)) >>> 0);
					var $or = ($shr) | ($conv13);
					var $conv14 = ((($or)) & 255);
					var $11 = $buf_addr;
					var $arrayidx15 = (($11) & 4294967295);
					HEAP8[($arrayidx15)] = $conv14;
					$j = 0;
					var $12 = $j;
					var $13 = $n_bytes;
					var $cmp161 = ((($12)) | 0) < ((($13)) | 0);
					if ($cmp161) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					$for_body$$for_end$15: do {
						if (__label__ == 10) {
							while (1) {
								var $14 = $shift;
								var $sub = ((($14) - 6) & 4294967295);
								$shift = $sub;
								var $15 = $c_addr;
								var $16 = $shift;
								var $shr17 = ($15) >>> ((($16)) >>> 0);
								var $and = ($shr17) & 63;
								var $add = ((($and) + 128) & 4294967295);
								var $conv18 = ((($add)) & 255);
								var $17 = $j;
								var $add19 = ((($17) + 1) & 4294967295);
								var $18 = $buf_addr;
								var $arrayidx20 = (($18 + $add19) & 4294967295);
								HEAP8[($arrayidx20)] = $conv18;
								var $19 = $j;
								var $inc = ((($19) + 1) & 4294967295);
								$j = $inc;
								var $20 = $j;
								var $21 = $n_bytes;
								var $cmp16 = ((($20)) | 0) < ((($21)) | 0);
								if ($cmp16) {
									__label__ = 10;
									continue;
								} else {
									__label__ = 11;
									break $for_body$$for_end$15;
								}
							}
						}
					} while (0);
					var $22 = $n_bytes;
					var $add21 = ((($22) + 1) & 4294967295);
					$retval = $add21;;
				}
			}
			var $23 = $retval;;
			return $23;
			return null;
		}

		function __Z11utf8_nbytesPKc($buf) {;
			var __label__;
			var $retval;
			var $buf_addr;
			var $c;
			$buf_addr = $buf;
			var $0 = $buf_addr;
			var $arrayidx = (($0) & 4294967295);
			var $1 = HEAP8[($arrayidx)];
			$c = $1;
			var $2 = $c;
			var $conv = ((($2)) & 255);
			var $cmp = ((($conv)) | 0) < 128;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $3 = $c;
				var $conv1 = ((($3)) & 255);
				var $cmp2 = ((($conv1)) | 0) < 224;
				if ($cmp2) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 2;;
				} else if (__label__ == 4) {
					var $4 = $c;
					var $conv5 = ((($4)) & 255);
					var $cmp6 = ((($conv5)) | 0) < 240;
					if ($cmp6) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = 3;;
					} else if (__label__ == 6) {
						$retval = 4;;
					}
				}
			}
			var $5 = $retval;;
			return $5;
			return null;
		}

		function __Z8utf8_in2PiPKci($c, $buf, $backwards) {;
			var __label__;
			var $c_addr;
			var $buf_addr;
			var $backwards_addr;
			var $c1;
			var $n_bytes;
			var $ix;
			$c_addr = $c;
			$buf_addr = $buf;
			$backwards_addr = $backwards;
			var $0 = $buf_addr;
			var $1 = HEAP8[($0)];
			var $conv2 = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $and3 = ($conv2) & 192;
			var $cmp4 = ((($and3)) | 0) == 128;
			if ($cmp4) {
				__label__ = 1;;
			} else {
				__label__ = 5;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $2 = $backwards_addr;
						var $tobool = ((($2)) | 0) != 0;
						var $3 = $buf_addr;
						if ($tobool) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						if (__label__ == 2) {
							var $incdec_ptr = (($3 + -1) & 4294967295);
							$buf_addr = $incdec_ptr;;
						} else if (__label__ == 3) {
							var $incdec_ptr1 = (($3 + 1) & 4294967295);
							$buf_addr = $incdec_ptr1;;
						}
						var $4 = $buf_addr;
						var $5 = HEAP8[($4)];
						var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $and = ($conv) & 192;
						var $cmp = ((($and)) | 0) == 128;
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 5;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			$n_bytes = 0;
			var $6 = $buf_addr;
			var $incdec_ptr2 = (($6 + 1) & 4294967295);
			$buf_addr = $incdec_ptr2;
			var $7 = HEAP8[($6)];
			var $conv3 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			$c1 = $conv3;
			var $and4 = ($conv3) & 128;
			var $tobool5 = ((($and4)) | 0) != 0;
			if ($tobool5) {
				__label__ = 6;;
			} else {
				__label__ = 14;;
			}
			$if_then6$$if_end27$10: do {
				if (__label__ == 6) {
					var $8 = $c1;
					var $and7 = ($8) & 224;
					var $cmp8 = ((($and7)) | 0) == 192;
					if ($cmp8) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					$if_then9$$if_else10$12: do {
						if (__label__ == 7) {
							$n_bytes = 1;;
						} else if (__label__ == 8) {
							var $9 = $c1;
							var $and11 = ($9) & 240;
							var $cmp12 = ((($and11)) | 0) == 224;
							if ($cmp12) {
								__label__ = 9;;
							} else {
								__label__ = 10;;
							}
							if (__label__ == 9) {
								$n_bytes = 2;;
							} else if (__label__ == 10) {
								var $10 = $c1;
								var $and15 = ($10) & 248;
								var $cmp16 = ((($and15)) | 0) == 240;
								if (!($cmp16)) {
									__label__ = 12;
									break $if_then9$$if_else10$12;
								}
								$n_bytes = 3;;
							}
						}
					} while (0);
					var $11 = $n_bytes;
					var $arrayidx = ((__ZZ8utf8_in2PiPKciE4mask + $11) & 4294967295);
					var $12 = HEAPU8[($arrayidx)];
					var $conv21 = ((($12)) & 255);
					var $13 = $c1;
					var $and22 = ($13) & ($conv21);
					$c1 = $and22;
					$ix = 0;
					var $14 = $ix;
					var $15 = $n_bytes;
					var $cmp231 = ((($14)) | 0) < ((($15)) | 0);
					if (!($cmp231)) {
						__label__ = 14;
						break $if_then6$$if_end27$10;
					}
					while (1) {
						var $16 = $c1;
						var $shl = ((($16) * 64) & 4294967295);
						var $17 = $buf_addr;
						var $incdec_ptr24 = (($17 + 1) & 4294967295);
						$buf_addr = $incdec_ptr24;
						var $18 = HEAP8[($17)];
						var $conv25 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $and26 = ($conv25) & 63;
						var $add = ((($and26) + ($shl)) & 4294967295);
						$c1 = $add;
						var $19 = $ix;
						var $inc = ((($19) + 1) & 4294967295);
						$ix = $inc;
						var $20 = $ix;
						var $21 = $n_bytes;
						var $cmp23 = ((($20)) | 0) < ((($21)) | 0);
						if ($cmp23) {
							__label__ = 13;
							continue;
						} else {
							__label__ = 14;
							break $if_then6$$if_end27$10;
						}
					}
				}
			} while (0);
			var $22 = $c1;
			var $23 = $c_addr;
			HEAP32[(($23) >> 2)] = $22;
			var $24 = $n_bytes;
			var $add28 = ((($24) + 1) & 4294967295);;
			return $add28;
			return null;
		}

		function __Z7utf8_inPiPKc($c, $buf) {;
			var __label__;
			var $c_addr;
			var $buf_addr;
			$c_addr = $c;
			$buf_addr = $buf;
			var $0 = $c_addr;
			var $1 = $buf_addr;
			var $call = __Z8utf8_in2PiPKci($0, $1, 0);;
			return $call;
			return null;
		}

		function __Z8strchr_wPKci($s, $c) {;
			var __label__;
			var $retval;
			var $s_addr;
			var $c_addr;
			$s_addr = $s;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) | 0) >= 128;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $1 = $s_addr;
				var $2 = $c_addr;
				var $call = _strchr($1, $2);
				$retval = $call;;
			}
			var $3 = $retval;;
			return $3;
			return null;
		}

		function __Z10IsAllUpperPKc($word) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $retval;
			var $word_addr;
			var $c = __stackBase__;
			$word_addr = $word;;
			while (1) {
				var $0 = $word_addr;
				var $1 = HEAP8[($0)];
				var $conv = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp = ((($conv)) | 0) != 0;
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $word_addr;
				var $3 = HEAP8[($2)];
				var $conv1 = (tempInt = (($3)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $call = __Z8isspace2j($conv1);
				var $tobool = ((($call)) | 0) != 0;
				var $lnot = ($tobool) ^ 1;
				if (!($lnot)) {
					__label__ = 5;
					break;
				}
				var $4 = $word_addr;
				var $call2 = __Z7utf8_inPiPKc($c, $4);
				var $5 = $word_addr;
				var $add_ptr = (($5 + $call2) & 4294967295);
				$word_addr = $add_ptr;
				var $6 = HEAP32[(($c) >> 2)];
				var $call3 = _iswupper($6);
				var $tobool4 = ((($call3)) | 0) != 0;
				if ($tobool4) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 4;
					break;
				}
			}
			if (__label__ == 5) {
				$retval = 1;;
			} else if (__label__ == 4) {
				$retval = 0;;
			}
			var $7 = $retval;
			STACKTOP = __stackBase__;
			return $7;
			return null;
		}

		function __Z24ChangeEquivalentPhonemesP10TranslatoriPc($tr, $lang2, $phonemes) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 160;
			_memset(__stackBase__, 0, 160);
			var __label__;
			var $retval;
			var $tr_addr;
			var $lang2_addr;
			var $phonemes_addr;
			var $ix;
			var $len;
			var $phon;
			var $p;
			var $pb;
			var $eqlist;
			var $p_out;
			var $p_in;
			var $remove_stress;
			var $phonbuf = __stackBase__;
			$tr_addr = $tr;
			$lang2_addr = $lang2;
			$phonemes_addr = $phonemes;
			$remove_stress = 0;
			var $0 = $tr_addr;
			var $phoneme_tab_ix = (($0 + 656) & 4294967295);
			var $1 = HEAP32[(($phoneme_tab_ix) >> 2)];
			var $arrayidx = ((_phoneme_tab_list + $1 * 48) & 4294967295);
			var $equivalence_tables = (($arrayidx + 44) & 4294967295);
			var $2 = HEAP32[(($equivalence_tables) >> 2)];
			$ix = $2;
			var $cmp = ((($2)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $3 = $ix;
				var $4 = HEAP32[((_phondata_ptr) >> 2)];
				var $arrayidx1 = (($4 + $3) & 4294967295);
				$pb = $arrayidx1;;
				$for_cond$5: while (1) {
					var $5 = $pb;
					var $arrayidx2 = (($5) & 4294967295);
					var $6 = HEAPU8[($arrayidx2)];
					var $conv = ((($6)) & 255);
					var $cmp3 = ((($conv)) | 0) == 0;
					if ($cmp3) {
						__label__ = 4;
						break $for_cond$5;
					}
					var $7 = $pb;
					var $arrayidx6 = (($7) & 4294967295);
					var $8 = HEAPU8[($arrayidx6)];
					var $conv7 = ((($8)) & 255);
					var $9 = $lang2_addr;
					var $cmp8 = ((($conv7)) | 0) == ((($9)) | 0);
					var $10 = $pb;
					if ($cmp8) {
						__label__ = 7;
						break $for_cond$5;
					}
					var $arrayidx11 = (($10 + 2) & 4294967295);
					var $11 = HEAPU8[($arrayidx11)];
					var $conv12 = ((($11)) & 255);
					var $shl = ((($conv12) * 256) & 4294967295);
					var $12 = $pb;
					var $arrayidx13 = (($12 + 3) & 4294967295);
					var $13 = HEAPU8[($arrayidx13)];
					var $conv14 = ((($13)) & 255);
					var $add = ((($conv14) + ($shl)) & 4294967295);
					$len = $add;
					var $14 = $len;
					var $mul = ((($14) * 4) & 4294967295);
					var $15 = $pb;
					var $add_ptr = (($15 + $mul) & 4294967295);
					$pb = $add_ptr;
					__label__ = 3;
					continue $for_cond$5;
				}
				if (__label__ == 4) {
					$retval = 0;;
				} else if (__label__ == 7) {
					var $arrayidx15 = (($10 + 1) & 4294967295);
					var $16 = HEAPU8[($arrayidx15)];
					var $conv16 = ((($16)) & 255);
					$remove_stress = $conv16;
					var $17 = HEAP32[((_option_phonemes) >> 2)];
					var $cmp17 = ((($17)) | 0) == 2;
					if ($cmp17) {
						__label__ = 8;;
					} else {
						__label__ = 9;;
					}
					if (__label__ == 8) {
						var $18 = $phonemes_addr;
						var $arraydecay = (($phonbuf) & 4294967295);
						__Z14DecodePhonemesPKcPc($18, $arraydecay);
						var $19 = HEAP32[((_f_trans) >> 2)];
						var $20 = $lang2_addr;
						var $arrayidx19 = ((_phoneme_tab_list + $20 * 48) & 4294967295);
						var $name = (($arrayidx19) & 4294967295);
						var $arraydecay20 = (($name) & 4294967295);
						var $arraydecay21 = (($phonbuf) & 4294967295);
						var $21 = $tr_addr;
						var $phoneme_tab_ix22 = (($21 + 656) & 4294967295);
						var $22 = HEAP32[(($phoneme_tab_ix22) >> 2)];
						var $arrayidx23 = ((_phoneme_tab_list + $22 * 48) & 4294967295);
						var $name24 = (($arrayidx23) & 4294967295);
						var $arraydecay25 = (($name24) & 4294967295);
						var $call = _fprintf($19, ((__str543) & 4294967295), allocate([$arraydecay20, 0, 0, 0, $arraydecay21, 0, 0, 0, $arraydecay25, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
					}
					var $23 = $phonemes_addr;
					$p_in = $23;
					var $24 = $pb;
					var $arrayidx27 = (($24 + 8) & 4294967295);
					$eqlist = $arrayidx27;
					var $arraydecay28 = (($phonbuf) & 4294967295);
					$p_out = $arraydecay28;
					var $25 = $p_in;
					var $incdec_ptr1 = (($25 + 1) & 4294967295);
					$p_in = $incdec_ptr1;
					var $26 = HEAP8[($25)];
					$phon = $26;
					var $conv292 = (tempInt = (($26)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp303 = ((($conv292)) | 0) != 0;
					if ($cmp303) {
						__label__ = 10;;
					} else {
						__label__ = 20;;
					}
					$while_body$$while_end56$15: do {
						if (__label__ == 10) {
							$while_body$16: while (1) {
								var $27 = $remove_stress;
								var $tobool = ((($27)) | 0) != 0;
								if ($tobool) {
									__label__ = 11;;
								} else {
									__label__ = 13;;
								}
								$land_lhs_true$$if_end34$18: do {
									if (__label__ == 11) {
										var $28 = $phon;
										var $conv31 = (tempInt = (($28)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $and = ($conv31) & 255;
										var $cmp32 = ((($and)) | 0) < 8;
										if ($cmp32) {
											__label__ = 12;
											break $land_lhs_true$$if_end34$18;
										} else {
											__label__ = 13;
											break $land_lhs_true$$if_end34$18;
										}
									}
								} while (0);
								$while_cond_backedge$$if_end34$20: do {
									if (__label__ == 13) {
										var $31 = $eqlist;
										$p = $31;;
										while (1) {
											var $32 = $p;
											var $33 = HEAP8[($32)];
											var $conv36 = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp37 = ((($conv36)) | 0) != 0;
											if (!($cmp37)) {
												__label__ = 18;
												break;
											}
											var $34 = $p;
											var $arrayidx39 = (($34 + 1) & 4294967295);
											var $call40 = _strlen($arrayidx39);
											$len = $call40;
											var $35 = $p;
											var $36 = HEAP8[($35)];
											var $conv41 = (tempInt = (($36)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $37 = $phon;
											var $conv42 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp43 = ((($conv41)) | 0) == ((($conv42)) | 0);
											if ($cmp43) {
												__label__ = 16;
												break;
											}
											var $42 = $len;
											var $add49 = ((($42) + 2) & 4294967295);
											var $43 = $p;
											var $add_ptr50 = (($43 + $add49) & 4294967295);
											$p = $add_ptr50;
											__label__ = 14;
											continue;
										}
										if (__label__ == 16) {
											var $38 = $p_out;
											var $39 = $p;
											var $arrayidx45 = (($39 + 1) & 4294967295);
											var $call46 = _strcpy($38, $arrayidx45);
											var $40 = $len;
											var $41 = $p_out;
											var $add_ptr47 = (($41 + $40) & 4294967295);
											$p_out = $add_ptr47;;
										}
										var $44 = $p;
										var $45 = HEAP8[($44)];
										var $conv51 = (tempInt = (($45)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp52 = ((($conv51)) | 0) == 0;
										if (!($cmp52)) {
											__label__ = 12;
											break $while_cond_backedge$$if_end34$20;
										}
										var $46 = $phon;
										var $47 = $p_out;
										var $incdec_ptr54 = (($47 + 1) & 4294967295);
										$p_out = $incdec_ptr54;
										HEAP8[($47)] = $46;;
									}
								} while (0);
								var $29 = $p_in;
								var $incdec_ptr = (($29 + 1) & 4294967295);
								$p_in = $incdec_ptr;
								var $30 = HEAP8[($29)];
								$phon = $30;
								var $conv29 = (tempInt = (($30)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp30 = ((($conv29)) | 0) != 0;
								if ($cmp30) {
									__label__ = 10;
									continue $while_body$16;
								} else {
									__label__ = 20;
									break $while_body$$while_end56$15;
								}
							}
						}
					} while (0);
					var $48 = $p_out;
					HEAP8[($48)] = 0;
					var $49 = $remove_stress;
					var $tobool57 = ((($49)) | 0) != 0;
					if ($tobool57) {
						__label__ = 21;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 21) {
						var $50 = $tr_addr;
						var $arraydecay59 = (($phonbuf) & 4294967295);
						__Z13SetWordStressP10TranslatorPcPjii($50, $arraydecay59, 0, -1, 0);;
					}
					var $51 = $phonemes_addr;
					var $arraydecay61 = (($phonbuf) & 4294967295);
					var $call62 = _strcpy($51, $arraydecay61);
					var $52 = HEAP32[((_option_phonemes) >> 2)];
					var $cmp63 = ((($52)) | 0) == 2;
					if ($cmp63) {
						__label__ = 23;;
					} else {
						__label__ = 24;;
					}
					if (__label__ == 23) {
						var $53 = $tr_addr;
						var $phoneme_tab_ix65 = (($53 + 656) & 4294967295);
						var $54 = HEAP32[(($phoneme_tab_ix65) >> 2)];
						__Z18SelectPhonemeTablei($54);
						var $55 = $phonemes_addr;
						var $arraydecay66 = (($phonbuf) & 4294967295);
						__Z14DecodePhonemesPKcPc($55, $arraydecay66);
						var $56 = HEAP32[((_f_trans) >> 2)];
						var $arraydecay67 = (($phonbuf) & 4294967295);
						var $call68 = _fprintf($56, ((__str1544) & 4294967295), allocate([$arraydecay67, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
					}
					$retval = 1;;
				}
			}
			var $57 = $retval;
			STACKTOP = __stackBase__;
			return $57;
			return null;
		}

		function __Z13TranslateWordP10TranslatorPciP8WORD_TAB($tr, $word_start, $next_pause, $wtab) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 1656;
			_memset(__stackBase__, 0, 1656);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $word_start_addr;
			var $next_pause_addr;
			var $wtab_addr;
			var $word1 = __stackBase__;
			var $word_length;
			var $ix;
			var $p;
			var $pfix;
			var $n_chars;
			var $dictionary_flags = __stackBase__ + 4;
			var $dictionary_flags2 = __stackBase__ + 12;
			var $end_type;
			var $prefix_type;
			var $prefix_stress;
			var $wordx = __stackBase__ + 20;
			var $phonemes = __stackBase__ + 24;
			var $ph_limit;
			var $prefix_phonemes = __stackBase__ + 184;
			var $unpron_phonemes = __stackBase__ + 344;
			var $end_phonemes = __stackBase__ + 504;
			var $word_copy = __stackBase__ + 664;
			var $word_copy2 = __stackBase__ + 824;
			var $word_copy_length;
			var $prefix_chars = __stackBase__ + 984;
			var $found;
			var $end_flags;
			var $c_temp;
			var $first_char = __stackBase__ + 1052;
			var $last_char = __stackBase__ + 1056;
			var $add_plural_suffix;
			var $prefix_flags;
			var $confirm_prefix;
			var $spell_word;
			var $stress_bits;
			var $emphasize_allcaps;
			var $wflags;
			var $wmark;
			var $was_unpronouncable;
			var $wtab_null = __stackBase__ + 1060;
			var $posn;
			var $non_initial;
			var $length;
			var $wc = __stackBase__ + 1156;
			var $loopcount;
			var $end2;
			var $phonemes2 = __stackBase__ + 1160;
			var $end_phonemes2 = __stackBase__ + 1320;
			var $wordpf = __stackBase__ + 1480;
			var $prefix_phonemes2 = __stackBase__ + 1484;
			var $phonemes2482 = __stackBase__ + 1496;
			var $p659;
			$tr_addr = $tr;
			$word_start_addr = $word_start;
			$next_pause_addr = $next_pause;
			$wtab_addr = $wtab;
			$end_type = 0;
			$prefix_type = 0;
			$found = 0;
			HEAP32[(($last_char) >> 2)] = 0;
			$add_plural_suffix = 0;
			$prefix_flags = 0;
			$emphasize_allcaps = 0;
			$was_unpronouncable = 0;
			var $0 = $wtab_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $arraydecay = (($wtab_null) & 4294967295);
				var $1 = $arraydecay;
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = $1;
				$stop$ = $dest$ + 96;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};
				var $arraydecay1 = (($wtab_null) & 4294967295);
				$wtab_addr = $arraydecay1;;
			}
			var $2 = $wtab_addr;
			var $flags = (($2) & 4294967295);
			var $3 = HEAP32[(($flags) >> 2)];
			$wflags = $3;
			var $4 = $wtab_addr;
			var $wmark2 = (($4 + 9) & 4294967295);
			var $5 = HEAPU8[($wmark2)];
			var $conv = ((($5)) & 255);
			$wmark = $conv;
			var $arrayidx = (($dictionary_flags) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = 0;
			var $arrayidx3 = (($dictionary_flags + 4) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = 0;
			var $arrayidx4 = (($dictionary_flags2) & 4294967295);
			HEAP32[(($arrayidx4) >> 2)] = 0;
			var $arrayidx5 = (($dictionary_flags2 + 4) & 4294967295);
			HEAP32[(($arrayidx5) >> 2)] = 0;
			HEAP32[((_dictionary_skipwords) >> 2)] = 0;
			var $arrayidx6 = (($phonemes) & 4294967295);
			HEAP8[($arrayidx6)] = 0;
			var $arrayidx7 = (($unpron_phonemes) & 4294967295);
			HEAP8[($arrayidx7)] = 0;
			var $arrayidx8 = (($prefix_phonemes) & 4294967295);
			HEAP8[($arrayidx8)] = 0;
			var $arrayidx9 = (($end_phonemes) & 4294967295);
			HEAP8[($arrayidx9)] = 0;
			var $arrayidx10 = (($phonemes + 160) & 4294967295);
			$ph_limit = $arrayidx10;
			var $6 = $tr_addr;
			var $data_dictlist = (($6 + 1052) & 4294967295);
			var $7 = HEAP32[(($data_dictlist) >> 2)];
			var $cmp11 = ((($7)) | 0) == 0;
			if ($cmp11) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			$if_then12$$if_end13$5: do {
				if (__label__ == 3) {
					HEAP8[(((_word_phonemes) & 4294967295))] = 0;
					$retval = 0;;
				} else if (__label__ == 4) {
					var $8 = $word_start_addr;
					HEAP32[(($word1) >> 2)] = $8;
					var $9 = HEAP32[(($word1) >> 2)];
					var $10 = HEAP8[($9)];
					var $conv14 = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp15 = ((($conv14)) | 0) == 32;
					if ($cmp15) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $11 = HEAP32[(($word1) >> 2)];
						var $incdec_ptr = (($11 + 1) & 4294967295);
						HEAP32[(($word1) >> 2)] = $incdec_ptr;;
					}
					var $12 = HEAP32[(($word1) >> 2)];
					HEAP32[(($wordx) >> 2)] = $12;
					var $13 = HEAP32[(($wordx) >> 2)];
					var $call = __Z7utf8_inPiPKc($first_char, $13);
					$word_length = 0;;
					$while_cond$11: while (1) {
						var $14 = HEAP32[(($wordx) >> 2)];
						var $15 = HEAP8[($14)];
						var $conv18 = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp19 = ((($conv18)) | 0) != 0;
						var $16 = HEAP32[(($wordx) >> 2)];
						if ($cmp19) {
							__lastLabel__ = 7;;
						} else {
							__lastLabel__ = 7;
							__label__ = 10;
							break $while_cond$11;
						}
						var $17 = HEAP8[($16)];
						var $conv20 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp21 = ((($conv20)) | 0) != 32;
						var $18 = HEAP32[(($wordx) >> 2)];
						if ($cmp21) {
							__lastLabel__ = 8;;
						} else {
							__lastLabel__ = 8;
							__label__ = 10;
							break $while_cond$11;
						}
						var $call22 = __Z7utf8_inPiPKc($last_char, $18);
						var $19 = HEAP32[(($wordx) >> 2)];
						var $add_ptr = (($19 + $call22) & 4294967295);
						HEAP32[(($wordx) >> 2)] = $add_ptr;
						var $20 = $word_length;
						var $inc = ((($20) + 1) & 4294967295);
						$word_length = $inc;
						__label__ = 7;
						continue $while_cond$11;
					}
					var $21 = __lastLabel__ == 8 ? $18 : ($16);
					var $22 = $word_start_addr;
					var $sub_ptr_lhs_cast = ($21);
					var $sub_ptr_rhs_cast = ($22);
					var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
					$word_copy_length = $sub_ptr_sub;
					var $cmp23 = ((($sub_ptr_sub)) | 0) >= 160;
					if ($cmp23) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						$word_copy_length = 159;;
					}
					var $arraydecay26 = (($word_copy2) & 4294967295);
					var $23 = $word_start_addr;
					var $24 = $word_copy_length;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $23;
					$dest$ = $arraydecay26;
					$stop$ = $src$ + $24;
					if (($dest$ % 4) == ($src$ % 4) && $24 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					$spell_word = 0;
					var $25 = HEAP32[((_option_sayas) >> 2)];
					var $cmp27 = ((($25)) | 0) == 36;
					if ($cmp27) {
						__label__ = 13;;
					} else {
						__label__ = 16;;
					}
					if (__label__ == 13) {
						var $26 = $word_length;
						var $cmp29 = ((($26)) | 0) == 1;
						if ($cmp29) {
							__label__ = 14;;
						} else {
							__label__ = 15;;
						}
						if (__label__ == 14) {
							$spell_word = 4;;
						} else if (__label__ == 15) {
							var $27 = HEAP32[(($word1) >> 2)];
							var $incdec_ptr31 = (($27 + -1) & 4294967295);
							HEAP32[(($word1) >> 2)] = $incdec_ptr31;
							var $28 = HEAP32[(($word1) >> 2)];
							HEAP8[($28)] = 95;
							var $29 = $tr_addr;
							var $arraydecay32 = (($phonemes) & 4294967295);
							var $arraydecay33 = (($dictionary_flags) & 4294967295);
							var $30 = $wtab_addr;
							var $call34 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($29, $word1, $arraydecay32, $arraydecay33, 0, $30);
							$found = $call34;;
						}
					}
					var $31 = HEAP32[((_option_sayas) >> 2)];
					var $and = ($31) & 16;
					var $tobool = ((($and)) | 0) != 0;
					if ($tobool) {
						__label__ = 17;;
					} else {
						__label__ = 18;;
					}
					$if_then37$$if_else39$25: do {
						if (__label__ == 17) {
							var $32 = HEAP32[((_option_sayas) >> 2)];
							var $and38 = ($32) & 15;
							$spell_word = $and38;
							__lastLabel__ = 17;
							__label__ = 70;
							break $if_then37$$if_else39$25;
						} else if (__label__ == 18) {
							var $33 = $found;
							var $tobool40 = ((($33)) | 0) != 0;
							if ($tobool40) {
								__label__ = 20;;
							} else {
								__label__ = 19;;
							}
							if (__label__ == 19) {
								var $34 = $tr_addr;
								var $arraydecay42 = (($phonemes) & 4294967295);
								var $arraydecay43 = (($dictionary_flags) & 4294967295);
								var $35 = $wtab_addr;
								var $call44 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($34, $word1, $arraydecay42, $arraydecay43, 2, $35);
								$found = $call44;;
							}
							var $arrayidx46 = (($dictionary_flags) & 4294967295);
							var $36 = HEAP32[(($arrayidx46) >> 2)];
							var $and47 = ($36) & 1;
							var $tobool48 = ((($and47)) | 0) != 0;
							if ($tobool48) {
								__label__ = 21;;
							} else {
								__label__ = 23;;
							}
							$land_lhs_true$$if_end54$31: do {
								if (__label__ == 21) {
									var $37 = HEAP32[(($wordx) >> 2)];
									var $arrayidx49 = (($37 + 1) & 4294967295);
									var $38 = HEAP8[($arrayidx49)];
									var $conv50 = (tempInt = (($38)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp51 = ((($conv50)) | 0) == 46;
									if (!($cmp51)) {
										__label__ = 23;
										break $land_lhs_true$$if_end54$31;
									}
									var $39 = HEAP32[(($wordx) >> 2)];
									var $arrayidx53 = (($39 + 1) & 4294967295);
									HEAP8[($arrayidx53)] = 32;;
								}
							} while (0);
							var $arrayidx55 = (($dictionary_flags) & 4294967295);
							var $40 = HEAP32[(($arrayidx55) >> 2)];
							var $and56 = ($40) & 536870912;
							var $tobool57 = ((($and56)) | 0) != 0;
							if ($tobool57) {
								__label__ = 24;;
							} else {
								__label__ = 27;;
							}
							$if_then58$$if_else80$35: do {
								if (__label__ == 24) {
									var $41 = HEAP32[(($word1) >> 2)];
									var $arrayidx59 = (($41) & 4294967295);
									var $42 = HEAP8[($arrayidx59)];
									var $conv60 = (tempInt = (($42)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									HEAP32[(($first_char) >> 2)] = $conv60;
									var $arrayidx61 = (($dictionary_flags) & 4294967295);
									var $43 = HEAP32[(($arrayidx61) >> 2)];
									var $and62 = ($43) & 127;
									$stress_bits = $and62;
									var $44 = $tr_addr;
									var $arraydecay63 = (($phonemes) & 4294967295);
									var $arraydecay64 = (($dictionary_flags2) & 4294967295);
									var $45 = $wtab_addr;
									var $call65 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($44, $word1, $arraydecay63, $arraydecay64, 0, $45);
									$found = $call65;
									var $arrayidx66 = (($dictionary_flags2) & 4294967295);
									var $46 = HEAP32[(($arrayidx66) >> 2)];
									var $cmp67 = ((($46)) | 0) != 0;
									if (!($cmp67)) {
										__label__ = 33;
										break $if_then58$$if_else80$35;
									}
									var $arrayidx69 = (($dictionary_flags2) & 4294967295);
									var $47 = HEAP32[(($arrayidx69) >> 2)];
									var $arrayidx70 = (($dictionary_flags) & 4294967295);
									HEAP32[(($arrayidx70) >> 2)] = $47;
									var $arrayidx71 = (($dictionary_flags2 + 4) & 4294967295);
									var $48 = HEAP32[(($arrayidx71) >> 2)];
									var $arrayidx72 = (($dictionary_flags + 4) & 4294967295);
									HEAP32[(($arrayidx72) >> 2)] = $48;
									var $49 = $stress_bits;
									var $cmp73 = ((($49)) | 0) != 0;
									if (!($cmp73)) {
										__label__ = 33;
										break $if_then58$$if_else80$35;
									}
									var $arrayidx75 = (($dictionary_flags) & 4294967295);
									var $50 = HEAP32[(($arrayidx75) >> 2)];
									var $and76 = ($50) & -128;
									var $51 = $stress_bits;
									var $or = ($and76) | ($51);
									var $arrayidx77 = (($dictionary_flags) & 4294967295);
									HEAP32[(($arrayidx77) >> 2)] = $or;;
								} else if (__label__ == 27) {
									var $52 = $found;
									var $cmp81 = ((($52)) | 0) == 0;
									if (!($cmp81)) {
										__label__ = 33;
										break $if_then58$$if_else80$35;
									}
									var $arrayidx83 = (($dictionary_flags) & 4294967295);
									var $53 = HEAP32[(($arrayidx83) >> 2)];
									var $and84 = ($53) & 128;
									var $tobool85 = ((($and84)) | 0) != 0;
									if (!($tobool85)) {
										__label__ = 33;
										break $if_then58$$if_else80$35;
									}
									var $54 = HEAP32[(($word1) >> 2)];
									HEAP32[(($wordx) >> 2)] = $54;
									$ix = 0;
									var $55 = $ix;
									var $56 = HEAP32[((_dictionary_skipwords) >> 2)];
									var $cmp8815 = ((($55)) | 0) < ((($56)) | 0);
									if (!($cmp8815)) {
										__label__ = 33;
										break $if_then58$$if_else80$35;
									}
									while (1) {
										var $57 = HEAP32[(($wordx) >> 2)];
										var $58 = HEAP8[($57)];
										var $conv90 = (tempInt = (($58)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp91 = ((($conv90)) | 0) == 32;
										if ($cmp91) {
											__label__ = 31;;
										} else {
											__label__ = 32;;
										}
										if (__label__ == 31) {
											var $59 = HEAP32[(($wordx) >> 2)];
											HEAP8[($59)] = 45;
											var $60 = $ix;
											var $inc93 = ((($60) + 1) & 4294967295);
											$ix = $inc93;;
										}
										var $61 = HEAP32[(($wordx) >> 2)];
										var $incdec_ptr95 = (($61 + 1) & 4294967295);
										HEAP32[(($wordx) >> 2)] = $incdec_ptr95;
										var $62 = $ix;
										var $63 = HEAP32[((_dictionary_skipwords) >> 2)];
										var $cmp88 = ((($62)) | 0) < ((($63)) | 0);
										if ($cmp88) {
											__label__ = 30;
											continue;
										} else {
											__label__ = 33;
											break $if_then58$$if_else80$35;
										}
									}
								}
							} while (0);
							var $64 = $word_length;
							var $cmp99 = ((($64)) | 0) == 1;
							var $65 = HEAP32[((_dictionary_skipwords) >> 2)];
							var $cmp101 = ((($65)) | 0) == 0;
							var $or_cond = ($cmp99) & ($cmp101);
							if ($or_cond) {
								__label__ = 34;;
							} else {
								__label__ = 37;;
							}
							$if_then102$$if_end113$48: do {
								if (__label__ == 34) {
									var $66 = HEAP32[(($word1) >> 2)];
									var $67 = $wtab_addr;
									var $call103 = __ZL17CheckDottedAbbrevPcP8WORD_TAB($66, $67);
									var $tobool104 = ((($call103)) | 0) != 0;
									if (!($tobool104)) {
										__label__ = 37;
										break $if_then102$$if_end113$48;
									}
									var $arrayidx106 = (($dictionary_flags) & 4294967295);
									HEAP32[(($arrayidx106) >> 2)] = 0;
									var $arrayidx107 = (($dictionary_flags + 4) & 4294967295);
									HEAP32[(($arrayidx107) >> 2)] = 0;
									$spell_word = 1;
									var $68 = HEAP32[((_dictionary_skipwords) >> 2)];
									var $tobool108 = ((($68)) | 0) != 0;
									if (!($tobool108)) {
										__label__ = 37;
										break $if_then102$$if_end113$48;
									}
									var $arrayidx110 = (($dictionary_flags) & 4294967295);
									HEAP32[(($arrayidx110) >> 2)] = 128;;
								}
							} while (0);
							var $arrayidx114 = (($phonemes) & 4294967295);
							var $69 = HEAP8[($arrayidx114)];
							var $conv115 = (tempInt = (($69)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp116 = ((($conv115)) | 0) == 21;
							if ($cmp116) {
								__label__ = 38;;
							} else {
								__label__ = 39;;
							}
							if (__label__ == 38) {
								var $arraydecay118 = (($phonemes) & 4294967295);
								var $call119 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay118);
								$retval = 0;
								__label__ = 236;
								break $if_then12$$if_end13$5;
							} else if (__label__ == 39) {
								var $70 = $wmark;
								var $cmp121 = ((($70)) | 0) > 0;
								var $71 = $wmark;
								var $cmp123 = ((($71)) | 0) < 8;
								var $or_cond1 = ($cmp121) & ($cmp123);
								if ($or_cond1) {
									__label__ = 40;;
								} else {
									__label__ = 41;;
								}
								if (__label__ == 40) {
									var $arrayidx125 = (($dictionary_flags) & 4294967295);
									var $72 = HEAP32[(($arrayidx125) >> 2)];
									var $and126 = ($72) & -16;
									var $73 = $wmark;
									var $or127 = ($and126) | ($73);
									var $arrayidx128 = (($dictionary_flags) & 4294967295);
									HEAP32[(($arrayidx128) >> 2)] = $or127;;
								}
								var $74 = $found;
								var $tobool130 = ((($74)) | 0) != 0;
								if ($tobool130) {
									__label__ = 49;;
								} else {
									__label__ = 42;;
								}
								$if_end150$$land_lhs_true131$59: do {
									if (__label__ == 42) {
										var $arrayidx132 = (($dictionary_flags) & 4294967295);
										var $75 = HEAP32[(($arrayidx132) >> 2)];
										var $and133 = ($75) & 131072;
										var $tobool134 = ((($and133)) | 0) != 0;
										if ($tobool134) {
											__label__ = 43;;
										} else {
											__label__ = 44;;
										}
										if (__label__ == 43) {
											$spell_word = 1;;
										}
										var $_pr = $found;
										var $tobool137 = ((($_pr)) | 0) != 0;
										if ($tobool137) {
											__label__ = 49;
											break $if_end150$$land_lhs_true131$59;
										}
										var $76 = HEAP32[(($first_char) >> 2)];
										var $call139 = _iswdigit($76);
										var $tobool140 = ((($call139)) | 0) != 0;
										if (!($tobool140)) {
											__label__ = 49;
											break $if_end150$$land_lhs_true131$59;
										}
										var $77 = $tr_addr;
										var $call142 = __Z6LookupP10TranslatorPKcPc($77, ((__str2545) & 4294967295), ((_word_phonemes) & 4294967295));
										var $78 = HEAP8[(((_word_phonemes) & 4294967295))];
										var $conv143 = (tempInt = (($78)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp144 = ((($conv143)) | 0) == 21;
										if ($cmp144) {
											__label__ = 47;;
										} else {
											__label__ = 48;;
										}
										if (__label__ == 47) {
											$retval = 0;
											__label__ = 236;
											break $if_then12$$if_end13$5;
										} else if (__label__ == 48) {
											var $79 = $tr_addr;
											var $80 = HEAP32[(($word1) >> 2)];
											var $arraydecay147 = (($phonemes) & 4294967295);
											var $arraydecay148 = (($dictionary_flags) & 4294967295);
											var $81 = $wtab_addr;
											var $call149 = __Z15TranslateNumberP10TranslatorPcS1_PjP8WORD_TABi($79, $80, $arraydecay147, $arraydecay148, $81, 0);
											$found = $call149;;
										}
									}
								} while (0);
								var $82 = $found;
								var $tobool151 = ((($82)) | 0) != 0;
								var $lnot = ($tobool151) ^ 1;
								var $conv152 = ((($lnot)) & 1);
								var $83 = $wflags;
								var $and153 = ($83) & 3;
								var $cmp154 = ((($and153)) | 0) != 2;
								var $conv155 = ((($cmp154)) & 1);
								var $and156 = ($conv155) & ($conv152);
								var $tobool157 = ((($and156)) | 0) != 0;
								if ($tobool157) {
									__label__ = 50;;
								} else {
									__label__ = 57;;
								}
								$if_then158$$if_end186$70: do {
									if (__label__ == 50) {
										var $84 = $tr_addr;
										var $langopts = (($84) & 4294967295);
										var $numbers = (($langopts + 184) & 4294967295);
										var $85 = HEAP32[(($numbers) >> 2)];
										var $and159 = ($85) & 16777216;
										var $tobool160 = ((($and159)) | 0) != 0;
										if ($tobool160) {
											__label__ = 53;;
										} else {
											__label__ = 51;;
										}
										if (__label__ == 51) {
											var $86 = $tr_addr;
											var $langopts161 = (($86) & 4294967295);
											var $numbers162 = (($langopts161 + 184) & 4294967295);
											var $87 = HEAP32[(($numbers162) >> 2)];
											var $and163 = ($87) & 33554432;
											var $tobool164 = ((($and163)) | 0) != 0;
											if (!($tobool164)) {
												__label__ = 57;
												break $if_then158$$if_end186$70;
											}
											var $88 = $wflags;
											var $and166 = ($88) & 1;
											var $tobool167 = ((($and166)) | 0) != 0;
											if (!($tobool167)) {
												__label__ = 57;
												break $if_then158$$if_end186$70;
											}
										}
										var $89 = $wflags;
										var $and169 = ($89) & 16;
										var $tobool170 = ((($and169)) | 0) != 0;
										if ($tobool170) {
											__label__ = 55;;
										} else {
											__label__ = 54;;
										}
										if (__label__ == 54) {
											var $90 = $wtab_addr;
											var $arrayidx172 = (($90 + 12) & 4294967295);
											var $flags173 = (($arrayidx172) & 4294967295);
											var $91 = HEAP32[(($flags173) >> 2)];
											var $and174 = ($91) & 256;
											var $tobool175 = ((($and174)) | 0) != 0;
											if ($tobool175) {
												__label__ = 57;
												break $if_then158$$if_end186$70;
											}
										}
										var $92 = $tr_addr;
										var $93 = HEAP32[(($word1) >> 2)];
										var $arraydecay177 = (($phonemes) & 4294967295);
										var $94 = $wtab_addr;
										var $call178 = __Z14TranslateRomanP10TranslatorPcS1_P8WORD_TAB($92, $93, $arraydecay177, $94);
										$found = $call178;
										var $cmp179 = ((($call178)) | 0) != 0;
										if (!($cmp179)) {
											__label__ = 57;
											break $if_then158$$if_end186$70;
										}
										var $arrayidx181 = (($dictionary_flags) & 4294967295);
										var $95 = HEAP32[(($arrayidx181) >> 2)];
										var $or182 = ($95) | 131072;
										HEAP32[(($arrayidx181) >> 2)] = $or182;;
									}
								} while (0);
								var $96 = $wflags;
								var $and187 = ($96) & 1;
								var $tobool188 = ((($and187)) | 0) != 0;
								if ($tobool188) {
									__label__ = 58;;
								} else {
									__label__ = 69;;
								}
								$land_lhs_true189$$if_end219thread_pre_split$81: do {
									if (__label__ == 58) {
										var $97 = $word_length;
										var $cmp190 = ((($97)) | 0) > 1;
										if (!($cmp190)) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										var $98 = HEAP32[(($first_char) >> 2)];
										var $call192 = _iswalpha($98);
										var $tobool193 = ((($call192)) | 0) != 0;
										if (!($tobool193)) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										var $99 = HEAP32[((_option_tone_flags) >> 2)];
										var $and195 = ($99) & 256;
										var $tobool196 = ((($and195)) | 0) != 0;
										if ($tobool196) {
											__label__ = 61;;
										} else {
											__label__ = 63;;
										}
										$land_lhs_true197$$if_else202$85: do {
											if (__label__ == 61) {
												var $arrayidx198 = (($dictionary_flags) & 4294967295);
												var $100 = HEAP32[(($arrayidx198) >> 2)];
												var $and199 = ($100) & 131072;
												var $tobool200 = ((($and199)) | 0) != 0;
												if ($tobool200) {
													__label__ = 63;
													break $land_lhs_true197$$if_else202$85;
												}
												$emphasize_allcaps = 2048;
												__label__ = 69;
												break $land_lhs_true189$$if_end219thread_pre_split$81;
											}
										} while (0);
										var $101 = $found;
										var $tobool203 = ((($101)) | 0) != 0;
										if ($tobool203) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										var $arrayidx205 = (($dictionary_flags) & 4294967295);
										var $102 = HEAP32[(($arrayidx205) >> 2)];
										var $and206 = ($102) & 128;
										var $tobool207 = ((($and206)) | 0) != 0;
										if ($tobool207) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										var $103 = $word_length;
										var $cmp209 = ((($103)) | 0) < 4;
										if (!($cmp209)) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										var $104 = $tr_addr;
										var $clause_lower_count = (($104 + 8308) & 4294967295);
										var $105 = HEAP32[(($clause_lower_count) >> 2)];
										var $cmp211 = ((($105)) | 0) > 3;
										if (!($cmp211)) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										var $106 = $tr_addr;
										var $clause_upper_count = (($106 + 8304) & 4294967295);
										var $107 = HEAP32[(($clause_upper_count) >> 2)];
										var $108 = $tr_addr;
										var $clause_lower_count213 = (($108 + 8308) & 4294967295);
										var $109 = HEAP32[(($clause_lower_count213) >> 2)];
										var $cmp214 = ((($107)) | 0) <= ((($109)) | 0);
										if (!($cmp214)) {
											__label__ = 69;
											break $land_lhs_true189$$if_end219thread_pre_split$81;
										}
										$spell_word = 1;
										__label__ = 71;
										break $if_then37$$if_else39$25;
									}
								} while (0);
								var $_pr5 = $spell_word;
								__lastLabel__ = 69;
								__label__ = 70;
								break $if_then37$$if_else39$25;
							}
						}
					} while (0);
					$if_end219$$if_then221$95: do {
						if (__label__ == 70) {
							var $110 = __lastLabel__ == 69 ? $_pr5 : ($and38);
							var $cmp220 = ((($110)) | 0) > 0;
							if ($cmp220) {
								__label__ = 71;
								break $if_end219$$if_then221$95;
							}
							var $115 = $found;
							var $cmp232 = ((($115)) | 0) == 0;
							if (!($cmp232)) {
								__label__ = 166;
								break $if_end219$$if_then221$95;
							}
							$posn = 0;
							$non_initial = 0;
							$length = 999;
							var $116 = HEAP32[(($word1) >> 2)];
							HEAP32[(($wordx) >> 2)] = $116;
							var $arraydecay252 = (($unpron_phonemes) & 4294967295);
							var $arrayidx256 = (($unpron_phonemes) & 4294967295);;
							$while_cond234$99: while (1) {
								var $117 = $length;
								var $cmp235 = ((($117)) | 0) < 3;
								var $118 = $length;
								var $cmp237 = ((($118)) | 0) > 0;
								var $or_cond2 = ($cmp235) & ($cmp237);
								if ($or_cond2) {
									__label__ = 80;;
								} else {
									__label__ = 78;;
								}
								if (__label__ == 78) {
									var $119 = $word_length;
									var $cmp238 = ((($119)) | 0) > 1;
									if (!($cmp238)) {
										__label__ = 89;
										break $while_cond234$99;
									}
									var $120 = $tr_addr;
									var $121 = HEAP32[(($wordx) >> 2)];
									var $122 = $posn;
									var $call240 = __Z14UnpronouncableP10TranslatorPci($120, $121, $122);
									var $tobool241 = ((($call240)) | 0) != 0;
									if (!($tobool241)) {
										__label__ = 89;
										break $while_cond234$99;
									}
								}
								$was_unpronouncable = 67108864;
								$emphasize_allcaps = 0;
								var $123 = HEAP32[(($wordx) >> 2)];
								var $arrayidx244 = (($123) & 4294967295);
								var $124 = HEAP8[($arrayidx244)];
								var $conv245 = (tempInt = (($124)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp246 = ((($conv245)) | 0) == 39;
								if ($cmp246) {
									__label__ = 89;
									break $while_cond234$99;
								}
								var $125 = $posn;
								var $cmp249 = ((($125)) | 0) > 0;
								if ($cmp249) {
									__label__ = 82;;
								} else {
									__label__ = 83;;
								}
								if (__label__ == 82) {
									$non_initial = 1;;
								}
								var $126 = $tr_addr;
								var $127 = HEAP32[(($wordx) >> 2)];
								var $128 = $non_initial;
								var $call253 = __Z15TranslateLetterP10TranslatorPcS1_i($126, $127, $arraydecay252, $128);
								var $129 = HEAP32[(($wordx) >> 2)];
								var $add_ptr254 = (($129 + $call253) & 4294967295);
								HEAP32[(($wordx) >> 2)] = $add_ptr254;
								var $130 = $posn;
								var $inc255 = ((($130) + 1) & 4294967295);
								$posn = $inc255;
								var $131 = HEAP8[($arrayidx256)];
								var $conv257 = (tempInt = (($131)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp258 = ((($conv257)) | 0) == 21;
								if ($cmp258) {
									__label__ = 84;
									break $while_cond234$99;
								}
								$length = 0;
								var $132 = $length;
								var $133 = HEAP32[(($wordx) >> 2)];
								var $arrayidx26921 = (($133 + $132) & 4294967295);
								var $134 = HEAP8[($arrayidx26921)];
								var $conv27022 = (tempInt = (($134)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp27123 = ((($conv27022)) | 0) != 32;
								if (!($cmp27123)) {
									__label__ = 77;
									continue $while_cond234$99;
								}
								while (1) {
									var $135 = $length;
									var $inc273 = ((($135) + 1) & 4294967295);
									$length = $inc273;
									var $136 = $length;
									var $137 = HEAP32[(($wordx) >> 2)];
									var $arrayidx269 = (($137 + $136) & 4294967295);
									var $138 = HEAP8[($arrayidx269)];
									var $conv270 = (tempInt = (($138)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp271 = ((($conv270)) | 0) != 32;
									if ($cmp271) {
										__label__ = 88;
										continue;
									} else {
										__label__ = 77;
										continue $while_cond234$99;
									}
								}
							}
							if (__label__ == 89) {
								var $139 = $tr_addr;
								var $arraydecay276 = (($unpron_phonemes) & 4294967295);
								var $140 = $posn;
								__Z17SetSpellingStressP10TranslatorPcii($139, $arraydecay276, 0, $140);
								var $141 = HEAP32[(($wordx) >> 2)];
								var $142 = HEAP8[($141)];
								var $conv277 = (tempInt = (($142)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp278 = ((($conv277)) | 0) != 32;
								if (!($cmp278)) {
									__label__ = 166;
									break $if_end219$$if_then221$95;
								}
								var $arrayidx280 = (($unpron_phonemes) & 4294967295);
								var $143 = HEAP8[($arrayidx280)];
								var $conv281 = (tempInt = (($143)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp282 = ((($conv281)) | 0) != 0;
								if ($cmp282) {
									__label__ = 91;;
								} else {
									__label__ = 93;;
								}
								$land_lhs_true283$$if_end289$115: do {
									if (__label__ == 91) {
										var $144 = HEAP32[(($wordx) >> 2)];
										var $arrayidx284 = (($144) & 4294967295);
										var $145 = HEAP8[($arrayidx284)];
										var $conv285 = (tempInt = (($145)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp286 = ((($conv285)) | 0) != 39;
										if (!($cmp286)) {
											__label__ = 93;
											break $land_lhs_true283$$if_end289$115;
										}
										var $146 = HEAP32[(($wordx) >> 2)];
										var $arrayidx288 = (($146 + -1) & 4294967295);
										HEAP8[($arrayidx288)] = 32;;
									}
								} while (0);
								var $147 = $tr_addr;
								var $148 = HEAP32[(($wordx) >> 2)];
								var $arraydecay290 = (($phonemes) & 4294967295);
								var $arraydecay291 = (($end_phonemes) & 4294967295);
								var $149 = $wflags;
								var $arraydecay292 = (($dictionary_flags) & 4294967295);
								var $call293 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($147, $148, $arraydecay290, 160, $arraydecay291, $149, $arraydecay292);
								$end_type = $call293;
								var $arrayidx294 = (($phonemes) & 4294967295);
								var $150 = HEAP8[($arrayidx294)];
								var $conv295 = (tempInt = (($150)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp296 = ((($conv295)) | 0) == 21;
								var $arraydecay298 = (($phonemes) & 4294967295);
								if ($cmp296) {
									__label__ = 94;;
								} else {
									__label__ = 95;;
								}
								if (__label__ == 94) {
									var $call299 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay298);
									$retval = 0;
									__label__ = 236;
									break $if_then12$$if_end13$5;
								} else if (__label__ == 95) {
									var $151 = HEAP8[($arraydecay298)];
									var $conv302 = (tempInt = (($151)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp303 = ((($conv302)) | 0) == 0;
									if ($cmp303) {
										__label__ = 96;;
									} else {
										__label__ = 101;;
									}
									$land_lhs_true304$$if_end321$122: do {
										if (__label__ == 96) {
											var $arrayidx305 = (($end_phonemes) & 4294967295);
											var $152 = HEAP8[($arrayidx305)];
											var $conv306 = (tempInt = (($152)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp307 = ((($conv306)) | 0) == 0;
											if (!($cmp307)) {
												__label__ = 101;
												break $land_lhs_true304$$if_end321$122;
											}
											var $153 = HEAP32[(($wordx) >> 2)];
											var $call309 = __Z7utf8_inPiPKc($wc, $153);
											var $154 = $word_length;
											var $cmp310 = ((($154)) | 0) == 1;
											if (!($cmp310)) {
												__label__ = 101;
												break $land_lhs_true304$$if_end321$122;
											}
											var $155 = HEAP32[(($wc) >> 2)];
											var $call312 = __Z7IsAlphaj($155);
											var $tobool313 = ((($call312)) | 0) != 0;
											if (!($tobool313)) {
												__label__ = 101;
												break $land_lhs_true304$$if_end321$122;
											}
											var $156 = $tr_addr;
											var $157 = HEAP32[(($wordx) >> 2)];
											var $arraydecay315 = (($phonemes) & 4294967295);
											var $158 = $spell_word;
											var $call316 = __ZL22SpeakIndividualLettersP10TranslatorPcS1_i($156, $157, $arraydecay315, $158);
											HEAP32[(($wordx) >> 2)] = $call316;
											var $cmp317 = ((($call316)) | 0) == 0;
											if (!($cmp317)) {
												__label__ = 101;
												break $land_lhs_true304$$if_end321$122;
											}
											$retval = 0;
											__label__ = 236;
											break $if_then12$$if_end13$5;
										}
									} while (0);
									var $159 = HEAP32[(($wordx) >> 2)];
									var $arrayidx322 = (($159 + -1) & 4294967295);
									var $160 = HEAP8[($arrayidx322)];
									$c_temp = $160;
									$found = 0;
									$confirm_prefix = 1;
									$loopcount = 0;
									var $arrayidx333 = (($phonemes2) & 4294967295);
									var $arraydecay334 = (($phonemes2) & 4294967295);
									var $arraydecay335 = (($end_phonemes2) & 4294967295);
									var $arraydecay338 = (($dictionary_flags) & 4294967295);
									var $arraydecay342 = (($word_copy) & 4294967295);
									var $arraydecay344 = (($phonemes) & 4294967295);
									var $arraydecay345 = (($end_phonemes) & 4294967295);
									var $arraydecay347 = (($dictionary_flags) & 4294967295);
									var $arraydecay349 = (($word_copy) & 4294967295);
									var $arraydecay350 = (($word_copy) & 4294967295);
									var $arraydecay355 = (($phonemes) & 4294967295);
									var $arraydecay356 = (($phonemes2) & 4294967295);
									var $arraydecay358 = (($end_phonemes) & 4294967295);
									var $arraydecay359 = (($end_phonemes2) & 4294967295);
									var $arraydecay363 = (($end_phonemes) & 4294967295);
									var $arraydecay364 = (($end_phonemes2) & 4294967295);
									var $arraydecay365 = (($end_phonemes2) & 4294967295);
									var $arraydecay418 = (($prefix_phonemes2) & 4294967295);
									var $arraydecay419 = (($end_phonemes) & 4294967295);
									var $arrayidx420 = (($prefix_chars + 1) & 4294967295);
									var $arraydecay421 = (($prefix_phonemes) & 4294967295);
									var $arraydecay422 = (($phonemes) & 4294967295);
									var $arraydecay424 = (($phonemes) & 4294967295);
									var $arraydecay425 = (($dictionary_flags) & 4294967295);
									var $arraydecay429 = (($prefix_phonemes) & 4294967295);
									var $arraydecay430 = (($phonemes) & 4294967295);
									var $arrayidx433 = (($dictionary_flags) & 4294967295);
									var $arrayidx437 = (($prefix_phonemes) & 4294967295);
									var $arraydecay438 = (($prefix_phonemes) & 4294967295);
									var $arrayidx446 = (($end_phonemes) & 4294967295);
									var $arraydecay447 = (($phonemes) & 4294967295);
									var $arraydecay448 = (($dictionary_flags2) & 4294967295);
									var $arrayidx450 = (($dictionary_flags) & 4294967295);
									var $arrayidx453 = (($dictionary_flags2) & 4294967295);
									var $arrayidx454 = (($dictionary_flags) & 4294967295);
									var $arrayidx455 = (($dictionary_flags2 + 4) & 4294967295);
									var $arrayidx456 = (($dictionary_flags + 4) & 4294967295);
									var $arraydecay461 = (($phonemes) & 4294967295);
									var $arraydecay462 = (($end_phonemes) & 4294967295);
									var $arraydecay463 = (($dictionary_flags) & 4294967295);
									var $arrayidx465 = (($phonemes) & 4294967295);
									var $arraydecay442 = (($prefix_phonemes) & 4294967295);
									var $arraydecay443 = (($end_phonemes) & 4294967295);
									var $arrayidx392 = (($prefix_chars) & 4294967295);
									__lastLabel__ = 101;;
									$for_cond$129: while (1) {
										var $161 = __lastLabel__ == 136 ? $inc475 : (0);
										var $cmp323 = ((($161)) | 0) < 50;
										var $162 = $end_type;
										if (!($cmp323)) {
											__label__ = 137;
											break $for_cond$129;
										}
										var $and325 = ($162) & 1024;
										var $tobool326 = ((($and325)) | 0) != 0;
										if (!($tobool326)) {
											__label__ = 137;
											break $for_cond$129;
										}
										var $163 = $confirm_prefix;
										var $tobool328 = ((($163)) | 0) != 0;
										if ($tobool328) {
											__label__ = 105;;
										} else {
											__label__ = 111;;
										}
										$land_lhs_true329$$if_end370$133: do {
											if (__label__ == 105) {
												var $164 = $end_type;
												var $and330 = ($164) & 131072;
												var $tobool331 = ((($and330)) | 0) != 0;
												if ($tobool331) {
													__label__ = 111;
													break $land_lhs_true329$$if_end370$133;
												}
												HEAP8[($arrayidx333)] = 0;
												var $165 = $tr_addr;
												var $166 = HEAP32[(($wordx) >> 2)];
												var $167 = $wflags;
												var $or337 = ($167) | 805306368;
												var $call339 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($165, $166, $arraydecay334, 160, $arraydecay335, $or337, $arraydecay338);
												$end2 = $call339;
												var $168 = $end2;
												var $tobool340 = ((($168)) | 0) != 0;
												if (!($tobool340)) {
													__label__ = 111;
													break $land_lhs_true329$$if_end370$133;
												}
												var $169 = $tr_addr;
												var $170 = HEAP32[(($wordx) >> 2)];
												var $171 = $end2;
												var $call343 = __Z12RemoveEndingP10TranslatorPciS1_($169, $170, $171, $arraydecay342);
												var $172 = $tr_addr;
												var $173 = HEAP32[(($wordx) >> 2)];
												var $174 = $wflags;
												var $or346 = ($174) | 268435456;
												var $call348 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($172, $173, $arraydecay344, 160, $arraydecay345, $or346, $arraydecay347);
												$end_type = $call348;
												var $175 = HEAP32[(($wordx) >> 2)];
												var $call351 = _strlen($arraydecay350);
												var $src$, $dest$, $stop$, $stop4$, $fast$;
												$src$ = $arraydecay349;
												$dest$ = $175;
												$stop$ = $src$ + $call351;
												if (($dest$ % 4) == ($src$ % 4) && $call351 > 8) {
													while ($src$ % 4 !== 0 && $src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													}
													$src$ >>= 2;
													$dest$ >>= 2;
													$stop4$ = $stop$ >> 2;
													while ($src$ < $stop4$) {;;;
														HEAP32[$dest$++] = HEAP32[$src$++];
													}
													$src$ <<= 2;
													$dest$ <<= 2;
												}
												while ($src$ < $stop$) {;
													HEAP8[$dest$++] = HEAP8[$src$++];
												};
												var $176 = $end_type;
												var $and352 = ($176) & 1024;
												var $cmp353 = ((($and352)) | 0) == 0;
												if ($cmp353) {
													__label__ = 108;;
												} else {
													__label__ = 110;;
												}
												$if_then354$$if_end368$137: do {
													if (__label__ == 108) {
														var $177 = $end2;
														$end_type = $177;
														var $call357 = _strcpy($arraydecay355, $arraydecay356);
														var $call360 = _strcpy($arraydecay358, $arraydecay359);
														var $178 = HEAP32[((_option_phonemes) >> 2)];
														var $cmp361 = ((($178)) | 0) == 2;
														if (!($cmp361)) {
															__label__ = 110;
															break $if_then354$$if_end368$137;
														}
														__Z14DecodePhonemesPKcPc($arraydecay363, $arraydecay364);
														var $179 = HEAP32[((_f_trans) >> 2)];
														var $call366 = _fprintf($179, ((__str4547) & 4294967295), allocate([$arraydecay365, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
													}
												} while (0);
												$confirm_prefix = 0;
												__label__ = 136;
												break $land_lhs_true329$$if_end370$133;
											}
										} while (0);
										$if_end370$$for_inc474$141: do {
											if (__label__ == 111) {
												var $180 = $end_type;
												$prefix_type = $180;
												var $181 = $prefix_type;
												var $and371 = ($181) & 2048;
												var $tobool372 = ((($and371)) | 0) != 0;
												if ($tobool372) {
													__label__ = 112;;
												} else {
													__label__ = 113;;
												}
												if (__label__ == 112) {
													var $182 = $tr_addr;
													var $expect_verb = (($182 + 8272) & 4294967295);
													HEAP32[(($expect_verb) >> 2)] = 1;;
												}
												var $183 = $c_temp;
												var $184 = HEAP32[(($wordx) >> 2)];
												var $arrayidx375 = (($184 + -1) & 4294967295);
												HEAP8[($arrayidx375)] = $183;
												var $185 = $prefix_type;
												var $and376 = ($185) & 131072;
												var $cmp377 = ((($and376)) | 0) == 0;
												if ($cmp377) {
													__label__ = 114;;
												} else {
													__label__ = 118;;
												}
												$if_then378$$if_else391$146: do {
													if (__label__ == 114) {
														var $186 = $prefix_type;
														var $and379 = ($186) & 15;
														$ix = $and379;
														var $cmp38119 = ((($and379)) | 0) > 0;
														if (!($cmp38119)) {
															__label__ = 124;
															break $if_then378$$if_else391$146;
														}
														$for_body382$148: while (1) {
															var $187 = HEAP32[(($wordx) >> 2)];
															var $incdec_ptr383 = (($187 + 1) & 4294967295);
															HEAP32[(($wordx) >> 2)] = $incdec_ptr383;
															var $188 = HEAP32[(($wordx) >> 2)];
															var $189 = HEAP8[($188)];
															var $conv38516 = (tempInt = (($189)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $and38617 = ($conv38516) & 192;
															var $cmp38718 = ((($and38617)) | 0) == 128;
															if ($cmp38718) {
																__label__ = 116;;
															} else {
																__label__ = 117;;
															}
															$while_body388$$for_inc$150: do {
																if (__label__ == 116) {
																	while (1) {
																		var $190 = HEAP32[(($wordx) >> 2)];
																		var $incdec_ptr389 = (($190 + 1) & 4294967295);
																		HEAP32[(($wordx) >> 2)] = $incdec_ptr389;
																		var $191 = HEAP32[(($wordx) >> 2)];
																		var $192 = HEAP8[($191)];
																		var $conv385 = (tempInt = (($192)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																		var $and386 = ($conv385) & 192;
																		var $cmp387 = ((($and386)) | 0) == 128;
																		if ($cmp387) {
																			__label__ = 116;
																			continue;
																		} else {
																			__label__ = 117;
																			break $while_body388$$for_inc$150;
																		}
																	}
																}
															} while (0);
															var $193 = $ix;
															var $dec = ((($193) - 1) & 4294967295);
															$ix = $dec;
															var $cmp381 = ((($dec)) | 0) > 0;
															if ($cmp381) {
																__label__ = 115;
																continue $for_body382$148;
															} else {
																__label__ = 124;
																break $if_then378$$if_else391$146;
															}
														}
													} else if (__label__ == 118) {
														$pfix = 1;
														HEAP8[($arrayidx392)] = 0;
														var $194 = $prefix_type;
														var $and393 = ($194) & 63;
														$n_chars = $and393;
														$ix = 0;
														var $195 = $ix;
														var $196 = $n_chars;
														var $cmp39520 = ((($195)) | 0) < ((($196)) | 0);
														if ($cmp39520) {
															__label__ = 119;;
														} else {
															__label__ = 123;;
														}
														$for_body396$$for_end410$155: do {
															if (__label__ == 119) {
																$for_body396$156: while (1) {
																	var $197 = HEAP32[(($wordx) >> 2)];
																	var $incdec_ptr397 = (($197 + 1) & 4294967295);
																	HEAP32[(($wordx) >> 2)] = $incdec_ptr397;
																	var $198 = HEAP8[($197)];
																	var $199 = $pfix;
																	var $inc398 = ((($199) + 1) & 4294967295);
																	$pfix = $inc398;
																	var $arrayidx399 = (($prefix_chars + $199) & 4294967295);
																	HEAP8[($arrayidx399)] = $198;
																	var $200 = $prefix_type;
																	var $and400 = ($200) & 131072;
																	var $tobool401 = ((($and400)) | 0) != 0;
																	if ($tobool401) {
																		__label__ = 120;;
																	} else {
																		__label__ = 122;;
																	}
																	$land_lhs_true402$$for_inc408$158: do {
																		if (__label__ == 120) {
																			var $201 = $ix;
																			var $202 = $n_chars;
																			var $sub = ((($202) - 1) & 4294967295);
																			var $cmp403 = ((($201)) | 0) == ((($sub)) | 0);
																			if (!($cmp403)) {
																				__label__ = 122;
																				break $land_lhs_true402$$for_inc408$158;
																			}
																			var $203 = $pfix;
																			var $sub405 = ((($203) - 1) & 4294967295);
																			var $arrayidx406 = (($prefix_chars + $sub405) & 4294967295);
																			HEAP8[($arrayidx406)] = 0;;
																		}
																	} while (0);
																	var $204 = $ix;
																	var $inc409 = ((($204) + 1) & 4294967295);
																	$ix = $inc409;
																	var $205 = $ix;
																	var $206 = $n_chars;
																	var $cmp395 = ((($205)) | 0) < ((($206)) | 0);
																	if ($cmp395) {
																		__label__ = 119;
																		continue $for_body396$156;
																	} else {
																		__label__ = 123;
																		break $for_body396$$for_end410$155;
																	}
																}
															}
														} while (0);
														var $207 = $pfix;
														var $arrayidx411 = (($prefix_chars + $207) & 4294967295);
														HEAP8[($arrayidx411)] = 0;;
													}
												} while (0);
												var $208 = HEAP32[(($wordx) >> 2)];
												var $arrayidx413 = (($208 + -1) & 4294967295);
												var $209 = HEAP8[($arrayidx413)];
												$c_temp = $209;
												var $210 = HEAP32[(($wordx) >> 2)];
												var $arrayidx414 = (($210 + -1) & 4294967295);
												HEAP8[($arrayidx414)] = 32;
												$confirm_prefix = 1;
												var $211 = $prefix_type;
												var $and415 = ($211) & 131072;
												var $tobool416 = ((($and415)) | 0) != 0;
												if ($tobool416) {
													__label__ = 125;;
												} else {
													__label__ = 129;;
												}
												$if_then417$$if_else441$164: do {
													if (__label__ == 125) {
														__Z8strncpy0PcPKci($arraydecay418, $arraydecay419, 12);
														HEAP32[(($wordpf) >> 2)] = $arrayidx420;
														var $call423 = _strcpy($arraydecay421, $arraydecay422);
														var $212 = $tr_addr;
														var $213 = $wtab_addr;
														var $call426 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($212, $wordpf, $arraydecay424, $arraydecay425, 0, $213);
														$found = $call426;
														var $214 = $found;
														var $tobool427 = ((($214)) | 0) != 0;
														if ($tobool427) {
															__label__ = 126;;
														} else {
															__label__ = 127;;
														}
														if (__label__ == 126) {
															var $call431 = _strcpy($arraydecay429, $arraydecay430);;
														}
														var $215 = HEAP32[(($arrayidx433) >> 2)];
														var $and434 = ($215) & 131072;
														var $tobool435 = ((($and434)) | 0) != 0;
														if (!($tobool435)) {
															__label__ = 130;
															break $if_then417$$if_else441$164;
														}
														HEAP8[($arrayidx437)] = 0;
														var $216 = $tr_addr;
														var $217 = HEAP32[(($wordpf) >> 2)];
														var $call439 = __ZL22SpeakIndividualLettersP10TranslatorPcS1_i($216, $217, $arraydecay438, 1);;
													} else if (__label__ == 129) {
														var $call444 = _strcat($arraydecay442, $arraydecay443);;
													}
												} while (0);
												HEAP8[($arrayidx446)] = 0;
												$end_type = 0;
												var $218 = $tr_addr;
												var $219 = $wtab_addr;
												var $call449 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($218, $wordx, $arraydecay447, $arraydecay448, 1024, $219);
												$found = $call449;
												var $220 = HEAP32[(($arrayidx450) >> 2)];
												var $cmp451 = ((($220)) | 0) == 0;
												if ($cmp451) {
													__label__ = 131;;
												} else {
													__label__ = 132;;
												}
												if (__label__ == 131) {
													var $221 = HEAP32[(($arrayidx453) >> 2)];
													HEAP32[(($arrayidx454) >> 2)] = $221;
													var $222 = HEAP32[(($arrayidx455) >> 2)];
													HEAP32[(($arrayidx456) >> 2)] = $222;;
												} else if (__label__ == 132) {
													$prefix_flags = 1;;
												}
												var $223 = $found;
												var $cmp459 = ((($223)) | 0) == 0;
												if (!($cmp459)) {
													__label__ = 136;
													break $if_end370$$for_inc474$141;
												}
												var $224 = $tr_addr;
												var $225 = HEAP32[(($wordx) >> 2)];
												var $call464 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($224, $225, $arraydecay461, 160, $arraydecay462, 0, $arraydecay463);
												$end_type = $call464;
												var $226 = HEAP8[($arrayidx465)];
												var $conv466 = (tempInt = (($226)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp467 = ((($conv466)) | 0) == 21;
												if ($cmp467) {
													__label__ = 135;
													break $for_cond$129;
												}
											}
										} while (0);
										var $229 = $loopcount;
										var $inc475 = ((($229) + 1) & 4294967295);
										$loopcount = $inc475;
										__lastLabel__ = 136;
										__label__ = 102;
										continue $for_cond$129;
									}
									if (__label__ == 137) {
										var $cmp477 = ((($162)) | 0) != 0;
										if ($cmp477) {
											__label__ = 138;;
										} else {
											__label__ = 165;;
										}
										$land_lhs_true478$$if_end603$180: do {
											if (__label__ == 138) {
												var $230 = $end_type;
												var $and479 = ($230) & 1024;
												var $tobool480 = ((($and479)) | 0) != 0;
												if ($tobool480) {
													__label__ = 165;
													break $land_lhs_true478$$if_end603$180;
												}
												var $arraydecay483 = (($phonemes2482) & 4294967295);
												var $arraydecay484 = (($phonemes) & 4294967295);
												var $call485 = _strcpy($arraydecay483, $arraydecay484);
												var $231 = $tr_addr;
												var $232 = HEAP32[(($wordx) >> 2)];
												var $233 = $end_type;
												var $arraydecay486 = (($word_copy) & 4294967295);
												var $call487 = __Z12RemoveEndingP10TranslatorPciS1_($231, $232, $233, $arraydecay486);
												$end_flags = $call487;
												var $arrayidx488 = (($phonemes) & 4294967295);
												HEAP8[($arrayidx488)] = 0;
												var $arrayidx489 = (($prefix_phonemes) & 4294967295);
												var $234 = HEAP8[($arrayidx489)];
												var $conv490 = (tempInt = (($234)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $cmp491 = ((($conv490)) | 0) != 0;
												if ($cmp491) {
													__label__ = 140;;
												} else {
													__label__ = 148;;
												}
												$if_then492$$if_end526$183: do {
													if (__label__ == 140) {
														var $235 = $c_temp;
														var $236 = HEAP32[(($wordx) >> 2)];
														var $arrayidx493 = (($236 + -1) & 4294967295);
														HEAP8[($arrayidx493)] = $235;
														var $237 = $tr_addr;
														var $arraydecay494 = (($phonemes) & 4294967295);
														var $arraydecay495 = (($dictionary_flags2) & 4294967295);
														var $238 = $end_flags;
														var $239 = $wtab_addr;
														var $call496 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($237, $word1, $arraydecay494, $arraydecay495, $238, $239);
														$found = $call496;
														var $240 = HEAP32[(($wordx) >> 2)];
														var $arrayidx497 = (($240 + -1) & 4294967295);
														HEAP8[($arrayidx497)] = 32;
														var $arrayidx498 = (($phonemes) & 4294967295);
														var $241 = HEAP8[($arrayidx498)];
														var $conv499 = (tempInt = (($241)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp500 = ((($conv499)) | 0) == 21;
														if ($cmp500) {
															__label__ = 141;;
														} else {
															__label__ = 142;;
														}
														if (__label__ == 141) {
															var $242 = HEAP32[(($wordx) >> 2)];
															var $arraydecay502 = (($word_copy) & 4294967295);
															var $arraydecay503 = (($word_copy) & 4294967295);
															var $call504 = _strlen($arraydecay503);
															var $src$, $dest$, $stop$, $stop4$, $fast$;
															$src$ = $arraydecay502;
															$dest$ = $242;
															$stop$ = $src$ + $call504;
															if (($dest$ % 4) == ($src$ % 4) && $call504 > 8) {
																while ($src$ % 4 !== 0 && $src$ < $stop$) {;
																	HEAP8[$dest$++] = HEAP8[$src$++];
																}
																$src$ >>= 2;
																$dest$ >>= 2;
																$stop4$ = $stop$ >> 2;
																while ($src$ < $stop4$) {;;;
																	HEAP32[$dest$++] = HEAP32[$src$++];
																}
																$src$ <<= 2;
																$dest$ <<= 2;
															}
															while ($src$ < $stop$) {;
																HEAP8[$dest$++] = HEAP8[$src$++];
															};
															var $arraydecay505 = (($phonemes) & 4294967295);
															var $call506 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay505);
															$retval = 0;
															__label__ = 236;
															break $if_then12$$if_end13$5;
														} else if (__label__ == 142) {
															var $arrayidx508 = (($dictionary_flags) & 4294967295);
															var $243 = HEAP32[(($arrayidx508) >> 2)];
															var $cmp509 = ((($243)) | 0) == 0;
															if ($cmp509) {
																__label__ = 143;;
															} else {
																__label__ = 144;;
															}
															if (__label__ == 143) {
																var $arrayidx511 = (($dictionary_flags2) & 4294967295);
																var $244 = HEAP32[(($arrayidx511) >> 2)];
																var $arrayidx512 = (($dictionary_flags) & 4294967295);
																HEAP32[(($arrayidx512) >> 2)] = $244;
																var $arrayidx513 = (($dictionary_flags2 + 4) & 4294967295);
																var $245 = HEAP32[(($arrayidx513) >> 2)];
																var $arrayidx514 = (($dictionary_flags + 4) & 4294967295);
																HEAP32[(($arrayidx514) >> 2)] = $245;;
															}
															var $246 = $found;
															var $tobool516 = ((($246)) | 0) != 0;
															if ($tobool516) {
																__label__ = 145;;
															} else {
																__label__ = 146;;
															}
															if (__label__ == 145) {
																var $arrayidx518 = (($prefix_phonemes) & 4294967295);
																HEAP8[($arrayidx518)] = 0;
																var $_pr8 = $found;
																var $cmp520 = ((($_pr8)) | 0) == 0;
																if (!($cmp520)) {
																	__label__ = 162;
																	break $if_then492$$if_end526$183;
																}
															}
															var $arrayidx522 = (($dictionary_flags2) & 4294967295);
															var $247 = HEAP32[(($arrayidx522) >> 2)];
															var $cmp523 = ((($247)) | 0) != 0;
															if (!($cmp523)) {
																__label__ = 148;
																break $if_then492$$if_end526$183;
															}
															$prefix_flags = 1;
															__label__ = 148;
															break $if_then492$$if_end526$183;
														}
													}
												} while (0);
												$if_end526$$if_end592$195: do {
													if (__label__ == 148) {
														var $_pr10 = $found;
														var $cmp527 = ((($_pr10)) | 0) == 0;
														if (!($cmp527)) {
															__label__ = 162;
															break $if_end526$$if_end592$195;
														}
														var $248 = $tr_addr;
														var $arraydecay529 = (($phonemes) & 4294967295);
														var $arraydecay530 = (($dictionary_flags2) & 4294967295);
														var $249 = $end_flags;
														var $250 = $wtab_addr;
														var $call531 = __Z14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TAB($248, $wordx, $arraydecay529, $arraydecay530, $249, $250);
														$found = $call531;
														var $arrayidx532 = (($phonemes) & 4294967295);
														var $251 = HEAP8[($arrayidx532)];
														var $conv533 = (tempInt = (($251)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp534 = ((($conv533)) | 0) == 21;
														if ($cmp534) {
															__label__ = 150;;
														} else {
															__label__ = 151;;
														}
														if (__label__ == 150) {
															var $252 = HEAP32[(($wordx) >> 2)];
															var $arraydecay536 = (($word_copy) & 4294967295);
															var $arraydecay537 = (($word_copy) & 4294967295);
															var $call538 = _strlen($arraydecay537);
															var $src$, $dest$, $stop$, $stop4$, $fast$;
															$src$ = $arraydecay536;
															$dest$ = $252;
															$stop$ = $src$ + $call538;
															if (($dest$ % 4) == ($src$ % 4) && $call538 > 8) {
																while ($src$ % 4 !== 0 && $src$ < $stop$) {;
																	HEAP8[$dest$++] = HEAP8[$src$++];
																}
																$src$ >>= 2;
																$dest$ >>= 2;
																$stop4$ = $stop$ >> 2;
																while ($src$ < $stop4$) {;;;
																	HEAP32[$dest$++] = HEAP32[$src$++];
																}
																$src$ <<= 2;
																$dest$ <<= 2;
															}
															while ($src$ < $stop$) {;
																HEAP8[$dest$++] = HEAP8[$src$++];
															};
															var $arraydecay539 = (($phonemes) & 4294967295);
															var $call540 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay539);
															$retval = 0;
															__label__ = 236;
															break $if_then12$$if_end13$5;
														} else if (__label__ == 151) {
															var $arrayidx547 = (($dictionary_flags) & 4294967295);
															var $253 = HEAP32[(($arrayidx547) >> 2)];
															var $cmp548 = ((($253)) | 0) == 0;
															if ($cmp548) {
																__label__ = 152;;
															} else {
																__label__ = 153;;
															}
															if (__label__ == 152) {
																var $arrayidx550 = (($dictionary_flags2) & 4294967295);
																var $254 = HEAP32[(($arrayidx550) >> 2)];
																var $arrayidx551 = (($dictionary_flags) & 4294967295);
																HEAP32[(($arrayidx551) >> 2)] = $254;
																var $arrayidx552 = (($dictionary_flags2 + 4) & 4294967295);
																var $255 = HEAP32[(($arrayidx552) >> 2)];
																var $arrayidx553 = (($dictionary_flags + 4) & 4294967295);
																HEAP32[(($arrayidx553) >> 2)] = $255;;
															}
															var $_pr12_pr = $found;
															var $cmp556 = ((($_pr12_pr)) | 0) == 0;
															if (!($cmp556)) {
																__label__ = 162;
																break $if_end526$$if_end592$195;
															}
															var $256 = $end_type;
															var $and558 = ($256) & 16384;
															var $tobool559 = ((($and558)) | 0) != 0;
															if ($tobool559) {
																__label__ = 155;;
															} else {
																__label__ = 156;;
															}
															if (__label__ == 155) {
																var $arraydecay561 = (($phonemes) & 4294967295);
																var $arraydecay562 = (($phonemes2482) & 4294967295);
																var $call563 = _strcpy($arraydecay561, $arraydecay562);
																var $257 = $tr_addr;
																var $arraydecay564 = (($phonemes) & 4294967295);
																var $arrayidx565 = (($dictionary_flags) & 4294967295);
																var $258 = HEAP32[(($arrayidx565) >> 2)];
																__Z21ApplySpecialAttributeP10TranslatorPci($257, $arraydecay564, $258);;
															} else if (__label__ == 156) {
																var $259 = $end_flags;
																var $and567 = ($259) & 4;
																var $tobool568 = ((($and567)) | 0) != 0;
																if ($tobool568) {
																	__label__ = 157;;
																} else {
																	__label__ = 158;;
																}
																if (__label__ == 157) {
																	var $260 = $wflags;
																	var $or570 = ($260) | 8192;
																	$wflags = $or570;;
																}
																var $261 = $end_type;
																var $and572 = ($261) & 262144;
																var $tobool573 = ((($and572)) | 0) != 0;
																if ($tobool573) {
																	__label__ = 159;;
																} else {
																	__label__ = 160;;
																}
																if (__label__ == 159) {
																	var $262 = $wflags;
																	var $or575 = ($262) | 134217728;
																	$wflags = $or575;;
																}
																var $263 = $tr_addr;
																var $264 = HEAP32[(($wordx) >> 2)];
																var $arraydecay577 = (($phonemes) & 4294967295);
																var $265 = $wflags;
																var $arraydecay578 = (($dictionary_flags) & 4294967295);
																var $call579 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($263, $264, $arraydecay577, 160, 0, $265, $arraydecay578);
																var $arrayidx580 = (($phonemes) & 4294967295);
																var $266 = HEAP8[($arrayidx580)];
																var $conv581 = (tempInt = (($266)), (tempInt >= 128 ? tempInt - 256 : tempInt));
																var $cmp582 = ((($conv581)) | 0) == 21;
																if (!($cmp582)) {
																	__label__ = 162;
																	break $if_end526$$if_end592$195;
																}
																var $arraydecay584 = (($phonemes) & 4294967295);
																var $call585 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay584);
																var $267 = HEAP32[(($wordx) >> 2)];
																var $arraydecay586 = (($word_copy) & 4294967295);
																var $arraydecay587 = (($word_copy) & 4294967295);
																var $call588 = _strlen($arraydecay587);
																var $src$, $dest$, $stop$, $stop4$, $fast$;
																$src$ = $arraydecay586;
																$dest$ = $267;
																$stop$ = $src$ + $call588;
																if (($dest$ % 4) == ($src$ % 4) && $call588 > 8) {
																	while ($src$ % 4 !== 0 && $src$ < $stop$) {;
																		HEAP8[$dest$++] = HEAP8[$src$++];
																	}
																	$src$ >>= 2;
																	$dest$ >>= 2;
																	$stop4$ = $stop$ >> 2;
																	while ($src$ < $stop4$) {;;;
																		HEAP32[$dest$++] = HEAP32[$src$++];
																	}
																	$src$ <<= 2;
																	$dest$ <<= 2;
																}
																while ($src$ < $stop$) {;
																	HEAP8[$dest$++] = HEAP8[$src$++];
																};
																var $268 = $c_temp;
																var $269 = HEAP32[(($wordx) >> 2)];
																var $arrayidx589 = (($269 + -1) & 4294967295);
																HEAP8[($arrayidx589)] = $268;
																$retval = 0;
																__label__ = 236;
																break $if_then12$$if_end13$5;
															}
														}
													}
												} while (0);
												var $270 = $end_type;
												var $and593 = ($270) & 65536;
												var $cmp594 = ((($and593)) | 0) == 0;
												if ($cmp594) {
													__label__ = 163;;
												} else {
													__label__ = 164;;
												}
												if (__label__ == 163) {
													var $271 = $tr_addr;
													var $arraydecay596 = (($phonemes) & 4294967295);
													var $arraydecay597 = (($end_phonemes) & 4294967295);
													__Z14AppendPhonemesP10TranslatorPciPKc($271, $arraydecay596, 160, $arraydecay597);
													var $arrayidx598 = (($end_phonemes) & 4294967295);
													HEAP8[($arrayidx598)] = 0;;
												}
												var $272 = HEAP32[(($wordx) >> 2)];
												var $arraydecay600 = (($word_copy) & 4294967295);
												var $arraydecay601 = (($word_copy) & 4294967295);
												var $call602 = _strlen($arraydecay601);
												var $src$, $dest$, $stop$, $stop4$, $fast$;
												$src$ = $arraydecay600;
												$dest$ = $272;
												$stop$ = $src$ + $call602;
												if (($dest$ % 4) == ($src$ % 4) && $call602 > 8) {
													while ($src$ % 4 !== 0 && $src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													}
													$src$ >>= 2;
													$dest$ >>= 2;
													$stop4$ = $stop$ >> 2;
													while ($src$ < $stop4$) {;;;
														HEAP32[$dest$++] = HEAP32[$src$++];
													}
													$src$ <<= 2;
													$dest$ <<= 2;
												}
												while ($src$ < $stop$) {;
													HEAP8[$dest$++] = HEAP8[$src$++];
												};;
											}
										} while (0);
										var $273 = $c_temp;
										var $274 = HEAP32[(($wordx) >> 2)];
										var $arrayidx604 = (($274 + -1) & 4294967295);
										HEAP8[($arrayidx604)] = $273;
										__label__ = 166;
										break $if_end219$$if_then221$95;
									} else if (__label__ == 135) {
										var $227 = $c_temp;
										var $228 = HEAP32[(($wordx) >> 2)];
										var $arrayidx469 = (($228 + -1) & 4294967295);
										HEAP8[($arrayidx469)] = $227;
										var $arraydecay470 = (($phonemes) & 4294967295);
										var $call471 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay470);
										$retval = 0;
										__label__ = 236;
										break $if_then12$$if_end13$5;
									}
								}
							} else if (__label__ == 84) {
								var $arraydecay260 = (($unpron_phonemes) & 4294967295);
								var $call261 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay260);
								var $arrayidx262 = (($unpron_phonemes + 1) & 4294967295);
								var $call263 = _strcmp($arrayidx262, ((__str52704) & 4294967295));
								var $cmp264 = ((($call263)) | 0) == 0;
								if ($cmp264) {
									__label__ = 85;;
								} else {
									__label__ = 86;;
								}
								if (__label__ == 85) {
									$retval = 65536;
									__label__ = 236;
									break $if_then12$$if_end13$5;
								} else if (__label__ == 86) {
									$retval = 0;
									__label__ = 236;
									break $if_then12$$if_end13$5;
								}
							}
						}
					} while (0);
					$if_then221$$if_end607$225: do {
						if (__label__ == 71) {
							var $arrayidx222 = (($phonemes) & 4294967295);
							HEAP8[($arrayidx222)] = 0;
							$end_type = 0;
							var $111 = $tr_addr;
							var $112 = HEAP32[(($word1) >> 2)];
							var $arraydecay223 = (($phonemes) & 4294967295);
							var $113 = $spell_word;
							var $call224 = __ZL22SpeakIndividualLettersP10TranslatorPcS1_i($111, $112, $arraydecay223, $113);
							var $cmp225 = ((($call224)) | 0) == 0;
							if (!($cmp225)) {
								__label__ = 166;
								break $if_then221$$if_end607$225;
							}
							var $114 = $word_length;
							var $cmp227 = ((($114)) | 0) > 1;
							if ($cmp227) {
								__label__ = 73;;
							} else {
								__label__ = 74;;
							}
							if (__label__ == 73) {
								$retval = 65536;
								__label__ = 236;
								break $if_then12$$if_end13$5;
							} else if (__label__ == 74) {
								$retval = 0;
								__label__ = 236;
								break $if_then12$$if_end13$5;
							}
						}
					} while (0);
					var $275 = $add_plural_suffix;
					var $tobool608 = ((($275)) | 0) != 0;
					if ($tobool608) {
						__label__ = 168;;
					} else {
						__label__ = 167;;
					}
					$if_then612$$lor_lhs_false609$232: do {
						if (__label__ == 167) {
							var $276 = $wflags;
							var $and610 = ($276) & 4;
							var $tobool611 = ((($and610)) | 0) != 0;
							if ($tobool611) {
								__label__ = 168;
								break $if_then612$$lor_lhs_false609$232;
							} else {
								__label__ = 174;
								break $if_then612$$lor_lhs_false609$232;
							}
						}
					} while (0);
					$if_then612$$if_end630$234: do {
						if (__label__ == 168) {
							var $277 = HEAP32[(($last_char) >> 2)];
							var $cmp613 = ((($277)) | 0) == 102;
							if ($cmp613) {
								__label__ = 169;;
							} else {
								__label__ = 170;;
							}
							if (__label__ == 169) {
								var $278 = $tr_addr;
								var $arraydecay615 = (($phonemes) & 4294967295);
								var $call616 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($278, ((__ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_ss + 1) & 4294967295), $arraydecay615, 160, 0, 0, 0);;
							} else if (__label__ == 170) {
								var $279 = HEAP32[(($last_char) >> 2)];
								var $cmp618 = ((($279)) | 0) == 0;
								if ($cmp618) {
									__label__ = 172;;
								} else {
									__label__ = 171;;
								}
								$if_then622$$lor_lhs_false619$239: do {
									if (__label__ == 171) {
										var $280 = HEAP32[(($last_char) >> 2)];
										var $call620 = __Z8strchr_wPKci(((__str5548) & 4294967295), $280);
										var $cmp621 = ((($call620)) | 0) == 0;
										if ($cmp621) {
											__label__ = 172;
											break $if_then622$$lor_lhs_false619$239;
										}
										var $282 = $tr_addr;
										var $arraydecay626 = (($phonemes) & 4294967295);
										var $call627 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($282, ((__ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_iz + 1) & 4294967295), $arraydecay626, 160, 0, 0, 0);
										__label__ = 174;
										break $if_then612$$if_end630$234;
									}
								} while (0);
								var $281 = $tr_addr;
								var $arraydecay623 = (($phonemes) & 4294967295);
								var $call624 = __Z14TranslateRulesP10TranslatorPcS1_iS1_iPj($281, ((__ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_zz + 1) & 4294967295), $arraydecay623, 160, 0, 0, 0);;
							}
						}
					} while (0);
					var $283 = $emphasize_allcaps;
					var $284 = $wflags;
					var $or631 = ($284) | ($283);
					$wflags = $or631;
					$prefix_stress = 0;
					var $arraydecay632 = (($prefix_phonemes) & 4294967295);
					$p = $arraydecay632;
					var $285 = $p;
					var $286 = HEAP8[($285)];
					var $conv63426 = (tempInt = (($286)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp63527 = ((($conv63426)) | 0) != 0;
					if ($cmp63527) {
						__label__ = 175;;
					} else {
						__label__ = 179;;
					}
					$for_body636$$for_end647$244: do {
						if (__label__ == 175) {
							$for_body636$245: while (1) {
								var $287 = $p;
								var $288 = HEAP8[($287)];
								var $conv637 = (tempInt = (($288)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp638 = ((($conv637)) | 0) == 6;
								if ($cmp638) {
									__label__ = 177;;
								} else {
									__label__ = 176;;
								}
								$if_then642$$lor_lhs_false639$247: do {
									if (__label__ == 176) {
										var $289 = $p;
										var $290 = HEAP8[($289)];
										var $conv640 = (tempInt = (($290)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp641 = ((($conv640)) | 0) == 7;
										if ($cmp641) {
											__label__ = 177;
											break $if_then642$$lor_lhs_false639$247;
										} else {
											__label__ = 178;
											break $if_then642$$lor_lhs_false639$247;
										}
									}
								} while (0);
								if (__label__ == 177) {
									var $291 = $p;
									var $292 = HEAP8[($291)];
									var $conv643 = (tempInt = (($292)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									$prefix_stress = $conv643;;
								}
								var $293 = $p;
								var $incdec_ptr646 = (($293 + 1) & 4294967295);
								$p = $incdec_ptr646;
								var $294 = $p;
								var $295 = HEAP8[($294)];
								var $conv634 = (tempInt = (($295)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp635 = ((($conv634)) | 0) != 0;
								if ($cmp635) {
									__label__ = 175;
									continue $for_body636$245;
								} else {
									__label__ = 179;
									break $for_body636$$for_end647$244;
								}
							}
						}
					} while (0);
					var $296 = $prefix_flags;
					var $tobool648 = ((($296)) | 0) != 0;
					if ($tobool648) {
						__label__ = 181;;
					} else {
						__label__ = 180;;
					}
					$if_then651$$lor_lhs_false649$253: do {
						if (__label__ == 180) {
							var $297 = $prefix_stress;
							var $cmp650 = ((($297)) | 0) != 0;
							if ($cmp650) {
								__label__ = 181;
								break $if_then651$$lor_lhs_false649$253;
							}
							var $313 = $tr_addr;
							var $arraydecay695 = (($phonemes) & 4294967295);
							var $arraydecay696 = (($dictionary_flags) & 4294967295);
							__Z13SetWordStressP10TranslatorPcPjii($313, $arraydecay695, $arraydecay696, -1, 0);
							var $arraydecay701 = (($unpron_phonemes) & 4294967295);
							var $arraydecay702 = (($prefix_phonemes) & 4294967295);
							var $arraydecay703 = (($phonemes) & 4294967295);
							var $call704 = _snprintf(((_word_phonemes) & 4294967295), 160, ((__str6549) & 4294967295), allocate([$arraydecay701, 0, 0, 0, $arraydecay702, 0, 0, 0, $arraydecay703, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							HEAP8[(((_word_phonemes + 159) & 4294967295))] = 0;
							__label__ = 192;
							break $if_then651$$lor_lhs_false649$253;
						}
					} while (0);
					$if_then651$$if_end705$256: do {
						if (__label__ == 181) {
							var $298 = $tr_addr;
							var $langopts652 = (($298) & 4294967295);
							var $param = (($langopts652 + 24) & 4294967295);
							var $arrayidx653 = (($param + 12) & 4294967295);
							var $299 = HEAP32[(($arrayidx653) >> 2)];
							var $tobool654 = ((($299)) | 0) != 0;
							if ($tobool654) {
								__label__ = 183;;
							} else {
								__label__ = 182;;
							}
							$if_then658$$lor_lhs_false655$258: do {
								if (__label__ == 182) {
									var $300 = $prefix_type;
									var $and656 = ($300) & 65536;
									var $tobool657 = ((($and656)) | 0) != 0;
									if ($tobool657) {
										__label__ = 183;
										break $if_then658$$lor_lhs_false655$258;
									}
									var $arraydecay684 = (($unpron_phonemes) & 4294967295);
									var $arraydecay685 = (($prefix_phonemes) & 4294967295);
									var $arraydecay686 = (($phonemes) & 4294967295);
									var $call687 = _snprintf(((_word_phonemes) & 4294967295), 160, ((__str6549) & 4294967295), allocate([$arraydecay684, 0, 0, 0, $arraydecay685, 0, 0, 0, $arraydecay686, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
									HEAP8[(((_word_phonemes + 159) & 4294967295))] = 0;
									var $312 = $tr_addr;
									var $arraydecay688 = (($dictionary_flags) & 4294967295);
									__Z13SetWordStressP10TranslatorPcPjii($312, ((_word_phonemes) & 4294967295), $arraydecay688, -1, 0);
									__label__ = 192;
									break $if_then651$$if_end705$256;
								}
							} while (0);
							var $301 = $tr_addr;
							var $arraydecay660 = (($phonemes) & 4294967295);
							var $arraydecay661 = (($dictionary_flags) & 4294967295);
							__Z13SetWordStressP10TranslatorPcPjii($301, $arraydecay660, $arraydecay661, 3, 0);
							$ix = 0;
							var $arraydecay662 = (($prefix_phonemes) & 4294967295);
							$p659 = $arraydecay662;
							var $302 = $p659;
							var $303 = HEAP8[($302)];
							var $conv66424 = (tempInt = (($303)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp66525 = ((($conv66424)) | 0) != 0;
							if ($cmp66525) {
								__label__ = 184;;
							} else {
								__label__ = 189;;
							}
							$for_body666$$for_end677$262: do {
								if (__label__ == 184) {
									while (1) {
										var $304 = $p659;
										var $305 = HEAP8[($304)];
										var $conv667 = (tempInt = (($305)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp668 = ((($conv667)) | 0) == 6;
										if ($cmp668) {
											__label__ = 185;;
										} else {
											__label__ = 188;;
										}
										if (__label__ == 185) {
											var $306 = $ix;
											var $cmp670 = ((($306)) | 0) == 0;
											if ($cmp670) {
												__label__ = 186;;
											} else {
												__label__ = 187;;
											}
											if (__label__ == 186) {
												$ix = 1;;
											} else if (__label__ == 187) {
												var $307 = $p659;
												HEAP8[($307)] = 5;;
											}
										}
										var $308 = $p659;
										var $incdec_ptr676 = (($308 + 1) & 4294967295);
										$p659 = $incdec_ptr676;
										var $309 = $p659;
										var $310 = HEAP8[($309)];
										var $conv664 = (tempInt = (($310)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp665 = ((($conv664)) | 0) != 0;
										if ($cmp665) {
											__label__ = 184;
											continue;
										} else {
											__label__ = 189;
											break $for_body666$$for_end677$262;
										}
									}
								}
							} while (0);
							var $arraydecay678 = (($unpron_phonemes) & 4294967295);
							var $arraydecay679 = (($prefix_phonemes) & 4294967295);
							var $arraydecay680 = (($phonemes) & 4294967295);
							var $call681 = _snprintf(((_word_phonemes) & 4294967295), 160, ((__str6549) & 4294967295), allocate([$arraydecay678, 0, 0, 0, $arraydecay679, 0, 0, 0, $arraydecay680, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							HEAP8[(((_word_phonemes + 159) & 4294967295))] = 0;
							var $311 = $tr_addr;
							var $arraydecay682 = (($dictionary_flags) & 4294967295);
							__Z13SetWordStressP10TranslatorPcPjii($311, ((_word_phonemes) & 4294967295), $arraydecay682, -1, 0);;
						}
					} while (0);
					var $arrayidx706 = (($end_phonemes) & 4294967295);
					var $314 = HEAP8[($arrayidx706)];
					var $conv707 = (tempInt = (($314)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp708 = ((($conv707)) | 0) != 0;
					if ($cmp708) {
						__label__ = 193;;
					} else {
						__label__ = 194;;
					}
					if (__label__ == 193) {
						var $call710 = _strlen(((_word_phonemes) & 4294967295));
						$ix = $call710;
						var $315 = $ix;
						var $sub711 = ((159 - ($315)) & 4294967295);
						var $arrayidx712 = (($end_phonemes + $sub711) & 4294967295);
						HEAP8[($arrayidx712)] = 0;
						var $316 = $ix;
						var $arrayidx713 = ((_word_phonemes + $316) & 4294967295);
						var $arraydecay714 = (($end_phonemes) & 4294967295);
						var $call715 = _strcpy($arrayidx713, $arraydecay714);;
					}
					var $317 = $wflags;
					var $and717 = ($317) & 16;
					var $tobool718 = ((($and717)) | 0) != 0;
					if ($tobool718) {
						__label__ = 195;;
					} else {
						__label__ = 196;;
					}
					if (__label__ == 195) {
						var $arrayidx720 = (($dictionary_flags) & 4294967295);
						var $318 = HEAP32[(($arrayidx720) >> 2)];
						var $and721 = ($318) & -268435457;
						HEAP32[(($arrayidx720) >> 2)] = $and721;;
					}
					var $319 = $wflags;
					var $and723 = ($319) & 128;
					var $tobool724 = ((($and723)) | 0) != 0;
					if ($tobool724) {
						__label__ = 197;;
					} else {
						__label__ = 199;;
					}
					$land_lhs_true725$$if_else730$279: do {
						if (__label__ == 197) {
							var $320 = $tr_addr;
							var $langopts726 = (($320) & 4294967295);
							var $stress_flags = (($langopts726 + 12) & 4294967295);
							var $321 = HEAP32[(($stress_flags) >> 2)];
							var $and727 = ($321) & 1048576;
							var $tobool728 = ((($and727)) | 0) != 0;
							if (!($tobool728)) {
								__label__ = 199;
								break $land_lhs_true725$$if_else730$279;
							}
							var $322 = $tr_addr;
							__Z16ChangeWordStressP10TranslatorPci($322, ((_word_phonemes) & 4294967295), 3);
							__label__ = 208;
							break $land_lhs_true725$$if_else730$279;
						}
					} while (0);
					$if_end761$$if_else730$282: do {
						if (__label__ == 199) {
							var $323 = $wflags;
							var $and731 = ($323) & 3072;
							var $tobool732 = ((($and731)) | 0) != 0;
							if ($tobool732) {
								__label__ = 200;;
							} else {
								__label__ = 202;;
							}
							if (__label__ == 200) {
								var $324 = $tr_addr;
								__Z16ChangeWordStressP10TranslatorPci($324, ((_word_phonemes) & 4294967295), 6);
								var $325 = $wflags;
								var $and734 = ($325) & 2048;
								var $tobool735 = ((($and734)) | 0) != 0;
								if (!($tobool735)) {
									__label__ = 208;
									break $if_end761$$if_else730$282;
								}
								var $arrayidx737 = (($dictionary_flags) & 4294967295);
								var $326 = HEAP32[(($arrayidx737) >> 2)];
								var $or738 = ($326) | 268435456;
								HEAP32[(($arrayidx737) >> 2)] = $or738;;
							} else if (__label__ == 202) {
								var $327 = HEAP32[((_dictionary_skipwords) >> 2)];
								var $328 = $wtab_addr;
								var $arrayidx741 = (($328 + 12 * $327) & 4294967295);
								var $flags742 = (($arrayidx741) & 4294967295);
								var $329 = HEAP32[(($flags742) >> 2)];
								var $and743 = ($329) & 16;
								var $tobool744 = ((($and743)) | 0) != 0;
								if (!($tobool744)) {
									__label__ = 208;
									break $if_end761$$if_else730$282;
								}
								var $arrayidx746 = (($dictionary_flags) & 4294967295);
								var $330 = HEAP32[(($arrayidx746) >> 2)];
								var $and747 = ($330) & 6144;
								var $tobool748 = ((($and747)) | 0) != 0;
								if ($tobool748) {
									__label__ = 204;;
								} else {
									__label__ = 205;;
								}
								if (__label__ == 204) {
									var $331 = $tr_addr;
									__Z16ChangeWordStressP10TranslatorPci($331, ((_word_phonemes) & 4294967295), 4);;
								} else if (__label__ == 205) {
									var $arrayidx751 = (($dictionary_flags) & 4294967295);
									var $332 = HEAP32[(($arrayidx751) >> 2)];
									var $and752 = ($332) & 8192;
									var $tobool753 = ((($and752)) | 0) != 0;
									if (!($tobool753)) {
										__label__ = 208;
										break $if_end761$$if_else730$282;
									}
									var $_b = HEAPU8[(__ZL18any_stressed_words_b)];
									var $333 = ((($_b)) & 1);
									var $tobool755 = ((($333)) | 0) != 0;
									if (!($tobool755)) {
										__label__ = 208;
										break $if_end761$$if_else730$282;
									}
									var $334 = $tr_addr;
									__Z16ChangeWordStressP10TranslatorPci($334, ((_word_phonemes) & 4294967295), 3);;
								}
							}
						}
					} while (0);
					var $335 = $end_type;
					var $and762 = ($335) & 8192;
					var $tobool763 = ((($and762)) | 0) != 0;
					if ($tobool763) {
						__label__ = 209;;
					} else {
						__label__ = 210;;
					}
					if (__label__ == 209) {
						var $336 = $tr_addr;
						var $expect_verb765 = (($336 + 8272) & 4294967295);
						HEAP32[(($expect_verb765) >> 2)] = 2;
						var $337 = $tr_addr;
						var $expect_verb_s = (($337 + 8280) & 4294967295);
						HEAP32[(($expect_verb_s) >> 2)] = 2;;
					}
					var $arrayidx767 = (($dictionary_flags + 4) & 4294967295);
					var $338 = HEAP32[(($arrayidx767) >> 2)];
					var $and768 = ($338) & 8;
					var $tobool769 = ((($and768)) | 0) != 0;
					if ($tobool769) {
						__label__ = 211;;
					} else {
						__label__ = 212;;
					}
					$if_then770$$if_else772$298: do {
						if (__label__ == 211) {
							var $339 = $tr_addr;
							var $expect_past = (($339 + 8276) & 4294967295);
							HEAP32[(($expect_past) >> 2)] = 3;
							var $340 = $tr_addr;
							var $expect_verb771 = (($340 + 8272) & 4294967295);
							HEAP32[(($expect_verb771) >> 2)] = 0;
							var $341 = $tr_addr;
							var $expect_noun = (($341 + 8284) & 4294967295);
							HEAP32[(($expect_noun) >> 2)] = 0;;
						} else if (__label__ == 212) {
							var $arrayidx773 = (($dictionary_flags + 4) & 4294967295);
							var $342 = HEAP32[(($arrayidx773) >> 2)];
							var $and774 = ($342) & 1;
							var $tobool775 = ((($and774)) | 0) != 0;
							if ($tobool775) {
								__label__ = 213;;
							} else {
								__label__ = 214;;
							}
							if (__label__ == 213) {
								var $343 = $tr_addr;
								var $expect_verb777 = (($343 + 8272) & 4294967295);
								HEAP32[(($expect_verb777) >> 2)] = 2;
								var $344 = $tr_addr;
								var $expect_verb_s778 = (($344 + 8280) & 4294967295);
								HEAP32[(($expect_verb_s778) >> 2)] = 0;
								var $345 = $tr_addr;
								var $expect_noun779 = (($345 + 8284) & 4294967295);
								HEAP32[(($expect_noun779) >> 2)] = 0;;
							} else if (__label__ == 214) {
								var $arrayidx781 = (($dictionary_flags + 4) & 4294967295);
								var $346 = HEAP32[(($arrayidx781) >> 2)];
								var $and782 = ($346) & 2;
								var $tobool783 = ((($and782)) | 0) != 0;
								if ($tobool783) {
									__label__ = 215;;
								} else {
									__label__ = 216;;
								}
								if (__label__ == 215) {
									var $347 = $tr_addr;
									var $expect_verb785 = (($347 + 8272) & 4294967295);
									HEAP32[(($expect_verb785) >> 2)] = 0;
									var $348 = $tr_addr;
									var $expect_verb_s786 = (($348 + 8280) & 4294967295);
									HEAP32[(($expect_verb_s786) >> 2)] = 2;
									var $349 = $tr_addr;
									var $expect_past787 = (($349 + 8276) & 4294967295);
									HEAP32[(($expect_past787) >> 2)] = 0;
									var $350 = $tr_addr;
									var $expect_noun788 = (($350 + 8284) & 4294967295);
									HEAP32[(($expect_noun788) >> 2)] = 0;;
								} else if (__label__ == 216) {
									var $arrayidx790 = (($dictionary_flags + 4) & 4294967295);
									var $351 = HEAP32[(($arrayidx790) >> 2)];
									var $and791 = ($351) & 4;
									var $tobool792 = ((($and791)) | 0) != 0;
									if (!($tobool792)) {
										__label__ = 218;
										break $if_then770$$if_else772$298;
									}
									var $352 = $tr_addr;
									var $expect_noun794 = (($352 + 8284) & 4294967295);
									HEAP32[(($expect_noun794) >> 2)] = 2;
									var $353 = $tr_addr;
									var $expect_verb795 = (($353 + 8272) & 4294967295);
									HEAP32[(($expect_verb795) >> 2)] = 0;
									var $354 = $tr_addr;
									var $expect_verb_s796 = (($354 + 8280) & 4294967295);
									HEAP32[(($expect_verb_s796) >> 2)] = 0;
									var $355 = $tr_addr;
									var $expect_past797 = (($355 + 8276) & 4294967295);
									HEAP32[(($expect_past797) >> 2)] = 0;;
								}
							}
						}
					} while (0);
					var $356 = HEAP32[(($wordx) >> 2)];
					var $arrayidx802 = (($356) & 4294967295);
					var $357 = HEAP8[($arrayidx802)];
					var $conv803 = (tempInt = (($357)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp804 = ((($conv803)) | 0) != 0;
					if ($cmp804) {
						__label__ = 219;;
					} else {
						__label__ = 228;;
					}
					$land_lhs_true805$$if_end834$309: do {
						if (__label__ == 219) {
							var $arrayidx806 = (($dictionary_flags + 4) & 4294967295);
							var $358 = HEAP32[(($arrayidx806) >> 2)];
							var $and807 = ($358) & 256;
							var $tobool808 = ((($and807)) | 0) != 0;
							if ($tobool808) {
								__label__ = 228;
								break $land_lhs_true805$$if_end834$309;
							}
							var $359 = $tr_addr;
							var $expect_verb810 = (($359 + 8272) & 4294967295);
							var $360 = HEAP32[(($expect_verb810) >> 2)];
							var $cmp811 = ((($360)) | 0) > 0;
							if ($cmp811) {
								__label__ = 221;;
							} else {
								__label__ = 222;;
							}
							if (__label__ == 221) {
								var $361 = $tr_addr;
								var $expect_verb813 = (($361 + 8272) & 4294967295);
								var $362 = HEAP32[(($expect_verb813) >> 2)];
								var $dec814 = ((($362) - 1) & 4294967295);
								HEAP32[(($expect_verb813) >> 2)] = $dec814;;
							}
							var $363 = $tr_addr;
							var $expect_verb_s816 = (($363 + 8280) & 4294967295);
							var $364 = HEAP32[(($expect_verb_s816) >> 2)];
							var $cmp817 = ((($364)) | 0) > 0;
							if ($cmp817) {
								__label__ = 223;;
							} else {
								__label__ = 224;;
							}
							if (__label__ == 223) {
								var $365 = $tr_addr;
								var $expect_verb_s819 = (($365 + 8280) & 4294967295);
								var $366 = HEAP32[(($expect_verb_s819) >> 2)];
								var $dec820 = ((($366) - 1) & 4294967295);
								HEAP32[(($expect_verb_s819) >> 2)] = $dec820;;
							}
							var $367 = $tr_addr;
							var $expect_noun822 = (($367 + 8284) & 4294967295);
							var $368 = HEAP32[(($expect_noun822) >> 2)];
							var $cmp823 = ((($368)) | 0) > 0;
							if ($cmp823) {
								__label__ = 225;;
							} else {
								__label__ = 226;;
							}
							if (__label__ == 225) {
								var $369 = $tr_addr;
								var $expect_noun825 = (($369 + 8284) & 4294967295);
								var $370 = HEAP32[(($expect_noun825) >> 2)];
								var $dec826 = ((($370) - 1) & 4294967295);
								HEAP32[(($expect_noun825) >> 2)] = $dec826;;
							}
							var $371 = $tr_addr;
							var $expect_past828 = (($371 + 8276) & 4294967295);
							var $372 = HEAP32[(($expect_past828) >> 2)];
							var $cmp829 = ((($372)) | 0) > 0;
							if (!($cmp829)) {
								__label__ = 228;
								break $land_lhs_true805$$if_end834$309;
							}
							var $373 = $tr_addr;
							var $expect_past831 = (($373 + 8276) & 4294967295);
							var $374 = HEAP32[(($expect_past831) >> 2)];
							var $dec832 = ((($374) - 1) & 4294967295);
							HEAP32[(($expect_past831) >> 2)] = $dec832;;
						}
					} while (0);
					var $375 = $word_length;
					var $cmp835 = ((($375)) | 0) == 1;
					if ($cmp835) {
						__label__ = 229;;
					} else {
						__label__ = 232;;
					}
					$land_lhs_true836$$if_end846$323: do {
						if (__label__ == 229) {
							var $376 = $tr_addr;
							var $translator_name = (($376 + 280) & 4294967295);
							var $377 = HEAP32[(($translator_name) >> 2)];
							var $cmp837 = ((($377)) | 0) == 25966;
							if (!($cmp837)) {
								__label__ = 232;
								break $land_lhs_true836$$if_end846$323;
							}
							var $378 = HEAP32[(($first_char) >> 2)];
							var $call839 = _iswalpha($378);
							var $tobool840 = ((($call839)) | 0) != 0;
							var $379 = HEAP32[(($first_char) >> 2)];
							var $cmp842 = ((($379)) | 0) != 105;
							var $or_cond3 = ($tobool840) & ($cmp842);
							if (!($or_cond3)) {
								__label__ = 232;
								break $land_lhs_true836$$if_end846$323;
							}
							var $arrayidx844 = (($dictionary_flags) & 4294967295);
							var $380 = HEAP32[(($arrayidx844) >> 2)];
							var $or845 = ($380) | 16777216;
							HEAP32[(($arrayidx844) >> 2)] = $or845;;
						}
					} while (0);
					var $381 = $tr_addr;
					var $langopts847 = (($381) & 4294967295);
					var $param848 = (($langopts847 + 24) & 4294967295);
					var $arrayidx849 = (($param848 + 60) & 4294967295);
					var $382 = HEAP32[(($arrayidx849) >> 2)];
					var $and850 = ($382) & 2;
					var $tobool851 = ((($and850)) | 0) != 0;
					if ($tobool851) {
						__label__ = 233;;
					} else {
						__label__ = 235;;
					}
					$land_lhs_true852$$if_end858$328: do {
						if (__label__ == 233) {
							var $arrayidx853 = (($dictionary_flags) & 4294967295);
							var $383 = HEAP32[(($arrayidx853) >> 2)];
							var $and854 = ($383) & 3145728;
							var $cmp855 = ((($and854)) | 0) != 0;
							if (!($cmp855)) {
								__label__ = 235;
								break $land_lhs_true852$$if_end858$328;
							}
							var $384 = $tr_addr;
							var $arrayidx857 = (($dictionary_flags) & 4294967295);
							var $385 = HEAP32[(($arrayidx857) >> 2)];
							__Z22ApplySpecialAttribute2P10TranslatorPci($384, ((_word_phonemes) & 4294967295), $385);;
						}
					} while (0);
					var $386 = $was_unpronouncable;
					var $arrayidx859 = (($dictionary_flags) & 4294967295);
					var $387 = HEAP32[(($arrayidx859) >> 2)];
					var $or860 = ($387) | ($386);
					HEAP32[(($arrayidx859) >> 2)] = $or860;
					var $388 = $word_start_addr;
					var $arraydecay861 = (($word_copy2) & 4294967295);
					var $389 = $word_copy_length;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $arraydecay861;
					$dest$ = $388;
					$stop$ = $src$ + $389;
					if (($dest$ % 4) == ($src$ % 4) && $389 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $arrayidx862 = (($dictionary_flags) & 4294967295);
					var $390 = HEAP32[(($arrayidx862) >> 2)];
					$retval = $390;;
				}
			} while (0);
			var $391 = $retval;
			STACKTOP = __stackBase__;
			return $391;
			return null;
		}

		function __ZL17CheckDottedAbbrevPcP8WORD_TAB($word1, $wtab) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 84;
			_memset(__stackBase__, 0, 84);
			var __label__;
			var $word1_addr;
			var $wtab_addr;
			var $wc = __stackBase__;
			var $count;
			var $nbytes;
			var $ok;
			var $ix;
			var $word;
			var $wbuf;
			var $word_buf = __stackBase__ + 4;
			$word1_addr = $word1;
			$wtab_addr = $wtab;
			$count = 0;
			var $0 = $word1_addr;
			$word = $0;
			var $arraydecay = (($word_buf) & 4294967295);
			$wbuf = $arraydecay;
			$ix = 0;;
			$for_cond$2: while (1) {
				$ok = 0;
				var $1 = $word;
				var $call = __Z7utf8_inPiPKc($wc, $1);
				$nbytes = $call;
				var $2 = $nbytes;
				var $3 = $word;
				var $arrayidx = (($3 + $2) & 4294967295);
				var $4 = HEAP8[($arrayidx)];
				var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp = ((($conv)) | 0) == 32;
				if ($cmp) {
					__label__ = 2;;
				} else {
					__label__ = 11;;
				}
				$land_lhs_true$$if_end27$4: do {
					if (__label__ == 2) {
						var $5 = HEAP32[(($wc) >> 2)];
						var $call1 = __Z7IsAlphaj($5);
						var $tobool = ((($call1)) | 0) != 0;
						if (!($tobool)) {
							__label__ = 11;
							break $land_lhs_true$$if_end27$4;
						}
						var $6 = $nbytes;
						var $add = ((($6) + 1) & 4294967295);
						var $7 = $word;
						var $arrayidx2 = (($7 + $add) & 4294967295);
						var $8 = HEAP8[($arrayidx2)];
						var $conv3 = (tempInt = (($8)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp4 = ((($conv3)) | 0) == 46;
						if ($cmp4) {
							__label__ = 4;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 4) {
							var $9 = $nbytes;
							var $add6 = ((($9) + 2) & 4294967295);
							var $10 = $word;
							var $arrayidx7 = (($10 + $add6) & 4294967295);
							var $11 = HEAP8[($arrayidx7)];
							var $conv8 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp9 = ((($conv8)) | 0) == 32;
							if ($cmp9) {
								__label__ = 5;;
							} else {
								__label__ = 6;;
							}
							if (__label__ == 5) {
								$ok = 1;
								__label__ = 12;
								break $land_lhs_true$$if_end27$4;
							} else if (__label__ == 6) {
								var $12 = $nbytes;
								var $add11 = ((($12) + 2) & 4294967295);
								var $13 = $word;
								var $arrayidx12 = (($13 + $add11) & 4294967295);
								var $14 = HEAP8[($arrayidx12)];
								var $conv13 = (tempInt = (($14)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp14 = ((($conv13)) | 0) == 39;
								if (!($cmp14)) {
									__label__ = 11;
									break $land_lhs_true$$if_end27$4;
								}
								var $15 = $nbytes;
								var $add16 = ((($15) + 2) & 4294967295);
								$nbytes = $add16;
								$ok = 2;
								__label__ = 12;
								break $land_lhs_true$$if_end27$4;
							}
						} else if (__label__ == 8) {
							var $16 = $count;
							var $cmp19 = ((($16)) | 0) > 0;
							if (!($cmp19)) {
								__label__ = 11;
								break $land_lhs_true$$if_end27$4;
							}
							var $17 = $nbytes;
							var $18 = $word;
							var $arrayidx21 = (($18 + $17) & 4294967295);
							var $19 = HEAP8[($arrayidx21)];
							var $conv22 = (tempInt = (($19)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp23 = ((($conv22)) | 0) == 32;
							if (!($cmp23)) {
								__label__ = 11;
								break $land_lhs_true$$if_end27$4;
							}
							$ok = 2;
							__label__ = 12;
							break $land_lhs_true$$if_end27$4;
						}
					}
				} while (0);
				if (__label__ == 11) {
					var $_pr = $ok;
					var $cmp28 = ((($_pr)) | 0) == 0;
					if ($cmp28) {
						__label__ = 17;
						break $for_cond$2;
					}
				}
				$ix = 0;
				var $20 = $ix;
				var $21 = $nbytes;
				var $cmp324 = ((($20)) | 0) < ((($21)) | 0);
				if ($cmp324) {
					__label__ = 13;;
				} else {
					__label__ = 14;;
				}
				$for_body$$for_end$19: do {
					if (__label__ == 13) {
						while (1) {
							var $22 = $ix;
							var $23 = $word;
							var $arrayidx33 = (($23 + $22) & 4294967295);
							var $24 = HEAP8[($arrayidx33)];
							var $25 = $wbuf;
							var $incdec_ptr = (($25 + 1) & 4294967295);
							$wbuf = $incdec_ptr;
							HEAP8[($25)] = $24;
							var $26 = $ix;
							var $inc = ((($26) + 1) & 4294967295);
							$ix = $inc;
							var $27 = $ix;
							var $28 = $nbytes;
							var $cmp32 = ((($27)) | 0) < ((($28)) | 0);
							if ($cmp32) {
								__label__ = 13;
								continue;
							} else {
								__label__ = 14;
								break $for_body$$for_end$19;
							}
						}
					}
				} while (0);
				var $29 = $count;
				var $inc34 = ((($29) + 1) & 4294967295);
				$count = $inc34;
				var $30 = $ok;
				var $cmp35 = ((($30)) | 0) == 2;
				var $31 = $nbytes;
				if ($cmp35) {
					__label__ = 15;
					break $for_cond$2;
				}
				var $add38 = ((($31) + 3) & 4294967295);
				var $33 = $word;
				var $add_ptr39 = (($33 + $add38) & 4294967295);
				$word = $add_ptr39;
				__label__ = 1;
				continue $for_cond$2;
			}
			if (__label__ == 15) {
				var $32 = $word;
				var $add_ptr = (($32 + $31) & 4294967295);
				$word = $add_ptr;;
			}
			var $34 = $count;
			var $cmp41 = ((($34)) | 0) > 1;
			if ($cmp41) {
				__label__ = 18;;
			} else {
				__label__ = 21;;
			}
			if (__label__ == 18) {
				var $35 = $wbuf;
				var $arraydecay43 = (($word_buf) & 4294967295);
				var $sub_ptr_lhs_cast = ($35);
				var $sub_ptr_rhs_cast = ($arraydecay43);
				var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
				$ix = $sub_ptr_sub;
				var $36 = $word1_addr;
				var $arraydecay44 = (($word_buf) & 4294967295);
				var $37 = $ix;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $arraydecay44;
				$dest$ = $36;
				$stop$ = $src$ + $37;
				if (($dest$ % 4) == ($src$ % 4) && $37 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $38 = $ix;
				var $39 = $word1_addr;
				var $arrayidx452 = (($39 + $38) & 4294967295);
				var $40 = $word;
				var $cmp463 = ((($arrayidx452)) >>> 0) < ((($40)) >>> 0);
				if ($cmp463) {
					__label__ = 19;;
				} else {
					__label__ = 20;;
				}
				$while_body$$while_end$29: do {
					if (__label__ == 19) {
						while (1) {
							var $41 = $ix;
							var $inc47 = ((($41) + 1) & 4294967295);
							$ix = $inc47;
							var $42 = $word1_addr;
							var $arrayidx48 = (($42 + $41) & 4294967295);
							HEAP8[($arrayidx48)] = 32;
							var $43 = $ix;
							var $44 = $word1_addr;
							var $arrayidx45 = (($44 + $43) & 4294967295);
							var $45 = $word;
							var $cmp46 = ((($arrayidx45)) >>> 0) < ((($45)) >>> 0);
							if ($cmp46) {
								__label__ = 19;
								continue;
							} else {
								__label__ = 20;
								break $while_body$$while_end$29;
							}
						}
					}
				} while (0);
				var $46 = $count;
				var $sub = ((($46) - 1) & 4294967295);
				var $mul = ((($sub) * 2) & 4294967295);
				HEAP32[((_dictionary_skipwords) >> 2)] = $mul;;
			}
			var $47 = $count;
			STACKTOP = __stackBase__;
			return $47;
			return null;
		}

		function __ZL22SpeakIndividualLettersP10TranslatorPcS1_i($tr, $word, $phonemes, $spell_word) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $phonemes_addr;
			var $spell_word_addr;
			var $posn;
			var $capitals;
			var $non_initial;
			$tr_addr = $tr;
			$word_addr = $word;
			$phonemes_addr = $phonemes;
			$spell_word_addr = $spell_word;
			$posn = 0;
			$capitals = 0;
			$non_initial = 0;
			var $0 = $spell_word_addr;
			var $cmp = ((($0)) | 0) > 2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$capitals = 2;;
			}
			$while_cond$4: while (1) {
				var $1 = $word_addr;
				var $2 = HEAP8[($1)];
				var $conv = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp1 = ((($conv)) | 0) != 32;
				if (!($cmp1)) {
					__label__ = 3;
					break $while_cond$4;
				}
				var $4 = $word_addr;
				var $5 = HEAP8[($4)];
				var $conv2 = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp3 = ((($conv2)) | 0) != 0;
				var $6 = $tr_addr;
				if ($cmp3) {
					__lastLabel__ = 4;;
				} else {
					__lastLabel__ = 4;
					__label__ = 7;
					break $while_cond$4;
				}
				var $7 = $word_addr;
				var $8 = $phonemes_addr;
				var $9 = $capitals;
				var $10 = $non_initial;
				var $or = ($10) | ($9);
				var $call = __Z15TranslateLetterP10TranslatorPcS1_i($6, $7, $8, $or);
				var $11 = $word_addr;
				var $add_ptr = (($11 + $call) & 4294967295);
				$word_addr = $add_ptr;
				var $12 = $posn;
				var $inc = ((($12) + 1) & 4294967295);
				$posn = $inc;
				$non_initial = 1;
				var $13 = $phonemes_addr;
				var $arrayidx = (($13) & 4294967295);
				var $14 = HEAP8[($arrayidx)];
				var $conv4 = (tempInt = (($14)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp5 = ((($conv4)) | 0) == 21;
				if ($cmp5) {
					__label__ = 6;
					break $while_cond$4;
				} else {
					__label__ = 2;
					continue $while_cond$4;
				}
			}
			$land_end_thread$$while_end$$if_then6$8: do {
				if (__label__ == 3) {
					var $3 = $tr_addr;
					__lastLabel__ = 3;
					__label__ = 7;
					break $land_end_thread$$while_end$$if_then6$8;
				} else if (__label__ == 6) {
					var $15 = $phonemes_addr;
					var $call7 = _strcpy(((_word_phonemes) & 4294967295), $15);
					$retval = 0;
					__label__ = 8;
					break $land_end_thread$$while_end$$if_then6$8;
				}
			} while (0);
			if (__label__ == 7) {
				var $16 = __lastLabel__ == 3 ? $3 : ($6);
				var $17 = $phonemes_addr;
				var $18 = $spell_word_addr;
				var $19 = $posn;
				__Z17SetSpellingStressP10TranslatorPcii($16, $17, $18, $19);
				var $20 = $word_addr;
				$retval = $20;;
			}
			var $21 = $retval;;
			return $21;
			return null;
		}

		function __Z14SetTranslator2PKc($new_language) {;
			var __label__;
			var $new_language_addr;
			var $new_phoneme_tab;
			$new_language_addr = $new_language;
			var $0 = $new_language_addr;
			var $call = __Z22SelectPhonemeTableNamePKc($0);
			$new_phoneme_tab = $call;
			var $cmp = ((($call)) | 0) >= 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 7;;
			}
			$if_then$$if_end14$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((_translator2) >> 2)];
					var $cmp1 = ((($1)) | 0) != 0;
					if ($cmp1) {
						__label__ = 2;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 2) {
						var $2 = $new_language_addr;
						var $call2 = _strcmp($2, ((__ZL20translator2_language) & 4294967295));
						var $cmp3 = ((($call2)) | 0) != 0;
						var $3 = HEAP32[((_translator2) >> 2)];
						if ($cmp3) {
							__label__ = 3;;
						} else {
							__label__ = 4;;
						}
						if (__label__ == 3) {
							__Z16DeleteTranslatorP10Translator($3);
							HEAP32[((_translator2) >> 2)] = 0;;
						} else if (__label__ == 4) {
							var $cmp5 = ((($3)) | 0) == 0;
							if (!($cmp5)) {
								__label__ = 7;
								break $if_then$$if_end14$2;
							}
						}
					}
					var $4 = $new_language_addr;
					var $call7 = __Z16SelectTranslatorPKc($4);
					HEAP32[((_translator2) >> 2)] = $call7;
					var $5 = $new_language_addr;
					var $call8 = _strcpy(((__ZL20translator2_language) & 4294967295), $5);
					var $6 = HEAP32[((_translator2) >> 2)];
					var $7 = $new_language_addr;
					var $call9 = __Z14LoadDictionaryP10TranslatorPKci($6, $7, 0);
					var $cmp10 = ((($call9)) | 0) != 0;
					if (!($cmp10)) {
						__label__ = 7;
						break $if_then$$if_end14$2;
					}
					var $8 = HEAP32[((_voice) >> 2)];
					var $phoneme_tab_ix = (($8 + 40) & 4294967295);
					var $9 = HEAP32[(($phoneme_tab_ix) >> 2)];
					__Z18SelectPhonemeTablei($9);
					$new_phoneme_tab = -1;
					HEAP8[(((__ZL20translator2_language) & 4294967295))] = 0;;
				}
			} while (0);
			var $10 = $new_phoneme_tab;;
			return $10;
			return null;
		}

		function __Z15TranslateClauseP10TranslatorP7__sFILEPKvPiPPc($tr, $f_text, $vp_input, $tone_out, $voice_change) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 6500;
			_memset(__stackBase__, 0, 6500);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $f_text_addr;
			var $vp_input_addr;
			var $tone_out_addr;
			var $voice_change_addr;
			var $ix;
			var $c;
			var $cc = __stackBase__;
			var $source_index = __stackBase__ + 4;
			var $prev_source_index;
			var $source_index_word;
			var $prev_in = __stackBase__ + 8;
			var $prev_out = __stackBase__ + 12;
			var $prev_out2;
			var $prev_in2;
			var $prev_in_save;
			var $next_in = __stackBase__ + 16;
			var $next_in_nbytes;
			var $char_inserted = __stackBase__ + 20;
			var $clause_pause;
			var $pre_pause_add;
			var $word_mark;
			var $all_upper_case;
			var $finished;
			var $single_quoted;
			var $phoneme_mode;
			var $dict_flags;
			var $word_flags;
			var $next_word_flags;
			var $embedded_count;
			var $letter_count;
			var $space_inserted;
			var $syllable_marked;
			var $decimal_sep_count;
			var $word;
			var $p;
			var $j;
			var $k;
			var $n_digits;
			var $individual_digits;
			var $charix_top = __stackBase__ + 24;
			var $charix = __stackBase__ + 28;
			var $words = __stackBase__ + 1436;
			var $word_count;
			var $sbuf = __stackBase__ + 5036;
			var $terminator;
			var $tone;
			var $tone2 = __stackBase__ + 5736;
			var $srcix;
			var $next2_in = __stackBase__ + 5740;
			var $nx;
			var $c_temp = __stackBase__ + 5744;
			var $pn;
			var $pw;
			var $nw;
			var $number_buf = __stackBase__ + 5748;
			var $num_wtab = __stackBase__ + 5900;
			var $p2;
			$tr_addr = $tr;
			$f_text_addr = $f_text;
			$vp_input_addr = $vp_input;
			$tone_out_addr = $tone_out;
			$voice_change_addr = $voice_change;
			HEAP32[(($source_index) >> 2)] = 0;
			$prev_source_index = 0;
			$source_index_word = 0;
			HEAP32[(($prev_out) >> 2)] = 32;
			$prev_in2 = 0;
			$prev_in_save = 0;
			HEAP32[(($char_inserted) >> 2)] = 0;
			$pre_pause_add = 0;
			$word_mark = 0;
			$all_upper_case = 1;
			$phoneme_mode = 0;
			$dict_flags = 0;
			$embedded_count = 0;
			$letter_count = 0;
			$space_inserted = 0;
			$syllable_marked = 0;
			$decimal_sep_count = 0;
			HEAP32[(($charix_top) >> 2)] = 0;
			$word_count = 0;
			var $0 = $tr_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					$retval = 0;;
				} else if (__label__ == 2) {
					var $1 = $vp_input_addr;
					HEAP32[((_p_textinput) >> 2)] = $1;
					var $2 = $vp_input_addr;
					var $3 = $2;
					HEAP32[((_p_wchar_input) >> 2)] = $3;
					HEAP32[((__ZL11embedded_ix) >> 2)] = 0;
					HEAP32[((__ZL13embedded_read) >> 2)] = 0;
					HEAP32[((_pre_pause) >> 2)] = 0;
					HEAP8[(__ZL18any_stressed_words_b)] = 0;
					var $4 = HEAP32[((_count_characters) >> 2)];
					HEAP32[((_clause_start_char) >> 2)] = $4;
					var $cmp1 = ((($4)) | 0) < 0;
					if ($cmp1) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						HEAP32[((_clause_start_char) >> 2)] = 0;;
					}
					var $5 = HEAP32[((_count_words) >> 2)];
					var $add = ((($5) + 1) & 4294967295);
					HEAP32[((_clause_start_word) >> 2)] = $add;
					$ix = 0;;
					$for_body$8: while (1) {
						var $6 = $ix;
						var $arrayidx = (($charix + $6 * 2) & 4294967295);
						HEAP16[(($arrayidx) >> 1)] = 0;
						var $7 = $ix;
						var $inc = ((($7) + 1) & 4294967295);
						$ix = $inc;
						var $cmp4 = ((($inc)) | 0) < 700;
						if ($cmp4) {
							__label__ = 5;
							continue $for_body$8;
						} else {
							__label__ = 6;
							break $for_body$8;
						}
					}
					var $8 = $tr_addr;
					var $9 = $f_text_addr;
					var $arraydecay = (($charix) & 4294967295);
					var $call = __Z10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_($8, $9, ((__ZL6source) & 4294967295), $arraydecay, $charix_top, 700, $tone2, ((__ZZ15TranslateClauseP10TranslatorP7__sFILEPKvPiPPcE17voice_change_name) & 4294967295));
					$terminator = $call;
					var $10 = HEAP32[((_f_logespeak) >> 2)];
					var $cmp5 = ((($10)) | 0) != 0;
					if ($cmp5) {
						__label__ = 7;;
					} else {
						__label__ = 11;;
					}
					$land_lhs_true$$if_end17$11: do {
						if (__label__ == 7) {
							var $11 = HEAP32[((_logging_type) >> 2)];
							var $and = ($11) & 4;
							var $tobool = ((($and)) | 0) != 0;
							if (!($tobool)) {
								__label__ = 11;
								break $land_lhs_true$$if_end17$11;
							}
							var $12 = HEAP32[((_f_logespeak) >> 2)];
							var $13 = $terminator;
							var $call7 = _fprintf($12, ((__str7550) & 4294967295), allocate([$13, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							$p = ((__ZL6source) & 4294967295);
							var $14 = $p;
							var $15 = HEAP8[($14)];
							var $conv59 = (tempInt = (($15)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp960 = ((($conv59)) | 0) != 0;
							if ($cmp960) {
								__label__ = 9;;
							} else {
								__label__ = 10;;
							}
							$for_body10$$for_end14$14: do {
								if (__label__ == 9) {
									while (1) {
										var $16 = $p;
										var $17 = HEAP8[($16)];
										var $conv11 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $18 = HEAP32[((_f_logespeak) >> 2)];
										var $call12 = _fputc($conv11, $18);
										var $19 = $p;
										var $incdec_ptr = (($19 + 1) & 4294967295);
										$p = $incdec_ptr;
										var $20 = $p;
										var $21 = HEAP8[($20)];
										var $conv = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp9 = ((($conv)) | 0) != 0;
										if ($cmp9) {
											__label__ = 9;
											continue;
										} else {
											__label__ = 10;
											break $for_body10$$for_end14$14;
										}
									}
								}
							} while (0);
							var $22 = HEAP32[((_f_logespeak) >> 2)];
							var $23 = _fwrite(((__str8551) & 4294967295), 10, 1, $22);
							var $24 = HEAP32[((_f_logespeak) >> 2)];
							var $call16 = _fflush($24);;
						}
					} while (0);
					$p = ((__ZL6source) & 4294967295);
					var $25 = HEAP32[(($charix_top) >> 2)];
					var $add18 = ((($25) + 1) & 4294967295);
					var $arrayidx19 = (($charix + $add18 * 2) & 4294967295);
					HEAP16[(($arrayidx19) >> 1)] = 0;
					var $26 = HEAP32[(($charix_top) >> 2)];
					var $add20 = ((($26) + 2) & 4294967295);
					var $arrayidx21 = (($charix + $add20 * 2) & 4294967295);
					HEAP16[(($arrayidx21) >> 1)] = 32767;
					var $27 = HEAP32[(($charix_top) >> 2)];
					var $add22 = ((($27) + 3) & 4294967295);
					var $arrayidx23 = (($charix + $add22 * 2) & 4294967295);
					HEAP16[(($arrayidx23) >> 1)] = 0;
					var $28 = $terminator;
					var $and24 = ($28) & 4095;
					var $mul = ((($and24) * 10) & 4294967295);
					$clause_pause = $mul;
					var $29 = $terminator;
					var $shr = ($29) >> 12;
					var $and25 = ($shr) & 7;
					$tone = $and25;
					var $30 = HEAP32[(($tone2) >> 2)];
					var $cmp26 = ((($30)) | 0) != 0;
					if ($cmp26) {
						__label__ = 12;;
					} else {
						__label__ = 13;;
					}
					if (__label__ == 12) {
						var $31 = HEAP32[(($tone2) >> 2)];
						$tone = $31;;
					}
					$p = ((__ZL6source) & 4294967295);;
					$for_cond29$22: while (1) {
						var $32 = $p;
						var $33 = HEAP8[($32)];
						var $conv30 = (tempInt = (($33)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp31 = ((($conv30)) | 0) != 0;
						if (!($cmp31)) {
							__label__ = 17;
							break $for_cond29$22;
						}
						var $34 = $p;
						var $35 = HEAP8[($34)];
						var $conv33 = (tempInt = (($35)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call34 = __Z8isspace2j($conv33);
						var $tobool35 = ((($call34)) | 0) != 0;
						if (!($tobool35)) {
							__label__ = 17;
							break $for_cond29$22;
						}
						var $36 = $p;
						var $incdec_ptr39 = (($36 + 1) & 4294967295);
						$p = $incdec_ptr39;
						__label__ = 14;
						continue $for_cond29$22;
					}
					var $37 = $p;
					var $38 = HEAP8[($37)];
					var $conv41 = (tempInt = (($38)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp42 = ((($conv41)) | 0) == 0;
					if ($cmp42) {
						__label__ = 18;;
					} else {
						__label__ = 21;;
					}
					if (__label__ == 18) {
						var $39 = HEAP32[((__ZL16max_clause_pause) >> 2)];
						var $40 = $clause_pause;
						var $sub = ((($40) - ($39)) & 4294967295);
						$clause_pause = $sub;
						var $41 = $clause_pause;
						var $cmp44 = ((($41)) | 0) < 0;
						if ($cmp44) {
							__label__ = 19;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 19) {
							$clause_pause = 0;;
						}
						var $42 = $terminator;
						var $and47 = ($42) & -524289;
						$terminator = $and47;
						var $43 = $clause_pause;
						var $44 = HEAP32[((__ZL16max_clause_pause) >> 2)];
						var $add48 = ((($44) + ($43)) & 4294967295);
						HEAP32[((__ZL16max_clause_pause) >> 2)] = $add48;;
					} else if (__label__ == 21) {
						var $45 = $clause_pause;
						HEAP32[((__ZL16max_clause_pause) >> 2)] = $45;;
					}
					var $46 = $terminator;
					var $47 = $tr_addr;
					var $clause_terminator = (($47 + 8324) & 4294967295);
					HEAP32[(($clause_terminator) >> 2)] = $46;
					var $48 = HEAP32[((_new_sentence) >> 2)];
					var $tobool50 = ((($48)) | 0) != 0;
					if ($tobool50) {
						__label__ = 23;;
					} else {
						__label__ = 26;;
					}
					$if_then51$$if_end59$34: do {
						if (__label__ == 23) {
							var $49 = HEAP32[((_count_sentences) >> 2)];
							var $inc52 = ((($49) + 1) & 4294967295);
							HEAP32[((_count_sentences) >> 2)] = $inc52;
							var $50 = HEAP32[((_skip_sentences) >> 2)];
							var $cmp53 = ((($50)) | 0) > 0;
							if (!($cmp53)) {
								__label__ = 26;
								break $if_then51$$if_end59$34;
							}
							var $51 = HEAP32[((_skip_sentences) >> 2)];
							var $dec = ((($51) - 1) & 4294967295);
							HEAP32[((_skip_sentences) >> 2)] = $dec;
							var $52 = HEAP32[((_skip_sentences) >> 2)];
							var $cmp55 = ((($52)) | 0) == 0;
							if (!($cmp55)) {
								__label__ = 26;
								break $if_then51$$if_end59$34;
							}
							HEAP32[((_skipping_text) >> 2)] = 0;;
						}
					} while (0);
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = ((_ph_list2) & 4294967295);
					$stop$ = $dest$ + 8;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					HEAP8[(((_ph_list2) & 4294967295))] = 10;
					HEAP32[((_n_ph_list2) >> 2)] = 1;
					var $53 = $tr_addr;
					var $prev_last_stress = (($53 + 8288) & 4294967295);
					HEAP32[(($prev_last_stress) >> 2)] = 0;
					var $54 = $tr_addr;
					var $prepause_timeout = (($54 + 8312) & 4294967295);
					HEAP32[(($prepause_timeout) >> 2)] = 0;
					var $55 = $tr_addr;
					var $expect_verb = (($55 + 8272) & 4294967295);
					HEAP32[(($expect_verb) >> 2)] = 0;
					var $56 = $tr_addr;
					var $expect_noun = (($56 + 8284) & 4294967295);
					HEAP32[(($expect_noun) >> 2)] = 0;
					var $57 = $tr_addr;
					var $expect_past = (($57 + 8276) & 4294967295);
					HEAP32[(($expect_past) >> 2)] = 0;
					var $58 = $tr_addr;
					var $expect_verb_s = (($58 + 8280) & 4294967295);
					HEAP32[(($expect_verb_s) >> 2)] = 0;
					var $59 = $tr_addr;
					var $phonemes_repeat_count = (($59 + 652) & 4294967295);
					HEAP32[(($phonemes_repeat_count) >> 2)] = 0;
					var $60 = $tr_addr;
					var $end_stressed_vowel = (($60 + 8316) & 4294967295);
					HEAP32[(($end_stressed_vowel) >> 2)] = 0;
					var $61 = $tr_addr;
					var $prev_dict_flags = (($61 + 8320) & 4294967295);
					HEAP32[(($prev_dict_flags) >> 2)] = 0;
					$word_count = 0;
					$single_quoted = 0;
					$word_flags = 0;
					$next_word_flags = 0;
					var $arrayidx60 = (($sbuf) & 4294967295);
					HEAP8[($arrayidx60)] = 0;
					var $arrayidx61 = (($sbuf + 1) & 4294967295);
					HEAP8[($arrayidx61)] = 32;
					var $arrayidx62 = (($sbuf + 2) & 4294967295);
					HEAP8[($arrayidx62)] = 32;
					$ix = 3;
					HEAP32[(($prev_in) >> 2)] = 32;
					var $62 = $ix;
					var $conv63 = ((($62)) & 65535);
					var $arrayidx64 = (($words) & 4294967295);
					var $start = (($arrayidx64 + 4) & 4294967295);
					HEAP16[(($start) >> 1)] = $conv63;
					var $arrayidx65 = (($words) & 4294967295);
					var $flags = (($arrayidx65) & 4294967295);
					HEAP32[(($flags) >> 2)] = 0;
					$finished = 0;
					$j = 0;
					var $63 = $j;
					var $arrayidx6755 = (($charix + $63 * 2) & 4294967295);
					var $64 = HEAP16[(($arrayidx6755) >> 1)];
					var $conv6856 = (tempInt = (($64)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $cmp6957 = ((($conv6856)) | 0) <= 0;
					var $65 = $j;
					if ($cmp6957) {
						__lastLabel__ = 26;
						__label__ = 27;;
					} else {
						__lastLabel__ = 26;
						__label__ = 28;;
					}
					$for_inc71$$for_end73$39: do {
						if (__label__ == 27) {
							while (1) {
								var $66 = __lastLabel__ == 27 ? $69 : ($65);
								var $inc72 = ((($66) + 1) & 4294967295);
								$j = $inc72;
								var $67 = $j;
								var $arrayidx67 = (($charix + $67 * 2) & 4294967295);
								var $68 = HEAP16[(($arrayidx67) >> 1)];
								var $conv68 = (tempInt = (($68)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $cmp69 = ((($conv68)) | 0) <= 0;
								var $69 = $j;
								if ($cmp69) {
									__lastLabel__ = 27;
									__label__ = 27;
									continue;
								} else {
									__lastLabel__ = 27;
									__label__ = 28;
									break $for_inc71$$for_end73$39;
								}
							}
						}
					} while (0);
					var $_lcssa54 = __lastLabel__ == 26 ? $65 : ($69);
					var $arrayidx74 = (($charix + $_lcssa54 * 2) & 4294967295);
					var $70 = HEAP16[(($arrayidx74) >> 1)];
					var $arrayidx75 = (($words) & 4294967295);
					var $sourceix = (($arrayidx75 + 6) & 4294967295);
					HEAP16[(($sourceix) >> 1)] = $70;
					$k = 0;
					var $71 = $j;
					var $arrayidx7651 = (($charix + $71 * 2) & 4294967295);
					var $72 = HEAP16[(($arrayidx7651) >> 1)];
					var $conv7752 = (tempInt = (($72)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $cmp7853 = ((($conv7752)) | 0) != 0;
					if ($cmp7853) {
						__label__ = 29;;
					} else {
						__label__ = 32;;
					}
					$while_body$$while_end$43: do {
						if (__label__ == 29) {
							while (1) {
								var $73 = $j;
								var $inc79 = ((($73) + 1) & 4294967295);
								$j = $inc79;
								var $arrayidx80 = (($charix + $73 * 2) & 4294967295);
								var $74 = HEAP16[(($arrayidx80) >> 1)];
								var $conv81 = (tempInt = (($74)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $cmp82 = ((($conv81)) | 0) != -1;
								if ($cmp82) {
									__label__ = 30;;
								} else {
									__label__ = 31;;
								}
								if (__label__ == 30) {
									var $75 = $k;
									var $inc84 = ((($75) + 1) & 4294967295);
									$k = $inc84;;
								}
								var $76 = $j;
								var $arrayidx76 = (($charix + $76 * 2) & 4294967295);
								var $77 = HEAP16[(($arrayidx76) >> 1)];
								var $conv77 = (tempInt = (($77)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $cmp78 = ((($conv77)) | 0) != 0;
								if ($cmp78) {
									__label__ = 29;
									continue;
								} else {
									__label__ = 32;
									break $while_body$$while_end$43;
								}
							}
						}
					} while (0);
					var $78 = $k;
					var $conv86 = ((($78)) & 255);
					var $arrayidx87 = (($words) & 4294967295);
					var $length = (($arrayidx87 + 10) & 4294967295);
					HEAP8[($length)] = $conv86;;
					$while_cond88$50: while (1) {
						var $79 = $finished;
						var $tobool89 = ((($79)) | 0) != 0;
						if ($tobool89) {
							__label__ = 230;
							break $while_cond88$50;
						}
						var $80 = $ix;
						var $cmp91 = ((($80)) | 0) < 700;
						var $81 = HEAP32[((_n_ph_list2) >> 2)];
						var $cmp92 = ((($81)) | 0) < 996;
						var $or_cond12 = ($cmp91) & ($cmp92);
						if (!($or_cond12)) {
							__label__ = 230;
							break $while_cond88$50;
						}
						var $82 = HEAP32[(($prev_out) >> 2)];
						$prev_out2 = $82;
						var $83 = $ix;
						var $sub94 = ((($83) - 1) & 4294967295);
						var $arrayidx95 = (($sbuf + $sub94) & 4294967295);
						var $call96 = __Z8utf8_in2PiPKci($prev_out, $arrayidx95, 1);
						var $84 = $tr_addr;
						var $langopts = (($84) & 4294967295);
						var $tone_numbers = (($langopts + 250) & 4294967295);
						var $85 = HEAP8[($tone_numbers)];
						var $tobool97 = (tempInt = (($85)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
						if ($tobool97) {
							__label__ = 36;;
						} else {
							__label__ = 39;;
						}
						$land_lhs_true98$$if_end105$54: do {
							if (__label__ == 36) {
								var $86 = HEAP32[(($prev_out) >> 2)];
								var $call99 = __ZL9IsDigit09j($86);
								var $tobool100 = ((($call99)) | 0) != 0;
								if (!($tobool100)) {
									__label__ = 39;
									break $land_lhs_true98$$if_end105$54;
								}
								var $87 = $prev_out2;
								var $call102 = __Z7IsAlphaj($87);
								var $tobool103 = ((($call102)) | 0) != 0;
								if (!($tobool103)) {
									__label__ = 39;
									break $land_lhs_true98$$if_end105$54;
								}
								HEAP32[(($prev_out) >> 2)] = 97;;
							}
						} while (0);
						var $88 = $prev_in_save;
						var $cmp106 = ((($88)) | 0) != 0;
						if ($cmp106) {
							__label__ = 40;;
						} else {
							__label__ = 41;;
						}
						$if_then107$$if_else108$59: do {
							if (__label__ == 40) {
								var $89 = $prev_in_save;
								HEAP32[(($prev_in) >> 2)] = $89;
								$prev_in_save = 0;;
							} else if (__label__ == 41) {
								var $90 = HEAPU32[(($source_index) >> 2)];
								var $cmp109 = ((($90)) >>> 0) > 0;
								if (!($cmp109)) {
									__label__ = 43;
									break $if_then107$$if_else108$59;
								}
								var $91 = HEAP32[(($prev_in) >> 2)];
								$prev_in2 = $91;
								var $92 = HEAP32[(($source_index) >> 2)];
								var $sub111 = ((($92) - 1) & 4294967295);
								var $arrayidx112 = ((__ZL6source + $sub111) & 4294967295);
								var $call113 = __Z8utf8_in2PiPKci($prev_in, $arrayidx112, 1);;
							}
						} while (0);
						var $93 = HEAP32[(($source_index) >> 2)];
						$prev_source_index = $93;
						var $94 = HEAP32[(($char_inserted) >> 2)];
						var $tobool116 = ((($94)) | 0) != 0;
						if ($tobool116) {
							__label__ = 44;;
						} else {
							__label__ = 45;;
						}
						if (__label__ == 44) {
							var $95 = HEAP32[(($char_inserted) >> 2)];
							$c = $95;
							HEAP32[(($char_inserted) >> 2)] = 0;;
						} else if (__label__ == 45) {
							var $96 = HEAP32[(($source_index) >> 2)];
							var $arrayidx119 = ((__ZL6source + $96) & 4294967295);
							var $call120 = __Z7utf8_inPiPKc($cc, $arrayidx119);
							var $97 = HEAP32[(($source_index) >> 2)];
							var $add121 = ((($97) + ($call120)) & 4294967295);
							HEAP32[(($source_index) >> 2)] = $add121;
							var $98 = HEAP32[(($cc) >> 2)];
							$c = $98;;
						}
						var $99 = HEAP32[(($source_index) >> 2)];
						var $arrayidx123 = ((__ZL6source + $99) & 4294967295);
						var $call124 = __Z7utf8_inPiPKc($next_in, $arrayidx123);
						$next_in_nbytes = $call124;
						var $100 = $c;
						if ($100 == 0) {
							__label__ = 47;;
						} else if ($100 == 1) {
							__label__ = 49;;
						} else {
							__label__ = 48;;
						}
						$lor_lhs_false$$if_end127_thread$$if_then131$68: do {
							if (__label__ == 47) {
								$finished = 1;
								$c = 32;
								__label__ = 48;
								break $lor_lhs_false$$if_end127_thread$$if_then131$68;
							}
						} while (0);
						$lor_lhs_false$$if_then131$70: do {
							if (__label__ == 48) {
								var $101 = $c;
								var $102 = HEAP8[(_ctrl_embedded)];
								var $conv129 = (tempInt = (($102)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp130 = ((($101)) | 0) == ((($conv129)) | 0);
								if ($cmp130) {
									__label__ = 49;
									break $lor_lhs_false$$if_then131$70;
								} else {
									__label__ = 52;
									break $lor_lhs_false$$if_then131$70;
								}
							}
						} while (0);
						if (__label__ == 49) {
							var $103 = HEAP32[(($source_index) >> 2)];
							var $sub132 = ((($103) - 1) & 4294967295);
							$srcix = $sub132;
							var $104 = HEAP32[(($prev_in) >> 2)];
							var $cmp133 = ((($104)) | 0) != 32;
							if ($cmp133) {
								__label__ = 50;;
							} else {
								__label__ = 51;;
							}
							if (__label__ == 50) {
								$c = 32;
								var $105 = $c;
								$prev_in_save = $105;
								var $106 = HEAP32[(($source_index) >> 2)];
								var $dec135 = ((($106) - 1) & 4294967295);
								HEAP32[(($source_index) >> 2)] = $dec135;;
							} else if (__label__ == 51) {
								var $call137 = __ZL15EmbeddedCommandRj($source_index);
								var $107 = $embedded_count;
								var $add138 = ((($107) + ($call137)) & 4294967295);
								$embedded_count = $add138;
								var $108 = HEAP32[(($prev_in) >> 2)];
								$prev_in_save = $108;
								var $109 = $srcix;
								var $arrayidx139 = ((__ZL6source + $109) & 4294967295);
								var $110 = HEAP32[(($source_index) >> 2)];
								var $111 = $srcix;
								var $sub140 = ((($110) - ($111)) & 4294967295);
								var $dest$, $stop$, $stop4$, $fast$, $value4$;
								$dest$ = $arrayidx139;
								$stop$ = $dest$ + $sub140;
								$value4$ = 32;
								if ($value4$ < 0) $value4$ += 256;
								$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
								while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
									HEAP8[$dest$++] = 32;
								}
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($dest$ < $stop4$) {;;;;;;;
									HEAP32[$dest$++] = $value4$;
								}
								$dest$ <<= 2;
								while ($dest$ < $stop$) {;;
									HEAP8[$dest$++] = 32;
								};
								var $112 = $srcix;
								HEAP32[(($source_index) >> 2)] = $112;
								__label__ = 33;
								continue $while_cond88$50;
							}
						}
						var $113 = HEAP32[((__ZL13option_sayas2) >> 2)];
						var $cmp143 = ((($113)) | 0) == 36;
						if ($cmp143) {
							__label__ = 53;;
						} else {
							__label__ = 58;;
						}
						$land_lhs_true144$$if_end153$78: do {
							if (__label__ == 53) {
								var $114 = $c;
								var $cmp145 = ((($114)) | 0) != 32;
								if (!($cmp145)) {
									__label__ = 58;
									break $land_lhs_true144$$if_end153$78;
								}
								var $115 = HEAP32[(($prev_in) >> 2)];
								var $cmp147 = ((($115)) | 0) == 32;
								if ($cmp147) {
									__label__ = 55;;
								} else {
									__label__ = 57;;
								}
								$land_lhs_true148$$if_end151$81: do {
									if (__label__ == 55) {
										var $116 = HEAP32[(($next_in) >> 2)];
										var $cmp149 = ((($116)) | 0) == 32;
										if (!($cmp149)) {
											__label__ = 57;
											break $land_lhs_true148$$if_end151$81;
										}
										HEAP32[((__ZL13option_sayas2) >> 2)] = 20;;
									}
								} while (0);
								var $117 = $c;
								var $call152 = __Z9towlower2j($117);
								$c = $call152;;
							}
						} while (0);
						var $118 = $phoneme_mode;
						var $tobool154 = ((($118)) | 0) != 0;
						if ($tobool154) {
							__label__ = 59;;
						} else {
							__label__ = 62;;
						}
						$if_then155$$if_else162$86: do {
							if (__label__ == 59) {
								$all_upper_case = 8;
								var $119 = $c;
								var $cmp156 = ((($119)) | 0) == 93;
								if (!($cmp156)) {
									__label__ = 195;
									break $if_then155$$if_else162$86;
								}
								var $120 = HEAP32[(($next_in) >> 2)];
								var $cmp158 = ((($120)) | 0) == 93;
								if (!($cmp158)) {
									__label__ = 195;
									break $if_then155$$if_else162$86;
								}
								$phoneme_mode = 0;
								var $121 = HEAP32[(($source_index) >> 2)];
								var $inc160 = ((($121) + 1) & 4294967295);
								HEAP32[(($source_index) >> 2)] = $inc160;
								$c = 32;;
							} else if (__label__ == 62) {
								var $122 = HEAP32[((__ZL13option_sayas2) >> 2)];
								var $and163 = ($122) & 240;
								var $cmp164 = ((($and163)) | 0) == 64;
								if ($cmp164) {
									__label__ = 63;;
								} else {
									__label__ = 68;;
								}
								if (__label__ == 63) {
									var $123 = $c;
									var $call166 = _iswdigit($123);
									var $tobool167 = ((($call166)) | 0) != 0;
									if ($tobool167) {
										__label__ = 64;;
									} else {
										__label__ = 66;;
									}
									if (__label__ == 64) {
										var $124 = HEAP32[((__ZL18count_sayas_digits) >> 2)];
										var $inc169 = ((($124) + 1) & 4294967295);
										HEAP32[((__ZL18count_sayas_digits) >> 2)] = $inc169;
										var $125 = HEAP32[((__ZL18count_sayas_digits) >> 2)];
										var $126 = HEAP32[((__ZL13option_sayas2) >> 2)];
										var $and170 = ($126) & 15;
										var $cmp171 = ((($125)) | 0) > ((($and170)) | 0);
										if (!($cmp171)) {
											__label__ = 195;
											break $if_then155$$if_else162$86;
										}
										$c = 32;
										$space_inserted = 1;
										HEAP32[((__ZL18count_sayas_digits) >> 2)] = 0;;
									} else if (__label__ == 66) {
										HEAP32[((__ZL18count_sayas_digits) >> 2)] = 0;
										var $127 = HEAP32[(($prev_out) >> 2)];
										var $call175 = _iswdigit($127);
										var $tobool176 = ((($call175)) | 0) != 0;
										if (!($tobool176)) {
											__label__ = 195;
											break $if_then155$$if_else162$86;
										}
										$c = 32;
										$space_inserted = 1;;
									}
								} else if (__label__ == 68) {
									var $128 = HEAP32[((__ZL13option_sayas2) >> 2)];
									var $and181 = ($128) & 16;
									var $cmp182 = ((($and181)) | 0) == 0;
									if (!($cmp182)) {
										__label__ = 195;
										break $if_then155$$if_else162$86;
									}
									var $129 = $c;
									var $cmp184 = ((($129)) | 0) == 146;
									var $130 = $c;
									var $cmp186 = ((($130)) | 0) == 180;
									var $or_cond = ($cmp184) | ($cmp186);
									var $131 = $c;
									var $cmp188 = ((($131)) | 0) == 8217;
									var $or_cond2 = ($or_cond) | ($cmp188);
									var $132 = $c;
									var $cmp190 = ((($132)) | 0) == 8242;
									var $or_cond3 = ($or_cond2) | ($cmp190);
									if ($or_cond3) {
										__label__ = 70;;
									} else {
										__label__ = 71;;
									}
									if (__label__ == 70) {
										$c = 39;;
									}
									var $133 = $c;
									var $cmp193 = ((($133)) | 0) == 8216;
									var $134 = $c;
									var $cmp195 = ((($134)) | 0) == 63;
									var $or_cond4 = ($cmp193) | ($cmp195);
									if ($or_cond4) {
										__lastLabel__ = 71;
										__label__ = 72;;
									} else {
										__lastLabel__ = 71;
										__label__ = 76;;
									}
									$land_lhs_true196$$if_end203$103: do {
										if (__label__ == 72) {
											var $135 = HEAP32[(($prev_out) >> 2)];
											var $call197 = __Z7IsAlphaj($135);
											var $tobool198 = ((($call197)) | 0) != 0;
											if ($tobool198) {
												__label__ = 73;;
											} else {
												__label__ = 75;;
											}
											$land_lhs_true199$$if_end203thread_pre_split$105: do {
												if (__label__ == 73) {
													var $136 = HEAP32[(($next_in) >> 2)];
													var $call200 = __Z7IsAlphaj($136);
													var $tobool201 = ((($call200)) | 0) != 0;
													if (!($tobool201)) {
														__label__ = 75;
														break $land_lhs_true199$$if_end203thread_pre_split$105;
													}
													$c = 39;
													__label__ = 80;
													break $land_lhs_true196$$if_end203$103;
												}
											} while (0);
											var $_pr = $c;
											__lastLabel__ = 75;
											__label__ = 76;
											break $land_lhs_true196$$if_end203$103;
										}
									} while (0);
									$if_end210$$if_end203$109: do {
										if (__label__ == 76) {
											var $137 = __lastLabel__ == 75 ? $_pr : ($134);
											var $cmp204 = ((($137)) | 0) == 1328;
											if ($cmp204) {
												__label__ = 77;;
											} else {
												__label__ = 78;;
											}
											if (__label__ == 77) {
												$c = 32;
												var $138 = $word_flags;
												var $or = ($138) | 1024;
												$word_flags = $or;;
											} else if (__label__ == 78) {
												var $_pr15_pr = $c;
												var $cmp207 = ((($_pr15_pr)) | 0) == 1367;
												if (!($cmp207)) {
													__label__ = 80;
													break $if_end210$$if_end203$109;
												}
												$c = 32;
												var $139 = $word_flags;
												var $or209 = ($139) | 131072;
												$word_flags = $or209;;
											}
										}
									} while (0);
									var $140 = $tr_addr;
									var $141 = HEAP32[(($source_index) >> 2)];
									var $arrayidx211 = ((__ZL6source + $141) & 4294967295);
									var $142 = HEAP32[(($prev_in) >> 2)];
									var $143 = $c;
									var $144 = HEAP32[(($next_in) >> 2)];
									var $call212 = __ZL13TranslateCharP10TranslatorPcijjPi($140, $arrayidx211, $142, $143, $144, $char_inserted);
									$c = $call212;
									var $cmp213 = ((($call212)) | 0) == 8;
									if ($cmp213) {
										__label__ = 33;
										continue $while_cond88$50;
									}
									var $145 = HEAP32[(($char_inserted) >> 2)];
									var $tobool216 = ((($145)) | 0) != 0;
									if ($tobool216) {
										__label__ = 82;;
									} else {
										__label__ = 83;;
									}
									if (__label__ == 82) {
										var $146 = HEAP32[(($char_inserted) >> 2)];
										HEAP32[(($next_in) >> 2)] = $146;;
									}
									var $147 = $c;
									var $call219 = __Z7IsAlphaj($147);
									var $tobool220 = ((($call219)) | 0) != 0;
									if ($tobool220) {
										__label__ = 91;;
									} else {
										__label__ = 84;;
									}
									$if_end244$$land_lhs_true221$120: do {
										if (__label__ == 84) {
											var $148 = $c;
											var $call222 = __Z7IsSpacej($148);
											var $tobool223 = ((($call222)) | 0) != 0;
											if ($tobool223) {
												__label__ = 91;
												break $if_end244$$land_lhs_true221$120;
											}
											var $149 = $tr_addr;
											var $punct_within_word = (($149 + 704) & 4294967295);
											var $150 = HEAP32[(($punct_within_word) >> 2)];
											var $151 = $c;
											var $call225 = _wcschr($150, $151);
											var $cmp226 = ((($call225)) | 0) == 0;
											if (!($cmp226)) {
												__label__ = 91;
												break $if_end244$$land_lhs_true221$120;
											}
											var $152 = HEAP32[(($prev_out) >> 2)];
											var $call228 = __Z7IsAlphaj($152);
											var $tobool229 = ((($call228)) | 0) != 0;
											if (!($tobool229)) {
												__label__ = 91;
												break $if_end244$$land_lhs_true221$120;
											}
											var $153 = $tr_addr;
											var $langopts231 = (($153) & 4294967295);
											var $tone_numbers232 = (($langopts231 + 250) & 4294967295);
											var $154 = HEAP8[($tone_numbers232)];
											var $tobool233 = (tempInt = (($154)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
											if ($tobool233) {
												__label__ = 88;;
											} else {
												__label__ = 90;;
											}
											$land_lhs_true234$$if_else241$125: do {
												if (__label__ == 88) {
													var $155 = $c;
													var $call235 = __ZL9IsDigit09j($155);
													var $tobool236 = ((($call235)) | 0) != 0;
													if (!($tobool236)) {
														__label__ = 90;
														break $land_lhs_true234$$if_else241$125;
													}
													var $156 = HEAP32[(($next_in) >> 2)];
													var $call238 = __ZL9IsDigit09j($156);
													var $tobool239 = ((($call238)) | 0) != 0;
													if (!($tobool239)) {
														__label__ = 91;
														break $if_end244$$land_lhs_true221$120;
													}
												}
											} while (0);
											$c = 32;
											$space_inserted = 1;;
										}
									} while (0);
									var $157 = HEAP32[(($prev_out) >> 2)];
									var $call245 = _iswdigit($157);
									var $tobool246 = ((($call245)) | 0) != 0;
									if ($tobool246) {
										__label__ = 92;;
									} else {
										__label__ = 94;;
									}
									$if_then247$$if_else258$130: do {
										if (__label__ == 92) {
											var $158 = $c;
											var $call248 = _iswdigit($158);
											var $tobool249 = ((($call248)) | 0) == 0;
											var $159 = $c;
											var $cmp251 = ((($159)) | 0) != 46;
											var $or_cond5 = ($tobool249) & ($cmp251);
											var $160 = $c;
											var $cmp253 = ((($160)) | 0) != 44;
											var $or_cond6 = ($or_cond5) & ($cmp253);
											var $161 = $c;
											var $cmp255 = ((($161)) | 0) != 32;
											var $or_cond7 = ($or_cond6) & ($cmp255);
											if ($or_cond7) {
												__lastLabel__ = 92;;
											} else {
												__lastLabel__ = 92;
												__label__ = 97;
												break $if_then247$$if_else258$130;
											}
											$c = 32;
											$space_inserted = 1;
											__label__ = 101;
											break $if_then247$$if_else258$130;
										} else if (__label__ == 94) {
											var $162 = HEAP32[(($prev_in) >> 2)];
											var $cmp259 = ((($162)) | 0) != 44;
											if ($cmp259) {
												__label__ = 95;;
											} else {
												__label__ = 96;;
											}
											if (__label__ == 95) {
												$decimal_sep_count = 0;;
											}
											var $_pr17 = $c;
											__lastLabel__ = 96;
											__label__ = 97;
											break $if_then247$$if_else258$130;
										}
									} while (0);
									$if_end273$$if_end262$137: do {
										if (__label__ == 97) {
											var $163 = __lastLabel__ == 96 ? $_pr17 : ($161);
											var $cmp263 = ((($163)) | 0) == 91;
											if (!($cmp263)) {
												__label__ = 101;
												break $if_end273$$if_end262$137;
											}
											var $164 = HEAP32[(($next_in) >> 2)];
											var $cmp265 = ((($164)) | 0) == 2;
											if ($cmp265) {
												__label__ = 100;;
											} else {
												__label__ = 99;;
											}
											if (__label__ == 99) {
												var $165 = HEAP32[(($next_in) >> 2)];
												var $cmp267 = ((($165)) | 0) == 91;
												var $166 = HEAP32[((_option_phoneme_input) >> 2)];
												var $tobool269 = ((($166)) | 0) != 0;
												var $or_cond8 = ($cmp267) & ($tobool269);
												if (!($or_cond8)) {
													__label__ = 101;
													break $if_end273$$if_end262$137;
												}
											}
											$phoneme_mode = 8;
											var $167 = HEAP32[(($source_index) >> 2)];
											var $inc271 = ((($167) + 1) & 4294967295);
											HEAP32[(($source_index) >> 2)] = $inc271;
											__label__ = 33;
											continue $while_cond88$50;
										}
									} while (0);
									var $168 = $c;
									var $call274 = __Z7IsAlphaj($168);
									var $tobool275 = ((($call274)) | 0) != 0;
									if ($tobool275) {
										__label__ = 102;;
									} else {
										__label__ = 138;;
									}
									if (__label__ == 102) {
										var $169 = HEAP32[(($prev_out) >> 2)];
										var $call277 = __Z7IsAlphaj($169);
										var $tobool278 = ((($call277)) | 0) != 0;
										if ($tobool278) {
											__label__ = 103;;
										} else {
											__label__ = 106;;
										}
										$lor_lhs_false279$$if_then286$146: do {
											if (__label__ == 103) {
												var $170 = $tr_addr;
												var $langopts280 = (($170) & 4294967295);
												var $ideographs = (($langopts280 + 251) & 4294967295);
												var $171 = HEAP8[($ideographs)];
												var $tobool281 = (tempInt = (($171)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
												if (!($tobool281)) {
													__label__ = 118;
													break $lor_lhs_false279$$if_then286$146;
												}
												var $172 = $c;
												var $cmp283 = ((($172)) | 0) > 12352;
												if ($cmp283) {
													__label__ = 106;
													break $lor_lhs_false279$$if_then286$146;
												}
												var $173 = HEAP32[(($prev_out) >> 2)];
												var $cmp285 = ((($173)) | 0) > 12352;
												if ($cmp285) {
													__label__ = 106;
													break $lor_lhs_false279$$if_then286$146;
												} else {
													__label__ = 118;
													break $lor_lhs_false279$$if_then286$146;
												}
											}
										} while (0);
										$if_then286$$if_end327$150: do {
											if (__label__ == 106) {
												var $174 = $tr_addr;
												var $punct_within_word287 = (($174 + 704) & 4294967295);
												var $175 = HEAP32[(($punct_within_word287) >> 2)];
												var $176 = HEAP32[(($prev_out) >> 2)];
												var $call288 = _wcschr($175, $176);
												var $cmp289 = ((($call288)) | 0) == 0;
												if ($cmp289) {
													__label__ = 107;;
												} else {
													__label__ = 108;;
												}
												if (__label__ == 107) {
													$letter_count = 0;;
												}
												var $177 = HEAP32[(($prev_out) >> 2)];
												var $cmp292 = ((($177)) | 0) != 32;
												if ($cmp292) {
													__label__ = 109;;
												} else {
													__label__ = 112;;
												}
												$land_lhs_true293$$if_else303$155: do {
													if (__label__ == 109) {
														var $178 = $tr_addr;
														var $punct_within_word294 = (($178 + 704) & 4294967295);
														var $179 = HEAP32[(($punct_within_word294) >> 2)];
														var $180 = HEAP32[(($prev_out) >> 2)];
														var $call295 = _wcschr($179, $180);
														var $cmp296 = ((($call295)) | 0) == 0;
														if (!($cmp296)) {
															__label__ = 112;
															break $land_lhs_true293$$if_else303$155;
														}
														$c = 32;
														$space_inserted = 1;
														var $181 = HEAP32[(($prev_out) >> 2)];
														var $call298 = __Z9IsBracketi($181);
														var $tobool299 = ((($call298)) | 0) != 0;
														if ($tobool299) {
															__label__ = 118;
															break $if_then286$$if_end327$150;
														}
														var $182 = $next_word_flags;
														var $or301 = ($182) | 256;
														$next_word_flags = $or301;
														__label__ = 118;
														break $if_then286$$if_end327$150;
													}
												} while (0);
												var $183 = $c;
												var $call304 = _iswupper($183);
												var $tobool305 = ((($call304)) | 0) != 0;
												if ($tobool305) {
													__label__ = 113;;
												} else {
													__label__ = 114;;
												}
												if (__label__ == 113) {
													var $184 = $word_flags;
													var $or307 = ($184) | 2;
													$word_flags = $or307;;
												}
												var $185 = HEAP32[(($prev_out) >> 2)];
												var $cmp309 = ((($185)) | 0) == 32;
												if (!($cmp309)) {
													__label__ = 118;
													break $if_then286$$if_end327$150;
												}
												var $186 = $ix;
												var $sub311 = ((($186) - 2) & 4294967295);
												var $arrayidx312 = (($sbuf + $sub311) & 4294967295);
												var $187 = HEAP8[($arrayidx312)];
												var $conv313 = (tempInt = (($187)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												var $call314 = _iswdigit($conv313);
												var $tobool315 = ((($call314)) | 0) != 0;
												if (!($tobool315)) {
													__label__ = 118;
													break $if_then286$$if_end327$150;
												}
												var $188 = HEAP32[(($prev_in) >> 2)];
												var $call317 = _iswdigit($188);
												var $tobool318 = ((($call317)) | 0) != 0;
												if ($tobool318) {
													__label__ = 118;
													break $if_then286$$if_end327$150;
												}
												var $189 = $ix;
												var $inc320 = ((($189) + 1) & 4294967295);
												$ix = $inc320;
												var $arrayidx321 = (($sbuf + $189) & 4294967295);
												HEAP8[($arrayidx321)] = 32;
												var $190 = $word_count;
												var $arrayidx322 = (($words + $190 * 12) & 4294967295);
												var $start323 = (($arrayidx322 + 4) & 4294967295);
												var $191 = HEAP16[(($start323) >> 1)];
												var $inc324 = ((($191) + 1) & 65535);
												HEAP16[(($start323) >> 1)] = $inc324;;
											}
										} while (0);
										var $192 = $letter_count;
										var $inc328 = ((($192) + 1) & 4294967295);
										$letter_count = $inc328;
										var $193 = $c;
										var $call329 = _iswupper($193);
										var $tobool330 = ((($call329)) | 0) != 0;
										if ($tobool330) {
											__label__ = 119;;
										} else {
											__label__ = 130;;
										}
										if (__label__ == 119) {
											var $194 = $c;
											var $call332 = __Z9towlower2j($194);
											$c = $call332;
											var $195 = $tr_addr;
											var $langopts333 = (($195) & 4294967295);
											var $param = (($langopts333 + 24) & 4294967295);
											var $arrayidx334 = (($param + 52) & 4294967295);
											var $196 = HEAP32[(($arrayidx334) >> 2)];
											$j = $196;
											var $cmp335 = ((($196)) | 0) > 0;
											if ($cmp335) {
												__label__ = 120;;
											} else {
												__label__ = 123;;
											}
											if (__label__ == 120) {
												var $197 = $j;
												var $cmp337 = ((($197)) | 0) == 2;
												if (!($cmp337)) {
													__label__ = 195;
													break $if_then155$$if_else162$86;
												}
												var $198 = $syllable_marked;
												var $cmp339 = ((($198)) | 0) == 0;
												if (!($cmp339)) {
													__label__ = 195;
													break $if_then155$$if_else162$86;
												}
												var $199 = $c;
												HEAP32[(($char_inserted) >> 2)] = $199;
												$c = 712;
												$syllable_marked = 1;;
											} else if (__label__ == 123) {
												var $200 = HEAP32[(($prev_in) >> 2)];
												var $call343 = _iswlower($200);
												var $tobool344 = ((($call343)) | 0) != 0;
												if ($tobool344) {
													__label__ = 124;;
												} else {
													__label__ = 125;;
												}
												if (__label__ == 124) {
													$c = 32;
													$space_inserted = 1;
													var $201 = $c;
													$prev_in_save = $201;;
												} else if (__label__ == 125) {
													var $202 = $c;
													var $cmp347 = ((($202)) | 0) != 32;
													if (!($cmp347)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $203 = HEAP32[(($prev_in) >> 2)];
													var $call349 = _iswupper($203);
													var $tobool350 = ((($call349)) | 0) != 0;
													if (!($tobool350)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $204 = HEAP32[(($next_in) >> 2)];
													var $call352 = _iswlower($204);
													var $tobool353 = ((($call352)) | 0) != 0;
													if (!($tobool353)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $205 = HEAP32[(($source_index) >> 2)];
													var $206 = $next_in_nbytes;
													var $add355 = ((($206) + ($205)) & 4294967295);
													var $arrayidx356 = ((__ZL6source + $add355) & 4294967295);
													var $call357 = __Z7utf8_inPiPKc($next2_in, $arrayidx356);
													var $207 = HEAP32[(($next2_in) >> 2)];
													var $call358 = __Z7IsAlphaj($207);
													var $tobool359 = ((($call358)) | 0) != 0;
													if (!($tobool359)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													$c = 32;
													$space_inserted = 1;
													var $208 = $c;
													$prev_in_save = $208;
													var $209 = $next_word_flags;
													var $or361 = ($209) | 256;
													$next_word_flags = $or361;;
												}
											}
										} else if (__label__ == 130) {
											var $210 = $all_upper_case;
											var $tobool367 = ((($210)) | 0) != 0;
											if ($tobool367) {
												__label__ = 131;;
											} else {
												__label__ = 137;;
											}
											$land_lhs_true368$$if_else386$182: do {
												if (__label__ == 131) {
													var $211 = $letter_count;
													var $cmp369 = ((($211)) | 0) > 2;
													if (!($cmp369)) {
														__label__ = 137;
														break $land_lhs_true368$$if_else386$182;
													}
													var $212 = $c;
													var $cmp371 = ((($212)) | 0) == 115;
													if ($cmp371) {
														__label__ = 133;;
													} else {
														__label__ = 136;;
													}
													$land_lhs_true372$$if_else384$185: do {
														if (__label__ == 133) {
															var $213 = HEAP32[(($next_in) >> 2)];
															var $cmp373 = ((($213)) | 0) == 32;
															if (!($cmp373)) {
																__label__ = 136;
																break $land_lhs_true372$$if_else384$185;
															}
															$c = 32;
															var $214 = $all_upper_case;
															var $or375 = ($214) | 4;
															$all_upper_case = $or375;
															var $215 = $ix;
															var $sub376 = ((($215) - 1) & 4294967295);
															var $arrayidx377 = (($sbuf + $sub376) & 4294967295);
															var $216 = HEAP8[($arrayidx377)];
															var $conv378 = (tempInt = (($216)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $cmp379 = ((($conv378)) | 0) == 39;
															if (!($cmp379)) {
																__label__ = 195;
																break $if_then155$$if_else162$86;
															}
															var $217 = $ix;
															var $sub381 = ((($217) - 1) & 4294967295);
															var $arrayidx382 = (($sbuf + $sub381) & 4294967295);
															HEAP8[($arrayidx382)] = 32;
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
													} while (0);
													$all_upper_case = 0;
													__label__ = 195;
													break $if_then155$$if_else162$86;
												}
											} while (0);
											$all_upper_case = 0;;
										}
									} else if (__label__ == 138) {
										var $218 = $c;
										var $cmp390 = ((($218)) | 0) == 45;
										if ($cmp390) {
											__label__ = 139;;
										} else {
											__label__ = 154;;
										}
										if (__label__ == 139) {
											var $219 = HEAP32[(($prev_in) >> 2)];
											var $call392 = __Z7IsSpacej($219);
											var $tobool393 = ((($call392)) | 0) != 0;
											if ($tobool393) {
												__label__ = 146;;
											} else {
												__label__ = 140;;
											}
											$if_else410$$land_lhs_true394$194: do {
												if (__label__ == 140) {
													var $220 = HEAP32[(($next_in) >> 2)];
													var $call395 = __Z7IsAlphaj($220);
													var $tobool396 = ((($call395)) | 0) != 0;
													if (!($tobool396)) {
														__label__ = 146;
														break $if_else410$$land_lhs_true394$194;
													}
													var $221 = HEAP32[(($prev_out) >> 2)];
													var $cmp398 = ((($221)) | 0) != 32;
													if ($cmp398) {
														__label__ = 142;;
													} else {
														__label__ = 143;;
													}
													if (__label__ == 142) {
														$c = 32;
														$space_inserted = 1;
														__label__ = 195;
														break $if_then155$$if_else162$86;
													} else if (__label__ == 143) {
														var $222 = $word_flags;
														var $or401 = ($222) | 128;
														$word_flags = $or401;
														var $223 = $word_count;
														var $cmp402 = ((($223)) | 0) > 0;
														if ($cmp402) {
															__label__ = 144;;
														} else {
															__label__ = 145;;
														}
														if (__label__ == 144) {
															var $224 = $word_count;
															var $sub404 = ((($224) - 1) & 4294967295);
															var $arrayidx405 = (($words + $sub404 * 12) & 4294967295);
															var $flags406 = (($arrayidx405) & 4294967295);
															var $225 = HEAP32[(($flags406) >> 2)];
															var $or407 = ($225) | 16384;
															HEAP32[(($flags406) >> 2)] = $or407;;
														}
														$c = 32;
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
												}
											} while (0);
											var $226 = HEAP32[(($prev_in) >> 2)];
											var $cmp411 = ((($226)) | 0) == 32;
											var $227 = HEAP32[(($next_in) >> 2)];
											var $cmp413 = ((($227)) | 0) == 32;
											var $or_cond26 = ($cmp411) & ($cmp413);
											if ($or_cond26) {
												__label__ = 147;;
											} else {
												__label__ = 148;;
											}
											if (__label__ == 147) {
												$c = 32;
												$pre_pause_add = 4;;
											} else if (__label__ == 148) {
												var $cmp416 = ((($227)) | 0) == 45;
												if ($cmp416) {
													__label__ = 149;;
												} else {
													__label__ = 150;;
												}
												if (__label__ == 149) {
													var $228 = HEAP32[(($source_index) >> 2)];
													var $inc418 = ((($228) + 1) & 4294967295);
													HEAP32[(($source_index) >> 2)] = $inc418;
													$c = 32;
													$pre_pause_add = 4;;
												} else if (__label__ == 150) {
													var $229 = HEAP32[(($prev_out) >> 2)];
													var $cmp420 = ((($229)) | 0) == 32;
													if (!($cmp420)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $230 = $ix;
													var $sub422 = ((($230) - 2) & 4294967295);
													var $arrayidx423 = (($sbuf + $sub422) & 4294967295);
													var $231 = HEAP8[($arrayidx423)];
													var $conv424 = (tempInt = (($231)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $call425 = __Z7IsAlphaj($conv424);
													var $tobool426 = ((($call425)) | 0) != 0;
													if (!($tobool426)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $232 = HEAP32[(($prev_in) >> 2)];
													var $call428 = __Z7IsAlphaj($232);
													var $tobool429 = ((($call428)) | 0) != 0;
													if ($tobool429) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $233 = $ix;
													var $inc431 = ((($233) + 1) & 4294967295);
													$ix = $inc431;
													var $arrayidx432 = (($sbuf + $233) & 4294967295);
													HEAP8[($arrayidx432)] = 32;
													var $234 = $word_count;
													var $arrayidx433 = (($words + $234 * 12) & 4294967295);
													var $start434 = (($arrayidx433 + 4) & 4294967295);
													var $235 = HEAP16[(($start434) >> 1)];
													var $inc435 = ((($235) + 1) & 65535);
													HEAP16[(($start434) >> 1)] = $inc435;;
												}
											}
										} else if (__label__ == 154) {
											var $236 = $c;
											var $cmp441 = ((($236)) | 0) == 46;
											if ($cmp441) {
												__label__ = 155;;
											} else {
												__label__ = 162;;
											}
											if (__label__ == 155) {
												var $237 = HEAP32[(($prev_out) >> 2)];
												var $cmp443 = ((($237)) | 0) == 46;
												if ($cmp443) {
													__label__ = 156;;
												} else {
													__label__ = 157;;
												}
												if (__label__ == 156) {
													$c = 32;
													$space_inserted = 1;;
												} else if (__label__ == 157) {
													var $238 = $word_count;
													var $cmp446 = ((($238)) | 0) > 0;
													if (!($cmp446)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $239 = $word_count;
													var $sub448 = ((($239) - 1) & 4294967295);
													var $arrayidx449 = (($words + $sub448 * 12) & 4294967295);
													var $flags450 = (($arrayidx449) & 4294967295);
													var $240 = HEAP32[(($flags450) >> 2)];
													var $and451 = ($240) & 256;
													var $tobool452 = ((($and451)) | 0) != 0;
													if ($tobool452) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $241 = HEAP32[(($prev_in) >> 2)];
													var $call454 = __Z7IsAlphaj($241);
													var $tobool455 = ((($call454)) | 0) != 0;
													if (!($tobool455)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													var $242 = $word_count;
													var $sub457 = ((($242) - 1) & 4294967295);
													var $arrayidx458 = (($words + $sub457 * 12) & 4294967295);
													var $flags459 = (($arrayidx458) & 4294967295);
													var $243 = HEAP32[(($flags459) >> 2)];
													var $or460 = ($243) | 65536;
													HEAP32[(($flags459) >> 2)] = $or460;
													var $244 = HEAP32[(($next_in) >> 2)];
													var $call461 = __Z7IsSpacej($244);
													var $tobool462 = ((($call461)) | 0) != 0;
													var $245 = HEAP32[(($next_in) >> 2)];
													var $cmp464 = ((($245)) | 0) == 45;
													var $or_cond9 = ($tobool462) | ($cmp464);
													if (!($or_cond9)) {
														__label__ = 195;
														break $if_then155$$if_else162$86;
													}
													$c = 32;;
												}
											} else if (__label__ == 162) {
												var $246 = $c;
												var $cmp470 = ((($246)) | 0) == 39;
												if ($cmp470) {
													__label__ = 163;;
												} else {
													__label__ = 178;;
												}
												if (__label__ == 163) {
													var $247 = HEAP32[(($prev_in) >> 2)];
													var $cmp472 = ((($247)) | 0) == 46;
													if ($cmp472) {
														__label__ = 165;;
													} else {
														__label__ = 164;;
													}
													$land_lhs_true476$$lor_lhs_false473$226: do {
														if (__label__ == 164) {
															var $248 = HEAP32[(($prev_in) >> 2)];
															var $call474 = _iswalnum($248);
															var $tobool475 = ((($call474)) | 0) != 0;
															if ($tobool475) {
																__label__ = 165;
																break $land_lhs_true476$$lor_lhs_false473$226;
															} else {
																__label__ = 167;
																break $land_lhs_true476$$lor_lhs_false473$226;
															}
														}
													} while (0);
													$land_lhs_true476$$if_else480$228: do {
														if (__label__ == 165) {
															var $249 = HEAP32[(($next_in) >> 2)];
															var $call477 = __Z7IsAlphaj($249);
															var $tobool478 = ((($call477)) | 0) != 0;
															if (!($tobool478)) {
																__label__ = 167;
																break $land_lhs_true476$$if_else480$228;
															}
															$single_quoted = 0;
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
													} while (0);
													var $250 = $tr_addr;
													var $char_plus_apostrophe = (($250 + 700) & 4294967295);
													var $251 = HEAP32[(($char_plus_apostrophe) >> 2)];
													var $252 = HEAP32[(($prev_in) >> 2)];
													var $call481 = _wcschr($251, $252);
													var $cmp482 = ((($call481)) | 0) != 0;
													if ($cmp482) {
														__label__ = 168;;
													} else {
														__label__ = 171;;
													}
													$land_lhs_true483$$if_else490$232: do {
														if (__label__ == 168) {
															var $253 = $prev_out2;
															var $cmp484 = ((($253)) | 0) == 32;
															if (!($cmp484)) {
																__label__ = 171;
																break $land_lhs_true483$$if_else490$232;
															}
															$single_quoted = 0;
															var $254 = HEAP32[(($next_in) >> 2)];
															var $cmp486 = ((($254)) | 0) == 32;
															if (!($cmp486)) {
																__label__ = 195;
																break $if_then155$$if_else162$86;
															}
															var $255 = HEAP32[(($source_index) >> 2)];
															var $inc488 = ((($255) + 1) & 4294967295);
															HEAP32[(($source_index) >> 2)] = $inc488;
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
													} while (0);
													var $256 = HEAP32[(($prev_out) >> 2)];
													var $cmp491 = ((($256)) | 0) == 115;
													if ($cmp491) {
														__label__ = 172;;
													} else {
														__label__ = 174;;
													}
													$land_lhs_true492$$if_else495$237: do {
														if (__label__ == 172) {
															var $257 = $single_quoted;
															var $cmp493 = ((($257)) | 0) == 0;
															if (!($cmp493)) {
																__label__ = 174;
																break $land_lhs_true492$$if_else495$237;
															}
															$c = 32;
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
													} while (0);
													var $258 = HEAP32[(($prev_out) >> 2)];
													var $call496 = __Z7IsSpacej($258);
													var $tobool497 = ((($call496)) | 0) != 0;
													if ($tobool497) {
														__label__ = 175;;
													} else {
														__label__ = 176;;
													}
													if (__label__ == 175) {
														$single_quoted = 1;;
													} else if (__label__ == 176) {
														$single_quoted = 0;;
													}
													$pre_pause_add = 4;
													$c = 32;;
												} else if (__label__ == 178) {
													var $259 = $c;
													var $call505 = __Z11lookupwcharPKti(((__ZL6breaks) & 4294967295), $259);
													var $cmp506 = ((($call505)) | 0) != 0;
													if ($cmp506) {
														__label__ = 179;;
													} else {
														__label__ = 180;;
													}
													if (__label__ == 179) {
														$c = 32;;
													} else if (__label__ == 180) {
														var $260 = $c;
														var $call509 = _iswdigit($260);
														var $tobool510 = ((($call509)) | 0) != 0;
														if (!($tobool510)) {
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
														var $261 = $tr_addr;
														var $langopts512 = (($261) & 4294967295);
														var $tone_numbers513 = (($langopts512 + 250) & 4294967295);
														var $262 = HEAP8[($tone_numbers513)];
														var $tobool514 = (tempInt = (($262)), (tempInt >= 128 ? tempInt - 256 : tempInt)) != 0;
														if ($tobool514) {
															__label__ = 182;;
														} else {
															__label__ = 184;;
														}
														$land_lhs_true515$$if_else522$250: do {
															if (__label__ == 182) {
																var $263 = HEAP32[(($prev_out) >> 2)];
																var $call516 = __Z7IsAlphaj($263);
																var $tobool517 = ((($call516)) | 0) != 0;
																if (!($tobool517)) {
																	__label__ = 184;
																	break $land_lhs_true515$$if_else522$250;
																}
																var $264 = HEAP32[(($next_in) >> 2)];
																var $call519 = __Z7IsDigitj($264);
																var $tobool520 = ((($call519)) | 0) != 0;
																if (!($tobool520)) {
																	__label__ = 195;
																	break $if_then155$$if_else162$86;
																}
															}
														} while (0);
														var $265 = HEAP32[(($prev_out) >> 2)];
														var $cmp523 = ((($265)) | 0) != 32;
														if ($cmp523) {
															__label__ = 185;;
														} else {
															__label__ = 192;;
														}
														if (__label__ == 185) {
															var $266 = HEAP32[(($prev_out) >> 2)];
															var $call525 = _iswdigit($266);
															var $tobool526 = ((($call525)) | 0) != 0;
															var $_pr20 = HEAP32[(($prev_out) >> 2)];
															if ($tobool526) {
																__label__ = 191;;
															} else {
																__label__ = 186;;
															}
															if (__label__ == 191) {
																var $cmp540 = ((($_pr20)) | 0) == 32;
																if (!($cmp540)) {
																	__label__ = 195;
																	break $if_then155$$if_else162$86;
																}
															} else if (__label__ == 186) {
																var $267 = $tr_addr;
																var $langopts528 = (($267) & 4294967295);
																var $decimal_sep = (($langopts528 + 208) & 4294967295);
																var $268 = HEAP32[(($decimal_sep) >> 2)];
																var $cmp529 = ((($_pr20)) | 0) != ((($268)) | 0);
																if ($cmp529) {
																	__label__ = 189;;
																} else {
																	__label__ = 187;;
																}
																$if_then536$$lor_lhs_false530$259: do {
																	if (__label__ == 187) {
																		var $269 = $decimal_sep_count;
																		var $cmp531 = ((($269)) | 0) > 0;
																		if ($cmp531) {
																			__label__ = 188;;
																		} else {
																			__label__ = 190;;
																		}
																		if (__label__ == 188) {
																			var $270 = $tr_addr;
																			var $langopts533 = (($270) & 4294967295);
																			var $decimal_sep534 = (($langopts533 + 208) & 4294967295);
																			var $271 = HEAP32[(($decimal_sep534) >> 2)];
																			var $cmp535 = ((($271)) | 0) == 44;
																			if ($cmp535) {
																				__label__ = 189;
																				break $if_then536$$lor_lhs_false530$259;
																			}
																		}
																		$decimal_sep_count = 1;
																		__label__ = 195;
																		break $if_then155$$if_else162$86;
																	}
																} while (0);
																$c = 32;
																$space_inserted = 1;
																__label__ = 195;
																break $if_then155$$if_else162$86;
															}
														}
														var $272 = $ix;
														var $sub542 = ((($272) - 2) & 4294967295);
														var $arrayidx543 = (($sbuf + $sub542) & 4294967295);
														var $273 = HEAP8[($arrayidx543)];
														var $conv544 = (tempInt = (($273)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $call545 = __Z7IsAlphaj($conv544);
														var $tobool546 = ((($call545)) | 0) != 0;
														if (!($tobool546)) {
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
														var $274 = HEAP32[(($prev_in) >> 2)];
														var $call548 = __Z7IsAlphaj($274);
														var $tobool549 = ((($call548)) | 0) != 0;
														if ($tobool549) {
															__label__ = 195;
															break $if_then155$$if_else162$86;
														}
														var $275 = $ix;
														var $inc551 = ((($275) + 1) & 4294967295);
														$ix = $inc551;
														var $arrayidx552 = (($sbuf + $275) & 4294967295);
														HEAP8[($arrayidx552)] = 32;
														var $276 = $word_count;
														var $arrayidx553 = (($words + $276 * 12) & 4294967295);
														var $start554 = (($arrayidx553 + 4) & 4294967295);
														var $277 = HEAP16[(($start554) >> 1)];
														var $inc555 = ((($277) + 1) & 65535);
														HEAP16[(($start554) >> 1)] = $inc555;;
													}
												}
											}
										}
									}
								}
							}
						} while (0);
						var $278 = $c;
						var $call568 = __Z7IsSpacej($278);
						var $tobool569 = ((($call568)) | 0) != 0;
						if ($tobool569) {
							__label__ = 196;;
						} else {
							__label__ = 225;;
						}
						$if_then570$$if_else688$269: do {
							if (__label__ == 196) {
								var $279 = HEAP32[(($prev_out) >> 2)];
								var $cmp571 = ((($279)) | 0) == 32;
								if ($cmp571) {
									__label__ = 197;;
								} else {
									__label__ = 198;;
								}
								if (__label__ == 197) {
									var $280 = $word_flags;
									var $or573 = ($280) | 262144;
									$word_flags = $or573;
									__label__ = 33;
									continue $while_cond88$50;
								} else if (__label__ == 198) {
									var $281 = HEAP32[(($cc) >> 2)];
									var $cmp575 = ((($281)) | 0) == 9;
									var $282 = HEAP32[(($cc) >> 2)];
									var $cmp577 = ((($282)) | 0) == 10;
									var $or_cond10 = ($cmp575) | ($cmp577);
									if ($or_cond10) {
										__label__ = 199;;
									} else {
										__label__ = 200;;
									}
									if (__label__ == 199) {
										var $283 = $next_word_flags;
										var $or579 = ($283) | 262144;
										$next_word_flags = $or579;;
									}
									var $284 = $space_inserted;
									var $tobool581 = ((($284)) | 0) != 0;
									if ($tobool581) {
										__label__ = 201;;
									} else {
										__label__ = 208;;
									}
									if (__label__ == 201) {
										$j = 0;
										var $285 = HEAP32[(($source_index) >> 2)];
										var $sub583 = ((($285) - 1) & 4294967295);
										$k = $sub583;;
										while (1) {
											var $286 = $k;
											var $287 = $source_index_word;
											var $cmp585 = ((($286)) | 0) >= ((($287)) | 0);
											if (!($cmp585)) {
												__label__ = 207;
												break;
											}
											var $288 = $k;
											var $arrayidx587 = (($charix + $288 * 2) & 4294967295);
											var $289 = HEAP16[(($arrayidx587) >> 1)];
											var $conv588 = (tempInt = (($289)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $cmp589 = ((($conv588)) | 0) != 0;
											if (!($cmp589)) {
												__label__ = 207;
												break;
											}
											var $290 = $k;
											var $arrayidx592 = (($charix + $290 * 2) & 4294967295);
											var $291 = HEAP16[(($arrayidx592) >> 1)];
											var $conv593 = (tempInt = (($291)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $cmp594 = ((($conv593)) | 0) > 0;
											if ($cmp594) {
												__label__ = 205;;
											} else {
												__label__ = 206;;
											}
											if (__label__ == 205) {
												var $292 = $j;
												var $inc596 = ((($292) + 1) & 4294967295);
												$j = $inc596;;
											}
											var $293 = $k;
											var $dec598 = ((($293) - 1) & 4294967295);
											$k = $dec598;
											__label__ = 202;
											continue;
										}
										var $294 = $j;
										var $conv600 = ((($294)) & 255);
										var $295 = $word_count;
										var $arrayidx601 = (($words + $295 * 12) & 4294967295);
										var $length602 = (($arrayidx601 + 10) & 4294967295);
										HEAP8[($length602)] = $conv600;;
									}
									var $296 = HEAP32[(($source_index) >> 2)];
									$source_index_word = $296;
									var $297 = $ix;
									var $inc604 = ((($297) + 1) & 4294967295);
									$ix = $inc604;
									var $arrayidx605 = (($sbuf + $297) & 4294967295);
									HEAP8[($arrayidx605)] = 32;
									var $298 = $word_count;
									var $cmp606 = ((($298)) | 0) < 299;
									if ($cmp606) {
										__label__ = 209;;
									} else {
										__label__ = 223;;
									}
									$land_lhs_true607$$if_end684$288: do {
										if (__label__ == 209) {
											var $299 = $ix;
											var $300 = $word_count;
											var $arrayidx608 = (($words + $300 * 12) & 4294967295);
											var $start609 = (($arrayidx608 + 4) & 4294967295);
											var $301 = HEAPU16[(($start609) >> 1)];
											var $conv610 = ((($301)) & 65535);
											var $cmp611 = ((($299)) | 0) > ((($conv610)) | 0);
											if (!($cmp611)) {
												__label__ = 223;
												break $land_lhs_true607$$if_end684$288;
											}
											var $302 = $embedded_count;
											var $cmp613 = ((($302)) | 0) > 0;
											if ($cmp613) {
												__label__ = 211;;
											} else {
												__label__ = 212;;
											}
											if (__label__ == 211) {
												var $303 = HEAP32[((__ZL11embedded_ix) >> 2)];
												var $sub615 = ((($303) - 1) & 4294967295);
												var $arrayidx616 = ((_embedded_list + $sub615 * 4) & 4294967295);
												var $304 = HEAP32[(($arrayidx616) >> 2)];
												var $or617 = ($304) | 128;
												HEAP32[(($arrayidx616) >> 2)] = $or617;
												var $305 = $word_count;
												var $arrayidx618 = (($words + $305 * 12) & 4294967295);
												var $flags619 = (($arrayidx618) & 4294967295);
												var $306 = HEAP32[(($flags619) >> 2)];
												var $or620 = ($306) | 64;
												HEAP32[(($flags619) >> 2)] = $or620;
												$embedded_count = 0;;
											}
											var $307 = HEAP32[((_pre_pause) >> 2)];
											var $conv622 = ((($307)) & 255);
											var $308 = $word_count;
											var $arrayidx623 = (($words + $308 * 12) & 4294967295);
											var $pre_pause = (($arrayidx623 + 8) & 4294967295);
											HEAP8[($pre_pause)] = $conv622;
											var $309 = $all_upper_case;
											var $310 = $word_flags;
											var $_b = HEAPU8[(__ZL13word_emphasis_b)];
											var $311 = ($_b) ? 2048 : 0;
											var $312 = $word_count;
											var $arrayidx626 = (($words + $312 * 12) & 4294967295);
											var $flags627 = (($arrayidx626) & 4294967295);
											var $313 = HEAP32[(($flags627) >> 2)];
											var $or624 = ($310) | ($309);
											var $or625 = ($or624) | ($311);
											var $or628 = ($or625) | ($313);
											HEAP32[(($flags627) >> 2)] = $or628;
											var $314 = $word_mark;
											var $conv629 = ((($314)) & 255);
											var $315 = $word_count;
											var $arrayidx630 = (($words + $315 * 12) & 4294967295);
											var $wmark = (($arrayidx630 + 9) & 4294967295);
											HEAP8[($wmark)] = $conv629;
											var $316 = HEAP32[((_pre_pause) >> 2)];
											var $cmp631 = ((($316)) | 0) > 0;
											if ($cmp631) {
												__label__ = 213;;
											} else {
												__label__ = 216;;
											}
											if (__label__ == 213) {
												var $317 = $ix;
												$j = $317;
												var $318 = $j;
												var $319 = $word_count;
												var $arrayidx63438 = (($words + $319 * 12) & 4294967295);
												var $start63539 = (($arrayidx63438 + 4) & 4294967295);
												var $320 = HEAPU16[(($start63539) >> 1)];
												var $conv63640 = ((($320)) & 65535);
												var $cmp63741 = ((($318)) | 0) > ((($conv63640)) | 0);
												var $321 = $j;
												if ($cmp63741) {
													__lastLabel__ = 213;
													__label__ = 214;;
												} else {
													__lastLabel__ = 213;
													__label__ = 215;;
												}
												$for_body638$$for_end644$296: do {
													if (__label__ == 214) {
														while (1) {
															var $322 = __lastLabel__ == 214 ? $329 : ($321);
															var $sub639 = ((($322) - 1) & 4294967295);
															var $arrayidx640 = (($sbuf + $sub639) & 4294967295);
															var $323 = HEAP8[($arrayidx640)];
															var $324 = $j;
															var $arrayidx641 = (($sbuf + $324) & 4294967295);
															HEAP8[($arrayidx641)] = $323;
															var $325 = $j;
															var $dec643 = ((($325) - 1) & 4294967295);
															$j = $dec643;
															var $326 = $j;
															var $327 = $word_count;
															var $arrayidx634 = (($words + $327 * 12) & 4294967295);
															var $start635 = (($arrayidx634 + 4) & 4294967295);
															var $328 = HEAPU16[(($start635) >> 1)];
															var $conv636 = ((($328)) & 65535);
															var $cmp637 = ((($326)) | 0) > ((($conv636)) | 0);
															var $329 = $j;
															if ($cmp637) {
																__lastLabel__ = 214;
																__label__ = 214;
																continue;
															} else {
																__lastLabel__ = 214;
																__label__ = 215;
																break $for_body638$$for_end644$296;
															}
														}
													}
												} while (0);
												var $_lcssa37 = __lastLabel__ == 213 ? $321 : ($329);
												var $arrayidx645 = (($sbuf + $_lcssa37) & 4294967295);
												HEAP8[($arrayidx645)] = 32;
												var $330 = $word_count;
												var $arrayidx646 = (($words + $330 * 12) & 4294967295);
												var $start647 = (($arrayidx646 + 4) & 4294967295);
												var $331 = HEAP16[(($start647) >> 1)];
												var $inc648 = ((($331) + 1) & 65535);
												HEAP16[(($start647) >> 1)] = $inc648;
												var $332 = $ix;
												var $inc649 = ((($332) + 1) & 4294967295);
												$ix = $inc649;;
											}
											var $333 = $word_count;
											var $inc651 = ((($333) + 1) & 4294967295);
											$word_count = $inc651;
											var $334 = $ix;
											var $conv652 = ((($334)) & 65535);
											var $335 = $word_count;
											var $arrayidx653 = (($words + $335 * 12) & 4294967295);
											var $start654 = (($arrayidx653 + 4) & 4294967295);
											HEAP16[(($start654) >> 1)] = $conv652;
											var $336 = $word_count;
											var $arrayidx655 = (($words + $336 * 12) & 4294967295);
											var $flags656 = (($arrayidx655) & 4294967295);
											HEAP32[(($flags656) >> 2)] = 0;
											var $337 = HEAP32[(($source_index) >> 2)];
											$j = $337;
											var $338 = $j;
											var $arrayidx65844 = (($charix + $338 * 2) & 4294967295);
											var $339 = HEAP16[(($arrayidx65844) >> 1)];
											var $conv65945 = (tempInt = (($339)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $cmp66046 = ((($conv65945)) | 0) <= 0;
											var $340 = $j;
											if ($cmp66046) {
												__lastLabel__ = 216;
												__label__ = 217;;
											} else {
												__lastLabel__ = 216;
												__label__ = 218;;
											}
											$for_inc662$$for_end664$301: do {
												if (__label__ == 217) {
													while (1) {
														var $341 = __lastLabel__ == 217 ? $344 : ($340);
														var $inc663 = ((($341) + 1) & 4294967295);
														$j = $inc663;
														var $342 = $j;
														var $arrayidx658 = (($charix + $342 * 2) & 4294967295);
														var $343 = HEAP16[(($arrayidx658) >> 1)];
														var $conv659 = (tempInt = (($343)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
														var $cmp660 = ((($conv659)) | 0) <= 0;
														var $344 = $j;
														if ($cmp660) {
															__lastLabel__ = 217;
															__label__ = 217;
															continue;
														} else {
															__lastLabel__ = 217;
															__label__ = 218;
															break $for_inc662$$for_end664$301;
														}
													}
												}
											} while (0);
											var $_lcssa43 = __lastLabel__ == 216 ? $340 : ($344);
											var $arrayidx665 = (($charix + $_lcssa43 * 2) & 4294967295);
											var $345 = HEAP16[(($arrayidx665) >> 1)];
											var $346 = $word_count;
											var $arrayidx666 = (($words + $346 * 12) & 4294967295);
											var $sourceix667 = (($arrayidx666 + 6) & 4294967295);
											HEAP16[(($sourceix667) >> 1)] = $345;
											$k = 0;
											var $347 = $j;
											var $arrayidx66948 = (($charix + $347 * 2) & 4294967295);
											var $348 = HEAP16[(($arrayidx66948) >> 1)];
											var $conv67049 = (tempInt = (($348)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $cmp67150 = ((($conv67049)) | 0) != 0;
											if ($cmp67150) {
												__label__ = 219;;
											} else {
												__label__ = 222;;
											}
											$while_body672$$while_end680$305: do {
												if (__label__ == 219) {
													while (1) {
														var $349 = $j;
														var $inc673 = ((($349) + 1) & 4294967295);
														$j = $inc673;
														var $arrayidx674 = (($charix + $349 * 2) & 4294967295);
														var $350 = HEAP16[(($arrayidx674) >> 1)];
														var $conv675 = (tempInt = (($350)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
														var $cmp676 = ((($conv675)) | 0) != -1;
														if ($cmp676) {
															__label__ = 220;;
														} else {
															__label__ = 221;;
														}
														if (__label__ == 220) {
															var $351 = $k;
															var $inc678 = ((($351) + 1) & 4294967295);
															$k = $inc678;;
														}
														var $352 = $j;
														var $arrayidx669 = (($charix + $352 * 2) & 4294967295);
														var $353 = HEAP16[(($arrayidx669) >> 1)];
														var $conv670 = (tempInt = (($353)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
														var $cmp671 = ((($conv670)) | 0) != 0;
														if ($cmp671) {
															__label__ = 219;
															continue;
														} else {
															__label__ = 222;
															break $while_body672$$while_end680$305;
														}
													}
												}
											} while (0);
											var $354 = $k;
											var $conv681 = ((($354)) & 255);
											var $355 = $word_count;
											var $arrayidx682 = (($words + $355 * 12) & 4294967295);
											var $length683 = (($arrayidx682 + 10) & 4294967295);
											HEAP8[($length683)] = $conv681;
											var $356 = $next_word_flags;
											$word_flags = $356;
											$next_word_flags = 0;
											HEAP32[((_pre_pause) >> 2)] = 0;
											$word_mark = 0;
											$all_upper_case = 1;
											$syllable_marked = 0;;
										}
									} while (0);
									var $357 = $space_inserted;
									var $tobool685 = ((($357)) | 0) != 0;
									if (!($tobool685)) {
										__label__ = 227;
										break $if_then570$$if_else688$269;
									}
									var $358 = $prev_source_index;
									HEAP32[(($source_index) >> 2)] = $358;
									HEAP32[(($char_inserted) >> 2)] = 0;
									$space_inserted = 0;;
								}
							} else if (__label__ == 225) {
								var $359 = $ix;
								var $cmp689 = ((($359)) | 0) < 696;
								if (!($cmp689)) {
									__label__ = 227;
									break $if_then570$$if_else688$269;
								}
								var $360 = $c;
								var $361 = $ix;
								var $arrayidx691 = (($sbuf + $361) & 4294967295);
								var $call692 = __Z8utf8_outjPc($360, $arrayidx691);
								var $362 = $ix;
								var $add693 = ((($362) + ($call692)) & 4294967295);
								$ix = $add693;;
							}
						} while (0);
						var $363 = $pre_pause_add;
						var $364 = HEAP32[((_pre_pause) >> 2)];
						var $cmp696 = ((($363)) | 0) > ((($364)) | 0);
						if ($cmp696) {
							__label__ = 228;;
						} else {
							__label__ = 229;;
						}
						if (__label__ == 228) {
							var $365 = $pre_pause_add;
							HEAP32[((_pre_pause) >> 2)] = $365;;
						}
						$pre_pause_add = 0;
						__label__ = 33;
						continue $while_cond88$50;
					}
					var $366 = $word_count;
					var $cmp700 = ((($366)) | 0) == 0;
					if ($cmp700) {
						__label__ = 231;;
					} else {
						__label__ = 233;;
					}
					$land_lhs_true701$$if_end710$321: do {
						if (__label__ == 231) {
							var $367 = $embedded_count;
							var $cmp702 = ((($367)) | 0) > 0;
							if (!($cmp702)) {
								__label__ = 233;
								break $land_lhs_true701$$if_end710$321;
							}
							var $368 = HEAP32[((__ZL11embedded_ix) >> 2)];
							var $sub704 = ((($368) - 1) & 4294967295);
							var $arrayidx705 = ((_embedded_list + $sub704 * 4) & 4294967295);
							var $369 = HEAP32[(($arrayidx705) >> 2)];
							var $or706 = ($369) | 128;
							HEAP32[(($arrayidx705) >> 2)] = $or706;
							var $370 = $word_count;
							var $arrayidx707 = (($words + $370 * 12) & 4294967295);
							var $flags708 = (($arrayidx707) & 4294967295);
							var $371 = HEAP32[(($flags708) >> 2)];
							var $or709 = ($371) | 64;
							HEAP32[(($flags708) >> 2)] = $or709;
							$word_count = 1;;
						}
					} while (0);
					var $372 = $ix;
					var $sub711 = ((($372) - 1) & 4294967295);
					var $arrayidx712 = (($sbuf + $sub711) & 4294967295);
					var $373 = $tr_addr;
					var $clause_end = (($373 + 8292) & 4294967295);
					HEAP32[(($clause_end) >> 2)] = $arrayidx712;
					var $374 = $ix;
					var $arrayidx713 = (($sbuf + $374) & 4294967295);
					HEAP8[($arrayidx713)] = 0;
					var $arrayidx714 = (($words) & 4294967295);
					var $pre_pause715 = (($arrayidx714 + 8) & 4294967295);
					HEAP8[($pre_pause715)] = 0;
					var $375 = $word_count;
					var $arrayidx716 = (($words + $375 * 12) & 4294967295);
					var $pre_pause717 = (($arrayidx716 + 8) & 4294967295);
					HEAP8[($pre_pause717)] = 8;
					var $376 = $word_count;
					var $cmp718 = ((($376)) | 0) > 0;
					if ($cmp718) {
						__label__ = 234;;
					} else {
						__label__ = 241;;
					}
					$if_then719$$if_end751$325: do {
						if (__label__ == 234) {
							var $377 = $word_count;
							var $sub720 = ((($377) - 1) & 4294967295);
							$ix = $sub720;
							__lastLabel__ = 234;;
							while (1) {
								var $378 = __lastLabel__ == 237 ? $dec732 : ($sub720);
								var $cmp722 = ((($378)) | 0) > 0;
								var $379 = $ix;
								if ($cmp722) {
									__lastLabel__ = 235;;
								} else {
									__lastLabel__ = 235;
									__label__ = 238;
									break;
								}
								var $arrayidx724 = (($words + $379 * 12) & 4294967295);
								var $start725 = (($arrayidx724 + 4) & 4294967295);
								var $380 = HEAPU16[(($start725) >> 1)];
								var $idxprom = ((($380)) & 65535);
								var $arrayidx726 = (($sbuf + $idxprom) & 4294967295);
								var $381 = HEAP8[($arrayidx726)];
								var $conv727 = (tempInt = (($381)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call728 = __Z9IsBracketi($conv727);
								var $tobool729 = ((($call728)) | 0) != 0;
								var $382 = $ix;
								if ($tobool729) {
									__lastLabel__ = 236;;
								} else {
									__lastLabel__ = 236;
									__label__ = 238;
									break;
								}
								var $dec732 = ((($382) - 1) & 4294967295);
								$ix = $dec732;
								__lastLabel__ = 237;
								__label__ = 235;
								continue;
							}
							var $383 = __lastLabel__ == 236 ? $382 : ($379);
							var $arrayidx734 = (($words + $383 * 12) & 4294967295);
							var $flags735 = (($arrayidx734) & 4294967295);
							var $384 = HEAP32[(($flags735) >> 2)];
							var $or736 = ($384) | 16;
							HEAP32[(($flags735) >> 2)] = $or736;
							var $385 = $terminator;
							var $and737 = ($385) & 4194304;
							var $tobool738 = ((($and737)) | 0) != 0;
							if (!($tobool738)) {
								__label__ = 241;
								break $if_then719$$if_end751$325;
							}
							var $386 = $word_count;
							var $sub740 = ((($386) - 1) & 4294967295);
							var $arrayidx741 = (($words + $sub740 * 12) & 4294967295);
							var $flags742 = (($arrayidx741) & 4294967295);
							var $387 = HEAP32[(($flags742) >> 2)];
							var $and743 = ($387) & 256;
							var $tobool744 = ((($and743)) | 0) != 0;
							if ($tobool744) {
								__label__ = 241;
								break $if_then719$$if_end751$325;
							}
							var $388 = $word_count;
							var $sub746 = ((($388) - 1) & 4294967295);
							var $arrayidx747 = (($words + $sub746 * 12) & 4294967295);
							var $flags748 = (($arrayidx747) & 4294967295);
							var $389 = HEAP32[(($flags748) >> 2)];
							var $or749 = ($389) | 65536;
							HEAP32[(($flags748) >> 2)] = $or749;;
						}
					} while (0);
					var $arrayidx752 = (($words) & 4294967295);
					var $flags753 = (($arrayidx752) & 4294967295);
					var $390 = HEAP32[(($flags753) >> 2)];
					var $or754 = ($390) | 512;
					HEAP32[(($flags753) >> 2)] = $or754;
					$ix = 0;
					var $391 = $ix;
					var $392 = $word_count;
					var $cmp75636 = ((($391)) | 0) < ((($392)) | 0);
					if ($cmp75636) {
						__label__ = 242;;
					} else {
						__label__ = 296;;
					}
					$for_body757_lr_ph$$for_end994$335: do {
						if (__label__ == 242) {
							var $arraydecay781 = (($number_buf) & 4294967295);
							var $arrayidx783 = (($number_buf + 130) & 4294967295);
							var $arraydecay816 = (($number_buf) & 4294967295);
							var $sub_ptr_rhs_cast818 = ($arraydecay816);
							var $arraydecay820 = (($number_buf) & 4294967295);
							var $arrayidx836 = (($number_buf) & 4294967295);
							var $arrayidx837 = (($number_buf + 1) & 4294967295);
							var $arrayidx850 = (($number_buf + 130) & 4294967295);
							var $arrayidx920 = (($number_buf + 1) & 4294967295);
							var $arraydecay967 = (($number_buf) & 4294967295);
							var $arrayidx969 = (($number_buf + 2) & 4294967295);
							var $arrayidx970 = (($number_buf + 2) & 4294967295);;
							$for_body757$337: while (1) {
								var $393 = HEAP32[((_count_words) >> 2)];
								var $inc758 = ((($393) + 1) & 4294967295);
								HEAP32[((_count_words) >> 2)] = $inc758;
								var $394 = HEAP32[((_skip_words) >> 2)];
								var $cmp759 = ((($394)) | 0) > 0;
								if ($cmp759) {
									__label__ = 244;;
								} else {
									__label__ = 246;;
								}
								$if_then760$$if_end765$339: do {
									if (__label__ == 244) {
										var $395 = HEAP32[((_skip_words) >> 2)];
										var $dec761 = ((($395) - 1) & 4294967295);
										HEAP32[((_skip_words) >> 2)] = $dec761;
										var $396 = HEAP32[((_skip_words) >> 2)];
										var $cmp762 = ((($396)) | 0) == 0;
										if (!($cmp762)) {
											__label__ = 246;
											break $if_then760$$if_end765$339;
										}
										HEAP32[((_skipping_text) >> 2)] = 0;
										__label__ = 247;
										break $if_then760$$if_end765$339;
									}
								} while (0);
								$if_end768$$if_end765$342: do {
									if (__label__ == 246) {
										var $_pr22 = HEAP32[((_skipping_text) >> 2)];
										var $tobool766 = ((($_pr22)) | 0) != 0;
										if ($tobool766) {
											__label__ = 295;
											break $if_end768$$if_end765$342;
										} else {
											__label__ = 247;
											break $if_end768$$if_end765$342;
										}
									}
								} while (0);
								$if_end768$$for_inc992$344: do {
									if (__label__ == 247) {
										var $397 = $ix;
										var $arrayidx769 = (($words + $397 * 12) & 4294967295);
										var $start770 = (($arrayidx769 + 4) & 4294967295);
										var $398 = HEAPU16[(($start770) >> 1)];
										var $idxprom771 = ((($398)) & 65535);
										var $arrayidx772 = (($sbuf + $idxprom771) & 4294967295);
										$pw = $arrayidx772;
										$word = $arrayidx772;
										var $399 = $word;
										var $arrayidx773 = (($399) & 4294967295);
										var $400 = HEAP8[($arrayidx773)];
										var $conv774 = (tempInt = (($400)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $call775 = _iswdigit($conv774);
										var $tobool776 = ((($call775)) | 0) != 0;
										if ($tobool776) {
											__label__ = 248;;
										} else {
											__label__ = 261;;
										}
										$land_lhs_true777$$if_end824$346: do {
											if (__label__ == 248) {
												var $401 = $tr_addr;
												var $langopts778 = (($401) & 4294967295);
												var $break_numbers = (($langopts778 + 192) & 4294967295);
												var $402 = HEAP32[(($break_numbers) >> 2)];
												var $cmp779 = ((($402)) | 0) != 1227133512;
												if (!($cmp779)) {
													__label__ = 261;
													break $land_lhs_true777$$if_end824$346;
												}
												$pn = $arraydecay781;;
												while (1) {
													var $403 = $pn;
													var $cmp784 = ((($403)) >>> 0) < ((($arrayidx783)) >>> 0);
													if (!($cmp784)) {
														__label__ = 260;
														break;
													}
													var $404 = $pw;
													var $405 = HEAP8[($404)];
													var $conv786 = (tempInt = (($405)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $call787 = _iswdigit($conv786);
													var $tobool788 = ((($call787)) | 0) != 0;
													var $406 = $pw;
													if ($tobool788) {
														__label__ = 252;;
													} else {
														__label__ = 253;;
													}
													if (__label__ == 252) {
														var $incdec_ptr790 = (($406 + 1) & 4294967295);
														$pw = $incdec_ptr790;
														var $407 = HEAP8[($406)];
														var $408 = $pn;
														var $incdec_ptr791 = (($408 + 1) & 4294967295);
														$pn = $incdec_ptr791;
														HEAP8[($408)] = $407;
														__label__ = 250;
														continue;
													} else if (__label__ == 253) {
														var $409 = HEAP8[($406)];
														var $conv793 = (tempInt = (($409)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $410 = $tr_addr;
														var $langopts794 = (($410) & 4294967295);
														var $thousands_sep = (($langopts794 + 204) & 4294967295);
														var $411 = HEAP32[(($thousands_sep) >> 2)];
														var $cmp795 = ((($conv793)) | 0) == ((($411)) | 0);
														if (!($cmp795)) {
															__label__ = 259;
															break;
														}
														var $412 = $pw;
														var $arrayidx797 = (($412 + 1) & 4294967295);
														var $413 = HEAP8[($arrayidx797)];
														var $conv798 = (tempInt = (($413)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp799 = ((($conv798)) | 0) == 32;
														if (!($cmp799)) {
															__label__ = 259;
															break;
														}
														var $414 = $pw;
														var $arrayidx801 = (($414 + 2) & 4294967295);
														var $415 = HEAP8[($arrayidx801)];
														var $conv802 = (tempInt = (($415)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $call803 = _iswdigit($conv802);
														var $tobool804 = ((($call803)) | 0) != 0;
														if (!($tobool804)) {
															__label__ = 259;
															break;
														}
														var $416 = $pw;
														var $arrayidx806 = (($416 + 3) & 4294967295);
														var $417 = HEAP8[($arrayidx806)];
														var $conv807 = (tempInt = (($417)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp808 = ((($conv807)) | 0) != 32;
														if (!($cmp808)) {
															__label__ = 259;
															break;
														}
														var $418 = $pw;
														var $arrayidx810 = (($418 + 4) & 4294967295);
														var $419 = HEAP8[($arrayidx810)];
														var $conv811 = (tempInt = (($419)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp812 = ((($conv811)) | 0) != 32;
														if (!($cmp812)) {
															__label__ = 259;
															break;
														}
														var $420 = $pw;
														var $add_ptr = (($420 + 2) & 4294967295);
														$pw = $add_ptr;
														var $421 = $ix;
														var $inc814 = ((($421) + 1) & 4294967295);
														$ix = $inc814;
														__label__ = 250;
														continue;
													}
												}
												if (__label__ == 259) {
													var $422 = $pw;
													var $423 = $word;
													var $sub_ptr_lhs_cast = ($422);
													var $sub_ptr_rhs_cast = ($423);
													var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
													$nx = $sub_ptr_sub;
													var $424 = $word;
													var $425 = $nx;
													var $dest$, $stop$, $stop4$, $fast$, $value4$;
													$dest$ = $424;
													$stop$ = $dest$ + $425;
													$value4$ = 32;
													if ($value4$ < 0) $value4$ += 256;
													$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
													while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
														HEAP8[$dest$++] = 32;
													}
													$dest$ >>= 2;
													$stop4$ = $stop$ >> 2;
													while ($dest$ < $stop4$) {;;;;;;;
														HEAP32[$dest$++] = $value4$;
													}
													$dest$ <<= 2;
													while ($dest$ < $stop$) {;;
														HEAP8[$dest$++] = 32;
													};
													var $426 = $pn;
													var $sub_ptr_lhs_cast817 = ($426);
													var $sub_ptr_sub819 = ((($sub_ptr_lhs_cast817) - ($sub_ptr_rhs_cast818)) & 4294967295);
													$nx = $sub_ptr_sub819;
													var $427 = $word;
													var $428 = $nx;
													var $src$, $dest$, $stop$, $stop4$, $fast$;
													$src$ = $arraydecay820;
													$dest$ = $427;
													$stop$ = $src$ + $428;
													if (($dest$ % 4) == ($src$ % 4) && $428 > 8) {
														while ($src$ % 4 !== 0 && $src$ < $stop$) {;
															HEAP8[$dest$++] = HEAP8[$src$++];
														}
														$src$ >>= 2;
														$dest$ >>= 2;
														$stop4$ = $stop$ >> 2;
														while ($src$ < $stop4$) {;;;
															HEAP32[$dest$++] = HEAP32[$src$++];
														}
														$src$ <<= 2;
														$dest$ <<= 2;
													}
													while ($src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													};;
												}
												var $429 = $word;
												$pw = $429;;
											}
										} while (0);
										$n_digits = 0;
										var $430 = $n_digits;
										var $431 = $word;
										var $arrayidx82630 = (($431 + $430) & 4294967295);
										var $432 = HEAP8[($arrayidx82630)];
										var $conv82731 = (tempInt = (($432)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $call82832 = _iswdigit($conv82731);
										var $tobool82933 = ((($call82832)) | 0) != 0;
										var $433 = $n_digits;
										if ($tobool82933) {
											__lastLabel__ = 261;
											__label__ = 262;;
										} else {
											__lastLabel__ = 261;
											__label__ = 263;;
										}
										$for_inc831$$for_end833$364: do {
											if (__label__ == 262) {
												while (1) {
													var $434 = __lastLabel__ == 262 ? $438 : ($433);
													var $inc832 = ((($434) + 1) & 4294967295);
													$n_digits = $inc832;
													var $435 = $n_digits;
													var $436 = $word;
													var $arrayidx826 = (($436 + $435) & 4294967295);
													var $437 = HEAP8[($arrayidx826)];
													var $conv827 = (tempInt = (($437)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $call828 = _iswdigit($conv827);
													var $tobool829 = ((($call828)) | 0) != 0;
													var $438 = $n_digits;
													if ($tobool829) {
														__lastLabel__ = 262;
														__label__ = 262;
														continue;
													} else {
														__lastLabel__ = 262;
														__label__ = 263;
														break $for_inc831$$for_end833$364;
													}
												}
											}
										} while (0);
										var $_lcssa29 = __lastLabel__ == 261 ? $433 : ($438);
										var $cmp834 = ((($_lcssa29)) | 0) > 4;
										if ($cmp834) {
											__label__ = 264;;
										} else {
											__label__ = 284;;
										}
										$if_then835$$if_else939$368: do {
											if (__label__ == 264) {
												HEAP8[($arrayidx836)] = 32;
												$pn = $arrayidx837;
												var $439 = $n_digits;
												$nx = $439;
												$nw = 0;
												$individual_digits = 0;
												var $440 = $n_digits;
												var $441 = $tr_addr;
												var $langopts838 = (($441) & 4294967295);
												var $max_digits = (($langopts838 + 212) & 4294967295);
												var $442 = HEAP32[(($max_digits) >> 2)];
												var $cmp839 = ((($440)) | 0) > ((($442)) | 0);
												if ($cmp839) {
													__label__ = 266;;
												} else {
													__label__ = 265;;
												}
												$if_then844$$lor_lhs_false840$370: do {
													if (__label__ == 265) {
														var $443 = $word;
														var $arrayidx841 = (($443) & 4294967295);
														var $444 = HEAP8[($arrayidx841)];
														var $conv842 = (tempInt = (($444)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp843 = ((($conv842)) | 0) == 48;
														if ($cmp843) {
															__label__ = 266;
															break $if_then844$$lor_lhs_false840$370;
														} else {
															__label__ = 267;
															break $if_then844$$lor_lhs_false840$370;
														}
													}
												} while (0);
												if (__label__ == 266) {
													var $445 = $ix;
													var $arrayidx845 = (($words + $445 * 12) & 4294967295);
													var $flags846 = (($arrayidx845) & 4294967295);
													var $446 = HEAP32[(($flags846) >> 2)];
													var $or847 = ($446) | 524288;
													HEAP32[(($flags846) >> 2)] = $or847;;
												}
												$while_cond849$374: while (1) {
													var $447 = $pn;
													var $cmp851 = ((($447)) >>> 0) < ((($arrayidx850)) >>> 0);
													if (!($cmp851)) {
														__label__ = 278;
														break $while_cond849$374;
													}
													var $448 = $pw;
													var $incdec_ptr853 = (($448 + 1) & 4294967295);
													$pw = $incdec_ptr853;
													var $449 = HEAP8[($448)];
													var $conv854 = (tempInt = (($449)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													$c = $conv854;
													var $isdigittmp = ((($conv854) - 48) & 4294967295);
													var $isdigit = ((($isdigittmp)) >>> 0) < 10;
													var $call855 = ((($isdigit)) & 1);
													var $tobool856 = ((($call855)) | 0) != 0;
													if ($tobool856) {
														__label__ = 270;;
													} else {
														__label__ = 269;;
													}
													if (__label__ == 269) {
														var $450 = $c;
														var $451 = $tr_addr;
														var $langopts858 = (($451) & 4294967295);
														var $decimal_sep859 = (($langopts858 + 208) & 4294967295);
														var $452 = HEAP32[(($decimal_sep859) >> 2)];
														var $cmp860 = ((($450)) | 0) != ((($452)) | 0);
														if ($cmp860) {
															__label__ = 278;
															break $while_cond849$374;
														}
													}
													var $453 = $c;
													var $conv863 = ((($453)) & 255);
													var $454 = $pn;
													var $incdec_ptr864 = (($454 + 1) & 4294967295);
													$pn = $incdec_ptr864;
													HEAP8[($454)] = $conv863;
													var $455 = $nx;
													var $dec865 = ((($455) - 1) & 4294967295);
													$nx = $dec865;
													var $cmp866 = ((($dec865)) | 0) > 0;
													if (!($cmp866)) {
														__label__ = 267;
														continue $while_cond849$374;
													}
													var $456 = $tr_addr;
													var $langopts868 = (($456) & 4294967295);
													var $break_numbers869 = (($langopts868 + 192) & 4294967295);
													var $457 = HEAP32[(($break_numbers869) >> 2)];
													var $458 = $nx;
													var $shl = 1 << ($458);
													var $and870 = ($shl) & ($457);
													var $tobool871 = ((($and870)) | 0) != 0;
													if (!($tobool871)) {
														__label__ = 267;
														continue $while_cond849$374;
													}
													var $459 = $nw;
													var $inc873 = ((($459) + 1) & 4294967295);
													$nw = $inc873;
													var $arrayidx874 = (($num_wtab + $459 * 12) & 4294967295);
													var $460 = $arrayidx874;
													var $461 = $ix;
													var $arrayidx875 = (($words + $461 * 12) & 4294967295);
													var $462 = $arrayidx875;
													var $src$, $dest$, $stop$, $stop4$, $fast$;
													$src$ = $462;
													$dest$ = $460;
													$stop$ = $src$ + 12;
													if (($dest$ % 4) == ($src$ % 4) && 12 > 8) {
														while ($src$ % 4 !== 0 && $src$ < $stop$) {;
															HEAP8[$dest$++] = HEAP8[$src$++];
														}
														$src$ >>= 2;
														$dest$ >>= 2;
														$stop4$ = $stop$ >> 2;
														while ($src$ < $stop4$) {;;;
															HEAP32[$dest$++] = HEAP32[$src$++];
														}
														$src$ <<= 2;
														$dest$ <<= 2;
													}
													while ($src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													};
													var $463 = $tr_addr;
													var $langopts876 = (($463) & 4294967295);
													var $thousands_sep877 = (($langopts876 + 204) & 4294967295);
													var $464 = HEAP32[(($thousands_sep877) >> 2)];
													var $cmp878 = ((($464)) | 0) != 32;
													if ($cmp878) {
														__label__ = 273;;
													} else {
														__label__ = 274;;
													}
													if (__label__ == 273) {
														var $465 = $tr_addr;
														var $langopts880 = (($465) & 4294967295);
														var $thousands_sep881 = (($langopts880 + 204) & 4294967295);
														var $466 = HEAP32[(($thousands_sep881) >> 2)];
														var $conv882 = ((($466)) & 255);
														var $467 = $pn;
														var $incdec_ptr883 = (($467 + 1) & 4294967295);
														$pn = $incdec_ptr883;
														HEAP8[($467)] = $conv882;;
													}
													var $468 = $pn;
													var $incdec_ptr885 = (($468 + 1) & 4294967295);
													$pn = $incdec_ptr885;
													HEAP8[($468)] = 32;
													var $469 = $tr_addr;
													var $langopts886 = (($469) & 4294967295);
													var $break_numbers887 = (($langopts886 + 192) & 4294967295);
													var $470 = HEAP32[(($break_numbers887) >> 2)];
													var $471 = $nx;
													var $sub888 = ((($471) - 1) & 4294967295);
													var $shl889 = 1 << ($sub888);
													var $and890 = ($shl889) & ($470);
													var $tobool891 = ((($and890)) | 0) != 0;
													if ($tobool891) {
														__label__ = 275;;
													} else {
														__label__ = 276;;
													}
													if (__label__ == 275) {
														var $472 = $pn;
														var $incdec_ptr893 = (($472 + 1) & 4294967295);
														$pn = $incdec_ptr893;
														HEAP8[($472)] = 48;
														var $473 = $pn;
														var $incdec_ptr894 = (($473 + 1) & 4294967295);
														$pn = $incdec_ptr894;
														HEAP8[($473)] = 48;;
													}
													var $474 = $tr_addr;
													var $langopts896 = (($474) & 4294967295);
													var $break_numbers897 = (($langopts896 + 192) & 4294967295);
													var $475 = HEAP32[(($break_numbers897) >> 2)];
													var $476 = $nx;
													var $sub898 = ((($476) - 2) & 4294967295);
													var $shl899 = 1 << ($sub898);
													var $and900 = ($shl899) & ($475);
													var $tobool901 = ((($and900)) | 0) != 0;
													if (!($tobool901)) {
														__label__ = 267;
														continue $while_cond849$374;
													}
													var $477 = $pn;
													var $incdec_ptr903 = (($477 + 1) & 4294967295);
													$pn = $incdec_ptr903;
													HEAP8[($477)] = 48;
													__label__ = 267;
													continue $while_cond849$374;
												}
												var $478 = $pw;
												var $incdec_ptr907 = (($478 + -1) & 4294967295);
												$pw = $incdec_ptr907;
												var $479 = $nw;
												var $arrayidx908 = (($num_wtab + $479 * 12) & 4294967295);
												var $480 = $arrayidx908;
												var $481 = $ix;
												var $arrayidx909 = (($words + $481 * 12) & 4294967295);
												var $482 = $arrayidx909;
												var $src$, $dest$, $stop$, $stop4$, $fast$;
												$src$ = $482;
												$dest$ = $480;
												$stop$ = $src$ + 24;
												if (($dest$ % 4) == ($src$ % 4) && 24 > 8) {
													while ($src$ % 4 !== 0 && $src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													}
													$src$ >>= 2;
													$dest$ >>= 2;
													$stop4$ = $stop$ >> 2;
													while ($src$ < $stop4$) {;;;
														HEAP32[$dest$++] = HEAP32[$src$++];
													}
													$src$ <<= 2;
													$dest$ <<= 2;
												}
												while ($src$ < $stop$) {;
													HEAP8[$dest$++] = HEAP8[$src$++];
												};
												$j = 1;
												var $483 = $j;
												var $484 = $nw;
												var $cmp91134 = ((($483)) | 0) <= ((($484)) | 0);
												if ($cmp91134) {
													__label__ = 279;;
												} else {
													__label__ = 280;;
												}
												$for_body912$$for_end918$390: do {
													if (__label__ == 279) {
														while (1) {
															var $485 = $j;
															var $arrayidx913 = (($num_wtab + $485 * 12) & 4294967295);
															var $flags914 = (($arrayidx913) & 4294967295);
															var $486 = HEAP32[(($flags914) >> 2)];
															var $and915 = ($486) & -262209;
															HEAP32[(($flags914) >> 2)] = $and915;
															var $487 = $j;
															var $inc917 = ((($487) + 1) & 4294967295);
															$j = $inc917;
															var $488 = $j;
															var $489 = $nw;
															var $cmp911 = ((($488)) | 0) <= ((($489)) | 0);
															if ($cmp911) {
																__label__ = 279;
																continue;
															} else {
																__label__ = 280;
																break $for_body912$$for_end918$390;
															}
														}
													}
												} while (0);
												var $490 = $pn;
												var $491 = $pw;
												var $src$, $dest$, $stop$, $stop4$, $fast$;
												$src$ = $491;
												$dest$ = $490;
												$stop$ = $src$ + 16;
												if (($dest$ % 4) == ($src$ % 4) && 16 > 8) {
													while ($src$ % 4 !== 0 && $src$ < $stop$) {;
														HEAP8[$dest$++] = HEAP8[$src$++];
													}
													$src$ >>= 2;
													$dest$ >>= 2;
													$stop4$ = $stop$ >> 2;
													while ($src$ < $stop4$) {;;;
														HEAP32[$dest$++] = HEAP32[$src$++];
													}
													$src$ <<= 2;
													$dest$ <<= 2;
												}
												while ($src$ < $stop$) {;
													HEAP8[$dest$++] = HEAP8[$src$++];
												};
												var $492 = $pn;
												var $arrayidx919 = (($492 + 16) & 4294967295);
												HEAP8[($arrayidx919)] = 0;
												$nw = 0;
												$pw = $arrayidx920;
												var $493 = $pw;
												var $494 = $pn;
												var $cmp92235 = ((($493)) >>> 0) < ((($494)) >>> 0);
												if (!($cmp92235)) {
													__label__ = 293;
													break $if_then835$$if_else939$368;
												}
												$for_body923$394: while (1) {
													var $495 = $tr_addr;
													var $496 = $pw;
													var $497 = $nw;
													var $inc924 = ((($497) + 1) & 4294967295);
													$nw = $inc924;
													var $arrayidx925 = (($num_wtab + $497 * 12) & 4294967295);
													var $498 = $ix;
													var $arrayidx926 = (($words + $498 * 12) & 4294967295);
													var $pre_pause927 = (($arrayidx926 + 8) & 4294967295);
													var $499 = HEAPU8[($pre_pause927)];
													var $conv928 = ((($499)) & 255);
													var $call929 = __ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($495, $496, $arrayidx925, $conv928, 0);
													$dict_flags = $call929;;
													while (1) {
														var $500 = $pw;
														var $incdec_ptr931 = (($500 + 1) & 4294967295);
														$pw = $incdec_ptr931;
														var $501 = HEAP8[($500)];
														var $conv932 = (tempInt = (($501)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp933 = ((($conv932)) | 0) != 32;
														if ($cmp933) {
															__label__ = 282;
															continue;
														} else {
															__label__ = 283;
															break;
														}
													}
													var $502 = $ix;
													var $arrayidx936 = (($words + $502 * 12) & 4294967295);
													var $pre_pause937 = (($arrayidx936 + 8) & 4294967295);
													HEAP8[($pre_pause937)] = 0;
													var $503 = $pw;
													var $504 = $pn;
													var $cmp922 = ((($503)) >>> 0) < ((($504)) >>> 0);
													if ($cmp922) {
														__label__ = 281;
														continue $for_body923$394;
													} else {
														__label__ = 293;
														break $if_then835$$if_else939$368;
													}
												}
											} else if (__label__ == 284) {
												HEAP32[((_pre_pause) >> 2)] = 0;
												var $505 = $tr_addr;
												var $506 = $word;
												var $507 = $ix;
												var $arrayidx940 = (($words + $507 * 12) & 4294967295);
												var $508 = $ix;
												var $arrayidx941 = (($words + $508 * 12) & 4294967295);
												var $pre_pause942 = (($arrayidx941 + 8) & 4294967295);
												var $509 = HEAPU8[($pre_pause942)];
												var $conv943 = ((($509)) & 255);
												var $510 = $ix;
												var $add944 = ((($510) + 1) & 4294967295);
												var $arrayidx945 = (($words + $add944 * 12) & 4294967295);
												var $pre_pause946 = (($arrayidx945 + 8) & 4294967295);
												var $511 = HEAPU8[($pre_pause946)];
												var $conv947 = ((($511)) & 255);
												var $call948 = __ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($505, $506, $arrayidx940, $conv943, $conv947);
												$dict_flags = $call948;
												var $512 = HEAP32[((_pre_pause) >> 2)];
												var $513 = $ix;
												var $add949 = ((($513) + 1) & 4294967295);
												var $arrayidx950 = (($words + $add949 * 12) & 4294967295);
												var $pre_pause951 = (($arrayidx950 + 8) & 4294967295);
												var $514 = HEAPU8[($pre_pause951)];
												var $conv952 = ((($514)) & 255);
												var $cmp953 = ((($512)) | 0) > ((($conv952)) | 0);
												if ($cmp953) {
													__label__ = 285;;
												} else {
													__label__ = 286;;
												}
												if (__label__ == 285) {
													var $515 = HEAP32[((_pre_pause) >> 2)];
													var $conv955 = ((($515)) & 255);
													var $516 = $ix;
													var $add956 = ((($516) + 1) & 4294967295);
													var $arrayidx957 = (($words + $add956 * 12) & 4294967295);
													var $pre_pause958 = (($arrayidx957 + 8) & 4294967295);
													HEAP8[($pre_pause958)] = $conv955;
													HEAP32[((_pre_pause) >> 2)] = 0;;
												}
												var $517 = $dict_flags;
												var $and960 = ($517) & 65536;
												var $tobool961 = ((($and960)) | 0) != 0;
												if ($tobool961) {
													__label__ = 287;;
												} else {
													__label__ = 289;;
												}
												$if_then962$$if_end975$403: do {
													if (__label__ == 287) {
														var $518 = $word;
														$pw = $518;
														var $519 = $pw;
														var $520 = HEAP8[($519)];
														var $conv96427 = (tempInt = (($520)), (tempInt >= 128 ? tempInt - 256 : tempInt));
														var $cmp96528 = ((($conv96427)) | 0) != 32;
														if (!($cmp96528)) {
															__label__ = 289;
															break $if_then962$$if_end975$403;
														}
														while (1) {
															var $dest$, $stop$, $stop4$, $fast$, $value4$;
															$dest$ = $arraydecay967;
															$stop$ = $dest$ + 9;
															$value4$ = 32;
															if ($value4$ < 0) $value4$ += 256;
															$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
															while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
																HEAP8[$dest$++] = 32;
															}
															$dest$ >>= 2;
															$stop4$ = $stop$ >> 2;
															while ($dest$ < $stop4$) {;;;;;;;
																HEAP32[$dest$++] = $value4$;
															}
															$dest$ <<= 2;
															while ($dest$ < $stop$) {;;
																HEAP8[$dest$++] = 32;
															};
															var $521 = $pw;
															var $call968 = __Z7utf8_inPiPKc($c_temp, $521);
															$nx = $call968;
															var $522 = $pw;
															var $523 = $nx;
															var $src$, $dest$, $stop$, $stop4$, $fast$;
															$src$ = $522;
															$dest$ = $arrayidx969;
															$stop$ = $src$ + $523;
															if (($dest$ % 4) == ($src$ % 4) && $523 > 8) {
																while ($src$ % 4 !== 0 && $src$ < $stop$) {;
																	HEAP8[$dest$++] = HEAP8[$src$++];
																}
																$src$ >>= 2;
																$dest$ >>= 2;
																$stop4$ = $stop$ >> 2;
																while ($src$ < $stop4$) {;;;
																	HEAP32[$dest$++] = HEAP32[$src$++];
																}
																$src$ <<= 2;
																$dest$ <<= 2;
															}
															while ($src$ < $stop$) {;
																HEAP8[$dest$++] = HEAP8[$src$++];
															};
															var $524 = $tr_addr;
															var $525 = $ix;
															var $arrayidx971 = (($words + $525 * 12) & 4294967295);
															var $call972 = __ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($524, $arrayidx970, $arrayidx971, 0, 0);
															var $526 = $nx;
															var $527 = $pw;
															var $add_ptr973 = (($527 + $526) & 4294967295);
															$pw = $add_ptr973;
															var $528 = $pw;
															var $529 = HEAP8[($528)];
															var $conv964 = (tempInt = (($529)), (tempInt >= 128 ? tempInt - 256 : tempInt));
															var $cmp965 = ((($conv964)) | 0) != 32;
															if ($cmp965) {
																__label__ = 288;
																continue;
															} else {
																__label__ = 289;
																break $if_then962$$if_end975$403;
															}
														}
													}
												} while (0);
												var $530 = $dict_flags;
												var $and976 = ($530) & 50331648;
												var $tobool977 = ((($and976)) | 0) != 0;
												if (!($tobool977)) {
													__label__ = 293;
													break $if_then835$$if_else939$368;
												}
												var $531 = $ix;
												var $532 = $word_count;
												var $sub979 = ((($532) - 1) & 4294967295);
												var $cmp980 = ((($531)) | 0) == ((($sub979)) | 0);
												if (!($cmp980)) {
													__label__ = 293;
													break $if_then835$$if_else939$368;
												}
												var $533 = $terminator;
												var $and982 = ($533) & 4194304;
												var $tobool983 = ((($and982)) | 0) != 0;
												if (!($tobool983)) {
													__label__ = 293;
													break $if_then835$$if_else939$368;
												}
												$clause_pause = 10;
												$tone = 4;;
											}
										} while (0);
										var $534 = $dict_flags;
										var $and987 = ($534) & 128;
										var $tobool988 = ((($and987)) | 0) != 0;
										if (!($tobool988)) {
											__label__ = 295;
											break $if_end768$$for_inc992$344;
										}
										var $535 = HEAP32[((_dictionary_skipwords) >> 2)];
										var $536 = $ix;
										var $add990 = ((($536) + ($535)) & 4294967295);
										$ix = $add990;;
									}
								} while (0);
								var $537 = $ix;
								var $inc993 = ((($537) + 1) & 4294967295);
								$ix = $inc993;
								var $538 = $ix;
								var $539 = $word_count;
								var $cmp756 = ((($538)) | 0) < ((($539)) | 0);
								if ($cmp756) {
									__label__ = 243;
									continue $for_body757$337;
								} else {
									__label__ = 296;
									break $for_body757_lr_ph$$for_end994$335;
								}
							}
						}
					} while (0);
					$ix = 0;
					var $540 = HEAP32[((_n_ph_list2) >> 2)];
					__lastLabel__ = 296;;
					$for_body997$415: while (1) {
						var $541 = __lastLabel__ == 296 ? $540 : ($549);
						var $542 = $ix;
						var $add998 = ((($542) + ($541)) & 4294967295);
						var $arrayidx999 = ((_ph_list2 + $add998 * 8) & 4294967295);
						$p2 = $arrayidx999;
						var $543 = $p2;
						var $phcode = (($543) & 4294967295);
						HEAP8[($phcode)] = 9;
						var $544 = $p2;
						var $stresslevel = (($544 + 1) & 4294967295);
						HEAP8[($stresslevel)] = 0;
						var $545 = HEAP32[(($source_index) >> 2)];
						var $conv1000 = ((($545)) & 65535);
						var $546 = $p2;
						var $sourceix1001 = (($546 + 6) & 4294967295);
						HEAP16[(($sourceix1001) >> 1)] = $conv1000;
						var $547 = $p2;
						var $synthflags = (($547 + 4) & 4294967295);
						HEAP16[(($synthflags) >> 1)] = 0;
						var $548 = $ix;
						var $inc1003 = ((($548) + 1) & 4294967295);
						$ix = $inc1003;
						var $cmp996 = ((($inc1003)) | 0) < 2;
						var $549 = HEAP32[((_n_ph_list2) >> 2)];
						if ($cmp996) {
							__lastLabel__ = 297;
							__label__ = 297;
							continue $for_body997$415;
						} else {
							__lastLabel__ = 297;
							__label__ = 298;
							break $for_body997$415;
						}
					}
					var $add1005 = ((($549) + 2) & 4294967295);
					HEAP32[((_n_ph_list2) >> 2)] = $add1005;
					var $550 = HEAP32[((_count_words) >> 2)];
					var $cmp1006 = ((($550)) | 0) == 0;
					if ($cmp1006) {
						__label__ = 299;;
					} else {
						__label__ = 300;;
					}
					if (__label__ == 299) {
						$clause_pause = 0;;
					}
					var $call1009 = __Z3Eofv();
					var $tobool1010 = ((($call1009)) | 0) != 0;
					if ($tobool1010) {
						__label__ = 301;;
					} else {
						__label__ = 303;;
					}
					$land_lhs_true1011$$if_end1016$421: do {
						if (__label__ == 301) {
							var $551 = $word_count;
							var $cmp1012 = ((($551)) | 0) == 0;
							var $552 = HEAP32[((_option_endpause) >> 2)];
							var $cmp1014 = ((($552)) | 0) == 0;
							var $or_cond11 = ($cmp1012) | ($cmp1014);
							if (!($or_cond11)) {
								__label__ = 303;
								break $land_lhs_true1011$$if_end1016$421;
							}
							$clause_pause = 10;;
						}
					} while (0);
					var $553 = $tr_addr;
					var $554 = $clause_pause;
					var $555 = HEAP32[((_new_sentence) >> 2)];
					__Z15MakePhonemeListP10Translatorii($553, $554, $555);
					var $556 = $embedded_count;
					var $tobool1017 = ((($556)) | 0) != 0;
					if ($tobool1017) {
						__label__ = 304;;
					} else {
						__label__ = 305;;
					}
					if (__label__ == 304) {
						var $557 = HEAP32[((_n_phoneme_list) >> 2)];
						var $sub1019 = ((($557) - 2) & 4294967295);
						var $arrayidx1020 = ((_phoneme_list + $sub1019 * 24) & 4294967295);
						var $synthflags1021 = (($arrayidx1020 + 4) & 4294967295);
						HEAP16[(($synthflags1021) >> 1)] = 2;
						var $558 = HEAP32[((__ZL11embedded_ix) >> 2)];
						var $sub1022 = ((($558) - 1) & 4294967295);
						var $arrayidx1023 = ((_embedded_list + $sub1022 * 4) & 4294967295);
						var $559 = HEAP32[(($arrayidx1023) >> 2)];
						var $or1024 = ($559) | 128;
						HEAP32[(($arrayidx1023) >> 2)] = $or1024;;
					}
					var $560 = $tone;
					var $561 = $tone_out_addr;
					HEAP32[(($561) >> 2)] = $560;
					HEAP32[((_new_sentence) >> 2)] = 0;
					var $562 = $terminator;
					var $and1026 = ($562) & 524288;
					var $tobool1027 = ((($and1026)) | 0) != 0;
					if ($tobool1027) {
						__label__ = 306;;
					} else {
						__label__ = 307;;
					}
					if (__label__ == 306) {
						HEAP32[((_new_sentence) >> 2)] = 1;;
					}
					var $563 = $voice_change_addr;
					var $cmp1030 = ((($563)) | 0) != 0;
					if ($cmp1030) {
						__label__ = 308;;
					} else {
						__label__ = 311;;
					}
					if (__label__ == 308) {
						var $564 = $terminator;
						var $and1032 = ($564) & 131072;
						var $tobool1033 = ((($and1032)) | 0) != 0;
						var $565 = $voice_change_addr;
						if ($tobool1033) {
							__label__ = 309;;
						} else {
							__label__ = 310;;
						}
						if (__label__ == 309) {
							HEAP32[(($565) >> 2)] = ((__ZZ15TranslateClauseP10TranslatorP7__sFILEPKvPiPPcE17voice_change_name) & 4294967295);;
						} else if (__label__ == 310) {
							HEAP32[(($565) >> 2)] = 0;;
						}
					}
					var $call1038 = __Z3Eofv();
					var $tobool1039 = ((($call1038)) | 0) != 0;
					if ($tobool1039) {
						__label__ = 313;;
					} else {
						__label__ = 312;;
					}
					$if_then1042$$lor_lhs_false1040$437: do {
						if (__label__ == 312) {
							var $566 = $vp_input_addr;
							var $cmp1041 = ((($566)) | 0) == 0;
							if ($cmp1041) {
								__label__ = 313;
								break $if_then1042$$lor_lhs_false1040$437;
							}
							var $567 = HEAP32[((_option_multibyte) >> 2)];
							var $cmp1044 = ((($567)) | 0) == 3;
							if ($cmp1044) {
								__label__ = 315;;
							} else {
								__label__ = 316;;
							}
							if (__label__ == 315) {
								var $568 = HEAP32[((_p_wchar_input) >> 2)];
								var $569 = $568;
								$retval = $569;
								__label__ = 317;
								break $if_then$$if_end$2;
							} else if (__label__ == 316) {
								var $570 = HEAP32[((_p_textinput) >> 2)];
								$retval = $570;
								__label__ = 317;
								break $if_then$$if_end$2;
							}
						}
					} while (0);
					$retval = 0;;
				}
			} while (0);
			var $571 = $retval;
			STACKTOP = __stackBase__;
			return $571;
			return null;
		}

		function __ZL9IsDigit09j($c) {;
			var __label__;
			var $retval;
			var $c_addr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $cmp = ((($0)) >>> 0) >= 48;
			var $1 = $c_addr;
			var $cmp1 = ((($1)) >>> 0) <= 57;
			var $or_cond = ($cmp) & ($cmp1);
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				$retval = 0;;
			}
			var $2 = $retval;;
			return $2;
			return null;
		}

		function __ZL15EmbeddedCommandRj($source_index) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $source_index_addr;
			var $commands;
			var $value;
			var $sign;
			var $c;
			var $p;
			var $cmd;
			$source_index_addr = $source_index;
			$commands = ((__str12555) & 4294967295);
			$value = -1;
			$sign = 0;
			var $0 = $source_index_addr;
			var $1 = HEAP32[(($0) >> 2)];
			var $arrayidx = ((__ZL6source + $1) & 4294967295);
			var $2 = HEAP8[($arrayidx)];
			$c = $2;
			var $3 = $c;
			var $conv = ((($3)) & 255);
			var $cmp = ((($conv)) | 0) == 43;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_else$2: do {
				if (__label__ == 1) {
					$sign = 64;
					var $4 = $source_index_addr;
					var $5 = HEAP32[(($4) >> 2)];
					var $inc = ((($5) + 1) & 4294967295);
					HEAP32[(($4) >> 2)] = $inc;;
				} else if (__label__ == 2) {
					var $6 = $c;
					var $conv1 = ((($6)) & 255);
					var $cmp2 = ((($conv1)) | 0) == 45;
					if (!($cmp2)) {
						__label__ = 4;
						break $if_then$$if_else$2;
					}
					$sign = 96;
					var $7 = $source_index_addr;
					var $8 = HEAP32[(($7) >> 2)];
					var $inc4 = ((($8) + 1) & 4294967295);
					HEAP32[(($7) >> 2)] = $inc4;;
				}
			} while (0);
			var $9 = $source_index_addr;
			var $10 = HEAP32[(($9) >> 2)];
			var $arrayidx6 = ((__ZL6source + $10) & 4294967295);
			var $11 = HEAP8[($arrayidx6)];
			var $conv7 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $isdigittmp = ((($conv7) - 48) & 4294967295);
			var $isdigit = ((($isdigittmp)) >>> 0) < 10;
			var $call = ((($isdigit)) & 1);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 5;;
			} else {
				__label__ = 7;;
			}
			$if_then8$$if_end16$7: do {
				if (__label__ == 5) {
					var $12 = $source_index_addr;
					var $13 = HEAP32[(($12) >> 2)];
					var $arrayidx9 = ((__ZL6source + $13) & 4294967295);
					var $call10 = _atoi($arrayidx9);
					$value = $call10;
					var $14 = $source_index_addr;
					var $15 = HEAP32[(($14) >> 2)];
					var $arrayidx113 = ((__ZL6source + $15) & 4294967295);
					var $16 = HEAP8[($arrayidx113)];
					var $conv124 = (tempInt = (($16)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp15 = ((($conv124) - 48) & 4294967295);
					var $isdigit26 = ((($isdigittmp15)) >>> 0) < 10;
					if (!($isdigit26)) {
						__label__ = 7;
						break $if_then8$$if_end16$7;
					}
					while (1) {
						var $17 = $source_index_addr;
						var $18 = HEAP32[(($17) >> 2)];
						var $inc15 = ((($18) + 1) & 4294967295);
						HEAP32[(($17) >> 2)] = $inc15;
						var $19 = $source_index_addr;
						var $20 = HEAP32[(($19) >> 2)];
						var $arrayidx11 = ((__ZL6source + $20) & 4294967295);
						var $21 = HEAP8[($arrayidx11)];
						var $conv12 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $isdigittmp1 = ((($conv12) - 48) & 4294967295);
						var $isdigit2 = ((($isdigittmp1)) >>> 0) < 10;
						var $call13 = ((($isdigit2)) & 1);
						var $tobool14 = ((($call13)) | 0) != 0;
						if ($tobool14) {
							__label__ = 6;
							continue;
						} else {
							__label__ = 7;
							break $if_then8$$if_end16$7;
						}
					}
				}
			} while (0);
			var $22 = $source_index_addr;
			var $23 = HEAP32[(($22) >> 2)];
			var $inc17 = ((($23) + 1) & 4294967295);
			HEAP32[(($22) >> 2)] = $inc17;
			var $arrayidx18 = ((__ZL6source + $23) & 4294967295);
			var $24 = HEAP8[($arrayidx18)];
			$c = $24;
			var $25 = HEAP32[((__ZL11embedded_ix) >> 2)];
			var $cmp19 = ((($25)) | 0) >= 248;
			if ($cmp19) {
				__label__ = 8;;
			} else {
				__label__ = 9;;
			}
			if (__label__ == 8) {
				$retval = 0;;
			} else if (__label__ == 9) {
				var $26 = $commands;
				var $27 = $c;
				var $conv22 = ((($27)) & 255);
				var $call23 = __Z8strchr_wPKci($26, $conv22);
				$p = $call23;
				var $cmp24 = ((($call23)) | 0) == 0;
				if ($cmp24) {
					__label__ = 10;;
				} else {
					__label__ = 11;;
				}
				if (__label__ == 10) {
					$retval = 0;;
				} else if (__label__ == 11) {
					var $28 = $p;
					var $29 = $commands;
					var $sub_ptr_lhs_cast = ($28);
					var $sub_ptr_rhs_cast = ($29);
					var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
					var $add = ((($sub_ptr_sub) + 1) & 4294967295);
					$cmd = $add;
					var $30 = $value;
					var $cmp27 = ((($30)) | 0) == -1;
					if ($cmp27) {
						__lastLabel__ = 11;
						__label__ = 12;;
					} else {
						__lastLabel__ = 11;
						__label__ = 13;;
					}
					if (__label__ == 12) {
						var $31 = $cmd;
						var $arrayidx29 = ((_embedded_default + $31 * 4) & 4294967295);
						var $32 = HEAP32[(($arrayidx29) >> 2)];
						$value = $32;
						$sign = 0;
						__lastLabel__ = 12;;
					}
					var $33 = __lastLabel__ == 12 ? $31 : ($add);
					var $cmp31 = ((($33)) | 0) == 9;
					if ($cmp31) {
						__label__ = 14;;
					} else {
						__label__ = 15;;
					}
					if (__label__ == 14) {
						var $34 = $value;
						HEAP32[((__ZL13option_sayas2) >> 2)] = $34;
						HEAP32[((__ZL18count_sayas_digits) >> 2)] = 0;;
					}
					var $35 = $cmd;
					var $cmp34 = ((($35)) | 0) == 13;
					if ($cmp34) {
						__label__ = 16;;
					} else {
						__label__ = 19;;
					}
					if (__label__ == 16) {
						var $36 = $value;
						var $cmp36 = ((($36)) | 0) >= 3;
						if ($cmp36) {
							__label__ = 17;;
						} else {
							__label__ = 18;;
						}
						if (__label__ == 17) {
							HEAP8[(__ZL13word_emphasis_b)] = 1;;
						} else if (__label__ == 18) {
							HEAP8[(__ZL13word_emphasis_b)] = 0;;
						}
					}
					var $37 = $cmd;
					var $38 = $sign;
					var $39 = $value;
					var $shl = ((($39) * 256) & 4294967295);
					var $add41 = ((($38) + ($37)) & 4294967295);
					var $add42 = ((($add41) + ($shl)) & 4294967295);
					var $40 = HEAP32[((__ZL11embedded_ix) >> 2)];
					var $inc43 = ((($40) + 1) & 4294967295);
					HEAP32[((__ZL11embedded_ix) >> 2)] = $inc43;
					var $arrayidx44 = ((_embedded_list + $40 * 4) & 4294967295);
					HEAP32[(($arrayidx44) >> 2)] = $add42;
					$retval = 1;;
				}
			}
			var $41 = $retval;;
			return $41;
			return null;
		}

		function __ZL13TranslateCharP10TranslatorPcijjPi($tr, $ptr, $prev_in, $c, $next_in, $insert) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $retval;
			var $tr_addr;
			var $ptr_addr;
			var $prev_in_addr;
			var $c_addr;
			var $next_in_addr;
			var $insert_addr;
			var $code;
			var $initial;
			var $medial;
			var $final;
			var $next2 = __stackBase__;
			$tr_addr = $tr;
			$ptr_addr = $ptr;
			$prev_in_addr = $prev_in;
			$c_addr = $c;
			$next_in_addr = $next_in;
			$insert_addr = $insert;
			var $0 = $tr_addr;
			var $translator_name = (($0 + 280) & 4294967295);
			var $1 = HEAP32[(($translator_name) >> 2)];
			if ($1 == 24934) {
				__label__ = 1;;
			} else if ($1 == 28268) {
				__label__ = 1;;
			} else if ($1 == 27503) {
				__label__ = 9;;
			} else {
				__label__ = 18;;
			}
			$sw_epilog$$sw_bb$$sw_bb17$2: do {
				if (__label__ == 1) {
					var $2 = $prev_in_addr;
					var $call = _iswalpha($2);
					var $tobool = ((($call)) | 0) != 0;
					if ($tobool) {
						__label__ = 18;
						break $sw_epilog$$sw_bb$$sw_bb17$2;
					}
					var $3 = $ptr_addr;
					var $arrayidx = (($3 + 1) & 4294967295);
					var $call1 = __Z7utf8_inPiPKc($next2, $arrayidx);
					var $4 = $c_addr;
					var $cmp = ((($4)) | 0) == 39;
					if (!($cmp)) {
						__label__ = 18;
						break $sw_epilog$$sw_bb$$sw_bb17$2;
					}
					var $5 = HEAP32[(($next2) >> 2)];
					var $call2 = __Z7IsSpacej($5);
					var $tobool3 = ((($call2)) | 0) != 0;
					if (!($tobool3)) {
						__label__ = 18;
						break $sw_epilog$$sw_bb$$sw_bb17$2;
					}
					var $6 = $next_in_addr;
					var $cmp5 = ((($6)) | 0) == 110;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 7;;
					}
					$land_lhs_true6$$if_end$7: do {
						if (__label__ == 5) {
							var $7 = $tr_addr;
							var $translator_name7 = (($7 + 280) & 4294967295);
							var $8 = HEAP32[(($translator_name7) >> 2)];
							var $cmp8 = ((($8)) | 0) == 24934;
							if (!($cmp8)) {
								__label__ = 7;
								break $land_lhs_true6$$if_end$7;
							}
							var $9 = $ptr_addr;
							var $arrayidx10 = (($9) & 4294967295);
							HEAP8[($arrayidx10)] = 32;
							$retval = 601;
							__label__ = 19;
							break $sw_epilog$$sw_bb$$sw_bb17$2;
						}
					} while (0);
					var $10 = $next_in_addr;
					var $cmp11 = ((($10)) | 0) == 110;
					var $11 = $next_in_addr;
					var $cmp12 = ((($11)) | 0) == 116;
					var $or_cond = ($cmp11) | ($cmp12);
					if (!($or_cond)) {
						__label__ = 18;
						break $sw_epilog$$sw_bb$$sw_bb17$2;
					}
					$retval = 601;
					__label__ = 19;
					break $sw_epilog$$sw_bb$$sw_bb17$2;
				} else if (__label__ == 9) {
					var $12 = $c_addr;
					var $sub = ((($12) - 44032) & 4294967295);
					$code = $sub;
					var $cmp18 = ((($sub)) | 0) >= 0;
					var $13 = $c_addr;
					var $cmp20 = ((($13)) >>> 0) <= 55215;
					var $or_cond1 = ($cmp18) & ($cmp20);
					if ($or_cond1) {
						__label__ = 10;;
					} else {
						__label__ = 15;;
					}
					if (__label__ == 10) {
						var $14 = $code;
						var $div = ((((($14)) | 0) / 28) | 0);
						var $div22 = ((((($div)) | 0) / 21) | 0);
						$initial = $div22;
						var $15 = $code;
						var $div23 = ((((($15)) | 0) / 28) | 0);
						var $rem = ((($div23)) | 0) % 21;
						$medial = $rem;
						var $16 = $code;
						var $rem24 = ((($16)) | 0) % 28;
						$final = $rem24;
						var $17 = $initial;
						var $cmp25 = ((($17)) | 0) == 11;
						if ($cmp25) {
							__label__ = 11;;
						} else {
							__label__ = 13;;
						}
						$if_then26$$if_else$15: do {
							if (__label__ == 11) {
								var $18 = $medial;
								var $add = ((($18) + 4449) & 4294967295);
								$c_addr = $add;
								var $19 = $final;
								var $cmp27 = ((($19)) | 0) > 0;
								if (!($cmp27)) {
									__label__ = 14;
									break $if_then26$$if_else$15;
								}
								var $20 = $final;
								var $add29 = ((($20) + 4519) & 4294967295);
								var $21 = $insert_addr;
								HEAP32[(($21) >> 2)] = $add29;;
							} else if (__label__ == 13) {
								var $22 = $initial;
								var $add31 = ((($22) + 4352) & 4294967295);
								$c_addr = $add31;
								var $23 = $medial;
								var $mul = ((($23) * 28) & 4294967295);
								var $24 = $final;
								var $add33 = ((($24) + 50500) & 4294967295);
								var $add34 = ((($add33) + ($mul)) & 4294967295);
								var $25 = $insert_addr;
								HEAP32[(($25) >> 2)] = $add34;;
							}
						} while (0);
						var $26 = $c_addr;
						$retval = $26;
						__label__ = 19;
						break $sw_epilog$$sw_bb$$sw_bb17$2;
					} else if (__label__ == 15) {
						var $27 = $c_addr;
						var $sub37 = ((($27) - 12592) & 4294967295);
						$code = $sub37;
						var $cmp38 = ((($sub37)) | 0) >= 0;
						if (!($cmp38)) {
							__label__ = 18;
							break $sw_epilog$$sw_bb$$sw_bb17$2;
						}
						var $28 = $code;
						var $cmp40 = ((($28)) | 0) < 52;
						if (!($cmp40)) {
							__label__ = 18;
							break $sw_epilog$$sw_bb$$sw_bb17$2;
						}
						var $29 = $code;
						var $arrayidx42 = ((__ZZL13TranslateCharP10TranslatorPcijjPiE20hangul_compatibility + $29) & 4294967295);
						var $30 = HEAPU8[($arrayidx42)];
						var $conv = ((($30)) & 255);
						var $add43 = ((($conv) + 4352) & 4294967295);
						$retval = $add43;
						__label__ = 19;
						break $sw_epilog$$sw_bb$$sw_bb17$2;
					}
				}
			} while (0);
			if (__label__ == 18) {
				var $31 = $tr_addr;
				var $32 = $c_addr;
				var $33 = $next_in_addr;
				var $34 = $insert_addr;
				var $call46 = __ZL14SubstituteCharP10TranslatorjjPi($31, $32, $33, $34);
				$retval = $call46;;
			}
			var $35 = $retval;
			STACKTOP = __stackBase__;
			return $35;
			return null;
		}

		function __ZL14TranslateWord2P10TranslatorPcP8WORD_TABii($tr, $word, $wtab, $pre_pause, $next_pause) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 392;
			_memset(__stackBase__, 0, 392);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $word_addr;
			var $wtab_addr;
			var $pre_pause_addr;
			var $next_pause_addr;
			var $flags;
			var $stress;
			var $next_stress;
			var $next_tone;
			var $p;
			var $srcix;
			var $embedded_cmd;
			var $value;
			var $found_dict_flag;
			var $ph_code;
			var $plist2;
			var $ph;
			var $max_stress;
			var $max_stress_ix;
			var $prev_vowel;
			var $pitch_raised;
			var $switch_phonemes;
			var $first_phoneme;
			var $source_ix;
			var $len;
			var $ix;
			var $sylimit;
			var $new_language;
			var $bad_phoneme = __stackBase__;
			var $word_flags;
			var $word_copy_len;
			var $word_copy = __stackBase__ + 4;
			var $old_dictionary_name = __stackBase__ + 168;
			var $c1;
			var $lang_name = __stackBase__ + 208;
			var $c2;
			var $p2;
			var $ok;
			var $flags2 = __stackBase__ + 220;
			var $c_word2 = __stackBase__ + 228;
			var $ph_buf = __stackBase__ + 232;
			$tr_addr = $tr;
			$word_addr = $word;
			$wtab_addr = $wtab;
			$pre_pause_addr = $pre_pause;
			$next_pause_addr = $next_pause;
			$flags = 0;
			$next_tone = 0;
			$max_stress_ix = 0;
			$prev_vowel = -1;
			$pitch_raised = 0;
			$switch_phonemes = -1;
			$first_phoneme = 1;
			var $0 = HEAP32[((_f_logespeak) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 7;;
			}
			$land_lhs_true$$if_end10$2: do {
				if (__label__ == 1) {
					var $1 = HEAP32[((_logging_type) >> 2)];
					var $and = ($1) & 8;
					var $tobool = ((($and)) | 0) != 0;
					if (!($tobool)) {
						__label__ = 7;
						break $land_lhs_true$$if_end10$2;
					}
					var $2 = HEAP32[((_f_logespeak) >> 2)];
					var $3 = $wtab_addr;
					var $flags1 = (($3) & 4294967295);
					var $4 = HEAP32[(($flags1) >> 2)];
					var $5 = $wtab_addr;
					var $length = (($5 + 10) & 4294967295);
					var $6 = HEAPU8[($length)];
					var $conv = ((($6)) & 255);
					var $call = _fprintf($2, ((__str9552) & 4294967295), allocate([$4, 0, 0, 0, $conv, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
					$ix = 0;
					__lastLabel__ = 2;;
					while (1) {
						var $7 = __lastLabel__ == 5 ? $inc : (0);
						var $cmp2 = ((($7)) | 0) < 40;
						if (!($cmp2)) {
							__label__ = 6;
							break;
						}
						var $8 = $ix;
						var $9 = $word_addr;
						var $arrayidx = (($9 + $8) & 4294967295);
						var $10 = HEAP8[($arrayidx)];
						var $conv3 = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp4 = ((($conv3)) | 0) == 0;
						if ($cmp4) {
							__label__ = 6;
							break;
						}
						var $11 = $ix;
						var $12 = $word_addr;
						var $arrayidx6 = (($12 + $11) & 4294967295);
						var $13 = HEAP8[($arrayidx6)];
						var $conv7 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $14 = HEAP32[((_f_logespeak) >> 2)];
						var $call8 = _fputc($conv7, $14);
						var $15 = $ix;
						var $inc = ((($15) + 1) & 4294967295);
						$ix = $inc;
						__lastLabel__ = 5;
						__label__ = 3;
						continue;
					}
					var $16 = HEAP32[((_f_logespeak) >> 2)];
					var $17 = _fwrite(((__str10553) & 4294967295), 2, 1, $16);;
				}
			} while (0);
			var $18 = $wtab_addr;
			var $length11 = (($18 + 10) & 4294967295);
			var $19 = HEAPU8[($length11)];
			var $conv12 = ((($19)) & 255);
			$len = $conv12;
			var $cmp13 = ((($conv12)) | 0) > 31;
			if ($cmp13) {
				__label__ = 8;;
			} else {
				__label__ = 9;;
			}
			if (__label__ == 8) {
				$len = 31;;
			}
			var $20 = $wtab_addr;
			var $sourceix = (($20 + 6) & 4294967295);
			var $21 = HEAPU16[(($sourceix) >> 1)];
			var $conv16 = ((($21)) & 65535);
			var $and17 = ($conv16) & 2047;
			var $22 = $len;
			var $shl = ($22) << 11;
			var $or = ($and17) | ($shl);
			$source_ix = $or;
			var $23 = $wtab_addr;
			var $arrayidx18 = (($23) & 4294967295);
			var $flags19 = (($arrayidx18) & 4294967295);
			var $24 = HEAP32[(($flags19) >> 2)];
			$word_flags = $24;
			var $25 = $word_flags;
			var $and20 = ($25) & 64;
			var $tobool21 = ((($and20)) | 0) != 0;
			if ($tobool21) {
				__label__ = 10;;
			} else {
				__label__ = 18;;
			}
			$if_then22$$if_end33$14: do {
				if (__label__ == 10) {
					HEAP8[(__ZL13embedded_flag_b)] = 1;;
					while (1) {
						var $26 = HEAP32[((__ZL13embedded_read) >> 2)];
						var $inc23 = ((($26) + 1) & 4294967295);
						HEAP32[((__ZL13embedded_read) >> 2)] = $inc23;
						var $arrayidx24 = ((_embedded_list + $26 * 4) & 4294967295);
						var $27 = HEAP32[(($arrayidx24) >> 2)];
						$embedded_cmd = $27;
						var $28 = $embedded_cmd;
						var $shr = ($28) >> 8;
						$value = $shr;
						var $29 = $embedded_cmd;
						var $and25 = ($29) & 31;
						if ($and25 == 9) {
							__label__ = 12;;
						} else if ($and25 == 13) {
							__label__ = 13;;
						} else if ($and25 == 12) {
							__label__ = 14;;
						} else {
							__label__ = 17;;
						}
						if (__label__ == 12) {
							var $30 = $value;
							HEAP32[((_option_sayas) >> 2)] = $30;;
						} else if (__label__ == 13) {
							var $31 = $value;
							HEAP32[((__ZL15option_emphasis) >> 2)] = $31;;
						} else if (__label__ == 14) {
							var $32 = $value;
							var $cmp28 = ((($32)) | 0) == 0;
							if ($cmp28) {
								__label__ = 15;;
							} else {
								__label__ = 16;;
							}
							if (__label__ == 15) {
								$pre_pause_addr = 0;;
							} else if (__label__ == 16) {
								var $33 = $value;
								var $34 = $pre_pause_addr;
								var $add = ((($34) + ($33)) & 4294967295);
								$pre_pause_addr = $add;;
							}
						}
						var $35 = $embedded_cmd;
						var $and31 = ($35) & 128;
						var $cmp32 = ((($and31)) | 0) == 0;
						if ($cmp32) {
							__label__ = 11;
							continue;
						} else {
							__label__ = 18;
							break $if_then22$$if_end33$14;
						}
					}
				}
			} while (0);
			var $36 = $word_addr;
			var $arrayidx34 = (($36) & 4294967295);
			var $37 = HEAP8[($arrayidx34)];
			var $conv35 = (tempInt = (($37)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp36 = ((($conv35)) | 0) == 0;
			if ($cmp36) {
				__label__ = 19;;
			} else {
				__label__ = 20;;
			}
			$if_then37$$if_end38$27: do {
				if (__label__ == 19) {
					HEAP8[(((_word_phonemes) & 4294967295))] = 0;
					$retval = 0;;
				} else if (__label__ == 20) {
					var $38 = $tr_addr;
					var $prepause_timeout = (($38 + 8312) & 4294967295);
					var $39 = HEAP32[(($prepause_timeout) >> 2)];
					var $cmp39 = ((($39)) | 0) > 0;
					if ($cmp39) {
						__label__ = 21;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 21) {
						var $40 = $tr_addr;
						var $prepause_timeout41 = (($40 + 8312) & 4294967295);
						var $41 = HEAP32[(($prepause_timeout41) >> 2)];
						var $dec = ((($41) - 1) & 4294967295);
						HEAP32[(($prepause_timeout41) >> 2)] = $dec;;
					}
					var $42 = HEAP32[((_option_sayas) >> 2)];
					var $and43 = ($42) & 240;
					var $cmp44 = ((($and43)) | 0) == 16;
					if ($cmp44) {
						__label__ = 23;;
					} else {
						__label__ = 25;;
					}
					$if_then45$$if_end51$33: do {
						if (__label__ == 23) {
							var $43 = $word_flags;
							var $and46 = ($43) & 512;
							var $tobool47 = ((($and46)) | 0) != 0;
							if ($tobool47) {
								__label__ = 25;
								break $if_then45$$if_end51$33;
							}
							var $44 = $pre_pause_addr;
							var $add49 = ((($44) + 4) & 4294967295);
							$pre_pause_addr = $add49;;
						}
					} while (0);
					var $45 = $word_flags;
					var $and52 = ($45) & 2;
					var $tobool53 = ((($and52)) | 0) != 0;
					if ($tobool53) {
						__label__ = 26;;
					} else {
						__label__ = 32;;
					}
					$if_then54$$if_end72$37: do {
						if (__label__ == 26) {
							var $46 = HEAP32[((_option_capitals) >> 2)];
							var $cmp55 = ((($46)) | 0) > 2;
							var $47 = HEAP32[((__ZL11embedded_ix) >> 2)];
							var $cmp57 = ((($47)) | 0) < 244;
							var $or_cond = ($cmp55) & ($cmp57);
							if (!($or_cond)) {
								__label__ = 32;
								break $if_then54$$if_end72$37;
							}
							var $_b3 = HEAPU8[(__ZL13embedded_flag_b)];
							var $48 = ($_b3) ? 2 : 0;
							var $tobool59 = ((($48)) | 0) != 0;
							if ($tobool59) {
								__label__ = 28;;
							} else {
								__label__ = 29;;
							}
							if (__label__ == 28) {
								var $49 = HEAP32[((__ZL11embedded_ix) >> 2)];
								var $sub = ((($49) - 1) & 4294967295);
								var $arrayidx61 = ((_embedded_list + $sub * 4) & 4294967295);
								var $50 = HEAP32[(($arrayidx61) >> 2)];
								var $and62 = ($50) & -129;
								HEAP32[(($arrayidx61) >> 2)] = $and62;;
							}
							var $51 = HEAP32[((_option_capitals) >> 2)];
							$pitch_raised = $51;
							var $cmp64 = ((($51)) | 0) == 3;
							if ($cmp64) {
								__label__ = 30;;
							} else {
								__label__ = 31;;
							}
							if (__label__ == 30) {
								$pitch_raised = 20;;
							}
							var $52 = $pitch_raised;
							var $shl67 = ((($52) * 256) & 4294967295);
							var $add68 = ((($shl67) + 193) & 4294967295);
							var $53 = HEAP32[((__ZL11embedded_ix) >> 2)];
							var $inc69 = ((($53) + 1) & 4294967295);
							HEAP32[((__ZL11embedded_ix) >> 2)] = $inc69;
							var $arrayidx70 = ((_embedded_list + $53 * 4) & 4294967295);
							HEAP32[(($arrayidx70) >> 2)] = $add68;
							HEAP8[(__ZL13embedded_flag_b)] = 1;;
						}
					} while (0);
					$p = ((_word_phonemes) & 4294967295);
					var $54 = $word_flags;
					var $and73 = ($54) & 8;
					var $tobool74 = ((($and73)) | 0) != 0;
					if ($tobool74) {
						__label__ = 33;;
					} else {
						__label__ = 40;;
					}
					$if_then75$$if_else100$47: do {
						if (__label__ == 33) {
							var $55 = $word_addr;
							var $call76 = _memcmp($55, ((__str11554) & 4294967295), 3);
							var $cmp77 = ((($call76)) | 0) == 0;
							var $56 = $word_addr;
							if ($cmp77) {
								__label__ = 34;;
							} else {
								__label__ = 38;;
							}
							$if_then78$$if_else96$49: do {
								if (__label__ == 34) {
									var $add_ptr = (($56 + 3) & 4294967295);
									$word_addr = $add_ptr;
									$ix = 0;
									var $57 = $word_addr;
									var $incdec_ptr32 = (($57 + 1) & 4294967295);
									$word_addr = $incdec_ptr32;
									var $58 = HEAP8[($57)];
									var $conv8033 = (tempInt = (($58)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									$c1 = $conv8033;
									var $59 = $c1;
									var $cmp8134 = ((($59)) | 0) == 32;
									var $60 = $c1;
									var $cmp8235 = ((($60)) | 0) == 0;
									var $or_cond436 = ($cmp8134) | ($cmp8235);
									if ($or_cond436) {
										__label__ = 36;;
									} else {
										__label__ = 35;;
									}
									$for_end89$$if_end84$51: do {
										if (__label__ == 35) {
											while (1) {
												var $61 = $c1;
												var $call85 = _tolower($61);
												var $conv86 = ((($call85)) & 255);
												var $62 = $ix;
												var $inc87 = ((($62) + 1) & 4294967295);
												$ix = $inc87;
												var $arrayidx88 = (($lang_name + $62) & 4294967295);
												HEAP8[($arrayidx88)] = $conv86;
												var $63 = $word_addr;
												var $incdec_ptr = (($63 + 1) & 4294967295);
												$word_addr = $incdec_ptr;
												var $64 = HEAP8[($63)];
												var $conv80 = (tempInt = (($64)), (tempInt >= 128 ? tempInt - 256 : tempInt));
												$c1 = $conv80;
												var $65 = $c1;
												var $cmp81 = ((($65)) | 0) == 32;
												var $66 = $c1;
												var $cmp82 = ((($66)) | 0) == 0;
												var $or_cond4 = ($cmp81) | ($cmp82);
												if ($or_cond4) {
													__label__ = 36;
													break $for_end89$$if_end84$51;
												} else {
													__label__ = 35;
													continue;
												}
											}
										}
									} while (0);
									var $67 = $ix;
									var $arrayidx90 = (($lang_name + $67) & 4294967295);
									HEAP8[($arrayidx90)] = 0;
									var $arraydecay = (($lang_name) & 4294967295);
									var $call91 = __Z18LookupPhonemeTablePKc($arraydecay);
									$ix = $call91;
									var $cmp92 = ((($call91)) | 0) > 0;
									if (!($cmp92)) {
										__label__ = 39;
										break $if_then78$$if_else96$49;
									}
									var $68 = $ix;
									__Z18SelectPhonemeTablei($68);
									HEAP8[(((_word_phonemes) & 4294967295))] = 21;
									var $69 = $ix;
									var $conv94 = ((($69)) & 255);
									HEAP8[(((_word_phonemes + 1) & 4294967295))] = $conv94;
									HEAP8[(((_word_phonemes + 2) & 4294967295))] = 0;;
								} else if (__label__ == 38) {
									var $arraydecay97 = (($bad_phoneme) & 4294967295);
									var $call98 = __Z14EncodePhonemesPcS_Ph($56, ((_word_phonemes) & 4294967295), $arraydecay97);;
								}
							} while (0);
							$flags = -2147483648;;
						} else if (__label__ == 40) {
							$ix = 0;;
							$while_cond$59: while (1) {
								var $70 = $ix;
								var $71 = $word_addr;
								var $arrayidx101 = (($71 + $70) & 4294967295);
								var $72 = HEAP8[($arrayidx101)];
								var $73 = $ix;
								var $arrayidx102 = (($word_copy + $73) & 4294967295);
								HEAP8[($arrayidx102)] = $72;
								var $conv103 = (tempInt = (($72)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								$c2 = $conv103;
								var $cmp104 = ((($conv103)) | 0) != 32;
								if (!($cmp104)) {
									__label__ = 43;
									break $while_cond$59;
								}
								var $74 = $c2;
								var $cmp106 = ((($74)) | 0) != 0;
								if (!($cmp106)) {
									__label__ = 43;
									break $while_cond$59;
								}
								var $76 = $ix;
								var $cmp107 = ((($76)) | 0) < 160;
								var $77 = $ix;
								if ($cmp107) {
									__lastLabel__ = 44;;
								} else {
									__lastLabel__ = 44;
									__label__ = 46;
									break $while_cond$59;
								}
								var $inc108 = ((($77) + 1) & 4294967295);
								$ix = $inc108;
								__label__ = 41;
								continue $while_cond$59;
							}
							if (__label__ == 43) {
								var $75 = $ix;
								__lastLabel__ = 43;;
							}
							var $78 = __lastLabel__ == 43 ? $75 : ($77);
							$word_copy_len = $78;
							var $79 = HEAP32[((_translator) >> 2)];
							var $80 = $word_addr;
							var $81 = $next_pause_addr;
							var $82 = $wtab_addr;
							var $call109 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($79, $80, $81, $82);
							$flags = $call109;
							var $83 = $flags;
							var $and110 = ($83) & 65536;
							var $tobool111 = ((($and110)) | 0) != 0;
							if ($tobool111) {
								__label__ = 47;;
							} else {
								__label__ = 48;;
							}
							if (__label__ == 47) {
								var $84 = $word_addr;
								var $arraydecay113 = (($word_copy) & 4294967295);
								var $85 = $word_copy_len;
								var $src$, $dest$, $stop$, $stop4$, $fast$;
								$src$ = $arraydecay113;
								$dest$ = $84;
								$stop$ = $src$ + $85;
								if (($dest$ % 4) == ($src$ % 4) && $85 > 8) {
									while ($src$ % 4 !== 0 && $src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									}
									$src$ >>= 2;
									$dest$ >>= 2;
									$stop4$ = $stop$ >> 2;
									while ($src$ < $stop4$) {;;;
										HEAP32[$dest$++] = HEAP32[$src$++];
									}
									$src$ <<= 2;
									$dest$ <<= 2;
								}
								while ($src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								};
								var $86 = $flags;
								$retval = $86;
								__label__ = 171;
								break $if_then37$$if_end38$27;
							} else if (__label__ == 48) {
								var $87 = $flags;
								var $and115 = ($87) & 8388608;
								var $tobool116 = ((($and115)) | 0) != 0;
								if ($tobool116) {
									__label__ = 49;;
								} else {
									__label__ = 72;;
								}
								$land_lhs_true117$$if_end192$70: do {
									if (__label__ == 49) {
										var $88 = $wtab_addr;
										var $arrayidx118 = (($88 + 12) & 4294967295);
										var $flags119 = (($arrayidx118) & 4294967295);
										var $89 = HEAP32[(($flags119) >> 2)];
										var $and120 = ($89) & 8;
										var $tobool121 = ((($and120)) | 0) != 0;
										if ($tobool121) {
											__label__ = 72;
											break $land_lhs_true117$$if_end192$70;
										}
										$ok = 1;
										var $arrayidx123 = (($flags2) & 4294967295);
										HEAP32[(($arrayidx123) >> 2)] = 0;
										var $90 = $tr_addr;
										var $langopts = (($90) & 4294967295);
										var $param = (($langopts + 24) & 4294967295);
										var $arrayidx124 = (($param + 44) & 4294967295);
										var $91 = HEAP32[(($arrayidx124) >> 2)];
										$sylimit = $91;
										var $92 = $word_addr;
										$p2 = $92;
										var $93 = $p2;
										var $94 = HEAP8[($93)];
										var $conv12620 = (tempInt = (($94)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp12721 = ((($conv12620)) | 0) != 32;
										var $95 = $p2;
										var $incdec_ptr12922 = (($95 + 1) & 4294967295);
										if ($cmp12721) {
											__lastLabel__ = 50;
											__label__ = 51;;
										} else {
											__lastLabel__ = 50;
											__label__ = 52;;
										}
										$while_body128$$while_end130$73: do {
											if (__label__ == 51) {
												while (1) {
													var $incdec_ptr12923 = __lastLabel__ == 51 ? $incdec_ptr129 : ($incdec_ptr12922);
													$p2 = $incdec_ptr12923;
													var $96 = $p2;
													var $97 = HEAP8[($96)];
													var $conv126 = (tempInt = (($97)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													var $cmp127 = ((($conv126)) | 0) != 32;
													var $98 = $p2;
													var $incdec_ptr129 = (($98 + 1) & 4294967295);
													if ($cmp127) {
														__lastLabel__ = 51;
														__label__ = 51;
														continue;
													} else {
														__lastLabel__ = 51;
														__label__ = 52;
														break $while_body128$$while_end130$73;
													}
												}
											}
										} while (0);
										var $incdec_ptr129_lcssa = __lastLabel__ == 50 ? $incdec_ptr12922 : ($incdec_ptr129);
										var $call132 = __Z7utf8_inPiPKc($c_word2, $incdec_ptr129_lcssa);
										var $99 = HEAP32[(($c_word2) >> 2)];
										var $call133 = _iswalpha($99);
										var $tobool134 = ((($call133)) | 0) != 0;
										if ($tobool134) {
											__label__ = 54;;
										} else {
											__label__ = 53;;
										}
										if (__label__ == 54) {
											var $_pr = $ok;
											var $cmp137 = ((($_pr)) | 0) != 0;
											if (!($cmp137)) {
												__label__ = 72;
												break $land_lhs_true117$$if_end192$70;
											}
											var $arraydecay139 = (($ph_buf) & 4294967295);
											var $call140 = _strcpy($arraydecay139, ((_word_phonemes) & 4294967295));
											var $100 = HEAP32[((_translator) >> 2)];
											var $101 = $p2;
											var $add_ptr141 = (($101 + 1) & 4294967295);
											var $102 = $wtab_addr;
											var $add_ptr142 = (($102 + 12) & 4294967295);
											var $call143 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($100, $add_ptr141, 0, $add_ptr142);
											var $arrayidx144 = (($flags2) & 4294967295);
											HEAP32[(($arrayidx144) >> 2)] = $call143;
											var $arrayidx145 = (($flags2) & 4294967295);
											var $103 = HEAP32[(($arrayidx145) >> 2)];
											var $and146 = ($103) & 67108864;
											var $tobool147 = ((($and146)) | 0) != 0;
											if ($tobool147) {
												__label__ = 56;;
											} else {
												__label__ = 57;;
											}
											if (__label__ == 56) {
												$ok = 0;;
											}
											var $104 = $sylimit;
											var $and150 = ($104) & 256;
											var $tobool151 = ((($and150)) | 0) != 0;
											if ($tobool151) {
												__label__ = 58;;
											} else {
												__label__ = 60;;
											}
											$if_then152$$if_end158$83: do {
												if (__label__ == 58) {
													var $arrayidx153 = (($flags2) & 4294967295);
													var $105 = HEAP32[(($arrayidx153) >> 2)];
													var $and154 = ($105) & 1048576;
													var $cmp155 = ((($and154)) | 0) == 0;
													if (!($cmp155)) {
														__label__ = 60;
														break $if_then152$$if_end158$83;
													}
													$ok = 0;;
												}
											} while (0);
											var $106 = $sylimit;
											var $and159 = ($106) & 512;
											var $tobool160 = ((($and159)) | 0) != 0;
											if ($tobool160) {
												__label__ = 61;;
											} else {
												__label__ = 63;;
											}
											$land_lhs_true161$$if_end167$87: do {
												if (__label__ == 61) {
													var $107 = $wtab_addr;
													var $add_ptr162 = (($107 + 12) & 4294967295);
													var $flags163 = (($add_ptr162) & 4294967295);
													var $108 = HEAP32[(($flags163) >> 2)];
													var $and164 = ($108) & 16;
													var $tobool165 = ((($and164)) | 0) != 0;
													if (!($tobool165)) {
														__label__ = 63;
														break $land_lhs_true161$$if_end167$87;
													}
													$ok = 0;
													__label__ = 64;
													break $land_lhs_true161$$if_end167$87;
												}
											} while (0);
											$if_end173$$if_end167$90: do {
												if (__label__ == 63) {
													var $_pr8 = $ok;
													var $cmp168 = ((($_pr8)) | 0) == 0;
													if ($cmp168) {
														__label__ = 64;
														break $if_end173$$if_end167$90;
													} else {
														__label__ = 65;
														break $if_end173$$if_end167$90;
													}
												}
											} while (0);
											if (__label__ == 64) {
												var $arraydecay170 = (($ph_buf) & 4294967295);
												var $call171 = _strcpy(((_word_phonemes) & 4294967295), $arraydecay170);
												var $_pr10_pr = $ok;
												var $tobool174 = ((($_pr10_pr)) | 0) != 0;
												if (!($tobool174)) {
													__label__ = 72;
													break $land_lhs_true117$$if_end192$70;
												}
											}
											var $109 = $p2;
											HEAP8[($109)] = 45;
											var $110 = HEAP32[((_translator) >> 2)];
											var $111 = $word_addr;
											var $112 = $next_pause_addr;
											var $113 = $wtab_addr;
											var $call176 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($110, $111, $112, $113);
											$flags = $call176;
											var $114 = $sylimit;
											var $cmp177 = ((($114)) | 0) > 0;
											if ($cmp177) {
												__lastLabel__ = 65;
												__label__ = 66;;
											} else {
												__lastLabel__ = 65;
												__label__ = 69;;
											}
											if (__label__ == 66) {
												var $115 = $p;
												var $call179 = __ZL14CountSyllablesPh($115);
												var $116 = $sylimit;
												var $and180 = ($116) & 31;
												var $cmp181 = ((($call179)) | 0) > ((($and180)) | 0);
												if ($cmp181) {
													__label__ = 67;;
												} else {
													__label__ = 68;;
												}
												if (__label__ == 67) {
													var $117 = $p2;
													HEAP8[($117)] = 32;
													var $118 = HEAP32[((_translator) >> 2)];
													var $119 = $word_addr;
													var $120 = $next_pause_addr;
													var $121 = $wtab_addr;
													var $call183 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($118, $119, $120, $121);
													$flags = $call183;
													__label__ = 72;
													break $land_lhs_true117$$if_end192$70;
												} else if (__label__ == 68) {
													var $_pr14 = $flags;
													__lastLabel__ = 68;;
												}
											}
											var $122 = __lastLabel__ == 68 ? $_pr14 : ($call176);
											var $cmp185 = ((($122)) | 0) == 0;
											if ($cmp185) {
												__label__ = 70;;
											} else {
												__label__ = 71;;
											}
											if (__label__ == 70) {
												var $arrayidx187 = (($flags2) & 4294967295);
												var $123 = HEAP32[(($arrayidx187) >> 2)];
												$flags = $123;;
											}
											var $124 = $flags;
											var $or189 = ($124) | 128;
											$flags = $or189;
											HEAP32[((_dictionary_skipwords) >> 2)] = 1;;
										} else if (__label__ == 53) {
											$ok = 0;;
										}
									}
								} while (0);
								var $125 = $p;
								var $arrayidx193 = (($125) & 4294967295);
								var $126 = HEAPU8[($arrayidx193)];
								var $conv194 = ((($126)) & 255);
								var $cmp195 = ((($conv194)) | 0) == 21;
								if ($cmp195) {
									__label__ = 73;;
								} else {
									__label__ = 84;;
								}
								$if_then196$$if_end232$106: do {
									if (__label__ == 73) {
										var $127 = $word_addr;
										var $arraydecay197 = (($word_copy) & 4294967295);
										var $128 = $word_copy_len;
										var $src$, $dest$, $stop$, $stop4$, $fast$;
										$src$ = $arraydecay197;
										$dest$ = $127;
										$stop$ = $src$ + $128;
										if (($dest$ % 4) == ($src$ % 4) && $128 > 8) {
											while ($src$ % 4 !== 0 && $src$ < $stop$) {;
												HEAP8[$dest$++] = HEAP8[$src$++];
											}
											$src$ >>= 2;
											$dest$ >>= 2;
											$stop4$ = $stop$ >> 2;
											while ($src$ < $stop4$) {;;;
												HEAP32[$dest$++] = HEAP32[$src$++];
											}
											$src$ <<= 2;
											$dest$ <<= 2;
										}
										while ($src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										};
										var $129 = $p;
										var $arrayidx198 = (($129 + 1) & 4294967295);
										$new_language = $arrayidx198;
										var $130 = $new_language;
										var $arrayidx199 = (($130) & 4294967295);
										var $131 = HEAP8[($arrayidx199)];
										var $conv200 = (tempInt = (($131)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp201 = ((($conv200)) | 0) == 0;
										if ($cmp201) {
											__label__ = 74;;
										} else {
											__label__ = 75;;
										}
										if (__label__ == 74) {
											$new_language = ((__str52704) & 4294967295);;
										}
										var $arraydecay204 = (($old_dictionary_name) & 4294967295);
										var $call205 = _strcpy($arraydecay204, ((_dictionary_name) & 4294967295));
										var $132 = $new_language;
										var $call206 = __Z14SetTranslator2PKc($132);
										$switch_phonemes = $call206;
										var $cmp207 = ((($call206)) | 0) >= 0;
										if ($cmp207) {
											__label__ = 76;;
										} else {
											__label__ = 79;;
										}
										$if_then208$$if_then217$111: do {
											if (__label__ == 76) {
												var $133 = HEAP32[((_translator2) >> 2)];
												var $134 = $word_addr;
												var $135 = $next_pause_addr;
												var $136 = $wtab_addr;
												var $call209 = __Z13TranslateWordP10TranslatorPciP8WORD_TAB($133, $134, $135, $136);
												$flags = $call209;
												var $137 = $p;
												var $arrayidx210 = (($137) & 4294967295);
												var $138 = HEAPU8[($arrayidx210)];
												var $conv211 = ((($138)) & 255);
												var $cmp212 = ((($conv211)) | 0) == 21;
												if ($cmp212) {
													__label__ = 77;;
												} else {
													__label__ = 78;;
												}
												if (__label__ == 77) {
													$switch_phonemes = -1;
													__label__ = 79;
													break $if_then208$$if_then217$111;
												} else if (__label__ == 78) {
													var $_pr15 = $switch_phonemes;
													var $cmp216 = ((($_pr15)) | 0) < 0;
													if ($cmp216) {
														__label__ = 79;
														break $if_then208$$if_then217$111;
													} else {
														__label__ = 80;
														break $if_then208$$if_then217$111;
													}
												}
											}
										} while (0);
										if (__label__ == 79) {
											var $139 = $p;
											var $arrayidx218 = (($139) & 4294967295);
											HEAP8[($arrayidx218)] = 13;
											var $140 = $p;
											var $arrayidx219 = (($140 + 1) & 4294967295);
											HEAP8[($arrayidx219)] = 13;
											var $141 = $p;
											var $arrayidx220 = (($141 + 2) & 4294967295);
											HEAP8[($arrayidx220)] = 0;;
										}
										var $142 = $tr_addr;
										var $143 = $switch_phonemes;
										var $144 = $p;
										var $call222 = __Z24ChangeEquivalentPhonemesP10TranslatoriPc($142, $143, $144);
										var $tobool223 = ((($call222)) | 0) != 0;
										if ($tobool223) {
											__label__ = 81;;
										} else {
											__label__ = 82;;
										}
										if (__label__ == 81) {
											$switch_phonemes = -1;;
										} else if (__label__ == 82) {
											var $_pr17 = $switch_phonemes;
											var $cmp226 = ((($_pr17)) | 0) == -1;
											if (!($cmp226)) {
												__label__ = 84;
												break $if_then196$$if_end232$106;
											}
										}
										var $arraydecay228 = (($old_dictionary_name) & 4294967295);
										var $call229 = _strcpy(((_dictionary_name) & 4294967295), $arraydecay228);
										var $145 = HEAP32[((_voice) >> 2)];
										var $phoneme_tab_ix = (($145 + 40) & 4294967295);
										var $146 = HEAP32[(($phoneme_tab_ix) >> 2)];
										__Z18SelectPhonemeTablei($146);
										var $147 = HEAP32[((_voice) >> 2)];
										var $phoneme_tab_ix230 = (($147 + 40) & 4294967295);
										var $148 = HEAP32[(($phoneme_tab_ix230) >> 2)];
										$switch_phonemes = $148;;
									}
								} while (0);
								var $149 = $word_flags;
								var $and233 = ($149) & 128;
								var $tobool234 = ((($and233)) | 0) != 0;
								if ($tobool234) {
									__label__ = 95;;
								} else {
									__label__ = 85;;
								}
								$if_end261$$if_then235$124: do {
									if (__label__ == 85) {
										var $150 = $flags;
										var $and236 = ($150) & 268435456;
										var $tobool237 = ((($and236)) | 0) != 0;
										if ($tobool237) {
											__label__ = 86;;
										} else {
											__label__ = 88;;
										}
										$if_then238$$if_end242$126: do {
											if (__label__ == 86) {
												var $151 = $pre_pause_addr;
												var $cmp239 = ((($151)) | 0) < 1;
												if (!($cmp239)) {
													__label__ = 88;
													break $if_then238$$if_end242$126;
												}
												$pre_pause_addr = 1;;
											}
										} while (0);
										var $152 = $flags;
										var $and243 = ($152) & 256;
										var $tobool244 = ((($and243)) | 0) != 0;
										if (!($tobool244)) {
											__label__ = 95;
											break $if_end261$$if_then235$124;
										}
										var $153 = $word_flags;
										var $tobool246 = ((($153)) | 0) != 0;
										if ($tobool246) {
											__label__ = 95;
											break $if_end261$$if_then235$124;
										}
										var $154 = $wtab_addr;
										var $arrayidx248 = (($154 + -12) & 4294967295);
										var $flags249 = (($arrayidx248) & 4294967295);
										var $155 = HEAP32[(($flags249) >> 2)];
										var $and250 = ($155) & 512;
										var $tobool251 = ((($and250)) | 0) != 0;
										if ($tobool251) {
											__label__ = 95;
											break $if_end261$$if_then235$124;
										}
										var $156 = $tr_addr;
										var $prepause_timeout253 = (($156 + 8312) & 4294967295);
										var $157 = HEAP32[(($prepause_timeout253) >> 2)];
										var $cmp254 = ((($157)) | 0) == 0;
										if (!($cmp254)) {
											__label__ = 95;
											break $if_end261$$if_then235$124;
										}
										var $158 = $pre_pause_addr;
										var $cmp256 = ((($158)) | 0) < 4;
										if ($cmp256) {
											__label__ = 93;;
										} else {
											__label__ = 94;;
										}
										if (__label__ == 93) {
											$pre_pause_addr = 4;;
										}
										var $159 = $tr_addr;
										var $prepause_timeout259 = (($159 + 8312) & 4294967295);
										HEAP32[(($prepause_timeout259) >> 2)] = 3;;
									}
								} while (0);
								var $160 = HEAP32[((__ZL15option_emphasis) >> 2)];
								var $cmp262 = ((($160)) | 0) >= 3;
								if (!($cmp262)) {
									__label__ = 98;
									break $if_then75$$if_else100$47;
								}
								var $161 = $pre_pause_addr;
								var $cmp264 = ((($161)) | 0) < 1;
								if (!($cmp264)) {
									__label__ = 98;
									break $if_then75$$if_else100$47;
								}
								$pre_pause_addr = 1;;
							}
						}
					} while (0);
					var $162 = HEAP32[((_n_ph_list2) >> 2)];
					var $arrayidx268 = ((_ph_list2 + $162 * 8) & 4294967295);
					$plist2 = $arrayidx268;
					$stress = 0;
					$next_stress = 1;
					$srcix = 0;
					$max_stress = -1;
					$found_dict_flag = 0;
					var $163 = $flags;
					var $and269 = ($163) & -2147483648;
					var $tobool270 = ((($and269)) | 0) != 0;
					if ($tobool270) {
						__label__ = 99;;
					} else {
						__label__ = 101;;
					}
					$land_lhs_true271$$while_cond276_preheader$141: do {
						if (__label__ == 99) {
							var $164 = $flags;
							var $and272 = ($164) & 536870912;
							var $tobool273 = ((($and272)) | 0) != 0;
							if ($tobool273) {
								__label__ = 101;
								break $land_lhs_true271$$while_cond276_preheader$141;
							}
							$found_dict_flag = 16;;
						}
					} while (0);
					var $165 = $pre_pause_addr;
					var $cmp27729 = ((($165)) | 0) > 0;
					var $166 = HEAP32[((_n_ph_list2) >> 2)];
					var $cmp27930 = ((($166)) | 0) < 996;
					var $or_cond531 = ($cmp27729) & ($cmp27930);
					if ($or_cond531) {
						__lastLabel__ = 101;
						__label__ = 102;;
					} else {
						__lastLabel__ = 101;
						__label__ = 106;;
					}
					$while_body281$$while_end292$145: do {
						if (__label__ == 102) {
							while (1) {
								var $167 = __lastLabel__ == 101 ? $165 : ($173);
								var $cmp282 = ((($167)) | 0) > 1;
								var $168 = HEAP32[((_n_ph_list2) >> 2)];
								var $inc284 = ((($168) + 1) & 4294967295);
								HEAP32[((_n_ph_list2) >> 2)] = $inc284;
								var $arrayidx285 = ((_ph_list2 + $168 * 8) & 4294967295);
								if ($cmp282) {
									__label__ = 103;;
								} else {
									__label__ = 104;;
								}
								if (__label__ == 103) {
									__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx285, 9);
									var $169 = $pre_pause_addr;
									var $sub286 = ((($169) - 2) & 4294967295);
									$pre_pause_addr = $sub286;;
								} else if (__label__ == 104) {
									__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx285, 11);
									var $170 = $pre_pause_addr;
									var $dec290 = ((($170) - 1) & 4294967295);
									$pre_pause_addr = $dec290;;
								}
								var $171 = $tr_addr;
								var $end_stressed_vowel = (($171 + 8316) & 4294967295);
								HEAP32[(($end_stressed_vowel) >> 2)] = 0;
								var $172 = $tr_addr;
								var $prev_dict_flags = (($172 + 8320) & 4294967295);
								HEAP32[(($prev_dict_flags) >> 2)] = 0;
								var $173 = $pre_pause_addr;
								var $cmp277 = ((($173)) | 0) > 0;
								var $174 = HEAP32[((_n_ph_list2) >> 2)];
								var $cmp279 = ((($174)) | 0) < 996;
								var $or_cond5 = ($cmp277) & ($cmp279);
								if ($or_cond5) {
									__lastLabel__ = 105;
									__label__ = 102;
									continue;
								} else {
									__lastLabel__ = 105;
									__label__ = 106;
									break $while_body281$$while_end292$145;
								}
							}
						}
					} while (0);
					var $175 = HEAP32[((_option_capitals) >> 2)];
					var $cmp293 = ((($175)) | 0) == 1;
					if ($cmp293) {
						__label__ = 107;;
					} else {
						__label__ = 111;;
					}
					$land_lhs_true294$$if_end315$153: do {
						if (__label__ == 107) {
							var $176 = $word_flags;
							var $and295 = ($176) & 2;
							var $tobool296 = ((($and295)) | 0) != 0;
							if (!($tobool296)) {
								__label__ = 111;
								break $land_lhs_true294$$if_end315$153;
							}
							var $177 = HEAP32[((_n_ph_list2) >> 2)];
							var $inc298 = ((($177) + 1) & 4294967295);
							HEAP32[((_n_ph_list2) >> 2)] = $inc298;
							var $arrayidx299 = ((_ph_list2 + $177 * 8) & 4294967295);
							__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx299, 10);
							var $178 = HEAP32[((_n_ph_list2) >> 2)];
							var $inc300 = ((($178) + 1) & 4294967295);
							HEAP32[((_n_ph_list2) >> 2)] = $inc300;
							var $arrayidx301 = ((_ph_list2 + $178 * 8) & 4294967295);
							__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx301, 18);
							var $179 = $word_flags;
							var $and302 = ($179) & 1;
							var $tobool303 = ((($and302)) | 0) != 0;
							if (!($tobool303)) {
								__label__ = 111;
								break $land_lhs_true294$$if_end315$153;
							}
							var $180 = $word_addr;
							var $arrayidx305 = (($180 + 1) & 4294967295);
							var $181 = HEAP8[($arrayidx305)];
							var $conv306 = (tempInt = (($181)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $call307 = __Z7IsAlphaj($conv306);
							var $tobool308 = ((($call307)) | 0) != 0;
							if (!($tobool308)) {
								__label__ = 111;
								break $land_lhs_true294$$if_end315$153;
							}
							var $182 = HEAP32[((_n_ph_list2) >> 2)];
							var $inc310 = ((($182) + 1) & 4294967295);
							HEAP32[((_n_ph_list2) >> 2)] = $inc310;
							var $arrayidx311 = ((_ph_list2 + $182 * 8) & 4294967295);
							__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx311, 10);
							var $183 = HEAP32[((_n_ph_list2) >> 2)];
							var $inc312 = ((($183) + 1) & 4294967295);
							HEAP32[((_n_ph_list2) >> 2)] = $inc312;
							var $arrayidx313 = ((_ph_list2 + $183 * 8) & 4294967295);
							__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx313, 18);;
						}
					} while (0);
					var $184 = $switch_phonemes;
					var $cmp316 = ((($184)) | 0) >= 0;
					if ($cmp316) {
						__label__ = 112;;
					} else {
						__label__ = 113;;
					}
					if (__label__ == 112) {
						var $185 = HEAP32[((_n_ph_list2) >> 2)];
						var $arrayidx318 = ((_ph_list2 + $185 * 8) & 4294967295);
						__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx318, 21);
						var $186 = $switch_phonemes;
						var $conv319 = ((($186)) & 255);
						var $187 = HEAP32[((_n_ph_list2) >> 2)];
						var $inc320 = ((($187) + 1) & 4294967295);
						HEAP32[((_n_ph_list2) >> 2)] = $inc320;
						var $arrayidx321 = ((_ph_list2 + $187 * 8) & 4294967295);
						var $tone_ph = (($arrayidx321 + 3) & 4294967295);
						HEAP8[($tone_ph)] = $conv319;;
					}
					var $188 = $word_flags;
					var $and323 = ($188) & 128;
					var $tobool324 = ((($and323)) | 0) != 0;
					if ($tobool324) {
						__label__ = 114;;
					} else {
						__label__ = 116;;
					}
					$land_lhs_true325$$if_end331$162: do {
						if (__label__ == 114) {
							var $189 = $p;
							var $190 = HEAPU8[($189)];
							var $idxprom = ((($190)) & 255);
							var $arrayidx326 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
							var $191 = HEAP32[(($arrayidx326) >> 2)];
							var $type = (($191 + 11) & 4294967295);
							var $192 = HEAPU8[($type)];
							var $conv327 = ((($192)) & 255);
							var $cmp328 = ((($conv327)) | 0) == 0;
							if (!($cmp328)) {
								__label__ = 116;
								break $land_lhs_true325$$if_end331$162;
							}
							var $193 = $p;
							var $incdec_ptr330 = (($193 + 1) & 4294967295);
							$p = $incdec_ptr330;;
						}
					} while (0);
					var $194 = $p;
					var $arrayidx332 = (($194) & 4294967295);
					var $195 = HEAPU8[($arrayidx332)];
					var $conv333 = ((($195)) & 255);
					var $cmp334 = ((($conv333)) | 0) == 0;
					if ($cmp334) {
						__label__ = 117;;
					} else {
						__label__ = 119;;
					}
					$land_lhs_true335$$while_cond341_preheader$166: do {
						if (__label__ == 117) {
							var $_b2 = HEAPU8[(__ZL13embedded_flag_b)];
							var $196 = ($_b2) ? 2 : 0;
							var $tobool336 = ((($196)) | 0) != 0;
							if (!($tobool336)) {
								__label__ = 119;
								break $land_lhs_true335$$while_cond341_preheader$166;
							}
							var $197 = $p;
							var $arrayidx338 = (($197) & 4294967295);
							HEAP8[($arrayidx338)] = 23;
							var $198 = $p;
							var $arrayidx339 = (($198 + 1) & 4294967295);
							HEAP8[($arrayidx339)] = 0;;
						}
					} while (0);
					var $199 = $p;
					var $incdec_ptr34224 = (($199 + 1) & 4294967295);
					$p = $incdec_ptr34224;
					var $200 = HEAPU8[($199)];
					$ph_code = $200;
					var $conv34325 = ((($200)) & 255);
					var $cmp34426 = ((($conv34325)) | 0) != 0;
					var $201 = HEAP32[((_n_ph_list2) >> 2)];
					var $cmp34627 = ((($201)) | 0) < 996;
					var $or_cond628 = ($cmp34426) & ($cmp34627);
					if ($or_cond628) {
						__label__ = 120;;
					} else {
						__label__ = 157;;
					}
					$while_body348$$while_end511$170: do {
						if (__label__ == 120) {
							$while_body348$171: while (1) {
								var $202 = $ph_code;
								var $conv349 = ((($202)) & 255);
								var $cmp350 = ((($conv349)) | 0) == 255;
								if ($cmp350) {
									__label__ = 121;;
								} else {
									__label__ = 122;;
								}
								$while_cond341_backedge$$if_end352$173: do {
									if (__label__ == 122) {
										var $206 = $ph_code;
										var $idxprom353 = ((($206)) & 255);
										var $arrayidx354 = ((_phoneme_tab + $idxprom353 * 4) & 4294967295);
										var $207 = HEAP32[(($arrayidx354) >> 2)];
										$ph = $207;
										var $208 = $ph_code;
										var $conv355 = ((($208)) & 255);
										var $cmp356 = ((($conv355)) | 0) == 21;
										if ($cmp356) {
											__label__ = 123;;
										} else {
											__label__ = 124;;
										}
										if (__label__ == 123) {
											var $209 = $ph_code;
											var $210 = HEAP32[((_n_ph_list2) >> 2)];
											var $arrayidx358 = ((_ph_list2 + $210 * 8) & 4294967295);
											var $phcode = (($arrayidx358) & 4294967295);
											HEAP8[($phcode)] = $209;
											var $211 = HEAP32[((_n_ph_list2) >> 2)];
											var $arrayidx359 = ((_ph_list2 + $211 * 8) & 4294967295);
											var $sourceix360 = (($arrayidx359 + 6) & 4294967295);
											HEAP16[(($sourceix360) >> 1)] = 0;
											var $_b1 = HEAPU8[(__ZL13embedded_flag_b)];
											var $212 = ($_b1) ? 2 : 0;
											var $conv361 = ((($212)) & 65535);
											var $213 = HEAP32[((_n_ph_list2) >> 2)];
											var $arrayidx362 = ((_ph_list2 + $213 * 8) & 4294967295);
											var $synthflags = (($arrayidx362 + 4) & 4294967295);
											HEAP16[(($synthflags) >> 1)] = $conv361;
											var $214 = $p;
											var $incdec_ptr363 = (($214 + 1) & 4294967295);
											$p = $incdec_ptr363;
											var $215 = HEAP8[($214)];
											var $216 = HEAP32[((_n_ph_list2) >> 2)];
											var $inc364 = ((($216) + 1) & 4294967295);
											HEAP32[((_n_ph_list2) >> 2)] = $inc364;
											var $arrayidx365 = ((_ph_list2 + $216 * 8) & 4294967295);
											var $tone_ph366 = (($arrayidx365 + 3) & 4294967295);
											HEAP8[($tone_ph366)] = $215;;
										} else if (__label__ == 124) {
											var $217 = $ph;
											var $type368 = (($217 + 11) & 4294967295);
											var $218 = HEAPU8[($type368)];
											var $conv369 = ((($218)) & 255);
											var $cmp370 = ((($conv369)) | 0) == 1;
											if ($cmp370) {
												__label__ = 125;;
											} else {
												__label__ = 130;;
											}
											if (__label__ == 125) {
												var $219 = $ph;
												var $program = (($219 + 8) & 4294967295);
												var $220 = HEAPU16[(($program) >> 1)];
												var $conv372 = ((($220)) & 65535);
												var $cmp373 = ((($conv372)) | 0) == 0;
												if ($cmp373) {
													__label__ = 126;;
												} else {
													__label__ = 127;;
												}
												if (__label__ == 126) {
													var $221 = $ph;
													var $std_length = (($221 + 14) & 4294967295);
													var $222 = HEAPU8[($std_length)];
													var $conv375 = ((($222)) & 255);
													$next_stress = $conv375;;
												} else if (__label__ == 127) {
													var $223 = $prev_vowel;
													var $cmp377 = ((($223)) | 0) >= 0;
													var $224 = $ph_code;
													if ($cmp377) {
														__label__ = 128;;
													} else {
														__label__ = 129;;
													}
													if (__label__ == 128) {
														var $225 = $prev_vowel;
														var $arrayidx379 = ((_ph_list2 + $225 * 8) & 4294967295);
														var $tone_ph380 = (($arrayidx379 + 3) & 4294967295);
														HEAP8[($tone_ph380)] = $224;;
													} else if (__label__ == 129) {
														var $conv382 = ((($224)) & 255);
														$next_tone = $conv382;;
													}
												}
											} else if (__label__ == 130) {
												var $226 = $ph_code;
												var $conv386 = ((($226)) & 255);
												var $cmp387 = ((($conv386)) | 0) == 20;
												if ($cmp387) {
													__label__ = 131;;
												} else {
													__label__ = 132;;
												}
												if (__label__ == 131) {
													var $227 = HEAP32[((_n_ph_list2) >> 2)];
													var $sub389 = ((($227) - 1) & 4294967295);
													$prev_vowel = $sub389;
													var $228 = $prev_vowel;
													var $arrayidx390 = ((_ph_list2 + $228 * 8) & 4294967295);
													var $synthflags391 = (($arrayidx390 + 4) & 4294967295);
													var $229 = HEAPU16[(($synthflags391) >> 1)];
													var $conv392 = ((($229)) & 65535);
													var $or393 = ($conv392) | 4;
													var $conv394 = ((($or393)) & 65535);
													HEAP16[(($synthflags391) >> 1)] = $conv394;
													var $230 = $next_stress;
													var $conv395 = ((($230)) & 255);
													var $231 = $prev_vowel;
													var $arrayidx396 = ((_ph_list2 + $231 * 8) & 4294967295);
													var $stresslevel = (($arrayidx396 + 1) & 4294967295);
													HEAP8[($stresslevel)] = $conv395;;
												} else if (__label__ == 132) {
													var $232 = $ph_code;
													var $conv398 = ((($232)) & 255);
													var $cmp399 = ((($conv398)) | 0) == 12;
													if ($cmp399) {
														__label__ = 133;;
													} else {
														__label__ = 134;;
													}
													if (__label__ == 133) {
														var $233 = HEAP32[((_n_ph_list2) >> 2)];
														var $sub401 = ((($233) - 1) & 4294967295);
														var $arrayidx402 = ((_ph_list2 + $sub401 * 8) & 4294967295);
														var $synthflags403 = (($arrayidx402 + 4) & 4294967295);
														var $234 = HEAPU16[(($synthflags403) >> 1)];
														var $conv404 = ((($234)) & 65535);
														var $or405 = ($conv404) | 8;
														var $conv406 = ((($or405)) & 65535);
														HEAP16[(($synthflags403) >> 1)] = $conv406;;
													} else if (__label__ == 134) {
														var $235 = $ph_code;
														var $conv408 = ((($235)) & 255);
														var $cmp409 = ((($conv408)) | 0) == 15;
														if ($cmp409) {
															__label__ = 135;;
														} else {
															__label__ = 136;;
														}
														if (__label__ == 135) {
															var $236 = $source_ix;
															var $add411 = ((($236) + 1) & 4294967295);
															$srcix = $add411;;
														} else if (__label__ == 136) {
															var $237 = $ph_code;
															var $conv413 = ((($237)) & 255);
															var $cmp414 = ((($conv413)) | 0) == 22;
															if ($cmp414) {
																__label__ = 137;;
															} else {
																__label__ = 139;;
															}
															if (__label__ == 137) {
																var $238 = $tr_addr;
																var $langopts416 = (($238) & 4294967295);
																var $param417 = (($langopts416 + 24) & 4294967295);
																var $arrayidx418 = (($param417 + 56) & 4294967295);
																var $239 = HEAP32[(($arrayidx418) >> 2)];
																var $tobool419 = ((($239)) | 0) != 0;
																if (!($tobool419)) {
																	__label__ = 121;
																	break $while_cond341_backedge$$if_end352$173;
																}
																var $240 = $flags;
																var $or421 = ($240) | 524288;
																$flags = $or421;;
															} else if (__label__ == 139) {
																var $241 = $ph_code;
																var $242 = HEAP32[((_n_ph_list2) >> 2)];
																var $arrayidx424 = ((_ph_list2 + $242 * 8) & 4294967295);
																var $phcode425 = (($arrayidx424) & 4294967295);
																HEAP8[($phcode425)] = $241;
																var $243 = HEAP32[((_n_ph_list2) >> 2)];
																var $arrayidx426 = ((_ph_list2 + $243 * 8) & 4294967295);
																var $tone_ph427 = (($arrayidx426 + 3) & 4294967295);
																HEAP8[($tone_ph427)] = 0;
																var $_b = HEAPU8[(__ZL13embedded_flag_b)];
																var $244 = ($_b) ? 2 : 0;
																var $245 = $found_dict_flag;
																var $or428 = ($244) | ($245);
																var $conv429 = ((($or428)) & 65535);
																var $246 = HEAP32[((_n_ph_list2) >> 2)];
																var $arrayidx430 = ((_ph_list2 + $246 * 8) & 4294967295);
																var $synthflags431 = (($arrayidx430 + 4) & 4294967295);
																HEAP16[(($synthflags431) >> 1)] = $conv429;
																HEAP8[(__ZL13embedded_flag_b)] = 0;
																var $247 = $srcix;
																var $conv432 = ((($247)) & 65535);
																var $248 = HEAP32[((_n_ph_list2) >> 2)];
																var $arrayidx433 = ((_ph_list2 + $248 * 8) & 4294967295);
																var $sourceix434 = (($arrayidx433 + 6) & 4294967295);
																HEAP16[(($sourceix434) >> 1)] = $conv432;
																$srcix = 0;
																var $249 = $ph;
																var $type435 = (($249 + 11) & 4294967295);
																var $250 = HEAPU8[($type435)];
																var $conv436 = ((($250)) & 255);
																var $cmp437 = ((($conv436)) | 0) == 2;
																if ($cmp437) {
																	__label__ = 140;;
																} else {
																	__label__ = 149;;
																}
																$if_then438$$if_else466$200: do {
																	if (__label__ == 140) {
																		var $251 = $next_stress;
																		$stress = $251;
																		$next_stress = 1;
																		var $252 = $stress;
																		var $cmp439 = ((($252)) | 0) >= 4;
																		if ($cmp439) {
																			__label__ = 141;;
																		} else {
																			__label__ = 142;;
																		}
																		if (__label__ == 141) {
																			HEAP8[(__ZL18any_stressed_words_b)] = 1;;
																		}
																		var $253 = $prev_vowel;
																		var $cmp442 = ((($253)) | 0) >= 0;
																		if ($cmp442) {
																			__label__ = 143;;
																		} else {
																			__label__ = 145;;
																		}
																		$land_lhs_true443$$if_end451$205: do {
																			if (__label__ == 143) {
																				var $254 = HEAP32[((_n_ph_list2) >> 2)];
																				var $sub444 = ((($254) - 1) & 4294967295);
																				var $255 = $prev_vowel;
																				var $cmp445 = ((($sub444)) | 0) != ((($255)) | 0);
																				if (!($cmp445)) {
																					__label__ = 145;
																					break $land_lhs_true443$$if_end451$205;
																				}
																				var $256 = $stress;
																				var $conv447 = ((($256)) & 255);
																				var $257 = HEAP32[((_n_ph_list2) >> 2)];
																				var $sub448 = ((($257) - 1) & 4294967295);
																				var $arrayidx449 = ((_ph_list2 + $sub448 * 8) & 4294967295);
																				var $stresslevel450 = (($arrayidx449 + 1) & 4294967295);
																				HEAP8[($stresslevel450)] = $conv447;;
																			}
																		} while (0);
																		var $258 = HEAP32[((_n_ph_list2) >> 2)];
																		var $arrayidx452 = ((_ph_list2 + $258 * 8) & 4294967295);
																		var $synthflags453 = (($arrayidx452 + 4) & 4294967295);
																		var $259 = HEAPU16[(($synthflags453) >> 1)];
																		var $conv454 = ((($259)) & 65535);
																		var $or455 = ($conv454) | 4;
																		var $conv456 = ((($or455)) & 65535);
																		HEAP16[(($synthflags453) >> 1)] = $conv456;
																		var $260 = HEAP32[((_n_ph_list2) >> 2)];
																		$prev_vowel = $260;
																		var $261 = $stress;
																		var $262 = $max_stress;
																		var $cmp457 = ((($261)) | 0) > ((($262)) | 0);
																		if ($cmp457) {
																			__label__ = 146;;
																		} else {
																			__label__ = 147;;
																		}
																		if (__label__ == 146) {
																			var $263 = $stress;
																			$max_stress = $263;
																			var $264 = HEAP32[((_n_ph_list2) >> 2)];
																			$max_stress_ix = $264;;
																		}
																		var $265 = $next_tone;
																		var $cmp460 = ((($265)) | 0) != 0;
																		if (!($cmp460)) {
																			__label__ = 156;
																			break $if_then438$$if_else466$200;
																		}
																		var $266 = $next_tone;
																		var $conv462 = ((($266)) & 255);
																		var $267 = HEAP32[((_n_ph_list2) >> 2)];
																		var $arrayidx463 = ((_ph_list2 + $267 * 8) & 4294967295);
																		var $tone_ph464 = (($arrayidx463 + 3) & 4294967295);
																		HEAP8[($tone_ph464)] = $conv462;
																		$next_tone = 0;;
																	} else if (__label__ == 149) {
																		var $268 = $first_phoneme;
																		var $tobool467 = ((($268)) | 0) != 0;
																		if (!($tobool467)) {
																			__label__ = 156;
																			break $if_then438$$if_else466$200;
																		}
																		var $269 = $tr_addr;
																		var $langopts469 = (($269) & 4294967295);
																		var $param470 = (($langopts469 + 24) & 4294967295);
																		var $arrayidx471 = (($param470 + 56) & 4294967295);
																		var $270 = HEAP32[(($arrayidx471) >> 2)];
																		var $tobool472 = ((($270)) | 0) != 0;
																		if (!($tobool472)) {
																			__label__ = 156;
																			break $if_then438$$if_else466$200;
																		}
																		var $271 = $tr_addr;
																		var $prev_dict_flags474 = (($271 + 8320) & 4294967295);
																		var $272 = HEAP32[(($prev_dict_flags474) >> 2)];
																		var $and475 = ($272) & 524288;
																		var $tobool476 = ((($and475)) | 0) != 0;
																		if ($tobool476) {
																			__label__ = 152;;
																		} else {
																			__label__ = 153;;
																		}
																		$land_lhs_true477$$lor_lhs_false483$216: do {
																			if (__label__ == 152) {
																				var $273 = $tr_addr;
																				var $langopts478 = (($273) & 4294967295);
																				var $param479 = (($langopts478 + 24) & 4294967295);
																				var $arrayidx480 = (($param479 + 56) & 4294967295);
																				var $274 = HEAP32[(($arrayidx480) >> 2)];
																				var $and481 = ($274) & 1;
																				var $tobool482 = ((($and481)) | 0) != 0;
																				if ($tobool482) {
																					__label__ = 155;
																					break $land_lhs_true477$$lor_lhs_false483$216;
																				} else {
																					__label__ = 153;
																					break $land_lhs_true477$$lor_lhs_false483$216;
																				}
																			}
																		} while (0);
																		if (__label__ == 153) {
																			var $275 = $tr_addr;
																			var $end_stressed_vowel484 = (($275 + 8316) & 4294967295);
																			var $276 = HEAP32[(($end_stressed_vowel484) >> 2)];
																			var $tobool485 = ((($276)) | 0) != 0;
																			if (!($tobool485)) {
																				__label__ = 156;
																				break $if_then438$$if_else466$200;
																			}
																			var $277 = $tr_addr;
																			var $langopts487 = (($277) & 4294967295);
																			var $param488 = (($langopts487 + 24) & 4294967295);
																			var $arrayidx489 = (($param488 + 56) & 4294967295);
																			var $278 = HEAP32[(($arrayidx489) >> 2)];
																			var $and490 = ($278) & 2;
																			var $tobool491 = ((($and490)) | 0) != 0;
																			if (!($tobool491)) {
																				__label__ = 156;
																				break $if_then438$$if_else466$200;
																			}
																		}
																		var $279 = HEAP32[((_n_ph_list2) >> 2)];
																		var $arrayidx493 = ((_ph_list2 + $279 * 8) & 4294967295);
																		var $synthflags494 = (($arrayidx493 + 4) & 4294967295);
																		var $280 = HEAPU16[(($synthflags494) >> 1)];
																		var $conv495 = ((($280)) & 65535);
																		var $or496 = ($conv495) | 8;
																		var $conv497 = ((($or496)) & 65535);
																		HEAP16[(($synthflags494) >> 1)] = $conv497;;
																	}
																} while (0);
																var $281 = $stress;
																var $conv501 = ((($281)) & 255);
																var $282 = HEAP32[((_n_ph_list2) >> 2)];
																var $arrayidx502 = ((_ph_list2 + $282 * 8) & 4294967295);
																var $stresslevel503 = (($arrayidx502 + 1) & 4294967295);
																HEAP8[($stresslevel503)] = $conv501;
																var $283 = HEAP32[((_n_ph_list2) >> 2)];
																var $inc504 = ((($283) + 1) & 4294967295);
																HEAP32[((_n_ph_list2) >> 2)] = $inc504;
																$first_phoneme = 0;;
															}
														}
													}
												}
											}
										}
									}
								} while (0);
								var $203 = $p;
								var $incdec_ptr342 = (($203 + 1) & 4294967295);
								$p = $incdec_ptr342;
								var $204 = HEAPU8[($203)];
								$ph_code = $204;
								var $conv343 = ((($204)) & 255);
								var $cmp344 = ((($conv343)) | 0) != 0;
								var $205 = HEAP32[((_n_ph_list2) >> 2)];
								var $cmp346 = ((($205)) | 0) < 996;
								var $or_cond6 = ($cmp344) & ($cmp346);
								if ($or_cond6) {
									__label__ = 120;
									continue $while_body348$171;
								} else {
									__label__ = 157;
									break $while_body348$$while_end511$170;
								}
							}
						}
					} while (0);
					var $284 = $word_flags;
					var $and512 = ($284) & 131072;
					var $tobool513 = ((($and512)) | 0) != 0;
					if ($tobool513) {
						__label__ = 158;;
					} else {
						__label__ = 159;;
					}
					if (__label__ == 158) {
						var $285 = HEAP32[((_n_ph_list2) >> 2)];
						var $inc515 = ((($285) + 1) & 4294967295);
						HEAP32[((_n_ph_list2) >> 2)] = $inc515;
						var $arrayidx516 = ((_ph_list2 + $285 * 8) & 4294967295);
						__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx516, 27);;
					}
					var $286 = $word_flags;
					var $and518 = ($286) & 128;
					var $cmp519 = ((($and518)) | 0) == 0;
					if ($cmp519) {
						__label__ = 160;;
					} else {
						__label__ = 161;;
					}
					if (__label__ == 160) {
						var $287 = $source_ix;
						var $conv521 = ((($287)) & 65535);
						var $288 = $plist2;
						var $sourceix522 = (($288 + 6) & 4294967295);
						HEAP16[(($sourceix522) >> 1)] = $conv521;;
					}
					var $289 = $tr_addr;
					var $end_stressed_vowel524 = (($289 + 8316) & 4294967295);
					HEAP32[(($end_stressed_vowel524) >> 2)] = 0;
					var $290 = $stress;
					var $cmp525 = ((($290)) | 0) >= 4;
					if ($cmp525) {
						__label__ = 162;;
					} else {
						__label__ = 164;;
					}
					$land_lhs_true526$$if_end537$231: do {
						if (__label__ == 162) {
							var $291 = HEAP32[((_n_ph_list2) >> 2)];
							var $sub527 = ((($291) - 1) & 4294967295);
							var $arrayidx528 = ((_ph_list2 + $sub527 * 8) & 4294967295);
							var $phcode529 = (($arrayidx528) & 4294967295);
							var $292 = HEAPU8[($phcode529)];
							var $idxprom530 = ((($292)) & 255);
							var $arrayidx531 = ((_phoneme_tab + $idxprom530 * 4) & 4294967295);
							var $293 = HEAP32[(($arrayidx531) >> 2)];
							var $type532 = (($293 + 11) & 4294967295);
							var $294 = HEAPU8[($type532)];
							var $conv533 = ((($294)) & 255);
							var $cmp534 = ((($conv533)) | 0) == 2;
							if (!($cmp534)) {
								__label__ = 164;
								break $land_lhs_true526$$if_end537$231;
							}
							var $295 = $tr_addr;
							var $end_stressed_vowel536 = (($295 + 8316) & 4294967295);
							HEAP32[(($end_stressed_vowel536) >> 2)] = 1;;
						}
					} while (0);
					var $296 = $switch_phonemes;
					var $cmp538 = ((($296)) | 0) >= 0;
					if ($cmp538) {
						__label__ = 165;;
					} else {
						__label__ = 166;;
					}
					if (__label__ == 165) {
						var $arraydecay540 = (($old_dictionary_name) & 4294967295);
						var $call541 = _strcpy(((_dictionary_name) & 4294967295), $arraydecay540);
						var $297 = HEAP32[((_voice) >> 2)];
						var $phoneme_tab_ix542 = (($297 + 40) & 4294967295);
						var $298 = HEAP32[(($phoneme_tab_ix542) >> 2)];
						__Z18SelectPhonemeTablei($298);
						var $299 = HEAP32[((_n_ph_list2) >> 2)];
						var $arrayidx543 = ((_ph_list2 + $299 * 8) & 4294967295);
						__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx543, 21);
						var $300 = HEAP32[((_voice) >> 2)];
						var $phoneme_tab_ix544 = (($300 + 40) & 4294967295);
						var $301 = HEAP32[(($phoneme_tab_ix544) >> 2)];
						var $conv545 = ((($301)) & 255);
						var $302 = HEAP32[((_n_ph_list2) >> 2)];
						var $inc546 = ((($302) + 1) & 4294967295);
						HEAP32[((_n_ph_list2) >> 2)] = $inc546;
						var $arrayidx547 = ((_ph_list2 + $302 * 8) & 4294967295);
						var $tone_ph548 = (($arrayidx547 + 3) & 4294967295);
						HEAP8[($tone_ph548)] = $conv545;;
					}
					var $303 = $pitch_raised;
					var $cmp550 = ((($303)) | 0) > 0;
					if ($cmp550) {
						__label__ = 167;;
					} else {
						__label__ = 168;;
					}
					if (__label__ == 167) {
						var $304 = $pitch_raised;
						var $shl552 = ((($304) * 256) & 4294967295);
						var $add553 = ((($shl552) + 225) & 4294967295);
						var $305 = HEAP32[((__ZL11embedded_ix) >> 2)];
						var $inc554 = ((($305) + 1) & 4294967295);
						HEAP32[((__ZL11embedded_ix) >> 2)] = $inc554;
						var $arrayidx555 = ((_embedded_list + $305 * 4) & 4294967295);
						HEAP32[(($arrayidx555) >> 2)] = $add553;
						var $306 = HEAP32[((_n_ph_list2) >> 2)];
						var $arrayidx556 = ((_ph_list2 + $306 * 8) & 4294967295);
						__ZL9SetPlist2P13PHONEME_LIST2h($arrayidx556, 10);
						var $307 = HEAP32[((_n_ph_list2) >> 2)];
						var $inc557 = ((($307) + 1) & 4294967295);
						HEAP32[((_n_ph_list2) >> 2)] = $inc557;
						var $arrayidx558 = ((_ph_list2 + $307 * 8) & 4294967295);
						var $synthflags559 = (($arrayidx558 + 4) & 4294967295);
						HEAP16[(($synthflags559) >> 1)] = 2;;
					}
					var $308 = $flags;
					var $and561 = ($308) & 4096;
					var $tobool562 = ((($and561)) | 0) != 0;
					if ($tobool562) {
						__label__ = 169;;
					} else {
						__label__ = 170;;
					}
					if (__label__ == 169) {
						var $309 = $max_stress_ix;
						var $arrayidx564 = ((_ph_list2 + $309 * 8) & 4294967295);
						var $synthflags565 = (($arrayidx564 + 4) & 4294967295);
						var $310 = HEAPU16[(($synthflags565) >> 1)];
						var $conv566 = ((($310)) & 65535);
						var $or567 = ($conv566) | 64;
						var $conv568 = ((($or567)) & 65535);
						HEAP16[(($synthflags565) >> 1)] = $conv568;;
					}
					var $311 = $flags;
					var $312 = $tr_addr;
					var $prev_dict_flags570 = (($312 + 8320) & 4294967295);
					HEAP32[(($prev_dict_flags570) >> 2)] = $311;
					var $313 = $flags;
					$retval = $313;;
				}
			} while (0);
			var $314 = $retval;
			STACKTOP = __stackBase__;
			return $314;
			return null;
		}

		function __Z8InitTexti($control) {;
			var __label__;
			var $control_addr;
			$control_addr = $control;
			HEAP32[((_count_sentences) >> 2)] = 0;
			HEAP32[((_count_words) >> 2)] = 0;
			HEAP32[((_end_character_position) >> 2)] = 0;
			HEAP32[((_skip_sentences) >> 2)] = 0;
			HEAP8[(((_skip_marker) & 4294967295))] = 0;
			HEAP32[((_skip_words) >> 2)] = 0;
			HEAP32[((_skip_characters) >> 2)] = 0;
			HEAP32[((_skipping_text) >> 2)] = 0;
			HEAP32[((_new_sentence) >> 2)] = 1;
			HEAP32[((_option_sayas) >> 2)] = 0;
			HEAP32[((__ZL13option_sayas2) >> 2)] = 0;
			HEAP32[((__ZL15option_emphasis) >> 2)] = 0;
			HEAP8[(__ZL13word_emphasis_b)] = 0;
			HEAP8[(__ZL13embedded_flag_b)] = 0;
			__Z9InitText2v();
			var $0 = $control_addr;
			var $and = ($0) & 8192;
			var $cmp = ((($and)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				__Z12InitNamedatav();;
			};
			return;
			return;
		}

		function __ZL14CountSyllablesPh($phonemes) {;
			var __label__;
			var $phonemes_addr;
			var $count;
			var $phon;
			$phonemes_addr = $phonemes;
			$count = 0;
			var $0 = $phonemes_addr;
			var $incdec_ptr1 = (($0 + 1) & 4294967295);
			$phonemes_addr = $incdec_ptr1;
			var $1 = HEAPU8[($0)];
			var $conv2 = ((($1)) & 255);
			$phon = $conv2;
			var $cmp3 = ((($conv2)) | 0) != 0;
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $2 = $phon;
						var $arrayidx = ((_phoneme_tab + $2 * 4) & 4294967295);
						var $3 = HEAP32[(($arrayidx) >> 2)];
						var $type = (($3 + 11) & 4294967295);
						var $4 = HEAPU8[($type)];
						var $conv1 = ((($4)) & 255);
						var $cmp2 = ((($conv1)) | 0) == 2;
						if ($cmp2) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						if (__label__ == 2) {
							var $5 = $count;
							var $inc = ((($5) + 1) & 4294967295);
							$count = $inc;;
						}
						var $6 = $phonemes_addr;
						var $incdec_ptr = (($6 + 1) & 4294967295);
						$phonemes_addr = $incdec_ptr;
						var $7 = HEAPU8[($6)];
						var $conv = ((($7)) & 255);
						$phon = $conv;
						var $cmp = ((($conv)) | 0) != 0;
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 4;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			var $8 = $count;;
			return $8;
			return null;
		}

		function __ZL9SetPlist2P13PHONEME_LIST2h($p, $phcode) {;
			var __label__;
			var $p_addr;
			var $phcode_addr;
			$p_addr = $p;
			$phcode_addr = $phcode;
			var $0 = $phcode_addr;
			var $1 = $p_addr;
			var $phcode1 = (($1) & 4294967295);
			HEAP8[($phcode1)] = $0;
			var $2 = $p_addr;
			var $stresslevel = (($2 + 1) & 4294967295);
			HEAP8[($stresslevel)] = 0;
			var $3 = $p_addr;
			var $tone_ph = (($3 + 3) & 4294967295);
			HEAP8[($tone_ph)] = 0;
			var $_b = HEAPU8[(__ZL13embedded_flag_b)];
			var $4 = ($_b) ? 2 : 0;
			var $conv = ((($4)) & 65535);
			var $5 = $p_addr;
			var $synthflags = (($5 + 4) & 4294967295);
			HEAP16[(($synthflags) >> 1)] = $conv;
			var $6 = $p_addr;
			var $sourceix = (($6 + 6) & 4294967295);
			HEAP16[(($sourceix) >> 1)] = 0;
			HEAP8[(__ZL13embedded_flag_b)] = 0;;
			return;
			return;
		}

		function __ZL14SubstituteCharP10TranslatorjjPi($tr, $c, $next_in, $insert) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $tr_addr;
			var $c_addr;
			var $next_in_addr;
			var $insert_addr;
			var $ix;
			var $word;
			var $new_c;
			var $c2;
			var $c_lower;
			var $upper_case;
			var $replace_chars;
			$tr_addr = $tr;
			$c_addr = $c;
			$next_in_addr = $next_in;
			$insert_addr = $insert;
			$upper_case = 0;
			var $_b = HEAPU8[(__ZZL14SubstituteCharP10TranslatorjjPiE11ignore_next_b)];
			var $0 = ((($_b)) & 1);
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP8[(__ZZL14SubstituteCharP10TranslatorjjPiE11ignore_next_b)] = 0;
				$retval = 8;;
			} else if (__label__ == 2) {
				var $1 = $c_addr;
				var $cmp = ((($1)) | 0) == 0;
				if ($cmp) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 0;;
				} else if (__label__ == 4) {
					var $2 = $tr_addr;
					var $langopts = (($2) & 4294967295);
					var $replace_chars3 = (($langopts + 264) & 4294967295);
					var $3 = HEAP32[(($replace_chars3) >> 2)];
					$replace_chars = $3;
					var $cmp4 = ((($3)) | 0) == 0;
					var $4 = $c_addr;
					if ($cmp4) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$retval = $4;;
					} else if (__label__ == 6) {
						$c_lower = $4;
						var $call = _iswupper($4);
						var $tobool7 = ((($call)) | 0) != 0;
						if ($tobool7) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							var $5 = $c_addr;
							var $call9 = _towlower($5);
							$c_lower = $call9;
							$upper_case = 1;;
						}
						$new_c = 0;
						$ix = 0;;
						$for_cond$14: while (1) {
							var $6 = $ix;
							var $7 = $replace_chars;
							var $arrayidx = (($7 + 4 * $6) & 4294967295);
							var $8 = HEAP32[(($arrayidx) >> 2)];
							$word = $8;
							var $cmp11 = ((($8)) | 0) != 0;
							if (!($cmp11)) {
								__label__ = 16;
								break $for_cond$14;
							}
							var $9 = $c_lower;
							var $10 = $word;
							var $and = ($10) & 65535;
							var $cmp12 = ((($9)) | 0) == ((($and)) | 0);
							if ($cmp12) {
								__label__ = 11;;
							} else {
								__label__ = 15;;
							}
							if (__label__ == 11) {
								var $11 = $word;
								var $shr = ($11) >>> 16;
								var $cmp14 = ((($shr)) | 0) == 0;
								if ($cmp14) {
									__label__ = 12;
									break $for_cond$14;
								}
								var $15 = $word;
								var $shr18 = ($15) >>> 16;
								var $16 = $next_in_addr;
								var $call19 = _towlower($16);
								var $cmp20 = ((($shr18)) | 0) == ((($call19)) | 0);
								if ($cmp20) {
									__label__ = 14;
									break $for_cond$14;
								}
							}
							var $20 = $ix;
							var $add26 = ((($20) + 2) & 4294967295);
							$ix = $add26;
							__label__ = 9;
							continue $for_cond$14;
						}
						if (__label__ == 16) {
							var $_pr = $new_c;
							__lastLabel__ = 16;;
						} else if (__label__ == 12) {
							var $12 = $ix;
							var $add = ((($12) + 1) & 4294967295);
							var $13 = $replace_chars;
							var $arrayidx16 = (($13 + 4 * $add) & 4294967295);
							var $14 = HEAPU32[(($arrayidx16) >> 2)];
							$new_c = $14;
							__lastLabel__ = 12;;
						} else if (__label__ == 14) {
							var $17 = $ix;
							var $add22 = ((($17) + 1) & 4294967295);
							var $18 = $replace_chars;
							var $arrayidx23 = (($18 + 4 * $add22) & 4294967295);
							var $19 = HEAPU32[(($arrayidx23) >> 2)];
							$new_c = $19;
							HEAP8[(__ZZL14SubstituteCharP10TranslatorjjPiE11ignore_next_b)] = 1;
							__lastLabel__ = 14;;
						}
						var $21 = __lastLabel__ == 16 ? $_pr : (__lastLabel__ == 14 ? $19 : ($14));
						var $cmp27 = ((($21)) | 0) == 0;
						if ($cmp27) {
							__label__ = 18;;
						} else {
							__label__ = 19;;
						}
						if (__label__ == 18) {
							var $22 = $c_addr;
							$retval = $22;;
						} else if (__label__ == 19) {
							var $23 = $new_c;
							var $and30 = ($23) & -2097152;
							var $tobool31 = ((($and30)) | 0) != 0;
							if ($tobool31) {
								__label__ = 20;;
							} else {
								__label__ = 24;;
							}
							if (__label__ == 20) {
								var $24 = $new_c;
								var $shr33 = ($24) >>> 16;
								$c2 = $shr33;
								var $25 = $upper_case;
								var $tobool34 = ((($25)) | 0) != 0;
								if ($tobool34) {
									__label__ = 21;;
								} else {
									__label__ = 23;;
								}
								$land_lhs_true$$if_end39$31: do {
									if (__label__ == 21) {
										var $26 = $next_in_addr;
										var $call35 = _iswupper($26);
										var $tobool36 = ((($call35)) | 0) != 0;
										if (!($tobool36)) {
											__label__ = 23;
											break $land_lhs_true$$if_end39$31;
										}
										var $27 = $c2;
										var $call38 = _towupper($27);
										$c2 = $call38;;
									}
								} while (0);
								var $28 = $c2;
								var $29 = $insert_addr;
								HEAP32[(($29) >> 2)] = $28;
								var $30 = $new_c;
								var $and40 = ($30) & 65535;
								$new_c = $and40;;
							}
							var $31 = $upper_case;
							var $tobool42 = ((($31)) | 0) != 0;
							if ($tobool42) {
								__label__ = 25;;
							} else {
								__label__ = 26;;
							}
							if (__label__ == 25) {
								var $32 = $new_c;
								var $call44 = _towupper($32);
								$new_c = $call44;;
							}
							var $33 = $new_c;
							$retval = $33;;
						}
					}
				}
			}
			var $34 = $retval;;
			return $34;
			return null;
		}

		function _init_MBR($voice_path) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 48;
			_memset(__stackBase__, 0, 48);
			var __label__;
			var $retval;
			var $voice_path_addr;
			var $error;
			var $result;
			var $wavhdr = __stackBase__;
			$voice_path_addr = $voice_path;
			var $0 = $voice_path_addr;
			var $call = __ZL12start_mbrolaPKc($0);
			$error = $call;
			var $1 = $error;
			var $tobool = ((($1)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					$retval = -1;;
				} else if (__label__ == 2) {
					var $call1 = __ZL14send_to_mbrolaPKc(((__str580) & 4294967295));
					$result = $call1;
					var $2 = $result;
					var $cmp = ((($2)) | 0) != 2;
					if ($cmp) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						__ZL11stop_mbrolav();
						$retval = -1;;
					} else if (__label__ == 4) {
						var $arraydecay = (($wavhdr) & 4294967295);
						var $call4 = __ZL19receive_from_mbrolaPvj($arraydecay, 45);
						$result = $call4;
						var $3 = $result;
						var $cmp5 = ((($3)) | 0) != 44;
						if ($cmp5) {
							__label__ = 5;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 5) {
							var $4 = $result;
							var $cmp7 = ((($4)) | 0) >= 0;
							if ($cmp7) {
								__label__ = 6;;
							} else {
								__label__ = 7;;
							}
							if (__label__ == 6) {
								__ZL3errPKcz(((__str1581) & 4294967295), allocate(1, "i32", ALLOC_STACK));;
							}
							__ZL11stop_mbrolav();
							$retval = -1;;
						} else if (__label__ == 8) {
							var $arraydecay11 = (($wavhdr) & 4294967295);
							var $call12 = _memcmp($arraydecay11, ((__str2582) & 4294967295), 4);
							var $cmp13 = ((($call12)) | 0) != 0;
							if ($cmp13) {
								__label__ = 10;;
							} else {
								__label__ = 9;;
							}
							$if_then17$$lor_lhs_false$14: do {
								if (__label__ == 9) {
									var $arraydecay14 = (($wavhdr) & 4294967295);
									var $add_ptr = (($arraydecay14 + 8) & 4294967295);
									var $call15 = _memcmp($add_ptr, ((__str3583) & 4294967295), 8);
									var $cmp16 = ((($call15)) | 0) != 0;
									if ($cmp16) {
										__label__ = 10;
										break $if_then17$$lor_lhs_false$14;
									}
									var $arrayidx = (($wavhdr + 24) & 4294967295);
									var $5 = HEAPU8[($arrayidx)];
									var $conv = ((($5)) & 255);
									var $arrayidx19 = (($wavhdr + 25) & 4294967295);
									var $6 = HEAPU8[($arrayidx19)];
									var $conv20 = ((($6)) & 255);
									var $shl = ((($conv20) * 256) & 4294967295);
									var $arrayidx21 = (($wavhdr + 26) & 4294967295);
									var $7 = HEAPU8[($arrayidx21)];
									var $conv22 = ((($7)) & 255);
									var $shl23 = ((($conv22) * 65536) & 4294967295);
									var $arrayidx25 = (($wavhdr + 27) & 4294967295);
									var $8 = HEAPU8[($arrayidx25)];
									var $conv26 = ((($8)) & 255);
									var $shl27 = ((($conv26) * 16777216) & 4294967295);
									var $add = ((($shl) + ($conv)) & 4294967295);
									var $add24 = ((($add) + ($shl23)) & 4294967295);
									var $add28 = ((($add24) + ($shl27)) & 4294967295);
									HEAP32[((__ZL14mbr_samplerate) >> 2)] = $add28;
									var $9 = HEAP32[((__ZL14mbr_voice_path) >> 2)];
									var $10 = $voice_path_addr;
									var $cmp29 = ((($9)) | 0) != ((($10)) | 0);
									if ($cmp29) {
										__label__ = 12;;
									} else {
										__label__ = 13;;
									}
									if (__label__ == 12) {
										var $11 = HEAP32[((__ZL14mbr_voice_path) >> 2)];;
										var $12 = $voice_path_addr;
										var $call31 = _strdup($12);
										HEAP32[((__ZL14mbr_voice_path) >> 2)] = $call31;;
									}
									$retval = 0;
									__label__ = 14;
									break $if_then$$if_end$2;
								}
							} while (0);
							__ZL3errPKcz(((__str4584) & 4294967295), allocate(1, "i32", ALLOC_STACK));
							__ZL11stop_mbrolav();
							$retval = -1;;
						}
					}
				}
			} while (0);
			var $13 = $retval;
			STACKTOP = __stackBase__;
			return $13;
			return null;
		}

		function __ZL12start_mbrolaPKc($voice_path) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 44;
			_memset(__stackBase__, 0, 44);
			var __label__;
			var $retval;
			var $voice_path_addr;
			var $error;
			var $p_stdin = __stackBase__;
			var $p_stdout = __stackBase__ + 8;
			var $p_stderr = __stackBase__ + 16;
			var $charbuf = __stackBase__ + 24;
			var $i;
			$voice_path_addr = $voice_path;
			var $0 = HEAP32[((__ZL9mbr_state) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					__ZL3errPKcz(((__str22602) & 4294967295), allocate(1, "i32", ALLOC_STACK));
					$retval = -1;;
				} else if (__label__ == 2) {
					var $arraydecay = (($p_stdin) & 4294967295);
					var $arraydecay1 = (($p_stdout) & 4294967295);
					var $arraydecay2 = (($p_stderr) & 4294967295);
					var $call = __ZL12create_pipesPiS_S_($arraydecay, $arraydecay1, $arraydecay2);
					$error = $call;
					var $1 = $error;
					var $tobool = ((($1)) | 0) != 0;
					if ($tobool) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						$retval = -1;;
					} else if (__label__ == 4) {
						var $call5 = _fork();
						HEAP32[((__ZL7mbr_pid) >> 2)] = $call5;
						var $2 = HEAP32[((__ZL7mbr_pid) >> 2)];
						var $cmp6 = ((($2)) | 0) == -1;
						if ($cmp6) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							var $call8 = ___errno();
							var $3 = HEAP32[(($call8) >> 2)];
							$error = $3;
							var $arraydecay9 = (($p_stdin) & 4294967295);
							var $arraydecay10 = (($p_stdout) & 4294967295);
							var $arraydecay11 = (($p_stderr) & 4294967295);
							__ZL11close_pipesPiS_S_($arraydecay9, $arraydecay10, $arraydecay11);
							var $4 = $error;
							var $call12 = _strerror($4);
							__ZL3errPKcz(((__str23603) & 4294967295), allocate([$call12, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							$retval = -1;;
						} else if (__label__ == 6) {
							var $5 = HEAP32[((__ZL7mbr_pid) >> 2)];
							var $cmp14 = ((($5)) | 0) == 0;
							if ($cmp14) {
								__label__ = 7;;
							} else {
								__label__ = 14;;
							}
							if (__label__ == 7) {
								var $arrayidx = (($p_stdin) & 4294967295);
								var $6 = HEAP32[(($arrayidx) >> 2)];
								var $call16 = _dup2($6, 0);
								var $cmp17 = ((($call16)) | 0) == -1;
								if ($cmp17) {
									__label__ = 10;;
								} else {
									__label__ = 8;;
								}
								$if_then25$$lor_lhs_false$13: do {
									if (__label__ == 8) {
										var $arrayidx18 = (($p_stdout + 4) & 4294967295);
										var $7 = HEAP32[(($arrayidx18) >> 2)];
										var $call19 = _dup2($7, 1);
										var $cmp20 = ((($call19)) | 0) == -1;
										if ($cmp20) {
											__label__ = 10;
											break $if_then25$$lor_lhs_false$13;
										}
										var $arrayidx22 = (($p_stderr + 4) & 4294967295);
										var $8 = HEAP32[(($arrayidx22) >> 2)];
										var $call23 = _dup2($8, 2);
										var $cmp24 = ((($call23)) | 0) == -1;
										if ($cmp24) {
											__label__ = 10;
											break $if_then25$$lor_lhs_false$13;
										} else {
											__label__ = 11;
											break $if_then25$$lor_lhs_false$13;
										}
									}
								} while (0);
								if (__label__ == 10) {
									var $call26 = ___errno();
									var $9 = HEAP32[(($call26) >> 2)];
									var $call27 = _strerror($9);
									var $call28 = _snprintf(((__ZL12mbr_errorbuf) & 4294967295), 160, ((__str24604) & 4294967295), allocate([$call27, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
									var $arrayidx29 = (($p_stderr + 4) & 4294967295);
									var $10 = HEAP32[(($arrayidx29) >> 2)];
									var $call30 = _strlen(((__ZL12mbr_errorbuf) & 4294967295));
									var $call31 = _write($10, ((__ZL12mbr_errorbuf) & 4294967295), $call30);
									__exit(1);;
								}
								var $arrayidx33 = (($p_stderr + 4) & 4294967295);
								var $11 = HEAP32[(($arrayidx33) >> 2)];
								$i = $11;
								var $cmp341 = ((($11)) | 0) > 2;
								if ($cmp341) {
									__label__ = 12;;
								} else {
									__label__ = 13;;
								}
								$for_body$$for_end$19: do {
									if (__label__ == 12) {
										while (1) {
											var $12 = $i;
											var $call35 = _close($12);
											var $13 = $i;
											var $dec = ((($13) - 1) & 4294967295);
											$i = $dec;
											var $cmp34 = ((($dec)) | 0) > 2;
											if ($cmp34) {
												__label__ = 12;
												continue;
											} else {
												__label__ = 13;
												break $for_body$$for_end$19;
											}
										}
									}
								} while (0);
								var $call36 = _signal(1, 1);
								var $call37 = _signal(2, 1);
								var $call38 = _signal(3, 1);
								var $call39 = _signal(15, 1);
								var $arraydecay40 = (($charbuf) & 4294967295);
								var $14 = HEAPF32[((__ZL10mbr_volume) >> 2)];
								var $conv = ($14);
								var $call41 = _snprintf($arraydecay40, 20, ((__str25605) & 4294967295), allocate([$conv, 0, 0, 0, 0, 0, 0, 0], ["double", 0, 0, 0, 0, 0, 0, 0], ALLOC_STACK));
								var $arraydecay42 = (($charbuf) & 4294967295);
								var $15 = $voice_path_addr;
								var $call43 = _execlp(((__str33683) & 4294967295), ((__str33683) & 4294967295), allocate([((__str27607) & 4294967295), 0, 0, 0, ((__str28608) & 4294967295), 0, 0, 0, $arraydecay42, 0, 0, 0, $15, 0, 0, 0, ((__str56708) & 4294967295), 0, 0, 0, ((__str30610) & 4294967295), 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
								var $call44 = ___errno();
								var $16 = HEAP32[(($call44) >> 2)];
								var $call45 = _strerror($16);
								var $call46 = _snprintf(((__ZL12mbr_errorbuf) & 4294967295), 160, ((__str31611) & 4294967295), allocate([$call45, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								var $call47 = _strlen(((__ZL12mbr_errorbuf) & 4294967295));
								var $call48 = _write(2, ((__ZL12mbr_errorbuf) & 4294967295), $call47);
								__exit(1);;
							}
							var $arraydecay50 = (($charbuf) & 4294967295);
							var $17 = HEAP32[((__ZL7mbr_pid) >> 2)];
							var $call51 = _snprintf($arraydecay50, 20, ((__str32612) & 4294967295), allocate([$17, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $arraydecay52 = (($charbuf) & 4294967295);
							var $call53 = _open($arraydecay52, 0, allocate(1, "i32", ALLOC_STACK));
							HEAP32[((__ZL13mbr_proc_stat) >> 2)] = $call53;
							var $cmp54 = ((($call53)) | 0) == -1;
							if ($cmp54) {
								__label__ = 15;;
							} else {
								__label__ = 16;;
							}
							if (__label__ == 15) {
								var $call56 = ___errno();
								var $18 = HEAP32[(($call56) >> 2)];
								$error = $18;
								var $arraydecay57 = (($p_stdin) & 4294967295);
								var $arraydecay58 = (($p_stdout) & 4294967295);
								var $arraydecay59 = (($p_stderr) & 4294967295);
								__ZL11close_pipesPiS_S_($arraydecay57, $arraydecay58, $arraydecay59);
								var $19 = HEAP32[((__ZL7mbr_pid) >> 2)];
								var $call60 = _waitpid($19, 0, 0);
								HEAP32[((__ZL7mbr_pid) >> 2)] = 0;
								var $20 = $error;
								var $call61 = _strerror($20);
								__ZL3errPKcz(((__str33613) & 4294967295), allocate([$call61, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								$retval = -1;;
							} else if (__label__ == 16) {
								var $call63 = _signal(13, 1);
								var $arrayidx64 = (($p_stdin + 4) & 4294967295);
								var $21 = HEAP32[(($arrayidx64) >> 2)];
								var $call65 = _fcntl($21, 4, allocate([16384, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $cmp66 = ((($call65)) | 0) == -1;
								if ($cmp66) {
									__label__ = 19;;
								} else {
									__label__ = 17;;
								}
								$if_then75$$lor_lhs_false67$27: do {
									if (__label__ == 17) {
										var $arrayidx68 = (($p_stdout) & 4294967295);
										var $22 = HEAP32[(($arrayidx68) >> 2)];
										var $call69 = _fcntl($22, 4, allocate([16384, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
										var $cmp70 = ((($call69)) | 0) == -1;
										if ($cmp70) {
											__label__ = 19;
											break $if_then75$$lor_lhs_false67$27;
										}
										var $arrayidx72 = (($p_stderr) & 4294967295);
										var $23 = HEAP32[(($arrayidx72) >> 2)];
										var $call73 = _fcntl($23, 4, allocate([16384, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
										var $cmp74 = ((($call73)) | 0) == -1;
										if ($cmp74) {
											__label__ = 19;
											break $if_then75$$lor_lhs_false67$27;
										}
										var $arrayidx83 = (($p_stdin + 4) & 4294967295);
										var $27 = HEAP32[(($arrayidx83) >> 2)];
										HEAP32[((__ZL10mbr_cmd_fd) >> 2)] = $27;
										var $arrayidx84 = (($p_stdout) & 4294967295);
										var $28 = HEAP32[(($arrayidx84) >> 2)];
										HEAP32[((__ZL12mbr_audio_fd) >> 2)] = $28;
										var $arrayidx85 = (($p_stderr) & 4294967295);
										var $29 = HEAP32[(($arrayidx85) >> 2)];
										HEAP32[((__ZL12mbr_error_fd) >> 2)] = $29;
										var $arrayidx86 = (($p_stdin) & 4294967295);
										var $30 = HEAP32[(($arrayidx86) >> 2)];
										var $call87 = _close($30);
										var $arrayidx88 = (($p_stdout + 4) & 4294967295);
										var $31 = HEAP32[(($arrayidx88) >> 2)];
										var $call89 = _close($31);
										var $arrayidx90 = (($p_stderr + 4) & 4294967295);
										var $32 = HEAP32[(($arrayidx90) >> 2)];
										var $call91 = _close($32);
										HEAP32[((__ZL9mbr_state) >> 2)] = 1;
										$retval = 0;
										__label__ = 21;
										break $if_then$$if_end$2;
									}
								} while (0);
								var $call76 = ___errno();
								var $24 = HEAP32[(($call76) >> 2)];
								$error = $24;
								var $arraydecay77 = (($p_stdin) & 4294967295);
								var $arraydecay78 = (($p_stdout) & 4294967295);
								var $arraydecay79 = (($p_stderr) & 4294967295);
								__ZL11close_pipesPiS_S_($arraydecay77, $arraydecay78, $arraydecay79);
								var $25 = HEAP32[((__ZL7mbr_pid) >> 2)];
								var $call80 = _waitpid($25, 0, 0);
								HEAP32[((__ZL7mbr_pid) >> 2)] = 0;
								var $26 = $error;
								var $call81 = _strerror($26);
								__ZL3errPKcz(((__str34614) & 4294967295), allocate([$call81, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								$retval = -1;;
							}
						}
					}
				}
			} while (0);
			var $33 = $retval;
			STACKTOP = __stackBase__;
			return $33;
			return null;
		}

		function __ZL14send_to_mbrolaPKc($cmd) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $cmd_addr;
			var $result;
			var $len;
			var $error;
			var $data;
			$cmd_addr = $cmd;
			var $0 = HEAP32[((__ZL7mbr_pid) >> 2)];
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$if_end$$if_then$2: do {
				if (__label__ == 2) {
					var $1 = $cmd_addr;
					var $call = _strlen($1);
					$len = $call;
					var $2 = HEAP32[((__ZL10mbr_cmd_fd) >> 2)];
					var $3 = $cmd_addr;
					var $4 = $len;
					var $call1 = _write($2, $3, $4);
					$result = $call1;
					var $5 = $result;
					var $cmp = ((($5)) | 0) == -1;
					if ($cmp) {
						__label__ = 3;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 3) {
						var $call3 = ___errno();
						var $6 = HEAP32[(($call3) >> 2)];
						$error = $6;
						var $7 = $error;
						var $cmp4 = ((($7)) | 0) == 32;
						if ($cmp4) {
							__lastLabel__ = 3;
							__label__ = 4;;
						} else {
							__lastLabel__ = 3;
							__label__ = 7;;
						}
						if (__label__ == 4) {
							var $call5 = __ZL17mbrola_has_errorsv();
							var $tobool6 = ((($call5)) | 0) != 0;
							if ($tobool6) {
								__label__ = 5;;
							} else {
								__label__ = 6;;
							}
							if (__label__ == 5) {
								$retval = -1;
								__label__ = 17;
								break $if_end$$if_then$2;
							} else if (__label__ == 6) {
								var $_pr = $error;
								__lastLabel__ = 6;;
							}
						}
						var $8 = __lastLabel__ == 6 ? $_pr : ($7);
						var $cmp8 = ((($8)) | 0) == 11;
						if ($cmp8) {
							__label__ = 8;;
						} else {
							__label__ = 9;;
						}
						if (__label__ == 8) {
							$result = 0;;
						} else if (__label__ == 9) {
							var $9 = $error;
							var $call11 = _strerror($9);
							__ZL3errPKcz(((__str20600) & 4294967295), allocate([$call11, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							$retval = -1;
							__label__ = 17;
							break $if_end$$if_then$2;
						}
					}
					var $10 = $result;
					var $11 = $len;
					var $cmp15 = ((($10)) | 0) != ((($11)) | 0);
					if ($cmp15) {
						__label__ = 11;;
					} else {
						__label__ = 16;;
					}
					$if_then16$$if_end28$16: do {
						if (__label__ == 11) {
							var $12 = $len;
							var $13 = $result;
							var $_neg = (((-($13))) & 4294967295);
							var $add = ((($12) + 16) & 4294967295);
							var $sub = ((($add) + ($_neg)) & 4294967295);
							var $call17 = _malloc($sub);
							var $14 = $call17;
							$data = $14;
							var $15 = $data;
							var $tobool18 = ((($15)) | 0) != 0;
							if (!($tobool18)) {
								__label__ = 16;
								break $if_then16$$if_end28$16;
							}
							var $16 = $data;
							var $next = (($16) & 4294967295);
							HEAP32[(($next) >> 2)] = 0;
							var $17 = $data;
							var $done = (($17 + 4) & 4294967295);
							HEAP32[(($done) >> 2)] = 0;
							var $18 = $len;
							var $19 = $result;
							var $sub20 = ((($18) - ($19)) & 4294967295);
							var $20 = $data;
							var $size = (($20 + 8) & 4294967295);
							HEAP32[(($size) >> 2)] = $sub20;
							var $21 = $data;
							var $buffer = (($21 + 12) & 4294967295);
							var $arraydecay = (($buffer) & 4294967295);
							var $22 = $cmd_addr;
							var $23 = $result;
							var $add_ptr = (($22 + $23) & 4294967295);
							var $24 = $len;
							var $25 = $result;
							var $sub21 = ((($24) - ($25)) & 4294967295);
							var $src$, $dest$, $stop$, $stop4$, $fast$;
							$src$ = $add_ptr;
							$dest$ = $arraydecay;
							$stop$ = $src$ + $sub21;
							if (($dest$ % 4) == ($src$ % 4) && $sub21 > 8) {
								while ($src$ % 4 !== 0 && $src$ < $stop$) {;
									HEAP8[$dest$++] = HEAP8[$src$++];
								}
								$src$ >>= 2;
								$dest$ >>= 2;
								$stop4$ = $stop$ >> 2;
								while ($src$ < $stop4$) {;;;
									HEAP32[$dest$++] = HEAP32[$src$++];
								}
								$src$ <<= 2;
								$dest$ <<= 2;
							}
							while ($src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							};
							var $26 = $len;
							$result = $26;
							var $27 = HEAP32[((__ZL21mbr_pending_data_head) >> 2)];
							var $tobool22 = ((($27)) | 0) != 0;
							var $28 = $data;
							if ($tobool22) {
								__label__ = 14;;
							} else {
								__label__ = 13;;
							}
							if (__label__ == 14) {
								var $29 = HEAP32[((__ZL21mbr_pending_data_tail) >> 2)];
								var $next25 = (($29) & 4294967295);
								HEAP32[(($next25) >> 2)] = $28;;
							} else if (__label__ == 13) {
								HEAP32[((__ZL21mbr_pending_data_head) >> 2)] = $28;;
							}
							var $30 = $data;
							HEAP32[((__ZL21mbr_pending_data_tail) >> 2)] = $30;;
						}
					} while (0);
					var $31 = $result;
					$retval = $31;;
				} else if (__label__ == 1) {
					$retval = -1;;
				}
			} while (0);
			var $32 = $retval;;
			return $32;
			return null;
		}

		function __ZL11stop_mbrolav() {;
			var __label__;
			var $0 = HEAP32[((__ZL9mbr_state) >> 2)];
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 4;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__ZL13mbr_proc_stat) >> 2)];
				var $call = _close($1);
				var $2 = HEAP32[((__ZL10mbr_cmd_fd) >> 2)];
				var $call1 = _close($2);
				var $3 = HEAP32[((__ZL12mbr_audio_fd) >> 2)];
				var $call2 = _close($3);
				var $4 = HEAP32[((__ZL12mbr_error_fd) >> 2)];
				var $call3 = _close($4);
				var $5 = HEAP32[((__ZL7mbr_pid) >> 2)];
				var $tobool = ((($5)) | 0) != 0;
				if ($tobool) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $6 = HEAP32[((__ZL7mbr_pid) >> 2)];
					var $call5 = _kill($6, 15);
					var $7 = HEAP32[((__ZL7mbr_pid) >> 2)];
					var $call6 = _waitpid($7, 0, 0);
					HEAP32[((__ZL7mbr_pid) >> 2)] = 0;;
				}
				HEAP32[((__ZL9mbr_state) >> 2)] = 0;;
			};
			return;
			return;
		}

		function __ZL19receive_from_mbrolaPvj($buffer, $bufsize) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 24;
			_memset(__stackBase__, 0, 24);
			var __label__;
			var $retval;
			var $buffer_addr;
			var $bufsize_addr;
			var $result;
			var $wait;
			var $cursize;
			var $pollfd = __stackBase__;
			var $nfds;
			var $idle;
			var $head;
			var $data;
			var $left;
			var $error;
			var $curpos;
			var $space;
			var $obtained;
			$buffer_addr = $buffer;
			$bufsize_addr = $bufsize;
			$wait = 1;
			$cursize = 0;
			var $0 = HEAP32[((__ZL7mbr_pid) >> 2)];
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$do_body_preheader$$if_then$2: do {
				if (__label__ == 1) {
					var $arrayidx = (($pollfd) & 4294967295);
					var $fd = (($arrayidx) & 4294967295);
					var $arrayidx1 = (($pollfd) & 4294967295);
					var $events = (($arrayidx1 + 4) & 4294967295);
					var $arrayidx2 = (($pollfd + 8) & 4294967295);
					var $fd3 = (($arrayidx2) & 4294967295);
					var $arrayidx4 = (($pollfd + 8) & 4294967295);
					var $events5 = (($arrayidx4 + 4) & 4294967295);
					var $arrayidx9 = (($pollfd + 16) & 4294967295);
					var $fd10 = (($arrayidx9) & 4294967295);
					var $arrayidx11 = (($pollfd + 16) & 4294967295);
					var $events12 = (($arrayidx11 + 4) & 4294967295);
					var $arraydecay = (($pollfd) & 4294967295);
					var $arrayidx29 = (($pollfd + 8) & 4294967295);
					var $revents = (($arrayidx29 + 6) & 4294967295);
					var $arrayidx37 = (($pollfd + 16) & 4294967295);
					var $revents38 = (($arrayidx37 + 6) & 4294967295);
					var $arrayidx66 = (($pollfd) & 4294967295);
					var $revents67 = (($arrayidx66 + 6) & 4294967295);;
					$do_body$4: while (1) {
						$nfds = 0;
						var $1 = HEAP32[((__ZL12mbr_audio_fd) >> 2)];
						HEAP32[(($fd) >> 2)] = $1;
						HEAP16[(($events) >> 1)] = 1;
						var $2 = $nfds;
						var $inc = ((($2) + 1) & 4294967295);
						$nfds = $inc;
						var $3 = HEAP32[((__ZL12mbr_error_fd) >> 2)];
						HEAP32[(($fd3) >> 2)] = $3;
						HEAP16[(($events5) >> 1)] = 1;
						var $4 = $nfds;
						var $inc6 = ((($4) + 1) & 4294967295);
						$nfds = $inc6;
						var $5 = HEAP32[((__ZL21mbr_pending_data_head) >> 2)];
						var $tobool7 = ((($5)) | 0) != 0;
						if ($tobool7) {
							__label__ = 4;;
						} else {
							__label__ = 5;;
						}
						if (__label__ == 4) {
							var $6 = HEAP32[((__ZL10mbr_cmd_fd) >> 2)];
							HEAP32[(($fd10) >> 2)] = $6;
							HEAP16[(($events12) >> 1)] = 2;
							var $7 = $nfds;
							var $inc13 = ((($7) + 1) & 4294967295);
							$nfds = $inc13;;
						}
						var $call = __ZL14mbrola_is_idlev();
						$idle = $call;
						var $8 = $nfds;
						var $9 = $idle;
						var $tobool15 = ((($9)) | 0) != 0;
						var $10 = $wait;
						var $cond = ($tobool15) ? 0 : ($10);
						var $call16 = _poll($arraydecay, $8, $cond);
						$result = $call16;
						var $cmp = ((($call16)) | 0) == -1;
						if ($cmp) {
							__label__ = 6;
							break $do_body$4;
						}
						var $12 = $result;
						var $cmp21 = ((($12)) | 0) == 0;
						if ($cmp21) {
							__label__ = 8;;
						} else {
							__label__ = 13;;
						}
						$if_then22$$if_end28$10: do {
							if (__label__ == 8) {
								var $13 = $idle;
								var $tobool23 = ((($13)) | 0) != 0;
								if ($tobool23) {
									__label__ = 9;
									break $do_body$4;
								}
								var $14 = $wait;
								var $cmp25 = ((($14)) | 0) >= 3750;
								if ($cmp25) {
									__label__ = 11;
									break $do_body$4;
								}
								var $15 = $wait;
								var $mul = ((($15) * 4) & 4294967295);
								$wait = $mul;;
							} else if (__label__ == 13) {
								$wait = 1;
								var $16 = HEAP16[(($revents) >> 1)];
								var $tobool30 = (tempInt = (($16)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
								if ($tobool30) {
									__label__ = 14;;
								} else {
									__label__ = 16;;
								}
								if (__label__ == 14) {
									var $call31 = __ZL17mbrola_has_errorsv();
									var $tobool32 = ((($call31)) | 0) != 0;
									if ($tobool32) {
										__label__ = 15;
										break $do_body$4;
									}
								}
								var $17 = HEAP32[((__ZL21mbr_pending_data_head) >> 2)];
								var $tobool35 = ((($17)) | 0) != 0;
								if ($tobool35) {
									__label__ = 17;;
								} else {
									__label__ = 27;;
								}
								$land_lhs_true36$$if_end65$18: do {
									if (__label__ == 17) {
										var $18 = HEAP16[(($revents38) >> 1)];
										var $tobool39 = (tempInt = (($18)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
										if (!($tobool39)) {
											__label__ = 27;
											break $land_lhs_true36$$if_end65$18;
										}
										var $19 = HEAP32[((__ZL21mbr_pending_data_head) >> 2)];
										$head = $19;
										var $20 = $head;
										var $buffer41 = (($20 + 12) & 4294967295);
										var $arraydecay42 = (($buffer41) & 4294967295);
										var $21 = $head;
										var $done = (($21 + 4) & 4294967295);
										var $22 = HEAP32[(($done) >> 2)];
										var $add_ptr = (($arraydecay42 + $22) & 4294967295);
										$data = $add_ptr;
										var $23 = $head;
										var $size = (($23 + 8) & 4294967295);
										var $24 = HEAP32[(($size) >> 2)];
										var $25 = $head;
										var $done43 = (($25 + 4) & 4294967295);
										var $26 = HEAP32[(($done43) >> 2)];
										var $sub = ((($24) - ($26)) & 4294967295);
										$left = $sub;
										var $27 = HEAP32[((__ZL10mbr_cmd_fd) >> 2)];
										var $28 = $data;
										var $29 = $left;
										var $call44 = _write($27, $28, $29);
										$result = $call44;
										var $30 = $result;
										var $cmp45 = ((($30)) | 0) == -1;
										if ($cmp45) {
											__label__ = 19;
											break $do_body$4;
										}
										var $34 = $result;
										var $35 = $left;
										var $cmp56 = ((($34)) | 0) != ((($35)) | 0);
										if ($cmp56) {
											__label__ = 24;;
										} else {
											__label__ = 25;;
										}
										if (__label__ == 24) {
											var $36 = $result;
											var $37 = $head;
											var $done58 = (($37 + 4) & 4294967295);
											var $38 = HEAP32[(($done58) >> 2)];
											var $add = ((($38) + ($36)) & 4294967295);
											HEAP32[(($done58) >> 2)] = $add;;
										} else if (__label__ == 25) {
											var $39 = $head;
											var $next = (($39) & 4294967295);
											var $40 = HEAP32[(($next) >> 2)];
											HEAP32[((__ZL21mbr_pending_data_head) >> 2)] = $40;
											var $41 = $head;
											var $42 = $41;;
											var $43 = HEAP32[((__ZL21mbr_pending_data_head) >> 2)];
											var $tobool60 = ((($43)) | 0) != 0;
											if ($tobool60) {
												__label__ = 31;
												break $if_then22$$if_end28$10;
											}
											HEAP32[((__ZL21mbr_pending_data_tail) >> 2)] = 0;;
										}
									}
								} while (0);
								var $44 = HEAP16[(($revents67) >> 1)];
								var $tobool68 = (tempInt = (($44)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
								if (!($tobool68)) {
									__label__ = 31;
									break $if_then22$$if_end28$10;
								}
								var $45 = $buffer_addr;
								var $46 = $cursize;
								var $add_ptr70 = (($45 + $46) & 4294967295);
								$curpos = $add_ptr70;
								var $47 = $bufsize_addr;
								var $48 = $cursize;
								var $sub71 = ((($47) - ($48)) & 4294967295);
								$space = $sub71;
								var $49 = HEAP32[((__ZL12mbr_audio_fd) >> 2)];
								var $50 = $curpos;
								var $51 = $space;
								var $call72 = _read($49, $50, $51);
								$obtained = $call72;
								var $52 = $obtained;
								var $cmp73 = ((($52)) | 0) == -1;
								if ($cmp73) {
									__label__ = 29;
									break $do_body$4;
								}
								var $54 = $obtained;
								var $55 = $cursize;
								var $add78 = ((($55) + ($54)) & 4294967295);
								$cursize = $add78;
								HEAP32[((__ZL9mbr_state) >> 2)] = 3;;
							}
						} while (0);
						var $56 = $cursize;
						var $57 = $bufsize_addr;
						var $cmp80 = ((($56)) >>> 0) < ((($57)) >>> 0);
						if ($cmp80) {
							__label__ = 3;
							continue $do_body$4;
						} else {
							__label__ = 32;
							break $do_body$4;
						}
					}
					if (__label__ == 6) {
						var $call18 = ___errno();
						var $11 = HEAP32[(($call18) >> 2)];
						var $call19 = _strerror($11);
						__ZL3errPKcz(((__str18598) & 4294967295), allocate([$call19, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
						$retval = -1;
						__label__ = 33;
						break $do_body_preheader$$if_then$2;
					} else if (__label__ == 9) {
						HEAP32[((__ZL9mbr_state) >> 2)] = 1;;
					} else if (__label__ == 11) {
						HEAP32[((__ZL9mbr_state) >> 2)] = 4;
						__ZL3errPKcz(((__str19599) & 4294967295), allocate(1, "i32", ALLOC_STACK));;
					} else if (__label__ == 15) {
						$retval = -1;
						__label__ = 33;
						break $do_body_preheader$$if_then$2;
					} else if (__label__ == 19) {
						var $call47 = ___errno();
						var $31 = HEAP32[(($call47) >> 2)];
						$error = $31;
						var $32 = $error;
						var $cmp48 = ((($32)) | 0) == 32;
						if ($cmp48) {
							__label__ = 20;;
						} else {
							__label__ = 22;;
						}
						$land_lhs_true49$$if_end53$36: do {
							if (__label__ == 20) {
								var $call50 = __ZL17mbrola_has_errorsv();
								var $tobool51 = ((($call50)) | 0) != 0;
								if (!($tobool51)) {
									__label__ = 22;
									break $land_lhs_true49$$if_end53$36;
								}
								$retval = -1;
								__label__ = 33;
								break $do_body_preheader$$if_then$2;
							}
						} while (0);
						var $33 = $error;
						var $call54 = _strerror($33);
						__ZL3errPKcz(((__str20600) & 4294967295), allocate([$call54, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
						$retval = -1;
						__label__ = 33;
						break $do_body_preheader$$if_then$2;
					} else if (__label__ == 29) {
						var $call75 = ___errno();
						var $53 = HEAP32[(($call75) >> 2)];
						var $call76 = _strerror($53);
						__ZL3errPKcz(((__str21601) & 4294967295), allocate([$call76, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
						$retval = -1;
						__label__ = 33;
						break $do_body_preheader$$if_then$2;
					}
					var $58 = $cursize;
					$retval = $58;;
				} else if (__label__ == 2) {
					$retval = -1;;
				}
			} while (0);
			var $59 = $retval;
			STACKTOP = __stackBase__;
			return $59;
			return null;
		}

		function __ZL3errPKcz($errmsg) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $errmsg_addr;
			var $params = __stackBase__;
			$errmsg_addr = $errmsg;
			var $params1 = $params;
			HEAP32[(($params1) >> 2)] = arguments[__ZL3errPKcz.length];;
			var $0 = $errmsg_addr;
			var $1 = HEAP32[(($params) >> 2)];
			var $call = _vsnprintf(((__ZL12mbr_errorbuf) & 4294967295), 160, $0, $1);
			var $params2 = $params;;
			__ZL3logPKcz(((__str16596) & 4294967295), allocate([((__ZL12mbr_errorbuf) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function _close_MBR() {;
			var __label__;
			__ZL11stop_mbrolav();
			__ZL17free_pending_datav();
			var $0 = HEAP32[((__ZL14mbr_voice_path) >> 2)];;
			HEAP32[((__ZL14mbr_voice_path) >> 2)] = 0;
			HEAPF32[((__ZL10mbr_volume) >> 2)] = 1;;
			return;
			return;
		}

		function __ZL17free_pending_datav() {;
			var __label__;
			var $p;
			var $head;
			var $0 = HEAP32[((__ZL21mbr_pending_data_head) >> 2)];
			$head = $0;
			var $tobool1 = ((($0)) | 0) != 0;
			if ($tobool1) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $1 = $head;
						$p = $1;
						var $2 = $head;
						var $next = (($2) & 4294967295);
						var $3 = HEAP32[(($next) >> 2)];
						$head = $3;
						var $4 = $p;
						var $5 = $4;;
						var $_pr = $head;
						var $tobool = ((($_pr)) | 0) != 0;
						if ($tobool) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			HEAP32[((__ZL21mbr_pending_data_head) >> 2)] = 0;
			HEAP32[((__ZL21mbr_pending_data_tail) >> 2)] = 0;;
			return;
			return;
		}

		function _reset_MBR() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4096;
			_memset(__stackBase__, 0, 4096);
			var __label__;
			var $retval;
			var $result;
			var $success;
			var $dummybuf = __stackBase__;
			$success = 1;
			var $0 = HEAP32[((__ZL9mbr_state) >> 2)];
			var $cmp = ((($0)) | 0) == 1;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $1 = HEAP32[((__ZL7mbr_pid) >> 2)];
				var $tobool = ((($1)) | 0) != 0;
				if ($tobool) {
					__label__ = 4;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 4) {
					var $2 = HEAP32[((__ZL7mbr_pid) >> 2)];
					var $call = _kill($2, 30);
					var $cmp3 = ((($call)) | 0) == -1;
					if ($cmp3) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						$success = 0;;
					}
					__ZL17free_pending_datav();
					var $3 = HEAP32[((__ZL10mbr_cmd_fd) >> 2)];
					var $call6 = _write($3, ((__str5585) & 4294967295), 3);
					$result = $call6;
					var $cmp7 = ((($call6)) | 0) != 3;
					if ($cmp7) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						$success = 0;;
					}
					var $arraydecay = (($dummybuf) & 4294967295);;
					$do_body$13: while (1) {
						var $4 = HEAP32[((__ZL12mbr_audio_fd) >> 2)];
						var $call10 = _read($4, $arraydecay, 4096);
						$result = $call10;
						var $cmp11 = ((($call10)) | 0) > 0;
						if ($cmp11) {
							__label__ = 9;
							continue $do_body$13;
						} else {
							__label__ = 10;
							break $do_body$13;
						}
					}
					var $5 = $result;
					var $cmp12 = ((($5)) | 0) != -1;
					if ($cmp12) {
						__label__ = 12;;
					} else {
						__label__ = 11;;
					}
					$if_then15$$lor_lhs_false$16: do {
						if (__label__ == 11) {
							var $call13 = ___errno();
							var $6 = HEAP32[(($call13) >> 2)];
							var $cmp14 = ((($6)) | 0) != 11;
							if ($cmp14) {
								__label__ = 12;
								break $if_then15$$lor_lhs_false$16;
							} else {
								__label__ = 13;
								break $if_then15$$lor_lhs_false$16;
							}
						}
					} while (0);
					if (__label__ == 12) {
						$success = 0;;
					}
					var $call17 = __ZL17mbrola_has_errorsv();
					var $tobool18 = ((($call17)) | 0) != 0;
					if ($tobool18) {
						__label__ = 16;;
					} else {
						__label__ = 14;;
					}
					$if_end21$$land_lhs_true$21: do {
						if (__label__ == 14) {
							var $7 = $success;
							var $tobool19 = ((($7)) | 0) != 0;
							if (!($tobool19)) {
								__label__ = 16;
								break $if_end21$$land_lhs_true$21;
							}
							HEAP32[((__ZL9mbr_state) >> 2)] = 1;;
						}
					} while (0);
					var $8 = $success;
					$retval = $8;;
				} else if (__label__ == 3) {
					$retval = 0;;
				}
			}
			var $9 = $retval;
			STACKTOP = __stackBase__;
			return $9;
			return null;
		}

		function __ZL17mbrola_has_errorsv() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 256;
			_memset(__stackBase__, 0, 256);
			var __label__;
			var $retval;
			var $result;
			var $buffer = __stackBase__;
			var $buf_ptr;
			var $lf;
			var $arraydecay = (($buffer) & 4294967295);
			$buf_ptr = $arraydecay;
			var $arraydecay1 = (($buffer) & 4294967295);
			var $sub_ptr_rhs_cast = ($arraydecay1);
			var $sub_ptr_rhs_cast_neg = (((-($sub_ptr_rhs_cast))) & 4294967295);
			var $sub_ptr_rhs_cast_neg_neg = (((-($sub_ptr_rhs_cast_neg))) & 4294967295);
			var $sub = ((($sub_ptr_rhs_cast_neg_neg) + 255) & 4294967295);
			var $arraydecay27 = (($buffer) & 4294967295);
			var $arraydecay28 = (($buffer) & 4294967295);;
			$for_cond$2: while (1) {
				var $0 = HEAP32[((__ZL12mbr_error_fd) >> 2)];
				var $1 = $buf_ptr;
				var $2 = $buf_ptr;
				var $sub_ptr_lhs_cast = ($2);
				var $sub_ptr_lhs_cast_neg = (((-($sub_ptr_lhs_cast))) & 4294967295);
				var $sub2 = ((($sub) + ($sub_ptr_lhs_cast_neg)) & 4294967295);
				var $call = _read($0, $1, $sub2);
				$result = $call;
				var $cmp = ((($call)) | 0) == -1;
				if ($cmp) {
					__label__ = 2;
					break $for_cond$2;
				}
				var $5 = $result;
				var $cmp9 = ((($5)) | 0) == 0;
				if ($cmp9) {
					__label__ = 6;
					break $for_cond$2;
				}
				var $6 = $result;
				var $7 = $buf_ptr;
				var $arrayidx = (($7 + $6) & 4294967295);
				HEAP8[($arrayidx)] = 0;;
				$for_cond13$6: while (1) {
					var $8 = $buf_ptr;
					var $call14 = _strchr($8, 10);
					$lf = $call14;
					var $tobool = ((($call14)) | 0) != 0;
					var $9 = $buf_ptr;
					if (!($tobool)) {
						__label__ = 14;
						break $for_cond13$6;
					}
					var $call15 = _strncmp($9, ((__str8588) & 4294967295), 18);
					var $cmp16 = ((($call15)) | 0) == 0;
					if ($cmp16) {
						__label__ = 13;;
					} else {
						__label__ = 10;;
					}
					$for_inc$$lor_lhs_false$9: do {
						if (__label__ == 10) {
							var $10 = $buf_ptr;
							var $call17 = _strncmp($10, ((__str9589) & 4294967295), 18);
							var $cmp18 = ((($call17)) | 0) == 0;
							if ($cmp18) {
								__label__ = 13;
								break $for_inc$$lor_lhs_false$9;
							}
							var $11 = $lf;
							HEAP8[($11)] = 0;
							var $12 = $buf_ptr;
							__ZL3logPKcz(((__str10590) & 4294967295), allocate([$12, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							var $13 = $lf;
							var $14 = $result;
							var $sub21 = ((($14) - 1) & 4294967295);
							var $15 = $buf_ptr;
							var $arrayidx22 = (($15 + $sub21) & 4294967295);
							var $cmp23 = ((($13)) | 0) == ((($arrayidx22)) | 0);
							if ($cmp23) {
								__label__ = 12;
								break $for_cond$2;
							}
						}
					} while (0);
					var $17 = $lf;
					var $add_ptr = (($17 + 1) & 4294967295);
					$buf_ptr = $add_ptr;
					__label__ = 8;
					continue $for_cond13$6;
				}
				var $18 = $result;
				_llvm_memmove_p0i8_p0i8_i32($arraydecay27, $9, $18, 1, 0);
				var $19 = $result;
				var $add_ptr29 = (($arraydecay28 + $19) & 4294967295);
				$buf_ptr = $add_ptr29;
				__label__ = 1;
				continue $for_cond$2;
			}
			if (__label__ == 2) {
				var $call3 = ___errno();
				var $3 = HEAP32[(($call3) >> 2)];
				var $cmp4 = ((($3)) | 0) == 11;
				if ($cmp4) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$retval = 0;;
				} else if (__label__ == 4) {
					var $call6 = ___errno();
					var $4 = HEAP32[(($call6) >> 2)];
					var $call7 = _strerror($4);
					__ZL3errPKcz(((__str7587) & 4294967295), allocate([$call7, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
					$retval = -1;;
				}
			} else if (__label__ == 6) {
				__ZL11mbrola_diedv();
				$retval = -1;;
			} else if (__label__ == 12) {
				var $16 = $buf_ptr;
				var $call25 = _snprintf(((__ZL12mbr_errorbuf) & 4294967295), 160, ((__str57709) & 4294967295), allocate([$16, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
				$retval = 0;;
			}
			var $20 = $retval;
			STACKTOP = __stackBase__;
			return $20;
			return null;
		}

		function _read_MBR($buffer, $nb_samples) {;
			var __label__;
			var $buffer_addr;
			var $nb_samples_addr;
			var $result;
			$buffer_addr = $buffer;
			$nb_samples_addr = $nb_samples;
			var $0 = $buffer_addr;
			var $1 = $nb_samples_addr;
			var $mul = ((($1) * 2) & 4294967295);
			var $call = __ZL19receive_from_mbrolaPvj($0, $mul);
			$result = $call;
			var $2 = $result;
			var $cmp = ((($2)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $3 = $result;
				var $div = ((((($3)) | 0) / 2) | 0);
				$result = $div;;
			}
			var $4 = $result;;
			return $4;
			return null;
		}

		function _write_MBR($data) {;
			var __label__;
			var $data_addr;
			$data_addr = $data;
			HEAP32[((__ZL9mbr_state) >> 2)] = 2;
			var $0 = $data_addr;
			var $call = __ZL14send_to_mbrolaPKc($0);;
			return $call;
			return null;
		}

		function _flush_MBR() {;
			var __label__;
			var $call = __ZL14send_to_mbrolaPKc(((__str5585) & 4294967295));
			var $cmp = ((($call)) | 0) == 3;
			var $conv = ((($cmp)) & 1);;
			return $conv;
			return null;
		}

		function _getFreq_MBR() {;
			var __label__;
			var $0 = HEAP32[((__ZL14mbr_samplerate) >> 2)];;
			return $0;
			return null;
		}

		function _setVolumeRatio_MBR($value) {;
			var __label__;
			var $value_addr;
			$value_addr = $value;
			var $0 = $value_addr;
			var $1 = HEAPF32[((__ZL10mbr_volume) >> 2)];
			var $cmp = ($0) == ($1);
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 1;;
			}
			$return$$if_end$2: do {
				if (__label__ == 1) {
					var $2 = $value_addr;
					HEAPF32[((__ZL10mbr_volume) >> 2)] = $2;
					var $3 = HEAP32[((__ZL9mbr_state) >> 2)];
					var $cmp1 = ((($3)) | 0) != 1;
					if ($cmp1) {
						__label__ = 3;
						break $return$$if_end$2;
					}
					__ZL11stop_mbrolav();
					var $4 = HEAP32[((__ZL14mbr_voice_path) >> 2)];
					var $call = _init_MBR($4);;
				}
			} while (0);;
			return;
			return;
		}

		function _lastErrorStr_MBR($buffer, $bufsize) {;
			var __label__;
			var __lastLabel__ = null;
			var $buffer_addr;
			var $bufsize_addr;
			var $result;
			$buffer_addr = $buffer;
			$bufsize_addr = $bufsize;
			var $0 = HEAP32[((__ZL7mbr_pid) >> 2)];
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $call = __ZL17mbrola_has_errorsv();;
			}
			var $1 = $buffer_addr;
			var $2 = $bufsize_addr;
			var $call1 = _snprintf($1, $2, ((__str57709) & 4294967295), allocate([((__ZL12mbr_errorbuf) & 4294967295), 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
			$result = $call1;
			var $3 = $result;
			var $4 = $bufsize_addr;
			var $cmp = ((($3)) | 0) >= ((($4)) | 0);
			if ($cmp) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $5 = $bufsize_addr;
				var $sub = ((($5) - 1) & 4294967295);
				__lastLabel__ = 3;;
			} else if (__label__ == 4) {
				var $6 = $result;
				__lastLabel__ = 4;;
			}
			var $cond = __lastLabel__ == 3 ? $sub : ($6);;
			return $cond;
			return null;
		}

		function _resetError_MBR() {;
			var __label__;
			HEAP8[(((__ZL12mbr_errorbuf) & 4294967295))] = 0;;
			return;
			return;
		}

		function __ZL11mbrola_diedv() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 84;
			_memset(__stackBase__, 0, 84);
			var __label__;
			var $pid;
			var $status = __stackBase__;
			var $len;
			var $msg;
			var $msgbuf = __stackBase__ + 4;
			var $sig;
			var $exst;
			var $0 = HEAP32[((__ZL7mbr_pid) >> 2)];
			var $call = _waitpid($0, $status, 1);
			$pid = $call;
			var $1 = $pid;
			var $tobool = ((($1)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$if_else$$if_then$2: do {
				if (__label__ == 2) {
					var $2 = $pid;
					var $3 = HEAP32[((__ZL7mbr_pid) >> 2)];
					var $cmp = ((($2)) | 0) != ((($3)) | 0);
					if ($cmp) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						$msg = ((__str12592) & 4294967295);;
					} else if (__label__ == 4) {
						HEAP32[((__ZL7mbr_pid) >> 2)] = 0;
						var $4 = HEAP32[(($status) >> 2)];
						var $and = ($4) & 127;
						var $cmp3 = ((($and)) | 0) > 0;
						if ($cmp3) {
							__label__ = 5;;
						} else {
							__label__ = 7;;
						}
						$land_lhs_true$$if_else10$7: do {
							if (__label__ == 5) {
								var $5 = HEAP32[(($status) >> 2)];
								var $and4 = ($5) & 127;
								var $cmp5 = ((($and4)) | 0) < 127;
								if (!($cmp5)) {
									__label__ = 7;
									break $land_lhs_true$$if_else10$7;
								}
								var $6 = HEAP32[(($status) >> 2)];
								var $and7 = ($6) & 127;
								$sig = $and7;
								var $arraydecay = (($msgbuf) & 4294967295);
								var $7 = $sig;
								var $call8 = _snprintf($arraydecay, 80, ((__str13593) & 4294967295), allocate([$7, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
								var $arraydecay9 = (($msgbuf) & 4294967295);
								$msg = $arraydecay9;
								__label__ = 10;
								break $if_else$$if_then$2;
							}
						} while (0);
						var $8 = HEAP32[(($status) >> 2)];
						var $and11 = ($8) & 255;
						var $cmp12 = ((($and11)) | 0) == 0;
						if ($cmp12) {
							__label__ = 8;;
						} else {
							__label__ = 9;;
						}
						if (__label__ == 8) {
							var $9 = HEAP32[(($status) >> 2)];
							var $shr = ($9) >> 8;
							var $and14 = ($shr) & 255;
							$exst = $and14;
							var $arraydecay15 = (($msgbuf) & 4294967295);
							var $10 = $exst;
							var $call16 = _snprintf($arraydecay15, 80, ((__str14594) & 4294967295), allocate([$10, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
							var $arraydecay17 = (($msgbuf) & 4294967295);
							$msg = $arraydecay17;;
						} else if (__label__ == 9) {
							$msg = ((__str15595) & 4294967295);;
						}
					}
				} else if (__label__ == 1) {
					$msg = ((__str11591) & 4294967295);;
				}
			} while (0);
			var $11 = $msg;
			__ZL3logPKcz(((__str16596) & 4294967295), allocate([$11, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
			var $call22 = _strlen(((__ZL12mbr_errorbuf) & 4294967295));
			$len = $call22;
			var $tobool23 = ((($call22)) | 0) != 0;
			if ($tobool23) {
				__label__ = 12;;
			} else {
				__label__ = 11;;
			}
			if (__label__ == 12) {
				var $13 = $len;
				var $add_ptr = ((((__ZL12mbr_errorbuf) & 4294967295) + $13) & 4294967295);
				var $14 = $len;
				var $sub = ((160 - ($14)) & 4294967295);
				var $15 = $msg;
				var $call27 = _snprintf($add_ptr, $sub, ((__str17597) & 4294967295), allocate([$15, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
			} else if (__label__ == 11) {
				var $12 = $msg;
				var $call25 = _snprintf(((__ZL12mbr_errorbuf) & 4294967295), 160, ((__str57709) & 4294967295), allocate([$12, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL3logPKcz($msg) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $msg_addr;
			var $params = __stackBase__;
			$msg_addr = $msg;
			var $params1 = $params;
			HEAP32[(($params1) >> 2)] = arguments[__ZL3logPKcz.length];;
			var $0 = HEAP32[((__impure_ptr) >> 2)];
			var $_stderr = (($0 + 12) & 4294967295);
			var $1 = HEAP32[(($_stderr) >> 2)];
			var $2 = $msg_addr;
			var $3 = HEAP32[(($params) >> 2)];
			var $call = _vfprintf($1, $2, $3);
			var $4 = HEAP32[((__impure_ptr) >> 2)];
			var $_stderr2 = (($4 + 12) & 4294967295);
			var $5 = HEAP32[(($_stderr2) >> 2)];
			var $call3 = _fputc(10, $5);
			var $params4 = $params;;
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL14mbrola_is_idlev() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 20;
			_memset(__stackBase__, 0, 20);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $p;
			var $buffer = __stackBase__;
			var $0 = HEAP32[((__ZL13mbr_proc_stat) >> 2)];
			var $call = _lseek($0, 0, 0);
			var $cmp = ((($call)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					$retval = 0;;
				} else if (__label__ == 2) {
					var $1 = HEAP32[((__ZL13mbr_proc_stat) >> 2)];
					var $arraydecay = (($buffer) & 4294967295);
					var $call1 = _read($1, $arraydecay, 20);
					var $cmp2 = ((($call1)) | 0) != 20;
					if ($cmp2) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						$retval = 0;;
					} else if (__label__ == 4) {
						var $arraydecay5 = (($buffer) & 4294967295);
						var $call6 = _memchr($arraydecay5, 41, 20);
						$p = $call6;
						var $2 = $p;
						var $tobool = ((($2)) | 0) != 0;
						if ($tobool) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						$lor_lhs_false$$if_then9$8: do {
							if (__label__ == 5) {
								var $3 = $p;
								var $arraydecay7 = (($buffer) & 4294967295);
								var $sub_ptr_lhs_cast = ($3);
								var $sub_ptr_rhs_cast = ($arraydecay7);
								var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
								var $cmp8 = ((($sub_ptr_sub)) >>> 0) >= 18;
								if ($cmp8) {
									__label__ = 6;
									break $lor_lhs_false$$if_then9$8;
								}
								var $4 = $p;
								var $arrayidx = (($4 + 1) & 4294967295);
								var $5 = HEAP8[($arrayidx)];
								var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp11 = ((($conv)) | 0) == 32;
								if ($cmp11) {
									__lastLabel__ = 7;
									__label__ = 8;;
								} else {
									__lastLabel__ = 7;
									__label__ = 9;;
								}
								if (__label__ == 8) {
									var $6 = $p;
									var $arrayidx12 = (($6 + 2) & 4294967295);
									var $7 = HEAP8[($arrayidx12)];
									var $conv13 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp14 = ((($conv13)) | 0) == 83;
									__lastLabel__ = 8;;
								}
								var $8 = __lastLabel__ == 7 ? 0 : ($cmp14);
								var $conv15 = ((($8)) & 1);
								$retval = $conv15;
								__label__ = 10;
								break $if_then$$if_end$2;
							}
						} while (0);
						$retval = 0;;
					}
				}
			} while (0);
			var $9 = $retval;
			STACKTOP = __stackBase__;
			return $9;
			return null;
		}

		function __ZL12create_pipesPiS_S_($p1, $p2, $p3) {;
			var __label__;
			var $retval;
			var $p1_addr;
			var $p2_addr;
			var $p3_addr;
			var $error;
			$p1_addr = $p1;
			$p2_addr = $p2;
			$p3_addr = $p3;
			var $0 = $p1_addr;
			var $call = _pipe($0);
			var $cmp = ((($call)) | 0) != -1;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 7;;
			}
			$if_then$$if_else18$2: do {
				if (__label__ == 1) {
					var $1 = $p2_addr;
					var $call1 = _pipe($1);
					var $cmp2 = ((($call1)) | 0) != -1;
					if ($cmp2) {
						__label__ = 2;;
					} else {
						__label__ = 5;;
					}
					if (__label__ == 2) {
						var $2 = $p3_addr;
						var $call4 = _pipe($2);
						var $cmp5 = ((($call4)) | 0) != -1;
						if ($cmp5) {
							__label__ = 3;;
						} else {
							__label__ = 4;;
						}
						if (__label__ == 3) {
							$retval = 0;
							__label__ = 9;
							break $if_then$$if_else18$2;
						} else if (__label__ == 4) {
							var $call7 = ___errno();
							var $3 = HEAP32[(($call7) >> 2)];
							$error = $3;
							var $4 = $p2_addr;
							var $arrayidx = (($4) & 4294967295);
							var $5 = HEAP32[(($arrayidx) >> 2)];
							var $call8 = _close($5);
							var $6 = $p2_addr;
							var $arrayidx9 = (($6 + 4) & 4294967295);
							var $7 = HEAP32[(($arrayidx9) >> 2)];
							var $call10 = _close($7);;
						}
					} else if (__label__ == 5) {
						var $call12 = ___errno();
						var $8 = HEAP32[(($call12) >> 2)];
						$error = $8;;
					}
					var $9 = $p1_addr;
					var $arrayidx14 = (($9) & 4294967295);
					var $10 = HEAP32[(($arrayidx14) >> 2)];
					var $call15 = _close($10);
					var $11 = $p1_addr;
					var $arrayidx16 = (($11 + 4) & 4294967295);
					var $12 = HEAP32[(($arrayidx16) >> 2)];
					var $call17 = _close($12);
					__label__ = 8;
					break $if_then$$if_else18$2;
				} else if (__label__ == 7) {
					var $call19 = ___errno();
					var $13 = HEAP32[(($call19) >> 2)];
					$error = $13;
					__label__ = 8;
					break $if_then$$if_else18$2;
				}
			} while (0);
			if (__label__ == 8) {
				var $14 = $error;
				var $call21 = _strerror($14);
				__ZL3errPKcz(((__str35615) & 4294967295), allocate([$call21, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
				$retval = -1;;
			}
			var $15 = $retval;;
			return $15;
			return null;
		}

		function __ZL11close_pipesPiS_S_($p1, $p2, $p3) {;
			var __label__;
			var $p1_addr;
			var $p2_addr;
			var $p3_addr;
			$p1_addr = $p1;
			$p2_addr = $p2;
			$p3_addr = $p3;
			var $0 = $p1_addr;
			var $arrayidx = (($0) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			var $call = _close($1);
			var $2 = $p1_addr;
			var $arrayidx1 = (($2 + 4) & 4294967295);
			var $3 = HEAP32[(($arrayidx1) >> 2)];
			var $call2 = _close($3);
			var $4 = $p2_addr;
			var $arrayidx3 = (($4) & 4294967295);
			var $5 = HEAP32[(($arrayidx3) >> 2)];
			var $call4 = _close($5);
			var $6 = $p2_addr;
			var $arrayidx5 = (($6 + 4) & 4294967295);
			var $7 = HEAP32[(($arrayidx5) >> 2)];
			var $call6 = _close($7);
			var $8 = $p3_addr;
			var $arrayidx7 = (($8) & 4294967295);
			var $9 = HEAP32[(($arrayidx7) >> 2)];
			var $call8 = _close($9);
			var $10 = $p3_addr;
			var $arrayidx9 = (($10 + 4) & 4294967295);
			var $11 = HEAP32[(($arrayidx9) >> 2)];
			var $call10 = _close($11);;
			return;
			return;
		}

		function __Z15SetIndicLettersP10Translator($tr) {;
			var __label__;
			var $tr_addr;
			$tr_addr = $tr;
			var $0 = $tr_addr;
			var $letter_bits = (($0 + 708) & 4294967295);
			var $arraydecay = (($letter_bits) & 4294967295);
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $arraydecay;
			$stop$ = $dest$ + 256;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $1 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($1, 0, 4, 20);
			var $2 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($2, 0, 62, 77);
			var $3 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($3, 0, 85, 87);
			var $4 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($4, 1, 62, 77);
			var $5 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($5, 1, 85, 87);
			var $6 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($6, 2, 21, 57);
			var $7 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($7, 2, ((__ZZ15SetIndicLettersP10TranslatorE15dev_consonants2) & 4294967295));
			var $8 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($8, 6, 4, 20);
			var $9 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($9, 6, 62, 76);
			var $10 = $tr_addr;
			__ZL18SetLetterBitsRangeP10Translatoriii($10, 6, 85, 87);
			var $11 = $tr_addr;
			var $langopts = (($11) & 4294967295);
			var $param = (($langopts + 24) & 4294967295);
			var $arrayidx = (($param + 20) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = 1;
			var $12 = $tr_addr;
			var $letter_bits_offset = (($12 + 964) & 4294967295);
			var $13 = HEAP32[(($letter_bits_offset) >> 2)];
			var $add = ((($13) + 77) & 4294967295);
			var $14 = $tr_addr;
			var $langopts1 = (($14) & 4294967295);
			var $suffix_add_e = (($langopts1 + 276) & 4294967295);
			HEAP32[(($suffix_add_e) >> 2)] = $add;;
			return;
			return;
		}

		function __ZL18SetLetterBitsRangeP10Translatoriii($tr, $group, $first, $last) {;
			var __label__;
			var $tr_addr;
			var $group_addr;
			var $first_addr;
			var $last_addr;
			var $bits;
			var $ix;
			$tr_addr = $tr;
			$group_addr = $group;
			$first_addr = $first;
			$last_addr = $last;
			var $0 = $group_addr;
			var $shl = 1 << ($0);
			$bits = $shl;
			var $1 = $first_addr;
			$ix = $1;
			var $2 = $ix;
			var $3 = $last_addr;
			var $cmp1 = ((($2)) | 0) <= ((($3)) | 0);
			if ($cmp1) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $4 = $bits;
						var $5 = $ix;
						var $6 = $tr_addr;
						var $letter_bits = (($6 + 708) & 4294967295);
						var $arrayidx = (($letter_bits + $5) & 4294967295);
						var $7 = HEAPU8[($arrayidx)];
						var $conv = ((($7)) & 255);
						var $or = ($conv) | ($4);
						var $conv1 = ((($or)) & 255);
						HEAP8[($arrayidx)] = $conv1;
						var $8 = $ix;
						var $inc = ((($8) + 1) & 4294967295);
						$ix = $inc;
						var $9 = $ix;
						var $10 = $last_addr;
						var $cmp = ((($9)) | 0) <= ((($10)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL13SetLetterBitsP10TranslatoriPKc($tr, $group, $string) {;
			var __label__;
			var $tr_addr;
			var $group_addr;
			var $string_addr;
			var $bits;
			var $c;
			$tr_addr = $tr;
			$group_addr = $group;
			$string_addr = $string;
			var $0 = $group_addr;
			var $shl = 1 << ($0);
			$bits = $shl;
			var $1 = $string_addr;
			var $incdec_ptr1 = (($1 + 1) & 4294967295);
			$string_addr = $incdec_ptr1;
			var $2 = HEAPU8[($1)];
			$c = $2;
			var $conv3 = ((($2)) & 255);
			var $cmp4 = ((($conv3)) | 0) != 0;
			if ($cmp4) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $3 = $bits;
						var $4 = $c;
						var $idxprom = ((($4)) & 255);
						var $5 = $tr_addr;
						var $letter_bits = (($5 + 708) & 4294967295);
						var $arrayidx = (($letter_bits + $idxprom) & 4294967295);
						var $6 = HEAPU8[($arrayidx)];
						var $conv1 = ((($6)) & 255);
						var $or = ($conv1) | ($3);
						var $conv2 = ((($or)) & 255);
						HEAP8[($arrayidx)] = $conv2;
						var $7 = $string_addr;
						var $incdec_ptr = (($7 + 1) & 4294967295);
						$string_addr = $incdec_ptr;
						var $8 = HEAPU8[($7)];
						$c = $8;
						var $conv = ((($8)) & 255);
						var $cmp = ((($conv)) | 0) != 0;
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __Z15SetupTranslatorP10TranslatorPKsPKh($tr, $lengths, $amps) {;
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $lengths_addr;
			var $amps_addr;
			$tr_addr = $tr;
			$lengths_addr = $lengths;
			$amps_addr = $amps;
			var $0 = $lengths_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $tr_addr;
				var $stress_lengths = (($1 + 676) & 4294967295);
				var $arraydecay = (($stress_lengths) & 4294967295);
				var $2 = $arraydecay;
				var $3 = $lengths_addr;
				var $4 = $3;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $4;
				$dest$ = $2;
				$stop$ = $src$ + 16;
				if (($dest$ % 4) == ($src$ % 4) && 16 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $_pr = $amps_addr;
				__lastLabel__ = 1;;
			}
			var $5 = __lastLabel__ == 1 ? $_pr : ($amps);
			var $cmp1 = ((($5)) | 0) != 0;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $6 = $tr_addr;
				var $stress_amps = (($6 + 660) & 4294967295);
				var $arraydecay3 = (($stress_amps) & 4294967295);
				var $7 = $amps_addr;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $7;
				$dest$ = $arraydecay3;
				$stop$ = $src$ + 8;
				if (($dest$ % 4) == ($src$ % 4) && 8 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};;
			};
			return;
			return;
		}

		function __Z16SelectTranslatorPKc($name) {;
			var __label__;
			var __lastLabel__ = null;
			var $name_addr;
			var $name2;
			var $tr;
			$name_addr = $name;
			$name2 = 0;
			var $0 = $name_addr;
			var $1 = HEAP8[($0)];
			var $conv2 = (tempInt = (($1)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp3 = ((($conv2)) | 0) != 0;
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $2 = $name2;
						var $shl = ((($2) * 256) & 4294967295);
						var $3 = $name_addr;
						var $incdec_ptr = (($3 + 1) & 4294967295);
						$name_addr = $incdec_ptr;
						var $4 = HEAP8[($3)];
						var $conv1 = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $add = ((($conv1) + ($shl)) & 4294967295);
						$name2 = $add;
						var $5 = $name_addr;
						var $6 = HEAP8[($5)];
						var $conv = (tempInt = (($6)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp = ((($conv)) | 0) != 0;
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);
			var $call = __ZL13NewTranslatorv();
			$tr = $call;
			var $7 = $name2;
			if ($7 == 24934) {
				__label__ = 3;;
			} else if ($7 == 24941) {
				__label__ = 4;;
			} else if ($7 == 24946) {
				__label__ = 5;;
			} else if ($7 == 25191) {
				__label__ = 6;;
			} else if ($7 == 25198) {
				__label__ = 7;;
			} else if ($7 == 25465) {
				__label__ = 8;;
			} else if ($7 == 25697) {
				__label__ = 9;;
			} else if ($7 == 25701) {
				__label__ = 10;;
			} else if ($7 == 25718) {
				__label__ = 11;;
			} else if ($7 == 25966) {
				__label__ = 12;;
			} else if ($7 == 25964) {
				__label__ = 13;;
			} else if ($7 == 6779491) {
				__label__ = 13;;
			} else if ($7 == 25967) {
				__label__ = 15;;
			} else if ($7 == 25971) {
				__label__ = 16;;
			} else if ($7 == 25441) {
				__label__ = 16;;
			} else if ($7 == 7364976) {
				__label__ = 16;;
			} else if ($7 == 25973) {
				__label__ = 21;;
			} else if ($7 == 26209) {
				__label__ = 22;;
			} else if ($7 == 25972) {
				__label__ = 23;;
			} else if ($7 == 26217) {
				__label__ = 24;;
			} else if ($7 == 26226) {
				__label__ = 25;;
			} else if ($7 == 26729) {
				__label__ = 26;;
			} else if ($7 == 28261) {
				__label__ = 26;;
			} else if ($7 == 28769) {
				__label__ = 26;;
			} else if ($7 == 26738) {
				__label__ = 29;;
			} else if ($7 == 25203) {
				__label__ = 29;;
			} else if ($7 == 29554) {
				__label__ = 29;;
			} else if ($7 == 26740) {
				__label__ = 33;;
			} else if ($7 == 26741) {
				__label__ = 34;;
			} else if ($7 == 26745) {
				__label__ = 35;;
			} else if ($7 == 26980) {
				__label__ = 36;;
			} else if ($7 == 26995) {
				__label__ = 37;;
			} else if ($7 == 26996) {
				__label__ = 38;;
			} else if ($7 == 6972015) {
				__label__ = 39;;
			} else if ($7 == 27489) {
				__label__ = 40;;
			} else if ($7 == 27503) {
				__label__ = 41;;
			} else if ($7 == 27509) {
				__label__ = 42;;
			} else if ($7 == 27745) {
				__label__ = 43;;
			} else if ($7 == 27766) {
				__label__ = 44;;
			} else if ($7 == 28011) {
				__label__ = 45;;
			} else if ($7 == 28268) {
				__label__ = 46;;
			} else if ($7 == 28271) {
				__label__ = 47;;
			} else if ($7 == 28525) {
				__label__ = 48;;
			} else if ($7 == 28780) {
				__label__ = 49;;
			} else if ($7 == 28788) {
				__label__ = 50;;
			} else if ($7 == 29295) {
				__label__ = 51;;
			} else if ($7 == 29301) {
				__label__ = 52;;
			} else if ($7 == 29303) {
				__label__ = 53;;
			} else if ($7 == 29547) {
				__label__ = 54;;
			} else if ($7 == 25459) {
				__label__ = 54;;
			} else if ($7 == 29545) {
				__label__ = 57;;
			} else if ($7 == 29548) {
				__label__ = 58;;
			} else if ($7 == 29553) {
				__label__ = 59;;
			} else if ($7 == 29558) {
				__label__ = 60;;
			} else if ($7 == 29559) {
				__label__ = 61;;
			} else if ($7 == 29806) {
				__label__ = 61;;
			} else if ($7 == 29793) {
				__label__ = 62;;
			} else if ($7 == 28012) {
				__label__ = 62;;
			} else if ($7 == 27502) {
				__label__ = 62;;
			} else if ($7 == 28018) {
				__label__ = 62;;
			} else if ($7 == 29797) {
				__label__ = 62;;
			} else if ($7 == 29810) {
				__label__ = 73;;
			} else if ($7 == 30066) {
				__label__ = 74;;
			} else if ($7 == 30313) {
				__label__ = 75;;
			} else if ($7 == 30575) {
				__label__ = 76;;
			} else if ($7 == 31336) {
				__label__ = 77;;
			} else if ($7 == 8022137) {
				__label__ = 77;;
			} else {
				__label__ = 79;;
			}
			$sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6: do {
				if (__label__ == 79) {
					var $495 = $tr;
					var $langopts756 = (($495) & 4294967295);
					var $param757 = (($langopts756 + 24) & 4294967295);
					var $arrayidx758 = (($param757 + 20) & 4294967295);
					HEAP32[(($arrayidx758) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 3) {
					var $8 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($8, ((__ZZ16SelectTranslatorPKcE17stress_lengths_af) & 4294967295), 0);
					var $9 = $tr;
					var $langopts = (($9) & 4294967295);
					var $stress_rule = (($langopts + 8) & 4294967295);
					HEAP32[(($stress_rule) >> 2)] = 0;
					var $10 = $tr;
					var $langopts2 = (($10) & 4294967295);
					var $vowel_pause = (($langopts2 + 4) & 4294967295);
					HEAP32[(($vowel_pause) >> 2)] = 48;
					var $11 = $tr;
					var $langopts3 = (($11) & 4294967295);
					var $param = (($langopts3 + 24) & 4294967295);
					var $arrayidx = (($param + 4) & 4294967295);
					HEAP32[(($arrayidx) >> 2)] = 1;
					var $12 = $tr;
					var $langopts4 = (($12) & 4294967295);
					var $param5 = (($langopts4 + 24) & 4294967295);
					var $arrayidx6 = (($param5 + 12) & 4294967295);
					HEAP32[(($arrayidx6) >> 2)] = 1;
					var $13 = $tr;
					__ZL14SetLetterVowelP10Translatori($13, 121);
					var $14 = $tr;
					var $langopts7 = (($14) & 4294967295);
					var $numbers = (($langopts7 + 184) & 4294967295);
					HEAP32[(($numbers) >> 2)] = 16779472;
					var $15 = $tr;
					var $langopts8 = (($15) & 4294967295);
					var $accents = (($langopts8 + 220) & 4294967295);
					HEAP32[(($accents) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 4) {
					var $16 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($16, ((__ZZ16SelectTranslatorPKcE17stress_lengths_fr) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_fr) & 4294967295));
					var $17 = $tr;
					var $langopts10 = (($17) & 4294967295);
					var $stress_rule11 = (($langopts10 + 8) & 4294967295);
					HEAP32[(($stress_rule11) >> 2)] = 0;
					var $18 = $tr;
					var $langopts12 = (($18) & 4294967295);
					var $stress_flags = (($langopts12 + 12) & 4294967295);
					HEAP32[(($stress_flags) >> 2)] = 36;
					var $19 = $tr;
					var $langopts13 = (($19) & 4294967295);
					var $length_mods = (($langopts13 + 176) & 4294967295);
					var $20 = HEAP32[(($length_mods) >> 2)];
					var $21 = $tr;
					var $langopts14 = (($21) & 4294967295);
					var $length_mods0 = (($langopts14 + 180) & 4294967295);
					HEAP32[(($length_mods0) >> 2)] = $20;
					var $22 = $tr;
					var $langopts15 = (($22) & 4294967295);
					var $param16 = (($langopts15 + 24) & 4294967295);
					var $arrayidx17 = (($param16 + 20) & 4294967295);
					HEAP32[(($arrayidx17) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 5) {
					var $23 = $tr;
					var $letter_bits_offset = (($23 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset) >> 2)] = 1536;
					var $24 = $tr;
					var $langopts19 = (($24) & 4294967295);
					var $numbers20 = (($langopts19 + 184) & 4294967295);
					HEAP32[(($numbers20) >> 2)] = 2884720;
					var $25 = $tr;
					var $langopts21 = (($25) & 4294967295);
					var $param22 = (($langopts21 + 24) & 4294967295);
					var $arrayidx23 = (($param22 + 20) & 4294967295);
					HEAP32[(($arrayidx23) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 6) {
					var $26 = $tr;
					__ZL18SetCyrillicLettersP10Translator($26);
					var $27 = $tr;
					__ZL14SetLetterVowelP10Translatori($27, 42);
					var $28 = $tr;
					var $langopts25 = (($28) & 4294967295);
					var $param26 = (($langopts25 + 24) & 4294967295);
					var $arrayidx27 = (($param26 + 20) & 4294967295);
					HEAP32[(($arrayidx27) >> 2)] = 1074;
					var $29 = $tr;
					var $langopts28 = (($29) & 4294967295);
					var $param29 = (($langopts28 + 24) & 4294967295);
					var $arrayidx30 = (($param29 + 16) & 4294967295);
					HEAP32[(($arrayidx30) >> 2)] = 23;
					var $30 = $tr;
					var $langopts31 = (($30) & 4294967295);
					var $param32 = (($langopts31 + 24) & 4294967295);
					var $arrayidx33 = (($param32 + 40) & 4294967295);
					HEAP32[(($arrayidx33) >> 2)] = 2;
					var $31 = $tr;
					var $langopts34 = (($31) & 4294967295);
					var $stress_rule35 = (($langopts34 + 8) & 4294967295);
					HEAP32[(($stress_rule35) >> 2)] = 2;
					var $32 = $tr;
					var $langopts36 = (($32) & 4294967295);
					var $numbers37 = (($langopts36 + 184) & 4294967295);
					HEAP32[(($numbers37) >> 2)] = 184554728;
					var $33 = $tr;
					var $langopts38 = (($33) & 4294967295);
					var $thousands_sep = (($langopts38 + 204) & 4294967295);
					HEAP32[(($thousands_sep) >> 2)] = 32;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 7) {
					var $34 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($34, ((__ZZ16SelectTranslatorPKcE17stress_lengths_bn) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_bn) & 4294967295));
					var $35 = $tr;
					var $langopts40 = (($35) & 4294967295);
					var $length_mods41 = (($langopts40 + 176) & 4294967295);
					var $36 = HEAP32[(($length_mods41) >> 2)];
					var $37 = $tr;
					var $langopts42 = (($37) & 4294967295);
					var $length_mods043 = (($langopts42 + 180) & 4294967295);
					HEAP32[(($length_mods043) >> 2)] = $36;
					var $38 = $tr;
					var $langopts44 = (($38) & 4294967295);
					var $stress_rule45 = (($langopts44 + 8) & 4294967295);
					HEAP32[(($stress_rule45) >> 2)] = 0;
					var $39 = $tr;
					var $langopts46 = (($39) & 4294967295);
					var $stress_flags47 = (($langopts46 + 12) & 4294967295);
					HEAP32[(($stress_flags47) >> 2)] = 65540;
					var $40 = $tr;
					var $letter_bits_offset48 = (($40 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset48) >> 2)] = 2432;
					var $41 = $tr;
					__Z15SetIndicLettersP10Translator($41);
					var $42 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($42, 4, 62, 76);
					var $43 = $tr;
					var $langopts49 = (($43) & 4294967295);
					var $numbers50 = (($langopts49 + 184) & 4294967295);
					HEAP32[(($numbers50) >> 2)] = 1;
					var $44 = $tr;
					var $langopts51 = (($44) & 4294967295);
					var $break_numbers = (($langopts51 + 192) & 4294967295);
					HEAP32[(($break_numbers) >> 2)] = 613567144;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 8) {
					var $45 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($45, ((__ZZ16SelectTranslatorPKcE17stress_lengths_cy) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_cy) & 4294967295));
					var $46 = HEAP32[((((_charsets + 56) & 4294967295)) >> 2)];
					var $47 = $tr;
					var $charset_a0 = (($47 + 696) & 4294967295);
					HEAP32[(($charset_a0) >> 2)] = $46;
					var $48 = $tr;
					var $langopts53 = (($48) & 4294967295);
					var $stress_rule54 = (($langopts53 + 8) & 4294967295);
					HEAP32[(($stress_rule54) >> 2)] = 2;
					var $49 = $tr;
					var $langopts55 = (($49) & 4294967295);
					var $stress_flags56 = (($langopts55 + 12) & 4294967295);
					HEAP32[(($stress_flags56) >> 2)] = 22;
					var $50 = $tr;
					var $langopts57 = (($50) & 4294967295);
					var $unstressed_wd1 = (($langopts57 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1) >> 2)] = 0;
					var $51 = $tr;
					var $langopts58 = (($51) & 4294967295);
					var $unstressed_wd2 = (($langopts58 + 20) & 4294967295);
					HEAP32[(($unstressed_wd2) >> 2)] = 2;
					var $52 = $tr;
					var $langopts59 = (($52) & 4294967295);
					var $param60 = (($langopts59 + 24) & 4294967295);
					var $arrayidx61 = (($param60 + 28) & 4294967295);
					HEAP32[(($arrayidx61) >> 2)] = 120;
					var $53 = $tr;
					var $langopts62 = (($53) & 4294967295);
					var $numbers63 = (($langopts62 + 184) & 4294967295);
					HEAP32[(($numbers63) >> 2)] = 1024;
					var $54 = $tr;
					__ZL14SetLetterVowelP10Translatori($54, 119);
					var $55 = $tr;
					__ZL14SetLetterVowelP10Translatori($55, 121);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 9) {
					var $56 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($56, ((__ZZ16SelectTranslatorPKcE17stress_lengths_da) & 4294967295), 0);
					var $57 = $tr;
					var $langopts65 = (($57) & 4294967295);
					var $stress_rule66 = (($langopts65 + 8) & 4294967295);
					HEAP32[(($stress_rule66) >> 2)] = 0;
					var $58 = $tr;
					var $langopts67 = (($58) & 4294967295);
					var $param68 = (($langopts67 + 24) & 4294967295);
					var $arrayidx69 = (($param68 + 12) & 4294967295);
					HEAP32[(($arrayidx69) >> 2)] = 1;
					var $59 = $tr;
					__ZL14SetLetterVowelP10Translatori($59, 121);
					var $60 = $tr;
					var $langopts70 = (($60) & 4294967295);
					var $numbers71 = (($langopts70 + 184) & 4294967295);
					HEAP32[(($numbers71) >> 2)] = 184618072;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 10) {
					var $61 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($61, ((__ZZ16SelectTranslatorPKcE17stress_lengths_de) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_de) & 4294967295));
					var $62 = $tr;
					var $langopts73 = (($62) & 4294967295);
					var $stress_rule74 = (($langopts73 + 8) & 4294967295);
					HEAP32[(($stress_rule74) >> 2)] = 0;
					var $63 = $tr;
					var $langopts75 = (($63) & 4294967295);
					var $word_gap = (($langopts75) & 4294967295);
					HEAP32[(($word_gap) >> 2)] = 8;
					var $64 = $tr;
					var $langopts76 = (($64) & 4294967295);
					var $vowel_pause77 = (($langopts76 + 4) & 4294967295);
					HEAP32[(($vowel_pause77) >> 2)] = 48;
					var $65 = $tr;
					var $langopts78 = (($65) & 4294967295);
					var $param79 = (($langopts78 + 24) & 4294967295);
					var $arrayidx80 = (($param79 + 12) & 4294967295);
					HEAP32[(($arrayidx80) >> 2)] = 1;
					var $66 = $tr;
					var $langopts81 = (($66) & 4294967295);
					var $param82 = (($langopts81 + 24) & 4294967295);
					var $arrayidx83 = (($param82 + 16) & 4294967295);
					HEAP32[(($arrayidx83) >> 2)] = 16;
					var $67 = $tr;
					var $langopts84 = (($67) & 4294967295);
					var $param85 = (($langopts84 + 24) & 4294967295);
					var $arrayidx86 = (($param85 + 72) & 4294967295);
					HEAP32[(($arrayidx86) >> 2)] = 87;
					var $68 = $tr;
					var $langopts87 = (($68) & 4294967295);
					var $numbers88 = (($langopts87 + 184) & 4294967295);
					HEAP32[(($numbers88) >> 2)] = 16846872;
					var $69 = $tr;
					__ZL14SetLetterVowelP10Translatori($69, 121);
					var $70 = $tr;
					var $langopts89 = (($70) & 4294967295);
					var $param90 = (($langopts89 + 24) & 4294967295);
					var $arrayidx91 = (($param90 + 20) & 4294967295);
					HEAP32[(($arrayidx91) >> 2)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 11) {
					var $71 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($71, ((__ZZ16SelectTranslatorPKcE17stress_lengths_ta) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_ta) & 4294967295));
					var $72 = $tr;
					var $langopts93 = (($72) & 4294967295);
					var $param94 = (($langopts93 + 24) & 4294967295);
					var $arrayidx95 = (($param94 + 20) & 4294967295);
					HEAP32[(($arrayidx95) >> 2)] = 1;
					var $73 = $tr;
					var $langopts96 = (($73) & 4294967295);
					var $length_mods97 = (($langopts96 + 176) & 4294967295);
					var $74 = HEAP32[(($length_mods97) >> 2)];
					var $75 = $tr;
					var $langopts98 = (($75) & 4294967295);
					var $length_mods099 = (($langopts98 + 180) & 4294967295);
					HEAP32[(($length_mods099) >> 2)] = $74;
					var $76 = $tr;
					var $letter_bits_offset100 = (($76 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset100) >> 2)] = 1920;
					var $77 = $tr;
					var $langopts101 = (($77) & 4294967295);
					var $stress_rule102 = (($langopts101 + 8) & 4294967295);
					HEAP32[(($stress_rule102) >> 2)] = 0;
					var $78 = $tr;
					var $langopts103 = (($78) & 4294967295);
					var $stress_flags104 = (($langopts103 + 12) & 4294967295);
					HEAP32[(($stress_flags104) >> 2)] = 65540;
					var $79 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($79, 1, 38, 48);
					var $80 = $tr;
					var $langopts105 = (($80) & 4294967295);
					var $break_numbers106 = (($langopts105 + 192) & 4294967295);
					HEAP32[(($break_numbers106) >> 2)] = 5288;
					var $81 = $tr;
					var $langopts107 = (($81) & 4294967295);
					var $numbers108 = (($langopts107 + 184) & 4294967295);
					HEAP32[(($numbers108) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 12) {
					var $82 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($82, ((__ZZ16SelectTranslatorPKcE17stress_lengths_en) & 4294967295), 0);
					var $83 = $tr;
					var $langopts110 = (($83) & 4294967295);
					var $stress_rule111 = (($langopts110 + 8) & 4294967295);
					HEAP32[(($stress_rule111) >> 2)] = 0;
					var $84 = $tr;
					var $langopts112 = (($84) & 4294967295);
					var $stress_flags113 = (($langopts112 + 12) & 4294967295);
					HEAP32[(($stress_flags113) >> 2)] = 8;
					var $85 = $tr;
					var $langopts114 = (($85) & 4294967295);
					var $numbers115 = (($langopts114 + 184) & 4294967295);
					HEAP32[(($numbers115) >> 2)] = 16779328;
					var $86 = $tr;
					var $langopts116 = (($86) & 4294967295);
					var $param117 = (($langopts116 + 24) & 4294967295);
					var $arrayidx118 = (($param117 + 44) & 4294967295);
					HEAP32[(($arrayidx118) >> 2)] = 2;
					var $87 = $tr;
					var $langopts119 = (($87) & 4294967295);
					var $suffix_add_e = (($langopts119 + 276) & 4294967295);
					HEAP32[(($suffix_add_e) >> 2)] = 101;
					var $88 = $tr;
					var $langopts120 = (($88) & 4294967295);
					var $param121 = (($langopts120 + 24) & 4294967295);
					var $arrayidx122 = (($param121 + 20) & 4294967295);
					HEAP32[(($arrayidx122) >> 2)] = 2;
					var $89 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($89, 6, ((__str630) & 4294967295));
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 13) {
					var $90 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($90, ((__ZZ16SelectTranslatorPKcE17stress_lengths_el) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_el) & 4294967295));
					var $91 = HEAP32[((((_charsets + 28) & 4294967295)) >> 2)];
					var $92 = $tr;
					var $charset_a0124 = (($92 + 696) & 4294967295);
					HEAP32[(($charset_a0124) >> 2)] = $91;
					var $93 = $tr;
					var $char_plus_apostrophe = (($93 + 700) & 4294967295);
					HEAP32[(($char_plus_apostrophe) >> 2)] = ((__ZZ16SelectTranslatorPKcE18el_char_apostrophe) & 4294967295);
					var $94 = $tr;
					var $letter_bits_offset125 = (($94 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset125) >> 2)] = 896;
					var $95 = $tr;
					var $letter_bits = (($95 + 708) & 4294967295);
					var $arraydecay = (($letter_bits) & 4294967295);
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $arraydecay;
					$stop$ = $dest$ + 256;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $96 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($96, 0, ((__ZZ16SelectTranslatorPKcE9el_vowels) & 4294967295));
					var $97 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($97, 7, ((__ZZ16SelectTranslatorPKcE9el_vowels) & 4294967295));
					var $98 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($98, 1, ((__ZZ16SelectTranslatorPKcE12el_voiceless) & 4294967295));
					var $99 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($99, 2, ((__ZZ16SelectTranslatorPKcE13el_consonants) & 4294967295));
					var $100 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($100, 6, ((__ZZ16SelectTranslatorPKcE10el_fvowels) & 4294967295));
					var $101 = $tr;
					var $langopts126 = (($101) & 4294967295);
					var $length_mods127 = (($langopts126 + 176) & 4294967295);
					var $102 = HEAP32[(($length_mods127) >> 2)];
					var $103 = $tr;
					var $langopts128 = (($103) & 4294967295);
					var $length_mods0129 = (($langopts128 + 180) & 4294967295);
					HEAP32[(($length_mods0129) >> 2)] = $102;
					var $104 = $tr;
					var $langopts130 = (($104) & 4294967295);
					var $stress_rule131 = (($langopts130 + 8) & 4294967295);
					HEAP32[(($stress_rule131) >> 2)] = 2;
					var $105 = $tr;
					var $langopts132 = (($105) & 4294967295);
					var $stress_flags133 = (($langopts132 + 12) & 4294967295);
					HEAP32[(($stress_flags133) >> 2)] = 6;
					var $106 = $tr;
					var $langopts134 = (($106) & 4294967295);
					var $unstressed_wd1135 = (($langopts134 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1135) >> 2)] = 0;
					var $107 = $tr;
					var $langopts136 = (($107) & 4294967295);
					var $unstressed_wd2137 = (($langopts136 + 20) & 4294967295);
					HEAP32[(($unstressed_wd2137) >> 2)] = 2;
					var $108 = $tr;
					var $langopts138 = (($108) & 4294967295);
					var $param139 = (($langopts138 + 24) & 4294967295);
					var $arrayidx140 = (($param139 + 28) & 4294967295);
					HEAP32[(($arrayidx140) >> 2)] = 130;
					var $109 = $tr;
					var $langopts141 = (($109) & 4294967295);
					var $numbers142 = (($langopts141 + 184) & 4294967295);
					HEAP32[(($numbers142) >> 2)] = 264;
					var $110 = $tr;
					var $langopts143 = (($110) & 4294967295);
					var $numbers2 = (($langopts143 + 188) & 4294967295);
					HEAP32[(($numbers2) >> 2)] = 4098;
					var $111 = $name2;
					var $cmp144 = ((($111)) | 0) == 6779491;
					if (!($cmp144)) {
						__label__ = 80;
						break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
					}
					var $112 = $tr;
					var $langopts145 = (($112) & 4294967295);
					var $param146 = (($langopts145 + 24) & 4294967295);
					var $arrayidx147 = (($param146 + 20) & 4294967295);
					HEAP32[(($arrayidx147) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 15) {
					var $113 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($113, ((__ZZ16SelectTranslatorPKcE17stress_lengths_eo) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_eo) & 4294967295));
					var $114 = HEAP32[((((_charsets + 12) & 4294967295)) >> 2)];
					var $115 = $tr;
					var $charset_a0149 = (($115 + 696) & 4294967295);
					HEAP32[(($charset_a0149) >> 2)] = $114;
					var $116 = $tr;
					var $char_plus_apostrophe150 = (($116 + 700) & 4294967295);
					HEAP32[(($char_plus_apostrophe150) >> 2)] = ((__ZZ16SelectTranslatorPKcE18eo_char_apostrophe) & 4294967295);
					var $117 = $tr;
					var $langopts151 = (($117) & 4294967295);
					var $vowel_pause152 = (($langopts151 + 4) & 4294967295);
					HEAP32[(($vowel_pause152) >> 2)] = 2;
					var $118 = $tr;
					var $langopts153 = (($118) & 4294967295);
					var $stress_rule154 = (($langopts153 + 8) & 4294967295);
					HEAP32[(($stress_rule154) >> 2)] = 2;
					var $119 = $tr;
					var $langopts155 = (($119) & 4294967295);
					var $stress_flags156 = (($langopts155 + 12) & 4294967295);
					HEAP32[(($stress_flags156) >> 2)] = 22;
					var $120 = $tr;
					var $langopts157 = (($120) & 4294967295);
					var $unstressed_wd2158 = (($langopts157 + 20) & 4294967295);
					HEAP32[(($unstressed_wd2158) >> 2)] = 2;
					var $121 = $tr;
					var $langopts159 = (($121) & 4294967295);
					var $numbers160 = (($langopts159 + 184) & 4294967295);
					HEAP32[(($numbers160) >> 2)] = 16782344;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 16) {
					var $122 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($122, ((__ZZ16SelectTranslatorPKcE17stress_lengths_es) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_es) & 4294967295));
					var $123 = $tr;
					var $langopts162 = (($123) & 4294967295);
					var $length_mods163 = (($langopts162 + 176) & 4294967295);
					var $124 = HEAP32[(($length_mods163) >> 2)];
					var $125 = $tr;
					var $langopts164 = (($125) & 4294967295);
					var $length_mods0165 = (($langopts164 + 180) & 4294967295);
					HEAP32[(($length_mods0165) >> 2)] = $124;
					var $126 = $tr;
					var $langopts166 = (($126) & 4294967295);
					var $stress_rule167 = (($langopts166 + 8) & 4294967295);
					HEAP32[(($stress_rule167) >> 2)] = 2;
					var $127 = $tr;
					var $langopts168 = (($127) & 4294967295);
					var $stress_flags169 = (($langopts168 + 12) & 4294967295);
					HEAP32[(($stress_flags169) >> 2)] = 534;
					var $128 = $tr;
					var $langopts170 = (($128) & 4294967295);
					var $unstressed_wd1171 = (($langopts170 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1171) >> 2)] = 0;
					var $129 = $tr;
					var $langopts172 = (($129) & 4294967295);
					var $unstressed_wd2173 = (($langopts172 + 20) & 4294967295);
					HEAP32[(($unstressed_wd2173) >> 2)] = 2;
					var $130 = $tr;
					var $langopts174 = (($130) & 4294967295);
					var $param175 = (($langopts174 + 24) & 4294967295);
					var $arrayidx176 = (($param175 + 28) & 4294967295);
					HEAP32[(($arrayidx176) >> 2)] = 120;
					var $131 = $tr;
					var $langopts177 = (($131) & 4294967295);
					var $numbers178 = (($langopts177 + 184) & 4294967295);
					HEAP32[(($numbers178) >> 2)] = 85984552;
					var $132 = $tr;
					var $langopts179 = (($132) & 4294967295);
					var $numbers2180 = (($langopts179 + 188) & 4294967295);
					HEAP32[(($numbers2180) >> 2)] = 4096;
					var $133 = $name2;
					var $cmp181 = ((($133)) | 0) == 25441;
					if ($cmp181) {
						__label__ = 17;;
					} else {
						__label__ = 18;;
					}
					if (__label__ == 17) {
						var $134 = $tr;
						var $punct_within_word = (($134 + 704) & 4294967295);
						HEAP32[(($punct_within_word) >> 2)] = ((__ZZ16SelectTranslatorPKcE20ca_punct_within_word) & 4294967295);
						var $135 = $tr;
						var $langopts183 = (($135) & 4294967295);
						var $stress_flags184 = (($langopts183 + 12) & 4294967295);
						HEAP32[(($stress_flags184) >> 2)] = 566;
						__label__ = 80;
						break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
					} else if (__label__ == 18) {
						var $136 = $name2;
						var $cmp185 = ((($136)) | 0) == 7364976;
						var $137 = $tr;
						var $langopts187 = (($137) & 4294967295);
						if ($cmp185) {
							__label__ = 19;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 19) {
							var $stress_flags188 = (($langopts187 + 12) & 4294967295);
							HEAP32[(($stress_flags188) >> 2)] = 310;
							__label__ = 80;
							break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
						} else if (__label__ == 20) {
							var $param191 = (($langopts187 + 24) & 4294967295);
							var $arrayidx192 = (($param191 + 20) & 4294967295);
							HEAP32[(($arrayidx192) >> 2)] = 2;
							__label__ = 80;
							break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
						}
					}
				} else if (__label__ == 21) {
					var $138 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($138, ((__ZZ16SelectTranslatorPKcE17stress_lengths_eu) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_eu) & 4294967295));
					var $139 = $tr;
					var $langopts196 = (($139) & 4294967295);
					var $stress_rule197 = (($langopts196 + 8) & 4294967295);
					HEAP32[(($stress_rule197) >> 2)] = 1;
					var $140 = $tr;
					var $langopts198 = (($140) & 4294967295);
					var $numbers199 = (($langopts198 + 184) & 4294967295);
					HEAP32[(($numbers199) >> 2)] = 1049960;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 22) {
					var $141 = $tr;
					var $letter_bits_offset201 = (($141 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset201) >> 2)] = 1536;
					var $142 = $tr;
					var $langopts202 = (($142) & 4294967295);
					var $numbers203 = (($langopts202 + 184) & 4294967295);
					HEAP32[(($numbers203) >> 2)] = 96;
					var $143 = $tr;
					var $langopts204 = (($143) & 4294967295);
					var $param205 = (($langopts204 + 24) & 4294967295);
					var $arrayidx206 = (($param205 + 20) & 4294967295);
					HEAP32[(($arrayidx206) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 23) {
					var $144 = HEAP32[((((_charsets + 16) & 4294967295)) >> 2)];
					var $145 = $tr;
					var $charset_a0208 = (($145 + 696) & 4294967295);
					HEAP32[(($charset_a0208) >> 2)] = $144;
					__label__ = 24;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 25) {
					var $155 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($155, ((__ZZ16SelectTranslatorPKcE17stress_lengths_fr) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_fr) & 4294967295));
					var $156 = $tr;
					var $langopts223 = (($156) & 4294967295);
					var $stress_rule224 = (($langopts223 + 8) & 4294967295);
					HEAP32[(($stress_rule224) >> 2)] = 3;
					var $157 = $tr;
					var $langopts225 = (($157) & 4294967295);
					var $stress_flags226 = (($langopts225 + 12) & 4294967295);
					HEAP32[(($stress_flags226) >> 2)] = 36;
					var $158 = $tr;
					var $langopts227 = (($158) & 4294967295);
					var $param228 = (($langopts227 + 24) & 4294967295);
					var $arrayidx229 = (($param228 + 8) & 4294967295);
					HEAP32[(($arrayidx229) >> 2)] = 1;
					var $159 = $tr;
					var $langopts230 = (($159) & 4294967295);
					var $length_mods231 = (($langopts230 + 176) & 4294967295);
					var $160 = HEAP32[(($length_mods231) >> 2)];
					var $161 = $tr;
					var $langopts232 = (($161) & 4294967295);
					var $length_mods0233 = (($langopts232 + 180) & 4294967295);
					HEAP32[(($length_mods0233) >> 2)] = $160;
					var $162 = $tr;
					var $langopts234 = (($162) & 4294967295);
					var $accents235 = (($langopts234 + 220) & 4294967295);
					HEAP32[(($accents235) >> 2)] = 2;
					var $163 = $tr;
					var $langopts236 = (($163) & 4294967295);
					var $numbers237 = (($langopts236 + 184) & 4294967295);
					HEAP32[(($numbers237) >> 2)] = 118658312;
					var $164 = $tr;
					__ZL14SetLetterVowelP10Translatori($164, 121);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 26) {
					var $165 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($165, ((__ZZ16SelectTranslatorPKcE17stress_lengths_hi) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_hi) & 4294967295));
					var $166 = HEAP32[((((_charsets + 76) & 4294967295)) >> 2)];
					var $167 = $tr;
					var $charset_a0239 = (($167 + 696) & 4294967295);
					HEAP32[(($charset_a0239) >> 2)] = $166;
					var $168 = $tr;
					var $langopts240 = (($168) & 4294967295);
					var $length_mods241 = (($langopts240 + 176) & 4294967295);
					var $169 = HEAP32[(($length_mods241) >> 2)];
					var $170 = $tr;
					var $langopts242 = (($170) & 4294967295);
					var $length_mods0243 = (($langopts242 + 180) & 4294967295);
					HEAP32[(($length_mods0243) >> 2)] = $169;
					var $171 = $tr;
					var $langopts244 = (($171) & 4294967295);
					var $stress_rule245 = (($langopts244 + 8) & 4294967295);
					HEAP32[(($stress_rule245) >> 2)] = 6;
					var $172 = $tr;
					var $langopts246 = (($172) & 4294967295);
					var $stress_flags247 = (($langopts246 + 12) & 4294967295);
					HEAP32[(($stress_flags247) >> 2)] = 65540;
					var $173 = $tr;
					var $langopts248 = (($173) & 4294967295);
					var $numbers249 = (($langopts248 + 184) & 4294967295);
					HEAP32[(($numbers249) >> 2)] = 16;
					var $174 = $tr;
					var $langopts250 = (($174) & 4294967295);
					var $break_numbers251 = (($langopts250 + 192) & 4294967295);
					HEAP32[(($break_numbers251) >> 2)] = 84648;
					var $175 = $tr;
					var $letter_bits_offset252 = (($175 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset252) >> 2)] = 2304;
					var $176 = $name2;
					var $cmp253 = ((($176)) | 0) == 28769;
					if ($cmp253) {
						__label__ = 27;;
					} else {
						__label__ = 28;;
					}
					if (__label__ == 27) {
						var $177 = $tr;
						var $letter_bits_offset255 = (($177 + 964) & 4294967295);
						HEAP32[(($letter_bits_offset255) >> 2)] = 2560;;
					}
					var $178 = $tr;
					__Z15SetIndicLettersP10Translator($178);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 29) {
					var $cmp258 = ((($7)) | 0) == 29554;
					var $179 = $tr;
					if ($cmp258) {
						__label__ = 30;;
					} else {
						__label__ = 31;;
					}
					if (__label__ == 30) {
						__Z15SetupTranslatorP10TranslatorPKsPKh($179, ((__ZZ16SelectTranslatorPKcE17stress_lengths_sr) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_hr) & 4294967295));;
					} else if (__label__ == 31) {
						__Z15SetupTranslatorP10TranslatorPKsPKh($179, ((__ZZ16SelectTranslatorPKcE17stress_lengths_hr) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_hr) & 4294967295));;
					}
					var $180 = HEAP32[((((_charsets + 8) & 4294967295)) >> 2)];
					var $181 = $tr;
					var $charset_a0262 = (($181 + 696) & 4294967295);
					HEAP32[(($charset_a0262) >> 2)] = $180;
					var $182 = $tr;
					var $langopts263 = (($182) & 4294967295);
					var $stress_rule264 = (($langopts263 + 8) & 4294967295);
					HEAP32[(($stress_rule264) >> 2)] = 0;
					var $183 = $tr;
					var $langopts265 = (($183) & 4294967295);
					var $stress_flags266 = (($langopts265 + 12) & 4294967295);
					HEAP32[(($stress_flags266) >> 2)] = 16;
					var $184 = $tr;
					var $langopts267 = (($184) & 4294967295);
					var $param268 = (($langopts267 + 24) & 4294967295);
					var $arrayidx269 = (($param268 + 16) & 4294967295);
					HEAP32[(($arrayidx269) >> 2)] = 3;
					var $185 = $tr;
					var $langopts270 = (($185) & 4294967295);
					var $max_initial_consonants = (($langopts270 + 248) & 4294967295);
					HEAP8[($max_initial_consonants)] = 5;
					var $186 = $tr;
					var $langopts271 = (($186) & 4294967295);
					var $spelling_stress272 = (($langopts271 + 249) & 4294967295);
					HEAP8[($spelling_stress272)] = 1;
					var $187 = $tr;
					var $langopts273 = (($187) & 4294967295);
					var $accents274 = (($langopts273 + 220) & 4294967295);
					HEAP32[(($accents274) >> 2)] = 1;
					var $188 = $tr;
					var $langopts275 = (($188) & 4294967295);
					var $numbers276 = (($langopts275 + 184) & 4294967295);
					HEAP32[(($numbers276) >> 2)] = 33572172;
					var $189 = $tr;
					var $langopts277 = (($189) & 4294967295);
					var $numbers2278 = (($langopts277 + 188) & 4294967295);
					HEAP32[(($numbers2278) >> 2)] = 74;
					var $190 = $tr;
					var $langopts279 = (($190) & 4294967295);
					var $replace_chars = (($langopts279 + 264) & 4294967295);
					HEAP32[(($replace_chars) >> 2)] = ((__ZL22replace_cyrillic_latin) & 4294967295);
					var $191 = $tr;
					__ZL14SetLetterVowelP10Translatori($191, 121);
					var $192 = $tr;
					__ZL14SetLetterVowelP10Translatori($192, 114);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 33) {
					var $193 = $tr;
					var $langopts281 = (($193) & 4294967295);
					var $stress_rule282 = (($langopts281 + 8) & 4294967295);
					HEAP32[(($stress_rule282) >> 2)] = 3;
					var $194 = $tr;
					var $langopts283 = (($194) & 4294967295);
					var $stress_flags284 = (($langopts283 + 12) & 4294967295);
					HEAP32[(($stress_flags284) >> 2)] = 36;
					var $195 = $tr;
					var $langopts285 = (($195) & 4294967295);
					var $numbers286 = (($langopts285 + 184) & 4294967295);
					HEAP32[(($numbers286) >> 2)] = 17990912;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 34) {
					var $196 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($196, ((__ZZ16SelectTranslatorPKcE17stress_lengths_hu) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_hu) & 4294967295));
					var $197 = HEAP32[((((_charsets + 8) & 4294967295)) >> 2)];
					var $198 = $tr;
					var $charset_a0288 = (($198 + 696) & 4294967295);
					HEAP32[(($charset_a0288) >> 2)] = $197;
					var $199 = $tr;
					var $langopts289 = (($199) & 4294967295);
					var $vowel_pause290 = (($langopts289 + 4) & 4294967295);
					HEAP32[(($vowel_pause290) >> 2)] = 32;
					var $200 = $tr;
					var $langopts291 = (($200) & 4294967295);
					var $stress_rule292 = (($langopts291 + 8) & 4294967295);
					HEAP32[(($stress_rule292) >> 2)] = 0;
					var $201 = $tr;
					var $langopts293 = (($201) & 4294967295);
					var $stress_flags294 = (($langopts293 + 12) & 4294967295);
					HEAP32[(($stress_flags294) >> 2)] = 1081398;
					var $202 = $tr;
					var $langopts295 = (($202) & 4294967295);
					var $unstressed_wd1296 = (($langopts295 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1296) >> 2)] = 2;
					var $203 = $tr;
					var $langopts297 = (($203) & 4294967295);
					var $param298 = (($langopts297 + 24) & 4294967295);
					var $arrayidx299 = (($param298 + 56) & 4294967295);
					HEAP32[(($arrayidx299) >> 2)] = 1;
					var $204 = $tr;
					var $langopts300 = (($204) & 4294967295);
					var $param301 = (($langopts300 + 24) & 4294967295);
					var $arrayidx302 = (($param301 + 68) & 4294967295);
					HEAP32[(($arrayidx302) >> 2)] = 2;
					var $205 = $tr;
					var $langopts303 = (($205) & 4294967295);
					var $numbers304 = (($langopts303 + 184) & 4294967295);
					HEAP32[(($numbers304) >> 2)] = 186758144;
					var $206 = $tr;
					var $langopts305 = (($206) & 4294967295);
					var $thousands_sep306 = (($langopts305 + 204) & 4294967295);
					HEAP32[(($thousands_sep306) >> 2)] = 32;
					var $207 = $tr;
					var $langopts307 = (($207) & 4294967295);
					var $decimal_sep = (($langopts307 + 208) & 4294967295);
					HEAP32[(($decimal_sep) >> 2)] = 44;
					var $208 = $tr;
					var $langopts308 = (($208) & 4294967295);
					var $max_roman = (($langopts308 + 196) & 4294967295);
					HEAP32[(($max_roman) >> 2)] = 899;
					var $209 = $tr;
					var $langopts309 = (($209) & 4294967295);
					var $min_roman = (($langopts309 + 200) & 4294967295);
					HEAP32[(($min_roman) >> 2)] = 1;
					var $210 = $tr;
					__ZL14SetLetterVowelP10Translatori($210, 121);
					var $211 = $tr;
					var $langopts310 = (($211) & 4294967295);
					var $spelling_stress311 = (($langopts310 + 249) & 4294967295);
					HEAP8[($spelling_stress311)] = 1;
					var $212 = $tr;
					__Z13SetLengthModsP10Translatori($212, 3);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 35) {
					var $213 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($213, ((__ZZ16SelectTranslatorPKcE17stress_lengths_hy) & 4294967295), 0);
					var $214 = $tr;
					var $langopts313 = (($214) & 4294967295);
					var $stress_rule314 = (($langopts313 + 8) & 4294967295);
					HEAP32[(($stress_rule314) >> 2)] = 3;
					var $215 = $tr;
					var $letter_bits_offset315 = (($215 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset315) >> 2)] = 1328;
					var $216 = $tr;
					var $letter_bits316 = (($216 + 708) & 4294967295);
					var $arraydecay317 = (($letter_bits316) & 4294967295);
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $arraydecay317;
					$stop$ = $dest$ + 256;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $217 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($217, 0, ((__ZZ16SelectTranslatorPKcE9hy_vowels) & 4294967295));
					var $218 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($218, 7, ((__ZZ16SelectTranslatorPKcE9hy_vowels) & 4294967295));
					var $219 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($219, 2, ((__ZZ16SelectTranslatorPKcE13hy_consonants) & 4294967295));
					var $220 = $tr;
					var $langopts318 = (($220) & 4294967295);
					var $max_initial_consonants319 = (($langopts318 + 248) & 4294967295);
					HEAP8[($max_initial_consonants319)] = 6;
					var $221 = $tr;
					var $langopts320 = (($221) & 4294967295);
					var $numbers321 = (($langopts320 + 184) & 4294967295);
					HEAP32[(($numbers321) >> 2)] = 1032;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 36) {
					var $222 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($222, ((__ZZ16SelectTranslatorPKcE17stress_lengths_id) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_id) & 4294967295));
					var $223 = $tr;
					var $langopts323 = (($223) & 4294967295);
					var $stress_rule324 = (($langopts323 + 8) & 4294967295);
					HEAP32[(($stress_rule324) >> 2)] = 2;
					var $224 = $tr;
					var $langopts325 = (($224) & 4294967295);
					var $numbers326 = (($langopts325 + 184) & 4294967295);
					HEAP32[(($numbers326) >> 2)] = 16781320;
					var $225 = $tr;
					var $langopts327 = (($225) & 4294967295);
					var $stress_flags328 = (($langopts327 + 12) & 4294967295);
					HEAP32[(($stress_flags328) >> 2)] = 22;
					var $226 = $tr;
					var $langopts329 = (($226) & 4294967295);
					var $accents330 = (($langopts329 + 220) & 4294967295);
					HEAP32[(($accents330) >> 2)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 37) {
					var $227 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($227, ((__ZZ16SelectTranslatorPKcE17stress_lengths_is) & 4294967295), 0);
					var $228 = $tr;
					var $langopts332 = (($228) & 4294967295);
					var $stress_rule333 = (($langopts332 + 8) & 4294967295);
					HEAP32[(($stress_rule333) >> 2)] = 0;
					var $229 = $tr;
					var $langopts334 = (($229) & 4294967295);
					var $stress_flags335 = (($langopts334 + 12) & 4294967295);
					HEAP32[(($stress_flags335) >> 2)] = 16;
					var $230 = $tr;
					var $langopts336 = (($230) & 4294967295);
					var $param337 = (($langopts336 + 24) & 4294967295);
					var $arrayidx338 = (($param337 + 8) & 4294967295);
					HEAP32[(($arrayidx338) >> 2)] = 17;
					var $231 = $tr;
					var $langopts339 = (($231) & 4294967295);
					var $param340 = (($langopts339 + 24) & 4294967295);
					var $arrayidx341 = (($param340 + 40) & 4294967295);
					HEAP32[(($arrayidx341) >> 2)] = 2;
					var $232 = $tr;
					__ZL15ResetLetterBitsP10Translatori($232, 24);
					var $233 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($233, 4, ((__str1631) & 4294967295));
					var $234 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($234, 3, ((__str2632) & 4294967295));
					var $235 = $tr;
					var $letter_groups = (($235 + 968) & 4294967295);
					var $arrayidx342 = (($letter_groups + 4) & 4294967295);
					HEAP32[(($arrayidx342) >> 2)] = ((__ZZ16SelectTranslatorPKcE16is_lettergroup_B) & 4294967295);
					var $236 = $tr;
					__ZL14SetLetterVowelP10Translatori($236, 121);
					var $237 = $tr;
					var $langopts343 = (($237) & 4294967295);
					var $numbers344 = (($langopts343 + 184) & 4294967295);
					HEAP32[(($numbers344) >> 2)] = 2280;
					var $238 = $tr;
					var $langopts345 = (($238) & 4294967295);
					var $numbers2346 = (($langopts345 + 188) & 4294967295);
					HEAP32[(($numbers2346) >> 2)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 38) {
					var $239 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($239, ((__ZZ16SelectTranslatorPKcE17stress_lengths_it) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_it) & 4294967295));
					var $240 = $tr;
					var $langopts348 = (($240) & 4294967295);
					var $length_mods349 = (($langopts348 + 176) & 4294967295);
					var $241 = HEAP32[(($length_mods349) >> 2)];
					var $242 = $tr;
					var $langopts350 = (($242) & 4294967295);
					var $length_mods0351 = (($langopts350 + 180) & 4294967295);
					HEAP32[(($length_mods0351) >> 2)] = $241;
					var $243 = $tr;
					var $langopts352 = (($243) & 4294967295);
					var $stress_rule353 = (($langopts352 + 8) & 4294967295);
					HEAP32[(($stress_rule353) >> 2)] = 2;
					var $244 = $tr;
					var $langopts354 = (($244) & 4294967295);
					var $stress_flags355 = (($langopts354 + 12) & 4294967295);
					HEAP32[(($stress_flags355) >> 2)] = 131088;
					var $245 = $tr;
					var $langopts356 = (($245) & 4294967295);
					var $vowel_pause357 = (($langopts356 + 4) & 4294967295);
					HEAP32[(($vowel_pause357) >> 2)] = 1;
					var $246 = $tr;
					var $langopts358 = (($246) & 4294967295);
					var $unstressed_wd1359 = (($langopts358 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1359) >> 2)] = 2;
					var $247 = $tr;
					var $langopts360 = (($247) & 4294967295);
					var $unstressed_wd2361 = (($langopts360 + 20) & 4294967295);
					HEAP32[(($unstressed_wd2361) >> 2)] = 2;
					var $248 = $tr;
					var $langopts362 = (($248) & 4294967295);
					var $param363 = (($langopts362 + 24) & 4294967295);
					var $arrayidx364 = (($param363 + 8) & 4294967295);
					HEAP32[(($arrayidx364) >> 2)] = 2;
					var $249 = $tr;
					var $langopts365 = (($249) & 4294967295);
					var $param366 = (($langopts365 + 24) & 4294967295);
					var $arrayidx367 = (($param366 + 56) & 4294967295);
					HEAP32[(($arrayidx367) >> 2)] = 2;
					var $250 = $tr;
					var $langopts368 = (($250) & 4294967295);
					var $param369 = (($langopts368 + 24) & 4294967295);
					var $arrayidx370 = (($param369 + 28) & 4294967295);
					HEAP32[(($arrayidx370) >> 2)] = 130;
					var $251 = $tr;
					var $langopts371 = (($251) & 4294967295);
					var $param372 = (($langopts371 + 24) & 4294967295);
					var $arrayidx373 = (($param372 + 40) & 4294967295);
					HEAP32[(($arrayidx373) >> 2)] = 1;
					var $252 = $tr;
					var $langopts374 = (($252) & 4294967295);
					var $param375 = (($langopts374 + 24) & 4294967295);
					var $arrayidx376 = (($param375 + 60) & 4294967295);
					HEAP32[(($arrayidx376) >> 2)] = 2;
					var $253 = $tr;
					var $langopts377 = (($253) & 4294967295);
					var $numbers378 = (($langopts377 + 184) & 4294967295);
					HEAP32[(($numbers378) >> 2)] = 16786952;
					var $254 = $tr;
					var $langopts379 = (($254) & 4294967295);
					var $accents380 = (($langopts379 + 220) & 4294967295);
					HEAP32[(($accents380) >> 2)] = 2;
					var $255 = $tr;
					__ZL14SetLetterVowelP10Translatori($255, 121);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 39) {
					var $256 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($256, ((__ZZ16SelectTranslatorPKcE18stress_lengths_jbo) & 4294967295), 0);
					var $257 = $tr;
					var $langopts382 = (($257) & 4294967295);
					var $stress_rule383 = (($langopts382 + 8) & 4294967295);
					HEAP32[(($stress_rule383) >> 2)] = 2;
					var $258 = $tr;
					var $langopts384 = (($258) & 4294967295);
					var $vowel_pause385 = (($langopts384 + 4) & 4294967295);
					HEAP32[(($vowel_pause385) >> 2)] = 524;
					var $259 = $tr;
					var $punct_within_word386 = (($259 + 704) & 4294967295);
					HEAP32[(($punct_within_word386) >> 2)] = ((__ZZ16SelectTranslatorPKcE21jbo_punct_within_word) & 4294967295);
					var $260 = $tr;
					var $langopts387 = (($260) & 4294967295);
					var $param388 = (($langopts387 + 24) & 4294967295);
					var $arrayidx389 = (($param388 + 52) & 4294967295);
					HEAP32[(($arrayidx389) >> 2)] = 2;
					var $261 = $tr;
					__ZL14SetLetterVowelP10Translatori($261, 121);
					var $262 = $tr;
					var $langopts390 = (($262) & 4294967295);
					var $max_lengthmod = (($langopts390 + 272) & 4294967295);
					HEAP32[(($max_lengthmod) >> 2)] = 368;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 40) {
					var $263 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($263, ((__ZZ16SelectTranslatorPKcE17stress_lengths_ta) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_ta) & 4294967295));
					var $264 = $tr;
					var $letter_bits392 = (($264 + 708) & 4294967295);
					var $arraydecay393 = (($letter_bits392) & 4294967295);
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $arraydecay393;
					$stop$ = $dest$ + 256;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $265 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($265, 0, ((__ZZ16SelectTranslatorPKcE9ka_vowels) & 4294967295));
					var $266 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($266, 2, ((__ZZ16SelectTranslatorPKcE13ka_consonants) & 4294967295));
					var $267 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($267, 7, ((__ZZ16SelectTranslatorPKcE9ka_vowels) & 4294967295));
					var $268 = $tr;
					var $langopts394 = (($268) & 4294967295);
					var $stress_rule395 = (($langopts394 + 8) & 4294967295);
					HEAP32[(($stress_rule395) >> 2)] = 0;
					var $269 = $tr;
					var $langopts396 = (($269) & 4294967295);
					var $stress_flags397 = (($langopts396 + 12) & 4294967295);
					HEAP32[(($stress_flags397) >> 2)] = 16;
					var $270 = $tr;
					var $letter_bits_offset398 = (($270 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset398) >> 2)] = 4224;
					var $271 = $tr;
					var $langopts399 = (($271) & 4294967295);
					var $max_initial_consonants400 = (($langopts399 + 248) & 4294967295);
					HEAP8[($max_initial_consonants400)] = 7;
					var $272 = $tr;
					var $langopts401 = (($272) & 4294967295);
					var $numbers402 = (($langopts401 + 184) & 4294967295);
					HEAP32[(($numbers402) >> 2)] = 3187744;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 41) {
					var $273 = $tr;
					var $letter_bits_offset404 = (($273 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset404) >> 2)] = 4352;
					var $274 = $tr;
					var $letter_bits405 = (($274 + 708) & 4294967295);
					var $arraydecay406 = (($letter_bits405) & 4294967295);
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $arraydecay406;
					$stop$ = $dest$ + 256;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $275 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($275, 0, 97, 117);
					var $276 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($276, 6, ((__ZZ16SelectTranslatorPKcE10ko_ivowels) & 4294967295));
					var $277 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($277, 5, ((__ZZ16SelectTranslatorPKcE9ko_voiced) & 4294967295));
					var $278 = $tr;
					var $langopts407 = (($278) & 4294967295);
					var $stress_rule408 = (($langopts407 + 8) & 4294967295);
					HEAP32[(($stress_rule408) >> 2)] = 8;
					var $279 = $tr;
					var $langopts409 = (($279) & 4294967295);
					var $param410 = (($langopts409 + 24) & 4294967295);
					var $arrayidx411 = (($param410 + 20) & 4294967295);
					HEAP32[(($arrayidx411) >> 2)] = 1;
					var $280 = $tr;
					var $langopts412 = (($280) & 4294967295);
					var $numbers413 = (($langopts412 + 184) & 4294967295);
					HEAP32[(($numbers413) >> 2)] = 1024;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 42) {
					var $281 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($281, ((__ZZ16SelectTranslatorPKcE17stress_lengths_ku) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_ku) & 4294967295));
					var $282 = HEAP32[((((_charsets + 36) & 4294967295)) >> 2)];
					var $283 = $tr;
					var $charset_a0415 = (($283 + 696) & 4294967295);
					HEAP32[(($charset_a0415) >> 2)] = $282;
					var $284 = $tr;
					var $langopts416 = (($284) & 4294967295);
					var $stress_rule417 = (($langopts416 + 8) & 4294967295);
					HEAP32[(($stress_rule417) >> 2)] = 7;
					var $285 = $tr;
					var $langopts418 = (($285) & 4294967295);
					var $numbers419 = (($langopts418 + 184) & 4294967295);
					HEAP32[(($numbers419) >> 2)] = 263264;
					var $286 = $tr;
					var $langopts420 = (($286) & 4294967295);
					var $max_initial_consonants421 = (($langopts420 + 248) & 4294967295);
					HEAP8[($max_initial_consonants421)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 43) {
					var $287 = HEAP32[((((_charsets + 16) & 4294967295)) >> 2)];
					var $288 = $tr;
					var $charset_a0423 = (($288 + 696) & 4294967295);
					HEAP32[(($charset_a0423) >> 2)] = $287;
					var $289 = $tr;
					var $langopts424 = (($289) & 4294967295);
					var $stress_rule425 = (($langopts424 + 8) & 4294967295);
					HEAP32[(($stress_rule425) >> 2)] = 2;
					var $290 = $tr;
					var $langopts426 = (($290) & 4294967295);
					var $stress_flags427 = (($langopts426 + 12) & 4294967295);
					HEAP32[(($stress_flags427) >> 2)] = 32;
					var $291 = $tr;
					var $langopts428 = (($291) & 4294967295);
					var $unstressed_wd1429 = (($langopts428 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1429) >> 2)] = 0;
					var $292 = $tr;
					var $langopts430 = (($292) & 4294967295);
					var $unstressed_wd2431 = (($langopts430 + 20) & 4294967295);
					HEAP32[(($unstressed_wd2431) >> 2)] = 2;
					var $293 = $tr;
					var $langopts432 = (($293) & 4294967295);
					var $param433 = (($langopts432 + 24) & 4294967295);
					var $arrayidx434 = (($param433 + 4) & 4294967295);
					HEAP32[(($arrayidx434) >> 2)] = 1;
					var $294 = $tr;
					var $langopts435 = (($294) & 4294967295);
					var $numbers436 = (($langopts435 + 184) & 4294967295);
					HEAP32[(($numbers436) >> 2)] = 16777216;
					var $295 = $tr;
					var $langopts437 = (($295) & 4294967295);
					var $max_roman438 = (($langopts437 + 196) & 4294967295);
					HEAP32[(($max_roman438) >> 2)] = 5000;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 44) {
					var $296 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($296, ((__ZZ16SelectTranslatorPKcE17stress_lengths_lv) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_lv) & 4294967295));
					var $297 = $tr;
					var $langopts440 = (($297) & 4294967295);
					var $stress_rule441 = (($langopts440 + 8) & 4294967295);
					HEAP32[(($stress_rule441) >> 2)] = 0;
					var $298 = $tr;
					var $langopts442 = (($298) & 4294967295);
					var $spelling_stress443 = (($langopts442 + 249) & 4294967295);
					HEAP8[($spelling_stress443)] = 1;
					var $299 = HEAP32[((((_charsets + 16) & 4294967295)) >> 2)];
					var $300 = $tr;
					var $charset_a0444 = (($300 + 696) & 4294967295);
					HEAP32[(($charset_a0444) >> 2)] = $299;
					var $301 = $tr;
					var $langopts445 = (($301) & 4294967295);
					var $numbers446 = (($langopts445 + 184) & 4294967295);
					HEAP32[(($numbers446) >> 2)] = 99336;
					var $302 = $tr;
					var $langopts447 = (($302) & 4294967295);
					var $stress_flags448 = (($langopts447 + 12) & 4294967295);
					HEAP32[(($stress_flags448) >> 2)] = 262166;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 45) {
					var $303 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($303, ((__ZZ16SelectTranslatorPKcE17stress_lengths_mk) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_mk) & 4294967295));
					var $304 = HEAP32[((((_charsets + 20) & 4294967295)) >> 2)];
					var $305 = $tr;
					var $charset_a0450 = (($305 + 696) & 4294967295);
					HEAP32[(($charset_a0450) >> 2)] = $304;
					var $306 = $tr;
					var $letter_groups451 = (($306 + 968) & 4294967295);
					var $arrayidx452 = (($letter_groups451 + 28) & 4294967295);
					HEAP32[(($arrayidx452) >> 2)] = ((__ZZ16SelectTranslatorPKcE15vowels_cyrillic) & 4294967295);
					var $307 = $tr;
					var $letter_groups453 = (($307 + 968) & 4294967295);
					var $arrayidx454 = (($letter_groups453) & 4294967295);
					HEAP32[(($arrayidx454) >> 2)] = ((__ZZ16SelectTranslatorPKcE15vowels_cyrillic) & 4294967295);
					var $308 = $tr;
					var $langopts455 = (($308) & 4294967295);
					var $stress_rule456 = (($langopts455 + 8) & 4294967295);
					HEAP32[(($stress_rule456) >> 2)] = 4;
					var $309 = $tr;
					var $langopts457 = (($309) & 4294967295);
					var $numbers458 = (($langopts457 + 184) & 4294967295);
					HEAP32[(($numbers458) >> 2)] = 2114600;
					var $310 = $tr;
					var $langopts459 = (($310) & 4294967295);
					var $numbers2460 = (($langopts459 + 188) & 4294967295);
					HEAP32[(($numbers2460) >> 2)] = 138;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 46) {
					var $311 = $tr;
					var $langopts462 = (($311) & 4294967295);
					var $stress_rule463 = (($langopts462 + 8) & 4294967295);
					HEAP32[(($stress_rule463) >> 2)] = 0;
					var $312 = $tr;
					var $langopts464 = (($312) & 4294967295);
					var $vowel_pause465 = (($langopts464 + 4) & 4294967295);
					HEAP32[(($vowel_pause465) >> 2)] = 48;
					var $313 = $tr;
					var $langopts466 = (($313) & 4294967295);
					var $param467 = (($langopts466 + 24) & 4294967295);
					var $arrayidx468 = (($param467 + 4) & 4294967295);
					HEAP32[(($arrayidx468) >> 2)] = 1;
					var $314 = $tr;
					var $langopts469 = (($314) & 4294967295);
					var $param470 = (($langopts469 + 24) & 4294967295);
					var $arrayidx471 = (($param470 + 12) & 4294967295);
					HEAP32[(($arrayidx471) >> 2)] = 1;
					var $315 = $tr;
					var $langopts472 = (($315) & 4294967295);
					var $param473 = (($langopts472 + 24) & 4294967295);
					var $arrayidx474 = (($param473 + 16) & 4294967295);
					HEAP32[(($arrayidx474) >> 2)] = 16;
					var $316 = $tr;
					__ZL14SetLetterVowelP10Translatori($316, 121);
					var $317 = $tr;
					var $langopts475 = (($317) & 4294967295);
					var $numbers476 = (($langopts475 + 184) & 4294967295);
					HEAP32[(($numbers476) >> 2)] = 2169880;
					var $318 = $tr;
					var $langopts477 = (($318) & 4294967295);
					var $ordinal_indicator = (($langopts477 + 216) & 4294967295);
					HEAP32[(($ordinal_indicator) >> 2)] = ((__str3633) & 4294967295);
					var $319 = $tr;
					var $langopts478 = (($319) & 4294967295);
					var $stress_flags479 = (($langopts478 + 12) & 4294967295);
					HEAP32[(($stress_flags479) >> 2)] = 128;
					var $320 = $tr;
					var $stress_lengths = (($320 + 676) & 4294967295);
					var $arraydecay480 = (($stress_lengths) & 4294967295);
					var $321 = $arraydecay480;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = __ZZ16SelectTranslatorPKcE17stress_lengths_nl;
					$dest$ = $321;
					$stop$ = $src$ + 16;
					if (($dest$ % 4) == ($src$ % 4) && 16 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 47) {
					var $322 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($322, ((__ZZ16SelectTranslatorPKcE17stress_lengths_no) & 4294967295), 0);
					var $323 = $tr;
					var $langopts482 = (($323) & 4294967295);
					var $stress_rule483 = (($langopts482 + 8) & 4294967295);
					HEAP32[(($stress_rule483) >> 2)] = 0;
					var $324 = $tr;
					__ZL14SetLetterVowelP10Translatori($324, 121);
					var $325 = $tr;
					var $langopts484 = (($325) & 4294967295);
					var $numbers485 = (($langopts484 + 184) & 4294967295);
					HEAP32[(($numbers485) >> 2)] = 71752;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 48) {
					var $326 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($326, ((__ZZ16SelectTranslatorPKcE17stress_lengths_om) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_om) & 4294967295));
					var $327 = $tr;
					var $langopts487 = (($327) & 4294967295);
					var $stress_rule488 = (($langopts487 + 8) & 4294967295);
					HEAP32[(($stress_rule488) >> 2)] = 2;
					var $328 = $tr;
					var $langopts489 = (($328) & 4294967295);
					var $stress_flags490 = (($langopts489 + 12) & 4294967295);
					HEAP32[(($stress_flags490) >> 2)] = 524310;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 49) {
					var $329 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($329, ((__ZZ16SelectTranslatorPKcE17stress_lengths_pl) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_pl) & 4294967295));
					var $330 = HEAP32[((((_charsets + 8) & 4294967295)) >> 2)];
					var $331 = $tr;
					var $charset_a0492 = (($331 + 696) & 4294967295);
					HEAP32[(($charset_a0492) >> 2)] = $330;
					var $332 = $tr;
					var $langopts493 = (($332) & 4294967295);
					var $stress_rule494 = (($langopts493 + 8) & 4294967295);
					HEAP32[(($stress_rule494) >> 2)] = 2;
					var $333 = $tr;
					var $langopts495 = (($333) & 4294967295);
					var $stress_flags496 = (($langopts495 + 12) & 4294967295);
					HEAP32[(($stress_flags496) >> 2)] = 6;
					var $334 = $tr;
					var $langopts497 = (($334) & 4294967295);
					var $param498 = (($langopts497 + 24) & 4294967295);
					var $arrayidx499 = (($param498 + 16) & 4294967295);
					HEAP32[(($arrayidx499) >> 2)] = 8;
					var $335 = $tr;
					var $langopts500 = (($335) & 4294967295);
					var $max_initial_consonants501 = (($langopts500 + 248) & 4294967295);
					HEAP8[($max_initial_consonants501)] = 7;
					var $336 = $tr;
					var $langopts502 = (($336) & 4294967295);
					var $numbers503 = (($langopts502 + 184) & 4294967295);
					HEAP32[(($numbers503) >> 2)] = 20488;
					var $337 = $tr;
					var $langopts504 = (($337) & 4294967295);
					var $numbers2505 = (($langopts504 + 188) & 4294967295);
					HEAP32[(($numbers2505) >> 2)] = 64;
					var $338 = $tr;
					var $langopts506 = (($338) & 4294967295);
					var $param507 = (($langopts506 + 24) & 4294967295);
					var $arrayidx508 = (($param507 + 44) & 4294967295);
					HEAP32[(($arrayidx508) >> 2)] = 260;
					var $339 = $tr;
					__ZL14SetLetterVowelP10Translatori($339, 121);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 50) {
					var $340 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($340, ((__ZZ16SelectTranslatorPKcE17stress_lengths_pt) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_pt) & 4294967295));
					var $341 = $tr;
					var $langopts510 = (($341) & 4294967295);
					var $length_mods511 = (($langopts510 + 176) & 4294967295);
					var $342 = HEAP32[(($length_mods511) >> 2)];
					var $343 = $tr;
					var $langopts512 = (($343) & 4294967295);
					var $length_mods0513 = (($langopts512 + 180) & 4294967295);
					HEAP32[(($length_mods0513) >> 2)] = $342;
					var $344 = $tr;
					var $langopts514 = (($344) & 4294967295);
					var $stress_rule515 = (($langopts514 + 8) & 4294967295);
					HEAP32[(($stress_rule515) >> 2)] = 3;
					var $345 = $tr;
					var $langopts516 = (($345) & 4294967295);
					var $stress_flags517 = (($langopts516 + 12) & 4294967295);
					HEAP32[(($stress_flags517) >> 2)] = 139286;
					var $346 = $tr;
					var $langopts518 = (($346) & 4294967295);
					var $numbers519 = (($langopts518 + 184) & 4294967295);
					HEAP32[(($numbers519) >> 2)] = 16793704;
					var $347 = $tr;
					__ZL14SetLetterVowelP10Translatori($347, 121);
					var $348 = $tr;
					__ZL15ResetLetterBitsP10Translatori($348, 2);
					var $349 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($349, 1, ((__str4634) & 4294967295));
					var $350 = $tr;
					var $langopts520 = (($350) & 4294967295);
					var $param521 = (($langopts520 + 24) & 4294967295);
					var $arrayidx522 = (($param521 + 60) & 4294967295);
					HEAP32[(($arrayidx522) >> 2)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 51) {
					var $351 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($351, ((__ZZ16SelectTranslatorPKcE17stress_lengths_ro) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_ro) & 4294967295));
					var $352 = $tr;
					var $langopts524 = (($352) & 4294967295);
					var $stress_rule525 = (($langopts524 + 8) & 4294967295);
					HEAP32[(($stress_rule525) >> 2)] = 2;
					var $353 = $tr;
					var $langopts526 = (($353) & 4294967295);
					var $stress_flags527 = (($langopts526 + 12) & 4294967295);
					HEAP32[(($stress_flags527) >> 2)] = 262;
					var $354 = HEAP32[((((_charsets + 8) & 4294967295)) >> 2)];
					var $355 = $tr;
					var $charset_a0528 = (($355 + 696) & 4294967295);
					HEAP32[(($charset_a0528) >> 2)] = $354;
					var $356 = $tr;
					var $langopts529 = (($356) & 4294967295);
					var $numbers530 = (($langopts529 + 184) & 4294967295);
					HEAP32[(($numbers530) >> 2)] = 16805928;
					var $357 = $tr;
					var $langopts531 = (($357) & 4294967295);
					var $numbers2532 = (($langopts531 + 188) & 4294967295);
					HEAP32[(($numbers2532) >> 2)] = 30;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 52) {
					var $358 = $tr;
					__ZL18Translator_RussianP10Translator($358);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 53) {
					var $359 = $tr;
					var $langopts535 = (($359) & 4294967295);
					var $stress_rule536 = (($langopts535 + 8) & 4294967295);
					HEAP32[(($stress_rule536) >> 2)] = 2;
					var $360 = $tr;
					var $langopts537 = (($360) & 4294967295);
					var $stress_flags538 = (($langopts537 + 12) & 4294967295);
					HEAP32[(($stress_flags538) >> 2)] = 22;
					var $361 = $tr;
					var $langopts539 = (($361) & 4294967295);
					var $length_mods540 = (($langopts539 + 176) & 4294967295);
					var $362 = HEAP32[(($length_mods540) >> 2)];
					var $363 = $tr;
					var $langopts541 = (($363) & 4294967295);
					var $length_mods0542 = (($langopts541 + 180) & 4294967295);
					HEAP32[(($length_mods0542) >> 2)] = $362;
					var $364 = $tr;
					var $langopts543 = (($364) & 4294967295);
					var $numbers544 = (($langopts543 + 184) & 4294967295);
					HEAP32[(($numbers544) >> 2)] = 278624;
					var $365 = $tr;
					var $langopts545 = (($365) & 4294967295);
					var $numbers2546 = (($langopts545 + 188) & 4294967295);
					HEAP32[(($numbers2546) >> 2)] = 512;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 54) {
					var $366 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($366, ((__ZZ16SelectTranslatorPKcE17stress_lengths_sk) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_sk) & 4294967295));
					var $367 = HEAP32[((((_charsets + 8) & 4294967295)) >> 2)];
					var $368 = $tr;
					var $charset_a0548 = (($368 + 696) & 4294967295);
					HEAP32[(($charset_a0548) >> 2)] = $367;
					var $369 = $tr;
					var $langopts549 = (($369) & 4294967295);
					var $stress_rule550 = (($langopts549 + 8) & 4294967295);
					HEAP32[(($stress_rule550) >> 2)] = 0;
					var $370 = $tr;
					var $langopts551 = (($370) & 4294967295);
					var $stress_flags552 = (($langopts551 + 12) & 4294967295);
					HEAP32[(($stress_flags552) >> 2)] = 22;
					var $371 = $tr;
					var $langopts553 = (($371) & 4294967295);
					var $param554 = (($langopts553 + 24) & 4294967295);
					var $arrayidx555 = (($param554 + 16) & 4294967295);
					HEAP32[(($arrayidx555) >> 2)] = 3;
					var $372 = $tr;
					var $langopts556 = (($372) & 4294967295);
					var $max_initial_consonants557 = (($langopts556 + 248) & 4294967295);
					HEAP8[($max_initial_consonants557)] = 5;
					var $373 = $tr;
					var $langopts558 = (($373) & 4294967295);
					var $spelling_stress559 = (($langopts558 + 249) & 4294967295);
					HEAP8[($spelling_stress559)] = 1;
					var $374 = $tr;
					var $langopts560 = (($374) & 4294967295);
					var $param561 = (($langopts560 + 24) & 4294967295);
					var $arrayidx562 = (($param561 + 44) & 4294967295);
					HEAP32[(($arrayidx562) >> 2)] = 4;
					var $375 = $tr;
					var $langopts563 = (($375) & 4294967295);
					var $numbers564 = (($langopts563 + 184) & 4294967295);
					HEAP32[(($numbers564) >> 2)] = 16794624;
					var $376 = $tr;
					var $langopts565 = (($376) & 4294967295);
					var $numbers2566 = (($langopts565 + 188) & 4294967295);
					HEAP32[(($numbers2566) >> 2)] = 256;
					var $377 = $tr;
					var $langopts567 = (($377) & 4294967295);
					var $thousands_sep568 = (($langopts567 + 204) & 4294967295);
					HEAP32[(($thousands_sep568) >> 2)] = 0;
					var $378 = $tr;
					var $langopts569 = (($378) & 4294967295);
					var $decimal_sep570 = (($langopts569 + 208) & 4294967295);
					HEAP32[(($decimal_sep570) >> 2)] = 44;
					var $379 = $name2;
					var $cmp571 = ((($379)) | 0) == 25459;
					if ($cmp571) {
						__label__ = 55;;
					} else {
						__label__ = 56;;
					}
					if (__label__ == 55) {
						var $380 = $tr;
						var $langopts573 = (($380) & 4294967295);
						var $numbers2574 = (($langopts573 + 188) & 4294967295);
						HEAP32[(($numbers2574) >> 2)] = 264;;
					}
					var $381 = $tr;
					__ZL14SetLetterVowelP10Translatori($381, 121);
					var $382 = $tr;
					__ZL14SetLetterVowelP10Translatori($382, 114);
					var $383 = $tr;
					__ZL15ResetLetterBitsP10Translatori($383, 32);
					var $384 = $tr;
					__ZL13SetLetterBitsP10TranslatoriPKc($384, 5, ((__str5635) & 4294967295));
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 57) {
					var $385 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($385, ((__ZZ16SelectTranslatorPKcE17stress_lengths_ta) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_ta) & 4294967295));
					var $386 = $tr;
					var $langopts577 = (($386) & 4294967295);
					var $length_mods578 = (($langopts577 + 176) & 4294967295);
					var $387 = HEAP32[(($length_mods578) >> 2)];
					var $388 = $tr;
					var $langopts579 = (($388) & 4294967295);
					var $length_mods0580 = (($langopts579 + 180) & 4294967295);
					HEAP32[(($length_mods0580) >> 2)] = $387;
					var $389 = $tr;
					var $langopts581 = (($389) & 4294967295);
					var $stress_rule582 = (($langopts581 + 8) & 4294967295);
					HEAP32[(($stress_rule582) >> 2)] = 0;
					var $390 = $tr;
					var $langopts583 = (($390) & 4294967295);
					var $stress_flags584 = (($langopts583 + 12) & 4294967295);
					HEAP32[(($stress_flags584) >> 2)] = 65556;
					var $391 = $tr;
					var $langopts585 = (($391) & 4294967295);
					var $spelling_stress586 = (($langopts585 + 249) & 4294967295);
					HEAP8[($spelling_stress586)] = 1;
					var $392 = $tr;
					var $letter_bits_offset587 = (($392 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset587) >> 2)] = 3456;
					var $393 = $tr;
					var $letter_bits588 = (($393 + 708) & 4294967295);
					var $arraydecay589 = (($letter_bits588) & 4294967295);
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $arraydecay589;
					$stop$ = $dest$ + 256;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $394 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($394, 0, 5, 22);
					var $395 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($395, 0, 74, 115);
					var $396 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($396, 1, 74, 115);
					var $397 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($397, 2, 26, 70);
					var $398 = $tr;
					var $langopts590 = (($398) & 4294967295);
					var $param591 = (($langopts590 + 24) & 4294967295);
					var $arrayidx592 = (($param591 + 20) & 4294967295);
					HEAP32[(($arrayidx592) >> 2)] = 1;
					var $399 = $tr;
					var $letter_bits_offset593 = (($399 + 964) & 4294967295);
					var $400 = HEAP32[(($letter_bits_offset593) >> 2)];
					var $add594 = ((($400) + 74) & 4294967295);
					var $401 = $tr;
					var $langopts595 = (($401) & 4294967295);
					var $suffix_add_e596 = (($langopts595 + 276) & 4294967295);
					HEAP32[(($suffix_add_e596) >> 2)] = $add594;
					var $402 = $tr;
					var $langopts597 = (($402) & 4294967295);
					var $numbers598 = (($langopts597 + 184) & 4294967295);
					HEAP32[(($numbers598) >> 2)] = 2097152;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 58) {
					var $403 = HEAP32[((((_charsets + 8) & 4294967295)) >> 2)];
					var $404 = $tr;
					var $charset_a0600 = (($404 + 696) & 4294967295);
					HEAP32[(($charset_a0600) >> 2)] = $403;
					var $405 = $tr;
					var $langopts601 = (($405) & 4294967295);
					var $stress_rule602 = (($langopts601 + 8) & 4294967295);
					HEAP32[(($stress_rule602) >> 2)] = 2;
					var $406 = $tr;
					var $langopts603 = (($406) & 4294967295);
					var $stress_flags604 = (($langopts603 + 12) & 4294967295);
					HEAP32[(($stress_flags604) >> 2)] = 32;
					var $407 = $tr;
					var $langopts605 = (($407) & 4294967295);
					var $param606 = (($langopts605 + 24) & 4294967295);
					var $arrayidx607 = (($param606 + 16) & 4294967295);
					HEAP32[(($arrayidx607) >> 2)] = 19;
					var $408 = $tr;
					var $langopts608 = (($408) & 4294967295);
					var $numbers609 = (($langopts608 + 184) & 4294967295);
					HEAP32[(($numbers609) >> 2)] = 16864280;
					var $409 = $tr;
					var $langopts610 = (($409) & 4294967295);
					var $numbers2611 = (($langopts610 + 188) & 4294967295);
					HEAP32[(($numbers2611) >> 2)] = 256;
					var $410 = $tr;
					var $langopts612 = (($410) & 4294967295);
					var $thousands_sep613 = (($langopts612 + 204) & 4294967295);
					HEAP32[(($thousands_sep613) >> 2)] = 32;
					var $411 = $tr;
					__ZL14SetLetterVowelP10Translatori($411, 114);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 59) {
					var $412 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($412, ((__ZZ16SelectTranslatorPKcE17stress_lengths_sq) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_sq) & 4294967295));
					var $413 = $tr;
					var $langopts615 = (($413) & 4294967295);
					var $stress_rule616 = (($langopts615 + 8) & 4294967295);
					HEAP32[(($stress_rule616) >> 2)] = 2;
					var $414 = $tr;
					var $langopts617 = (($414) & 4294967295);
					var $stress_flags618 = (($langopts617 + 12) & 4294967295);
					HEAP32[(($stress_flags618) >> 2)] = 278;
					var $415 = $tr;
					__ZL14SetLetterVowelP10Translatori($415, 121);
					var $416 = $tr;
					var $langopts619 = (($416) & 4294967295);
					var $numbers620 = (($langopts619 + 184) & 4294967295);
					HEAP32[(($numbers620) >> 2)] = 32872;
					var $417 = $tr;
					var $langopts621 = (($417) & 4294967295);
					var $accents622 = (($langopts621 + 220) & 4294967295);
					HEAP32[(($accents622) >> 2)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 60) {
					var $418 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($418, ((__ZZ16SelectTranslatorPKcE17stress_lengths_sv) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_sv) & 4294967295));
					var $419 = $tr;
					var $langopts624 = (($419) & 4294967295);
					var $stress_rule625 = (($langopts624 + 8) & 4294967295);
					HEAP32[(($stress_rule625) >> 2)] = 0;
					var $420 = $tr;
					__ZL14SetLetterVowelP10Translatori($420, 121);
					var $421 = $tr;
					var $langopts626 = (($421) & 4294967295);
					var $numbers627 = (($langopts626 + 184) & 4294967295);
					HEAP32[(($numbers627) >> 2)] = 6408;
					var $422 = $tr;
					var $langopts628 = (($422) & 4294967295);
					var $accents629 = (($langopts628 + 220) & 4294967295);
					HEAP32[(($accents629) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 61) {
					var $423 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($423, ((__ZZ16SelectTranslatorPKcE17stress_lengths_sw) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_sw) & 4294967295));
					var $424 = $tr;
					var $langopts631 = (($424) & 4294967295);
					var $length_mods632 = (($langopts631 + 176) & 4294967295);
					var $425 = HEAP32[(($length_mods632) >> 2)];
					var $426 = $tr;
					var $langopts633 = (($426) & 4294967295);
					var $length_mods0634 = (($langopts633 + 180) & 4294967295);
					HEAP32[(($length_mods0634) >> 2)] = $425;
					var $427 = $tr;
					var $langopts635 = (($427) & 4294967295);
					var $vowel_pause636 = (($langopts635 + 4) & 4294967295);
					HEAP32[(($vowel_pause636) >> 2)] = 1;
					var $428 = $tr;
					var $langopts637 = (($428) & 4294967295);
					var $stress_rule638 = (($langopts637 + 8) & 4294967295);
					HEAP32[(($stress_rule638) >> 2)] = 2;
					var $429 = $tr;
					var $langopts639 = (($429) & 4294967295);
					var $stress_flags640 = (($langopts639 + 12) & 4294967295);
					HEAP32[(($stress_flags640) >> 2)] = 22;
					var $430 = $tr;
					var $langopts641 = (($430) & 4294967295);
					var $numbers642 = (($langopts641 + 184) & 4294967295);
					HEAP32[(($numbers642) >> 2)] = 1248;
					var $431 = $tr;
					var $langopts643 = (($431) & 4294967295);
					var $break_numbers644 = (($langopts643 + 192) & 4294967295);
					HEAP32[(($break_numbers644) >> 2)] = 1227133544;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 62) {
					var $432 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($432, ((__ZZ16SelectTranslatorPKcE17stress_lengths_ta) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_ta) & 4294967295));
					var $433 = $tr;
					var $langopts646 = (($433) & 4294967295);
					var $length_mods647 = (($langopts646 + 176) & 4294967295);
					var $434 = HEAP32[(($length_mods647) >> 2)];
					var $435 = $tr;
					var $langopts648 = (($435) & 4294967295);
					var $length_mods0649 = (($langopts648 + 180) & 4294967295);
					HEAP32[(($length_mods0649) >> 2)] = $434;
					var $436 = $tr;
					var $langopts650 = (($436) & 4294967295);
					var $stress_rule651 = (($langopts650 + 8) & 4294967295);
					HEAP32[(($stress_rule651) >> 2)] = 0;
					var $437 = $tr;
					var $langopts652 = (($437) & 4294967295);
					var $stress_flags653 = (($langopts652 + 12) & 4294967295);
					HEAP32[(($stress_flags653) >> 2)] = 65540;
					var $438 = $tr;
					var $langopts654 = (($438) & 4294967295);
					var $spelling_stress655 = (($langopts654 + 249) & 4294967295);
					HEAP8[($spelling_stress655)] = 1;
					var $439 = $tr;
					var $langopts656 = (($439) & 4294967295);
					var $break_numbers657 = (($langopts656 + 192) & 4294967295);
					HEAP32[(($break_numbers657) >> 2)] = 5288;
					var $440 = $name2;
					var $cmp658 = ((($440)) | 0) == 29793;
					if ($cmp658) {
						__lastLabel__ = 62;
						__label__ = 63;;
					} else {
						__lastLabel__ = 62;
						__label__ = 64;;
					}
					if (__label__ == 63) {
						var $441 = $tr;
						var $letter_bits_offset660 = (($441 + 964) & 4294967295);
						HEAP32[(($letter_bits_offset660) >> 2)] = 2944;
						var $442 = $tr;
						var $langopts661 = (($442) & 4294967295);
						var $numbers662 = (($langopts661 + 184) & 4294967295);
						HEAP32[(($numbers662) >> 2)] = 2097152;
						var $_pr = $name2;
						__lastLabel__ = 63;;
					}
					var $443 = __lastLabel__ == 63 ? $_pr : ($440);
					var $cmp664 = ((($443)) | 0) == 28018;
					if ($cmp664) {
						__label__ = 65;;
					} else {
						__label__ = 66;;
					}
					$if_then665$$if_else667$75: do {
						if (__label__ == 65) {
							var $444 = $tr;
							var $letter_bits_offset666 = (($444 + 964) & 4294967295);
							HEAP32[(($letter_bits_offset666) >> 2)] = 2304;;
						} else if (__label__ == 66) {
							var $445 = $name2;
							var $cmp668 = ((($445)) | 0) == 28012;
							if ($cmp668) {
								__label__ = 67;;
							} else {
								__label__ = 68;;
							}
							if (__label__ == 67) {
								var $446 = $tr;
								var $letter_bits_offset670 = (($446 + 964) & 4294967295);
								HEAP32[(($letter_bits_offset670) >> 2)] = 3328;
								var $447 = $tr;
								var $langopts671 = (($447) & 4294967295);
								var $numbers672 = (($langopts671 + 184) & 4294967295);
								HEAP32[(($numbers672) >> 2)] = 2097152;;
							} else if (__label__ == 68) {
								var $448 = $name2;
								var $cmp674 = ((($448)) | 0) == 27502;
								if ($cmp674) {
									__label__ = 69;;
								} else {
									__label__ = 70;;
								}
								if (__label__ == 69) {
									var $449 = $tr;
									var $letter_bits_offset676 = (($449 + 964) & 4294967295);
									HEAP32[(($letter_bits_offset676) >> 2)] = 3200;
									var $450 = $tr;
									var $langopts677 = (($450) & 4294967295);
									var $numbers678 = (($langopts677 + 184) & 4294967295);
									HEAP32[(($numbers678) >> 2)] = 1;;
								} else if (__label__ == 70) {
									var $451 = $name2;
									var $cmp680 = ((($451)) | 0) == 29797;
									if (!($cmp680)) {
										__label__ = 72;
										break $if_then665$$if_else667$75;
									}
									var $452 = $tr;
									var $letter_bits_offset682 = (($452 + 964) & 4294967295);
									HEAP32[(($letter_bits_offset682) >> 2)] = 3072;
									var $453 = $tr;
									var $langopts683 = (($453) & 4294967295);
									var $numbers684 = (($langopts683 + 184) & 4294967295);
									HEAP32[(($numbers684) >> 2)] = 1;;
								}
							}
						}
					} while (0);
					var $454 = $tr;
					var $langopts689 = (($454) & 4294967295);
					var $param690 = (($langopts689 + 24) & 4294967295);
					var $arrayidx691 = (($param690 + 32) & 4294967295);
					HEAP32[(($arrayidx691) >> 2)] = 1;
					var $455 = $tr;
					__Z15SetIndicLettersP10Translator($455);
					var $456 = $tr;
					__ZL18SetLetterBitsRangeP10Translatoriii($456, 1, 78, 78);
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 73) {
					var $457 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($457, ((__ZZ16SelectTranslatorPKcE17stress_lengths_tr) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_tr) & 4294967295));
					var $458 = HEAP32[((((_charsets + 36) & 4294967295)) >> 2)];
					var $459 = $tr;
					var $charset_a0693 = (($459 + 696) & 4294967295);
					HEAP32[(($charset_a0693) >> 2)] = $458;
					var $460 = $tr;
					var $langopts694 = (($460) & 4294967295);
					var $stress_rule695 = (($langopts694 + 8) & 4294967295);
					HEAP32[(($stress_rule695) >> 2)] = 7;
					var $461 = $tr;
					var $langopts696 = (($461) & 4294967295);
					var $stress_flags697 = (($langopts696 + 12) & 4294967295);
					HEAP32[(($stress_flags697) >> 2)] = 32;
					var $462 = $tr;
					var $langopts698 = (($462) & 4294967295);
					var $numbers699 = (($langopts698 + 184) & 4294967295);
					HEAP32[(($numbers699) >> 2)] = 2114824;
					var $463 = $tr;
					var $langopts700 = (($463) & 4294967295);
					var $max_initial_consonants701 = (($langopts700 + 248) & 4294967295);
					HEAP8[($max_initial_consonants701)] = 2;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 74) {
					var $464 = $tr;
					var $letter_bits_offset703 = (($464 + 964) & 4294967295);
					HEAP32[(($letter_bits_offset703) >> 2)] = 1536;
					var $465 = $tr;
					var $langopts704 = (($465) & 4294967295);
					var $param705 = (($langopts704 + 24) & 4294967295);
					var $arrayidx706 = (($param705 + 20) & 4294967295);
					HEAP32[(($arrayidx706) >> 2)] = 1;
					var $466 = $tr;
					var $langopts707 = (($466) & 4294967295);
					var $numbers708 = (($langopts707 + 184) & 4294967295);
					HEAP32[(($numbers708) >> 2)] = 16;
					var $467 = $tr;
					var $langopts709 = (($467) & 4294967295);
					var $break_numbers710 = (($langopts709 + 192) & 4294967295);
					HEAP32[(($break_numbers710) >> 2)] = 21160;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 75) {
					var $468 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($468, ((__ZZ16SelectTranslatorPKcE17stress_lengths_vi) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_vi) & 4294967295));
					var $469 = $tr;
					var $langopts712 = (($469) & 4294967295);
					var $length_mods713 = (($langopts712 + 176) & 4294967295);
					var $470 = HEAP32[(($length_mods713) >> 2)];
					var $471 = $tr;
					var $langopts714 = (($471) & 4294967295);
					var $length_mods0715 = (($langopts714 + 180) & 4294967295);
					HEAP32[(($length_mods0715) >> 2)] = $470;
					var $472 = $tr;
					var $langopts716 = (($472) & 4294967295);
					var $stress_rule717 = (($langopts716 + 8) & 4294967295);
					HEAP32[(($stress_rule717) >> 2)] = 0;
					var $473 = $tr;
					var $langopts718 = (($473) & 4294967295);
					var $word_gap719 = (($langopts718) & 4294967295);
					HEAP32[(($word_gap719) >> 2)] = 33;
					var $474 = $tr;
					var $letter_groups720 = (($474 + 968) & 4294967295);
					var $arrayidx721 = (($letter_groups720 + 28) & 4294967295);
					HEAP32[(($arrayidx721) >> 2)] = ((__ZZ16SelectTranslatorPKcE9vowels_vi) & 4294967295);
					var $475 = $tr;
					var $letter_groups722 = (($475 + 968) & 4294967295);
					var $arrayidx723 = (($letter_groups722) & 4294967295);
					HEAP32[(($arrayidx723) >> 2)] = ((__ZZ16SelectTranslatorPKcE9vowels_vi) & 4294967295);
					var $476 = $tr;
					var $langopts724 = (($476) & 4294967295);
					var $tone_language = (($langopts724 + 224) & 4294967295);
					HEAP32[(($tone_language) >> 2)] = 1;
					var $477 = $tr;
					var $langopts725 = (($477) & 4294967295);
					var $unstressed_wd1726 = (($langopts725 + 16) & 4294967295);
					HEAP32[(($unstressed_wd1726) >> 2)] = 2;
					var $478 = $tr;
					var $langopts727 = (($478) & 4294967295);
					var $numbers728 = (($langopts727 + 184) & 4294967295);
					HEAP32[(($numbers728) >> 2)] = 12615688;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 76) {
					var $479 = $tr;
					var $langopts730 = (($479) & 4294967295);
					var $stress_rule731 = (($langopts730 + 8) & 4294967295);
					HEAP32[(($stress_rule731) >> 2)] = 0;
					var $480 = $tr;
					var $langopts732 = (($480) & 4294967295);
					var $numbers733 = (($langopts732 + 184) & 4294967295);
					HEAP32[(($numbers733) >> 2)] = 2098528;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				} else if (__label__ == 77) {
					var $481 = $tr;
					__Z15SetupTranslatorP10TranslatorPKsPKh($481, ((__ZZ16SelectTranslatorPKcE17stress_lengths_zh) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_zh) & 4294967295));
					var $482 = $tr;
					var $langopts735 = (($482) & 4294967295);
					var $stress_rule736 = (($langopts735 + 8) & 4294967295);
					HEAP32[(($stress_rule736) >> 2)] = 3;
					var $483 = $tr;
					var $langopts737 = (($483) & 4294967295);
					var $stress_flags738 = (($langopts737 + 12) & 4294967295);
					HEAP32[(($stress_flags738) >> 2)] = 2;
					var $484 = $tr;
					var $langopts739 = (($484) & 4294967295);
					var $vowel_pause740 = (($langopts739 + 4) & 4294967295);
					HEAP32[(($vowel_pause740) >> 2)] = 0;
					var $485 = $tr;
					var $langopts741 = (($485) & 4294967295);
					var $tone_language742 = (($langopts741 + 224) & 4294967295);
					HEAP32[(($tone_language742) >> 2)] = 1;
					var $486 = $tr;
					var $langopts743 = (($486) & 4294967295);
					var $length_mods744 = (($langopts743 + 176) & 4294967295);
					var $487 = HEAP32[(($length_mods744) >> 2)];
					var $488 = $tr;
					var $langopts745 = (($488) & 4294967295);
					var $length_mods0746 = (($langopts745 + 180) & 4294967295);
					HEAP32[(($length_mods0746) >> 2)] = $487;
					var $489 = $tr;
					var $langopts747 = (($489) & 4294967295);
					var $tone_numbers = (($langopts747 + 250) & 4294967295);
					HEAP8[($tone_numbers)] = 1;
					var $490 = $tr;
					var $langopts748 = (($490) & 4294967295);
					var $ideographs = (($langopts748 + 251) & 4294967295);
					HEAP8[($ideographs)] = 1;
					var $491 = $tr;
					var $langopts749 = (($491) & 4294967295);
					var $word_gap750 = (($langopts749) & 4294967295);
					HEAP32[(($word_gap750) >> 2)] = 33;
					var $492 = $name2;
					var $cmp751 = ((($492)) | 0) == 31336;
					if (!($cmp751)) {
						__label__ = 80;
						break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
					}
					var $493 = $tr;
					var $langopts753 = (($493) & 4294967295);
					var $textmode = (($langopts753 + 252) & 4294967295);
					HEAP8[($textmode)] = 1;
					var $494 = $tr;
					var $langopts754 = (($494) & 4294967295);
					var $listx = (($langopts754 + 260) & 4294967295);
					HEAP32[(($listx) >> 2)] = 1;
					__label__ = 80;
					break $sw_default$$sw_bb$$sw_bb9$$sw_bb18$$sw_bb24$$sw_bb39$$sw_bb52$$sw_bb64$$sw_bb72$$sw_bb92$$sw_bb109$$sw_bb123$$sw_bb148$$sw_bb161$$sw_bb195$$sw_bb200$$sw_bb207$$sw_bb209$$sw_bb222$$sw_bb238$$sw_bb257$$sw_bb280$$sw_bb287$$sw_bb312$$sw_bb322$$sw_bb331$$sw_bb347$$sw_bb381$$sw_bb391$$sw_bb403$$sw_bb414$$sw_bb422$$sw_bb439$$sw_bb449$$sw_bb461$$sw_bb481$$sw_bb486$$sw_bb491$$sw_bb509$$sw_bb523$$sw_bb533$$sw_bb534$$sw_bb547$$sw_bb576$$sw_bb599$$sw_bb614$$sw_bb623$$sw_bb630$$sw_bb645$$sw_bb692$$sw_bb702$$sw_bb711$$sw_bb729$$sw_bb734$6;
				}
			} while (0);
			if (__label__ == 24) {
				var $146 = $tr;
				__Z15SetupTranslatorP10TranslatorPKsPKh($146, ((__ZZ16SelectTranslatorPKcE17stress_lengths_fi) & 4294967295), ((__ZZ16SelectTranslatorPKcE14stress_amps_fi) & 4294967295));
				var $147 = $tr;
				var $langopts210 = (($147) & 4294967295);
				var $stress_rule211 = (($langopts210 + 8) & 4294967295);
				HEAP32[(($stress_rule211) >> 2)] = 0;
				var $148 = $tr;
				var $langopts212 = (($148) & 4294967295);
				var $stress_flags213 = (($langopts212 + 12) & 4294967295);
				HEAP32[(($stress_flags213) >> 2)] = 86;
				var $149 = $tr;
				var $langopts214 = (($149) & 4294967295);
				var $param215 = (($langopts214 + 24) & 4294967295);
				var $arrayidx216 = (($param215 + 56) & 4294967295);
				HEAP32[(($arrayidx216) >> 2)] = 1;
				var $150 = $tr;
				var $langopts217 = (($150) & 4294967295);
				var $long_stop = (($langopts217 + 240) & 4294967295);
				HEAP32[(($long_stop) >> 2)] = 130;
				var $151 = $tr;
				var $langopts218 = (($151) & 4294967295);
				var $numbers219 = (($langopts218 + 184) & 4294967295);
				HEAP32[(($numbers219) >> 2)] = 4104;
				var $152 = $tr;
				__ZL14SetLetterVowelP10Translatori($152, 121);
				var $153 = $tr;
				var $langopts220 = (($153) & 4294967295);
				var $spelling_stress = (($langopts220 + 249) & 4294967295);
				HEAP8[($spelling_stress)] = 1;
				var $154 = $tr;
				var $langopts221 = (($154) & 4294967295);
				var $intonation_group = (($langopts221 + 228) & 4294967295);
				HEAP32[(($intonation_group) >> 2)] = 3;;
			}
			var $496 = $name2;
			var $497 = $tr;
			var $translator_name = (($497 + 280) & 4294967295);
			HEAP32[(($translator_name) >> 2)] = $496;
			var $498 = $tr;
			var $langopts759 = (($498) & 4294967295);
			var $numbers760 = (($langopts759 + 184) & 4294967295);
			var $499 = HEAP32[(($numbers760) >> 2)];
			var $and = ($499) & 8;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 81;;
			} else {
				__label__ = 82;;
			}
			if (__label__ == 81) {
				var $500 = $tr;
				var $langopts762 = (($500) & 4294967295);
				var $thousands_sep763 = (($langopts762 + 204) & 4294967295);
				HEAP32[(($thousands_sep763) >> 2)] = 46;
				var $501 = $tr;
				var $langopts764 = (($501) & 4294967295);
				var $decimal_sep765 = (($langopts764 + 208) & 4294967295);
				HEAP32[(($decimal_sep765) >> 2)] = 44;;
			}
			var $502 = $tr;
			var $langopts767 = (($502) & 4294967295);
			var $numbers768 = (($langopts767 + 184) & 4294967295);
			var $503 = HEAP32[(($numbers768) >> 2)];
			var $and769 = ($503) & 4;
			var $tobool770 = ((($and769)) | 0) != 0;
			if ($tobool770) {
				__label__ = 83;;
			} else {
				__label__ = 84;;
			}
			if (__label__ == 83) {
				var $504 = $tr;
				var $langopts772 = (($504) & 4294967295);
				var $thousands_sep773 = (($langopts772 + 204) & 4294967295);
				HEAP32[(($thousands_sep773) >> 2)] = 0;;
			}
			var $505 = $tr;;
			return $505;
			return null;
		}

		function __ZL13NewTranslatorv() {;
			var __label__;
			var $retval;
			var $tr;
			var $ix;
			var $call = __Z5Alloci(8328);
			var $0 = $call;
			$tr = $0;
			var $1 = $tr;
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $2 = HEAP32[((((_charsets + 4) & 4294967295)) >> 2)];
				var $3 = $tr;
				var $charset_a0 = (($3 + 696) & 4294967295);
				HEAP32[(($charset_a0) >> 2)] = $2;
				HEAP8[(((_dictionary_name) & 4294967295))] = 0;
				var $4 = $tr;
				var $dict_condition = (($4 + 692) & 4294967295);
				HEAP32[(($dict_condition) >> 2)] = 0;
				var $5 = $tr;
				var $data_dictrules = (($5 + 1048) & 4294967295);
				HEAP32[(($data_dictrules) >> 2)] = 0;
				var $6 = $tr;
				var $data_dictlist = (($6 + 1052) & 4294967295);
				HEAP32[(($data_dictlist) >> 2)] = 0;
				var $7 = $tr;
				var $transpose_min = (($7 + 288) & 4294967295);
				HEAP32[(($transpose_min) >> 2)] = 97;
				var $8 = $tr;
				var $transpose_max = (($8 + 284) & 4294967295);
				HEAP32[(($transpose_max) >> 2)] = 122;
				var $9 = $tr;
				var $frequent_pairs = (($9 + 8268) & 4294967295);
				HEAP32[(($frequent_pairs) >> 2)] = 0;
				var $10 = $tr;
				var $letter_bits_offset = (($10 + 964) & 4294967295);
				HEAP32[(($letter_bits_offset) >> 2)] = 0;
				var $11 = $tr;
				var $letter_bits = (($11 + 708) & 4294967295);
				var $arraydecay = (($letter_bits) & 4294967295);
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = $arraydecay;
				$stop$ = $dest$ + 256;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};
				var $12 = $tr;
				var $letter_groups = (($12 + 968) & 4294967295);
				var $arraydecay1 = (($letter_groups) & 4294967295);
				var $13 = $arraydecay1;
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = $13;
				$stop$ = $dest$ + 32;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};
				var $14 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($14, 0, ((__str6636) & 4294967295));
				var $15 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($15, 1, ((__str7637) & 4294967295));
				var $16 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($16, 2, ((__str8638) & 4294967295));
				var $17 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($17, 3, ((__str9639) & 4294967295));
				var $18 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($18, 4, ((__str10640) & 4294967295));
				var $19 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($19, 5, ((__str11641) & 4294967295));
				var $20 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($20, 6, ((__str12642) & 4294967295));
				var $21 = $tr;
				__ZL13SetLetterBitsP10TranslatoriPKc($21, 7, ((__str630) & 4294967295));
				var $22 = $tr;
				var $char_plus_apostrophe = (($22 + 700) & 4294967295);
				HEAP32[(($char_plus_apostrophe) >> 2)] = ((__ZZL13NewTranslatorvE13empty_wstring) & 4294967295);
				var $23 = $tr;
				var $punct_within_word = (($23 + 704) & 4294967295);
				HEAP32[(($punct_within_word) >> 2)] = ((__ZZL13NewTranslatorvE13punct_in_word) & 4294967295);
				$ix = 0;;
				while (1) {
					var $24 = $ix;
					var $arrayidx = ((__ZZL13NewTranslatorvE12stress_amps2 + $24) & 4294967295);
					var $25 = HEAP8[($arrayidx)];
					var $26 = $ix;
					var $27 = $tr;
					var $stress_amps = (($27 + 660) & 4294967295);
					var $arrayidx3 = (($stress_amps + $26) & 4294967295);
					HEAP8[($arrayidx3)] = $25;
					var $28 = $ix;
					var $arrayidx4 = ((__ZZL13NewTranslatorvE12stress_amps2 + $28) & 4294967295);
					var $29 = HEAPU8[($arrayidx4)];
					var $conv = ((($29)) & 255);
					var $sub = ((($conv) - 1) & 4294967295);
					var $conv5 = ((($sub)) & 255);
					var $30 = $ix;
					var $31 = $tr;
					var $stress_amps_r = (($31 + 668) & 4294967295);
					var $arrayidx6 = (($stress_amps_r + $30) & 4294967295);
					HEAP8[($arrayidx6)] = $conv5;
					var $32 = $ix;
					var $arrayidx7 = ((__ZZL13NewTranslatorvE15stress_lengths2 + $32 * 2) & 4294967295);
					var $33 = HEAP16[(($arrayidx7) >> 1)];
					var $34 = $ix;
					var $35 = $tr;
					var $stress_lengths = (($35 + 676) & 4294967295);
					var $arrayidx8 = (($stress_lengths + $34 * 2) & 4294967295);
					HEAP16[(($arrayidx8) >> 1)] = $33;
					var $36 = $ix;
					var $inc = ((($36) + 1) & 4294967295);
					$ix = $inc;
					var $cmp2 = ((($inc)) | 0) < 8;
					if ($cmp2) {
						__label__ = 3;
						continue;
					} else {
						__label__ = 4;
						break;
					}
				}
				var $37 = $tr;
				var $langopts = (($37) & 4294967295);
				var $38 = $langopts;
				var $dest$, $stop$, $stop4$, $fast$, $value4$;
				$dest$ = $38;
				$stop$ = $dest$ + 280;
				$value4$ = 0;
				if ($value4$ < 0) $value4$ += 256;
				$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
				while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				}
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($dest$ < $stop4$) {;;;;;;;
					HEAP32[$dest$++] = $value4$;
				}
				$dest$ <<= 2;
				while ($dest$ < $stop$) {;;
					HEAP8[$dest$++] = 0;
				};
				var $39 = $tr;
				var $langopts9 = (($39) & 4294967295);
				var $max_lengthmod = (($langopts9 + 272) & 4294967295);
				HEAP32[(($max_lengthmod) >> 2)] = 500;
				var $40 = $tr;
				var $langopts10 = (($40) & 4294967295);
				var $stress_rule = (($langopts10 + 8) & 4294967295);
				HEAP32[(($stress_rule) >> 2)] = 2;
				var $41 = $tr;
				var $langopts11 = (($41) & 4294967295);
				var $unstressed_wd1 = (($langopts11 + 16) & 4294967295);
				HEAP32[(($unstressed_wd1) >> 2)] = 1;
				var $42 = $tr;
				var $langopts12 = (($42) & 4294967295);
				var $unstressed_wd2 = (($langopts12 + 20) & 4294967295);
				HEAP32[(($unstressed_wd2) >> 2)] = 3;
				var $43 = $tr;
				var $langopts13 = (($43) & 4294967295);
				var $param = (($langopts13 + 24) & 4294967295);
				var $arrayidx14 = (($param + 28) & 4294967295);
				HEAP32[(($arrayidx14) >> 2)] = 95;
				var $44 = $tr;
				var $langopts15 = (($44) & 4294967295);
				var $param16 = (($langopts15 + 24) & 4294967295);
				var $arrayidx17 = (($param16 + 72) & 4294967295);
				HEAP32[(($arrayidx17) >> 2)] = 95;
				var $45 = $tr;
				var $langopts18 = (($45) & 4294967295);
				var $param19 = (($langopts18 + 24) & 4294967295);
				var $arrayidx20 = (($param19 + 36) & 4294967295);
				HEAP32[(($arrayidx20) >> 2)] = 19;
				var $46 = $tr;
				var $langopts21 = (($46) & 4294967295);
				var $param22 = (($langopts21 + 24) & 4294967295);
				var $arrayidx23 = (($param22 + 20) & 4294967295);
				HEAP32[(($arrayidx23) >> 2)] = 115;
				var $47 = $tr;
				var $langopts24 = (($47) & 4294967295);
				var $param25 = (($langopts24 + 24) & 4294967295);
				var $arrayidx26 = (($param25 + 64) & 4294967295);
				HEAP32[(($arrayidx26) >> 2)] = 4;
				var $48 = $tr;
				var $langopts27 = (($48) & 4294967295);
				var $param2 = (($langopts27 + 100) & 4294967295);
				var $arrayidx28 = (($param2 + 64) & 4294967295);
				HEAP32[(($arrayidx28) >> 2)] = 2;
				var $49 = $tr;
				var $langopts29 = (($49) & 4294967295);
				var $max_initial_consonants = (($langopts29 + 248) & 4294967295);
				HEAP8[($max_initial_consonants)] = 3;
				var $50 = $tr;
				var $langopts30 = (($50) & 4294967295);
				var $replace_chars = (($langopts30 + 264) & 4294967295);
				HEAP32[(($replace_chars) >> 2)] = 0;
				var $51 = $tr;
				var $langopts31 = (($51) & 4294967295);
				var $ascii_language = (($langopts31 + 268) & 4294967295);
				HEAP32[(($ascii_language) >> 2)] = ((__str13643) & 4294967295);
				var $52 = $tr;
				__Z13SetLengthModsP10Translatori($52, 201);
				var $53 = $tr;
				var $langopts32 = (($53) & 4294967295);
				var $long_stop = (($langopts32 + 240) & 4294967295);
				HEAP32[(($long_stop) >> 2)] = 100;
				var $54 = $tr;
				var $langopts33 = (($54) & 4294967295);
				var $max_roman = (($langopts33 + 196) & 4294967295);
				HEAP32[(($max_roman) >> 2)] = 49;
				var $55 = $tr;
				var $langopts34 = (($55) & 4294967295);
				var $min_roman = (($langopts34 + 200) & 4294967295);
				HEAP32[(($min_roman) >> 2)] = 2;
				var $56 = $tr;
				var $langopts35 = (($56) & 4294967295);
				var $thousands_sep = (($langopts35 + 204) & 4294967295);
				HEAP32[(($thousands_sep) >> 2)] = 44;
				var $57 = $tr;
				var $langopts36 = (($57) & 4294967295);
				var $decimal_sep = (($langopts36 + 208) & 4294967295);
				HEAP32[(($decimal_sep) >> 2)] = 46;
				var $58 = $tr;
				var $langopts37 = (($58) & 4294967295);
				var $break_numbers = (($langopts37 + 192) & 4294967295);
				HEAP32[(($break_numbers) >> 2)] = 1227133512;
				var $59 = $tr;
				var $langopts38 = (($59) & 4294967295);
				var $max_digits = (($langopts38 + 212) & 4294967295);
				HEAP32[(($max_digits) >> 2)] = 14;
				var $60 = $tr;
				var $punct_to_tone = (($60 + 1000) & 4294967295);
				var $arraydecay39 = (($punct_to_tone) & 4294967295);
				var $61 = $arraydecay39;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = ((_punctuation_to_tone) & 4294967295);
				$dest$ = $61;
				$stop$ = $src$ + 48;
				if (($dest$ % 4) == ($src$ % 4) && 48 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $62 = $tr;
				var $langopts40 = (($62) & 4294967295);
				var $tunes = (($langopts40 + 232) & 4294967295);
				var $arraydecay41 = (($tunes) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = ((__ZZL13NewTranslatorvE13default_tunes) & 4294967295);
				$dest$ = $arraydecay41;
				$stop$ = $src$ + 6;
				if (($dest$ % 4) == ($src$ % 4) && 6 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $63 = $tr;
				$retval = $63;;
			}
			var $64 = $retval;;
			return $64;
			return null;
		}

		function __ZL14SetLetterVowelP10Translatori($tr, $c) {;
			var __label__;
			var $tr_addr;
			var $c_addr;
			$tr_addr = $tr;
			$c_addr = $c;
			var $0 = $c_addr;
			var $1 = $tr_addr;
			var $letter_bits = (($1 + 708) & 4294967295);
			var $arrayidx = (($letter_bits + $0) & 4294967295);
			var $2 = HEAPU8[($arrayidx)];
			var $conv = ((($2)) & 255);
			var $and = ($conv) & 64;
			var $or = ($and) | 129;
			var $conv1 = ((($or)) & 255);
			var $3 = $c_addr;
			var $4 = $tr_addr;
			var $letter_bits2 = (($4 + 708) & 4294967295);
			var $arrayidx3 = (($letter_bits2 + $3) & 4294967295);
			HEAP8[($arrayidx3)] = $conv1;;
			return;
			return;
		}

		function __ZL18SetCyrillicLettersP10Translator($tr) {;
			var __label__;
			var $tr_addr;
			$tr_addr = $tr;
			var $0 = HEAP32[((((_charsets + 72) & 4294967295)) >> 2)];
			var $1 = $tr_addr;
			var $charset_a0 = (($1 + 696) & 4294967295);
			HEAP32[(($charset_a0) >> 2)] = $0;
			var $2 = $tr_addr;
			var $transpose_min = (($2 + 288) & 4294967295);
			HEAP32[(($transpose_min) >> 2)] = 1072;
			var $3 = $tr_addr;
			var $transpose_max = (($3 + 284) & 4294967295);
			HEAP32[(($transpose_max) >> 2)] = 1105;
			var $4 = $tr_addr;
			var $frequent_pairs = (($4 + 8268) & 4294967295);
			HEAP32[(($frequent_pairs) >> 2)] = ((__ZL8pairs_ru) & 4294967295);
			var $5 = $tr_addr;
			var $letter_bits_offset = (($5 + 964) & 4294967295);
			HEAP32[(($letter_bits_offset) >> 2)] = 1056;
			var $6 = $tr_addr;
			var $letter_bits = (($6 + 708) & 4294967295);
			var $arraydecay = (($letter_bits) & 4294967295);
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $arraydecay;
			$stop$ = $dest$ + 256;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $7 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($7, 0, ((__ZZL18SetCyrillicLettersP10TranslatorE9ru_vowels) & 4294967295));
			var $8 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($8, 1, ((__ZZL18SetCyrillicLettersP10TranslatorE7ru_soft) & 4294967295));
			var $9 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($9, 2, ((__ZZL18SetCyrillicLettersP10TranslatorE13ru_consonants) & 4294967295));
			var $10 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($10, 3, ((__ZZL18SetCyrillicLettersP10TranslatorE7ru_hard) & 4294967295));
			var $11 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($11, 4, ((__ZZL18SetCyrillicLettersP10TranslatorE10ru_nothard) & 4294967295));
			var $12 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($12, 5, ((__ZZL18SetCyrillicLettersP10TranslatorE9ru_voiced) & 4294967295));
			var $13 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($13, 6, ((__ZZL18SetCyrillicLettersP10TranslatorE10ru_ivowels) & 4294967295));
			var $14 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($14, 7, ((__ZZL18SetCyrillicLettersP10TranslatorE9ru_vowels) & 4294967295));;
			return;
			return;
		}

		function __ZL15ResetLetterBitsP10Translatori($tr, $groups) {;
			var __label__;
			var $tr_addr;
			var $groups_addr;
			var $ix;
			var $mask;
			$tr_addr = $tr;
			$groups_addr = $groups;
			var $0 = $groups_addr;
			var $neg = ($0) ^ -1;
			$mask = $neg;
			$ix = 0;;
			while (1) {
				var $1 = $mask;
				var $2 = $ix;
				var $3 = $tr_addr;
				var $letter_bits = (($3 + 708) & 4294967295);
				var $arrayidx = (($letter_bits + $2) & 4294967295);
				var $4 = HEAPU8[($arrayidx)];
				var $conv = ((($4)) & 255);
				var $and = ($conv) & ($1);
				var $conv1 = ((($and)) & 255);
				HEAP8[($arrayidx)] = $conv1;
				var $5 = $ix;
				var $inc = ((($5) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) >>> 0) < 256;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			};
			return;
			return;
		}

		function __ZL18Translator_RussianP10Translator($tr) {;
			var __label__;
			var $tr_addr;
			$tr_addr = $tr;
			var $0 = $tr_addr;
			__Z15SetupTranslatorP10TranslatorPKsPKh($0, ((__ZZL18Translator_RussianP10TranslatorE17stress_lengths_ru) & 4294967295), ((__ZZL18Translator_RussianP10TranslatorE14stress_amps_ru) & 4294967295));
			var $1 = $tr_addr;
			__ZL18SetCyrillicLettersP10Translator($1);
			var $2 = $tr_addr;
			__ZL13SetLetterBitsP10TranslatoriPKc($2, 6, ((__ZZL18Translator_RussianP10TranslatorE11ru_ivowels2) & 4294967295));
			var $3 = $tr_addr;
			var $langopts = (($3) & 4294967295);
			var $param = (($langopts + 24) & 4294967295);
			var $arrayidx = (($param + 20) & 4294967295);
			HEAP32[(($arrayidx) >> 2)] = 1074;
			var $4 = $tr_addr;
			var $langopts1 = (($4) & 4294967295);
			var $param2 = (($langopts1 + 24) & 4294967295);
			var $arrayidx3 = (($param2 + 16) & 4294967295);
			HEAP32[(($arrayidx3) >> 2)] = 1;
			var $5 = $tr_addr;
			var $langopts4 = (($5) & 4294967295);
			var $param5 = (($langopts4 + 24) & 4294967295);
			var $arrayidx6 = (($param5 + 40) & 4294967295);
			HEAP32[(($arrayidx6) >> 2)] = 2;
			var $6 = $tr_addr;
			var $langopts7 = (($6) & 4294967295);
			var $stress_rule = (($langopts7 + 8) & 4294967295);
			HEAP32[(($stress_rule) >> 2)] = 5;
			var $7 = $tr_addr;
			var $langopts8 = (($7) & 4294967295);
			var $stress_flags = (($langopts8 + 12) & 4294967295);
			HEAP32[(($stress_flags) >> 2)] = 32;
			var $8 = $tr_addr;
			var $langopts9 = (($8) & 4294967295);
			var $numbers = (($langopts9 + 184) & 4294967295);
			HEAP32[(($numbers) >> 2)] = 1032;
			var $9 = $tr_addr;
			var $langopts10 = (($9) & 4294967295);
			var $numbers2 = (($langopts10 + 188) & 4294967295);
			HEAP32[(($numbers2) >> 2)] = 194;
			var $10 = $tr_addr;
			var $langopts11 = (($10) & 4294967295);
			var $phoneme_change = (($langopts11 + 244) & 4294967295);
			HEAP32[(($phoneme_change) >> 2)] = 1;
			var $11 = $tr_addr;
			var $langopts12 = (($11) & 4294967295);
			var $testing = (($langopts12 + 256) & 4294967295);
			HEAP32[(($testing) >> 2)] = 2;;
			return;
			return;
		}

		function __Z14ReadTonePointsPcPi($string, $tone_pts) {;
			var __label__;
			var $string_addr;
			var $tone_pts_addr;
			var $ix;
			$string_addr = $string;
			$tone_pts_addr = $tone_pts;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = $tone_pts_addr;
				var $arrayidx = (($1 + 4 * $0) & 4294967295);
				HEAP32[(($arrayidx) >> 2)] = -1;
				var $2 = $ix;
				var $inc = ((($2) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 12;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			var $3 = $string_addr;
			var $4 = $tone_pts_addr;
			var $arrayidx1 = (($4) & 4294967295);
			var $5 = $tone_pts_addr;
			var $arrayidx2 = (($5 + 4) & 4294967295);
			var $6 = $tone_pts_addr;
			var $arrayidx3 = (($6 + 8) & 4294967295);
			var $7 = $tone_pts_addr;
			var $arrayidx4 = (($7 + 12) & 4294967295);
			var $8 = $tone_pts_addr;
			var $arrayidx5 = (($8 + 16) & 4294967295);
			var $9 = $tone_pts_addr;
			var $arrayidx6 = (($9 + 20) & 4294967295);
			var $10 = $tone_pts_addr;
			var $arrayidx7 = (($10 + 24) & 4294967295);
			var $11 = $tone_pts_addr;
			var $arrayidx8 = (($11 + 28) & 4294967295);
			var $12 = $tone_pts_addr;
			var $arrayidx9 = (($12 + 32) & 4294967295);
			var $13 = $tone_pts_addr;
			var $arrayidx10 = (($13 + 36) & 4294967295);
			var $call = _sscanf($3, ((__str44696) & 4294967295), allocate([$arrayidx1, 0, 0, 0, $arrayidx2, 0, 0, 0, $arrayidx3, 0, 0, 0, $arrayidx4, 0, 0, 0, $arrayidx5, 0, 0, 0, $arrayidx6, 0, 0, 0, $arrayidx7, 0, 0, 0, $arrayidx8, 0, 0, 0, $arrayidx9, 0, 0, 0, $arrayidx10, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));;
			return;
			return;
		}

		function __Z10VoiceReseti($tone_only) {;
			var __label__;
			var $tone_only_addr;
			var $pk;
			$tone_only_addr = $tone_only;
			var $0 = HEAP32[((_voice) >> 2)];
			var $pitch_base = (($0 + 44) & 4294967295);
			HEAP32[(($pitch_base) >> 2)] = 290816;
			var $1 = HEAP32[((_voice) >> 2)];
			var $pitch_range = (($1 + 48) & 4294967295);
			HEAP32[(($pitch_range) >> 2)] = 4104;
			var $2 = HEAP32[((_voice) >> 2)];
			var $formant_factor = (($2 + 96) & 4294967295);
			HEAP32[(($formant_factor) >> 2)] = 256;
			var $3 = HEAP32[((_voice) >> 2)];
			var $speed_percent = (($3 + 64) & 4294967295);
			HEAP32[(($speed_percent) >> 2)] = 100;
			var $4 = HEAP32[((_voice) >> 2)];
			var $echo_delay = (($4 + 76) & 4294967295);
			HEAP32[(($echo_delay) >> 2)] = 0;
			var $5 = HEAP32[((_voice) >> 2)];
			var $echo_amp = (($5 + 80) & 4294967295);
			HEAP32[(($echo_amp) >> 2)] = 0;
			var $6 = HEAP32[((_voice) >> 2)];
			var $flutter = (($6 + 68) & 4294967295);
			HEAP32[(($flutter) >> 2)] = 64;
			var $7 = HEAP32[((_voice) >> 2)];
			var $n_harmonic_peaks = (($7 + 84) & 4294967295);
			HEAP32[(($n_harmonic_peaks) >> 2)] = 5;
			var $8 = HEAP32[((_voice) >> 2)];
			var $peak_shape = (($8 + 88) & 4294967295);
			HEAP32[(($peak_shape) >> 2)] = 0;
			var $9 = HEAP32[((_voice) >> 2)];
			var $voicing = (($9 + 92) & 4294967295);
			HEAP32[(($voicing) >> 2)] = 64;
			var $10 = HEAP32[((_voice) >> 2)];
			var $consonant_amp = (($10 + 100) & 4294967295);
			HEAP32[(($consonant_amp) >> 2)] = 100;
			var $11 = HEAP32[((_voice) >> 2)];
			var $consonant_ampv = (($11 + 104) & 4294967295);
			HEAP32[(($consonant_ampv) >> 2)] = 100;
			var $12 = HEAP32[((_voice) >> 2)];
			var $samplerate = (($12 + 108) & 4294967295);
			HEAP32[(($samplerate) >> 2)] = 22050;
			var $13 = HEAP32[((_voice) >> 2)];
			var $klattv = (($13 + 112) & 4294967295);
			var $arraydecay = (($klattv) & 4294967295);
			var $14 = $arraydecay;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $14;
			$stop$ = $dest$ + 32;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			HEAP32[((((_speed + 32) & 4294967295)) >> 2)] = 450;
			HEAP32[((((_speed + 32 + 4) & 4294967295)) >> 2)] = 800;
			HEAP32[((((_speed + 32 + 8) & 4294967295)) >> 2)] = 175;
			var $15 = HEAP32[((_voice) >> 2)];
			var $roughness = (($15 + 72) & 4294967295);
			HEAP32[(($roughness) >> 2)] = 2;
			__Z10InitBreathv();
			$pk = 0;;
			while (1) {
				var $16 = $pk;
				var $17 = HEAP32[((_voice) >> 2)];
				var $freq = (($17 + 144) & 4294967295);
				var $arrayidx = (($freq + $16 * 2) & 4294967295);
				HEAP16[(($arrayidx) >> 1)] = 256;
				var $18 = $pk;
				var $arrayidx1 = ((__ZZ10VoiceResetiE15default_heights + $18) & 4294967295);
				var $19 = HEAPU8[($arrayidx1)];
				var $conv = ((($19)) & 255);
				var $mul = ((($conv) * 2) & 4294967295);
				var $conv2 = ((($mul)) & 65535);
				var $20 = $pk;
				var $21 = HEAP32[((_voice) >> 2)];
				var $height = (($21 + 162) & 4294967295);
				var $arrayidx3 = (($height + $20 * 2) & 4294967295);
				HEAP16[(($arrayidx3) >> 1)] = $conv2;
				var $22 = $pk;
				var $arrayidx4 = ((__ZZ10VoiceResetiE14default_widths + $22) & 4294967295);
				var $23 = HEAPU8[($arrayidx4)];
				var $conv5 = ((($23)) & 255);
				var $mul6 = ((($conv5) * 2) & 4294967295);
				var $conv7 = ((($mul6)) & 65535);
				var $24 = $pk;
				var $25 = HEAP32[((_voice) >> 2)];
				var $width = (($25 + 180) & 4294967295);
				var $arrayidx8 = (($width + $24 * 2) & 4294967295);
				HEAP16[(($arrayidx8) >> 1)] = $conv7;
				var $26 = $pk;
				var $27 = HEAP32[((_voice) >> 2)];
				var $breath = (($27 + 272) & 4294967295);
				var $arrayidx9 = (($breath + $26 * 4) & 4294967295);
				HEAP32[(($arrayidx9) >> 2)] = 0;
				var $28 = $pk;
				var $arrayidx10 = ((__ZZ10VoiceResetiE13breath_widths + $28 * 4) & 4294967295);
				var $29 = HEAP32[(($arrayidx10) >> 2)];
				var $30 = $pk;
				var $31 = HEAP32[((_voice) >> 2)];
				var $breathw = (($31 + 308) & 4294967295);
				var $arrayidx11 = (($breathw + $30 * 4) & 4294967295);
				HEAP32[(($arrayidx11) >> 2)] = $29;
				var $32 = $pk;
				var $33 = HEAP32[((_voice) >> 2)];
				var $freqadd = (($33 + 198) & 4294967295);
				var $arrayidx12 = (($freqadd + $32 * 2) & 4294967295);
				HEAP16[(($arrayidx12) >> 1)] = 0;
				var $34 = $pk;
				var $arrayidx13 = ((__ZL18formant_rate_22050 + $34 * 4) & 4294967295);
				var $35 = HEAP32[(($arrayidx13) >> 2)];
				var $mul14 = ((($35) * 22050) & 4294967295);
				var $36 = HEAP32[((_samplerate) >> 2)];
				var $div = ((((($mul14)) | 0) / ((($36)) | 0)) | 0);
				var $37 = $pk;
				var $arrayidx15 = ((_formant_rate + $37 * 4) & 4294967295);
				HEAP32[(($arrayidx15) >> 2)] = $div;
				var $38 = $pk;
				var $inc = ((($38) + 1) & 4294967295);
				$pk = $inc;
				var $cmp = ((($inc)) | 0) < 9;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			var $39 = HEAP32[((_voice) >> 2)];
			var $height16 = (($39 + 162) & 4294967295);
			var $arrayidx17 = (($height16 + 4) & 4294967295);
			HEAP16[(($arrayidx17) >> 1)] = 240;
			var $40 = HEAP32[((_voice) >> 2)];
			__ZL13SetToneAdjustP7voice_tPi($40, ((_tone_points) & 4294967295));
			var $41 = HEAP32[((_voice) >> 2)];
			var $speedf1 = (($41 + 52) & 4294967295);
			HEAP32[(($speedf1) >> 2)] = 256;
			var $42 = HEAP32[((_voice) >> 2)];
			var $speedf2 = (($42 + 56) & 4294967295);
			HEAP32[(($speedf2) >> 2)] = 238;
			var $43 = HEAP32[((_voice) >> 2)];
			var $speedf3 = (($43 + 60) & 4294967295);
			HEAP32[(($speedf3) >> 2)] = 232;
			var $44 = $tone_only_addr;
			var $cmp18 = ((($44)) | 0) == 0;
			if ($cmp18) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				HEAP32[((_n_replace_phonemes) >> 2)] = 0;
				HEAP32[((_option_quiet) >> 2)] = 0;
				var $call = __Z15LoadMbrolaTablePKcS0_i(0, 0, 0);;
			};
			return;
			return;
		}

		function __ZL13SetToneAdjustP7voice_tPi($voice, $tone_pts) {;
			var __label__;
			var $voice_addr;
			var $tone_pts_addr;
			var $ix;
			var $pt;
			var $y;
			var $freq1;
			var $freq2;
			var $height1;
			var $height2;
			var $rate;
			$voice_addr = $voice;
			$tone_pts_addr = $tone_pts;
			$freq1 = 0;
			var $0 = $tone_pts_addr;
			var $arrayidx = (($0 + 4) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			$height1 = $1;
			$pt = 0;;
			$for_body$2: while (1) {
				var $2 = $pt;
				var $3 = $tone_pts_addr;
				var $arrayidx1 = (($3 + 4 * $2) & 4294967295);
				var $4 = HEAP32[(($arrayidx1) >> 2)];
				var $cmp2 = ((($4)) | 0) == -1;
				if ($cmp2) {
					__label__ = 2;;
				} else {
					__label__ = 4;;
				}
				$if_then$$if_end8$4: do {
					if (__label__ == 2) {
						var $5 = $pt;
						var $6 = $tone_pts_addr;
						var $arrayidx3 = (($6 + 4 * $5) & 4294967295);
						HEAP32[(($arrayidx3) >> 2)] = 8000;
						var $7 = $pt;
						var $cmp4 = ((($7)) | 0) > 0;
						if (!($cmp4)) {
							__label__ = 4;
							break $if_then$$if_end8$4;
						}
						var $8 = $pt;
						var $sub = ((($8) - 1) & 4294967295);
						var $9 = $tone_pts_addr;
						var $arrayidx6 = (($9 + 4 * $sub) & 4294967295);
						var $10 = HEAP32[(($arrayidx6) >> 2)];
						var $11 = $pt;
						var $add = ((($11) + 1) & 4294967295);
						var $12 = $tone_pts_addr;
						var $arrayidx7 = (($12 + 4 * $add) & 4294967295);
						HEAP32[(($arrayidx7) >> 2)] = $10;;
					}
				} while (0);
				var $13 = $pt;
				var $14 = $tone_pts_addr;
				var $arrayidx9 = (($14 + 4 * $13) & 4294967295);
				var $15 = HEAP32[(($arrayidx9) >> 2)];
				var $div = ((((($15)) | 0) / 8) | 0);
				$freq2 = $div;
				var $16 = $pt;
				var $add10 = ((($16) + 1) & 4294967295);
				var $17 = $tone_pts_addr;
				var $arrayidx11 = (($17 + 4 * $add10) & 4294967295);
				var $18 = HEAP32[(($arrayidx11) >> 2)];
				$height2 = $18;
				var $19 = $freq2;
				var $20 = $freq1;
				var $sub12 = ((($19) - ($20)) & 4294967295);
				var $cmp13 = ((($sub12)) | 0) > 0;
				if ($cmp13) {
					__label__ = 5;;
				} else {
					__label__ = 9;;
				}
				$if_then14$$if_end31$8: do {
					if (__label__ == 5) {
						var $21 = $height2;
						var $22 = $height1;
						var $sub15 = ((($21) - ($22)) & 4294967295);
						var $conv = ((($sub15)) | 0);
						var $23 = $freq2;
						var $24 = $freq1;
						var $sub16 = ((($23) - ($24)) & 4294967295);
						var $conv17 = ((($sub16)) | 0);
						var $div18 = ($conv) / ($conv17);
						$rate = $div18;
						var $25 = $freq1;
						$ix = $25;
						var $26 = $ix;
						var $27 = $freq2;
						var $cmp201 = ((($26)) | 0) < ((($27)) | 0);
						if (!($cmp201)) {
							__label__ = 9;
							break $if_then14$$if_end31$8;
						}
						while (1) {
							var $28 = $height1;
							var $29 = $rate;
							var $30 = $ix;
							var $31 = $freq1;
							var $sub22 = ((($30) - ($31)) & 4294967295);
							var $conv23 = ((($sub22)) | 0);
							var $mul = ($29) * ($conv23);
							var $conv24 = ((($mul)) | 0);
							var $add25 = ((($conv24) + ($28)) & 4294967295);
							$y = $add25;
							var $cmp26 = ((($add25)) | 0) > 255;
							if ($cmp26) {
								__label__ = 7;;
							} else {
								__label__ = 8;;
							}
							if (__label__ == 7) {
								$y = 255;;
							}
							var $32 = $y;
							var $conv29 = ((($32)) & 255);
							var $33 = $ix;
							var $34 = $voice_addr;
							var $tone_adjust = (($34 + 344) & 4294967295);
							var $arrayidx30 = (($tone_adjust + $33) & 4294967295);
							HEAP8[($arrayidx30)] = $conv29;
							var $35 = $ix;
							var $inc = ((($35) + 1) & 4294967295);
							$ix = $inc;
							var $36 = $ix;
							var $37 = $freq2;
							var $cmp20 = ((($36)) | 0) < ((($37)) | 0);
							if ($cmp20) {
								__label__ = 6;
								continue;
							} else {
								__label__ = 9;
								break $if_then14$$if_end31$8;
							}
						}
					}
				} while (0);
				var $38 = $freq2;
				$freq1 = $38;
				var $39 = $height2;
				$height1 = $39;
				var $40 = $pt;
				var $add33 = ((($40) + 2) & 4294967295);
				$pt = $add33;
				var $cmp = ((($add33)) | 0) < 12;
				if ($cmp) {
					__label__ = 1;
					continue $for_body$2;
				} else {
					__label__ = 10;
					break $for_body$2;
				}
			};
			return;
			return;
		}

		function __Z9LoadVoicePKci($vname, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 1260;
			_memset(__stackBase__, 0, 1260);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $vname_addr;
			var $control_addr;
			var $f_voice;
			var $p;
			var $key;
			var $ix;
			var $n;
			var $value = __stackBase__;
			var $value2 = __stackBase__ + 4;
			var $error;
			var $langix;
			var $tone_only;
			var $language_set;
			var $phonemes_set;
			var $stress_amps_set;
			var $stress_lengths_set;
			var $stress_add_set;
			var $conditional_rules;
			var $langopts;
			var $new_translator;
			var $voicename = __stackBase__ + 8;
			var $language_name = __stackBase__ + 48;
			var $translator_name = __stackBase__ + 88;
			var $new_dictionary = __stackBase__ + 128;
			var $phonemes_name = __stackBase__ + 168;
			var $option_name = __stackBase__ + 208;
			var $language_type;
			var $buf = __stackBase__ + 248;
			var $path_voices = __stackBase__ + 448;
			var $langname = __stackBase__ + 612;
			var $stress_amps = __stackBase__ + 616;
			var $stress_lengths = __stackBase__ + 648;
			var $stress_add = __stackBase__ + 680;
			var $names = __stackBase__ + 712;
			var $pitch1 = __stackBase__ + 1032;
			var $pitch2 = __stackBase__ + 1036;
			var $len;
			var $priority = __stackBase__ + 1040;
			var $age = __stackBase__ + 1044;
			var $vgender = __stackBase__ + 1048;
			var $factor;
			var $tone_data = __stackBase__ + 1128;
			var $srate = __stackBase__ + 1176;
			var $name = __stackBase__ + 1180;
			var $phtrans = __stackBase__ + 1220;
			$vname_addr = $vname;
			$control_addr = $control;
			$f_voice = 0;
			$error = 0;
			$langix = 0;
			var $0 = $control_addr;
			var $and = ($0) & 2;
			$tone_only = $and;
			$language_set = 0;
			$phonemes_set = 0;
			$stress_amps_set = 0;
			$stress_lengths_set = 0;
			$stress_add_set = 0;
			$conditional_rules = 0;
			$langopts = 0;
			$new_translator = 0;
			var $arraydecay = (($voicename) & 4294967295);
			var $1 = $vname_addr;
			var $call = _strcpy($arraydecay, $1);
			var $arrayidx = (($voicename) & 4294967295);
			var $2 = HEAP8[($arrayidx)];
			var $conv = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp = ((($conv)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $arraydecay1 = (($voicename) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = ((__str45697) & 4294967295);
				$dest$ = $arraydecay1;
				$stop$ = $src$ + 8;
				if (($dest$ % 4) == ($src$ % 4) && 8 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};;
			}
			var $3 = $control_addr;
			var $and3 = ($3) & 16;
			var $tobool = ((($and3)) | 0) != 0;
			if ($tobool) {
				__label__ = 3;;
			} else {
				__label__ = 5;;
			}
			$if_then4$$if_else$5: do {
				if (__label__ == 3) {
					var $arraydecay5 = (($buf) & 4294967295);
					var $4 = $vname_addr;
					var $call6 = _strcpy($arraydecay5, $4);
					var $arraydecay7 = (($buf) & 4294967295);
					var $call8 = __Z13GetFileLengthPKc($arraydecay7);
					var $cmp9 = ((($call8)) | 0) <= 0;
					if (!($cmp9)) {
						__label__ = 9;
						break $if_then4$$if_else$5;
					}
					$retval = 0;
					__label__ = 137;
					break $if_then4$$if_else$5;
				} else if (__label__ == 5) {
					var $arraydecay12 = (($path_voices) & 4294967295);
					var $call13 = _sprintf($arraydecay12, ((__str46698) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0, 47, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
					var $arraydecay14 = (($buf) & 4294967295);
					var $arraydecay15 = (($path_voices) & 4294967295);
					var $arraydecay16 = (($voicename) & 4294967295);
					var $call17 = _sprintf($arraydecay14, ((__str47699) & 4294967295), allocate([$arraydecay15, 0, 0, 0, $arraydecay16, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay18 = (($buf) & 4294967295);
					var $call19 = __Z13GetFileLengthPKc($arraydecay18);
					var $cmp20 = ((($call19)) | 0) <= 0;
					if (!($cmp20)) {
						__label__ = 9;
						break $if_then4$$if_else$5;
					}
					var $arrayidx22 = (($voicename) & 4294967295);
					var $5 = HEAP8[($arrayidx22)];
					var $arrayidx23 = (($langname) & 4294967295);
					HEAP8[($arrayidx23)] = $5;
					var $arrayidx24 = (($voicename + 1) & 4294967295);
					var $6 = HEAP8[($arrayidx24)];
					var $arrayidx25 = (($langname + 1) & 4294967295);
					HEAP8[($arrayidx25)] = $6;
					var $arrayidx26 = (($langname + 2) & 4294967295);
					HEAP8[($arrayidx26)] = 0;
					var $arraydecay27 = (($buf) & 4294967295);
					var $arraydecay28 = (($path_voices) & 4294967295);
					var $arraydecay29 = (($langname) & 4294967295);
					var $arraydecay30 = (($voicename) & 4294967295);
					var $call31 = _sprintf($arraydecay27, ((__str48700) & 4294967295), allocate([$arraydecay28, 0, 0, 0, $arraydecay29, 0, 0, 0, 47, 0, 0, 0, $arraydecay30, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay32 = (($buf) & 4294967295);
					var $call33 = __Z13GetFileLengthPKc($arraydecay32);
					var $cmp34 = ((($call33)) | 0) <= 0;
					if (!($cmp34)) {
						__label__ = 9;
						break $if_then4$$if_else$5;
					}
					var $arraydecay36 = (($buf) & 4294967295);
					var $arraydecay37 = (($path_voices) & 4294967295);
					var $arraydecay38 = (($voicename) & 4294967295);
					var $call39 = _sprintf($arraydecay36, ((__str49701) & 4294967295), allocate([$arraydecay37, 0, 0, 0, 47, 0, 0, 0, $arraydecay38, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					var $arraydecay40 = (($buf) & 4294967295);
					var $call41 = __Z13GetFileLengthPKc($arraydecay40);
					var $cmp42 = ((($call41)) | 0) <= 0;
					if (!($cmp42)) {
						__label__ = 9;
						break $if_then4$$if_else$5;
					}
					var $arraydecay44 = (($buf) & 4294967295);
					var $arraydecay45 = (($path_voices) & 4294967295);
					var $arraydecay46 = (($voicename) & 4294967295);
					var $call47 = _sprintf($arraydecay44, ((__str50702) & 4294967295), allocate([$arraydecay45, 0, 0, 0, 47, 0, 0, 0, $arraydecay46, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
					__label__ = 9;
					break $if_then4$$if_else$5;
				}
			} while (0);
			$return$$if_end51$12: do {
				if (__label__ == 9) {
					var $arraydecay52 = (($buf) & 4294967295);
					var $call53 = _fopen($arraydecay52, ((__str51703) & 4294967295));
					$f_voice = $call53;
					$language_type = ((__str52704) & 4294967295);
					var $cmp54 = ((($call53)) | 0) == 0;
					if ($cmp54) {
						__label__ = 10;;
					} else {
						__label__ = 14;;
					}
					$if_then55$$if_end66$14: do {
						if (__label__ == 10) {
							var $7 = $control_addr;
							var $and56 = ($7) & 3;
							var $tobool57 = ((($and56)) | 0) != 0;
							if ($tobool57) {
								__label__ = 11;;
							} else {
								__label__ = 12;;
							}
							if (__label__ == 11) {
								$retval = 0;
								__label__ = 137;
								break $return$$if_end51$12;
							} else if (__label__ == 12) {
								var $arraydecay60 = (($voicename) & 4294967295);
								var $call61 = __Z22SelectPhonemeTableNamePKc($arraydecay60);
								var $cmp62 = ((($call61)) | 0) >= 0;
								if (!($cmp62)) {
									__label__ = 14;
									break $if_then55$$if_end66$14;
								}
								var $arraydecay64 = (($voicename) & 4294967295);
								$language_type = $arraydecay64;;
							}
						}
					} while (0);
					var $8 = $tone_only;
					var $tobool67 = ((($8)) | 0) == 0;
					var $9 = HEAP32[((_translator) >> 2)];
					var $cmp68 = ((($9)) | 0) != 0;
					var $or_cond = ($tobool67) & ($cmp68);
					if ($or_cond) {
						__label__ = 15;;
					} else {
						__label__ = 16;;
					}
					if (__label__ == 15) {
						var $10 = HEAP32[((_translator) >> 2)];
						__Z16DeleteTranslatorP10Translator($10);
						HEAP32[((_translator) >> 2)] = 0;;
					}
					var $arraydecay71 = (($translator_name) & 4294967295);
					var $11 = $language_type;
					var $call72 = _strcpy($arraydecay71, $11);
					var $arraydecay73 = (($new_dictionary) & 4294967295);
					var $12 = $language_type;
					var $call74 = _strcpy($arraydecay73, $12);
					var $arraydecay75 = (($phonemes_name) & 4294967295);
					var $13 = $language_type;
					var $call76 = _strcpy($arraydecay75, $13);
					var $14 = $tone_only;
					var $tobool77 = ((($14)) | 0) != 0;
					if ($tobool77) {
						__label__ = 18;;
					} else {
						__label__ = 17;;
					}
					if (__label__ == 18) {
						var $call80 = _strchr(((__ZZ9LoadVoicePKciE16voice_identifier) & 4294967295), 43);
						$p = $call80;
						var $cmp81 = ((($call80)) | 0) != 0;
						if ($cmp81) {
							__label__ = 19;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 19) {
							var $16 = $p;
							HEAP8[($16)] = 0;;
						}
						var $arraydecay84 = (($buf) & 4294967295);
						var $17 = $vname_addr;
						var $arrayidx85 = (($17 + 3) & 4294967295);
						var $call86 = _sprintf($arraydecay84, ((__str53705) & 4294967295), allocate([$arrayidx85, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
						var $arraydecay87 = (($buf) & 4294967295);
						var $call88 = _strcat(((__ZZ9LoadVoicePKciE16voice_identifier) & 4294967295), $arraydecay87);
						var $18 = HEAP32[((_translator) >> 2)];
						var $langopts89 = (($18) & 4294967295);
						$langopts = $langopts89;;
					} else if (__label__ == 17) {
						HEAP32[((_voice) >> 2)] = __ZL9voicedata;
						var $15 = $vname_addr;
						__Z8strncpy0PcPKci(((__ZZ9LoadVoicePKciE16voice_identifier) & 4294967295), $15, 40);
						HEAP8[(((__ZZ9LoadVoicePKciE10voice_name) & 4294967295))] = 0;
						HEAP8[(((__ZZ9LoadVoicePKciE15voice_languages) & 4294967295))] = 0;
						HEAP32[((((_voice_selected + 8) & 4294967295)) >> 2)] = ((__ZZ9LoadVoicePKciE16voice_identifier) & 4294967295);
						HEAP32[((((_voice_selected) & 4294967295)) >> 2)] = ((__ZZ9LoadVoicePKciE10voice_name) & 4294967295);
						HEAP32[((((_voice_selected + 4) & 4294967295)) >> 2)] = ((__ZZ9LoadVoicePKciE15voice_languages) & 4294967295);;
					}
					var $19 = $tone_only;
					__Z10VoiceReseti($19);
					var $20 = $tone_only;
					var $tobool91 = ((($20)) | 0) != 0;
					if ($tobool91) {
						__label__ = 23;;
					} else {
						__label__ = 22;;
					}
					if (__label__ == 22) {
						var $arraydecay93 = (($phonemes_name) & 4294967295);
						var $call94 = __Z22SelectPhonemeTableNamePKc($arraydecay93);;
					}
					var $arraydecay97 = (($buf) & 4294967295);
					var $arraydecay100 = (($buf) & 4294967295);
					var $arrayidx109 = (($buf) & 4294967295);
					var $arraydecay114 = (($buf) & 4294967295);
					var $arraydecay416 = (($buf) & 4294967295);
					var $arrayidx119 = (($language_name) & 4294967295);
					var $arraydecay120 = (($language_name) & 4294967295);
					var $arraydecay122 = (($language_name) & 4294967295);
					var $arraydecay127 = (($language_name) & 4294967295);
					var $arraydecay136 = (($language_name) & 4294967295);
					var $arraydecay142 = (($language_name) & 4294967295);
					var $arraydecay144 = (($translator_name) & 4294967295);
					var $arraydecay146 = (($new_dictionary) & 4294967295);
					var $arraydecay148 = (($phonemes_name) & 4294967295);
					var $arraydecay150 = (($phonemes_name) & 4294967295);
					var $arraydecay155 = (($translator_name) & 4294967295);
					var $arraydecay170 = (($vgender) & 4294967295);
					var $arraydecay172 = (($vgender) & 4294967295);
					var $arraydecay180 = (($translator_name) & 4294967295);
					var $arraydecay185 = (($translator_name) & 4294967295);
					var $arraydecay189 = (($new_dictionary) & 4294967295);
					var $arraydecay192 = (($phonemes_name) & 4294967295);
					var $arraydecay206 = (($stress_lengths) & 4294967295);
					var $arraydecay209 = (($stress_amps) & 4294967295);
					var $arraydecay212 = (($stress_add) & 4294967295);
					var $arrayidx222 = (($names) & 4294967295);
					var $arraydecay223 = (($arrayidx222) & 4294967295);
					var $arrayidx224 = (($names + 40) & 4294967295);
					var $arraydecay225 = (($arrayidx224) & 4294967295);
					var $arrayidx226 = (($names + 80) & 4294967295);
					var $arraydecay227 = (($arrayidx226) & 4294967295);
					var $arrayidx228 = (($names + 120) & 4294967295);
					var $arraydecay229 = (($arrayidx228) & 4294967295);
					var $arrayidx230 = (($names + 160) & 4294967295);
					var $arraydecay231 = (($arrayidx230) & 4294967295);
					var $arrayidx232 = (($names + 200) & 4294967295);
					var $arraydecay233 = (($arrayidx232) & 4294967295);
					var $arraydecay290 = (($phonemes_name) & 4294967295);
					var $arraydecay308 = (($option_name) & 4294967295);
					var $arraydecay312 = (($option_name) & 4294967295);
					var $arraydecay320 = (($buf) & 4294967295);
					var $arraydecay347 = (($tone_data) & 4294967295);
					var $arraydecay348 = (($tone_data) & 4294967295);
					var $arrayidx385 = (($phtrans) & 4294967295);
					var $arraydecay386 = (($name) & 4294967295);
					var $arraydecay387 = (($phtrans) & 4294967295);
					var $arraydecay389 = (($name) & 4294967295);
					var $arraydecay390 = (($phtrans) & 4294967295);;
					$while_cond$34: while (1) {
						var $21 = $f_voice;
						var $cmp96 = ((($21)) | 0) != 0;
						if (!($cmp96)) {
							__label__ = 114;
							break $while_cond$34;
						}
						var $22 = $f_voice;
						var $call98 = __ZL11fgets_stripPciP7__sFILE($arraydecay97, 200, $22);
						var $cmp99 = ((($call98)) | 0) != 0;
						if (!($cmp99)) {
							__label__ = 112;
							break $while_cond$34;
						}
						$p = $arraydecay100;;
						$for_cond$38: while (1) {
							var $23 = $p;
							var $24 = HEAP8[($23)];
							var $conv101 = (tempInt = (($24)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp102 = ((($conv101)) | 0) != 0;
							if (!($cmp102)) {
								__label__ = 30;
								break $for_cond$38;
							}
							var $25 = $p;
							var $26 = HEAP8[($25)];
							var $conv104 = (tempInt = (($26)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $call105 = _isspace($conv104);
							var $tobool106 = ((($call105)) | 0) != 0;
							var $lnot = ($tobool106) ^ 1;
							if (!($lnot)) {
								__label__ = 30;
								break $for_cond$38;
							}
							var $27 = $p;
							var $incdec_ptr = (($27 + 1) & 4294967295);
							$p = $incdec_ptr;
							__label__ = 27;
							continue $for_cond$38;
						}
						var $28 = $p;
						var $incdec_ptr108 = (($28 + 1) & 4294967295);
						$p = $incdec_ptr108;
						HEAP8[($28)] = 0;
						var $29 = HEAP8[($arrayidx109)];
						var $conv110 = (tempInt = (($29)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp111 = ((($conv110)) | 0) == 0;
						if ($cmp111) {
							__label__ = 24;
							continue $while_cond$34;
						}
						var $call115 = __Z10LookupMnemP8MNEM_TABPKc(((__ZL11keyword_tab) & 4294967295), $arraydecay114);
						$key = $call115;
						var $30 = $key;
						if ($30 == 2) {
							__label__ = 33;;
						} else if ($30 == 1) {
							__label__ = 41;;
						} else if ($30 == 3) {
							__label__ = 45;;
						} else if ($30 == 4) {
							__label__ = 46;;
						} else if ($30 == 6) {
							__label__ = 50;;
						} else if ($30 == 5) {
							__label__ = 51;;
						} else if ($30 == 7) {
							__label__ = 52;;
						} else if ($30 == 8) {
							__label__ = 53;;
						} else if ($30 == 20) {
							__label__ = 54;;
						} else if ($30 == 21) {
							__label__ = 55;;
						} else if ($30 == 22) {
							__label__ = 56;;
						} else if ($30 == 18) {
							__label__ = 57;;
						} else if ($30 == 19) {
							__label__ = 59;;
						} else if ($30 == 23) {
							__label__ = 32;;
						} else if ($30 == 32) {
							__label__ = 73;;
						} else if ($30 == 17) {
							__label__ = 76;;
						} else if ($30 == 24) {
							__label__ = 77;;
						} else if ($30 == 25) {
							__label__ = 78;;
						} else if ($30 == 26) {
							__label__ = 80;;
						} else if ($30 == 27) {
							__label__ = 81;;
						} else if ($30 == 9) {
							__label__ = 85;;
						} else if ($30 == 10) {
							__label__ = 86;;
						} else if ($30 == 11) {
							__label__ = 88;;
						} else if ($30 == 12) {
							__label__ = 90;;
						} else if ($30 == 13) {
							__label__ = 94;;
						} else if ($30 == 14) {
							__label__ = 95;;
						} else if ($30 == 15) {
							__label__ = 97;;
						} else if ($30 == 16) {
							__label__ = 101;;
						} else if ($30 == 33) {
							__label__ = 102;;
						} else if ($30 == 31) {
							__label__ = 103;;
						} else if ($30 == 28) {
							__label__ = 104;;
						} else if ($30 == 29) {
							__label__ = 107;;
						} else if ($30 == 30) {
							__label__ = 108;;
						} else {
							__label__ = 109;;
						}
						if (__label__ == 109) {
							var $195 = $key;
							var $and407 = ($195) & 65280;
							var $cmp408 = ((($and407)) | 0) == 256;
							if ($cmp408) {
								__label__ = 110;;
							} else {
								__label__ = 111;;
							}
							if (__label__ == 110) {
								var $196 = $p;
								var $197 = $key;
								var $and410 = ($197) & 255;
								var $198 = $langopts;
								var $param411 = (($198 + 24) & 4294967295);
								var $arrayidx412 = (($param411 + $and410 * 4) & 4294967295);
								var $call413 = _sscanf($196, ((__str63715) & 4294967295), allocate([$arrayidx412, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
								__label__ = 24;
								continue $while_cond$34;
							} else if (__label__ == 111) {
								var $199 = HEAP32[((__impure_ptr) >> 2)];
								var $_stderr415 = (($199 + 12) & 4294967295);
								var $200 = HEAP32[(($_stderr415) >> 2)];
								var $call417 = _fprintf($200, ((__str68720) & 4294967295), allocate([$arraydecay416, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
								__label__ = 24;
								continue $while_cond$34;
							}
						} else if (__label__ == 33) {
							var $33 = $tone_only;
							var $tobool116 = ((($33)) | 0) != 0;
							if ($tobool116) {
								__label__ = 24;
								continue $while_cond$34;
							}
							HEAP32[(($priority) >> 2)] = 5;
							HEAP8[($arrayidx119)] = 0;
							var $34 = $p;
							var $call121 = _sscanf($34, ((__str54706) & 4294967295), allocate([$arraydecay120, 0, 0, 0, $priority, 0, 0, 0], ["i8*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							var $call123 = _strcmp($arraydecay122, ((__str55707) & 4294967295));
							var $cmp124 = ((($call123)) | 0) == 0;
							if ($cmp124) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $call128 = _strlen($arraydecay127);
							var $add = ((($call128) + 2) & 4294967295);
							$len = $add;
							var $35 = $len;
							var $36 = $langix;
							var $_neg = (((-($36))) & 4294967295);
							var $sub129 = ((($_neg) + 99) & 4294967295);
							var $cmp130 = ((($35)) >>> 0) < ((($sub129)) >>> 0);
							if ($cmp130) {
								__label__ = 36;;
							} else {
								__label__ = 37;;
							}
							if (__label__ == 36) {
								var $37 = HEAP32[(($priority) >> 2)];
								var $conv132 = ((($37)) & 255);
								var $38 = $langix;
								var $arrayidx133 = ((__ZZ9LoadVoicePKciE15voice_languages + $38) & 4294967295);
								HEAP8[($arrayidx133)] = $conv132;
								var $39 = $langix;
								var $add134 = ((($39) + 1) & 4294967295);
								var $arrayidx135 = ((__ZZ9LoadVoicePKciE15voice_languages + $add134) & 4294967295);
								var $call137 = _strcpy($arrayidx135, $arraydecay136);
								var $40 = $len;
								var $41 = $langix;
								var $add138 = ((($41) + ($40)) & 4294967295);
								$langix = $add138;;
							}
							var $42 = $language_set;
							var $cmp140 = ((($42)) | 0) == 0;
							if (!($cmp140)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $call143 = _strtok($arraydecay142, ((__str56708) & 4294967295));
							$language_type = $call143;
							$language_set = 1;
							var $43 = $language_type;
							var $call145 = _strcpy($arraydecay144, $43);
							var $44 = $language_type;
							var $call147 = _strcpy($arraydecay146, $44);
							var $45 = $language_type;
							var $call149 = _strcpy($arraydecay148, $45);
							var $call151 = __Z22SelectPhonemeTableNamePKc($arraydecay150);
							var $46 = $new_translator;
							var $cmp152 = ((($46)) | 0) != 0;
							if ($cmp152) {
								__label__ = 39;;
							} else {
								__label__ = 40;;
							}
							if (__label__ == 39) {
								var $47 = $new_translator;
								__Z16DeleteTranslatorP10Translator($47);;
							}
							var $call156 = __Z16SelectTranslatorPKc($arraydecay155);
							$new_translator = $call156;
							var $48 = $new_translator;
							var $langopts157 = (($48) & 4294967295);
							$langopts = $langopts157;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 41) {
							var $49 = $tone_only;
							var $cmp160 = ((($49)) | 0) == 0;
							if (!($cmp160)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $50 = $p;
							var $51 = HEAP8[($50)];
							var $conv1636 = (tempInt = (($51)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $call1647 = _isspace($conv1636);
							var $tobool1658 = ((($call1647)) | 0) != 0;
							var $52 = $p;
							if ($tobool1658) {
								__lastLabel__ = 42;
								__label__ = 43;;
							} else {
								__lastLabel__ = 42;
								__label__ = 44;;
							}
							$while_body166$$while_end$61: do {
								if (__label__ == 43) {
									while (1) {
										var $53 = __lastLabel__ == 43 ? $56 : ($52);
										var $incdec_ptr167 = (($53 + 1) & 4294967295);
										$p = $incdec_ptr167;
										var $54 = $p;
										var $55 = HEAP8[($54)];
										var $conv163 = (tempInt = (($55)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $call164 = _isspace($conv163);
										var $tobool165 = ((($call164)) | 0) != 0;
										var $56 = $p;
										if ($tobool165) {
											__lastLabel__ = 43;
											__label__ = 43;
											continue;
										} else {
											__lastLabel__ = 43;
											__label__ = 44;
											break $while_body166$$while_end$61;
										}
									}
								}
							} while (0);
							var $_lcssa = __lastLabel__ == 42 ? $52 : ($56);
							__Z8strncpy0PcPKci(((__ZZ9LoadVoicePKciE10voice_name) & 4294967295), $_lcssa, 40);
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 45) {
							HEAP32[(($age) >> 2)] = 0;
							var $57 = $p;
							var $call171 = _sscanf($57, ((__str54706) & 4294967295), allocate([$arraydecay170, 0, 0, 0, $age, 0, 0, 0], ["i8*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							var $call173 = __Z10LookupMnemP8MNEM_TABPKc(((_genders) & 4294967295), $arraydecay172);
							var $conv174 = ((($call173)) & 255);
							HEAP8[(((_voice_selected + 12) & 4294967295))] = $conv174;
							var $58 = HEAP32[(($age) >> 2)];
							var $conv175 = ((($58)) & 255);
							HEAP8[(((_voice_selected + 13) & 4294967295))] = $conv175;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 46) {
							var $59 = $tone_only;
							var $tobool177 = ((($59)) | 0) != 0;
							if ($tobool177) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $60 = $p;
							var $call181 = _sscanf($60, ((__str57709) & 4294967295), allocate([$arraydecay180, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							var $61 = $new_translator;
							var $cmp182 = ((($61)) | 0) != 0;
							if ($cmp182) {
								__label__ = 48;;
							} else {
								__label__ = 49;;
							}
							if (__label__ == 48) {
								var $62 = $new_translator;
								__Z16DeleteTranslatorP10Translator($62);;
							}
							var $call186 = __Z16SelectTranslatorPKc($arraydecay185);
							$new_translator = $call186;
							var $63 = $new_translator;
							var $langopts187 = (($63) & 4294967295);
							$langopts = $langopts187;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 50) {
							var $64 = $p;
							var $call190 = _sscanf($64, ((__str57709) & 4294967295), allocate([$arraydecay189, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 51) {
							var $65 = $p;
							var $call193 = _sscanf($65, ((__str57709) & 4294967295), allocate([$arraydecay192, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 52) {
							var $66 = $p;
							__ZL12VoiceFormantPc($66);
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 53) {
							var $67 = $p;
							var $call196 = _sscanf($67, ((__str58710) & 4294967295), allocate([$pitch1, 0, 0, 0, $pitch2, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							$n = $call196;
							var $68 = HEAP32[(($pitch1) >> 2)];
							var $sub197 = ((($68) - 9) & 4294967295);
							var $shl = ($sub197) << 12;
							var $69 = HEAP32[((_voice) >> 2)];
							var $pitch_base = (($69 + 44) & 4294967295);
							HEAP32[(($pitch_base) >> 2)] = $shl;
							var $70 = HEAP32[(($pitch2) >> 2)];
							var $71 = HEAP32[(($pitch1) >> 2)];
							var $sub198 = ((($70) - ($71)) & 4294967295);
							var $mul = ((($sub198) * 108) & 4294967295);
							var $72 = HEAP32[((_voice) >> 2)];
							var $pitch_range = (($72 + 48) & 4294967295);
							HEAP32[(($pitch_range) >> 2)] = $mul;
							var $73 = HEAP32[(($pitch1) >> 2)];
							var $sub199 = ((($73) - 82) & 4294967295);
							var $conv200 = ((($sub199)) | 0);
							var $div = ($conv200) / 82;
							$factor = $div;
							var $74 = $factor;
							var $div201 = ($74) / 4;
							var $add202 = 1 + ($div201);
							var $mul203 = ($add202) * 256;
							var $conv204 = ((($mul203)) | 0);
							var $75 = HEAP32[((_voice) >> 2)];
							var $formant_factor = (($75 + 96) & 4294967295);
							HEAP32[(($formant_factor) >> 2)] = $conv204;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 54) {
							var $76 = $p;
							var $call207 = __ZL12Read8NumbersPcPi($76, $arraydecay206);
							$stress_lengths_set = $call207;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 55) {
							var $77 = $p;
							var $call210 = __ZL12Read8NumbersPcPi($77, $arraydecay209);
							$stress_amps_set = $call210;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 56) {
							var $78 = $p;
							var $call213 = __ZL12Read8NumbersPcPi($78, $arraydecay212);
							$stress_add_set = $call213;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 57) {
							var $79 = $p;
							var $call215 = _sscanf($79, ((__str58710) & 4294967295), allocate([_option_tone_flags, 0, 0, 0, _option_tone2, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							var $80 = HEAP32[((_option_tone_flags) >> 2)];
							var $and216 = ($80) & 255;
							var $cmp217 = ((($and216)) | 0) != 0;
							if (!($cmp217)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $81 = HEAP32[((_option_tone_flags) >> 2)];
							var $and219 = ($81) & 255;
							var $82 = $langopts;
							var $intonation_group = (($82 + 228) & 4294967295);
							HEAP32[(($intonation_group) >> 2)] = $and219;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 59) {
							var $83 = $p;
							var $call234 = _sscanf($83, ((__str59711) & 4294967295), allocate([$arraydecay223, 0, 0, 0, $arraydecay225, 0, 0, 0, $arraydecay227, 0, 0, 0, $arraydecay229, 0, 0, 0, $arraydecay231, 0, 0, 0, $arraydecay233, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							$n = $call234;
							var $84 = $langopts;
							var $intonation_group235 = (($84 + 228) & 4294967295);
							HEAP32[(($intonation_group235) >> 2)] = 0;
							$ix = 0;
							var $85 = $ix;
							var $86 = $n;
							var $cmp2379 = ((($85)) | 0) < ((($86)) | 0);
							if (!($cmp2379)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							while (1) {
								var $87 = $ix;
								var $arrayidx239 = (($names + $87 * 40) & 4294967295);
								var $arraydecay240 = (($arrayidx239) & 4294967295);
								var $call241 = _strcmp($arraydecay240, ((__str60712) & 4294967295));
								var $cmp242 = ((($call241)) | 0) == 0;
								if ($cmp242) {
									__label__ = 64;;
								} else {
									__label__ = 61;;
								}
								if (__label__ == 61) {
									var $88 = $ix;
									var $arrayidx245 = (($names + $88 * 40) & 4294967295);
									var $arraydecay246 = (($arrayidx245) & 4294967295);
									var $call247 = __ZL10LookupTunePKc($arraydecay246);
									HEAP32[(($value) >> 2)] = $call247;
									var $cmp248 = ((($call247)) | 0) < 0;
									if ($cmp248) {
										__label__ = 62;;
									} else {
										__label__ = 63;;
									}
									if (__label__ == 62) {
										var $89 = HEAP32[((__impure_ptr) >> 2)];
										var $_stderr = (($89 + 12) & 4294967295);
										var $90 = HEAP32[(($_stderr) >> 2)];
										var $91 = $ix;
										var $arrayidx250 = (($names + $91 * 40) & 4294967295);
										var $arraydecay251 = (($arrayidx250) & 4294967295);
										var $call252 = _fprintf($90, ((__str61713) & 4294967295), allocate([$arraydecay251, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
									} else if (__label__ == 63) {
										var $92 = HEAP32[(($value) >> 2)];
										var $conv254 = ((($92)) & 255);
										var $93 = $ix;
										var $94 = $langopts;
										var $tunes = (($94 + 232) & 4294967295);
										var $arrayidx255 = (($tunes + $93) & 4294967295);
										HEAP8[($arrayidx255)] = $conv254;;
									}
								}
								var $95 = $ix;
								var $inc = ((($95) + 1) & 4294967295);
								$ix = $inc;
								var $96 = $ix;
								var $97 = $n;
								var $cmp237 = ((($96)) | 0) < ((($97)) | 0);
								if ($cmp237) {
									__label__ = 60;
									continue;
								} else {
									__label__ = 24;
									continue $while_cond$34;
								}
							}
						} else if (__label__ == 32) {
							var $31 = $p;
							var $32 = HEAP8[($31)];
							var $conv26117 = (tempInt = (($32)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp26218 = ((($conv26117)) | 0) != 0;
							if (!($cmp26218)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							$while_cond264_preheader$90: while (1) {
								var $100 = $p;
								var $101 = HEAP8[($100)];
								var $conv26510 = (tempInt = (($101)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call26611 = _isspace($conv26510);
								var $tobool26712 = ((($call26611)) | 0) != 0;
								if ($tobool26712) {
									__label__ = 67;;
								} else {
									__label__ = 68;;
								}
								$while_body268$$while_end270$92: do {
									if (__label__ == 67) {
										while (1) {
											var $102 = $p;
											var $incdec_ptr269 = (($102 + 1) & 4294967295);
											$p = $incdec_ptr269;
											var $103 = $p;
											var $104 = HEAP8[($103)];
											var $conv265 = (tempInt = (($104)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call266 = _isspace($conv265);
											var $tobool267 = ((($call266)) | 0) != 0;
											if ($tobool267) {
												__label__ = 67;
												continue;
											} else {
												__label__ = 68;
												break $while_body268$$while_end270$92;
											}
										}
									}
								} while (0);
								$n = -1;
								var $105 = $p;
								var $call271 = _atoi($105);
								$n = $call271;
								var $cmp272 = ((($call271)) | 0) > 0;
								if ($cmp272) {
									__label__ = 69;;
								} else {
									__label__ = 71;;
								}
								$land_lhs_true273$$while_cond279_preheader$96: do {
									if (__label__ == 69) {
										var $106 = $n;
										var $cmp274 = ((($106)) | 0) < 32;
										if (!($cmp274)) {
											__label__ = 71;
											break $land_lhs_true273$$while_cond279_preheader$96;
										}
										var $107 = $p;
										var $incdec_ptr276 = (($107 + 1) & 4294967295);
										$p = $incdec_ptr276;
										var $108 = $n;
										var $shl277 = 1 << ($108);
										var $109 = $conditional_rules;
										var $or = ($109) | ($shl277);
										$conditional_rules = $or;;
									}
								} while (0);
								var $110 = $p;
								var $111 = HEAP8[($110)];
								var $conv28013 = (tempInt = (($111)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call28114 = _isalnum($conv28013);
								var $tobool28215 = ((($call28114)) | 0) != 0;
								if ($tobool28215) {
									__label__ = 72;;
								} else {
									__label__ = 65;;
								}
								$while_body283$$while_cond260_loopexit$100: do {
									if (__label__ == 72) {
										while (1) {
											var $112 = $p;
											var $incdec_ptr284 = (($112 + 1) & 4294967295);
											$p = $incdec_ptr284;
											var $113 = $p;
											var $114 = HEAP8[($113)];
											var $conv280 = (tempInt = (($114)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call281 = _isalnum($conv280);
											var $tobool282 = ((($call281)) | 0) != 0;
											if ($tobool282) {
												__label__ = 72;
												continue;
											} else {
												__label__ = 65;
												break $while_body283$$while_cond260_loopexit$100;
											}
										}
									}
								} while (0);
								var $98 = $p;
								var $99 = HEAP8[($98)];
								var $conv261 = (tempInt = (($99)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp262 = ((($conv261)) | 0) != 0;
								if ($cmp262) {
									__label__ = 66;
									continue $while_cond264_preheader$90;
								} else {
									__label__ = 24;
									continue $while_cond$34;
								}
							}
						} else if (__label__ == 73) {
							var $115 = $phonemes_set;
							var $cmp288 = ((($115)) | 0) == 0;
							if ($cmp288) {
								__label__ = 74;;
							} else {
								__label__ = 75;;
							}
							if (__label__ == 74) {
								var $call291 = __Z22SelectPhonemeTableNamePKc($arraydecay290);
								$phonemes_set = 1;;
							}
							var $116 = $key;
							var $117 = $p;
							__ZL18PhonemeReplacementiPc($116, $117);
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 76) {
							var $118 = $p;
							var $119 = $langopts;
							var $word_gap = (($119) & 4294967295);
							var $120 = $langopts;
							var $vowel_pause = (($120 + 4) & 4294967295);
							var $call294 = _sscanf($118, ((__str58710) & 4294967295), allocate([$word_gap, 0, 0, 0, $vowel_pause, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 77) {
							var $121 = $p;
							var $122 = $langopts;
							var $stress_rule = (($122 + 8) & 4294967295);
							var $123 = $langopts;
							var $stress_flags = (($123 + 12) & 4294967295);
							var $124 = $langopts;
							var $unstressed_wd1 = (($124 + 16) & 4294967295);
							var $125 = $langopts;
							var $unstressed_wd2 = (($125 + 20) & 4294967295);
							var $call296 = _sscanf($121, ((__str62714) & 4294967295), allocate([$stress_rule, 0, 0, 0, $stress_flags, 0, 0, 0, $unstressed_wd1, 0, 0, 0, $unstressed_wd2, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 78) {
							var $126 = $p;
							var $call298 = _sscanf($126, ((__str63715) & 4294967295), allocate([$value, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
							var $cmp299 = ((($call298)) | 0) == 1;
							var $127 = HEAP32[(($value) >> 2)];
							var $cmp301 = ((($127)) | 0) < 20;
							var $or_cond1 = ($cmp299) & ($cmp301);
							if (!($or_cond1)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $128 = HEAP32[(($value) >> 2)];
							var $arrayidx303 = ((_charsets + $128 * 4) & 4294967295);
							var $129 = HEAP32[(($arrayidx303) >> 2)];
							var $130 = $new_translator;
							var $charset_a0 = (($130 + 696) & 4294967295);
							HEAP32[(($charset_a0) >> 2)] = $129;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 80) {
							var $131 = $p;
							var $132 = $langopts;
							var $numbers = (($132 + 184) & 4294967295);
							var $133 = $langopts;
							var $numbers2 = (($133 + 188) & 4294967295);
							var $call306 = _sscanf($131, ((__str58710) & 4294967295), allocate([$numbers, 0, 0, 0, $numbers2, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 81) {
							HEAP32[(($value2) >> 2)] = 0;
							var $134 = $p;
							var $call309 = _sscanf($134, ((__str64716) & 4294967295), allocate([$arraydecay308, 0, 0, 0, $value, 0, 0, 0, $value2, 0, 0, 0], ["i8*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							var $cmp310 = ((($call309)) | 0) >= 2;
							if ($cmp310) {
								__label__ = 82;;
							} else {
								__label__ = 84;;
							}
							$land_lhs_true311$$if_else318$114: do {
								if (__label__ == 82) {
									var $call313 = __Z10LookupMnemP8MNEM_TABPKc(((__ZL11options_tab) & 4294967295), $arraydecay312);
									$ix = $call313;
									var $cmp314 = ((($call313)) | 0) >= 0;
									if (!($cmp314)) {
										__label__ = 84;
										break $land_lhs_true311$$if_else318$114;
									}
									var $135 = HEAP32[(($value) >> 2)];
									var $136 = $ix;
									var $137 = $langopts;
									var $param = (($137 + 24) & 4294967295);
									var $arrayidx316 = (($param + $136 * 4) & 4294967295);
									HEAP32[(($arrayidx316) >> 2)] = $135;
									var $138 = HEAP32[(($value2) >> 2)];
									var $139 = $ix;
									var $140 = $langopts;
									var $param2 = (($140 + 100) & 4294967295);
									var $arrayidx317 = (($param2 + $139 * 4) & 4294967295);
									HEAP32[(($arrayidx317) >> 2)] = $138;
									__label__ = 24;
									continue $while_cond$34;
								}
							} while (0);
							var $141 = HEAP32[((__impure_ptr) >> 2)];
							var $_stderr319 = (($141 + 12) & 4294967295);
							var $142 = HEAP32[(($_stderr319) >> 2)];
							var $143 = $p;
							var $call321 = _fprintf($142, ((__str65717) & 4294967295), allocate([$arraydecay320, 0, 0, 0, $143, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 85) {
							HEAP32[(($value) >> 2)] = 0;
							var $144 = HEAP32[((_voice) >> 2)];
							var $echo_amp = (($144 + 80) & 4294967295);
							HEAP32[(($echo_amp) >> 2)] = 0;
							var $145 = $p;
							var $146 = HEAP32[((_voice) >> 2)];
							var $echo_delay = (($146 + 76) & 4294967295);
							var $147 = HEAP32[((_voice) >> 2)];
							var $echo_amp324 = (($147 + 80) & 4294967295);
							var $call325 = _sscanf($145, ((__str58710) & 4294967295), allocate([$echo_delay, 0, 0, 0, $echo_amp324, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 86) {
							var $148 = $p;
							var $call327 = _sscanf($148, ((__str63715) & 4294967295), allocate([$value, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
							var $cmp328 = ((($call327)) | 0) == 1;
							if (!($cmp328)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $149 = HEAP32[(($value) >> 2)];
							var $mul330 = ((($149) * 32) & 4294967295);
							var $150 = HEAP32[((_voice) >> 2)];
							var $flutter = (($150 + 68) & 4294967295);
							HEAP32[(($flutter) >> 2)] = $mul330;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 88) {
							var $151 = $p;
							var $call333 = _sscanf($151, ((__str63715) & 4294967295), allocate([$value, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
							var $cmp334 = ((($call333)) | 0) == 1;
							if (!($cmp334)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $152 = HEAP32[(($value) >> 2)];
							var $153 = HEAP32[((_voice) >> 2)];
							var $roughness = (($153 + 72) & 4294967295);
							HEAP32[(($roughness) >> 2)] = $152;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 90) {
							var $154 = $p;
							var $call338 = _sscanf($154, ((__str63715) & 4294967295), allocate([$value, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
							var $cmp339 = ((($call338)) | 0) == 1;
							if (!($cmp339)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $155 = HEAP32[(($value) >> 2)];
							var $cmp341 = ((($155)) | 0) > 4;
							if ($cmp341) {
								__label__ = 92;;
							} else {
								__label__ = 93;;
							}
							if (__label__ == 92) {
								var $156 = HEAP32[((_voice) >> 2)];
								var $peak_shape = (($156 + 88) & 4294967295);
								HEAP32[(($peak_shape) >> 2)] = 1;
								HEAP32[(($value) >> 2)] = 4;;
							}
							var $157 = HEAP32[(($value) >> 2)];
							var $add344 = ((($157) + 1) & 4294967295);
							var $158 = HEAP32[((_voice) >> 2)];
							var $n_harmonic_peaks = (($158 + 84) & 4294967295);
							HEAP32[(($n_harmonic_peaks) >> 2)] = $add344;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 94) {
							var $159 = $p;
							__Z14ReadTonePointsPcPi($159, $arraydecay347);
							var $160 = HEAP32[((_voice) >> 2)];
							__ZL13SetToneAdjustP7voice_tPi($160, $arraydecay348);
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 95) {
							var $161 = $p;
							var $call350 = _sscanf($161, ((__str63715) & 4294967295), allocate([$value, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
							var $cmp351 = ((($call350)) | 0) == 1;
							if (!($cmp351)) {
								__label__ = 24;
								continue $while_cond$34;
							}
							var $162 = HEAP32[(($value) >> 2)];
							var $mul353 = ((($162) * 64) & 4294967295);
							var $div354 = ((((($mul353)) | 0) / 100) | 0);
							var $163 = HEAP32[((_voice) >> 2)];
							var $voicing = (($163 + 92) & 4294967295);
							HEAP32[(($voicing) >> 2)] = $div354;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 97) {
							var $164 = $p;
							var $165 = HEAP32[((_voice) >> 2)];
							var $breath = (($165 + 272) & 4294967295);
							var $arrayidx357 = (($breath + 4) & 4294967295);
							var $call358 = __ZL12Read8NumbersPcPi($164, $arrayidx357);
							var $166 = HEAP32[((_voice) >> 2)];
							var $breath359 = (($166 + 272) & 4294967295);
							var $arrayidx360 = (($breath359) & 4294967295);
							HEAP32[(($arrayidx360) >> 2)] = $call358;
							$ix = 1;;
							while (1) {
								var $167 = $ix;
								var $rem = ((($167)) | 0) % 2;
								var $tobool364 = ((($rem)) | 0) != 0;
								if ($tobool364) {
									__label__ = 99;;
								} else {
									__label__ = 100;;
								}
								if (__label__ == 99) {
									var $168 = $ix;
									var $169 = HEAP32[((_voice) >> 2)];
									var $breath366 = (($169 + 272) & 4294967295);
									var $arrayidx367 = (($breath366 + $168 * 4) & 4294967295);
									var $170 = HEAP32[(($arrayidx367) >> 2)];
									var $sub368 = (((-($170))) & 4294967295);
									var $171 = $ix;
									var $172 = HEAP32[((_voice) >> 2)];
									var $breath369 = (($172 + 272) & 4294967295);
									var $arrayidx370 = (($breath369 + $171 * 4) & 4294967295);
									HEAP32[(($arrayidx370) >> 2)] = $sub368;;
								}
								var $173 = $ix;
								var $inc373 = ((($173) + 1) & 4294967295);
								$ix = $inc373;
								var $cmp362 = ((($inc373)) | 0) < 8;
								if ($cmp362) {
									__label__ = 98;
									continue;
								} else {
									__label__ = 24;
									continue $while_cond$34;
								}
							}
						} else if (__label__ == 101) {
							var $174 = $p;
							var $175 = HEAP32[((_voice) >> 2)];
							var $breathw = (($175 + 308) & 4294967295);
							var $arrayidx376 = (($breathw + 4) & 4294967295);
							var $call377 = __ZL12Read8NumbersPcPi($174, $arrayidx376);
							var $176 = HEAP32[((_voice) >> 2)];
							var $breathw378 = (($176 + 308) & 4294967295);
							var $arrayidx379 = (($breathw378) & 4294967295);
							HEAP32[(($arrayidx379) >> 2)] = $call377;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 102) {
							var $177 = $p;
							var $178 = HEAP32[((_voice) >> 2)];
							var $consonant_amp = (($178 + 100) & 4294967295);
							var $179 = HEAP32[((_voice) >> 2)];
							var $consonant_ampv = (($179 + 104) & 4294967295);
							var $call381 = _sscanf($177, ((__str58710) & 4294967295), allocate([$consonant_amp, 0, 0, 0, $consonant_ampv, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							HEAP32[(($value) >> 2)] = $call381;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 103) {
							var $180 = $p;
							var $181 = HEAP32[((_voice) >> 2)];
							var $speed_percent = (($181 + 64) & 4294967295);
							var $call383 = _sscanf($180, ((__str63715) & 4294967295), allocate([$speed_percent, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 104) {
							HEAP32[(($srate) >> 2)] = 16000;
							HEAP8[($arrayidx385)] = 0;
							var $182 = $p;
							var $call388 = _sscanf($182, ((__str66718) & 4294967295), allocate([$arraydecay386, 0, 0, 0, $arraydecay387, 0, 0, 0, $srate, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
							var $183 = HEAP32[(($srate) >> 2)];
							var $call391 = __Z15LoadMbrolaTablePKcS0_i($arraydecay389, $arraydecay390, $183);
							var $cmp392 = ((($call391)) | 0) != 0;
							if ($cmp392) {
								__label__ = 105;;
							} else {
								__label__ = 106;;
							}
							if (__label__ == 105) {
								var $184 = HEAP32[((__impure_ptr) >> 2)];
								var $_stderr394 = (($184 + 12) & 4294967295);
								var $185 = HEAP32[(($_stderr394) >> 2)];
								var $186 = _fwrite(((__str67719) & 4294967295), 23, 1, $185);;
							}
							var $187 = HEAP32[(($srate) >> 2)];
							var $188 = HEAP32[((_voice) >> 2)];
							var $samplerate = (($188 + 108) & 4294967295);
							HEAP32[(($samplerate) >> 2)] = $187;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 107) {
							var $189 = HEAP32[((_voice) >> 2)];
							var $klattv = (($189 + 112) & 4294967295);
							var $arrayidx398 = (($klattv) & 4294967295);
							HEAP32[(($arrayidx398) >> 2)] = 1;
							var $190 = $p;
							var $191 = HEAP32[((_voice) >> 2)];
							var $klattv399 = (($191 + 112) & 4294967295);
							var $arraydecay400 = (($klattv399) & 4294967295);
							var $call401 = __ZL12Read8NumbersPcPi($190, $arraydecay400);
							var $192 = HEAP32[((_voice) >> 2)];
							var $klattv402 = (($192 + 112) & 4294967295);
							var $arrayidx403 = (($klattv402 + 20) & 4294967295);
							var $193 = HEAP32[(($arrayidx403) >> 2)];
							var $sub404 = ((($193) - 40) & 4294967295);
							HEAP32[(($arrayidx403) >> 2)] = $sub404;
							__label__ = 24;
							continue $while_cond$34;
						} else if (__label__ == 108) {
							var $194 = $p;
							var $call406 = __ZL12Read8NumbersPcPi($194, ((_speed + 32) & 4294967295));
							__Z8SetSpeedi(3);
							__label__ = 24;
							continue $while_cond$34;
						}
					}
					$if_end423$$while_end419$146: do {
						if (__label__ == 112) {
							var $_pr = $f_voice;
							var $cmp420 = ((($_pr)) | 0) != 0;
							if (!($cmp420)) {
								__label__ = 114;
								break $if_end423$$while_end419$146;
							}
							var $201 = $f_voice;
							var $call422 = _fclose($201);;
						}
					} while (0);
					var $202 = $new_translator;
					var $cmp424 = ((($202)) | 0) == 0;
					if ($cmp424) {
						__label__ = 115;;
					} else {
						__label__ = 117;;
					}
					$land_lhs_true425$$if_end430$150: do {
						if (__label__ == 115) {
							var $203 = $tone_only;
							var $tobool426 = ((($203)) | 0) != 0;
							if ($tobool426) {
								__label__ = 117;
								break $land_lhs_true425$$if_end430$150;
							}
							var $arraydecay428 = (($translator_name) & 4294967295);
							var $call429 = __Z16SelectTranslatorPKc($arraydecay428);
							$new_translator = $call429;;
						}
					} while (0);
					__Z8SetSpeedi(3);
					$ix = 0;;
					$for_body433$154: while (1) {
						var $204 = $ix;
						var $205 = HEAP32[((_voice) >> 2)];
						var $freq = (($205 + 144) & 4294967295);
						var $arrayidx434 = (($freq + $204 * 2) & 4294967295);
						var $206 = HEAP16[(($arrayidx434) >> 1)];
						var $207 = $ix;
						var $208 = HEAP32[((_voice) >> 2)];
						var $freq2 = (($208 + 216) & 4294967295);
						var $arrayidx435 = (($freq2 + $207 * 2) & 4294967295);
						HEAP16[(($arrayidx435) >> 1)] = $206;
						var $209 = $ix;
						var $210 = HEAP32[((_voice) >> 2)];
						var $height = (($210 + 162) & 4294967295);
						var $arrayidx436 = (($height + $209 * 2) & 4294967295);
						var $211 = HEAP16[(($arrayidx436) >> 1)];
						var $212 = $ix;
						var $213 = HEAP32[((_voice) >> 2)];
						var $height2 = (($213 + 234) & 4294967295);
						var $arrayidx437 = (($height2 + $212 * 2) & 4294967295);
						HEAP16[(($arrayidx437) >> 1)] = $211;
						var $214 = $ix;
						var $215 = HEAP32[((_voice) >> 2)];
						var $width = (($215 + 180) & 4294967295);
						var $arrayidx438 = (($width + $214 * 2) & 4294967295);
						var $216 = HEAP16[(($arrayidx438) >> 1)];
						var $217 = $ix;
						var $218 = HEAP32[((_voice) >> 2)];
						var $width2 = (($218 + 252) & 4294967295);
						var $arrayidx439 = (($width2 + $217 * 2) & 4294967295);
						HEAP16[(($arrayidx439) >> 1)] = $216;
						var $219 = $ix;
						var $inc441 = ((($219) + 1) & 4294967295);
						$ix = $inc441;
						var $cmp432 = ((($inc441)) | 0) < 9;
						if ($cmp432) {
							__label__ = 118;
							continue $for_body433$154;
						} else {
							__label__ = 119;
							break $for_body433$154;
						}
					}
					var $220 = $tone_only;
					var $tobool443 = ((($220)) | 0) != 0;
					if ($tobool443) {
						__label__ = 120;;
					} else {
						__label__ = 121;;
					}
					if (__label__ == 120) {
						var $221 = HEAP32[((_translator) >> 2)];
						$new_translator = $221;;
					} else if (__label__ == 121) {
						var $arraydecay446 = (($phonemes_name) & 4294967295);
						var $call447 = __Z22SelectPhonemeTableNamePKc($arraydecay446);
						$ix = $call447;
						var $cmp448 = ((($call447)) | 0) < 0;
						if ($cmp448) {
							__label__ = 122;;
						} else {
							__label__ = 123;;
						}
						if (__label__ == 122) {
							var $222 = HEAP32[((__impure_ptr) >> 2)];
							var $_stderr450 = (($222 + 12) & 4294967295);
							var $223 = HEAP32[(($_stderr450) >> 2)];
							var $arraydecay451 = (($phonemes_name) & 4294967295);
							var $call452 = _fprintf($223, ((__str69721) & 4294967295), allocate([$arraydecay451, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
						}
						var $224 = $ix;
						var $225 = HEAP32[((_voice) >> 2)];
						var $phoneme_tab_ix = (($225 + 40) & 4294967295);
						HEAP32[(($phoneme_tab_ix) >> 2)] = $224;
						var $226 = $ix;
						var $227 = $new_translator;
						var $phoneme_tab_ix454 = (($227 + 656) & 4294967295);
						HEAP32[(($phoneme_tab_ix454) >> 2)] = $226;
						var $228 = $new_translator;
						var $arraydecay455 = (($new_dictionary) & 4294967295);
						var $229 = $control_addr;
						var $and456 = ($229) & 4;
						var $call457 = __Z14LoadDictionaryP10TranslatorPKci($228, $arraydecay455, $and456);
						$error = $call457;
						var $230 = HEAP8[(((_dictionary_name) & 4294967295))];
						var $conv458 = (tempInt = (($230)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp459 = ((($conv458)) | 0) == 0;
						if ($cmp459) {
							__label__ = 124;;
						} else {
							__label__ = 125;;
						}
						if (__label__ == 124) {
							$retval = 0;
							__label__ = 137;
							break $return$$if_end51$12;
						} else if (__label__ == 125) {
							var $231 = $conditional_rules;
							var $232 = $new_translator;
							var $dict_condition = (($232 + 692) & 4294967295);
							HEAP32[(($dict_condition) >> 2)] = $231;
							var $233 = $langix;
							var $arrayidx462 = ((__ZZ9LoadVoicePKciE15voice_languages + $233) & 4294967295);
							HEAP8[($arrayidx462)] = 0;;
						}
					}
					var $234 = $new_translator;
					var $langopts464 = (($234) & 4294967295);
					$langopts = $langopts464;
					var $235 = $langopts;
					var $param465 = (($235 + 24) & 4294967295);
					var $arrayidx466 = (($param465 + 24) & 4294967295);
					var $236 = HEAP32[(($arrayidx466) >> 2)];
					HEAP32[(($value) >> 2)] = $236;
					var $cmp467 = ((($236)) | 0) != 0;
					if ($cmp467) {
						__label__ = 127;;
					} else {
						__label__ = 128;;
					}
					if (__label__ == 127) {
						var $237 = $new_translator;
						var $238 = HEAP32[(($value) >> 2)];
						__Z13SetLengthModsP10Translatori($237, $238);;
					}
					var $239 = HEAP32[((_voice) >> 2)];
					var $width470 = (($239 + 180) & 4294967295);
					var $arrayidx471 = (($width470) & 4294967295);
					var $240 = HEAP16[(($arrayidx471) >> 1)];
					var $conv472 = (tempInt = (($240)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $mul473 = ((($conv472) * 105) & 4294967295);
					var $div474 = ((((($mul473)) | 0) / 100) | 0);
					var $conv475 = ((($div474)) & 65535);
					var $241 = HEAP32[((_voice) >> 2)];
					var $width476 = (($241 + 180) & 4294967295);
					var $arrayidx477 = (($width476) & 4294967295);
					HEAP16[(($arrayidx477) >> 1)] = $conv475;
					var $242 = $tone_only;
					var $tobool478 = ((($242)) | 0) != 0;
					if ($tobool478) {
						__label__ = 130;;
					} else {
						__label__ = 129;;
					}
					if (__label__ == 129) {
						var $243 = $new_translator;
						HEAP32[((_translator) >> 2)] = $243;;
					}
					$ix = 0;
					var $244 = $ix;
					var $245 = $stress_lengths_set;
					var $cmp4825 = ((($244)) | 0) < ((($245)) | 0);
					if ($cmp4825) {
						__label__ = 131;;
					} else {
						__label__ = 132;;
					}
					$for_body483$$for_end490$173: do {
						if (__label__ == 131) {
							while (1) {
								var $246 = $ix;
								var $arrayidx484 = (($stress_lengths + $246 * 4) & 4294967295);
								var $247 = HEAP32[(($arrayidx484) >> 2)];
								var $conv485 = ((($247)) & 65535);
								var $248 = $ix;
								var $249 = HEAP32[((_translator) >> 2)];
								var $stress_lengths486 = (($249 + 676) & 4294967295);
								var $arrayidx487 = (($stress_lengths486 + $248 * 2) & 4294967295);
								HEAP16[(($arrayidx487) >> 1)] = $conv485;
								var $250 = $ix;
								var $inc489 = ((($250) + 1) & 4294967295);
								$ix = $inc489;
								var $251 = $ix;
								var $252 = $stress_lengths_set;
								var $cmp482 = ((($251)) | 0) < ((($252)) | 0);
								if ($cmp482) {
									__label__ = 131;
									continue;
								} else {
									__label__ = 132;
									break $for_body483$$for_end490$173;
								}
							}
						}
					} while (0);
					$ix = 0;
					var $253 = $ix;
					var $254 = $stress_add_set;
					var $cmp4924 = ((($253)) | 0) < ((($254)) | 0);
					if ($cmp4924) {
						__label__ = 133;;
					} else {
						__label__ = 134;;
					}
					$for_body493$$for_end502$177: do {
						if (__label__ == 133) {
							while (1) {
								var $255 = $ix;
								var $arrayidx494 = (($stress_add + $255 * 4) & 4294967295);
								var $256 = HEAP32[(($arrayidx494) >> 2)];
								var $257 = $ix;
								var $258 = HEAP32[((_translator) >> 2)];
								var $stress_lengths495 = (($258 + 676) & 4294967295);
								var $arrayidx496 = (($stress_lengths495 + $257 * 2) & 4294967295);
								var $259 = HEAP16[(($arrayidx496) >> 1)];
								var $conv497 = (tempInt = (($259)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
								var $add498 = ((($conv497) + ($256)) & 4294967295);
								var $conv499 = ((($add498)) & 65535);
								HEAP16[(($arrayidx496) >> 1)] = $conv499;
								var $260 = $ix;
								var $inc501 = ((($260) + 1) & 4294967295);
								$ix = $inc501;
								var $261 = $ix;
								var $262 = $stress_add_set;
								var $cmp492 = ((($261)) | 0) < ((($262)) | 0);
								if ($cmp492) {
									__label__ = 133;
									continue;
								} else {
									__label__ = 134;
									break $for_body493$$for_end502$177;
								}
							}
						}
					} while (0);
					$ix = 0;
					var $263 = $ix;
					var $264 = $stress_amps_set;
					var $cmp5043 = ((($263)) | 0) < ((($264)) | 0);
					if ($cmp5043) {
						__label__ = 135;;
					} else {
						__label__ = 136;;
					}
					$for_body505$$for_end516$181: do {
						if (__label__ == 135) {
							while (1) {
								var $265 = $ix;
								var $arrayidx506 = (($stress_amps + $265 * 4) & 4294967295);
								var $266 = HEAP32[(($arrayidx506) >> 2)];
								var $conv507 = ((($266)) & 255);
								var $267 = $ix;
								var $268 = HEAP32[((_translator) >> 2)];
								var $stress_amps508 = (($268 + 660) & 4294967295);
								var $arrayidx509 = (($stress_amps508 + $267) & 4294967295);
								HEAP8[($arrayidx509)] = $conv507;
								var $269 = $ix;
								var $arrayidx510 = (($stress_amps + $269 * 4) & 4294967295);
								var $270 = HEAP32[(($arrayidx510) >> 2)];
								var $sub511 = ((($270) - 1) & 4294967295);
								var $conv512 = ((($sub511)) & 255);
								var $271 = $ix;
								var $272 = HEAP32[((_translator) >> 2)];
								var $stress_amps_r = (($272 + 668) & 4294967295);
								var $arrayidx513 = (($stress_amps_r + $271) & 4294967295);
								HEAP8[($arrayidx513)] = $conv512;
								var $273 = $ix;
								var $inc515 = ((($273) + 1) & 4294967295);
								$ix = $inc515;
								var $274 = $ix;
								var $275 = $stress_amps_set;
								var $cmp504 = ((($274)) | 0) < ((($275)) | 0);
								if ($cmp504) {
									__label__ = 135;
									continue;
								} else {
									__label__ = 136;
									break $for_body505$$for_end516$181;
								}
							}
						}
					} while (0);
					var $276 = HEAP32[((_voice) >> 2)];
					$retval = $276;;
				}
			} while (0);
			var $277 = $retval;
			STACKTOP = __stackBase__;
			return $277;
			return null;
		}

		function __ZL11fgets_stripPciP7__sFILE($buf, $size, $f_in) {;
			var __label__;
			var $retval;
			var $buf_addr;
			var $size_addr;
			var $f_in_addr;
			var $len;
			var $p;
			$buf_addr = $buf;
			$size_addr = $size;
			$f_in_addr = $f_in;
			var $0 = $buf_addr;
			var $1 = $size_addr;
			var $2 = $f_in_addr;
			var $call = _fgets($0, $1, $2);
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $3 = $buf_addr;
				var $call1 = _strlen($3);
				$len = $call1;;
				while (1) {
					var $4 = $len;
					var $dec = ((($4) - 1) & 4294967295);
					$len = $dec;
					var $cmp2 = ((($dec)) | 0) > 0;
					if (!($cmp2)) {
						__label__ = 6;
						break;
					}
					var $5 = $len;
					var $6 = $buf_addr;
					var $arrayidx = (($6 + $5) & 4294967295);
					var $7 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $call3 = _isspace($conv);
					var $tobool = ((($call3)) | 0) != 0;
					if (!($tobool)) {
						__label__ = 6;
						break;
					}
					var $8 = $len;
					var $9 = $buf_addr;
					var $arrayidx4 = (($9 + $8) & 4294967295);
					HEAP8[($arrayidx4)] = 0;
					__label__ = 3;
					continue;
				}
				var $10 = $buf_addr;
				var $call5 = _strstr($10, ((__str82734) & 4294967295));
				$p = $call5;
				var $cmp6 = ((($call5)) | 0) != 0;
				if ($cmp6) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $11 = $p;
					HEAP8[($11)] = 0;;
				}
				var $12 = $buf_addr;
				$retval = $12;;
			}
			var $13 = $retval;;
			return $13;
			return null;
		}

		function __ZL12VoiceFormantPc($p) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 20;
			_memset(__stackBase__, 0, 20);
			var __label__;
			var $p_addr;
			var $ix;
			var $formant = __stackBase__;
			var $freq = __stackBase__ + 4;
			var $height = __stackBase__ + 8;
			var $width = __stackBase__ + 12;
			var $freqadd = __stackBase__ + 16;
			$p_addr = $p;
			HEAP32[(($freq) >> 2)] = 100;
			HEAP32[(($height) >> 2)] = 100;
			HEAP32[(($width) >> 2)] = 100;
			HEAP32[(($freqadd) >> 2)] = 0;
			var $0 = $p_addr;
			var $call = _sscanf($0, ((__str81733) & 4294967295), allocate([$formant, 0, 0, 0, $freq, 0, 0, 0, $height, 0, 0, 0, $width, 0, 0, 0, $freqadd, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
			$ix = $call;
			var $1 = $ix;
			var $cmp = ((($1)) | 0) < 2;
			if ($cmp) {
				__label__ = 9;;
			} else {
				__label__ = 1;;
			}
			$return$$if_end$2: do {
				if (__label__ == 1) {
					var $2 = HEAP32[(($formant) >> 2)];
					var $cmp1 = ((($2)) | 0) < 0;
					var $3 = HEAP32[(($formant) >> 2)];
					var $cmp2 = ((($3)) | 0) > 8;
					var $or_cond = ($cmp1) | ($cmp2);
					if ($or_cond) {
						__label__ = 9;
						break $return$$if_end$2;
					}
					var $4 = HEAP32[(($freq) >> 2)];
					var $cmp5 = ((($4)) | 0) >= 0;
					if ($cmp5) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $5 = HEAP32[(($freq) >> 2)];
						var $conv = ((($5)) | 0);
						var $mul = ($conv) * 2.56001;
						var $conv7 = ((($mul)) | 0);
						var $conv8 = ((($conv7)) & 65535);
						var $6 = HEAP32[(($formant) >> 2)];
						var $7 = HEAP32[((_voice) >> 2)];
						var $freq9 = (($7 + 144) & 4294967295);
						var $arrayidx = (($freq9 + $6 * 2) & 4294967295);
						HEAP16[(($arrayidx) >> 1)] = $conv8;;
					}
					var $8 = HEAP32[(($height) >> 2)];
					var $cmp11 = ((($8)) | 0) >= 0;
					if ($cmp11) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $9 = HEAP32[(($height) >> 2)];
						var $conv13 = ((($9)) | 0);
						var $mul14 = ($conv13) * 2.56001;
						var $conv15 = ((($mul14)) | 0);
						var $conv16 = ((($conv15)) & 65535);
						var $10 = HEAP32[(($formant) >> 2)];
						var $11 = HEAP32[((_voice) >> 2)];
						var $height17 = (($11 + 162) & 4294967295);
						var $arrayidx18 = (($height17 + $10 * 2) & 4294967295);
						HEAP16[(($arrayidx18) >> 1)] = $conv16;;
					}
					var $12 = HEAP32[(($width) >> 2)];
					var $cmp20 = ((($12)) | 0) >= 0;
					if ($cmp20) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						var $13 = HEAP32[(($width) >> 2)];
						var $conv22 = ((($13)) | 0);
						var $mul23 = ($conv22) * 2.56001;
						var $conv24 = ((($mul23)) | 0);
						var $conv25 = ((($conv24)) & 65535);
						var $14 = HEAP32[(($formant) >> 2)];
						var $15 = HEAP32[((_voice) >> 2)];
						var $width26 = (($15 + 180) & 4294967295);
						var $arrayidx27 = (($width26 + $14 * 2) & 4294967295);
						HEAP16[(($arrayidx27) >> 1)] = $conv25;;
					}
					var $16 = HEAP32[(($freqadd) >> 2)];
					var $conv29 = ((($16)) & 65535);
					var $17 = HEAP32[(($formant) >> 2)];
					var $18 = HEAP32[((_voice) >> 2)];
					var $freqadd30 = (($18 + 198) & 4294967295);
					var $arrayidx31 = (($freqadd30 + $17 * 2) & 4294967295);
					HEAP16[(($arrayidx31) >> 1)] = $conv29;;
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL12Read8NumbersPcPi($data_in, $data) {;
			var __label__;
			var $data_in_addr;
			var $data_addr;
			$data_in_addr = $data_in;
			$data_addr = $data;
			var $0 = $data_addr;
			var $1 = $0;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $1;
			$stop$ = $dest$ + 12;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $2 = $data_in_addr;
			var $3 = $data_addr;
			var $arrayidx = (($3) & 4294967295);
			var $4 = $data_addr;
			var $arrayidx1 = (($4 + 4) & 4294967295);
			var $5 = $data_addr;
			var $arrayidx2 = (($5 + 8) & 4294967295);
			var $6 = $data_addr;
			var $arrayidx3 = (($6 + 12) & 4294967295);
			var $7 = $data_addr;
			var $arrayidx4 = (($7 + 16) & 4294967295);
			var $8 = $data_addr;
			var $arrayidx5 = (($8 + 20) & 4294967295);
			var $9 = $data_addr;
			var $arrayidx6 = (($9 + 24) & 4294967295);
			var $10 = $data_addr;
			var $arrayidx7 = (($10 + 28) & 4294967295);
			var $call = _sscanf($2, ((__str80732) & 4294967295), allocate([$arrayidx, 0, 0, 0, $arrayidx1, 0, 0, 0, $arrayidx2, 0, 0, 0, $arrayidx3, 0, 0, 0, $arrayidx4, 0, 0, 0, $arrayidx5, 0, 0, 0, $arrayidx6, 0, 0, 0, $arrayidx7, 0, 0, 0], ["i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));;
			return $call;
			return null;
		}

		function __ZL10LookupTunePKc($name) {;
			var __label__;
			var $retval;
			var $name_addr;
			var $ix;
			$name_addr = $name;
			$ix = 0;;
			while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_n_tunes) >> 2)];
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 5;
					break;
				}
				var $2 = $name_addr;
				var $3 = $ix;
				var $4 = HEAP32[((_tunes) >> 2)];
				var $arrayidx = (($4 + 68 * $3) & 4294967295);
				var $name1 = (($arrayidx) & 4294967295);
				var $arraydecay = (($name1) & 4294967295);
				var $call = _strcmp($2, $arraydecay);
				var $cmp2 = ((($call)) | 0) == 0;
				var $5 = $ix;
				if ($cmp2) {
					__label__ = 3;
					break;
				}
				var $inc = ((($5) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 1;
				continue;
			}
			if (__label__ == 5) {
				$retval = -1;;
			} else if (__label__ == 3) {
				$retval = $5;;
			}
			var $6 = $retval;;
			return $6;
			return null;
		}

		function __ZL18PhonemeReplacementiPc($type, $p) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 28;
			_memset(__stackBase__, 0, 28);
			var __label__;
			var $type_addr;
			var $p_addr;
			var $n;
			var $phon;
			var $flags = __stackBase__;
			var $phon_string1 = __stackBase__ + 4;
			var $phon_string2 = __stackBase__ + 16;
			$type_addr = $type;
			$p_addr = $p;
			HEAP32[(($flags) >> 2)] = 0;
			var $arraydecay = (($phon_string2) & 4294967295);
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = ((__str60712) & 4294967295);
			$dest$ = $arraydecay;
			$stop$ = $src$ + 5;
			if (($dest$ % 4) == ($src$ % 4) && 5 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			var $0 = $p_addr;
			var $arraydecay1 = (($phon_string1) & 4294967295);
			var $arraydecay2 = (($phon_string2) & 4294967295);
			var $call3 = _sscanf($0, ((__str79731) & 4294967295), allocate([$flags, 0, 0, 0, $arraydecay1, 0, 0, 0, $arraydecay2, 0, 0, 0], ["i32*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			$n = $call3;
			var $1 = $n;
			var $cmp = ((($1)) | 0) < 2;
			var $2 = HEAP32[((_n_replace_phonemes) >> 2)];
			var $cmp4 = ((($2)) | 0) >= 60;
			var $or_cond = ($cmp) | ($cmp4);
			if ($or_cond) {
				__label__ = 3;;
			} else {
				__label__ = 1;;
			}
			$return$$if_end$2: do {
				if (__label__ == 1) {
					var $arraydecay5 = (($phon_string1) & 4294967295);
					var $call6 = __Z19LookupPhonemeStringPKc($arraydecay5);
					$phon = $call6;
					var $cmp7 = ((($call6)) | 0) == 0;
					if ($cmp7) {
						__label__ = 3;
						break $return$$if_end$2;
					}
					var $3 = $phon;
					var $conv = ((($3)) & 255);
					var $4 = HEAP32[((_n_replace_phonemes) >> 2)];
					var $arrayidx = ((_replace_phonemes + $4 * 3) & 4294967295);
					var $old_ph = (($arrayidx) & 4294967295);
					HEAP8[($old_ph)] = $conv;
					var $arraydecay10 = (($phon_string2) & 4294967295);
					var $call11 = __Z19LookupPhonemeStringPKc($arraydecay10);
					var $conv12 = ((($call11)) & 255);
					var $5 = HEAP32[((_n_replace_phonemes) >> 2)];
					var $arrayidx13 = ((_replace_phonemes + $5 * 3) & 4294967295);
					var $new_ph = (($arrayidx13 + 1) & 4294967295);
					HEAP8[($new_ph)] = $conv12;
					var $6 = HEAP32[(($flags) >> 2)];
					var $conv14 = ((($6)) & 255);
					var $7 = HEAP32[((_n_replace_phonemes) >> 2)];
					var $inc = ((($7) + 1) & 4294967295);
					HEAP32[((_n_replace_phonemes) >> 2)] = $inc;
					var $arrayidx15 = ((_replace_phonemes + $7 * 3) & 4294967295);
					var $type16 = (($arrayidx15 + 2) & 4294967295);
					HEAP8[($type16)] = $conv14;;
				}
			} while (0);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z16LoadVoiceVariantPKci($vname, $variant_num) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 60;
			_memset(__stackBase__, 0, 60);
			var __label__;
			var $retval;
			var $vname_addr;
			var $variant_num_addr;
			var $v;
			var $variant_name;
			var $buf = __stackBase__;
			$vname_addr = $vname;
			$variant_num_addr = $variant_num;
			var $arraydecay = (($buf) & 4294967295);
			var $0 = $vname_addr;
			__Z8strncpy0PcPKci($arraydecay, $0, 60);
			var $arraydecay1 = (($buf) & 4294967295);
			var $1 = $variant_num_addr;
			__ZL23ExtractVoiceVariantNamePci($arraydecay1, $1);
			$variant_name = ((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295);
			var $arraydecay2 = (($buf) & 4294967295);
			var $call3 = __Z9LoadVoicePKci($arraydecay2, 0);
			$v = $call3;
			var $cmp = ((($call3)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $2 = $variant_name;
				var $arrayidx = (($2) & 4294967295);
				var $3 = HEAP8[($arrayidx)];
				var $conv = (tempInt = (($3)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp4 = ((($conv)) | 0) != 0;
				if ($cmp4) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $4 = $variant_name;
					var $call6 = __Z9LoadVoicePKci($4, 2);
					$v = $call6;;
				}
				var $5 = $v;
				$retval = $5;;
			}
			var $6 = $retval;
			STACKTOP = __stackBase__;
			return $6;
			return null;
		}

		function __ZL23ExtractVoiceVariantNamePci($vname, $variant_num) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 8;
			_memset(__stackBase__, 0, 8);
			var __label__;
			var __lastLabel__ = null;
			var $vname_addr;
			var $variant_num_addr;
			var $p;
			var $variant_prefix = __stackBase__;
			$vname_addr = $vname;
			$variant_num_addr = $variant_num;
			HEAP8[(((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295))] = 0;
			var $arraydecay = (($variant_prefix) & 4294967295);
			var $call = _sprintf($arraydecay, ((__str76728) & 4294967295), allocate([47, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));
			var $0 = $vname_addr;
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 5;;
			}
			$if_then$$if_end10thread_pre_split$2: do {
				if (__label__ == 1) {
					var $1 = $vname_addr;
					var $call1 = _strchr($1, 43);
					$p = $call1;
					var $cmp2 = ((($call1)) | 0) != 0;
					if (!($cmp2)) {
						__label__ = 5;
						break $if_then$$if_end10thread_pre_split$2;
					}
					var $2 = $p;
					var $incdec_ptr = (($2 + 1) & 4294967295);
					$p = $incdec_ptr;
					HEAP8[($2)] = 0;
					var $3 = $p;
					var $4 = HEAP8[($3)];
					var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $isdigittmp = ((($conv) - 48) & 4294967295);
					var $isdigit = ((($isdigittmp)) >>> 0) < 10;
					var $call4 = ((($isdigit)) & 1);
					var $tobool = ((($call4)) | 0) != 0;
					if ($tobool) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $5 = $p;
						var $call6 = _atoi($5);
						$variant_num_addr = $call6;
						__lastLabel__ = 3;
						__label__ = 6;
						break $if_then$$if_end10thread_pre_split$2;
					} else if (__label__ == 4) {
						var $arraydecay7 = (($variant_prefix) & 4294967295);
						var $call8 = _strcpy(((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295), $arraydecay7);
						var $6 = $p;
						__Z8strncpy0PcPKci(((__ZZL23ExtractVoiceVariantNamePciE12variant_name + 3) & 4294967295), $6, 17);
						__label__ = 5;
						break $if_then$$if_end10thread_pre_split$2;
					}
				}
			} while (0);
			if (__label__ == 5) {
				var $_pr = $variant_num_addr;
				__lastLabel__ = 5;;
			}
			var $7 = __lastLabel__ == 5 ? $_pr : ($call6);
			var $cmp11 = ((($7)) | 0) > 0;
			if ($cmp11) {
				__label__ = 7;;
			} else {
				__label__ = 10;;
			}
			if (__label__ == 7) {
				var $8 = $variant_num_addr;
				var $cmp13 = ((($8)) | 0) < 10;
				var $arraydecay15 = (($variant_prefix) & 4294967295);
				var $9 = $variant_num_addr;
				if ($cmp13) {
					__label__ = 8;;
				} else {
					__label__ = 9;;
				}
				if (__label__ == 8) {
					var $call16 = _sprintf(((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295), ((__str77729) & 4294967295), allocate([$arraydecay15, 0, 0, 0, $9, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
				} else if (__label__ == 9) {
					var $sub = ((($9) - 10) & 4294967295);
					var $call19 = _sprintf(((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295), ((__str78730) & 4294967295), allocate([$arraydecay15, 0, 0, 0, $sub, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
				}
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __Z17SelectVoiceByNamePP12espeak_VOICEPKc($voices, $name) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 44;
			_memset(__stackBase__, 0, 44);
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $voices_addr;
			var $name_addr;
			var $ix;
			var $match_fname;
			var $match_fname2;
			var $match_name;
			var $id;
			var $last_part_len;
			var $last_part = __stackBase__;
			$voices_addr = $voices;
			$name_addr = $name;
			$match_fname = -1;
			$match_fname2 = -1;
			$match_name = -1;
			var $0 = $voices_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__ZL13n_voices_list) >> 2)];
				var $cmp1 = ((($1)) | 0) == 0;
				if ($cmp1) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $call = _espeak_ListVoices(0);;
				}
				$voices_addr = ((__ZL11voices_list) & 4294967295);;
			}
			var $arraydecay = (($last_part) & 4294967295);
			var $2 = $name_addr;
			var $call4 = _sprintf($arraydecay, ((__str70722) & 4294967295), allocate([47, 0, 0, 0, $2, 0, 0, 0], ["i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
			var $arraydecay5 = (($last_part) & 4294967295);
			var $call6 = _strlen($arraydecay5);
			$last_part_len = $call6;
			$ix = 0;
			var $arraydecay18 = (($last_part) & 4294967295);;
			$for_cond$8: while (1) {
				var $3 = $ix;
				var $4 = $voices_addr;
				var $arrayidx = (($4 + 4 * $3) & 4294967295);
				var $5 = HEAP32[(($arrayidx) >> 2)];
				var $cmp7 = ((($5)) | 0) != 0;
				if (!($cmp7)) {
					__label__ = 13;
					break $for_cond$8;
				}
				var $6 = $name_addr;
				var $7 = $ix;
				var $8 = $voices_addr;
				var $arrayidx8 = (($8 + 4 * $7) & 4294967295);
				var $9 = HEAP32[(($arrayidx8) >> 2)];
				var $name9 = (($9) & 4294967295);
				var $10 = HEAP32[(($name9) >> 2)];
				var $call10 = _strcmp($6, $10);
				var $cmp11 = ((($call10)) | 0) == 0;
				if ($cmp11) {
					__label__ = 7;
					break $for_cond$8;
				}
				var $12 = $name_addr;
				var $13 = $ix;
				var $14 = $voices_addr;
				var $arrayidx13 = (($14 + 4 * $13) & 4294967295);
				var $15 = HEAP32[(($arrayidx13) >> 2)];
				var $identifier = (($15 + 8) & 4294967295);
				var $16 = HEAP32[(($identifier) >> 2)];
				$id = $16;
				var $call14 = _strcmp($12, $16);
				var $cmp15 = ((($call14)) | 0) == 0;
				if ($cmp15) {
					__label__ = 9;;
				} else {
					__label__ = 10;;
				}
				$if_then16$$if_else17$12: do {
					if (__label__ == 9) {
						var $17 = $ix;
						$match_fname = $17;;
					} else if (__label__ == 10) {
						var $18 = $id;
						var $call19 = _strlen($18);
						var $19 = $last_part_len;
						var $sub = ((($call19) - ($19)) & 4294967295);
						var $20 = $id;
						var $arrayidx20 = (($20 + $sub) & 4294967295);
						var $call21 = _strcmp($arraydecay18, $arrayidx20);
						var $cmp22 = ((($call21)) | 0) == 0;
						if (!($cmp22)) {
							__label__ = 12;
							break $if_then16$$if_else17$12;
						}
						var $21 = $ix;
						$match_fname2 = $21;;
					}
				} while (0);
				var $22 = $ix;
				var $inc = ((($22) + 1) & 4294967295);
				$ix = $inc;
				__label__ = 5;
				continue $for_cond$8;
			}
			if (__label__ == 13) {
				var $_pr = $match_name;
				__lastLabel__ = 13;;
			} else if (__label__ == 7) {
				var $11 = $ix;
				$match_name = $11;
				__lastLabel__ = 7;;
			}
			var $23 = __lastLabel__ == 13 ? $_pr : ($11);
			var $cmp27 = ((($23)) | 0) < 0;
			if ($cmp27) {
				__label__ = 15;;
			} else {
				__label__ = 17;;
			}
			$if_then28$$if_end32thread_pre_split$21: do {
				if (__label__ == 15) {
					var $24 = $match_fname;
					$match_name = $24;
					var $25 = $match_name;
					var $cmp29 = ((($25)) | 0) < 0;
					if (!($cmp29)) {
						__label__ = 20;
						break $if_then28$$if_end32thread_pre_split$21;
					}
					var $26 = $match_fname2;
					$match_name = $26;
					__lastLabel__ = 16;
					__label__ = 18;
					break $if_then28$$if_end32thread_pre_split$21;
				} else if (__label__ == 17) {
					var $_pr1 = $match_name;
					__lastLabel__ = 17;
					__label__ = 18;
					break $if_then28$$if_end32thread_pre_split$21;
				}
			} while (0);
			$if_end32$$if_end35$25: do {
				if (__label__ == 18) {
					var $27 = __lastLabel__ == 17 ? $_pr1 : ($26);
					var $cmp33 = ((($27)) | 0) < 0;
					if (!($cmp33)) {
						__label__ = 20;
						break $if_end32$$if_end35$25;
					}
					$retval = 0;
					__label__ = 21;
					break $if_end32$$if_end35$25;
				}
			} while (0);
			if (__label__ == 20) {
				var $28 = $match_name;
				var $29 = $voices_addr;
				var $arrayidx36 = (($29 + 4 * $28) & 4294967295);
				var $30 = HEAP32[(($arrayidx36) >> 2)];
				$retval = $30;;
			}
			var $31 = $retval;
			STACKTOP = __stackBase__;
			return $31;
			return null;
		}

		function _espeak_ListVoices($voice_spec) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 164;
			_memset(__stackBase__, 0, 164);
			var __label__;
			var $voice_spec_addr;
			var $ix;
			var $j;
			var $v;
			var $path_voices = __stackBase__;
			$voice_spec_addr = $voice_spec;
			$ix = 0;
			var $0 = $ix;
			var $1 = HEAP32[((__ZL13n_voices_list) >> 2)];
			var $cmp3 = ((($0)) | 0) < ((($1)) | 0);
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $2 = $ix;
						var $arrayidx = ((__ZL11voices_list + $2 * 4) & 4294967295);
						var $3 = HEAP32[(($arrayidx) >> 2)];
						var $cmp1 = ((($3)) | 0) != 0;
						if ($cmp1) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						if (__label__ == 2) {
							var $4 = $ix;
							var $arrayidx2 = ((__ZL11voices_list + $4 * 4) & 4294967295);
							var $5 = HEAP32[(($arrayidx2) >> 2)];
							var $6 = $5;;;
						}
						var $7 = $ix;
						var $inc = ((($7) + 1) & 4294967295);
						$ix = $inc;
						var $8 = $ix;
						var $9 = HEAP32[((__ZL13n_voices_list) >> 2)];
						var $cmp = ((($8)) | 0) < ((($9)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 4;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);
			HEAP32[((__ZL13n_voices_list) >> 2)] = 0;
			var $arraydecay = (($path_voices) & 4294967295);
			var $call = _sprintf($arraydecay, ((__str72724) & 4294967295), allocate([((_path_home) & 4294967295), 0, 0, 0, 47, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));
			var $arraydecay3 = (($path_voices) & 4294967295);
			var $call4 = _strlen($arraydecay3);
			var $add = ((($call4) + 1) & 4294967295);
			HEAP32[((__ZL15len_path_voices) >> 2)] = $add;
			var $arraydecay5 = (($path_voices) & 4294967295);
			__ZL9GetVoicesPKc($arraydecay5);
			var $10 = HEAP32[((__ZL13n_voices_list) >> 2)];
			var $arrayidx6 = ((__ZL11voices_list + $10 * 4) & 4294967295);
			HEAP32[(($arrayidx6) >> 2)] = 0;
			var $11 = HEAP32[((__ZL13n_voices_list) >> 2)];
			_qsort(__ZL11voices_list, $11, 4, 6);
			var $12 = $voice_spec_addr;
			var $tobool = ((($12)) | 0) != 0;
			if ($tobool) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				var $13 = $voice_spec_addr;
				var $call8 = __ZL14SetVoiceScoresP12espeak_VOICEPS0_i($13, ((__ZZ17espeak_ListVoicesE6voices) & 4294967295), 1);;
			} else if (__label__ == 6) {
				$j = 0;
				$ix = 0;
				var $14 = $ix;
				var $arrayidx101 = ((__ZL11voices_list + $14 * 4) & 4294967295);
				var $15 = HEAP32[(($arrayidx101) >> 2)];
				$v = $15;
				var $cmp112 = ((($15)) | 0) != 0;
				if ($cmp112) {
					__label__ = 7;;
				} else {
					__label__ = 12;;
				}
				$for_body12$$for_end28$12: do {
					if (__label__ == 7) {
						$for_body12$13: while (1) {
							var $16 = $v;
							var $languages = (($16 + 4) & 4294967295);
							var $17 = HEAP32[(($languages) >> 2)];
							var $arrayidx13 = (($17) & 4294967295);
							var $18 = HEAP8[($arrayidx13)];
							var $conv = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp14 = ((($conv)) | 0) != 0;
							if ($cmp14) {
								__label__ = 8;;
							} else {
								__label__ = 11;;
							}
							$land_lhs_true$$for_inc26$15: do {
								if (__label__ == 8) {
									var $19 = $v;
									var $languages15 = (($19 + 4) & 4294967295);
									var $20 = HEAP32[(($languages15) >> 2)];
									var $arrayidx16 = (($20 + 1) & 4294967295);
									var $call17 = _strcmp($arrayidx16, ((__str55707) & 4294967295));
									var $cmp18 = ((($call17)) | 0) != 0;
									if (!($cmp18)) {
										__label__ = 11;
										break $land_lhs_true$$for_inc26$15;
									}
									var $21 = $v;
									var $identifier = (($21 + 8) & 4294967295);
									var $22 = HEAP32[(($identifier) >> 2)];
									var $call20 = _memcmp($22, ((__str73725) & 4294967295), 3);
									var $cmp21 = ((($call20)) | 0) != 0;
									if (!($cmp21)) {
										__label__ = 11;
										break $land_lhs_true$$for_inc26$15;
									}
									var $23 = $v;
									var $24 = $j;
									var $inc23 = ((($24) + 1) & 4294967295);
									$j = $inc23;
									var $arrayidx24 = ((__ZZ17espeak_ListVoicesE6voices + $24 * 4) & 4294967295);
									HEAP32[(($arrayidx24) >> 2)] = $23;;
								}
							} while (0);
							var $25 = $ix;
							var $inc27 = ((($25) + 1) & 4294967295);
							$ix = $inc27;
							var $26 = $ix;
							var $arrayidx10 = ((__ZL11voices_list + $26 * 4) & 4294967295);
							var $27 = HEAP32[(($arrayidx10) >> 2)];
							$v = $27;
							var $cmp11 = ((($27)) | 0) != 0;
							if ($cmp11) {
								__label__ = 7;
								continue $for_body12$13;
							} else {
								__label__ = 12;
								break $for_body12$$for_end28$12;
							}
						}
					}
				} while (0);
				var $28 = $j;
				var $arrayidx29 = ((__ZZ17espeak_ListVoicesE6voices + $28 * 4) & 4294967295);
				HEAP32[(($arrayidx29) >> 2)] = 0;;
			}
			STACKTOP = __stackBase__;
			return ((__ZZ17espeak_ListVoicesE6voices) & 4294967295);
			return null;
		}

		function __Z11SelectVoiceP12espeak_VOICEPi($voice_select, $found) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 1272;
			_memset(__stackBase__, 0, 1272);
			var __label__;
			var $retval;
			var $voice_select_addr;
			var $found_addr;
			var $nv;
			var $ix;
			var $ix2;
			var $j;
			var $n_variants;
			var $variant_number;
			var $gender;
			var $skip;
			var $aged;
			var $variant_name;
			var $p;
			var $p_start;
			var $vp;
			var $vp2;
			var $voice_select2 = __stackBase__;
			var $voices = __stackBase__ + 24;
			var $voices2 = __stackBase__ + 624;
			$voice_select_addr = $voice_select;
			$found_addr = $found;
			$aged = 1;
			$vp = 0;
			var $0 = $found_addr;
			HEAP32[(($0) >> 2)] = 1;
			var $1 = $voice_select2;
			var $2 = $voice_select_addr;
			var $3 = $2;
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = $3;
			$dest$ = $1;
			$stop$ = $src$ + 24;
			if (($dest$ % 4) == ($src$ % 4) && 24 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			var $4 = HEAP32[((__ZL13n_voices_list) >> 2)];
			var $cmp = ((($4)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $call = _espeak_ListVoices(0);;
			}
			var $languages = (($voice_select2 + 4) & 4294967295);
			var $5 = HEAP32[(($languages) >> 2)];
			var $cmp1 = ((($5)) | 0) == 0;
			if ($cmp1) {
				__label__ = 4;;
			} else {
				__label__ = 3;;
			}
			$if_then4$$lor_lhs_false$5: do {
				if (__label__ == 3) {
					var $languages2 = (($voice_select2 + 4) & 4294967295);
					var $6 = HEAP32[(($languages2) >> 2)];
					var $arrayidx = (($6) & 4294967295);
					var $7 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp3 = ((($conv)) | 0) == 0;
					if ($cmp3) {
						__label__ = 4;
						break $if_then4$$lor_lhs_false$5;
					} else {
						__label__ = 14;
						break $if_then4$$lor_lhs_false$5;
					}
				}
			} while (0);
			$if_then4$$if_end41$7: do {
				if (__label__ == 4) {
					var $name = (($voice_select2) & 4294967295);
					var $8 = HEAP32[(($name) >> 2)];
					var $cmp5 = ((($8)) | 0) == 0;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 7;;
					}
					$if_then6$$if_end12$9: do {
						if (__label__ == 5) {
							var $identifier = (($voice_select2 + 8) & 4294967295);
							var $9 = HEAP32[(($identifier) >> 2)];
							var $name7 = (($voice_select2) & 4294967295);
							HEAP32[(($name7) >> 2)] = $9;
							var $cmp8 = ((($9)) | 0) == 0;
							if (!($cmp8)) {
								__label__ = 7;
								break $if_then6$$if_end12$9;
							}
							var $name10 = (($voice_select2) & 4294967295);
							HEAP32[(($name10) >> 2)] = ((__str45697) & 4294967295);;
						}
					} while (0);
					var $name13 = (($voice_select2) & 4294967295);
					var $10 = HEAP32[(($name13) >> 2)];
					__Z8strncpy0PcPKci(((__ZZ11SelectVoiceP12espeak_VOICEPiE3buf) & 4294967295), $10, 60);
					__ZL23ExtractVoiceVariantNamePci(((__ZZ11SelectVoiceP12espeak_VOICEPiE3buf) & 4294967295), 0);
					$variant_name = ((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295);
					var $call15 = __Z17SelectVoiceByNamePP12espeak_VOICEPKc(((__ZL11voices_list) & 4294967295), ((__ZZ11SelectVoiceP12espeak_VOICEPiE3buf) & 4294967295));
					$vp = $call15;
					var $cmp16 = ((($call15)) | 0) != 0;
					if (!($cmp16)) {
						__label__ = 14;
						break $if_then4$$if_end41$7;
					}
					var $11 = $vp;
					var $languages18 = (($11 + 4) & 4294967295);
					var $12 = HEAP32[(($languages18) >> 2)];
					var $arrayidx19 = (($12 + 1) & 4294967295);
					var $languages20 = (($voice_select2 + 4) & 4294967295);
					HEAP32[(($languages20) >> 2)] = $arrayidx19;
					var $gender21 = (($voice_select2 + 12) & 4294967295);
					var $13 = HEAPU8[($gender21)];
					var $conv22 = ((($13)) & 255);
					var $cmp23 = ((($conv22)) | 0) == 0;
					if (!($cmp23)) {
						__label__ = 14;
						break $if_then4$$if_end41$7;
					}
					var $age = (($voice_select2 + 13) & 4294967295);
					var $14 = HEAPU8[($age)];
					var $conv24 = ((($14)) & 255);
					var $cmp25 = ((($conv24)) | 0) == 0;
					if (!($cmp25)) {
						__label__ = 14;
						break $if_then4$$if_end41$7;
					}
					var $variant = (($voice_select2 + 14) & 4294967295);
					var $15 = HEAPU8[($variant)];
					var $conv27 = ((($15)) & 255);
					var $cmp28 = ((($conv27)) | 0) == 0;
					if (!($cmp28)) {
						__label__ = 14;
						break $if_then4$$if_end41$7;
					}
					var $16 = $variant_name;
					var $arrayidx30 = (($16) & 4294967295);
					var $17 = HEAP8[($arrayidx30)];
					var $conv31 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp32 = ((($conv31)) | 0) != 0;
					var $18 = $vp;
					var $identifier34 = (($18 + 8) & 4294967295);
					var $19 = HEAP32[(($identifier34) >> 2)];
					if ($cmp32) {
						__label__ = 12;;
					} else {
						__label__ = 13;;
					}
					if (__label__ == 12) {
						var $20 = $variant_name;
						var $arrayidx35 = (($20 + 3) & 4294967295);
						var $call36 = _sprintf(((__ZZ11SelectVoiceP12espeak_VOICEPiE8voice_id) & 4294967295), ((__str71723) & 4294967295), allocate([$19, 0, 0, 0, $arrayidx35, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						$retval = ((__ZZ11SelectVoiceP12espeak_VOICEPiE8voice_id) & 4294967295);
						__label__ = 53;
						break $if_then4$$if_end41$7;
					} else if (__label__ == 13) {
						$retval = $19;
						__label__ = 53;
						break $if_then4$$if_end41$7;
					}
				}
			} while (0);
			if (__label__ == 14) {
				var $arraydecay = (($voices) & 4294967295);
				var $call42 = __ZL14SetVoiceScoresP12espeak_VOICEPS0_i($voice_select2, $arraydecay, 0);
				$nv = $call42;
				var $cmp43 = ((($call42)) | 0) == 0;
				if ($cmp43) {
					__label__ = 15;;
				} else {
					__label__ = 17;;
				}
				$if_then44$$if_end50$22: do {
					if (__label__ == 15) {
						var $21 = $found_addr;
						HEAP32[(($21) >> 2)] = 0;
						var $call45 = __Z17SelectVoiceByNamePP12espeak_VOICEPKc(((__ZL11voices_list) & 4294967295), ((__str45697) & 4294967295));
						var $arrayidx46 = (($voices) & 4294967295);
						HEAP32[(($arrayidx46) >> 2)] = $call45;
						var $cmp47 = ((($call45)) | 0) != 0;
						if (!($cmp47)) {
							__label__ = 17;
							break $if_then44$$if_end50$22;
						}
						$nv = 1;;
					}
				} while (0);
				$gender = 0;
				var $gender51 = (($voice_select2 + 12) & 4294967295);
				var $22 = HEAPU8[($gender51)];
				var $conv52 = ((($22)) & 255);
				var $cmp53 = ((($conv52)) | 0) == 2;
				if ($cmp53) {
					__label__ = 20;;
				} else {
					__label__ = 18;;
				}
				$if_then62$$lor_lhs_false54$26: do {
					if (__label__ == 18) {
						var $age55 = (($voice_select2 + 13) & 4294967295);
						var $23 = HEAPU8[($age55)];
						var $conv56 = ((($23)) & 255);
						var $cmp57 = ((($conv56)) | 0) > 0;
						if ($cmp57) {
							__label__ = 19;;
						} else {
							__label__ = 21;;
						}
						if (__label__ == 19) {
							var $age59 = (($voice_select2 + 13) & 4294967295);
							var $24 = HEAPU8[($age59)];
							var $conv60 = ((($24)) & 255);
							var $cmp61 = ((($conv60)) | 0) < 13;
							if ($cmp61) {
								__label__ = 20;
								break $if_then62$$lor_lhs_false54$26;
							}
						}
						var $gender63 = (($voice_select2 + 12) & 4294967295);
						var $25 = HEAPU8[($gender63)];
						var $conv64 = ((($25)) & 255);
						var $cmp65 = ((($conv64)) | 0) == 1;
						if (!($cmp65)) {
							__label__ = 23;
							break $if_then62$$lor_lhs_false54$26;
						}
						$gender = 1;
						__label__ = 23;
						break $if_then62$$lor_lhs_false54$26;
					}
				} while (0);
				if (__label__ == 20) {
					$gender = 2;;
				}
				var $age69 = (($voice_select2 + 13) & 4294967295);
				var $26 = HEAPU8[($age69)];
				var $conv70 = ((($26)) & 255);
				var $cmp71 = ((($conv70)) | 0) < 60;
				if ($cmp71) {
					__label__ = 24;;
				} else {
					__label__ = 25;;
				}
				$if_end73_thread$$if_end73$35: do {
					if (__label__ == 24) {
						$aged = 0;
						var $27 = $gender;
						var $arrayidx742 = ((_variant_lists + $27 * 4) & 4294967295);
						var $28 = HEAP32[(($arrayidx742) >> 2)];
						$p_start = $28;
						$p = $28;
						__label__ = 26;
						break $if_end73_thread$$if_end73$35;
					} else if (__label__ == 25) {
						var $_pr = $aged;
						var $29 = $gender;
						var $arrayidx74 = ((_variant_lists + $29 * 4) & 4294967295);
						var $30 = HEAP32[(($arrayidx74) >> 2)];
						$p_start = $30;
						$p = $30;
						var $cmp75 = ((($_pr)) | 0) == 0;
						if ($cmp75) {
							__label__ = 26;
							break $if_end73_thread$$if_end73$35;
						} else {
							__label__ = 27;
							break $if_end73_thread$$if_end73$35;
						}
					}
				} while (0);
				if (__label__ == 26) {
					var $31 = $p;
					var $incdec_ptr = (($31 + 1) & 4294967295);
					$p = $incdec_ptr;;
				}
				$n_variants = 0;
				$ix = 0;
				$ix2 = 0;
				var $32 = $ix;
				var $33 = $nv;
				var $cmp786 = ((($32)) | 0) < ((($33)) | 0);
				if ($cmp786) {
					__label__ = 28;;
				} else {
					__label__ = 44;;
				}
				$for_body$$while_cond$41: do {
					if (__label__ == 28) {
						$for_body$42: while (1) {
							var $34 = $ix;
							var $arrayidx79 = (($voices + $34 * 4) & 4294967295);
							var $35 = HEAP32[(($arrayidx79) >> 2)];
							$vp = $35;
							$skip = 0;
							var $36 = $gender;
							var $cmp80 = ((($36)) | 0) != 0;
							if ($cmp80) {
								__label__ = 29;;
							} else {
								__label__ = 31;;
							}
							$land_lhs_true81$$if_end86$44: do {
								if (__label__ == 29) {
									var $37 = $vp;
									var $gender82 = (($37 + 12) & 4294967295);
									var $38 = HEAPU8[($gender82)];
									var $conv83 = ((($38)) & 255);
									var $39 = $gender;
									var $cmp84 = ((($conv83)) | 0) != ((($39)) | 0);
									if (!($cmp84)) {
										__label__ = 31;
										break $land_lhs_true81$$if_end86$44;
									}
									$skip = 1;;
								}
							} while (0);
							var $40 = $ix2;
							var $cmp87 = ((($40)) | 0) == 0;
							if ($cmp87) {
								__label__ = 32;;
							} else {
								__label__ = 35;;
							}
							$land_lhs_true88$$if_end94$48: do {
								if (__label__ == 32) {
									var $41 = $aged;
									var $tobool = ((($41)) | 0) != 0;
									if (!($tobool)) {
										__label__ = 35;
										break $land_lhs_true88$$if_end94$48;
									}
									var $42 = $vp;
									var $age90 = (($42 + 13) & 4294967295);
									var $43 = HEAPU8[($age90)];
									var $conv91 = ((($43)) & 255);
									var $cmp92 = ((($conv91)) | 0) < 60;
									if (!($cmp92)) {
										__label__ = 35;
										break $land_lhs_true88$$if_end94$48;
									}
									$skip = 1;
									__label__ = 37;
									break $land_lhs_true88$$if_end94$48;
								}
							} while (0);
							$if_end98$$if_end94$52: do {
								if (__label__ == 35) {
									var $_pr4 = $skip;
									var $cmp95 = ((($_pr4)) | 0) == 0;
									if (!($cmp95)) {
										__label__ = 37;
										break $if_end98$$if_end94$52;
									}
									var $44 = $vp;
									var $45 = $ix2;
									var $inc = ((($45) + 1) & 4294967295);
									$ix2 = $inc;
									var $arrayidx97 = (($voices2 + $45 * 4) & 4294967295);
									HEAP32[(($arrayidx97) >> 2)] = $44;;
								}
							} while (0);
							$j = 0;;
							while (1) {
								var $46 = $j;
								var $47 = $vp;
								var $xx1 = (($47 + 15) & 4294967295);
								var $48 = HEAPU8[($xx1)];
								var $conv100 = ((($48)) & 255);
								var $cmp101 = ((($46)) | 0) < ((($conv100)) | 0);
								if (!($cmp101)) {
									__label__ = 43;
									break;
								}
								var $49 = $n_variants;
								var $cmp102 = ((($49)) | 0) < 12;
								if (!($cmp102)) {
									__label__ = 43;
									break;
								}
								var $50 = $p;
								var $51 = HEAP8[($50)];
								var $conv104 = (tempInt = (($51)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								$variant_number = $conv104;
								var $cmp105 = ((($conv104)) | 0) == 0;
								if ($cmp105) {
									__label__ = 41;;
								} else {
									__label__ = 42;;
								}
								if (__label__ == 41) {
									var $52 = $p_start;
									$p = $52;
									__label__ = 38;
									continue;
								} else if (__label__ == 42) {
									var $53 = $n_variants;
									var $inc108 = ((($53) + 1) & 4294967295);
									$n_variants = $inc108;
									var $arrayidx109 = ((__ZZ11SelectVoiceP12espeak_VOICEPiE14voice_variants + $53 * 24) & 4294967295);
									$vp2 = $arrayidx109;
									var $54 = $vp2;
									var $55 = $54;
									var $56 = $vp;
									var $57 = $56;
									var $src$, $dest$, $stop$, $stop4$, $fast$;
									$src$ = $57;
									$dest$ = $55;
									$stop$ = $src$ + 24;
									if (($dest$ % 4) == ($src$ % 4) && 24 > 8) {
										while ($src$ % 4 !== 0 && $src$ < $stop$) {;
											HEAP8[$dest$++] = HEAP8[$src$++];
										}
										$src$ >>= 2;
										$dest$ >>= 2;
										$stop4$ = $stop$ >> 2;
										while ($src$ < $stop4$) {;;;
											HEAP32[$dest$++] = HEAP32[$src$++];
										}
										$src$ <<= 2;
										$dest$ <<= 2;
									}
									while ($src$ < $stop$) {;
										HEAP8[$dest$++] = HEAP8[$src$++];
									};
									var $58 = $variant_number;
									var $conv110 = ((($58)) & 255);
									var $59 = $vp2;
									var $variant111 = (($59 + 14) & 4294967295);
									HEAP8[($variant111)] = $conv110;
									var $60 = $vp2;
									var $61 = $ix2;
									var $inc112 = ((($61) + 1) & 4294967295);
									$ix2 = $inc112;
									var $arrayidx113 = (($voices2 + $61 * 4) & 4294967295);
									HEAP32[(($arrayidx113) >> 2)] = $60;
									var $62 = $p;
									var $incdec_ptr114 = (($62 + 1) & 4294967295);
									$p = $incdec_ptr114;
									var $63 = $j;
									var $inc115 = ((($63) + 1) & 4294967295);
									$j = $inc115;
									__label__ = 38;
									continue;
								}
							}
							var $64 = $ix;
							var $inc116 = ((($64) + 1) & 4294967295);
							$ix = $inc116;
							var $65 = $ix;
							var $66 = $nv;
							var $cmp78 = ((($65)) | 0) < ((($66)) | 0);
							if ($cmp78) {
								__label__ = 28;
								continue $for_body$42;
							} else {
								__label__ = 44;
								break $for_body$$while_cond$41;
							}
						}
					}
				} while (0);
				while (1) {
					var $67 = $vp;
					var $cmp118 = ((($67)) | 0) != 0;
					if (!($cmp118)) {
						__label__ = 48;
						break;
					}
					var $68 = $p;
					var $incdec_ptr120 = (($68 + 1) & 4294967295);
					$p = $incdec_ptr120;
					var $69 = HEAP8[($68)];
					var $conv121 = (tempInt = (($69)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					$variant_number = $conv121;
					var $cmp122 = ((($conv121)) | 0) != 0;
					if (!($cmp122)) {
						__label__ = 48;
						break;
					}
					var $70 = $n_variants;
					var $cmp124 = ((($70)) | 0) < 12;
					if (!($cmp124)) {
						__label__ = 48;
						break;
					}
					var $71 = $n_variants;
					var $inc126 = ((($71) + 1) & 4294967295);
					$n_variants = $inc126;
					var $arrayidx127 = ((__ZZ11SelectVoiceP12espeak_VOICEPiE14voice_variants + $71 * 24) & 4294967295);
					$vp2 = $arrayidx127;
					var $72 = $vp2;
					var $73 = $72;
					var $74 = $vp;
					var $75 = $74;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $75;
					$dest$ = $73;
					$stop$ = $src$ + 24;
					if (($dest$ % 4) == ($src$ % 4) && 24 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $76 = $variant_number;
					var $conv128 = ((($76)) & 255);
					var $77 = $vp2;
					var $variant129 = (($77 + 14) & 4294967295);
					HEAP8[($variant129)] = $conv128;
					var $78 = $vp2;
					var $79 = $ix2;
					var $inc130 = ((($79) + 1) & 4294967295);
					$ix2 = $inc130;
					var $arrayidx131 = (($voices2 + $79 * 4) & 4294967295);
					HEAP32[(($arrayidx131) >> 2)] = $78;
					__label__ = 44;
					continue;
				}
				var $80 = $ix2;
				var $cmp132 = ((($80)) | 0) == 0;
				if ($cmp132) {
					__label__ = 49;;
				} else {
					__label__ = 50;;
				}
				if (__label__ == 49) {
					$retval = 0;;
				} else if (__label__ == 50) {
					var $variant135 = (($voice_select2 + 14) & 4294967295);
					var $81 = HEAPU8[($variant135)];
					var $conv136 = ((($81)) & 255);
					var $82 = $ix2;
					var $rem = ((($conv136)) | 0) % ((($82)) | 0);
					var $arrayidx137 = (($voices2 + $rem * 4) & 4294967295);
					var $83 = HEAP32[(($arrayidx137) >> 2)];
					$vp = $83;
					var $84 = $vp;
					var $variant138 = (($84 + 14) & 4294967295);
					var $85 = HEAPU8[($variant138)];
					var $conv139 = ((($85)) & 255);
					var $cmp140 = ((($conv139)) | 0) != 0;
					var $86 = $vp;
					if ($cmp140) {
						__label__ = 51;;
					} else {
						__label__ = 52;;
					}
					if (__label__ == 51) {
						var $variant142 = (($86 + 14) & 4294967295);
						var $87 = HEAPU8[($variant142)];
						var $conv143 = ((($87)) & 255);
						__ZL23ExtractVoiceVariantNamePci(0, $conv143);
						$variant_name = ((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295);
						var $88 = $vp;
						var $identifier145 = (($88 + 8) & 4294967295);
						var $89 = HEAP32[(($identifier145) >> 2)];
						var $90 = $variant_name;
						var $arrayidx146 = (($90 + 3) & 4294967295);
						var $call147 = _sprintf(((__ZZ11SelectVoiceP12espeak_VOICEPiE8voice_id) & 4294967295), ((__str71723) & 4294967295), allocate([$89, 0, 0, 0, $arrayidx146, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
						$retval = ((__ZZ11SelectVoiceP12espeak_VOICEPiE8voice_id) & 4294967295);;
					} else if (__label__ == 52) {
						var $identifier149 = (($86 + 8) & 4294967295);
						var $91 = HEAP32[(($identifier149) >> 2)];
						$retval = $91;;
					}
				}
			}
			var $92 = $retval;
			STACKTOP = __stackBase__;
			return $92;
			return null;
		}

		function __ZL14SetVoiceScoresP12espeak_VOICEPS0_i($voice_select, $voices, $control) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 80;
			_memset(__stackBase__, 0, 80);
			var __label__;
			var $retval;
			var $voice_select_addr;
			var $voices_addr;
			var $control_addr;
			var $ix;
			var $score;
			var $nv;
			var $n_parts;
			var $lang_len;
			var $vp;
			var $language = __stackBase__;
			$voice_select_addr = $voice_select;
			$voices_addr = $voices;
			$control_addr = $control;
			$n_parts = 0;
			$lang_len = 0;
			var $0 = $voice_select_addr;
			var $languages = (($0 + 4) & 4294967295);
			var $1 = HEAP32[(($languages) >> 2)];
			var $cmp = ((($1)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 6;;
			}
			$land_lhs_true$$if_end16$2: do {
				if (__label__ == 1) {
					var $2 = $voice_select_addr;
					var $languages1 = (($2 + 4) & 4294967295);
					var $3 = HEAP32[(($languages1) >> 2)];
					var $arrayidx = (($3) & 4294967295);
					var $4 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp2 = ((($conv)) | 0) != 0;
					if (!($cmp2)) {
						__label__ = 6;
						break $land_lhs_true$$if_end16$2;
					}
					$n_parts = 1;
					var $5 = $voice_select_addr;
					var $languages3 = (($5 + 4) & 4294967295);
					var $6 = HEAP32[(($languages3) >> 2)];
					var $call = _strlen($6);
					$lang_len = $call;
					$ix = 0;
					var $7 = $ix;
					var $8 = $lang_len;
					var $cmp42 = ((($7)) | 0) <= ((($8)) | 0);
					var $9 = $ix;
					var $cmp53 = ((($9)) >>> 0) < 80;
					var $or_cond4 = ($cmp42) & ($cmp53);
					if (!($or_cond4)) {
						__label__ = 6;
						break $land_lhs_true$$if_end16$2;
					}
					while (1) {
						var $10 = $ix;
						var $11 = $voice_select_addr;
						var $languages6 = (($11 + 4) & 4294967295);
						var $12 = HEAP32[(($languages6) >> 2)];
						var $arrayidx7 = (($12 + $10) & 4294967295);
						var $13 = HEAP8[($arrayidx7)];
						var $conv8 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $call9 = _tolower($conv8);
						var $conv10 = ((($call9)) & 255);
						var $14 = $ix;
						var $arrayidx11 = (($language + $14) & 4294967295);
						HEAP8[($arrayidx11)] = $conv10;
						var $conv12 = (tempInt = (($conv10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $cmp13 = ((($conv12)) | 0) == 45;
						if ($cmp13) {
							__label__ = 4;;
						} else {
							__label__ = 5;;
						}
						if (__label__ == 4) {
							var $15 = $n_parts;
							var $inc = ((($15) + 1) & 4294967295);
							$n_parts = $inc;;
						}
						var $16 = $ix;
						var $inc15 = ((($16) + 1) & 4294967295);
						$ix = $inc15;
						var $17 = $ix;
						var $18 = $lang_len;
						var $cmp4 = ((($17)) | 0) <= ((($18)) | 0);
						var $19 = $ix;
						var $cmp5 = ((($19)) >>> 0) < 80;
						var $or_cond = ($cmp4) & ($cmp5);
						if ($or_cond) {
							__label__ = 3;
							continue;
						} else {
							__label__ = 6;
							break $land_lhs_true$$if_end16$2;
						}
					}
				}
			} while (0);
			$nv = 0;
			$ix = 0;
			var $20 = $ix;
			var $21 = HEAP32[((__ZL13n_voices_list) >> 2)];
			var $cmp181 = ((($20)) | 0) < ((($21)) | 0);
			if ($cmp181) {
				__label__ = 7;;
			} else {
				__label__ = 13;;
			}
			$for_body19_lr_ph$$for_end37$11: do {
				if (__label__ == 7) {
					var $arraydecay = (($language) & 4294967295);;
					$for_body19$13: while (1) {
						var $22 = $ix;
						var $arrayidx20 = ((__ZL11voices_list + $22 * 4) & 4294967295);
						var $23 = HEAP32[(($arrayidx20) >> 2)];
						$vp = $23;
						var $24 = $control_addr;
						var $and = ($24) & 1;
						var $cmp21 = ((($and)) | 0) == 0;
						if ($cmp21) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						$land_lhs_true22$$if_end26$15: do {
							if (__label__ == 9) {
								var $25 = $vp;
								var $identifier = (($25 + 8) & 4294967295);
								var $26 = HEAP32[(($identifier) >> 2)];
								var $call23 = _memcmp($26, ((__str73725) & 4294967295), 3);
								var $cmp24 = ((($call23)) | 0) == 0;
								if ($cmp24) {
									__label__ = 12;
									break $land_lhs_true22$$if_end26$15;
								} else {
									__label__ = 10;
									break $land_lhs_true22$$if_end26$15;
								}
							}
						} while (0);
						$for_inc35$$if_end26$17: do {
							if (__label__ == 10) {
								var $27 = $voice_select_addr;
								var $28 = $n_parts;
								var $29 = $lang_len;
								var $30 = $ix;
								var $arrayidx27 = ((__ZL11voices_list + $30 * 4) & 4294967295);
								var $31 = HEAP32[(($arrayidx27) >> 2)];
								var $call28 = __ZL10ScoreVoiceP12espeak_VOICEPKciiS0_($27, $arraydecay, $28, $29, $31);
								$score = $call28;
								var $cmp29 = ((($call28)) | 0) > 0;
								if (!($cmp29)) {
									__label__ = 12;
									break $for_inc35$$if_end26$17;
								}
								var $32 = $vp;
								var $33 = $nv;
								var $inc31 = ((($33) + 1) & 4294967295);
								$nv = $inc31;
								var $34 = $voices_addr;
								var $arrayidx32 = (($34 + 4 * $33) & 4294967295);
								HEAP32[(($arrayidx32) >> 2)] = $32;
								var $35 = $score;
								var $36 = $vp;
								var $score33 = (($36 + 16) & 4294967295);
								HEAP32[(($score33) >> 2)] = $35;;
							}
						} while (0);
						var $37 = $ix;
						var $inc36 = ((($37) + 1) & 4294967295);
						$ix = $inc36;
						var $38 = $ix;
						var $39 = HEAP32[((__ZL13n_voices_list) >> 2)];
						var $cmp18 = ((($38)) | 0) < ((($39)) | 0);
						if ($cmp18) {
							__label__ = 8;
							continue $for_body19$13;
						} else {
							__label__ = 13;
							break $for_body19_lr_ph$$for_end37$11;
						}
					}
				}
			} while (0);
			var $40 = $nv;
			var $41 = $voices_addr;
			var $arrayidx38 = (($41 + 4 * $40) & 4294967295);
			HEAP32[(($arrayidx38) >> 2)] = 0;
			var $42 = $nv;
			var $cmp39 = ((($42)) | 0) == 0;
			if ($cmp39) {
				__label__ = 14;;
			} else {
				__label__ = 15;;
			}
			if (__label__ == 14) {
				$retval = 0;;
			} else if (__label__ == 15) {
				var $43 = $voices_addr;
				var $44 = $43;
				var $45 = $nv;
				_qsort($44, $45, 4, 8);
				var $46 = $nv;
				$retval = $46;;
			}
			var $47 = $retval;
			STACKTOP = __stackBase__;
			return $47;
			return null;
		}

		function __Z14SetVoiceByNamePKc($name) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 24;
			_memset(__stackBase__, 0, 24);
			var __label__;
			var $retval;
			var $name_addr;
			var $v;
			var $voice_selector = __stackBase__;
			var $variant_name;
			$name_addr = $name;
			var $0 = $name_addr;
			__Z8strncpy0PcPKci(((__ZZ14SetVoiceByNamePKcE3buf) & 4294967295), $0, 60);
			__ZL23ExtractVoiceVariantNamePci(((__ZZ14SetVoiceByNamePKcE3buf) & 4294967295), 0);
			$variant_name = ((__ZZL23ExtractVoiceVariantNamePciE12variant_name) & 4294967295);
			var $1 = $voice_selector;
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = $1;
			$stop$ = $dest$ + 24;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			var $2 = $name_addr;
			var $name1 = (($voice_selector) & 4294967295);
			HEAP32[(($name1) >> 2)] = $2;
			var $call2 = __Z9LoadVoicePKci(((__ZZ14SetVoiceByNamePKcE3buf) & 4294967295), 1);
			var $cmp = ((($call2)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$if_then$$if_end6$2: do {
				if (__label__ == 1) {
					var $3 = $variant_name;
					var $arrayidx = (($3) & 4294967295);
					var $4 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp3 = ((($conv)) | 0) != 0;
					if ($cmp3) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						var $5 = $variant_name;
						var $call5 = __Z9LoadVoicePKci($5, 2);;
					}
					var $6 = HEAP32[((_voice) >> 2)];
					__Z13DoVoiceChangeP7voice_t($6);
					__Z13SetVoiceStackP12espeak_VOICE($voice_selector);
					$retval = 0;;
				} else if (__label__ == 4) {
					var $7 = HEAP32[((__ZL13n_voices_list) >> 2)];
					var $cmp7 = ((($7)) | 0) == 0;
					if ($cmp7) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $call9 = _espeak_ListVoices(0);;
					}
					var $call11 = __Z17SelectVoiceByNamePP12espeak_VOICEPKc(((__ZL11voices_list) & 4294967295), ((__ZZ14SetVoiceByNamePKcE3buf) & 4294967295));
					$v = $call11;
					var $cmp12 = ((($call11)) | 0) != 0;
					if ($cmp12) {
						__label__ = 7;;
					} else {
						__label__ = 11;;
					}
					$if_then13$$if_end24$11: do {
						if (__label__ == 7) {
							var $8 = $v;
							var $identifier = (($8 + 8) & 4294967295);
							var $9 = HEAP32[(($identifier) >> 2)];
							var $call14 = __Z9LoadVoicePKci($9, 0);
							var $cmp15 = ((($call14)) | 0) != 0;
							if (!($cmp15)) {
								__label__ = 11;
								break $if_then13$$if_end24$11;
							}
							var $10 = $variant_name;
							var $arrayidx17 = (($10) & 4294967295);
							var $11 = HEAP8[($arrayidx17)];
							var $conv18 = (tempInt = (($11)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp19 = ((($conv18)) | 0) != 0;
							if ($cmp19) {
								__label__ = 9;;
							} else {
								__label__ = 10;;
							}
							if (__label__ == 9) {
								var $12 = $variant_name;
								var $call21 = __Z9LoadVoicePKci($12, 2);;
							}
							var $13 = HEAP32[((_voice) >> 2)];
							__Z13DoVoiceChangeP7voice_t($13);
							__Z13SetVoiceStackP12espeak_VOICE($voice_selector);
							$retval = 0;
							__label__ = 12;
							break $if_then$$if_end6$2;
						}
					} while (0);
					$retval = -1;;
				}
			} while (0);
			var $14 = $retval;
			STACKTOP = __stackBase__;
			return $14;
			return null;
		}

		function __Z20SetVoiceByPropertiesP12espeak_VOICE($voice_selector) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $retval;
			var $voice_selector_addr;
			var $voice_id;
			var $voice_found = __stackBase__;
			$voice_selector_addr = $voice_selector;
			var $0 = $voice_selector_addr;
			var $call = __Z11SelectVoiceP12espeak_VOICEPi($0, $voice_found);
			$voice_id = $call;
			var $1 = HEAP32[(($voice_found) >> 2)];
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 2;;
			} else if (__label__ == 2) {
				var $2 = $voice_id;
				var $call1 = __Z16LoadVoiceVariantPKci($2, 0);
				var $3 = HEAP32[((_voice) >> 2)];
				__Z13DoVoiceChangeP7voice_t($3);
				var $4 = $voice_selector_addr;
				__Z13SetVoiceStackP12espeak_VOICE($4);
				$retval = 0;;
			}
			var $5 = $retval;
			STACKTOP = __stackBase__;
			return $5;
			return null;
		}

		function __ZL9GetVoicesPKc($path) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 252;
			_memset(__stackBase__, 0, 252);
			var __label__;
			var __lastLabel__ = null;
			var $path_addr;
			var $f_voice;
			var $voice_data;
			var $ftype;
			var $fname = __stackBase__;
			var $dir;
			var $ent;
			$path_addr = $path;
			var $0 = $path_addr;
			var $call = _opendir($0);
			$dir = $call;
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 13;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 1) {
				var $1 = $dir;
				var $call11 = _readdir($1);
				$ent = $call11;
				var $cmp22 = ((($call11)) | 0) == 0;
				var $2 = HEAP32[((__ZL13n_voices_list) >> 2)];
				var $cmp33 = ((($2)) | 0) >= 148;
				var $or_cond4 = ($cmp22) | ($cmp33);
				if ($or_cond4) {
					__label__ = 12;;
				} else {
					__label__ = 2;;
				}
				$while_end$$if_end5_lr_ph$4: do {
					if (__label__ == 2) {
						var $arraydecay = (($fname) & 4294967295);
						var $arraydecay8 = (($fname) & 4294967295);
						var $arraydecay14 = (($fname) & 4294967295);
						var $arraydecay17 = (($fname) & 4294967295);
						var $arraydecay22 = (($fname) & 4294967295);;
						$if_end5$6: while (1) {
							var $3 = $path_addr;
							var $4 = $ent;
							var $d_name = (($4 + 4) & 4294967295);
							var $arraydecay6 = (($d_name) & 4294967295);
							var $call7 = _sprintf($arraydecay, ((__str74726) & 4294967295), allocate([$3, 0, 0, 0, 47, 0, 0, 0, $arraydecay6, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));
							var $call9 = __Z13GetFileLengthPKc($arraydecay8);
							$ftype = $call9;
							var $cmp10 = ((($call9)) | 0) == -2;
							if ($cmp10) {
								__lastLabel__ = 3;
								__label__ = 4;;
							} else {
								__lastLabel__ = 3;
								__label__ = 7;;
							}
							$land_lhs_true$$if_else$8: do {
								if (__label__ == 4) {
									var $5 = $ent;
									var $d_name11 = (($5 + 4) & 4294967295);
									var $arrayidx = (($d_name11) & 4294967295);
									var $6 = HEAP8[($arrayidx)];
									var $conv = (tempInt = (($6)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp12 = ((($conv)) | 0) != 46;
									if ($cmp12) {
										__label__ = 5;;
									} else {
										__label__ = 6;;
									}
									if (__label__ == 5) {
										__ZL9GetVoicesPKc($arraydecay14);
										__label__ = 9;
										break $land_lhs_true$$if_else$8;
									} else if (__label__ == 6) {
										var $_pr = $ftype;
										__lastLabel__ = 6;
										__label__ = 7;
										break $land_lhs_true$$if_else$8;
									}
								}
							} while (0);
							$while_cond_backedge$$if_else$13: do {
								if (__label__ == 7) {
									var $7 = __lastLabel__ == 6 ? $_pr : ($call9);
									var $cmp15 = ((($7)) | 0) > 0;
									if (!($cmp15)) {
										__label__ = 9;
										break $while_cond_backedge$$if_else$13;
									}
									var $call18 = _fopen($arraydecay17, ((__str51703) & 4294967295));
									$f_voice = $call18;
									var $cmp19 = ((($call18)) | 0) == 0;
									if ($cmp19) {
										__label__ = 9;
										break $while_cond_backedge$$if_else$13;
									}
									var $10 = $f_voice;
									var $11 = HEAP32[((__ZL15len_path_voices) >> 2)];
									var $add_ptr = (($arraydecay22 + $11) & 4294967295);
									var $12 = $ent;
									var $d_name23 = (($12 + 4) & 4294967295);
									var $arraydecay24 = (($d_name23) & 4294967295);
									var $call25 = __ZL13ReadVoiceFileP7__sFILEPKcS2_($10, $add_ptr, $arraydecay24);
									$voice_data = $call25;
									var $13 = $f_voice;
									var $call26 = _fclose($13);
									var $14 = $voice_data;
									var $cmp27 = ((($14)) | 0) != 0;
									if (!($cmp27)) {
										__label__ = 9;
										break $while_cond_backedge$$if_else$13;
									}
									var $15 = $voice_data;
									var $16 = HEAP32[((__ZL13n_voices_list) >> 2)];
									var $inc = ((($16) + 1) & 4294967295);
									HEAP32[((__ZL13n_voices_list) >> 2)] = $inc;
									var $arrayidx29 = ((__ZL11voices_list + $16 * 4) & 4294967295);
									HEAP32[(($arrayidx29) >> 2)] = $15;;
								}
							} while (0);
							var $8 = $dir;
							var $call1 = _readdir($8);
							$ent = $call1;
							var $cmp2 = ((($call1)) | 0) == 0;
							var $9 = HEAP32[((__ZL13n_voices_list) >> 2)];
							var $cmp3 = ((($9)) | 0) >= 148;
							var $or_cond = ($cmp2) | ($cmp3);
							if ($or_cond) {
								__label__ = 12;
								break $while_end$$if_end5_lr_ph$4;
							} else {
								__label__ = 3;
								continue $if_end5$6;
							}
						}
					}
				} while (0);
				var $17 = $dir;
				var $call33 = _closedir($17);;
			}
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL15VoiceNameSorterPKvS0_($p1, $p2) {;
			var __label__;
			var $retval;
			var $p1_addr;
			var $p2_addr;
			var $ix;
			var $v1;
			var $v2;
			$p1_addr = $p1;
			$p2_addr = $p2;
			var $0 = $p1_addr;
			var $1 = $0;
			var $2 = HEAP32[(($1) >> 2)];
			$v1 = $2;
			var $3 = $p2_addr;
			var $4 = $3;
			var $5 = HEAP32[(($4) >> 2)];
			$v2 = $5;
			var $6 = $v1;
			var $languages = (($6 + 4) & 4294967295);
			var $7 = HEAP32[(($languages) >> 2)];
			var $arrayidx = (($7 + 1) & 4294967295);
			var $8 = $v2;
			var $languages1 = (($8 + 4) & 4294967295);
			var $9 = HEAP32[(($languages1) >> 2)];
			var $arrayidx2 = (($9 + 1) & 4294967295);
			var $call = _strcmp($arrayidx, $arrayidx2);
			$ix = $call;
			var $cmp = ((($call)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $10 = $ix;
				$retval = $10;;
			} else if (__label__ == 2) {
				var $11 = $v1;
				var $languages3 = (($11 + 4) & 4294967295);
				var $12 = HEAP32[(($languages3) >> 2)];
				var $arrayidx4 = (($12) & 4294967295);
				var $13 = HEAP8[($arrayidx4)];
				var $conv = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $14 = $v2;
				var $languages5 = (($14 + 4) & 4294967295);
				var $15 = HEAP32[(($languages5) >> 2)];
				var $arrayidx6 = (($15) & 4294967295);
				var $16 = HEAP8[($arrayidx6)];
				var $conv7 = (tempInt = (($16)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $sub = ((($conv) - ($conv7)) & 4294967295);
				$ix = $sub;
				var $cmp8 = ((($sub)) | 0) != 0;
				if ($cmp8) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $17 = $ix;
					$retval = $17;;
				} else if (__label__ == 4) {
					var $18 = $v1;
					var $name = (($18) & 4294967295);
					var $19 = HEAP32[(($name) >> 2)];
					var $20 = $v2;
					var $name11 = (($20) & 4294967295);
					var $21 = HEAP32[(($name11) >> 2)];
					var $call12 = _strcmp($19, $21);
					$retval = $call12;;
				}
			}
			var $22 = $retval;;
			return $22;
			return null;
		}

		function _espeak_GetCurrentVoice() {;
			var __label__;;
			return _voice_selected;
			return null;
		}

		function __ZL13ReadVoiceFileP7__sFILEPKcS2_($f_in, $fname, $leafname) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 672;
			_memset(__stackBase__, 0, 672);
			var __label__;
			var $retval;
			var $f_in_addr;
			var $fname_addr;
			var $leafname_addr;
			var $linebuf = __stackBase__;
			var $vname = __stackBase__ + 120;
			var $vgender = __stackBase__ + 200;
			var $vlanguage = __stackBase__ + 280;
			var $languages = __stackBase__ + 360;
			var $len;
			var $langix;
			var $n_languages;
			var $p;
			var $voice_data;
			var $priority = __stackBase__ + 660;
			var $age = __stackBase__ + 664;
			var $n_variants = __stackBase__ + 668;
			var $gender;
			$f_in_addr = $f_in;
			$fname_addr = $fname;
			$leafname_addr = $leafname;
			$langix = 0;
			$n_languages = 0;
			HEAP32[(($n_variants) >> 2)] = 3;
			var $arrayidx = (($vname) & 4294967295);
			HEAP8[($arrayidx)] = 0;
			var $arrayidx1 = (($vgender) & 4294967295);
			HEAP8[($arrayidx1)] = 0;
			HEAP32[(($age) >> 2)] = 0;
			var $arraydecay = (($linebuf) & 4294967295);
			var $0 = $f_in_addr;
			var $call4 = __ZL11fgets_stripPciP7__sFILE($arraydecay, 120, $0);
			var $cmp5 = ((($call4)) | 0) != 0;
			if ($cmp5) {
				__label__ = 1;;
			} else {
				__label__ = 14;;
			}
			$while_body_lr_ph$$while_end49$2: do {
				if (__label__ == 1) {
					var $arraydecay2 = (($linebuf) & 4294967295);
					var $arrayidx5 = (($linebuf + 4) & 4294967295);
					var $arraydecay9 = (($vname) & 4294967295);
					var $arraydecay10 = (($linebuf) & 4294967295);
					var $arrayidx14 = (($vlanguage) & 4294967295);
					var $arrayidx15 = (($linebuf + 8) & 4294967295);
					var $arraydecay16 = (($vlanguage) & 4294967295);
					var $arraydecay18 = (($vlanguage) & 4294967295);
					var $arraydecay27 = (($vlanguage) & 4294967295);
					var $arraydecay31 = (($linebuf) & 4294967295);
					var $arrayidx35 = (($linebuf + 6) & 4294967295);
					var $arraydecay36 = (($vgender) & 4294967295);
					var $arraydecay39 = (($linebuf) & 4294967295);
					var $arrayidx43 = (($linebuf + 8) & 4294967295);;
					$while_body$4: while (1) {
						var $call3 = _memcmp($arraydecay2, ((__str5655) & 4294967295), 4);
						var $cmp4 = ((($call3)) | 0) == 0;
						if ($cmp4) {
							__label__ = 3;;
						} else {
							__label__ = 6;;
						}
						$if_then$$if_else$6: do {
							if (__label__ == 3) {
								$p = $arrayidx5;
								var $1 = $p;
								var $2 = HEAP8[($1)];
								var $conv1 = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call72 = _isspace($conv1);
								var $tobool3 = ((($call72)) | 0) != 0;
								if ($tobool3) {
									__label__ = 4;;
								} else {
									__label__ = 5;;
								}
								$while_body8$$while_end$8: do {
									if (__label__ == 4) {
										while (1) {
											var $3 = $p;
											var $incdec_ptr = (($3 + 1) & 4294967295);
											$p = $incdec_ptr;
											var $4 = $p;
											var $5 = HEAP8[($4)];
											var $conv = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call7 = _isspace($conv);
											var $tobool = ((($call7)) | 0) != 0;
											if ($tobool) {
												__label__ = 4;
												continue;
											} else {
												__label__ = 5;
												break $while_body8$$while_end$8;
											}
										}
									}
								} while (0);
								var $6 = $p;
								__Z8strncpy0PcPKci($arraydecay9, $6, 80);;
							} else if (__label__ == 6) {
								var $call11 = _memcmp($arraydecay10, ((__str6656) & 4294967295), 8);
								var $cmp12 = ((($call11)) | 0) == 0;
								if ($cmp12) {
									__label__ = 7;;
								} else {
									__label__ = 10;;
								}
								if (__label__ == 7) {
									HEAP32[(($priority) >> 2)] = 5;
									HEAP8[($arrayidx14)] = 0;
									var $call17 = _sscanf($arrayidx15, ((__str54706) & 4294967295), allocate([$arraydecay16, 0, 0, 0, $priority, 0, 0, 0], ["i8*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));
									var $call19 = _strlen($arraydecay18);
									var $add = ((($call19) + 2) & 4294967295);
									$len = $add;
									var $7 = $len;
									var $8 = $langix;
									var $_neg = (((-($8))) & 4294967295);
									var $sub20 = ((($_neg) + 299) & 4294967295);
									var $cmp21 = ((($7)) >>> 0) < ((($sub20)) >>> 0);
									if (!($cmp21)) {
										__label__ = 9;
										break $if_then$$if_else$6;
									}
									var $9 = HEAP32[(($priority) >> 2)];
									var $conv23 = ((($9)) & 255);
									var $10 = $langix;
									var $arrayidx24 = (($languages + $10) & 4294967295);
									HEAP8[($arrayidx24)] = $conv23;
									var $11 = $langix;
									var $add25 = ((($11) + 1) & 4294967295);
									var $arrayidx26 = (($languages + $add25) & 4294967295);
									var $call28 = _strcpy($arrayidx26, $arraydecay27);
									var $12 = $len;
									var $13 = $langix;
									var $add29 = ((($13) + ($12)) & 4294967295);
									$langix = $add29;
									var $14 = $n_languages;
									var $inc = ((($14) + 1) & 4294967295);
									$n_languages = $inc;;
								} else if (__label__ == 10) {
									var $call32 = _memcmp($arraydecay31, ((__str7657) & 4294967295), 6);
									var $cmp33 = ((($call32)) | 0) == 0;
									if ($cmp33) {
										__label__ = 11;;
									} else {
										__label__ = 12;;
									}
									if (__label__ == 11) {
										var $call37 = _sscanf($arrayidx35, ((__str54706) & 4294967295), allocate([$arraydecay36, 0, 0, 0, $age, 0, 0, 0], ["i8*", 0, 0, 0, "i32*", 0, 0, 0], ALLOC_STACK));;
									} else if (__label__ == 12) {
										var $call40 = _memcmp($arraydecay39, ((__str75727) & 4294967295), 8);
										var $cmp41 = ((($call40)) | 0) == 0;
										if (!($cmp41)) {
											__label__ = 9;
											break $if_then$$if_else$6;
										}
										var $call44 = _sscanf($arrayidx43, ((__str63715) & 4294967295), allocate([$n_variants, 0, 0, 0], ["i32*", 0, 0, 0], ALLOC_STACK));;
									}
								}
							}
						} while (0);
						var $15 = $f_in_addr;
						var $call = __ZL11fgets_stripPciP7__sFILE($arraydecay, 120, $15);
						var $cmp = ((($call)) | 0) != 0;
						if ($cmp) {
							__label__ = 2;
							continue $while_body$4;
						} else {
							__label__ = 14;
							break $while_body_lr_ph$$while_end49$2;
						}
					}
				}
			} while (0);
			var $16 = $langix;
			var $inc50 = ((($16) + 1) & 4294967295);
			$langix = $inc50;
			var $arrayidx51 = (($languages + $16) & 4294967295);
			HEAP8[($arrayidx51)] = 0;
			var $arraydecay52 = (($vgender) & 4294967295);
			var $call53 = __Z10LookupMnemP8MNEM_TABPKc(((_genders) & 4294967295), $arraydecay52);
			$gender = $call53;
			var $17 = $n_languages;
			var $cmp54 = ((($17)) | 0) == 0;
			if ($cmp54) {
				__label__ = 15;;
			} else {
				__label__ = 16;;
			}
			if (__label__ == 15) {
				$retval = 0;;
			} else if (__label__ == 16) {
				var $18 = $langix;
				var $19 = $fname_addr;
				var $call58 = _strlen($19);
				var $arraydecay60 = (($vname) & 4294967295);
				var $call61 = _strlen($arraydecay60);
				var $add59 = ((($18) + 27) & 4294967295);
				var $add62 = ((($add59) + ($call58)) & 4294967295);
				var $add63 = ((($add62) + ($call61)) & 4294967295);
				var $call64 = _calloc($add63, 1);
				$p = $call64;
				var $20 = $p;
				var $21 = $20;
				$voice_data = $21;
				var $22 = $p;
				var $arrayidx65 = (($22 + 24) & 4294967295);
				$p = $arrayidx65;
				var $23 = $p;
				var $arraydecay66 = (($languages) & 4294967295);
				var $24 = $langix;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $arraydecay66;
				$dest$ = $23;
				$stop$ = $src$ + $24;
				if (($dest$ % 4) == ($src$ % 4) && $24 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $25 = $p;
				var $26 = $voice_data;
				var $languages67 = (($26 + 4) & 4294967295);
				HEAP32[(($languages67) >> 2)] = $25;
				var $27 = $langix;
				var $28 = $p;
				var $arrayidx68 = (($28 + $27) & 4294967295);
				var $29 = $fname_addr;
				var $call69 = _strcpy($arrayidx68, $29);
				var $30 = $langix;
				var $31 = $p;
				var $arrayidx70 = (($31 + $30) & 4294967295);
				var $32 = $voice_data;
				var $identifier = (($32 + 8) & 4294967295);
				HEAP32[(($identifier) >> 2)] = $arrayidx70;
				var $33 = $langix;
				var $34 = $p;
				var $arrayidx71 = (($34 + $33) & 4294967295);
				var $35 = $voice_data;
				var $name = (($35) & 4294967295);
				HEAP32[(($name) >> 2)] = $arrayidx71;
				var $arrayidx72 = (($vname) & 4294967295);
				var $36 = HEAP8[($arrayidx72)];
				var $conv73 = (tempInt = (($36)), (tempInt >= 128 ? tempInt - 256 : tempInt));
				var $cmp74 = ((($conv73)) | 0) != 0;
				if ($cmp74) {
					__label__ = 17;;
				} else {
					__label__ = 18;;
				}
				if (__label__ == 17) {
					var $37 = $fname_addr;
					var $call76 = _strlen($37);
					var $38 = $langix;
					var $add77 = ((($call76) + 1) & 4294967295);
					var $add78 = ((($add77) + ($38)) & 4294967295);
					$langix = $add78;
					var $39 = $langix;
					var $40 = $p;
					var $arrayidx79 = (($40 + $39) & 4294967295);
					var $arraydecay80 = (($vname) & 4294967295);
					var $call81 = _strcpy($arrayidx79, $arraydecay80);
					var $41 = $langix;
					var $42 = $p;
					var $arrayidx82 = (($42 + $41) & 4294967295);
					var $43 = $voice_data;
					var $name83 = (($43) & 4294967295);
					HEAP32[(($name83) >> 2)] = $arrayidx82;;
				}
				var $44 = HEAP32[(($age) >> 2)];
				var $conv85 = ((($44)) & 255);
				var $45 = $voice_data;
				var $age86 = (($45 + 13) & 4294967295);
				HEAP8[($age86)] = $conv85;
				var $46 = $gender;
				var $conv87 = ((($46)) & 255);
				var $47 = $voice_data;
				var $gender88 = (($47 + 12) & 4294967295);
				HEAP8[($gender88)] = $conv87;
				var $48 = $voice_data;
				var $variant = (($48 + 14) & 4294967295);
				HEAP8[($variant)] = 0;
				var $49 = HEAP32[(($n_variants) >> 2)];
				var $conv89 = ((($49)) & 255);
				var $50 = $voice_data;
				var $xx1 = (($50 + 15) & 4294967295);
				HEAP8[($xx1)] = $conv89;
				var $51 = $voice_data;
				$retval = $51;;
			}
			var $52 = $retval;
			STACKTOP = __stackBase__;
			return $52;
			return null;
		}

		function __ZL10ScoreVoiceP12espeak_VOICEPKciiS0_($voice_spec, $spec_language, $spec_n_parts, $spec_lang_len, $voice) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $voice_spec_addr;
			var $spec_language_addr;
			var $spec_n_parts_addr;
			var $spec_lang_len_addr;
			var $voice_addr;
			var $ix;
			var $p;
			var $c1;
			var $c2;
			var $language_priority;
			var $n_parts;
			var $matching;
			var $matching_parts;
			var $score;
			var $x;
			var $ratio;
			var $required_age;
			var $diff;
			$voice_spec_addr = $voice_spec;
			$spec_language_addr = $spec_language;
			$spec_n_parts_addr = $spec_n_parts;
			$spec_lang_len_addr = $spec_lang_len;
			$voice_addr = $voice;
			$score = 0;
			var $0 = $voice_addr;
			var $languages = (($0 + 4) & 4294967295);
			var $1 = HEAP32[(($languages) >> 2)];
			$p = $1;
			var $2 = $spec_language_addr;
			var $call = _strcmp($2, ((__str33683) & 4294967295));
			var $cmp = ((($call)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$if_then$$if_end4$2: do {
				if (__label__ == 1) {
					var $3 = $voice_addr;
					var $identifier = (($3 + 8) & 4294967295);
					var $4 = HEAP32[(($identifier) >> 2)];
					var $call1 = _memcmp($4, ((__str73725) & 4294967295), 3);
					var $cmp2 = ((($call1)) | 0) == 0;
					if ($cmp2) {
						__label__ = 2;;
					} else {
						__label__ = 3;;
					}
					if (__label__ == 2) {
						$retval = 100;;
					} else if (__label__ == 3) {
						$retval = 0;;
					}
				} else if (__label__ == 4) {
					var $5 = $spec_n_parts_addr;
					var $cmp5 = ((($5)) | 0) == 0;
					if ($cmp5) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					$if_end60_thread$$if_else$8: do {
						if (__label__ == 5) {
							$score = 100;;
						} else if (__label__ == 6) {
							var $6 = $p;
							var $7 = HEAP8[($6)];
							var $conv = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp7 = ((($conv)) | 0) == 0;
							if ($cmp7) {
								__label__ = 7;;
							} else {
								__label__ = 9;;
							}
							$land_lhs_true$$while_cond_preheader$11: do {
								if (__label__ == 7) {
									var $8 = $spec_language_addr;
									var $call8 = _strcmp($8, ((__str75727) & 4294967295));
									var $cmp9 = ((($call8)) | 0) == 0;
									if (!($cmp9)) {
										__label__ = 9;
										break $land_lhs_true$$while_cond_preheader$11;
									}
									$score = 100;;
								}
							} while (0);
							var $9 = $p;
							var $10 = HEAP8[($9)];
							var $conv123 = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp134 = ((($conv123)) | 0) != 0;
							if ($cmp134) {
								__label__ = 10;;
							} else {
								__label__ = 31;;
							}
							$while_body$$if_end60$15: do {
								if (__label__ == 10) {
									$while_body$16: while (1) {
										var $11 = $p;
										var $incdec_ptr = (($11 + 1) & 4294967295);
										$p = $incdec_ptr;
										var $12 = HEAP8[($11)];
										var $conv14 = (tempInt = (($12)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										$language_priority = $conv14;
										$matching = 1;
										$matching_parts = 0;
										$n_parts = 1;
										$ix = 0;;
										$for_cond$18: while (1) {
											var $13 = $ix;
											var $14 = $spec_lang_len_addr;
											var $cmp15 = ((($13)) | 0) >= ((($14)) | 0);
											if ($cmp15) {
												__label__ = 13;;
											} else {
												__label__ = 12;;
											}
											$if_then18$$lor_lhs_false$20: do {
												if (__label__ == 12) {
													var $15 = $ix;
													var $16 = $spec_language_addr;
													var $arrayidx = (($16 + $15) & 4294967295);
													var $17 = HEAP8[($arrayidx)];
													var $conv16 = (tempInt = (($17)), (tempInt >= 128 ? tempInt - 256 : tempInt));
													$c1 = $conv16;
													var $cmp17 = ((($conv16)) | 0) == 45;
													if ($cmp17) {
														__label__ = 13;
														break $if_then18$$lor_lhs_false$20;
													} else {
														__label__ = 14;
														break $if_then18$$lor_lhs_false$20;
													}
												}
											} while (0);
											if (__label__ == 13) {
												$c1 = 0;;
											}
											var $18 = $ix;
											var $19 = $p;
											var $arrayidx20 = (($19 + $18) & 4294967295);
											var $20 = HEAP8[($arrayidx20)];
											var $conv21 = (tempInt = (($20)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											$c2 = $conv21;
											var $cmp22 = ((($conv21)) | 0) == 45;
											if ($cmp22) {
												__label__ = 15;;
											} else {
												__label__ = 16;;
											}
											if (__label__ == 15) {
												$c2 = 0;;
											}
											var $21 = $c1;
											var $22 = $c2;
											var $cmp25 = ((($21)) | 0) != ((($22)) | 0);
											if ($cmp25) {
												__label__ = 17;;
											} else {
												__label__ = 18;;
											}
											if (__label__ == 17) {
												$matching = 0;;
											}
											var $23 = $ix;
											var $24 = $p;
											var $arrayidx28 = (($24 + $23) & 4294967295);
											var $25 = HEAP8[($arrayidx28)];
											var $conv29 = (tempInt = (($25)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp30 = ((($conv29)) | 0) == 45;
											if ($cmp30) {
												__label__ = 19;;
											} else {
												__label__ = 21;;
											}
											$if_then31$$if_end35$31: do {
												if (__label__ == 19) {
													var $26 = $n_parts;
													var $inc = ((($26) + 1) & 4294967295);
													$n_parts = $inc;
													var $27 = $matching;
													var $tobool = ((($27)) | 0) != 0;
													if (!($tobool)) {
														__label__ = 21;
														break $if_then31$$if_end35$31;
													}
													var $28 = $matching_parts;
													var $inc33 = ((($28) + 1) & 4294967295);
													$matching_parts = $inc33;;
												}
											} while (0);
											var $29 = $ix;
											var $30 = $p;
											var $arrayidx36 = (($30 + $29) & 4294967295);
											var $31 = HEAP8[($arrayidx36)];
											var $conv37 = (tempInt = (($31)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $cmp38 = ((($conv37)) | 0) == 0;
											var $32 = $ix;
											var $add = ((($32) + 1) & 4294967295);
											if ($cmp38) {
												__label__ = 23;
												break $for_cond$18;
											}
											$ix = $add;
											__label__ = 11;
											continue $for_cond$18;
										}
										var $33 = $p;
										var $add_ptr = (($33 + $add) & 4294967295);
										$p = $add_ptr;
										var $34 = $matching;
										var $35 = $matching_parts;
										var $add42 = ((($35) + ($34)) & 4294967295);
										$matching_parts = $add42;
										var $36 = $matching_parts;
										var $cmp43 = ((($36)) | 0) == 0;
										if ($cmp43) {
											__label__ = 24;;
										} else {
											__label__ = 25;;
										}
										$while_cond_backedge$$if_end45$37: do {
											if (__label__ == 25) {
												$x = 5;
												var $39 = $spec_n_parts_addr;
												var $40 = $matching_parts;
												var $sub = ((($39) - ($40)) & 4294967295);
												$diff = $sub;
												var $cmp46 = ((($sub)) | 0) > 0;
												if ($cmp46) {
													__label__ = 26;;
												} else {
													__label__ = 27;;
												}
												if (__label__ == 26) {
													var $41 = $diff;
													var $42 = $x;
													var $sub48 = ((($42) - ($41)) & 4294967295);
													$x = $sub48;;
												}
												var $43 = $n_parts;
												var $44 = $matching_parts;
												var $sub50 = ((($43) - ($44)) & 4294967295);
												$diff = $sub50;
												var $cmp51 = ((($sub50)) | 0) > 0;
												if ($cmp51) {
													__label__ = 28;;
												} else {
													__label__ = 29;;
												}
												if (__label__ == 28) {
													var $45 = $diff;
													var $46 = $x;
													var $sub53 = ((($46) - ($45)) & 4294967295);
													$x = $sub53;;
												}
												var $47 = $x;
												var $mul = ((($47) * 100) & 4294967295);
												var $48 = $language_priority;
												var $mul55 = ((($48) * 2) & 4294967295);
												var $sub56 = ((($mul) - ($mul55)) & 4294967295);
												$x = $sub56;
												var $49 = $x;
												var $50 = $score;
												var $cmp57 = ((($49)) | 0) > ((($50)) | 0);
												if (!($cmp57)) {
													__label__ = 24;
													break $while_cond_backedge$$if_end45$37;
												}
												var $51 = $x;
												$score = $51;;
											}
										} while (0);
										var $37 = $p;
										var $38 = HEAP8[($37)];
										var $conv12 = (tempInt = (($38)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp13 = ((($conv12)) | 0) != 0;
										if ($cmp13) {
											__label__ = 10;
											continue $while_body$16;
										} else {
											__label__ = 31;
											break $while_body$$if_end60$15;
										}
									}
								}
							} while (0);
							var $_pr = $score;
							var $cmp61 = ((($_pr)) | 0) == 0;
							if (!($cmp61)) {
								__label__ = 33;
								break $if_end60_thread$$if_else$8;
							}
							$retval = 0;
							__label__ = 63;
							break $if_then$$if_end4$2;
						}
					} while (0);
					var $52 = $voice_spec_addr;
					var $name = (($52) & 4294967295);
					var $53 = HEAP32[(($name) >> 2)];
					var $cmp64 = ((($53)) | 0) != 0;
					if ($cmp64) {
						__label__ = 34;;
					} else {
						__label__ = 38;;
					}
					$if_then65$$if_end81$50: do {
						if (__label__ == 34) {
							var $54 = $voice_spec_addr;
							var $name66 = (($54) & 4294967295);
							var $55 = HEAP32[(($name66) >> 2)];
							var $56 = $voice_addr;
							var $name67 = (($56) & 4294967295);
							var $57 = HEAP32[(($name67) >> 2)];
							var $call68 = _strcmp($55, $57);
							var $cmp69 = ((($call68)) | 0) == 0;
							if ($cmp69) {
								__label__ = 35;;
							} else {
								__label__ = 36;;
							}
							if (__label__ == 35) {
								var $58 = $score;
								var $add71 = ((($58) + 500) & 4294967295);
								$score = $add71;;
							} else if (__label__ == 36) {
								var $59 = $voice_spec_addr;
								var $name73 = (($59) & 4294967295);
								var $60 = HEAP32[(($name73) >> 2)];
								var $61 = $voice_addr;
								var $identifier74 = (($61 + 8) & 4294967295);
								var $62 = HEAP32[(($identifier74) >> 2)];
								var $call75 = _strcmp($60, $62);
								var $cmp76 = ((($call75)) | 0) == 0;
								if (!($cmp76)) {
									__label__ = 38;
									break $if_then65$$if_end81$50;
								}
								var $63 = $score;
								var $add78 = ((($63) + 400) & 4294967295);
								$score = $add78;;
							}
						}
					} while (0);
					var $64 = $voice_spec_addr;
					var $gender = (($64 + 12) & 4294967295);
					var $65 = HEAPU8[($gender)];
					var $conv82 = ((($65)) & 255);
					var $cmp83 = ((($conv82)) | 0) == 1;
					if ($cmp83) {
						__label__ = 40;;
					} else {
						__label__ = 39;;
					}
					$land_lhs_true88$$lor_lhs_false84$57: do {
						if (__label__ == 39) {
							var $66 = $voice_spec_addr;
							var $gender85 = (($66 + 12) & 4294967295);
							var $67 = HEAPU8[($gender85)];
							var $conv86 = ((($67)) & 255);
							var $cmp87 = ((($conv86)) | 0) == 2;
							if ($cmp87) {
								__label__ = 40;
								break $land_lhs_true88$$lor_lhs_false84$57;
							} else {
								__label__ = 45;
								break $land_lhs_true88$$lor_lhs_false84$57;
							}
						}
					} while (0);
					$land_lhs_true88$$if_end107$59: do {
						if (__label__ == 40) {
							var $68 = $voice_addr;
							var $gender89 = (($68 + 12) & 4294967295);
							var $69 = HEAPU8[($gender89)];
							var $conv90 = ((($69)) & 255);
							var $cmp91 = ((($conv90)) | 0) == 1;
							if ($cmp91) {
								__label__ = 42;;
							} else {
								__label__ = 41;;
							}
							if (__label__ == 41) {
								var $70 = $voice_addr;
								var $gender93 = (($70 + 12) & 4294967295);
								var $71 = HEAPU8[($gender93)];
								var $conv94 = ((($71)) & 255);
								var $cmp95 = ((($conv94)) | 0) == 2;
								if (!($cmp95)) {
									__label__ = 45;
									break $land_lhs_true88$$if_end107$59;
								}
							}
							var $72 = $voice_spec_addr;
							var $gender97 = (($72 + 12) & 4294967295);
							var $73 = HEAPU8[($gender97)];
							var $conv98 = ((($73)) & 255);
							var $74 = $voice_addr;
							var $gender99 = (($74 + 12) & 4294967295);
							var $75 = HEAPU8[($gender99)];
							var $conv100 = ((($75)) & 255);
							var $cmp101 = ((($conv98)) | 0) == ((($conv100)) | 0);
							var $76 = $score;
							if ($cmp101) {
								__label__ = 43;;
							} else {
								__label__ = 44;;
							}
							if (__label__ == 43) {
								var $add103 = ((($76) + 50) & 4294967295);
								$score = $add103;;
							} else if (__label__ == 44) {
								var $sub105 = ((($76) - 50) & 4294967295);
								$score = $sub105;;
							}
						}
					} while (0);
					var $77 = $voice_spec_addr;
					var $age = (($77 + 13) & 4294967295);
					var $78 = HEAPU8[($age)];
					var $conv108 = ((($78)) & 255);
					var $cmp109 = ((($conv108)) | 0) <= 12;
					if ($cmp109) {
						__label__ = 46;;
					} else {
						__label__ = 49;;
					}
					$land_lhs_true110$$if_end120$68: do {
						if (__label__ == 46) {
							var $79 = $voice_addr;
							var $gender111 = (($79 + 12) & 4294967295);
							var $80 = HEAPU8[($gender111)];
							var $conv112 = ((($80)) & 255);
							var $cmp113 = ((($conv112)) | 0) == 2;
							if (!($cmp113)) {
								__label__ = 49;
								break $land_lhs_true110$$if_end120$68;
							}
							var $81 = $voice_addr;
							var $age115 = (($81 + 13) & 4294967295);
							var $82 = HEAPU8[($age115)];
							var $conv116 = ((($82)) & 255);
							var $cmp117 = ((($conv116)) | 0) > 12;
							if (!($cmp117)) {
								__label__ = 49;
								break $land_lhs_true110$$if_end120$68;
							}
							var $83 = $score;
							var $add119 = ((($83) + 5) & 4294967295);
							$score = $add119;;
						}
					} while (0);
					var $84 = $voice_addr;
					var $age121 = (($84 + 13) & 4294967295);
					var $85 = HEAPU8[($age121)];
					var $conv122 = ((($85)) & 255);
					var $cmp123 = ((($conv122)) | 0) != 0;
					if ($cmp123) {
						__label__ = 50;;
					} else {
						__label__ = 59;;
					}
					$if_then124$$if_end153thread_pre_split$73: do {
						if (__label__ == 50) {
							var $86 = $voice_spec_addr;
							var $age125 = (($86 + 13) & 4294967295);
							var $87 = HEAPU8[($age125)];
							var $conv126 = ((($87)) & 255);
							var $cmp127 = ((($conv126)) | 0) == 0;
							if ($cmp127) {
								__label__ = 51;;
							} else {
								__label__ = 52;;
							}
							if (__label__ == 51) {
								$required_age = 30;;
							} else if (__label__ == 52) {
								var $88 = $voice_spec_addr;
								var $age130 = (($88 + 13) & 4294967295);
								var $89 = HEAPU8[($age130)];
								var $conv131 = ((($89)) & 255);
								$required_age = $conv131;;
							}
							var $90 = $required_age;
							var $mul133 = ((($90) * 100) & 4294967295);
							var $91 = $voice_addr;
							var $age134 = (($91 + 13) & 4294967295);
							var $92 = HEAPU8[($age134)];
							var $conv135 = ((($92)) & 255);
							var $div = ((((($mul133)) | 0) / ((($conv135)) | 0)) | 0);
							$ratio = $div;
							var $cmp136 = ((($div)) | 0) < 100;
							if ($cmp136) {
								__label__ = 54;;
							} else {
								__label__ = 55;;
							}
							if (__label__ == 54) {
								var $93 = $ratio;
								var $div138 = ((10000 / ((($93)) | 0)) | 0);
								$ratio = $div138;;
							}
							var $94 = $ratio;
							var $sub140 = ((($94) - 100) & 4294967295);
							var $div141 = ((((($sub140)) | 0) / 10) | 0);
							$ratio = $div141;
							var $95 = $ratio;
							var $sub142 = ((5 - ($95)) & 4294967295);
							$x = $sub142;
							var $cmp143 = ((($sub142)) | 0) > 0;
							if ($cmp143) {
								__label__ = 56;;
							} else {
								__label__ = 57;;
							}
							if (__label__ == 56) {
								$x = 0;;
							}
							var $96 = $score;
							var $97 = $x;
							var $add146 = ((($97) + ($96)) & 4294967295);
							$score = $add146;
							var $98 = $voice_spec_addr;
							var $age147 = (($98 + 13) & 4294967295);
							var $99 = HEAPU8[($age147)];
							var $conv148 = ((($99)) & 255);
							var $cmp149 = ((($conv148)) | 0) > 0;
							if (!($cmp149)) {
								__label__ = 59;
								break $if_then124$$if_end153thread_pre_split$73;
							}
							var $100 = $score;
							var $add151 = ((($100) + 10) & 4294967295);
							$score = $add151;
							__lastLabel__ = 58;
							__label__ = 60;
							break $if_then124$$if_end153thread_pre_split$73;
						}
					} while (0);
					if (__label__ == 59) {
						var $_pr2 = $score;
						__lastLabel__ = 59;;
					}
					var $101 = __lastLabel__ == 59 ? $_pr2 : ($add151);
					var $cmp154 = ((($101)) | 0) < 1;
					if ($cmp154) {
						__label__ = 61;;
					} else {
						__label__ = 62;;
					}
					if (__label__ == 61) {
						$score = 1;;
					}
					var $102 = $score;
					$retval = $102;;
				}
			} while (0);
			var $103 = $retval;;
			return $103;
			return null;
		}

		function __ZL16VoiceScoreSorterPKvS0_($p1, $p2) {;
			var __label__;
			var $retval;
			var $p1_addr;
			var $p2_addr;
			var $ix;
			var $v1;
			var $v2;
			$p1_addr = $p1;
			$p2_addr = $p2;
			var $0 = $p1_addr;
			var $1 = $0;
			var $2 = HEAP32[(($1) >> 2)];
			$v1 = $2;
			var $3 = $p2_addr;
			var $4 = $3;
			var $5 = HEAP32[(($4) >> 2)];
			$v2 = $5;
			var $6 = $v2;
			var $score = (($6 + 16) & 4294967295);
			var $7 = HEAP32[(($score) >> 2)];
			var $8 = $v1;
			var $score1 = (($8 + 16) & 4294967295);
			var $9 = HEAP32[(($score1) >> 2)];
			var $sub = ((($7) - ($9)) & 4294967295);
			$ix = $sub;
			var $cmp = ((($sub)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $10 = $ix;
				$retval = $10;;
			} else if (__label__ == 2) {
				var $11 = $v1;
				var $name = (($11) & 4294967295);
				var $12 = HEAP32[(($name) >> 2)];
				var $13 = $v2;
				var $name2 = (($13) & 4294967295);
				var $14 = HEAP32[(($name2) >> 2)];
				var $call = _strcmp($12, $14);
				$retval = $call;;
			}
			var $15 = $retval;;
			return $15;
			return null;
		}

		function __Z9WcmdqStopv() {;
			var __label__;
			HEAP32[((_wcmdq_head) >> 2)] = 0;
			HEAP32[((_wcmdq_tail) >> 2)] = 0;
			var $0 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
				_sonicDestroyStream($1);
				HEAP32[((__ZL18sonicSpeedupStream) >> 2)] = 0;;
			}
			var $2 = HEAP8[(((_mbrola_name) & 4294967295))];
			var $conv = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
			var $cmp1 = ((($conv)) | 0) != 0;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				__Z11MbrolaResetv();;
			};
			return;
			return;
		}

		function __Z9WcmdqFreev() {;
			var __label__;
			var $i;
			var $0 = HEAP32[((_wcmdq_head) >> 2)];
			var $1 = HEAP32[((_wcmdq_tail) >> 2)];
			var $sub = ((($0) - ($1)) & 4294967295);
			$i = $sub;
			var $2 = $i;
			var $cmp = ((($2)) | 0) <= 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $3 = $i;
				var $add = ((($3) + 160) & 4294967295);
				$i = $add;;
			}
			var $4 = $i;;
			return $4;
			return null;
		}

		function __Z9WcmdqUsedv() {;
			var __label__;
			var $call = __Z9WcmdqFreev();
			var $sub = ((160 - ($call)) & 4294967295);;
			return $sub;
			return null;
		}

		function __Z8WcmdqIncv() {;
			var __label__;
			var $0 = HEAP32[((_wcmdq_tail) >> 2)];
			var $inc = ((($0) + 1) & 4294967295);
			HEAP32[((_wcmdq_tail) >> 2)] = $inc;
			var $cmp = ((($inc)) | 0) >= 160;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((_wcmdq_tail) >> 2)] = 0;;
			};
			return;
			return;
		}

		function __Z16WavegenOpenSoundv() {;
			var __label__;;
			return 0;
			return null;
		}

		function __Z17WavegenCloseSoundv() {;
			var __label__;;
			return 0;
			return null;
		}

		function __Z16WavegenInitSoundv() {;
			var __label__;;
			return 0;
			return null;
		}

		function __Z11WavegenInitii($rate, $wavemult_fact) {;
			var __label__;
			var $rate_addr;
			var $wavemult_fact_addr;
			var $ix;
			var $x;
			$rate_addr = $rate;
			$wavemult_fact_addr = $wavemult_fact;
			var $0 = $wavemult_fact_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$wavemult_fact_addr = 60;;
			}
			HEAP32[((_wvoice) >> 2)] = 0;
			var $1 = $rate_addr;
			HEAP32[((_samplerate_native) >> 2)] = $1;
			HEAP32[((_samplerate) >> 2)] = $1;
			var $2 = HEAP32[((_samplerate) >> 2)];
			var $div = ((134217728 / ((($2)) | 0)) | 0);
			HEAP32[((__ZL16PHASE_INC_FACTOR) >> 2)] = $div;
			var $3 = HEAP32[((_samplerate) >> 2)];
			var $mul = ((($3) * 64) & 4294967295);
			var $4 = $rate_addr;
			var $div1 = ((((($mul)) | 0) / ((($4)) | 0)) | 0);
			HEAP32[((__ZL11Flutter_inc) >> 2)] = $div1;
			HEAP32[((__ZL11samplecount) >> 2)] = 0;
			HEAP32[((__ZL8nsamples) >> 2)] = 0;
			HEAP32[((__ZL9wavephase) >> 2)] = 2147483647;
			HEAP32[((((_wdata + 52) & 4294967295)) >> 2)] = 32;
			HEAP32[((((_wdata + 60) & 4294967295)) >> 2)] = 100;
			$ix = 0;;
			$for_body$5: while (1) {
				var $5 = $ix;
				var $arrayidx = ((_embedded_default + $5 * 4) & 4294967295);
				var $6 = HEAP32[(($arrayidx) >> 2)];
				var $7 = $ix;
				var $arrayidx3 = ((_embedded_value + $7 * 4) & 4294967295);
				HEAP32[(($arrayidx3) >> 2)] = $6;
				var $8 = $ix;
				var $inc = ((($8) + 1) & 4294967295);
				$ix = $inc;
				var $cmp2 = ((($inc)) | 0) < 15;
				if ($cmp2) {
					__label__ = 3;
					continue $for_body$5;
				} else {
					__label__ = 4;
					break $for_body$5;
				}
			}
			var $9 = HEAP32[((_samplerate) >> 2)];
			var $10 = $wavemult_fact_addr;
			var $mul4 = ((($10) * ($9)) & 4294967295);
			var $div5 = ((((($mul4)) | 0) / 12800) | 0);
			HEAP32[((__ZL12wavemult_max) >> 2)] = $div5;
			var $11 = HEAP32[((__ZL12wavemult_max) >> 2)];
			var $cmp6 = ((($11)) | 0) > 128;
			if ($cmp6) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				HEAP32[((__ZL12wavemult_max) >> 2)] = 128;;
			}
			var $12 = HEAP32[((__ZL12wavemult_max) >> 2)];
			var $div9 = ((((($12)) | 0) / 2) | 0);
			HEAP32[((__ZL15wavemult_offset) >> 2)] = $div9;
			var $13 = HEAP32[((_samplerate) >> 2)];
			var $cmp10 = ((($13)) | 0) != 22050;
			if ($cmp10) {
				__label__ = 7;;
			} else {
				__label__ = 9;;
			}
			$if_then11$$if_end25$11: do {
				if (__label__ == 7) {
					$ix = 0;
					var $14 = $ix;
					var $15 = HEAP32[((__ZL12wavemult_max) >> 2)];
					var $cmp131 = ((($14)) | 0) < ((($15)) | 0);
					if (!($cmp131)) {
						__label__ = 9;
						break $if_then11$$if_end25$11;
					}
					while (1) {
						var $16 = $ix;
						var $conv = ((($16)) | 0);
						var $mul15 = 6.283185307 * ($conv);
						var $17 = HEAP32[((__ZL12wavemult_max) >> 2)];
						var $conv16 = ((($17)) | 0);
						var $div17 = ($mul15) / ($conv16);
						var $call = _cos($div17);
						var $sub = 1 - ($call);
						var $mul18 = 127 * ($sub);
						$x = $mul18;
						var $18 = $x;
						var $conv19 = ((($18)) | 0);
						var $conv20 = ((($conv19)) & 255);
						var $19 = $ix;
						var $arrayidx21 = ((__ZL8wavemult + $19) & 4294967295);
						HEAP8[($arrayidx21)] = $conv20;
						var $20 = $ix;
						var $inc23 = ((($20) + 1) & 4294967295);
						$ix = $inc23;
						var $21 = $ix;
						var $22 = HEAP32[((__ZL12wavemult_max) >> 2)];
						var $cmp13 = ((($21)) | 0) < ((($22)) | 0);
						if ($cmp13) {
							__label__ = 8;
							continue;
						} else {
							__label__ = 9;
							break $if_then11$$if_end25$11;
						}
					}
				}
			} while (0);
			__ZL17WavegenInitPkDatai(1);
			__ZL17WavegenInitPkDatai(0);
			HEAP32[((__ZL8pk_shape) >> 2)] = ((__ZL9pk_shape2) & 4294967295);
			__Z9KlattInitv();;
			return;
			return;
		}

		function __ZL17WavegenInitPkDatai($which) {;
			var __label__;;
			return;
			return;
		}

		function __Z12GetAmplitudev() {;
			var __label__;
			var $amp;
			var $0 = HEAP32[((((_embedded_value + 12) & 4294967295)) >> 2)];
			var $mul = ((($0) * 55) & 4294967295);
			var $div = ((((($mul)) | 0) / 100) | 0);
			$amp = $div;
			var $1 = $amp;
			var $2 = HEAP32[((((_embedded_value + 52) & 4294967295)) >> 2)];
			var $arrayidx = ((__ZZ12GetAmplitudevE12amp_emphasis + $2) & 4294967295);
			var $3 = HEAPU8[($arrayidx)];
			var $conv = ((($3)) & 255);
			var $mul1 = ((($conv) * ($1)) & 4294967295);
			var $div2 = ((((($mul1)) | 0) / 16) | 0);
			HEAP32[((__ZL17general_amplitude) >> 2)] = $div2;
			var $4 = HEAP32[((__ZL17general_amplitude) >> 2)];;
			return $4;
			return null;
		}

		function __Z16PeaksToHarmspectP15wavegen_peaks_tiPii($peaks, $pitch, $htab, $control) {;
			var __label__;
			var $retval;
			var $peaks_addr;
			var $pitch_addr;
			var $htab_addr;
			var $control_addr;
			var $f;
			var $p;
			var $fp;
			var $fhi;
			var $h;
			var $pk;
			var $hmax;
			var $hmax_samplerate;
			var $x;
			var $ix;
			var $h1;
			var $y;
			var $h2;
			$peaks_addr = $peaks;
			$pitch_addr = $pitch;
			$htab_addr = $htab;
			$control_addr = $control;
			var $0 = HEAP32[((_wvoice) >> 2)];
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $1 = HEAP32[((_wvoice) >> 2)];
				var $n_harmonic_peaks = (($1 + 84) & 4294967295);
				var $2 = HEAP32[(($n_harmonic_peaks) >> 2)];
				var $3 = $peaks_addr;
				var $arrayidx = (($3 + 80 * $2) & 4294967295);
				var $freq = (($arrayidx) & 4294967295);
				var $4 = HEAP32[(($freq) >> 2)];
				var $5 = HEAP32[((_wvoice) >> 2)];
				var $n_harmonic_peaks1 = (($5 + 84) & 4294967295);
				var $6 = HEAP32[(($n_harmonic_peaks1) >> 2)];
				var $7 = $peaks_addr;
				var $arrayidx2 = (($7 + 80 * $6) & 4294967295);
				var $right = (($arrayidx2 + 12) & 4294967295);
				var $8 = HEAP32[(($right) >> 2)];
				var $add = ((($8) + ($4)) & 4294967295);
				var $9 = $pitch_addr;
				var $div = ((((($add)) | 0) / ((($9)) | 0)) | 0);
				$hmax = $div;
				var $10 = $hmax;
				var $cmp3 = ((($10)) | 0) >= 400;
				if ($cmp3) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					$hmax = 399;;
				}
				var $11 = HEAP32[((_samplerate) >> 2)];
				var $mul = ((($11) * 19) & 4294967295);
				var $div6 = ((((($mul)) | 0) / 40) | 0);
				var $shl = ($div6) << 16;
				var $12 = $pitch_addr;
				var $div7 = ((((($shl)) | 0) / ((($12)) | 0)) | 0);
				$hmax_samplerate = $div7;
				var $13 = $hmax;
				var $14 = $hmax_samplerate;
				var $cmp8 = ((($13)) | 0) > ((($14)) | 0);
				if ($cmp8) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $15 = $hmax_samplerate;
					$hmax = $15;;
				}
				$h = 0;
				var $16 = $h;
				var $17 = $hmax;
				var $cmp118 = ((($16)) | 0) <= ((($17)) | 0);
				if ($cmp118) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				$for_body$$for_end$11: do {
					if (__label__ == 7) {
						while (1) {
							var $18 = $h;
							var $19 = $htab_addr;
							var $arrayidx12 = (($19 + 4 * $18) & 4294967295);
							HEAP32[(($arrayidx12) >> 2)] = 0;
							var $20 = $h;
							var $inc = ((($20) + 1) & 4294967295);
							$h = $inc;
							var $21 = $h;
							var $22 = $hmax;
							var $cmp11 = ((($21)) | 0) <= ((($22)) | 0);
							if ($cmp11) {
								__label__ = 7;
								continue;
							} else {
								__label__ = 8;
								break $for_body$$for_end$11;
							}
						}
					}
				} while (0);
				$h = 0;
				$pk = 0;
				var $23 = $pk;
				var $24 = HEAP32[((_wvoice) >> 2)];
				var $n_harmonic_peaks146 = (($24 + 84) & 4294967295);
				var $25 = HEAP32[(($n_harmonic_peaks146) >> 2)];
				var $cmp157 = ((($23)) | 0) <= ((($25)) | 0);
				if ($cmp157) {
					__label__ = 9;;
				} else {
					__label__ = 18;;
				}
				$for_body16$$for_end67$15: do {
					if (__label__ == 9) {
						$for_body16$16: while (1) {
							var $26 = $pk;
							var $27 = $peaks_addr;
							var $arrayidx17 = (($27 + 80 * $26) & 4294967295);
							$p = $arrayidx17;
							var $28 = $p;
							var $height = (($28 + 4) & 4294967295);
							var $29 = HEAP32[(($height) >> 2)];
							var $cmp18 = ((($29)) | 0) == 0;
							if ($cmp18) {
								__label__ = 17;;
							} else {
								__label__ = 10;;
							}
							$for_inc65$$lor_lhs_false$18: do {
								if (__label__ == 10) {
									var $30 = $p;
									var $freq19 = (($30) & 4294967295);
									var $31 = HEAP32[(($freq19) >> 2)];
									$fp = $31;
									var $cmp20 = ((($31)) | 0) == 0;
									if ($cmp20) {
										__label__ = 17;
										break $for_inc65$$lor_lhs_false$18;
									}
									var $32 = $p;
									var $freq23 = (($32) & 4294967295);
									var $33 = HEAP32[(($freq23) >> 2)];
									var $34 = $p;
									var $right24 = (($34 + 12) & 4294967295);
									var $35 = HEAP32[(($right24) >> 2)];
									var $add25 = ((($35) + ($33)) & 4294967295);
									$fhi = $add25;
									var $36 = $p;
									var $freq26 = (($36) & 4294967295);
									var $37 = HEAP32[(($freq26) >> 2)];
									var $38 = $p;
									var $left = (($38 + 8) & 4294967295);
									var $39 = HEAP32[(($left) >> 2)];
									var $sub = ((($37) - ($39)) & 4294967295);
									var $40 = $pitch_addr;
									var $div27 = ((((($sub)) | 0) / ((($40)) | 0)) | 0);
									var $add28 = ((($div27) + 1) & 4294967295);
									$h = $add28;
									var $41 = $h;
									var $cmp29 = ((($41)) | 0) <= 0;
									if ($cmp29) {
										__label__ = 12;;
									} else {
										__label__ = 13;;
									}
									if (__label__ == 12) {
										$h = 1;;
									}
									var $42 = $pitch_addr;
									var $43 = $h;
									var $mul32 = ((($43) * ($42)) & 4294967295);
									$f = $mul32;
									var $44 = $f;
									var $45 = $fp;
									var $cmp344 = ((($44)) | 0) < ((($45)) | 0);
									if ($cmp344) {
										__label__ = 14;;
									} else {
										__label__ = 15;;
									}
									$for_body35$$for_cond48_loopexit$24: do {
										if (__label__ == 14) {
											while (1) {
												var $46 = $fp;
												var $47 = $f;
												var $sub36 = ((($46) - ($47)) & 4294967295);
												var $48 = $p;
												var $left37 = (($48 + 8) & 4294967295);
												var $49 = HEAP32[(($left37) >> 2)];
												var $shr = ($49) >> 8;
												var $div38 = ((((($sub36)) | 0) / ((($shr)) | 0)) | 0);
												var $50 = HEAP32[((__ZL8pk_shape) >> 2)];
												var $arrayidx39 = (($50 + $div38) & 4294967295);
												var $51 = HEAPU8[($arrayidx39)];
												var $conv = ((($51)) & 255);
												var $52 = $p;
												var $height40 = (($52 + 4) & 4294967295);
												var $53 = HEAP32[(($height40) >> 2)];
												var $mul41 = ((($53) * ($conv)) & 4294967295);
												var $54 = $h;
												var $inc42 = ((($54) + 1) & 4294967295);
												$h = $inc42;
												var $55 = $htab_addr;
												var $arrayidx43 = (($55 + 4 * $54) & 4294967295);
												var $56 = HEAP32[(($arrayidx43) >> 2)];
												var $add44 = ((($56) + ($mul41)) & 4294967295);
												HEAP32[(($arrayidx43) >> 2)] = $add44;
												var $57 = $pitch_addr;
												var $58 = $f;
												var $add46 = ((($58) + ($57)) & 4294967295);
												$f = $add46;
												var $59 = $f;
												var $60 = $fp;
												var $cmp34 = ((($59)) | 0) < ((($60)) | 0);
												if ($cmp34) {
													__label__ = 14;
													continue;
												} else {
													__label__ = 15;
													break $for_body35$$for_cond48_loopexit$24;
												}
											}
										}
									} while (0);
									var $61 = $f;
									var $62 = $fhi;
									var $cmp495 = ((($61)) | 0) < ((($62)) | 0);
									if (!($cmp495)) {
										__label__ = 17;
										break $for_inc65$$lor_lhs_false$18;
									}
									while (1) {
										var $63 = $f;
										var $64 = $fp;
										var $sub51 = ((($63) - ($64)) & 4294967295);
										var $65 = $p;
										var $right52 = (($65 + 12) & 4294967295);
										var $66 = HEAP32[(($right52) >> 2)];
										var $shr53 = ($66) >> 8;
										var $div54 = ((((($sub51)) | 0) / ((($shr53)) | 0)) | 0);
										var $67 = HEAP32[((__ZL8pk_shape) >> 2)];
										var $arrayidx55 = (($67 + $div54) & 4294967295);
										var $68 = HEAPU8[($arrayidx55)];
										var $conv56 = ((($68)) & 255);
										var $69 = $p;
										var $height57 = (($69 + 4) & 4294967295);
										var $70 = HEAP32[(($height57) >> 2)];
										var $mul58 = ((($70) * ($conv56)) & 4294967295);
										var $71 = $h;
										var $inc59 = ((($71) + 1) & 4294967295);
										$h = $inc59;
										var $72 = $htab_addr;
										var $arrayidx60 = (($72 + 4 * $71) & 4294967295);
										var $73 = HEAP32[(($arrayidx60) >> 2)];
										var $add61 = ((($73) + ($mul58)) & 4294967295);
										HEAP32[(($arrayidx60) >> 2)] = $add61;
										var $74 = $pitch_addr;
										var $75 = $f;
										var $add63 = ((($75) + ($74)) & 4294967295);
										$f = $add63;
										var $76 = $f;
										var $77 = $fhi;
										var $cmp49 = ((($76)) | 0) < ((($77)) | 0);
										if ($cmp49) {
											__label__ = 16;
											continue;
										} else {
											__label__ = 17;
											break $for_inc65$$lor_lhs_false$18;
										}
									}
								}
							} while (0);
							var $78 = $pk;
							var $inc66 = ((($78) + 1) & 4294967295);
							$pk = $inc66;
							var $79 = $pk;
							var $80 = HEAP32[((_wvoice) >> 2)];
							var $n_harmonic_peaks14 = (($80 + 84) & 4294967295);
							var $81 = HEAP32[(($n_harmonic_peaks14) >> 2)];
							var $cmp15 = ((($79)) | 0) <= ((($81)) | 0);
							if ($cmp15) {
								__label__ = 9;
								continue $for_body16$16;
							} else {
								__label__ = 18;
								break $for_body16$$for_end67$15;
							}
						}
					}
				} while (0);
				var $82 = $peaks_addr;
				var $arrayidx68 = (($82 + 80) & 4294967295);
				var $height69 = (($arrayidx68 + 4) & 4294967295);
				var $83 = HEAP32[(($height69) >> 2)];
				var $mul70 = ((($83) * 10) & 4294967295);
				$y = $mul70;
				var $84 = $pitch_addr;
				var $div71 = ((65536000 / ((($84)) | 0)) | 0);
				$h2 = $div71;
				var $cmp72 = ((($div71)) | 0) > 0;
				if ($cmp72) {
					__label__ = 19;;
				} else {
					__label__ = 21;;
				}
				$if_then73$$for_cond81thread_pre_split$32: do {
					if (__label__ == 19) {
						var $85 = $y;
						var $86 = $h2;
						var $div74 = ((((($85)) | 0) / ((($86)) | 0)) | 0);
						$x = $div74;
						$h = 1;
						var $cmp753 = ((($85)) | 0) > 0;
						if (!($cmp753)) {
							__label__ = 21;
							break $if_then73$$for_cond81thread_pre_split$32;
						}
						while (1) {
							var $87 = $y;
							var $88 = $h;
							var $inc76 = ((($88) + 1) & 4294967295);
							$h = $inc76;
							var $89 = $htab_addr;
							var $arrayidx77 = (($89 + 4 * $88) & 4294967295);
							var $90 = HEAP32[(($arrayidx77) >> 2)];
							var $add78 = ((($90) + ($87)) & 4294967295);
							HEAP32[(($arrayidx77) >> 2)] = $add78;
							var $91 = $x;
							var $92 = $y;
							var $sub79 = ((($92) - ($91)) & 4294967295);
							$y = $sub79;
							var $cmp75 = ((($sub79)) | 0) > 0;
							if ($cmp75) {
								__label__ = 20;
								continue;
							} else {
								__label__ = 21;
								break $if_then73$$for_cond81thread_pre_split$32;
							}
						}
					}
				} while (0);
				var $_pr = $pk;
				var $cmp822 = ((($_pr)) | 0) < 9;
				if ($cmp822) {
					__label__ = 22;;
				} else {
					__label__ = 27;;
				}
				$for_body83$$for_end105$37: do {
					if (__label__ == 22) {
						while (1) {
							var $93 = $pk;
							var $94 = $peaks_addr;
							var $arrayidx84 = (($94 + 80 * $93) & 4294967295);
							var $height85 = (($arrayidx84 + 4) & 4294967295);
							var $95 = HEAP32[(($height85) >> 2)];
							var $shr86 = ($95) >> 14;
							$x = $shr86;
							var $96 = $x;
							var $97 = $x;
							var $mul87 = ((($96) * 5) & 4294967295);
							var $mul88 = ((($mul87) * ($97)) & 4294967295);
							var $div89 = ((((($mul88)) | 0) / 2) | 0);
							var $98 = $pk;
							var $arrayidx90 = ((__ZL11peak_height + $98 * 4) & 4294967295);
							HEAP32[(($arrayidx90) >> 2)] = $div89;
							var $99 = $control_addr;
							var $cmp91 = ((($99)) | 0) == 0;
							if ($cmp91) {
								__label__ = 23;;
							} else {
								__label__ = 24;;
							}
							if (__label__ == 23) {
								var $100 = $pk;
								var $101 = $peaks_addr;
								var $arrayidx93 = (($101 + 80 * $100) & 4294967295);
								var $freq94 = (($arrayidx93) & 4294967295);
								var $102 = HEAP32[(($freq94) >> 2)];
								var $103 = $pitch_addr;
								var $div95 = ((((($102)) | 0) / ((($103)) | 0)) | 0);
								var $104 = $pk;
								var $arrayidx96 = ((__ZL13peak_harmonic + $104 * 4) & 4294967295);
								HEAP32[(($arrayidx96) >> 2)] = $div95;;
							}
							var $105 = $pk;
							var $arrayidx98 = ((__ZL13peak_harmonic + $105 * 4) & 4294967295);
							var $106 = HEAP32[(($arrayidx98) >> 2)];
							var $107 = $hmax_samplerate;
							var $cmp99 = ((($106)) | 0) >= ((($107)) | 0);
							if ($cmp99) {
								__label__ = 25;;
							} else {
								__label__ = 26;;
							}
							if (__label__ == 25) {
								var $108 = $pk;
								var $arrayidx101 = ((__ZL11peak_height + $108 * 4) & 4294967295);
								HEAP32[(($arrayidx101) >> 2)] = 0;;
							}
							var $109 = $pk;
							var $inc104 = ((($109) + 1) & 4294967295);
							$pk = $inc104;
							var $cmp82 = ((($inc104)) | 0) < 9;
							if ($cmp82) {
								__label__ = 22;
								continue;
							} else {
								__label__ = 27;
								break $for_body83$$for_end105$37;
							}
						}
					}
				} while (0);
				$f = 0;
				$h = 0;
				var $110 = $h;
				var $111 = $hmax;
				var $cmp1071 = ((($110)) | 0) <= ((($111)) | 0);
				if ($cmp1071) {
					__label__ = 28;;
				} else {
					__label__ = 31;;
				}
				$for_body108$$for_end127$47: do {
					if (__label__ == 28) {
						while (1) {
							var $112 = $h;
							var $113 = $htab_addr;
							var $arrayidx109 = (($113 + 4 * $112) & 4294967295);
							var $114 = HEAP32[(($arrayidx109) >> 2)];
							var $shr110 = ($114) >> 15;
							$x = $shr110;
							var $115 = $x;
							var $116 = $x;
							var $mul111 = ((($116) * ($115)) & 4294967295);
							var $shr112 = ($mul111) >> 8;
							var $117 = $h;
							var $118 = $htab_addr;
							var $arrayidx113 = (($118 + 4 * $117) & 4294967295);
							HEAP32[(($arrayidx113) >> 2)] = $shr112;
							var $119 = $f;
							var $shr114 = ($119) >> 19;
							$ix = $shr114;
							var $cmp115 = ((($shr114)) | 0) < 1000;
							if ($cmp115) {
								__label__ = 29;;
							} else {
								__label__ = 30;;
							}
							if (__label__ == 29) {
								var $120 = $h;
								var $121 = $htab_addr;
								var $arrayidx117 = (($121 + 4 * $120) & 4294967295);
								var $122 = HEAP32[(($arrayidx117) >> 2)];
								var $123 = $ix;
								var $124 = HEAP32[((_wvoice) >> 2)];
								var $tone_adjust = (($124 + 344) & 4294967295);
								var $arrayidx118 = (($tone_adjust + $123) & 4294967295);
								var $125 = HEAPU8[($arrayidx118)];
								var $conv119 = ((($125)) & 255);
								var $mul120 = ((($conv119) * ($122)) & 4294967295);
								var $shr121 = ($mul120) >> 13;
								var $126 = $h;
								var $127 = $htab_addr;
								var $arrayidx122 = (($127 + 4 * $126) & 4294967295);
								HEAP32[(($arrayidx122) >> 2)] = $shr121;;
							}
							var $128 = $h;
							var $inc125 = ((($128) + 1) & 4294967295);
							$h = $inc125;
							var $129 = $pitch_addr;
							var $130 = $f;
							var $add126 = ((($130) + ($129)) & 4294967295);
							$f = $add126;
							var $131 = $h;
							var $132 = $hmax;
							var $cmp107 = ((($131)) | 0) <= ((($132)) | 0);
							if ($cmp107) {
								__label__ = 28;
								continue;
							} else {
								__label__ = 31;
								break $for_body108$$for_end127$47;
							}
						}
					}
				} while (0);
				var $133 = $htab_addr;
				var $arrayidx128 = (($133 + 4) & 4294967295);
				var $134 = HEAP32[(($arrayidx128) >> 2)];
				var $_b = HEAPU8[(__ZL16option_harmonic1_b)];
				var $135 = ($_b) ? 6 : 10;
				var $mul129 = ((($135) * ($134)) & 4294967295);
				$h1 = $mul129;
				var $136 = $h1;
				var $div130 = ((((($136)) | 0) / 8) | 0);
				var $137 = $htab_addr;
				var $arrayidx131 = (($137 + 4) & 4294967295);
				HEAP32[(($arrayidx131) >> 2)] = $div130;
				var $138 = $control_addr;
				var $and = ($138) & 1;
				var $tobool = ((($and)) | 0) != 0;
				if ($tobool) {
					__label__ = 32;;
				} else {
					__label__ = 34;;
				}
				$if_then132$$if_end144$54: do {
					if (__label__ == 32) {
						$h = 1;;
						while (1) {
							var $139 = $h;
							var $140 = $htab_addr;
							var $arrayidx136 = (($140 + 4 * $139) & 4294967295);
							var $141 = HEAP32[(($arrayidx136) >> 2)];
							var $142 = $h;
							var $143 = HEAP32[((__ZL9harmspect) >> 2)];
							var $arrayidx137 = (($143 + 4 * $142) & 4294967295);
							var $144 = HEAP32[(($arrayidx137) >> 2)];
							var $sub138 = ((($141) - ($144)) & 4294967295);
							var $shr139 = ($sub138) >> 3;
							var $145 = $h;
							var $arrayidx140 = ((__ZL8harm_inc + $145 * 4) & 4294967295);
							HEAP32[(($arrayidx140) >> 2)] = $shr139;
							var $146 = $h;
							var $inc142 = ((($146) + 1) & 4294967295);
							$h = $inc142;
							var $cmp134 = ((($inc142)) | 0) < 30;
							if ($cmp134) {
								__label__ = 33;
								continue;
							} else {
								__label__ = 34;
								break $if_then132$$if_end144$54;
							}
						}
					}
				} while (0);
				var $147 = $hmax;
				$retval = $147;;
			}
			var $148 = $retval;;
			return $148;
			return null;
		}

		function __Z10InitBreathv() {;
			var __label__;
			var $ix;
			var $0 = HEAP32[((_samplerate) >> 2)];
			var $conv = ((($0)) | 0);
			var $div = -3.1415927 / ($conv);
			HEAPF32[((__ZL10minus_pi_t) >> 2)] = $div;
			var $1 = HEAPF32[((__ZL10minus_pi_t) >> 2)];
			var $mul = -2 * ($1);
			HEAPF32[((__ZL8two_pi_t) >> 2)] = $mul;
			$ix = 0;;
			while (1) {
				var $2 = $ix;
				var $arrayidx = ((__ZL7rbreath + $2 * 40) & 4294967295);
				__ZL12setresonatorP9RESONATORiii($arrayidx, 2000, 200, 1);
				var $3 = $ix;
				var $inc = ((($3) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 9;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			};
			return;
			return;
		}

		function __ZL12setresonatorP9RESONATORiii($rp, $freq, $bwidth, $init) {;
			var __label__;
			var $rp_addr;
			var $freq_addr;
			var $bwidth_addr;
			var $init_addr;
			var $x;
			var $arg;
			$rp_addr = $rp;
			$freq_addr = $freq;
			$bwidth_addr = $bwidth;
			$init_addr = $init;
			var $0 = $init_addr;
			var $tobool = ((($0)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $rp_addr;
				var $x1 = (($1 + 24) & 4294967295);
				HEAPF32[(($x1) >> 2)] = 0;
				var $2 = $rp_addr;
				var $x2 = (($2 + 32) & 4294967295);
				HEAPF32[(($x2) >> 2)] = 0;;
			}
			var $3 = HEAPF32[((__ZL10minus_pi_t) >> 2)];
			var $4 = $bwidth_addr;
			var $conv = ((($4)) | 0);
			var $mul = ($3) * ($conv);
			$arg = $mul;
			var $5 = $arg;
			var $call = _exp($5);
			$x = $call;
			var $6 = $x;
			var $7 = $x;
			var $mul1 = ($6) * ($7);
			var $sub = (-($mul1));
			var $8 = $rp_addr;
			var $c = (($8 + 16) & 4294967295);
			HEAPF32[(($c) >> 2)] = $sub;
			var $9 = HEAPF32[((__ZL8two_pi_t) >> 2)];
			var $10 = $freq_addr;
			var $conv2 = ((($10)) | 0);
			var $mul3 = ($9) * ($conv2);
			$arg = $mul3;
			var $11 = $x;
			var $12 = $arg;
			var $call4 = _cos($12);
			var $mul5 = ($11) * ($call4);
			var $mul6 = ($mul5) * 2;
			var $13 = $rp_addr;
			var $b = (($13 + 8) & 4294967295);
			HEAPF32[(($b) >> 2)] = $mul6;
			var $14 = $rp_addr;
			var $b7 = (($14 + 8) & 4294967295);
			var $15 = HEAPF32[(($b7) >> 2)];
			var $sub8 = 1 - ($15);
			var $16 = $rp_addr;
			var $c9 = (($16 + 16) & 4294967295);
			var $17 = HEAPF32[(($c9) >> 2)];
			var $sub10 = ($sub8) - ($17);
			var $18 = $rp_addr;
			var $a = (($18) & 4294967295);
			HEAPF32[(($a) >> 2)] = $sub10;;
			return;
			return;
		}

		function __Z7Wavegenv() {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $waveph;
			var $theta;
			var $total;
			var $h;
			var $ix;
			var $z;
			var $z1;
			var $z2;
			var $echo;
			var $ov;
			var $pk;
			var $c;
			var $sample;
			var $amp;
			var $modn_amp;
			var $modn_period;;
			$for_cond$2: while (1) {
				var $_b = HEAPU8[(__ZL8end_wave_b)];
				var $0 = ((($_b)) & 1);
				var $cmp = ((($0)) | 0) == 0;
				var $1 = HEAP32[((__ZL11samplecount) >> 2)];
				var $2 = HEAP32[((__ZL8nsamples) >> 2)];
				var $cmp1 = ((($1)) | 0) == ((($2)) | 0);
				var $or_cond3 = ($cmp) & ($cmp1);
				if ($or_cond3) {
					__label__ = 2;
					break $for_cond$2;
				}
				var $and = ($1) & 63;
				var $cmp2 = ((($and)) | 0) == 0;
				if ($cmp2) {
					__label__ = 4;;
				} else {
					__label__ = 8;;
				}
				$if_then3$$if_else19$5: do {
					if (__label__ == 4) {
						var $cmp4 = ((($1)) | 0) == 0;
						if ($cmp4) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							HEAP32[((__ZL7hswitch) >> 2)] = 0;
							HEAP32[((__ZL9harmspect) >> 2)] = ((__ZL6hspect) & 4294967295);
							var $3 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
							var $shl = ($3) << 4;
							var $call = __Z16PeaksToHarmspectP15wavegen_peaks_tiPii(((__ZL5peaks) & 4294967295), $shl, ((__ZL6hspect) & 4294967295), 0);
							HEAP32[((__ZZ7WavegenvE5maxh2) >> 2)] = $call;
							var $4 = HEAP32[((((_wdata + 52) & 4294967295)) >> 2)];
							var $5 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
							var $shr = ($5) >> 8;
							var $6 = HEAP32[((((_wdata + 60) & 4294967295)) >> 2)];
							var $mul = ((($6) * ($4)) & 4294967295);
							var $mul6 = ((($mul) * ($shr)) & 4294967295);
							var $div = ((((($mul6)) | 0) / 80000) | 0);
							HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div;
							var $7 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
							var $shr7 = ($7) >> 12;
							var $div8 = ((890 / ((($shr7)) | 0)) | 0);
							HEAP32[((__ZZ7WavegenvE13h_switch_sign) >> 2)] = $div8;;
						} else if (__label__ == 6) {
							__ZL17AdvanceParametersv();;
						}
						var $8 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
						var $shr10 = ($8) >> 7;
						var $9 = HEAP32[((__ZL16PHASE_INC_FACTOR) >> 2)];
						var $mul11 = ((($shr10) * ($9)) & 4294967295);
						HEAP32[((__ZL8phaseinc) >> 2)] = $mul11;
						var $10 = HEAP32[((_samplerate) >> 2)];
						var $11 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
						var $shr12 = ($11) >> 12;
						var $div13 = ((((($10)) | 0) / ((($shr12)) | 0)) | 0);
						HEAP32[((__ZL13cycle_samples) >> 2)] = $div13;
						var $12 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
						var $shr14 = ($12) >> 11;
						HEAP32[((__ZL9hf_factor) >> 2)] = $shr14;
						var $13 = HEAP32[((__ZZ7WavegenvE5maxh2) >> 2)];
						HEAP32[((__ZZ7WavegenvE4maxh) >> 2)] = $13;
						var $14 = HEAP32[((__ZL7hswitch) >> 2)];
						var $arrayidx = ((__ZL6hspect + $14 * 1600) & 4294967295);
						var $arraydecay = (($arrayidx) & 4294967295);
						HEAP32[((__ZL9harmspect) >> 2)] = $arraydecay;
						var $15 = HEAP32[((__ZL7hswitch) >> 2)];
						var $xor = ($15) ^ 1;
						HEAP32[((__ZL7hswitch) >> 2)] = $xor;
						var $16 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
						var $shl15 = ($16) << 4;
						var $17 = HEAP32[((__ZL7hswitch) >> 2)];
						var $arrayidx16 = ((__ZL6hspect + $17 * 1600) & 4294967295);
						var $arraydecay17 = (($arrayidx16) & 4294967295);
						var $call18 = __Z16PeaksToHarmspectP15wavegen_peaks_tiPii(((__ZL5peaks) & 4294967295), $shl15, $arraydecay17, 1);
						HEAP32[((__ZZ7WavegenvE5maxh2) >> 2)] = $call18;
						__ZL9SetBreathv();;
					} else if (__label__ == 8) {
						var $and20 = ($1) & 7;
						var $cmp21 = ((($and20)) | 0) == 0;
						if (!($cmp21)) {
							__label__ = 16;
							break $if_then3$$if_else19$5;
						}
						$h = 1;
						__lastLabel__ = 9;;
						while (1) {
							var $18 = __lastLabel__ == 13 ? $inc : (1);
							var $cmp24 = ((($18)) | 0) < 30;
							if (!($cmp24)) {
								__label__ = 14;
								break;
							}
							var $19 = $h;
							var $20 = HEAP32[((__ZZ7WavegenvE5maxh2) >> 2)];
							var $cmp26 = ((($19)) | 0) <= ((($20)) | 0);
							if (!($cmp26)) {
								__label__ = 14;
								break;
							}
							var $21 = $h;
							var $22 = HEAP32[((__ZZ7WavegenvE4maxh) >> 2)];
							var $cmp27 = ((($21)) | 0) <= ((($22)) | 0);
							if (!($cmp27)) {
								__label__ = 14;
								break;
							}
							var $23 = $h;
							var $arrayidx28 = ((__ZL8harm_inc + $23 * 4) & 4294967295);
							var $24 = HEAP32[(($arrayidx28) >> 2)];
							var $25 = $h;
							var $26 = HEAP32[((__ZL9harmspect) >> 2)];
							var $arrayidx29 = (($26 + 4 * $25) & 4294967295);
							var $27 = HEAP32[(($arrayidx29) >> 2)];
							var $add = ((($27) + ($24)) & 4294967295);
							HEAP32[(($arrayidx29) >> 2)] = $add;
							var $28 = $h;
							var $inc = ((($28) + 1) & 4294967295);
							$h = $inc;
							__lastLabel__ = 13;
							__label__ = 10;
							continue;
						}
						var $29 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
						var $cmp30 = ((($29)) | 0) < 256;
						if (!($cmp30)) {
							__label__ = 16;
							break $if_then3$$if_else19$5;
						}
						var $30 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
						var $inc32 = ((($30) + 1) & 4294967295);
						HEAP32[((__ZZ7WavegenvE3agc) >> 2)] = $inc32;;
					}
				} while (0);
				var $31 = HEAP32[((__ZL11samplecount) >> 2)];
				var $inc36 = ((($31) + 1) & 4294967295);
				HEAP32[((__ZL11samplecount) >> 2)] = $inc36;
				var $32 = HEAP32[((__ZL9wavephase) >> 2)];
				var $cmp37 = ((($32)) | 0) > 0;
				var $33 = HEAP32[((__ZL8phaseinc) >> 2)];
				var $34 = HEAP32[((__ZL9wavephase) >> 2)];
				var $add39 = ((($34) + ($33)) & 4294967295);
				HEAP32[((__ZL9wavephase) >> 2)] = $add39;
				var $35 = HEAP32[((__ZL9wavephase) >> 2)];
				var $cmp40 = ((($35)) | 0) < 0;
				var $or_cond = ($cmp37) & ($cmp40);
				if ($or_cond) {
					__label__ = 17;;
				} else {
					__label__ = 38;;
				}
				$if_then41$$if_end118$21: do {
					if (__label__ == 17) {
						var $36 = HEAP32[((__ZL15wavemult_offset) >> 2)];
						var $37 = HEAP32[((__ZL13cycle_samples) >> 2)];
						var $div42 = ((((($37)) | 0) / 2) | 0);
						var $sub = ((($36) - ($div42)) & 4294967295);
						HEAP32[((__ZL6cbytes) >> 2)] = $sub;
						var $38 = HEAP32[((__ZL11samplecount) >> 2)];
						var $39 = HEAP32[((__ZL8nsamples) >> 2)];
						var $cmp43 = ((($38)) | 0) > ((($39)) | 0);
						if ($cmp43) {
							__label__ = 18;
							break $for_cond$2;
						}
						var $40 = HEAP32[((__ZZ7WavegenvE11cycle_count) >> 2)];
						var $inc46 = ((($40) + 1) & 4294967295);
						HEAP32[((__ZZ7WavegenvE11cycle_count) >> 2)] = $inc46;
						var $41 = HEAP32[((_wvoice) >> 2)];
						var $n_harmonic_peaks = (($41 + 84) & 4294967295);
						var $42 = HEAP32[(($n_harmonic_peaks) >> 2)];
						var $add47 = ((($42) + 1) & 4294967295);
						$pk = $add47;
						var $cmp495 = ((($add47)) | 0) < 9;
						if ($cmp495) {
							__label__ = 20;;
						} else {
							__label__ = 21;;
						}
						$for_body50$$for_end57$24: do {
							if (__label__ == 20) {
								while (1) {
									var $43 = $pk;
									var $arrayidx51 = ((__ZL5peaks + $43 * 80) & 4294967295);
									var $freq = (($arrayidx51) & 4294967295);
									var $44 = HEAP32[(($freq) >> 2)];
									var $45 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
									var $mul52 = ((($45) * 16) & 4294967295);
									var $div53 = ((((($44)) | 0) / ((($mul52)) | 0)) | 0);
									var $46 = $pk;
									var $arrayidx54 = ((__ZL13peak_harmonic + $46 * 4) & 4294967295);
									HEAP32[(($arrayidx54) >> 2)] = $div53;
									var $47 = $pk;
									var $inc56 = ((($47) + 1) & 4294967295);
									$pk = $inc56;
									var $cmp49 = ((($inc56)) | 0) < 9;
									if ($cmp49) {
										__label__ = 20;
										continue;
									} else {
										__label__ = 21;
										break $for_body50$$for_end57$24;
									}
								}
							}
						} while (0);
						var $48 = HEAP32[((((_wdata + 52) & 4294967295)) >> 2)];
						var $49 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
						var $shr58 = ($49) >> 8;
						var $50 = HEAP32[((((_wdata + 60) & 4294967295)) >> 2)];
						var $mul59 = ((($50) * ($48)) & 4294967295);
						var $mul60 = ((($mul59) * ($shr58)) & 4294967295);
						var $div61 = ((((($mul60)) | 0) / 80000) | 0);
						HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div61;
						var $51 = HEAP32[((__ZL12glottal_flag) >> 2)];
						var $cmp62 = ((($51)) | 0) > 0;
						if ($cmp62) {
							__label__ = 22;;
						} else {
							__label__ = 28;;
						}
						$if_then63$$if_end81$28: do {
							if (__label__ == 22) {
								var $52 = HEAP32[((__ZL12glottal_flag) >> 2)];
								var $cmp64 = ((($52)) | 0) == 3;
								if ($cmp64) {
									__label__ = 23;;
								} else {
									__label__ = 25;;
								}
								if (__label__ == 23) {
									var $53 = HEAP32[((__ZL8nsamples) >> 2)];
									var $54 = HEAP32[((__ZL11samplecount) >> 2)];
									var $sub66 = ((($53) - ($54)) & 4294967295);
									var $55 = HEAP32[((__ZL13cycle_samples) >> 2)];
									var $mul67 = ((($55) * 2) & 4294967295);
									var $cmp68 = ((($sub66)) | 0) < ((($mul67)) | 0);
									if (!($cmp68)) {
										__label__ = 28;
										break $if_then63$$if_end81$28;
									}
									HEAP32[((__ZL12glottal_flag) >> 2)] = 2;
									var $56 = HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)];
									var $57 = HEAP32[((__ZL14glottal_reduce) >> 2)];
									var $mul70 = ((($57) * ($56)) & 4294967295);
									var $div71 = ((((($mul70)) | 0) / 256) | 0);
									HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div71;;
								} else if (__label__ == 25) {
									var $58 = HEAP32[((__ZL12glottal_flag) >> 2)];
									var $cmp74 = ((($58)) | 0) == 4;
									if ($cmp74) {
										__label__ = 26;;
									} else {
										__label__ = 27;;
									}
									if (__label__ == 26) {
										HEAP32[((__ZL12glottal_flag) >> 2)] = 2;
										var $59 = HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)];
										var $60 = HEAP32[((__ZL14glottal_reduce) >> 2)];
										var $mul76 = ((($60) * ($59)) & 4294967295);
										var $div77 = ((((($mul76)) | 0) / 256) | 0);
										HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div77;;
									} else if (__label__ == 27) {
										var $61 = HEAP32[((__ZL12glottal_flag) >> 2)];
										var $dec = ((($61) - 1) & 4294967295);
										HEAP32[((__ZL12glottal_flag) >> 2)] = $dec;;
									}
								}
							}
						} while (0);
						var $62 = HEAP32[((__ZL13amplitude_env) >> 2)];
						var $cmp82 = ((($62)) | 0) != 0;
						if ($cmp82) {
							__label__ = 29;;
						} else {
							__label__ = 32;;
						}
						if (__label__ == 29) {
							var $63 = HEAP32[((__ZL6amp_ix) >> 2)];
							var $shr84 = ($63) >> 8;
							$ix = $shr84;
							var $cmp85 = ((($shr84)) | 0) > 127;
							if ($cmp85) {
								__label__ = 30;;
							} else {
								__label__ = 31;;
							}
							if (__label__ == 30) {
								$ix = 127;;
							}
							var $64 = $ix;
							var $65 = HEAP32[((__ZL13amplitude_env) >> 2)];
							var $arrayidx88 = (($65 + $64) & 4294967295);
							var $66 = HEAPU8[($arrayidx88)];
							var $conv = ((($66)) & 255);
							$amp = $conv;
							var $67 = HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)];
							var $68 = $amp;
							var $mul89 = ((($68) * ($67)) & 4294967295);
							var $div90 = ((((($mul89)) | 0) / 128) | 0);
							HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div90;;
						}
						$modn_period = 0;
						var $69 = HEAP32[((_voice) >> 2)];
						var $roughness = (($69 + 72) & 4294967295);
						var $70 = HEAP32[(($roughness) >> 2)];
						var $cmp92 = ((($70)) | 0) < 8;
						if (!($cmp92)) {
							__label__ = 38;
							break $if_then41$$if_end118$21;
						}
						var $71 = HEAP32[((__ZL15modulation_type) >> 2)];
						var $72 = HEAP32[((_voice) >> 2)];
						var $roughness94 = (($72 + 72) & 4294967295);
						var $73 = HEAP32[(($roughness94) >> 2)];
						var $arrayidx95 = ((__ZL14modulation_tab + $73 * 8) & 4294967295);
						var $arrayidx96 = (($arrayidx95 + $71) & 4294967295);
						var $74 = HEAPU8[($arrayidx96)];
						var $conv97 = ((($74)) & 255);
						$modn_period = $conv97;
						var $75 = $modn_period;
						var $and98 = ($75) & 15;
						$modn_amp = $and98;
						var $76 = $modn_period;
						var $shr99 = ($76) >> 4;
						$modn_period = $shr99;
						var $cmp101 = ((($shr99)) | 0) != 0;
						if (!($cmp101)) {
							__label__ = 38;
							break $if_then41$$if_end118$21;
						}
						var $77 = $modn_period;
						var $cmp103 = ((($77)) | 0) == 15;
						if ($cmp103) {
							__label__ = 35;;
						} else {
							__label__ = 36;;
						}
						if (__label__ == 35) {
							var $78 = HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)];
							var $79 = $modn_amp;
							var $mul105 = ((($79) * ($78)) & 4294967295);
							var $div106 = ((((($mul105)) | 0) / 16) | 0);
							HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div106;
							HEAP32[((__ZL15modulation_type) >> 2)] = 0;;
						} else if (__label__ == 36) {
							var $80 = HEAP32[((__ZZ7WavegenvE11cycle_count) >> 2)];
							var $81 = $modn_period;
							var $rem = ((($80)) | 0) % ((($81)) | 0);
							var $cmp108 = ((($rem)) | 0) == 0;
							if (!($cmp108)) {
								__label__ = 38;
								break $if_then41$$if_end118$21;
							}
							var $82 = HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)];
							var $83 = $modn_amp;
							var $mul110 = ((($83) * ($82)) & 4294967295);
							var $div111 = ((((($mul110)) | 0) / 16) | 0);
							HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)] = $div111;;
						}
					}
				} while (0);
				var $84 = HEAP32[((__ZL9wavephase) >> 2)];
				var $shr119 = ($84) >> 16;
				var $conv120 = ((($shr119)) & 65535);
				$waveph = $conv120;
				$total = 0;
				var $85 = HEAP32[((__ZL6cbytes) >> 2)];
				var $inc121 = ((($85) + 1) & 4294967295);
				HEAP32[((__ZL6cbytes) >> 2)] = $inc121;
				var $cmp122 = ((($inc121)) | 0) >= 0;
				if ($cmp122) {
					__label__ = 39;;
				} else {
					__label__ = 43;;
				}
				$land_lhs_true123$$if_end149$51: do {
					if (__label__ == 39) {
						var $86 = HEAP32[((__ZL6cbytes) >> 2)];
						var $87 = HEAP32[((__ZL12wavemult_max) >> 2)];
						var $cmp124 = ((($86)) | 0) < ((($87)) | 0);
						if (!($cmp124)) {
							__label__ = 43;
							break $land_lhs_true123$$if_end149$51;
						}
						var $88 = HEAP32[((_wvoice) >> 2)];
						var $n_harmonic_peaks126 = (($88 + 84) & 4294967295);
						var $89 = HEAP32[(($n_harmonic_peaks126) >> 2)];
						var $add127 = ((($89) + 1) & 4294967295);
						$pk = $add127;
						var $cmp1294 = ((($add127)) | 0) < 9;
						if ($cmp1294) {
							__label__ = 41;;
						} else {
							__label__ = 42;;
						}
						$for_body130$$for_end144$54: do {
							if (__label__ == 41) {
								while (1) {
									var $90 = $pk;
									var $arrayidx131 = ((__ZL13peak_harmonic + $90 * 4) & 4294967295);
									var $91 = HEAP32[(($arrayidx131) >> 2)];
									var $92 = $waveph;
									var $conv132 = ((($92)) & 65535);
									var $mul133 = ((($conv132) * ($91)) & 4294967295);
									var $conv134 = ((($mul133)) & 65535);
									$theta = $conv134;
									var $93 = $theta;
									var $conv135 = ((($93)) & 65535);
									var $shr136 = ($conv135) >> 5;
									var $arrayidx137 = ((_sin_tab + $shr136 * 2) & 4294967295);
									var $94 = HEAP16[(($arrayidx137) >> 1)];
									var $conv138 = (tempInt = (($94)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $95 = $pk;
									var $arrayidx139 = ((__ZL11peak_height + $95 * 4) & 4294967295);
									var $96 = HEAP32[(($arrayidx139) >> 2)];
									var $mul140 = ((($96) * ($conv138)) & 4294967295);
									var $97 = $total;
									var $add141 = ((($97) + ($mul140)) & 4294967295);
									$total = $add141;
									var $98 = $pk;
									var $inc143 = ((($98) + 1) & 4294967295);
									$pk = $inc143;
									var $cmp129 = ((($inc143)) | 0) < 9;
									if ($cmp129) {
										__label__ = 41;
										continue;
									} else {
										__label__ = 42;
										break $for_body130$$for_end144$54;
									}
								}
							}
						} while (0);
						var $99 = $total;
						var $100 = HEAP32[((__ZL9hf_factor) >> 2)];
						var $div145 = ((((($99)) | 0) / ((($100)) | 0)) | 0);
						var $101 = HEAP32[((__ZL6cbytes) >> 2)];
						var $arrayidx146 = ((__ZL8wavemult + $101) & 4294967295);
						var $102 = HEAPU8[($arrayidx146)];
						var $conv147 = ((($102)) & 255);
						var $mul148 = ((($conv147) * ($div145)) & 4294967295);
						$total = $mul148;;
					}
				} while (0);
				var $103 = $waveph;
				$theta = $103;
				$h = 1;
				var $104 = $h;
				var $105 = HEAP32[((__ZZ7WavegenvE13h_switch_sign) >> 2)];
				var $cmp1516 = ((($104)) | 0) <= ((($105)) | 0);
				if ($cmp1516) {
					__label__ = 44;;
				} else {
					__label__ = 45;;
				}
				$for_body152$$while_cond_loopexit$59: do {
					if (__label__ == 44) {
						while (1) {
							var $106 = $theta;
							var $conv153 = ((($106)) & 65535);
							var $shr154 = ($conv153) >> 5;
							var $arrayidx155 = ((_sin_tab + $shr154 * 2) & 4294967295);
							var $107 = HEAP16[(($arrayidx155) >> 1)];
							var $conv156 = (tempInt = (($107)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $108 = $h;
							var $109 = HEAP32[((__ZL9harmspect) >> 2)];
							var $arrayidx157 = (($109 + 4 * $108) & 4294967295);
							var $110 = HEAP32[(($arrayidx157) >> 2)];
							var $mul158 = ((($110) * ($conv156)) & 4294967295);
							var $111 = $total;
							var $add159 = ((($111) + ($mul158)) & 4294967295);
							$total = $add159;
							var $112 = $waveph;
							var $conv160 = ((($112)) & 65535);
							var $113 = $theta;
							var $conv161 = ((($113)) & 65535);
							var $add162 = ((($conv161) + ($conv160)) & 4294967295);
							var $conv163 = ((($add162)) & 65535);
							$theta = $conv163;
							var $114 = $h;
							var $inc165 = ((($114) + 1) & 4294967295);
							$h = $inc165;
							var $115 = $h;
							var $116 = HEAP32[((__ZZ7WavegenvE13h_switch_sign) >> 2)];
							var $cmp151 = ((($115)) | 0) <= ((($116)) | 0);
							if ($cmp151) {
								__label__ = 44;
								continue;
							} else {
								__label__ = 45;
								break $for_body152$$while_cond_loopexit$59;
							}
						}
					}
				} while (0);
				var $117 = $h;
				var $118 = HEAP32[((__ZZ7WavegenvE4maxh) >> 2)];
				var $cmp1677 = ((($117)) | 0) <= ((($118)) | 0);
				if ($cmp1677) {
					__label__ = 46;;
				} else {
					__label__ = 47;;
				}
				$while_body$$while_end$63: do {
					if (__label__ == 46) {
						while (1) {
							var $119 = $theta;
							var $conv168 = ((($119)) & 65535);
							var $shr169 = ($conv168) >> 5;
							var $arrayidx170 = ((_sin_tab + $shr169 * 2) & 4294967295);
							var $120 = HEAP16[(($arrayidx170) >> 1)];
							var $conv171 = (tempInt = (($120)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $121 = $h;
							var $122 = HEAP32[((__ZL9harmspect) >> 2)];
							var $arrayidx172 = (($122 + 4 * $121) & 4294967295);
							var $123 = HEAP32[(($arrayidx172) >> 2)];
							var $mul173 = ((($123) * ($conv171)) & 4294967295);
							var $124 = $total;
							var $sub174 = ((($124) - ($mul173)) & 4294967295);
							$total = $sub174;
							var $125 = $waveph;
							var $conv175 = ((($125)) & 65535);
							var $126 = $theta;
							var $conv176 = ((($126)) & 65535);
							var $add177 = ((($conv176) + ($conv175)) & 4294967295);
							var $conv178 = ((($add177)) & 65535);
							$theta = $conv178;
							var $127 = $h;
							var $inc179 = ((($127) + 1) & 4294967295);
							$h = $inc179;
							var $128 = $h;
							var $129 = HEAP32[((__ZZ7WavegenvE4maxh) >> 2)];
							var $cmp167 = ((($128)) | 0) <= ((($129)) | 0);
							if ($cmp167) {
								__label__ = 46;
								continue;
							} else {
								__label__ = 47;
								break $while_body$$while_end$63;
							}
						}
					}
				} while (0);
				var $130 = HEAP32[((__ZL7voicing) >> 2)];
				var $cmp180 = ((($130)) | 0) != 64;
				if ($cmp180) {
					__label__ = 48;;
				} else {
					__label__ = 49;;
				}
				if (__label__ == 48) {
					var $131 = $total;
					var $shr182 = ($131) >> 6;
					var $132 = HEAP32[((__ZL7voicing) >> 2)];
					var $mul183 = ((($shr182) * ($132)) & 4294967295);
					$total = $mul183;;
				}
				var $133 = HEAP32[((_wvoice) >> 2)];
				var $breath = (($133 + 272) & 4294967295);
				var $arrayidx185 = (($breath) & 4294967295);
				var $134 = HEAP32[(($arrayidx185) >> 2)];
				var $tobool = ((($134)) | 0) != 0;
				if ($tobool) {
					__label__ = 50;;
				} else {
					__label__ = 51;;
				}
				if (__label__ == 50) {
					var $call187 = __ZL11ApplyBreathv();
					var $135 = $total;
					var $add188 = ((($135) + ($call187)) & 4294967295);
					$total = $add188;;
				}
				$z2 = 0;
				var $136 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
				var $137 = HEAP32[((((_wdata + 28) & 4294967295)) >> 2)];
				var $cmp190 = ((($136)) | 0) < ((($137)) | 0);
				if ($cmp190) {
					__label__ = 52;;
				} else {
					__label__ = 57;;
				}
				$if_then191$$if_end222$73: do {
					if (__label__ == 52) {
						var $138 = HEAP32[((((_wdata + 32) & 4294967295)) >> 2)];
						var $cmp192 = ((($138)) | 0) == 0;
						if ($cmp192) {
							__label__ = 53;;
						} else {
							__label__ = 54;;
						}
						if (__label__ == 53) {
							var $139 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
							var $140 = HEAP32[((((_wdata + 48) & 4294967295)) >> 2)];
							var $add194 = ((($139) + 1) & 4294967295);
							var $add195 = ((($add194) + ($140)) & 4294967295);
							var $141 = HEAP32[((((_wdata + 24) & 4294967295)) >> 2)];
							var $arrayidx196 = (($141 + $add195) & 4294967295);
							var $142 = HEAP8[($arrayidx196)];
							$c = $142;
							var $143 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
							var $144 = HEAP32[((((_wdata + 48) & 4294967295)) >> 2)];
							var $add197 = ((($144) + ($143)) & 4294967295);
							var $145 = HEAP32[((((_wdata + 24) & 4294967295)) >> 2)];
							var $arrayidx198 = (($145 + $add197) & 4294967295);
							var $146 = HEAPU8[($arrayidx198)];
							var $conv199 = ((($146)) & 255);
							var $147 = $c;
							var $conv200 = (tempInt = (($147)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $mul201 = ((($conv200) * 256) & 4294967295);
							var $add202 = ((($mul201) + ($conv199)) & 4294967295);
							$sample = $add202;
							var $148 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
							var $add203 = ((($148) + 2) & 4294967295);
							HEAP32[((((_wdata + 40) & 4294967295)) >> 2)] = $add203;;
						} else if (__label__ == 54) {
							var $149 = HEAP32[((((_wdata + 48) & 4294967295)) >> 2)];
							var $150 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
							var $inc205 = ((($150) + 1) & 4294967295);
							HEAP32[((((_wdata + 40) & 4294967295)) >> 2)] = $inc205;
							var $add206 = ((($150) + ($149)) & 4294967295);
							var $151 = HEAP32[((((_wdata + 24) & 4294967295)) >> 2)];
							var $arrayidx207 = (($151 + $add206) & 4294967295);
							var $152 = HEAP8[($arrayidx207)];
							var $conv208 = (tempInt = (($152)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $153 = HEAP32[((((_wdata + 32) & 4294967295)) >> 2)];
							var $mul209 = ((($conv208) * ($153)) & 4294967295);
							$sample = $mul209;;
						}
						var $154 = $sample;
						var $155 = HEAP32[((((_wdata + 56) & 4294967295)) >> 2)];
						var $mul211 = ((($155) * ($154)) & 4294967295);
						var $shr212 = ($mul211) >> 10;
						$z2 = $shr212;
						var $156 = $z2;
						var $157 = HEAP32[((((_wdata + 36) & 4294967295)) >> 2)];
						var $mul213 = ((($157) * ($156)) & 4294967295);
						var $div214 = ((((($mul213)) | 0) / 32) | 0);
						$z2 = $div214;
						var $158 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
						var $159 = HEAP32[((((_wdata + 48) & 4294967295)) >> 2)];
						var $add215 = ((($159) + ($158)) & 4294967295);
						var $160 = HEAP32[((((_wdata + 44) & 4294967295)) >> 2)];
						var $cmp216 = ((($add215)) | 0) >= ((($160)) | 0);
						if (!($cmp216)) {
							__label__ = 57;
							break $if_then191$$if_end222$73;
						}
						var $161 = HEAP32[((((_wdata + 44) & 4294967295)) >> 2)];
						var $mul218 = ((($161) * 3) & 4294967295);
						var $div219 = ((((($mul218)) | 0) / 4) | 0);
						var $162 = HEAP32[((((_wdata + 48) & 4294967295)) >> 2)];
						var $sub220 = ((($162) - ($div219)) & 4294967295);
						HEAP32[((((_wdata + 48) & 4294967295)) >> 2)] = $sub220;;
					}
				} while (0);
				var $163 = $z2;
				var $164 = $total;
				var $shr223 = ($164) >> 8;
				var $165 = HEAP32[((__ZZ7WavegenvE10amplitude2) >> 2)];
				var $mul224 = ((($shr223) * ($165)) & 4294967295);
				var $shr225 = ($mul224) >> 13;
				var $add226 = ((($shr225) + ($163)) & 4294967295);
				$z1 = $add226;
				var $166 = HEAP32[((_echo_tail) >> 2)];
				var $inc227 = ((($166) + 1) & 4294967295);
				HEAP32[((_echo_tail) >> 2)] = $inc227;
				var $arrayidx228 = ((_echo_buf + $166 * 2) & 4294967295);
				var $167 = HEAP16[(($arrayidx228) >> 1)];
				var $conv229 = (tempInt = (($167)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $168 = HEAP32[((_echo_amp) >> 2)];
				var $mul230 = ((($conv229) * ($168)) & 4294967295);
				$echo = $mul230;
				var $169 = $echo;
				var $shr231 = ($169) >> 8;
				var $170 = $z1;
				var $add232 = ((($170) + ($shr231)) & 4294967295);
				$z1 = $add232;
				var $171 = HEAP32[((_echo_tail) >> 2)];
				var $cmp233 = ((($171)) | 0) >= 5500;
				if ($cmp233) {
					__label__ = 58;;
				} else {
					__label__ = 59;;
				}
				if (__label__ == 58) {
					HEAP32[((_echo_tail) >> 2)] = 0;;
				}
				var $172 = $z1;
				var $173 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
				var $mul236 = ((($173) * ($172)) & 4294967295);
				var $shr237 = ($mul236) >> 8;
				$z = $shr237;
				var $cmp238 = ((($shr237)) | 0) >= 32768;
				if ($cmp238) {
					__label__ = 60;;
				} else {
					__label__ = 63;;
				}
				$if_then239$$if_else247$84: do {
					if (__label__ == 60) {
						var $174 = $z1;
						var $div240 = ((8388608 / ((($174)) | 0)) | 0);
						var $sub241 = ((($div240) - 1) & 4294967295);
						$ov = $sub241;
						var $175 = $ov;
						var $176 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
						var $cmp242 = ((($175)) | 0) < ((($176)) | 0);
						if ($cmp242) {
							__label__ = 61;;
						} else {
							__label__ = 62;;
						}
						if (__label__ == 61) {
							var $177 = $ov;
							HEAP32[((__ZZ7WavegenvE3agc) >> 2)] = $177;;
						}
						var $178 = $z1;
						var $179 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
						var $mul245 = ((($179) * ($178)) & 4294967295);
						var $shr246 = ($mul245) >> 8;
						$z = $shr246;;
					} else if (__label__ == 63) {
						var $180 = $z;
						var $cmp248 = ((($180)) | 0) <= -32768;
						if (!($cmp248)) {
							__label__ = 67;
							break $if_then239$$if_else247$84;
						}
						var $181 = $z1;
						var $div250 = ((-8388608 / ((($181)) | 0)) | 0);
						var $sub251 = ((($div250) - 1) & 4294967295);
						$ov = $sub251;
						var $182 = $ov;
						var $183 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
						var $cmp252 = ((($182)) | 0) < ((($183)) | 0);
						if ($cmp252) {
							__label__ = 65;;
						} else {
							__label__ = 66;;
						}
						if (__label__ == 65) {
							var $184 = $ov;
							HEAP32[((__ZZ7WavegenvE3agc) >> 2)] = $184;;
						}
						var $185 = $z1;
						var $186 = HEAP32[((__ZZ7WavegenvE3agc) >> 2)];
						var $mul255 = ((($186) * ($185)) & 4294967295);
						var $shr256 = ($mul255) >> 8;
						$z = $shr256;;
					}
				} while (0);
				var $187 = $z;
				var $conv259 = ((($187)) & 255);
				var $188 = HEAP32[((_out_ptr) >> 2)];
				var $incdec_ptr = (($188 + 1) & 4294967295);
				HEAP32[((_out_ptr) >> 2)] = $incdec_ptr;
				HEAP8[($188)] = $conv259;
				var $189 = $z;
				var $shr260 = ($189) >> 8;
				var $conv261 = ((($shr260)) & 255);
				var $190 = HEAP32[((_out_ptr) >> 2)];
				var $incdec_ptr262 = (($190 + 1) & 4294967295);
				HEAP32[((_out_ptr) >> 2)] = $incdec_ptr262;
				HEAP8[($190)] = $conv261;
				var $191 = $z;
				var $conv263 = ((($191)) & 65535);
				var $192 = HEAP32[((_echo_head) >> 2)];
				var $inc264 = ((($192) + 1) & 4294967295);
				HEAP32[((_echo_head) >> 2)] = $inc264;
				var $arrayidx265 = ((_echo_buf + $192 * 2) & 4294967295);
				HEAP16[(($arrayidx265) >> 1)] = $conv263;
				var $193 = HEAP32[((_echo_head) >> 2)];
				var $cmp266 = ((($193)) | 0) >= 5500;
				if ($cmp266) {
					__label__ = 68;;
				} else {
					__label__ = 69;;
				}
				if (__label__ == 68) {
					HEAP32[((_echo_head) >> 2)] = 0;;
				}
				var $194 = HEAPU32[((_out_ptr) >> 2)];
				var $195 = HEAPU32[((_out_end) >> 2)];
				var $cmp269 = ((($194)) >>> 0) >= ((($195)) >>> 0);
				if ($cmp269) {
					__label__ = 70;
					break $for_cond$2;
				} else {
					__label__ = 1;
					continue $for_cond$2;
				}
			}
			if (__label__ == 2) {
				$retval = 0;;
			} else if (__label__ == 18) {
				$retval = 0;;
			} else if (__label__ == 70) {
				$retval = 1;;
			}
			var $196 = $retval;;
			return $196;
			return null;
		}

		function __ZL17AdvanceParametersv() {;
			var __label__;
			var __lastLabel__ = null;
			var $x;
			var $ix;
			var $0 = HEAP32[((((_wdata + 12) & 4294967295)) >> 2)];
			var $1 = HEAP32[((((_wdata + 8) & 4294967295)) >> 2)];
			var $add = ((($1) + ($0)) & 4294967295);
			HEAP32[((((_wdata + 8) & 4294967295)) >> 2)] = $add;
			var $2 = HEAP32[((((_wdata + 8) & 4294967295)) >> 2)];
			var $shr = ($2) >> 8;
			$ix = $shr;
			var $cmp = ((($shr)) | 0) > 127;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$ix = 127;;
			}
			var $3 = $ix;
			var $4 = HEAP32[((((_wdata) & 4294967295)) >> 2)];
			var $arrayidx = (($4 + $3) & 4294967295);
			var $5 = HEAPU8[($arrayidx)];
			var $conv = ((($5)) & 255);
			var $6 = HEAP32[((((_wdata + 20) & 4294967295)) >> 2)];
			var $mul = ((($conv) * ($6)) & 4294967295);
			$x = $mul;
			var $7 = $x;
			var $shr1 = ($7) >> 8;
			var $8 = HEAP32[((((_wdata + 16) & 4294967295)) >> 2)];
			var $add2 = ((($shr1) + ($8)) & 4294967295);
			HEAP32[((((_wdata + 4) & 4294967295)) >> 2)] = $add2;
			var $9 = HEAP32[((__ZL7amp_inc) >> 2)];
			var $10 = HEAP32[((__ZL6amp_ix) >> 2)];
			var $add3 = ((($10) + ($9)) & 4294967295);
			HEAP32[((__ZL6amp_ix) >> 2)] = $add3;
			var $11 = HEAP32[((__ZZL17AdvanceParametersvE10Flutter_ix) >> 2)];
			var $cmp4 = ((($11)) | 0) >= 23552;
			if ($cmp4) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				HEAP32[((__ZZL17AdvanceParametersvE10Flutter_ix) >> 2)] = 0;;
			}
			var $12 = HEAP32[((__ZZL17AdvanceParametersvE10Flutter_ix) >> 2)];
			var $shr7 = ($12) >> 6;
			var $arrayidx8 = ((__ZL11Flutter_tab + $shr7) & 4294967295);
			var $13 = HEAPU8[($arrayidx8)];
			var $conv9 = ((($13)) & 255);
			var $sub = ((($conv9) - 128) & 4294967295);
			var $14 = HEAP32[((__ZL11flutter_amp) >> 2)];
			var $mul10 = ((($sub) * ($14)) & 4294967295);
			$x = $mul10;
			var $15 = HEAP32[((__ZL11Flutter_inc) >> 2)];
			var $16 = HEAP32[((__ZZL17AdvanceParametersvE10Flutter_ix) >> 2)];
			var $add11 = ((($16) + ($15)) & 4294967295);
			HEAP32[((__ZZL17AdvanceParametersvE10Flutter_ix) >> 2)] = $add11;
			var $17 = $x;
			var $18 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
			var $add12 = ((($18) + ($17)) & 4294967295);
			HEAP32[((((_wdata + 4) & 4294967295)) >> 2)] = $add12;
			var $cmp13 = ((($add12)) | 0) < 102400;
			if ($cmp13) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				HEAP32[((((_wdata + 4) & 4294967295)) >> 2)] = 102400;;
			}
			var $19 = HEAP32[((__ZL11samplecount) >> 2)];
			var $20 = HEAP32[((__ZL17samplecount_start) >> 2)];
			var $cmp16 = ((($19)) | 0) == ((($20)) | 0);
			if ($cmp16) {
				__label__ = 21;;
			} else {
				__label__ = 7;;
			}
			$for_end93$$if_end18$11: do {
				if (__label__ == 7) {
					$ix = 0;
					var $21 = $ix;
					var $22 = HEAP32[((_wvoice) >> 2)];
					var $n_harmonic_peaks2 = (($22 + 84) & 4294967295);
					var $23 = HEAP32[(($n_harmonic_peaks2) >> 2)];
					var $cmp193 = ((($21)) | 0) <= ((($23)) | 0);
					if ($cmp193) {
						__lastLabel__ = 7;
						__label__ = 9;;
					} else {
						__lastLabel__ = 7;
						__label__ = 8;;
					}
					$for_body$$for_cond60_preheader$13: do {
						if (__label__ == 9) {
							while (1) {
								var $24 = $ix;
								var $arrayidx20 = ((__ZL5peaks + $24 * 80) & 4294967295);
								var $freq_inc = (($arrayidx20 + 48) & 4294967295);
								var $25 = HEAPF32[(($freq_inc) >> 2)];
								var $26 = $ix;
								var $arrayidx21 = ((__ZL5peaks + $26 * 80) & 4294967295);
								var $freq1 = (($arrayidx21 + 16) & 4294967295);
								var $27 = HEAPF32[(($freq1) >> 2)];
								var $add22 = ($27) + ($25);
								HEAPF32[(($freq1) >> 2)] = $add22;
								var $28 = $ix;
								var $arrayidx23 = ((__ZL5peaks + $28 * 80) & 4294967295);
								var $freq124 = (($arrayidx23 + 16) & 4294967295);
								var $29 = HEAPF32[(($freq124) >> 2)];
								var $conv25 = ((($29)) | 0);
								var $30 = $ix;
								var $arrayidx26 = ((__ZL5peaks + $30 * 80) & 4294967295);
								var $freq = (($arrayidx26) & 4294967295);
								HEAP32[(($freq) >> 2)] = $conv25;
								var $31 = $ix;
								var $arrayidx27 = ((__ZL5peaks + $31 * 80) & 4294967295);
								var $height_inc = (($arrayidx27 + 56) & 4294967295);
								var $32 = HEAPF32[(($height_inc) >> 2)];
								var $33 = $ix;
								var $arrayidx28 = ((__ZL5peaks + $33 * 80) & 4294967295);
								var $height1 = (($arrayidx28 + 24) & 4294967295);
								var $34 = HEAPF32[(($height1) >> 2)];
								var $add29 = ($34) + ($32);
								HEAPF32[(($height1) >> 2)] = $add29;
								var $35 = $ix;
								var $arrayidx30 = ((__ZL5peaks + $35 * 80) & 4294967295);
								var $height131 = (($arrayidx30 + 24) & 4294967295);
								var $36 = HEAPF32[(($height131) >> 2)];
								var $conv32 = ((($36)) | 0);
								var $37 = $ix;
								var $arrayidx33 = ((__ZL5peaks + $37 * 80) & 4294967295);
								var $height = (($arrayidx33 + 4) & 4294967295);
								HEAP32[(($height) >> 2)] = $conv32;
								var $cmp34 = ((($conv32)) | 0) < 0;
								if ($cmp34) {
									__label__ = 10;;
								} else {
									__label__ = 11;;
								}
								if (__label__ == 10) {
									var $38 = $ix;
									var $arrayidx36 = ((__ZL5peaks + $38 * 80) & 4294967295);
									var $height37 = (($arrayidx36 + 4) & 4294967295);
									HEAP32[(($height37) >> 2)] = 0;;
								}
								var $39 = $ix;
								var $arrayidx39 = ((__ZL5peaks + $39 * 80) & 4294967295);
								var $left_inc = (($arrayidx39 + 64) & 4294967295);
								var $40 = HEAPF32[(($left_inc) >> 2)];
								var $41 = $ix;
								var $arrayidx40 = ((__ZL5peaks + $41 * 80) & 4294967295);
								var $left1 = (($arrayidx40 + 32) & 4294967295);
								var $42 = HEAPF32[(($left1) >> 2)];
								var $add41 = ($42) + ($40);
								HEAPF32[(($left1) >> 2)] = $add41;
								var $43 = $ix;
								var $arrayidx42 = ((__ZL5peaks + $43 * 80) & 4294967295);
								var $left143 = (($arrayidx42 + 32) & 4294967295);
								var $44 = HEAPF32[(($left143) >> 2)];
								var $conv44 = ((($44)) | 0);
								var $45 = $ix;
								var $arrayidx45 = ((__ZL5peaks + $45 * 80) & 4294967295);
								var $left = (($arrayidx45 + 8) & 4294967295);
								HEAP32[(($left) >> 2)] = $conv44;
								var $46 = $ix;
								var $cmp46 = ((($46)) | 0) < 3;
								var $47 = $ix;
								var $arrayidx48 = ((__ZL5peaks + $47 * 80) & 4294967295);
								if ($cmp46) {
									__label__ = 12;;
								} else {
									__label__ = 13;;
								}
								if (__label__ == 12) {
									var $right_inc = (($arrayidx48 + 72) & 4294967295);
									var $48 = HEAPF32[(($right_inc) >> 2)];
									var $49 = $ix;
									var $arrayidx49 = ((__ZL5peaks + $49 * 80) & 4294967295);
									var $right1 = (($arrayidx49 + 40) & 4294967295);
									var $50 = HEAPF32[(($right1) >> 2)];
									var $add50 = ($50) + ($48);
									HEAPF32[(($right1) >> 2)] = $add50;
									var $51 = $ix;
									var $arrayidx51 = ((__ZL5peaks + $51 * 80) & 4294967295);
									var $right152 = (($arrayidx51 + 40) & 4294967295);
									var $52 = HEAPF32[(($right152) >> 2)];
									var $conv53 = ((($52)) | 0);
									var $53 = $ix;
									var $arrayidx54 = ((__ZL5peaks + $53 * 80) & 4294967295);
									var $right = (($arrayidx54 + 12) & 4294967295);
									HEAP32[(($right) >> 2)] = $conv53;;
								} else if (__label__ == 13) {
									var $left56 = (($arrayidx48 + 8) & 4294967295);
									var $54 = HEAP32[(($left56) >> 2)];
									var $55 = $ix;
									var $arrayidx57 = ((__ZL5peaks + $55 * 80) & 4294967295);
									var $right58 = (($arrayidx57 + 12) & 4294967295);
									HEAP32[(($right58) >> 2)] = $54;;
								}
								var $56 = $ix;
								var $inc = ((($56) + 1) & 4294967295);
								$ix = $inc;
								var $57 = $ix;
								var $58 = HEAP32[((_wvoice) >> 2)];
								var $n_harmonic_peaks = (($58 + 84) & 4294967295);
								var $59 = HEAP32[(($n_harmonic_peaks) >> 2)];
								var $cmp19 = ((($57)) | 0) <= ((($59)) | 0);
								if ($cmp19) {
									__lastLabel__ = 14;
									__label__ = 9;
									continue;
								} else {
									__lastLabel__ = 14;
									__label__ = 8;
									break $for_body$$for_cond60_preheader$13;
								}
							}
						}
					} while (0);
					var $_lcssa = __lastLabel__ == 7 ? $21 : ($57);
					var $cmp611 = ((($_lcssa)) | 0) < 8;
					if (!($cmp611)) {
						__label__ = 21;
						break $for_end93$$if_end18$11;
					}
					var $_pr = $ix;
					__lastLabel__ = 15;;
					while (1) {
						var $60 = __lastLabel__ == 15 ? $_pr : ($inc92);
						var $cmp63 = ((($60)) | 0) < 7;
						if ($cmp63) {
							__label__ = 17;;
						} else {
							__label__ = 18;;
						}
						if (__label__ == 17) {
							var $61 = $ix;
							var $arrayidx65 = ((__ZL5peaks + $61 * 80) & 4294967295);
							var $freq_inc66 = (($arrayidx65 + 48) & 4294967295);
							var $62 = HEAPF32[(($freq_inc66) >> 2)];
							var $63 = $ix;
							var $arrayidx67 = ((__ZL5peaks + $63 * 80) & 4294967295);
							var $freq168 = (($arrayidx67 + 16) & 4294967295);
							var $64 = HEAPF32[(($freq168) >> 2)];
							var $add69 = ($64) + ($62);
							HEAPF32[(($freq168) >> 2)] = $add69;
							var $65 = $ix;
							var $arrayidx70 = ((__ZL5peaks + $65 * 80) & 4294967295);
							var $freq171 = (($arrayidx70 + 16) & 4294967295);
							var $66 = HEAPF32[(($freq171) >> 2)];
							var $conv72 = ((($66)) | 0);
							var $67 = $ix;
							var $arrayidx73 = ((__ZL5peaks + $67 * 80) & 4294967295);
							var $freq74 = (($arrayidx73) & 4294967295);
							HEAP32[(($freq74) >> 2)] = $conv72;;
						}
						var $68 = $ix;
						var $arrayidx76 = ((__ZL5peaks + $68 * 80) & 4294967295);
						var $height_inc77 = (($arrayidx76 + 56) & 4294967295);
						var $69 = HEAPF32[(($height_inc77) >> 2)];
						var $70 = $ix;
						var $arrayidx78 = ((__ZL5peaks + $70 * 80) & 4294967295);
						var $height179 = (($arrayidx78 + 24) & 4294967295);
						var $71 = HEAPF32[(($height179) >> 2)];
						var $add80 = ($71) + ($69);
						HEAPF32[(($height179) >> 2)] = $add80;
						var $72 = $ix;
						var $arrayidx81 = ((__ZL5peaks + $72 * 80) & 4294967295);
						var $height182 = (($arrayidx81 + 24) & 4294967295);
						var $73 = HEAPF32[(($height182) >> 2)];
						var $conv83 = ((($73)) | 0);
						var $74 = $ix;
						var $arrayidx84 = ((__ZL5peaks + $74 * 80) & 4294967295);
						var $height85 = (($arrayidx84 + 4) & 4294967295);
						HEAP32[(($height85) >> 2)] = $conv83;
						var $cmp86 = ((($conv83)) | 0) < 0;
						if ($cmp86) {
							__label__ = 19;;
						} else {
							__label__ = 20;;
						}
						if (__label__ == 19) {
							var $75 = $ix;
							var $arrayidx88 = ((__ZL5peaks + $75 * 80) & 4294967295);
							var $height89 = (($arrayidx88 + 4) & 4294967295);
							HEAP32[(($height89) >> 2)] = 0;;
						}
						var $76 = $ix;
						var $inc92 = ((($76) + 1) & 4294967295);
						$ix = $inc92;
						var $cmp61 = ((($inc92)) | 0) < 8;
						if ($cmp61) {
							__lastLabel__ = 20;
							__label__ = 16;
							continue;
						} else {
							__lastLabel__ = 20;
							__label__ = 21;
							break $for_end93$$if_end18$11;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL9SetBreathv() {;
			var __label__;
			var $pk;
			var $0 = HEAP32[((_wvoice) >> 2)];
			var $breath = (($0 + 272) & 4294967295);
			var $arrayidx = (($breath) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			var $cmp = ((($1)) | 0) == 0;
			if ($cmp) {
				__label__ = 5;;
			} else {
				__label__ = 1;;
			}
			$for_end$$if_end$2: do {
				if (__label__ == 1) {
					$pk = 1;;
					while (1) {
						var $2 = $pk;
						var $3 = HEAP32[((_wvoice) >> 2)];
						var $breath2 = (($3 + 272) & 4294967295);
						var $arrayidx3 = (($breath2 + $2 * 4) & 4294967295);
						var $4 = HEAP32[(($arrayidx3) >> 2)];
						var $cmp4 = ((($4)) | 0) != 0;
						if ($cmp4) {
							__label__ = 3;;
						} else {
							__label__ = 4;;
						}
						if (__label__ == 3) {
							var $5 = $pk;
							var $arrayidx6 = ((__ZL7rbreath + $5 * 40) & 4294967295);
							var $6 = $pk;
							var $arrayidx7 = ((__ZL5peaks + $6 * 80) & 4294967295);
							var $freq = (($arrayidx7) & 4294967295);
							var $7 = HEAP32[(($freq) >> 2)];
							var $shr = ($7) >> 16;
							var $8 = $pk;
							var $9 = HEAP32[((_wvoice) >> 2)];
							var $breathw = (($9 + 308) & 4294967295);
							var $arrayidx8 = (($breathw + $8 * 4) & 4294967295);
							var $10 = HEAP32[(($arrayidx8) >> 2)];
							__ZL12setresonatorP9RESONATORiii($arrayidx6, $shr, $10, 0);;
						}
						var $11 = $pk;
						var $inc = ((($11) + 1) & 4294967295);
						$pk = $inc;
						var $cmp1 = ((($inc)) | 0) < 9;
						if ($cmp1) {
							__label__ = 2;
							continue;
						} else {
							__label__ = 5;
							break $for_end$$if_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL11ApplyBreathv() {;
			var __label__;
			var $value;
			var $noise;
			var $ix;
			var $amp;
			$value = 0;
			var $call = _rand();
			var $and = ($call) & 16383;
			var $sub = ((($and) - 8192) & 4294967295);
			$noise = $sub;
			$ix = 1;;
			while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_wvoice) >> 2)];
				var $breath = (($1 + 272) & 4294967295);
				var $arrayidx = (($breath + $0 * 4) & 4294967295);
				var $2 = HEAP32[(($arrayidx) >> 2)];
				$amp = $2;
				var $cmp1 = ((($2)) | 0) != 0;
				if ($cmp1) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $3 = $ix;
					var $arrayidx2 = ((__ZL5peaks + $3 * 80) & 4294967295);
					var $height = (($arrayidx2 + 4) & 4294967295);
					var $4 = HEAP32[(($height) >> 2)];
					var $shr = ($4) >> 14;
					var $5 = $amp;
					var $mul = ((($5) * ($shr)) & 4294967295);
					$amp = $mul;
					var $6 = $ix;
					var $arrayidx3 = ((__ZL7rbreath + $6 * 40) & 4294967295);
					var $7 = $noise;
					var $conv = ((($7)) | 0);
					var $call4 = __ZL9resonatorP9RESONATORd($arrayidx3, $conv);
					var $8 = $amp;
					var $conv5 = ((($8)) | 0);
					var $mul6 = ($call4) * ($conv5);
					var $conv7 = ((($mul6)) | 0);
					var $9 = $value;
					var $add = ((($conv7) + ($9)) & 4294967295);
					$value = $add;;
				}
				var $10 = $ix;
				var $inc = ((($10) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 9;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 4;
					break;
				}
			}
			var $11 = $value;;
			return $11;
			return null;
		}

		function __Z11SetEmbeddedii($control, $value) {;
			var __label__;
			var __lastLabel__ = null;
			var $control_addr;
			var $value_addr;
			var $sign;
			var $command;
			$control_addr = $control;
			$value_addr = $value;
			$sign = 0;
			var $0 = $control_addr;
			var $and = ($0) & 31;
			$command = $and;
			var $1 = $control_addr;
			var $and1 = ($1) & 96;
			var $cmp = ((($and1)) | 0) == 96;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_else$2: do {
				if (__label__ == 1) {
					$sign = -1;;
				} else if (__label__ == 2) {
					var $2 = $control_addr;
					var $and2 = ($2) & 96;
					var $cmp3 = ((($and2)) | 0) == 64;
					if (!($cmp3)) {
						__label__ = 4;
						break $if_then$$if_else$2;
					}
					$sign = 1;;
				}
			} while (0);
			var $3 = $command;
			var $cmp6 = ((($3)) | 0) < 15;
			if ($cmp6) {
				__lastLabel__ = 4;
				__label__ = 5;;
			} else {
				__lastLabel__ = 4;
				__label__ = 9;;
			}
			if (__label__ == 5) {
				var $4 = $sign;
				var $cmp8 = ((($4)) | 0) == 0;
				var $5 = $value_addr;
				if ($cmp8) {
					__label__ = 6;;
				} else {
					__label__ = 7;;
				}
				if (__label__ == 6) {
					var $6 = $command;
					var $arrayidx = ((_embedded_value + $6 * 4) & 4294967295);
					HEAP32[(($arrayidx) >> 2)] = $5;;
				} else if (__label__ == 7) {
					var $7 = $sign;
					var $mul = ((($7) * ($5)) & 4294967295);
					var $8 = $command;
					var $arrayidx11 = ((_embedded_value + $8 * 4) & 4294967295);
					var $9 = HEAP32[(($arrayidx11) >> 2)];
					var $add = ((($9) + ($mul)) & 4294967295);
					HEAP32[(($arrayidx11) >> 2)] = $add;;
				}
				var $10 = $command;
				var $arrayidx13 = ((_embedded_value + $10 * 4) & 4294967295);
				var $11 = HEAP32[(($arrayidx13) >> 2)];
				var $12 = $command;
				var $arrayidx14 = ((__ZL12embedded_max + $12 * 4) & 4294967295);
				var $13 = HEAP32[(($arrayidx14) >> 2)];
				var $call = __ZL13SetWithRange0ii($11, $13);
				var $14 = $command;
				var $arrayidx15 = ((_embedded_value + $14 * 4) & 4294967295);
				HEAP32[(($arrayidx15) >> 2)] = $call;
				var $_pr = $command;
				__lastLabel__ = 8;;
			}
			var $15 = __lastLabel__ == 8 ? $_pr : ($3);
			if ($15 == 6) {
				__label__ = 10;;
			} else if ($15 == 1) {
				__label__ = 11;;
			} else if ($15 == 3) {
				__label__ = 12;;
			} else if ($15 == 13) {
				__label__ = 13;;
			} else if ($15 == 5) {
				__label__ = 14;;
			} else {
				__label__ = 15;;
			}
			$sw_epilog$$sw_bb$$sw_bb17$$sw_bb18$$sw_bb20$$sw_bb22$14: do {
				if (__label__ == 10) {
					__ZL14WavegenSetEchov();
					__label__ = 11;
					break $sw_epilog$$sw_bb$$sw_bb17$$sw_bb18$$sw_bb20$$sw_bb22$14;
				} else if (__label__ == 12) {
					var $call19 = __Z12GetAmplitudev();
					HEAP32[((__ZL17general_amplitude) >> 2)] = $call19;
					__label__ = 15;
					break $sw_epilog$$sw_bb$$sw_bb17$$sw_bb18$$sw_bb20$$sw_bb22$14;
				} else if (__label__ == 13) {
					var $call21 = __Z12GetAmplitudev();
					HEAP32[((__ZL17general_amplitude) >> 2)] = $call21;
					__label__ = 15;
					break $sw_epilog$$sw_bb$$sw_bb17$$sw_bb18$$sw_bb20$$sw_bb22$14;
				} else if (__label__ == 14) {
					__ZL14WavegenSetEchov();
					__label__ = 15;
					break $sw_epilog$$sw_bb$$sw_bb17$$sw_bb18$$sw_bb20$$sw_bb22$14;
				}
			} while (0);
			if (__label__ == 11) {
				__ZL16SetPitchFormantsv();;
			};
			return;
			return;
		}

		function __ZL13SetWithRange0ii($value, $max) {;
			var __label__;
			var $retval;
			var $value_addr;
			var $max_addr;
			$value_addr = $value;
			$max_addr = $max;
			var $0 = $value_addr;
			var $cmp = ((($0)) | 0) < 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $1 = $value_addr;
				var $2 = $max_addr;
				var $cmp1 = ((($1)) | 0) > ((($2)) | 0);
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $3 = $max_addr;
					$retval = $3;;
				} else if (__label__ == 4) {
					var $4 = $value_addr;
					$retval = $4;;
				}
			}
			var $5 = $retval;;
			return $5;
			return null;
		}

		function __ZL14WavegenSetEchov() {;
			var __label__;
			var __lastLabel__ = null;
			var $delay;
			var $amp;
			var $0 = HEAP32[((_wvoice) >> 2)];
			var $voicing = (($0 + 92) & 4294967295);
			var $1 = HEAP32[(($voicing) >> 2)];
			HEAP32[((__ZL7voicing) >> 2)] = $1;
			var $2 = HEAP32[((_wvoice) >> 2)];
			var $echo_delay = (($2 + 76) & 4294967295);
			var $3 = HEAP32[(($echo_delay) >> 2)];
			$delay = $3;
			var $4 = HEAP32[((_wvoice) >> 2)];
			var $echo_amp = (($4 + 80) & 4294967295);
			var $5 = HEAP32[(($echo_amp) >> 2)];
			$amp = $5;
			var $6 = $delay;
			var $cmp = ((($6)) | 0) >= 5500;
			if ($cmp) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$delay = 5499;
				var $_pr = $amp;
				__lastLabel__ = 1;;
			}
			var $7 = __lastLabel__ == 1 ? $_pr : ($5);
			var $cmp1 = ((($7)) | 0) > 100;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				$amp = 100;;
			}
			var $dest$, $stop$, $stop4$, $fast$, $value4$;
			$dest$ = _echo_buf;
			$stop$ = $dest$ + 11000;
			$value4$ = 0;
			if ($value4$ < 0) $value4$ += 256;
			$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
			while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			}
			$dest$ >>= 2;
			$stop4$ = $stop$ >> 2;
			while ($dest$ < $stop4$) {;;;;;;;
				HEAP32[$dest$++] = $value4$;
			}
			$dest$ <<= 2;
			while ($dest$ < $stop$) {;;
				HEAP8[$dest$++] = 0;
			};
			HEAP32[((_echo_tail) >> 2)] = 0;
			var $8 = HEAP32[((((_embedded_value + 20) & 4294967295)) >> 2)];
			var $cmp4 = ((($8)) | 0) > 0;
			if ($cmp4) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			$if_end6_thread$$if_end6$8: do {
				if (__label__ == 5) {
					var $9 = HEAP32[((((_embedded_value + 20) & 4294967295)) >> 2)];
					$amp = $9;
					$delay = 130;;
				} else if (__label__ == 6) {
					var $_pr1 = $delay;
					var $cmp7 = ((($_pr1)) | 0) == 0;
					if (!($cmp7)) {
						__label__ = 8;
						break $if_end6_thread$$if_end6$8;
					}
					$amp = 0;;
				}
			} while (0);
			var $10 = $delay;
			var $11 = HEAP32[((_samplerate) >> 2)];
			var $mul = ((($11) * ($10)) & 4294967295);
			var $div = ((((($mul)) | 0) / 1000) | 0);
			HEAP32[((_echo_head) >> 2)] = $div;
			var $12 = HEAP32[((_echo_head) >> 2)];
			HEAP32[((__ZL11echo_length) >> 2)] = $12;
			var $13 = $amp;
			var $cmp10 = ((($13)) | 0) == 0;
			if ($cmp10) {
				__lastLabel__ = 8;
				__label__ = 9;;
			} else {
				__lastLabel__ = 8;
				__label__ = 10;;
			}
			if (__label__ == 9) {
				HEAP32[((__ZL11echo_length) >> 2)] = 0;
				var $_pr3 = $amp;
				__lastLabel__ = 9;;
			}
			var $14 = __lastLabel__ == 9 ? $_pr3 : ($13);
			var $cmp13 = ((($14)) | 0) > 20;
			if ($cmp13) {
				__label__ = 11;;
			} else {
				__label__ = 12;;
			}
			if (__label__ == 11) {
				var $15 = HEAP32[((_echo_head) >> 2)];
				var $mul15 = ((($15) * 2) & 4294967295);
				HEAP32[((__ZL11echo_length) >> 2)] = $mul15;;
			}
			var $16 = $amp;
			HEAP32[((_echo_amp) >> 2)] = $16;
			var $call = __Z12GetAmplitudev();
			HEAP32[((__ZL17general_amplitude) >> 2)] = $call;
			var $17 = HEAP32[((__ZL17general_amplitude) >> 2)];
			var $18 = $amp;
			var $sub = ((500 - ($18)) & 4294967295);
			var $mul17 = ((($sub) * ($17)) & 4294967295);
			var $div18 = ((((($mul17)) | 0) / 500) | 0);
			HEAP32[((__ZL17general_amplitude) >> 2)] = $div18;;
			return;
			return;
		}

		function __ZL16SetPitchFormantsv() {;
			var __label__;
			var $ix;
			var $factor;
			var $pitch_value;
			var $0 = HEAP32[((((_embedded_value + 4) & 4294967295)) >> 2)];
			$pitch_value = $0;
			var $cmp = ((($0)) | 0) > 101;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$pitch_value = 101;;
			}
			var $1 = $pitch_value;
			var $sub = ((($1) - 50) & 4294967295);
			var $mul = ((($sub) * 25) & 4294967295);
			var $div = ((((($mul)) | 0) / 50) | 0);
			var $add = ((($div) + 256) & 4294967295);
			$factor = $add;
			$ix = 0;;
			while (1) {
				var $2 = $ix;
				var $3 = HEAP32[((_wvoice) >> 2)];
				var $freq2 = (($3 + 216) & 4294967295);
				var $arrayidx = (($freq2 + $2 * 2) & 4294967295);
				var $4 = HEAP16[(($arrayidx) >> 1)];
				var $conv = (tempInt = (($4)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $5 = $factor;
				var $mul2 = ((($conv) * ($5)) & 4294967295);
				var $div3 = ((((($mul2)) | 0) / 256) | 0);
				var $conv4 = ((($div3)) & 65535);
				var $6 = $ix;
				var $7 = HEAP32[((_wvoice) >> 2)];
				var $freq = (($7 + 144) & 4294967295);
				var $arrayidx5 = (($freq + $6 * 2) & 4294967295);
				HEAP16[(($arrayidx5) >> 1)] = $conv4;
				var $8 = $ix;
				var $inc = ((($8) + 1) & 4294967295);
				$ix = $inc;
				var $cmp1 = ((($inc)) | 0) <= 5;
				if ($cmp1) {
					__label__ = 3;
					continue;
				} else {
					__label__ = 4;
					break;
				}
			}
			var $9 = HEAP32[((((_embedded_value + 24) & 4294967295)) >> 2)];
			var $mul6 = ((($9) * 3) & 4294967295);
			$factor = $mul6;
			var $10 = HEAP32[((_wvoice) >> 2)];
			var $height2 = (($10 + 234) & 4294967295);
			var $arrayidx7 = (($height2) & 4294967295);
			var $11 = HEAP16[(($arrayidx7) >> 1)];
			var $conv8 = (tempInt = (($11)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $12 = $factor;
			var $mul9 = ((($12) * 2) & 4294967295);
			var $sub10 = ((256 - ($mul9)) & 4294967295);
			var $mul11 = ((($sub10) * ($conv8)) & 4294967295);
			var $div12 = ((((($mul11)) | 0) / 256) | 0);
			var $conv13 = ((($div12)) & 65535);
			var $13 = HEAP32[((_wvoice) >> 2)];
			var $height = (($13 + 162) & 4294967295);
			var $arrayidx14 = (($height) & 4294967295);
			HEAP16[(($arrayidx14) >> 1)] = $conv13;
			var $14 = HEAP32[((_wvoice) >> 2)];
			var $height215 = (($14 + 234) & 4294967295);
			var $arrayidx16 = (($height215 + 2) & 4294967295);
			var $15 = HEAP16[(($arrayidx16) >> 1)];
			var $conv17 = (tempInt = (($15)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $16 = $factor;
			var $sub18 = ((256 - ($16)) & 4294967295);
			var $mul19 = ((($sub18) * ($conv17)) & 4294967295);
			var $div20 = ((((($mul19)) | 0) / 256) | 0);
			var $conv21 = ((($div20)) & 65535);
			var $17 = HEAP32[((_wvoice) >> 2)];
			var $height22 = (($17 + 162) & 4294967295);
			var $arrayidx23 = (($height22 + 2) & 4294967295);
			HEAP16[(($arrayidx23) >> 1)] = $conv21;;
			return;
			return;
		}

		function __Z15WavegenSetVoiceP7voice_t($v) {;
			var __label__;
			var $v_addr;
			$v_addr = $v;
			var $0 = $v_addr;
			var $1 = $0;
			var $src$, $dest$, $stop$, $stop4$, $fast$;
			$src$ = $1;
			$dest$ = ((__ZZ15WavegenSetVoiceP7voice_tE2v2) & 4294967295);
			$stop$ = $src$ + 1344;
			if (($dest$ % 4) == ($src$ % 4) && 1344 > 8) {
				while ($src$ % 4 !== 0 && $src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				}
				$src$ >>= 2;
				$dest$ >>= 2;
				$stop4$ = $stop$ >> 2;
				while ($src$ < $stop4$) {;;;
					HEAP32[$dest$++] = HEAP32[$src$++];
				}
				$src$ <<= 2;
				$dest$ <<= 2;
			}
			while ($src$ < $stop$) {;
				HEAP8[$dest$++] = HEAP8[$src$++];
			};
			HEAP32[((_wvoice) >> 2)] = __ZZ15WavegenSetVoiceP7voice_tE2v2;
			var $2 = $v_addr;
			var $peak_shape = (($2 + 88) & 4294967295);
			var $3 = HEAP32[(($peak_shape) >> 2)];
			var $cmp = ((($3)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((__ZL8pk_shape) >> 2)] = ((_pk_shape1) & 4294967295);;
			} else if (__label__ == 2) {
				HEAP32[((__ZL8pk_shape) >> 2)] = ((__ZL9pk_shape2) & 4294967295);;
			}
			var $4 = $v_addr;
			var $consonant_amp = (($4 + 100) & 4294967295);
			var $5 = HEAP32[(($consonant_amp) >> 2)];
			var $mul = ((($5) * 26) & 4294967295);
			var $div = ((((($mul)) | 0) / 100) | 0);
			HEAP32[((__ZL13consonant_amp) >> 2)] = $div;
			var $6 = HEAP32[((_samplerate) >> 2)];
			var $cmp1 = ((($6)) | 0) <= 11000;
			if ($cmp1) {
				__label__ = 4;;
			} else {
				__label__ = 5;;
			}
			if (__label__ == 4) {
				var $7 = HEAP32[((__ZL13consonant_amp) >> 2)];
				var $mul3 = ((($7) * 2) & 4294967295);
				HEAP32[((__ZL13consonant_amp) >> 2)] = $mul3;
				HEAP8[(__ZL16option_harmonic1_b)] = 1;;
			}
			__ZL14WavegenSetEchov();
			__ZL16SetPitchFormantsv();
			var $8 = HEAP32[((_wvoice) >> 2)];
			var $samplerate = (($8 + 108) & 4294967295);
			var $9 = HEAP32[(($samplerate) >> 2)];
			var $10 = HEAP32[((_out_ptr) >> 2)];
			__Z11MarkerEventijiPh(8, 0, $9, $10);;
			return;
			return;
		}

		function __Z9SetPitch2P7voice_tiiPiS1_($voice, $pitch1, $pitch2, $pitch_base, $pitch_range) {;
			var __label__;
			var $voice_addr;
			var $pitch1_addr;
			var $pitch2_addr;
			var $pitch_base_addr;
			var $pitch_range_addr;
			var $x;
			var $base;
			var $range;
			var $pitch_value;
			$voice_addr = $voice;
			$pitch1_addr = $pitch1;
			$pitch2_addr = $pitch2;
			$pitch_base_addr = $pitch_base;
			$pitch_range_addr = $pitch_range;
			var $0 = $pitch1_addr;
			var $1 = $pitch2_addr;
			var $cmp = ((($0)) | 0) > ((($1)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = $pitch1_addr;
				$x = $2;
				var $3 = $pitch2_addr;
				$pitch1_addr = $3;
				var $4 = $x;
				$pitch2_addr = $4;;
			}
			var $5 = HEAP32[((((_embedded_value + 4) & 4294967295)) >> 2)];
			$pitch_value = $5;
			var $cmp1 = ((($5)) | 0) > 101;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				$pitch_value = 101;;
			}
			var $6 = HEAP32[((((_embedded_value + 24) & 4294967295)) >> 2)];
			var $7 = $pitch_value;
			var $sub = ((($7) - ($6)) & 4294967295);
			$pitch_value = $sub;
			var $cmp4 = ((($sub)) | 0) < 0;
			if ($cmp4) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				$pitch_value = 0;;
			}
			var $8 = $voice_addr;
			var $pitch_base7 = (($8 + 44) & 4294967295);
			var $9 = HEAP32[(($pitch_base7) >> 2)];
			var $10 = $pitch_value;
			var $arrayidx = ((_pitch_adjust_tab + $10) & 4294967295);
			var $11 = HEAPU8[($arrayidx)];
			var $conv = ((($11)) & 255);
			var $mul = ((($conv) * ($9)) & 4294967295);
			var $div = ((((($mul)) | 0) / 128) | 0);
			$base = $div;
			var $12 = $voice_addr;
			var $pitch_range8 = (($12 + 48) & 4294967295);
			var $13 = HEAP32[(($pitch_range8) >> 2)];
			var $14 = HEAP32[((((_embedded_value + 16) & 4294967295)) >> 2)];
			var $mul9 = ((($14) * ($13)) & 4294967295);
			var $div10 = ((((($mul9)) | 0) / 50) | 0);
			$range = $div10;
			var $15 = $range;
			var $16 = $voice_addr;
			var $pitch_range11 = (($16 + 48) & 4294967295);
			var $17 = HEAP32[(($pitch_range11) >> 2)];
			var $sub12 = ((($15) - ($17)) & 4294967295);
			var $mul13 = ((($sub12) * 18) & 4294967295);
			var $18 = $base;
			var $sub14 = ((($18) - ($mul13)) & 4294967295);
			$base = $sub14;
			var $19 = $base;
			var $20 = $pitch1_addr;
			var $21 = $range;
			var $mul15 = ((($21) * ($20)) & 4294967295);
			var $div16 = ((((($mul15)) | 0) / 2) | 0);
			var $add = ((($div16) + ($19)) & 4294967295);
			var $22 = $pitch_base_addr;
			HEAP32[(($22) >> 2)] = $add;
			var $23 = $base;
			var $24 = $pitch2_addr;
			var $25 = $range;
			var $mul17 = ((($25) * ($24)) & 4294967295);
			var $div18 = ((((($mul17)) | 0) / 2) | 0);
			var $26 = $pitch_base_addr;
			var $27 = HEAP32[(($26) >> 2)];
			var $_neg = (((-($27))) & 4294967295);
			var $add19 = ((($div18) + ($23)) & 4294967295);
			var $sub20 = ((($add19) + ($_neg)) & 4294967295);
			var $28 = $pitch_range_addr;
			HEAP32[(($28) >> 2)] = $sub20;;
			return;
			return;
		}

		function __Z8SetPitchiPhii($length, $env, $pitch1, $pitch2) {;
			var __label__;
			var $length_addr;
			var $env_addr;
			var $pitch1_addr;
			var $pitch2_addr;
			$length_addr = $length;
			$env_addr = $env;
			$pitch1_addr = $pitch1;
			$pitch2_addr = $pitch2;
			var $0 = $env_addr;
			HEAP32[((((_wdata) & 4294967295)) >> 2)] = $0;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((((_wdata) & 4294967295)) >> 2)] = ((_env_fall) & 4294967295);;
			}
			HEAP32[((((_wdata + 8) & 4294967295)) >> 2)] = 0;
			var $1 = $length_addr;
			var $cmp1 = ((($1)) | 0) == 0;
			if ($cmp1) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				HEAP32[((((_wdata + 12) & 4294967295)) >> 2)] = 0;;
			} else if (__label__ == 4) {
				var $2 = $length_addr;
				var $div = ((2097152 / ((($2)) | 0)) | 0);
				HEAP32[((((_wdata + 12) & 4294967295)) >> 2)] = $div;;
			}
			var $3 = HEAP32[((_wvoice) >> 2)];
			var $4 = $pitch1_addr;
			var $5 = $pitch2_addr;
			__Z9SetPitch2P7voice_tiiPiS1_($3, $4, $5, ((_wdata + 16) & 4294967295), ((_wdata + 20) & 4294967295));
			var $6 = HEAP32[((((_wdata) & 4294967295)) >> 2)];
			var $arrayidx = (($6) & 4294967295);
			var $7 = HEAPU8[($arrayidx)];
			var $conv = ((($7)) & 255);
			var $8 = HEAP32[((((_wdata + 20) & 4294967295)) >> 2)];
			var $mul = ((($conv) * ($8)) & 4294967295);
			var $shr = ($mul) >> 8;
			var $9 = HEAP32[((((_wdata + 16) & 4294967295)) >> 2)];
			var $add = ((($shr) + ($9)) & 4294967295);
			HEAP32[((((_wdata + 4) & 4294967295)) >> 2)] = $add;
			var $10 = HEAP32[((_wvoice) >> 2)];
			var $flutter = (($10 + 68) & 4294967295);
			var $11 = HEAP32[(($flutter) >> 2)];
			HEAP32[((__ZL11flutter_amp) >> 2)] = $11;;
			return;
			return;
		}

		function __Z8SetSynthiiP7frame_tS0_P7voice_t($length, $modn, $fr1, $fr2, $v) {;
			var __label__;
			var __lastLabel__ = null;
			var $length_addr;
			var $modn_addr;
			var $fr1_addr;
			var $fr2_addr;
			var $v_addr;
			var $ix;
			var $next;
			var $length2;
			var $length4;
			var $qix;
			var $cmd;
			$length_addr = $length;
			$modn_addr = $modn;
			$fr1_addr = $fr1;
			$fr2_addr = $fr2;
			$v_addr = $v;
			HEAP8[(__ZL8end_wave_b)] = 1;
			var $0 = $modn_addr;
			var $and = ($0) & 255;
			HEAP32[((__ZL15modulation_type) >> 2)] = $and;
			HEAP32[((__ZL12glottal_flag) >> 2)] = 0;
			var $1 = $modn_addr;
			var $and1 = ($1) & 1024;
			var $tobool = ((($and1)) | 0) != 0;
			if ($tobool) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((__ZL12glottal_flag) >> 2)] = 3;
				var $2 = $modn_addr;
				var $shr = ($2) >> 8;
				var $and2 = ($shr) & 3;
				var $arrayidx = ((__ZZ8SetSynthiiP7frame_tS0_P7voice_tE19glottal_reduce_tab1 + $and2 * 4) & 4294967295);
				var $3 = HEAP32[(($arrayidx) >> 2)];
				HEAP32[((__ZL14glottal_reduce) >> 2)] = $3;;
			}
			var $4 = $modn_addr;
			var $and3 = ($4) & 2048;
			var $tobool4 = ((($and3)) | 0) != 0;
			if ($tobool4) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				HEAP32[((__ZL12glottal_flag) >> 2)] = 4;
				var $5 = $modn_addr;
				var $shr6 = ($5) >> 8;
				var $and7 = ($shr6) & 3;
				var $arrayidx8 = ((__ZZ8SetSynthiiP7frame_tS0_P7voice_tE19glottal_reduce_tab2 + $and7 * 4) & 4294967295);
				var $6 = HEAP32[(($arrayidx8) >> 2)];
				HEAP32[((__ZL14glottal_reduce) >> 2)] = $6;;
			}
			var $7 = HEAP32[((_wcmdq_head) >> 2)];
			var $add = ((($7) + 1) & 4294967295);
			$qix = $add;
			__lastLabel__ = 4;;
			$for_cond$8: while (1) {
				var $8 = __lastLabel__ == 11 ? $inc : ($add);
				var $cmp = ((($8)) | 0) >= 160;
				if ($cmp) {
					__label__ = 6;;
				} else {
					__label__ = 7;;
				}
				if (__label__ == 6) {
					$qix = 0;;
				}
				var $9 = $qix;
				var $10 = HEAP32[((_wcmdq_tail) >> 2)];
				var $cmp12 = ((($9)) | 0) == ((($10)) | 0);
				if ($cmp12) {
					__label__ = 12;
					break $for_cond$8;
				}
				var $11 = $qix;
				var $arrayidx15 = ((_wcmdq + $11 * 16) & 4294967295);
				var $arrayidx16 = (($arrayidx15) & 4294967295);
				var $12 = HEAP32[(($arrayidx16) >> 2)];
				$cmd = $12;
				var $13 = $cmd;
				var $cmp17 = ((($13)) | 0) == 3;
				if ($cmp17) {
					__label__ = 9;
					break $for_cond$8;
				}
				var $14 = $cmd;
				var $cmp20 = ((($14)) | 0) == 6;
				var $15 = $cmd;
				var $cmp21 = ((($15)) | 0) == 5;
				var $or_cond = ($cmp20) | ($cmp21);
				if ($or_cond) {
					__label__ = 12;
					break $for_cond$8;
				}
				var $16 = $qix;
				var $inc = ((($16) + 1) & 4294967295);
				$qix = $inc;
				__lastLabel__ = 11;
				__label__ = 5;
				continue $for_cond$8;
			}
			if (__label__ == 9) {
				HEAP8[(__ZL8end_wave_b)] = 0;;
			}
			var $17 = $length_addr;
			var $add24 = ((($17) + 32) & 4294967295);
			var $and25 = ($add24) & -64;
			$length2 = $and25;
			var $cmp26 = ((($and25)) | 0) == 0;
			if ($cmp26) {
				__label__ = 13;;
			} else {
				__label__ = 14;;
			}
			if (__label__ == 13) {
				$length2 = 64;;
			}
			var $18 = HEAP32[((__ZL11samplecount) >> 2)];
			HEAP32[((__ZL17samplecount_start) >> 2)] = $18;
			var $19 = $length2;
			var $20 = HEAP32[((__ZL8nsamples) >> 2)];
			var $add29 = ((($20) + ($19)) & 4294967295);
			HEAP32[((__ZL8nsamples) >> 2)] = $add29;
			var $21 = $length2;
			var $div = ((((($21)) | 0) / 4) | 0);
			$length4 = $div;
			var $22 = $v_addr;
			var $freq = (($22 + 144) & 4294967295);
			var $arrayidx30 = (($freq + 14) & 4294967295);
			var $23 = HEAP16[(($arrayidx30) >> 1)];
			var $conv = (tempInt = (($23)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $mul = ((($conv) * 7800) & 4294967295);
			var $24 = $v_addr;
			var $freqadd = (($24 + 198) & 4294967295);
			var $arrayidx31 = (($freqadd + 14) & 4294967295);
			var $25 = HEAP16[(($arrayidx31) >> 1)];
			var $conv32 = (tempInt = (($25)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $mul33 = ((($conv32) * 256) & 4294967295);
			var $add34 = ((($mul33) + ($mul)) & 4294967295);
			var $shl = ($add34) << 8;
			HEAP32[((((__ZL5peaks + 560) & 4294967295)) >> 2)] = $shl;
			var $26 = $v_addr;
			var $freq35 = (($26 + 144) & 4294967295);
			var $arrayidx36 = (($freq35 + 16) & 4294967295);
			var $27 = HEAP16[(($arrayidx36) >> 1)];
			var $conv37 = (tempInt = (($27)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $mul38 = ((($conv37) * 9000) & 4294967295);
			var $28 = $v_addr;
			var $freqadd39 = (($28 + 198) & 4294967295);
			var $arrayidx40 = (($freqadd39 + 16) & 4294967295);
			var $29 = HEAP16[(($arrayidx40) >> 1)];
			var $conv41 = (tempInt = (($29)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $mul42 = ((($conv41) * 256) & 4294967295);
			var $add43 = ((($mul42) + ($mul38)) & 4294967295);
			var $shl44 = ($add43) << 8;
			HEAP32[((((__ZL5peaks + 640) & 4294967295)) >> 2)] = $shl44;
			$ix = 0;
			__lastLabel__ = 14;;
			$for_body$22: while (1) {
				var $30 = __lastLabel__ == 14 ? 0 : ($inc187);
				var $cmp47 = ((($30)) | 0) < 7;
				if ($cmp47) {
					__label__ = 16;;
				} else {
					__label__ = 17;;
				}
				if (__label__ == 16) {
					var $31 = $ix;
					var $32 = $fr1_addr;
					var $ffreq = (($32 + 2) & 4294967295);
					var $arrayidx49 = (($ffreq + $31 * 2) & 4294967295);
					var $33 = HEAP16[(($arrayidx49) >> 1)];
					var $conv50 = (tempInt = (($33)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $34 = $ix;
					var $35 = $v_addr;
					var $freq51 = (($35 + 144) & 4294967295);
					var $arrayidx52 = (($freq51 + $34 * 2) & 4294967295);
					var $36 = HEAP16[(($arrayidx52) >> 1)];
					var $conv53 = (tempInt = (($36)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $mul54 = ((($conv53) * ($conv50)) & 4294967295);
					var $37 = $ix;
					var $38 = $v_addr;
					var $freqadd55 = (($38 + 198) & 4294967295);
					var $arrayidx56 = (($freqadd55 + $37 * 2) & 4294967295);
					var $39 = HEAP16[(($arrayidx56) >> 1)];
					var $conv57 = (tempInt = (($39)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $mul58 = ((($conv57) * 256) & 4294967295);
					var $add59 = ((($mul58) + ($mul54)) & 4294967295);
					var $shl60 = ($add59) << 8;
					var $conv61 = ((($shl60)) | 0);
					var $40 = $ix;
					var $arrayidx62 = ((__ZL5peaks + $40 * 80) & 4294967295);
					var $freq1 = (($arrayidx62 + 16) & 4294967295);
					HEAPF32[(($freq1) >> 2)] = $conv61;
					var $41 = $ix;
					var $arrayidx63 = ((__ZL5peaks + $41 * 80) & 4294967295);
					var $freq164 = (($arrayidx63 + 16) & 4294967295);
					var $42 = HEAPF32[(($freq164) >> 2)];
					var $conv65 = ((($42)) | 0);
					var $43 = $ix;
					var $arrayidx66 = ((__ZL5peaks + $43 * 80) & 4294967295);
					var $freq67 = (($arrayidx66) & 4294967295);
					HEAP32[(($freq67) >> 2)] = $conv65;
					var $44 = $ix;
					var $45 = $fr2_addr;
					var $ffreq68 = (($45 + 2) & 4294967295);
					var $arrayidx69 = (($ffreq68 + $44 * 2) & 4294967295);
					var $46 = HEAP16[(($arrayidx69) >> 1)];
					var $conv70 = (tempInt = (($46)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $47 = $ix;
					var $48 = $v_addr;
					var $freq71 = (($48 + 144) & 4294967295);
					var $arrayidx72 = (($freq71 + $47 * 2) & 4294967295);
					var $49 = HEAP16[(($arrayidx72) >> 1)];
					var $conv73 = (tempInt = (($49)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $mul74 = ((($conv73) * ($conv70)) & 4294967295);
					var $50 = $ix;
					var $51 = $v_addr;
					var $freqadd75 = (($51 + 198) & 4294967295);
					var $arrayidx76 = (($freqadd75 + $50 * 2) & 4294967295);
					var $52 = HEAP16[(($arrayidx76) >> 1)];
					var $conv77 = (tempInt = (($52)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $mul78 = ((($conv77) * 256) & 4294967295);
					var $add79 = ((($mul78) + ($mul74)) & 4294967295);
					var $shl80 = ($add79) << 8;
					var $conv81 = ((($shl80)) | 0);
					$next = $conv81;
					var $53 = $next;
					var $54 = $ix;
					var $arrayidx82 = ((__ZL5peaks + $54 * 80) & 4294967295);
					var $freq183 = (($arrayidx82 + 16) & 4294967295);
					var $55 = HEAPF32[(($freq183) >> 2)];
					var $sub = ($53) - ($55);
					var $mul84 = ($sub) * 16;
					var $56 = $length4;
					var $conv85 = ((($56)) | 0);
					var $div86 = ($mul84) / ($conv85);
					var $57 = $ix;
					var $arrayidx87 = ((__ZL5peaks + $57 * 80) & 4294967295);
					var $freq_inc = (($arrayidx87 + 48) & 4294967295);
					HEAPF32[(($freq_inc) >> 2)] = $div86;;
				}
				var $58 = $ix;
				var $59 = $fr1_addr;
				var $fheight = (($59 + 18) & 4294967295);
				var $arrayidx89 = (($fheight + $58) & 4294967295);
				var $60 = HEAPU8[($arrayidx89)];
				var $conv90 = ((($60)) & 255);
				var $61 = $ix;
				var $62 = $v_addr;
				var $height = (($62 + 162) & 4294967295);
				var $arrayidx91 = (($height + $61 * 2) & 4294967295);
				var $63 = HEAP16[(($arrayidx91) >> 1)];
				var $conv92 = (tempInt = (($63)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $mul93 = ((($conv90) * 64) & 4294967295);
				var $shl94 = ((($mul93) * ($conv92)) & 4294967295);
				var $conv95 = ((($shl94)) | 0);
				var $64 = $ix;
				var $arrayidx96 = ((__ZL5peaks + $64 * 80) & 4294967295);
				var $height1 = (($arrayidx96 + 24) & 4294967295);
				HEAPF32[(($height1) >> 2)] = $conv95;
				var $65 = $ix;
				var $arrayidx97 = ((__ZL5peaks + $65 * 80) & 4294967295);
				var $height198 = (($arrayidx97 + 24) & 4294967295);
				var $66 = HEAPF32[(($height198) >> 2)];
				var $conv99 = ((($66)) | 0);
				var $67 = $ix;
				var $arrayidx100 = ((__ZL5peaks + $67 * 80) & 4294967295);
				var $height101 = (($arrayidx100 + 4) & 4294967295);
				HEAP32[(($height101) >> 2)] = $conv99;
				var $68 = $ix;
				var $69 = $fr2_addr;
				var $fheight102 = (($69 + 18) & 4294967295);
				var $arrayidx103 = (($fheight102 + $68) & 4294967295);
				var $70 = HEAPU8[($arrayidx103)];
				var $conv104 = ((($70)) & 255);
				var $71 = $ix;
				var $72 = $v_addr;
				var $height105 = (($72 + 162) & 4294967295);
				var $arrayidx106 = (($height105 + $71 * 2) & 4294967295);
				var $73 = HEAP16[(($arrayidx106) >> 1)];
				var $conv107 = (tempInt = (($73)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $mul108 = ((($conv104) * 64) & 4294967295);
				var $shl109 = ((($mul108) * ($conv107)) & 4294967295);
				var $conv110 = ((($shl109)) | 0);
				$next = $conv110;
				var $74 = $next;
				var $75 = $ix;
				var $arrayidx111 = ((__ZL5peaks + $75 * 80) & 4294967295);
				var $height1112 = (($arrayidx111 + 24) & 4294967295);
				var $76 = HEAPF32[(($height1112) >> 2)];
				var $sub113 = ($74) - ($76);
				var $mul114 = ($sub113) * 64;
				var $77 = $length2;
				var $conv115 = ((($77)) | 0);
				var $div116 = ($mul114) / ($conv115);
				var $78 = $ix;
				var $arrayidx117 = ((__ZL5peaks + $78 * 80) & 4294967295);
				var $height_inc = (($arrayidx117 + 56) & 4294967295);
				HEAPF32[(($height_inc) >> 2)] = $div116;
				var $79 = $ix;
				var $cmp118 = ((($79)) | 0) <= 5;
				if ($cmp118) {
					__label__ = 18;;
				} else {
					__label__ = 22;;
				}
				$land_lhs_true$$for_inc186$27: do {
					if (__label__ == 18) {
						var $80 = $ix;
						var $81 = HEAP32[((_wvoice) >> 2)];
						var $n_harmonic_peaks = (($81 + 84) & 4294967295);
						var $82 = HEAP32[(($n_harmonic_peaks) >> 2)];
						var $cmp119 = ((($80)) | 0) <= ((($82)) | 0);
						if (!($cmp119)) {
							__label__ = 22;
							break $land_lhs_true$$for_inc186$27;
						}
						var $83 = $ix;
						var $84 = $fr1_addr;
						var $fwidth = (($84 + 26) & 4294967295);
						var $arrayidx121 = (($fwidth + $83) & 4294967295);
						var $85 = HEAPU8[($arrayidx121)];
						var $conv122 = ((($85)) & 255);
						var $86 = $ix;
						var $87 = $v_addr;
						var $width = (($87 + 180) & 4294967295);
						var $arrayidx123 = (($width + $86 * 2) & 4294967295);
						var $88 = HEAP16[(($arrayidx123) >> 1)];
						var $conv124 = (tempInt = (($88)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $mul125 = ((($conv122) * 1024) & 4294967295);
						var $shl126 = ((($mul125) * ($conv124)) & 4294967295);
						var $conv127 = ((($shl126)) | 0);
						var $89 = $ix;
						var $arrayidx128 = ((__ZL5peaks + $89 * 80) & 4294967295);
						var $left1 = (($arrayidx128 + 32) & 4294967295);
						HEAPF32[(($left1) >> 2)] = $conv127;
						var $90 = $ix;
						var $arrayidx129 = ((__ZL5peaks + $90 * 80) & 4294967295);
						var $left1130 = (($arrayidx129 + 32) & 4294967295);
						var $91 = HEAPF32[(($left1130) >> 2)];
						var $conv131 = ((($91)) | 0);
						var $92 = $ix;
						var $arrayidx132 = ((__ZL5peaks + $92 * 80) & 4294967295);
						var $left = (($arrayidx132 + 8) & 4294967295);
						HEAP32[(($left) >> 2)] = $conv131;
						var $93 = $ix;
						var $94 = $fr2_addr;
						var $fwidth133 = (($94 + 26) & 4294967295);
						var $arrayidx134 = (($fwidth133 + $93) & 4294967295);
						var $95 = HEAPU8[($arrayidx134)];
						var $conv135 = ((($95)) & 255);
						var $96 = $ix;
						var $97 = $v_addr;
						var $width136 = (($97 + 180) & 4294967295);
						var $arrayidx137 = (($width136 + $96 * 2) & 4294967295);
						var $98 = HEAP16[(($arrayidx137) >> 1)];
						var $conv138 = (tempInt = (($98)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $mul139 = ((($conv135) * 1024) & 4294967295);
						var $shl140 = ((($mul139) * ($conv138)) & 4294967295);
						var $conv141 = ((($shl140)) | 0);
						$next = $conv141;
						var $99 = $next;
						var $100 = $ix;
						var $arrayidx142 = ((__ZL5peaks + $100 * 80) & 4294967295);
						var $left1143 = (($arrayidx142 + 32) & 4294967295);
						var $101 = HEAPF32[(($left1143) >> 2)];
						var $sub144 = ($99) - ($101);
						var $mul145 = ($sub144) * 64;
						var $102 = $length2;
						var $conv146 = ((($102)) | 0);
						var $div147 = ($mul145) / ($conv146);
						var $103 = $ix;
						var $arrayidx148 = ((__ZL5peaks + $103 * 80) & 4294967295);
						var $left_inc = (($arrayidx148 + 64) & 4294967295);
						HEAPF32[(($left_inc) >> 2)] = $div147;
						var $104 = $ix;
						var $cmp149 = ((($104)) | 0) < 3;
						var $105 = $ix;
						if ($cmp149) {
							__label__ = 20;;
						} else {
							__label__ = 21;;
						}
						if (__label__ == 20) {
							var $106 = $fr1_addr;
							var $fright = (($106 + 32) & 4294967295);
							var $arrayidx151 = (($fright + $105) & 4294967295);
							var $107 = HEAPU8[($arrayidx151)];
							var $conv152 = ((($107)) & 255);
							var $108 = $ix;
							var $109 = $v_addr;
							var $width153 = (($109 + 180) & 4294967295);
							var $arrayidx154 = (($width153 + $108 * 2) & 4294967295);
							var $110 = HEAP16[(($arrayidx154) >> 1)];
							var $conv155 = (tempInt = (($110)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $mul156 = ((($conv152) * 1024) & 4294967295);
							var $shl157 = ((($mul156) * ($conv155)) & 4294967295);
							var $conv158 = ((($shl157)) | 0);
							var $111 = $ix;
							var $arrayidx159 = ((__ZL5peaks + $111 * 80) & 4294967295);
							var $right1 = (($arrayidx159 + 40) & 4294967295);
							HEAPF32[(($right1) >> 2)] = $conv158;
							var $112 = $ix;
							var $arrayidx160 = ((__ZL5peaks + $112 * 80) & 4294967295);
							var $right1161 = (($arrayidx160 + 40) & 4294967295);
							var $113 = HEAPF32[(($right1161) >> 2)];
							var $conv162 = ((($113)) | 0);
							var $114 = $ix;
							var $arrayidx163 = ((__ZL5peaks + $114 * 80) & 4294967295);
							var $right = (($arrayidx163 + 12) & 4294967295);
							HEAP32[(($right) >> 2)] = $conv162;
							var $115 = $ix;
							var $116 = $fr2_addr;
							var $fright164 = (($116 + 32) & 4294967295);
							var $arrayidx165 = (($fright164 + $115) & 4294967295);
							var $117 = HEAPU8[($arrayidx165)];
							var $conv166 = ((($117)) & 255);
							var $118 = $ix;
							var $119 = $v_addr;
							var $width167 = (($119 + 180) & 4294967295);
							var $arrayidx168 = (($width167 + $118 * 2) & 4294967295);
							var $120 = HEAP16[(($arrayidx168) >> 1)];
							var $conv169 = (tempInt = (($120)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $mul170 = ((($conv166) * 1024) & 4294967295);
							var $shl171 = ((($mul170) * ($conv169)) & 4294967295);
							var $conv172 = ((($shl171)) | 0);
							$next = $conv172;
							var $121 = $next;
							var $122 = $ix;
							var $arrayidx173 = ((__ZL5peaks + $122 * 80) & 4294967295);
							var $right1174 = (($arrayidx173 + 40) & 4294967295);
							var $123 = HEAPF32[(($right1174) >> 2)];
							var $sub175 = ($121) - ($123);
							var $mul176 = ($sub175) * 64;
							var $124 = $length2;
							var $conv177 = ((($124)) | 0);
							var $div178 = ($mul176) / ($conv177);
							var $125 = $ix;
							var $arrayidx179 = ((__ZL5peaks + $125 * 80) & 4294967295);
							var $right_inc = (($arrayidx179 + 72) & 4294967295);
							HEAPF32[(($right_inc) >> 2)] = $div178;;
						} else if (__label__ == 21) {
							var $arrayidx180 = ((__ZL5peaks + $105 * 80) & 4294967295);
							var $left181 = (($arrayidx180 + 8) & 4294967295);
							var $126 = HEAP32[(($left181) >> 2)];
							var $127 = $ix;
							var $arrayidx182 = ((__ZL5peaks + $127 * 80) & 4294967295);
							var $right183 = (($arrayidx182 + 12) & 4294967295);
							HEAP32[(($right183) >> 2)] = $126;;
						}
					}
				} while (0);
				var $128 = $ix;
				var $inc187 = ((($128) + 1) & 4294967295);
				$ix = $inc187;
				var $cmp46 = ((($inc187)) | 0) < 8;
				if ($cmp46) {
					__lastLabel__ = 22;
					__label__ = 15;
					continue $for_body$22;
				} else {
					__lastLabel__ = 22;
					__label__ = 23;
					break $for_body$22;
				}
			};
			return;
			return;
		}

		function __Z11Write4BytesP7__sFILEi($f, $value) {;
			var __label__;
			var $f_addr;
			var $value_addr;
			var $ix;
			$f_addr = $f;
			$value_addr = $value;
			$ix = 0;;
			while (1) {
				var $0 = $value_addr;
				var $and = ($0) & 255;
				var $1 = $f_addr;
				var $call = _fputc($and, $1);
				var $2 = $value_addr;
				var $shr = ($2) >> 8;
				$value_addr = $shr;
				var $3 = $ix;
				var $inc = ((($3) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) < 4;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			};
			return;
			return;
		}

		function __Z12WavegenFill2i($fill_zeros) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $fill_zeros_addr;
			var $q;
			var $length;
			var $result;
			$fill_zeros_addr = $fill_zeros;;
			$while_cond$2: while (1) {
				var $0 = HEAPU32[((_out_ptr) >> 2)];
				var $1 = HEAPU32[((_out_end) >> 2)];
				var $cmp = ((($0)) >>> 0) < ((($1)) >>> 0);
				if (!($cmp)) {
					__label__ = 36;
					break $while_cond$2;
				}
				var $call = __Z9WcmdqUsedv();
				var $cmp1 = ((($call)) | 0) <= 0;
				if ($cmp1) {
					__label__ = 3;
					break $while_cond$2;
				}
				$result = 0;
				var $12 = HEAP32[((_wcmdq_head) >> 2)];
				var $arrayidx = ((_wcmdq + $12 * 16) & 4294967295);
				var $arraydecay = (($arrayidx) & 4294967295);
				$q = $arraydecay;
				var $13 = $q;
				var $arrayidx14 = (($13 + 4) & 4294967295);
				var $14 = HEAP32[(($arrayidx14) >> 2)];
				$length = $14;
				var $15 = $q;
				var $arrayidx15 = (($15) & 4294967295);
				var $16 = HEAP32[(($arrayidx15) >> 2)];
				if ($16 == 9) {
					__label__ = 11;;
				} else if ($16 == 5) {
					__label__ = 12;;
				} else if ($16 == 6) {
					__label__ = 15;;
				} else if ($16 == 7) {
					__label__ = 16;;
				} else if ($16 == 4) {
					__label__ = 19;;
				} else if ($16 == 3) {
					__label__ = 20;;
				} else if ($16 == 2) {
					__label__ = 21;;
				} else if ($16 == 1) {
					__label__ = 22;;
				} else if ($16 == 10) {
					__label__ = 23;;
				} else if ($16 == 8) {
					__label__ = 25;;
				} else if ($16 == 11) {
					__label__ = 26;;
				} else if ($16 == 12) {
					__label__ = 27;;
				} else if ($16 == 13) {
					__label__ = 28;;
				} else if ($16 == 14) {
					__label__ = 29;;
				} else if ($16 == 15) {
					__label__ = 31;;
				} else {
					__label__ = 32;;
				}
				$sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6: do {
					if (__label__ == 11) {
						var $17 = $length;
						var $18 = $q;
						var $arrayidx16 = (($18 + 8) & 4294967295);
						var $19 = HEAP32[(($arrayidx16) >> 2)];
						var $20 = ($19);
						var $21 = $q;
						var $arrayidx17 = (($21 + 12) & 4294967295);
						var $22 = HEAP32[(($arrayidx17) >> 2)];
						var $shr = ($22) >> 16;
						var $23 = $q;
						var $arrayidx18 = (($23 + 12) & 4294967295);
						var $24 = HEAP32[(($arrayidx18) >> 2)];
						var $and = ($24) & 65535;
						__Z8SetPitchiPhii($17, $20, $shr, $and);
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 12) {
						var $25 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
						var $cmp20 = ((($25)) | 0) == 0;
						if ($cmp20) {
							__label__ = 13;;
						} else {
							__label__ = 14;;
						}
						if (__label__ == 13) {
							var $26 = $length;
							var $27 = HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)];
							var $sub = ((($27) - ($26)) & 4294967295);
							HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)] = $sub;;
						}
						HEAP32[((((_wdata + 28) & 4294967295)) >> 2)] = 0;
						HEAP32[((((_wdata + 60) & 4294967295)) >> 2)] = 100;
						__Z10KlattReseti(1);
						var $28 = $length;
						var $29 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
						var $call23 = __ZL11PlaySilenceii($28, $29);
						$result = $call23;
						__lastLabel__ = 14;
						__label__ = 33;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 15) {
						var $30 = HEAP32[((__ZL11echo_length) >> 2)];
						HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)] = $30;
						HEAP32[((((_wdata + 28) & 4294967295)) >> 2)] = 0;
						__Z10KlattReseti(1);
						var $31 = $length;
						var $32 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
						var $33 = $q;
						var $arrayidx25 = (($33 + 8) & 4294967295);
						var $34 = HEAP32[(($arrayidx25) >> 2)];
						var $35 = ($34);
						var $36 = $q;
						var $arrayidx26 = (($36 + 12) & 4294967295);
						var $37 = HEAP32[(($arrayidx26) >> 2)];
						var $and27 = ($37) & 255;
						var $38 = $q;
						var $arrayidx28 = (($38 + 12) & 4294967295);
						var $39 = HEAP32[(($arrayidx28) >> 2)];
						var $shr29 = ($39) >> 8;
						var $call30 = __ZL8PlayWaveiiPhii($31, $32, $35, $and27, $shr29);
						$result = $call30;
						__lastLabel__ = 15;
						__label__ = 33;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 16) {
						var $40 = $q;
						var $arrayidx32 = (($40 + 12) & 4294967295);
						var $41 = HEAP32[(($arrayidx32) >> 2)];
						var $shr33 = ($41) >> 8;
						HEAP32[((((_wdata + 36) & 4294967295)) >> 2)] = $shr33;
						var $42 = $q;
						var $arrayidx34 = (($42 + 12) & 4294967295);
						var $43 = HEAP32[(($arrayidx34) >> 2)];
						var $and35 = ($43) & 255;
						HEAP32[((((_wdata + 32) & 4294967295)) >> 2)] = $and35;
						var $44 = $length;
						var $and36 = ($44) & 65535;
						HEAP32[((((_wdata + 28) & 4294967295)) >> 2)] = $and36;
						var $45 = $length;
						var $shr37 = ($45) >> 16;
						var $and38 = ($shr37) & 65535;
						HEAP32[((((_wdata + 44) & 4294967295)) >> 2)] = $and38;
						var $46 = HEAP32[((((_wdata + 32) & 4294967295)) >> 2)];
						var $cmp39 = ((($46)) | 0) == 0;
						if ($cmp39) {
							__label__ = 17;;
						} else {
							__label__ = 18;;
						}
						if (__label__ == 17) {
							var $47 = HEAP32[((((_wdata + 28) & 4294967295)) >> 2)];
							var $mul = ((($47) * 2) & 4294967295);
							HEAP32[((((_wdata + 28) & 4294967295)) >> 2)] = $mul;
							var $48 = HEAP32[((((_wdata + 44) & 4294967295)) >> 2)];
							var $mul41 = ((($48) * 2) & 4294967295);
							HEAP32[((((_wdata + 44) & 4294967295)) >> 2)] = $mul41;;
						}
						HEAP32[((((_wdata + 40) & 4294967295)) >> 2)] = 0;
						HEAP32[((((_wdata + 48) & 4294967295)) >> 2)] = 0;
						var $49 = $q;
						var $arrayidx43 = (($49 + 8) & 4294967295);
						var $50 = HEAP32[(($arrayidx43) >> 2)];
						var $51 = ($50);
						HEAP32[((((_wdata + 24) & 4294967295)) >> 2)] = $51;
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 19) {
						HEAP32[((((_wdata + 28) & 4294967295)) >> 2)] = 0;
						__label__ = 20;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 21) {
						HEAP32[((((_wdata + 28) & 4294967295)) >> 2)] = 0;
						__label__ = 22;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 23) {
						var $74 = $q;
						var $arrayidx61 = (($74 + 4) & 4294967295);
						var $75 = HEAP32[(($arrayidx61) >> 2)];
						var $76 = $q;
						var $arrayidx62 = (($76 + 8) & 4294967295);
						var $77 = HEAP32[(($arrayidx62) >> 2)];
						var $78 = $q;
						var $arrayidx63 = (($78 + 12) & 4294967295);
						var $79 = HEAP32[(($arrayidx63) >> 2)];
						var $80 = HEAP32[((_out_ptr) >> 2)];
						__Z11MarkerEventijiPh($75, $77, $79, $80);
						var $81 = $q;
						var $arrayidx64 = (($81 + 4) & 4294967295);
						var $82 = HEAP32[(($arrayidx64) >> 2)];
						var $cmp65 = ((($82)) | 0) == 1;
						if (!($cmp65)) {
							__label__ = 32;
							break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
						}
						var $83 = $q;
						var $arrayidx67 = (($83 + 8) & 4294967295);
						var $84 = HEAP32[(($arrayidx67) >> 2)];
						var $and68 = ($84) & 16777215;
						HEAP32[((_current_source_index) >> 2)] = $and68;
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 25) {
						var $85 = $length;
						var $86 = $q;
						var $arrayidx71 = (($86 + 8) & 4294967295);
						var $87 = HEAP32[(($arrayidx71) >> 2)];
						var $88 = ($87);
						var $89 = $q;
						var $arrayidx72 = (($89 + 12) & 4294967295);
						var $90 = HEAP32[(($arrayidx72) >> 2)];
						__ZL12SetAmplitudeiPhi($85, $88, $90);
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 26) {
						var $91 = $q;
						var $arrayidx74 = (($91 + 4) & 4294967295);
						var $92 = HEAP32[(($arrayidx74) >> 2)];
						var $93 = ($92);
						__Z15WavegenSetVoiceP7voice_t($93);
						var $94 = $q;
						var $arrayidx75 = (($94 + 4) & 4294967295);
						var $95 = HEAP32[(($arrayidx75) >> 2)];
						var $96 = ($95);
						var $97 = $96;;
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 27) {
						var $98 = $q;
						var $arrayidx77 = (($98 + 4) & 4294967295);
						var $99 = HEAP32[(($arrayidx77) >> 2)];
						var $100 = $q;
						var $arrayidx78 = (($100 + 8) & 4294967295);
						var $101 = HEAP32[(($arrayidx78) >> 2)];
						__Z11SetEmbeddedii($99, $101);
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 28) {
						var $102 = $length;
						var $103 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
						var $call80 = __Z10MbrolaFillii($102, $103);
						$result = $call80;
						__lastLabel__ = 28;
						__label__ = 33;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 29) {
						var $104 = $q;
						var $arrayidx82 = (($104 + 4) & 4294967295);
						var $105 = HEAP32[(($arrayidx82) >> 2)];
						HEAP32[((((_wdata + 60) & 4294967295)) >> 2)] = $105;
						var $cmp83 = ((($105)) | 0) == 0;
						if (!($cmp83)) {
							__label__ = 32;
							break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
						}
						HEAP32[((((_wdata + 60) & 4294967295)) >> 2)] = 100;
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					} else if (__label__ == 31) {
						var $106 = $q;
						var $arrayidx87 = (($106 + 4) & 4294967295);
						var $107 = HEAP32[(($arrayidx87) >> 2)];
						var $conv = ((($107)) | 0);
						var $div = ($conv) / 1024;
						HEAPF32[((_sonicSpeed) >> 2)] = $div;
						__label__ = 32;
						break $sw_epilogthread_pre_split$$sw_bb$$sw_bb19$$sw_bb24$$sw_bb31$$sw_bb44$$sw_bb45$$sw_bb52$$sw_bb53$$sw_bb60$$sw_bb70$$sw_bb73$$sw_bb76$$sw_bb79$$sw_bb81$$sw_bb86$6;
					}
				} while (0);
				if (__label__ == 32) {
					var $_pr = $result;
					__lastLabel__ = 32;;
				} else if (__label__ == 20) {
					var $52 = HEAP32[((__ZL11echo_length) >> 2)];
					HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)] = $52;
					var $53 = $length;
					var $and46 = ($53) & 65535;
					var $54 = $q;
					var $arrayidx47 = (($54 + 4) & 4294967295);
					var $55 = HEAP32[(($arrayidx47) >> 2)];
					var $shr48 = ($55) >> 16;
					var $56 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
					var $57 = $q;
					var $arrayidx49 = (($57 + 8) & 4294967295);
					var $58 = HEAP32[(($arrayidx49) >> 2)];
					var $59 = ($58);
					var $60 = $q;
					var $arrayidx50 = (($60 + 12) & 4294967295);
					var $61 = HEAP32[(($arrayidx50) >> 2)];
					var $62 = ($61);
					var $call51 = __ZL8Wavegen2iiiP7frame_tS0_($and46, $shr48, $56, $59, $62);
					$result = $call51;
					__lastLabel__ = 20;;
				} else if (__label__ == 22) {
					var $63 = HEAP32[((__ZL11echo_length) >> 2)];
					HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)] = $63;
					var $64 = $length;
					var $and54 = ($64) & 65535;
					var $65 = $q;
					var $arrayidx55 = (($65 + 4) & 4294967295);
					var $66 = HEAP32[(($arrayidx55) >> 2)];
					var $shr56 = ($66) >> 16;
					var $67 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
					var $68 = $q;
					var $arrayidx57 = (($68 + 8) & 4294967295);
					var $69 = HEAP32[(($arrayidx57) >> 2)];
					var $70 = ($69);
					var $71 = $q;
					var $arrayidx58 = (($71 + 12) & 4294967295);
					var $72 = HEAP32[(($arrayidx58) >> 2)];
					var $73 = ($72);
					var $call59 = __Z14Wavegen_Klatt2iiiP7frame_tS0_($and54, $shr56, $67, $70, $73);
					$result = $call59;
					__lastLabel__ = 22;;
				}
				var $108 = __lastLabel__ == 32 ? $_pr : (__lastLabel__ == 28 ? $call80 : (__lastLabel__ == 22 ? $call59 : (__lastLabel__ == 20 ? $call51 : (__lastLabel__ == 15 ? $call30 : ($call23)))));
				var $cmp88 = ((($108)) | 0) == 0;
				if ($cmp88) {
					__label__ = 34;;
				} else {
					__label__ = 35;;
				}
				if (__label__ == 34) {
					__ZL12WcmdqIncHeadv();
					HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)] = 0;
					__label__ = 1;
					continue $while_cond$2;
				} else if (__label__ == 35) {
					HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)] = 1;
					__label__ = 1;
					continue $while_cond$2;
				}
			}
			$while_end91$$if_then$36: do {
				if (__label__ == 36) {
					$retval = 0;;
				} else if (__label__ == 3) {
					var $2 = HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)];
					var $cmp2 = ((($2)) | 0) > 0;
					if ($cmp2) {
						__label__ = 4;;
					} else {
						__label__ = 6;;
					}
					$if_then3$$if_end7$39: do {
						if (__label__ == 4) {
							var $3 = HEAP32[((__ZZ12WavegenFill2iE13echo_complete) >> 2)];
							var $4 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
							var $call4 = __ZL11PlaySilenceii($3, $4);
							HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)] = $call4;
							var $5 = HEAP32[((__ZZ12WavegenFill2iE6resume) >> 2)];
							var $cmp5 = ((($5)) | 0) == 1;
							if (!($cmp5)) {
								__label__ = 6;
								break $if_then3$$if_end7$39;
							}
							$retval = 0;
							__label__ = 37;
							break $while_end91$$if_then$36;
						}
					} while (0);
					var $6 = $fill_zeros_addr;
					var $tobool = ((($6)) | 0) != 0;
					if ($tobool) {
						__label__ = 7;;
					} else {
						__label__ = 9;;
					}
					$while_cond9_preheader$$if_end12$43: do {
						if (__label__ == 7) {
							var $7 = HEAPU32[((_out_ptr) >> 2)];
							var $8 = HEAPU32[((_out_end) >> 2)];
							var $cmp101 = ((($7)) >>> 0) < ((($8)) >>> 0);
							if (!($cmp101)) {
								__label__ = 9;
								break $while_cond9_preheader$$if_end12$43;
							}
							while (1) {
								var $9 = HEAP32[((_out_ptr) >> 2)];
								var $incdec_ptr = (($9 + 1) & 4294967295);
								HEAP32[((_out_ptr) >> 2)] = $incdec_ptr;
								HEAP8[($9)] = 0;
								var $10 = HEAPU32[((_out_ptr) >> 2)];
								var $11 = HEAPU32[((_out_end) >> 2)];
								var $cmp10 = ((($10)) >>> 0) < ((($11)) >>> 0);
								if ($cmp10) {
									__label__ = 8;
									continue;
								} else {
									__label__ = 9;
									break $while_cond9_preheader$$if_end12$43;
								}
							}
						}
					} while (0);
					$retval = 1;;
				}
			} while (0);
			var $109 = $retval;;
			return $109;
			return null;
		}

		function __ZL11PlaySilenceii($length, $resume) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $length_addr;
			var $resume_addr;
			var $value;
			$length_addr = $length;
			$resume_addr = $resume;
			$value = 0;
			HEAP32[((__ZL8nsamples) >> 2)] = 0;
			HEAP32[((__ZL11samplecount) >> 2)] = 0;
			HEAP32[((__ZL9wavephase) >> 2)] = 2147483647;
			var $0 = $length_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $1 = $resume_addr;
				var $cmp1 = ((($1)) | 0) == 0;
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				$if_then2$$while_condthread_pre_split$5: do {
					if (__label__ == 3) {
						var $2 = $length_addr;
						HEAP32[((__ZZL11PlaySilenceiiE9n_samples) >> 2)] = $2;
						__lastLabel__ = 3;
						__label__ = 5;
						break $if_then2$$while_condthread_pre_split$5;
					}
				} while (0);
				while (1) {
					if (__label__ == 5) {
						var $3 = __lastLabel__ == 4 ? $_pr : ($2);
						var $dec = ((($3) - 1) & 4294967295);
						HEAP32[((__ZZL11PlaySilenceiiE9n_samples) >> 2)] = $dec;
						var $cmp4 = ((($3)) | 0) > 0;
						if (!($cmp4)) {
							__label__ = 12;
							break;
						}
						var $4 = HEAP32[((_echo_tail) >> 2)];
						var $inc = ((($4) + 1) & 4294967295);
						HEAP32[((_echo_tail) >> 2)] = $inc;
						var $arrayidx = ((_echo_buf + $4 * 2) & 4294967295);
						var $5 = HEAP16[(($arrayidx) >> 1)];
						var $conv = (tempInt = (($5)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $6 = HEAP32[((_echo_amp) >> 2)];
						var $mul = ((($conv) * ($6)) & 4294967295);
						var $shr = ($mul) >> 8;
						$value = $shr;
						var $7 = HEAP32[((_echo_tail) >> 2)];
						var $cmp5 = ((($7)) | 0) >= 5500;
						if ($cmp5) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							HEAP32[((_echo_tail) >> 2)] = 0;;
						}
						var $8 = $value;
						var $conv8 = ((($8)) & 255);
						var $9 = HEAP32[((_out_ptr) >> 2)];
						var $incdec_ptr = (($9 + 1) & 4294967295);
						HEAP32[((_out_ptr) >> 2)] = $incdec_ptr;
						HEAP8[($9)] = $conv8;
						var $10 = $value;
						var $shr9 = ($10) >> 8;
						var $conv10 = ((($shr9)) & 255);
						var $11 = HEAP32[((_out_ptr) >> 2)];
						var $incdec_ptr11 = (($11 + 1) & 4294967295);
						HEAP32[((_out_ptr) >> 2)] = $incdec_ptr11;
						HEAP8[($11)] = $conv10;
						var $12 = $value;
						var $conv12 = ((($12)) & 65535);
						var $13 = HEAP32[((_echo_head) >> 2)];
						var $inc13 = ((($13) + 1) & 4294967295);
						HEAP32[((_echo_head) >> 2)] = $inc13;
						var $arrayidx14 = ((_echo_buf + $13 * 2) & 4294967295);
						HEAP16[(($arrayidx14) >> 1)] = $conv12;
						var $14 = HEAP32[((_echo_head) >> 2)];
						var $cmp15 = ((($14)) | 0) >= 5500;
						if ($cmp15) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							HEAP32[((_echo_head) >> 2)] = 0;;
						}
						var $15 = HEAPU32[((_out_ptr) >> 2)];
						var $16 = HEAPU32[((_out_end) >> 2)];
						var $cmp18 = ((($15)) >>> 0) >= ((($16)) >>> 0);
						if ($cmp18) {
							__label__ = 11;
							break;
						} else {
							__label__ = 4;
							continue;
						}
					} else if (__label__ == 4) {
						var $_pr = HEAP32[((__ZZL11PlaySilenceiiE9n_samples) >> 2)];
						__lastLabel__ = 4;
						__label__ = 5;
						continue;
					}
				}
				if (__label__ == 12) {
					$retval = 0;;
				} else if (__label__ == 11) {
					$retval = 1;;
				}
			}
			var $17 = $retval;;
			return $17;
			return null;
		}

		function __ZL8PlayWaveiiPhii($length, $resume, $data, $scale, $amp) {;
			var __label__;
			var $retval;
			var $length_addr;
			var $resume_addr;
			var $data_addr;
			var $scale_addr;
			var $amp_addr;
			var $value;
			var $c;
			$length_addr = $length;
			$resume_addr = $resume;
			$data_addr = $data;
			$scale_addr = $scale;
			$amp_addr = $amp;
			var $0 = $resume_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $length_addr;
				HEAP32[((__ZZL8PlayWaveiiPhiiE9n_samples) >> 2)] = $1;
				HEAP32[((__ZZL8PlayWaveiiPhiiE2ix) >> 2)] = 0;;
			}
			HEAP32[((__ZL8nsamples) >> 2)] = 0;
			HEAP32[((__ZL11samplecount) >> 2)] = 0;;
			$while_cond$5: while (1) {
				var $2 = HEAP32[((__ZZL8PlayWaveiiPhiiE9n_samples) >> 2)];
				var $dec = ((($2) - 1) & 4294967295);
				HEAP32[((__ZZL8PlayWaveiiPhiiE9n_samples) >> 2)] = $dec;
				var $cmp1 = ((($2)) | 0) > 0;
				if (!($cmp1)) {
					__label__ = 17;
					break $while_cond$5;
				}
				var $3 = $scale_addr;
				var $cmp2 = ((($3)) | 0) == 0;
				var $4 = HEAPU32[((__ZZL8PlayWaveiiPhiiE2ix) >> 2)];
				var $add = ((($4) + 1) & 4294967295);
				if ($cmp2) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $5 = $data_addr;
					var $arrayidx = (($5 + $add) & 4294967295);
					var $6 = HEAP8[($arrayidx)];
					$c = $6;
					var $7 = HEAP32[((__ZZL8PlayWaveiiPhiiE2ix) >> 2)];
					var $8 = $data_addr;
					var $arrayidx4 = (($8 + $7) & 4294967295);
					var $9 = HEAPU8[($arrayidx4)];
					var $conv = ((($9)) & 255);
					var $10 = $c;
					var $conv5 = (tempInt = (($10)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $mul = ((($conv5) * 256) & 4294967295);
					var $add6 = ((($mul) + ($conv)) & 4294967295);
					$value = $add6;
					var $11 = HEAP32[((__ZZL8PlayWaveiiPhiiE2ix) >> 2)];
					var $add7 = ((($11) + 2) & 4294967295);
					HEAP32[((__ZZL8PlayWaveiiPhiiE2ix) >> 2)] = $add7;;
				} else if (__label__ == 6) {
					HEAP32[((__ZZL8PlayWaveiiPhiiE2ix) >> 2)] = $add;
					var $12 = $data_addr;
					var $arrayidx8 = (($12 + $4) & 4294967295);
					var $13 = HEAP8[($arrayidx8)];
					var $conv9 = (tempInt = (($13)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $14 = $scale_addr;
					var $mul10 = ((($conv9) * ($14)) & 4294967295);
					$value = $mul10;;
				}
				var $15 = HEAP32[((__ZL13consonant_amp) >> 2)];
				var $16 = HEAP32[((__ZL17general_amplitude) >> 2)];
				var $17 = $value;
				var $mul12 = ((($16) * ($15)) & 4294967295);
				var $mul13 = ((($mul12) * ($17)) & 4294967295);
				$value = $mul13;
				var $18 = $value;
				var $shr = ($18) >> 10;
				$value = $shr;
				var $19 = $value;
				var $20 = $amp_addr;
				var $mul14 = ((($20) * ($19)) & 4294967295);
				var $div = ((((($mul14)) | 0) / 32) | 0);
				$value = $div;
				var $21 = HEAP32[((_echo_tail) >> 2)];
				var $inc15 = ((($21) + 1) & 4294967295);
				HEAP32[((_echo_tail) >> 2)] = $inc15;
				var $arrayidx16 = ((_echo_buf + $21 * 2) & 4294967295);
				var $22 = HEAP16[(($arrayidx16) >> 1)];
				var $conv17 = (tempInt = (($22)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $23 = HEAP32[((_echo_amp) >> 2)];
				var $mul18 = ((($conv17) * ($23)) & 4294967295);
				var $shr19 = ($mul18) >> 8;
				var $24 = $value;
				var $add20 = ((($shr19) + ($24)) & 4294967295);
				$value = $add20;
				var $cmp21 = ((($add20)) | 0) > 32767;
				if ($cmp21) {
					__label__ = 8;;
				} else {
					__label__ = 9;;
				}
				$if_then22$$if_else23$12: do {
					if (__label__ == 8) {
						$value = 32768;;
					} else if (__label__ == 9) {
						var $25 = $value;
						var $cmp24 = ((($25)) | 0) < -32768;
						if (!($cmp24)) {
							__label__ = 11;
							break $if_then22$$if_else23$12;
						}
						$value = -32768;;
					}
				} while (0);
				var $26 = HEAP32[((_echo_tail) >> 2)];
				var $cmp28 = ((($26)) | 0) >= 5500;
				if ($cmp28) {
					__label__ = 12;;
				} else {
					__label__ = 13;;
				}
				if (__label__ == 12) {
					HEAP32[((_echo_tail) >> 2)] = 0;;
				}
				var $27 = $value;
				var $conv31 = ((($27)) & 255);
				var $28 = HEAP32[((_out_ptr) >> 2)];
				var $arrayidx32 = (($28) & 4294967295);
				HEAP8[($arrayidx32)] = $conv31;
				var $29 = $value;
				var $shr33 = ($29) >> 8;
				var $conv34 = ((($shr33)) & 255);
				var $30 = HEAP32[((_out_ptr) >> 2)];
				var $arrayidx35 = (($30 + 1) & 4294967295);
				HEAP8[($arrayidx35)] = $conv34;
				var $31 = HEAP32[((_out_ptr) >> 2)];
				var $add_ptr = (($31 + 2) & 4294967295);
				HEAP32[((_out_ptr) >> 2)] = $add_ptr;
				var $32 = $value;
				var $mul36 = ((($32) * 3) & 4294967295);
				var $div37 = ((((($mul36)) | 0) / 4) | 0);
				var $conv38 = ((($div37)) & 65535);
				var $33 = HEAP32[((_echo_head) >> 2)];
				var $inc39 = ((($33) + 1) & 4294967295);
				HEAP32[((_echo_head) >> 2)] = $inc39;
				var $arrayidx40 = ((_echo_buf + $33 * 2) & 4294967295);
				HEAP16[(($arrayidx40) >> 1)] = $conv38;
				var $34 = HEAP32[((_echo_head) >> 2)];
				var $cmp41 = ((($34)) | 0) >= 5500;
				if ($cmp41) {
					__label__ = 14;;
				} else {
					__label__ = 15;;
				}
				if (__label__ == 14) {
					HEAP32[((_echo_head) >> 2)] = 0;;
				}
				var $35 = HEAPU32[((_out_ptr) >> 2)];
				var $36 = HEAPU32[((_out_end) >> 2)];
				var $cmp44 = ((($35)) >>> 0) >= ((($36)) >>> 0);
				if ($cmp44) {
					__label__ = 16;
					break $while_cond$5;
				} else {
					__label__ = 3;
					continue $while_cond$5;
				}
			}
			if (__label__ == 17) {
				$retval = 0;;
			} else if (__label__ == 16) {
				$retval = 1;;
			}
			var $37 = $retval;;
			return $37;
			return null;
		}

		function __ZL8Wavegen2iiiP7frame_tS0_($length, $modulation, $resume, $fr1, $fr2) {;
			var __label__;
			var $length_addr;
			var $modulation_addr;
			var $resume_addr;
			var $fr1_addr;
			var $fr2_addr;
			$length_addr = $length;
			$modulation_addr = $modulation;
			$resume_addr = $resume;
			$fr1_addr = $fr1;
			$fr2_addr = $fr2;
			var $0 = $resume_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $length_addr;
				var $2 = $modulation_addr;
				var $3 = $fr1_addr;
				var $4 = $fr2_addr;
				var $5 = HEAP32[((_wvoice) >> 2)];
				__Z8SetSynthiiP7frame_tS0_P7voice_t($1, $2, $3, $4, $5);;
			}
			var $call = __Z7Wavegenv();;
			return $call;
			return null;
		}

		function __ZL12SetAmplitudeiPhi($length, $amp_env, $value) {;
			var __label__;
			var $length_addr;
			var $amp_env_addr;
			var $value_addr;
			$length_addr = $length;
			$amp_env_addr = $amp_env;
			$value_addr = $value;
			HEAP32[((__ZL6amp_ix) >> 2)] = 0;
			var $0 = $length_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((__ZL7amp_inc) >> 2)] = 0;;
			} else if (__label__ == 2) {
				var $1 = $length_addr;
				var $div = ((2097152 / ((($1)) | 0)) | 0);
				HEAP32[((__ZL7amp_inc) >> 2)] = $div;;
			}
			var $2 = $value_addr;
			var $3 = HEAP32[((__ZL17general_amplitude) >> 2)];
			var $mul = ((($3) * ($2)) & 4294967295);
			var $div1 = ((((($mul)) | 0) / 16) | 0);
			HEAP32[((((_wdata + 52) & 4294967295)) >> 2)] = $div1;
			var $4 = HEAP32[((((_wdata + 52) & 4294967295)) >> 2)];
			var $5 = HEAP32[((_wvoice) >> 2)];
			var $consonant_ampv = (($5 + 104) & 4294967295);
			var $6 = HEAP32[(($consonant_ampv) >> 2)];
			var $mul2 = ((($4) * 15) & 4294967295);
			var $mul3 = ((($mul2) * ($6)) & 4294967295);
			var $div4 = ((((($mul3)) | 0) / 100) | 0);
			HEAP32[((((_wdata + 56) & 4294967295)) >> 2)] = $div4;
			var $7 = $amp_env_addr;
			HEAP32[((__ZL13amplitude_env) >> 2)] = $7;;
			return;
			return;
		}

		function __ZL12WcmdqIncHeadv() {;
			var __label__;
			var $0 = HEAP32[((_wcmdq_head) >> 2)];
			var $inc = ((($0) + 1) & 4294967295);
			HEAP32[((_wcmdq_head) >> 2)] = $inc;
			var $cmp = ((($inc)) | 0) >= 160;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((_wcmdq_head) >> 2)] = 0;;
			};
			return;
			return;
		}

		function __Z11WavegenFilli($fill_zeros) {;
			var __label__;
			var $fill_zeros_addr;
			var $finished;
			var $p_start;
			var $length;
			var $max_length;
			$fill_zeros_addr = $fill_zeros;
			var $0 = HEAP32[((_out_ptr) >> 2)];
			$p_start = $0;
			var $call = __Z12WavegenFill2i(0);
			$finished = $call;
			var $1 = HEAPF32[((_sonicSpeed) >> 2)];
			var $cmp = ($1) > 1;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end8$2: do {
				if (__label__ == 1) {
					var $2 = HEAP32[((_out_end) >> 2)];
					var $3 = $p_start;
					var $sub_ptr_lhs_cast = ($2);
					var $sub_ptr_rhs_cast = ($3);
					var $sub_ptr_sub = ((($sub_ptr_lhs_cast) - ($sub_ptr_rhs_cast)) & 4294967295);
					$max_length = $sub_ptr_sub;
					var $4 = $p_start;
					var $5 = $4;
					var $6 = HEAP32[((_out_ptr) >> 2)];
					var $7 = $p_start;
					var $sub_ptr_lhs_cast1 = ($6);
					var $sub_ptr_rhs_cast2 = ($7);
					var $sub_ptr_sub3 = ((($sub_ptr_lhs_cast1) - ($sub_ptr_rhs_cast2)) & 4294967295);
					var $div = ((((($sub_ptr_sub3)) | 0) / 2) | 0);
					var $8 = $max_length;
					var $div4 = ((((($8)) | 0) / 2) | 0);
					var $9 = $finished;
					var $call5 = __ZL7SpeedUpPsiii($5, $div, $div4, $9);
					var $mul = ((($call5) * 2) & 4294967295);
					$length = $mul;
					var $10 = $p_start;
					var $11 = $length;
					var $add_ptr = (($10 + $11) & 4294967295);
					HEAP32[((_out_ptr) >> 2)] = $add_ptr;
					var $12 = $length;
					var $13 = $max_length;
					var $cmp6 = ((($12)) | 0) >= ((($13)) | 0);
					if (!($cmp6)) {
						__label__ = 3;
						break $if_then$$if_end8$2;
					}
					$finished = 0;;
				}
			} while (0);
			var $14 = $finished;;
			return $14;
			return null;
		}

		function __ZL7SpeedUpPsiii($outbuf, $length_in, $length_out, $end_of_text) {;
			var __label__;
			var $retval;
			var $outbuf_addr;
			var $length_in_addr;
			var $length_out_addr;
			var $end_of_text_addr;
			$outbuf_addr = $outbuf;
			$length_in_addr = $length_in;
			$length_out_addr = $length_out;
			$end_of_text_addr = $end_of_text;
			var $0 = $length_in_addr;
			var $cmp = ((($0)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
				var $cmp1 = ((($1)) | 0) == 0;
				if ($cmp1) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $call = _sonicCreateStream(22050, 1);
					HEAP32[((__ZL18sonicSpeedupStream) >> 2)] = $call;;
				}
				var $2 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
				var $call3 = _sonicGetSpeed($2);
				var $conv = ($call3);
				var $3 = HEAPF32[((_sonicSpeed) >> 2)];
				var $cmp4 = ($conv) != ($3);
				if ($cmp4) {
					__label__ = 4;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 4) {
					var $4 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
					var $5 = HEAPF32[((_sonicSpeed) >> 2)];
					var $conv6 = ($5);
					_sonicSetSpeed($4, $conv6);;
				}
				var $6 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
				var $7 = $outbuf_addr;
				var $8 = $length_in_addr;
				var $call8 = _sonicWriteShortToStream($6, $7, $8);;
			}
			var $9 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
			var $cmp10 = ((($9)) | 0) == 0;
			if ($cmp10) {
				__label__ = 7;;
			} else {
				__label__ = 8;;
			}
			if (__label__ == 7) {
				$retval = 0;;
			} else if (__label__ == 8) {
				var $10 = $end_of_text_addr;
				var $tobool = ((($10)) | 0) != 0;
				if ($tobool) {
					__label__ = 9;;
				} else {
					__label__ = 10;;
				}
				if (__label__ == 9) {
					var $11 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
					var $call14 = _sonicFlushStream($11);;
				}
				var $12 = HEAP32[((__ZL18sonicSpeedupStream) >> 2)];
				var $13 = $outbuf_addr;
				var $14 = $length_out_addr;
				var $call16 = _sonicReadShortFromStream($12, $13, $14);
				$retval = $call16;;
			}
			var $15 = $retval;;
			return $15;
			return null;
		}

		function __ZL9resonatorP9RESONATORd($r, $input) {;
			var __label__;
			var $r_addr;
			var $input_addr;
			var $x;
			$r_addr = $r;
			$input_addr = $input;
			var $0 = $r_addr;
			var $a = (($0) & 4294967295);
			var $1 = HEAPF32[(($a) >> 2)];
			var $2 = $input_addr;
			var $mul = ($1) * ($2);
			var $3 = $r_addr;
			var $b = (($3 + 8) & 4294967295);
			var $4 = HEAPF32[(($b) >> 2)];
			var $5 = $r_addr;
			var $x1 = (($5 + 24) & 4294967295);
			var $6 = HEAPF32[(($x1) >> 2)];
			var $mul1 = ($4) * ($6);
			var $add = ($mul) + ($mul1);
			var $7 = $r_addr;
			var $c = (($7 + 16) & 4294967295);
			var $8 = HEAPF32[(($c) >> 2)];
			var $9 = $r_addr;
			var $x2 = (($9 + 32) & 4294967295);
			var $10 = HEAPF32[(($x2) >> 2)];
			var $mul2 = ($8) * ($10);
			var $add3 = ($add) + ($mul2);
			$x = $add3;
			var $11 = $r_addr;
			var $x14 = (($11 + 24) & 4294967295);
			var $12 = HEAPF32[(($x14) >> 2)];
			var $13 = $r_addr;
			var $x25 = (($13 + 32) & 4294967295);
			HEAPF32[(($x25) >> 2)] = $12;
			var $14 = $x;
			var $15 = $r_addr;
			var $x16 = (($15 + 24) & 4294967295);
			HEAPF32[(($x16) >> 2)] = $14;
			var $16 = $x;;
			return $16;
			return null;
		}

		function __Z15MakePhonemeListP10Translatorii($tr, $post_pause, $start_sentence) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 24152;
			_memset(__stackBase__, 0, 24152);
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $post_pause_addr;
			var $start_sentence_addr;
			var $ix;
			var $j;
			var $insert_ph;
			var $phlist;
			var $ph;
			var $prev;
			var $next;
			var $next2;
			var $unstress_count;
			var $word_stress;
			var $switched_language;
			var $max_stress;
			var $voicing;
			var $regression;
			var $end_sourceix;
			var $alternative;
			var $first_vowel;
			var $phdata = __stackBase__;
			var $n_ph_list3;
			var $plist3;
			var $plist3_inserted;
			var $ph_list3 = __stackBase__ + 152;
			var $plist2;
			var $type;
			var $word_end_devoice;
			var $k;
			var $nextw;
			var $ph2;
			var $ph2266;
			var $p;
			var $x;
			$tr_addr = $tr;
			$post_pause_addr = $post_pause;
			$start_sentence_addr = $start_sentence;
			$ix = 0;
			$insert_ph = 0;
			$unstress_count = 0;
			$word_stress = 0;
			$switched_language = 0;
			$first_vowel = 0;
			$plist3_inserted = 0;
			$plist2 = ((_ph_list2) & 4294967295);
			$phlist = ((_phoneme_list) & 4294967295);
			var $0 = HEAP32[((_n_ph_list2) >> 2)];
			var $sub = ((($0) - 1) & 4294967295);
			var $1 = $plist2;
			var $arrayidx = (($1 + 8 * $sub) & 4294967295);
			var $sourceix = (($arrayidx + 6) & 4294967295);
			var $2 = HEAPU16[(($sourceix) >> 1)];
			var $conv = ((($2)) & 65535);
			$end_sourceix = $conv;
			$max_stress = 0;
			var $3 = HEAP32[((_n_ph_list2) >> 2)];
			var $sub1 = ((($3) - 3) & 4294967295);
			$j = $sub1;
			__lastLabel__ = 0;;
			$for_cond$2: while (1) {
				var $4 = __lastLabel__ == 5 ? $dec : ($sub1);
				var $cmp = ((($4)) | 0) >= 0;
				if (!($cmp)) {
					__label__ = 6;
					break $for_cond$2;
				}
				var $5 = $j;
				var $6 = $plist2;
				var $arrayidx2 = (($6 + 8 * $5) & 4294967295);
				var $stresslevel = (($arrayidx2 + 1) & 4294967295);
				var $7 = HEAPU8[($stresslevel)];
				var $conv3 = ((($7)) & 255);
				var $and = ($conv3) & 127;
				var $8 = $max_stress;
				var $cmp4 = ((($and)) | 0) > ((($8)) | 0);
				if ($cmp4) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $9 = $j;
					var $10 = $plist2;
					var $arrayidx5 = (($10 + 8 * $9) & 4294967295);
					var $stresslevel6 = (($arrayidx5 + 1) & 4294967295);
					var $11 = HEAPU8[($stresslevel6)];
					var $conv7 = ((($11)) & 255);
					var $and8 = ($conv7) & 127;
					$max_stress = $and8;;
				}
				var $12 = $j;
				var $13 = $plist2;
				var $arrayidx9 = (($13 + 8 * $12) & 4294967295);
				var $sourceix10 = (($arrayidx9 + 6) & 4294967295);
				var $14 = HEAPU16[(($sourceix10) >> 1)];
				var $conv11 = ((($14)) & 65535);
				var $cmp12 = ((($conv11)) | 0) != 0;
				if ($cmp12) {
					__label__ = 6;
					break $for_cond$2;
				}
				var $15 = $j;
				var $dec = ((($15) - 1) & 4294967295);
				$j = $dec;
				__lastLabel__ = 5;
				__label__ = 1;
				continue $for_cond$2;
			}
			var $16 = $max_stress;
			var $cmp15 = ((($16)) | 0) < 4;
			if ($cmp15) {
				__label__ = 7;;
			} else {
				__label__ = 11;;
			}
			$while_cond$$if_end32$10: do {
				if (__label__ == 7) {
					while (1) {
						var $17 = $j;
						var $dec17 = ((($17) - 1) & 4294967295);
						$j = $dec17;
						var $cmp18 = ((($dec17)) | 0) >= 0;
						if (!($cmp18)) {
							__label__ = 11;
							break $while_cond$$if_end32$10;
						}
						var $18 = $j;
						var $19 = $plist2;
						var $arrayidx19 = (($19 + 8 * $18) & 4294967295);
						var $synthflags = (($arrayidx19 + 4) & 4294967295);
						var $20 = HEAPU16[(($synthflags) >> 1)];
						var $conv20 = ((($20)) & 65535);
						var $and21 = ($conv20) & 64;
						var $tobool = ((($and21)) | 0) != 0;
						var $21 = $j;
						var $22 = $plist2;
						var $arrayidx23 = (($22 + 8 * $21) & 4294967295);
						var $stresslevel24 = (($arrayidx23 + 1) & 4294967295);
						if ($tobool) {
							__label__ = 9;
							break;
						}
						var $23 = HEAPU8[($stresslevel24)];
						var $conv28 = ((($23)) & 255);
						var $cmp29 = ((($conv28)) | 0) >= 4;
						if ($cmp29) {
							__label__ = 11;
							break $while_cond$$if_end32$10;
						} else {
							__label__ = 7;
							continue;
						}
					}
					HEAP8[($stresslevel24)] = 4;;
				}
			} while (0);
			var $24 = $tr_addr;
			var $langopts = (($24) & 4294967295);
			var $param = (($langopts + 24) & 4294967295);
			var $arrayidx33 = (($param + 16) & 4294967295);
			var $25 = HEAP32[(($arrayidx33) >> 2)];
			$regression = $25;
			var $cmp34 = ((($25)) | 0) != 0;
			if ($cmp34) {
				__label__ = 12;;
			} else {
				__label__ = 51;;
			}
			$if_then35$$if_end143$17: do {
				if (__label__ == 12) {
					$word_end_devoice = 0;
					$voicing = 0;
					var $26 = HEAP32[((_n_ph_list2) >> 2)];
					var $sub36 = ((($26) - 1) & 4294967295);
					$j = $sub36;
					var $cmp389 = ((($sub36)) | 0) >= 0;
					if (!($cmp389)) {
						__label__ = 51;
						break $if_then35$$if_end143$17;
					}
					$for_body39$19: while (1) {
						var $27 = $j;
						var $28 = $plist2;
						var $arrayidx40 = (($28 + 8 * $27) & 4294967295);
						var $phcode = (($arrayidx40) & 4294967295);
						var $29 = HEAPU8[($phcode)];
						var $idxprom = ((($29)) & 255);
						var $arrayidx41 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
						var $30 = HEAPU32[(($arrayidx41) >> 2)];
						$ph = $30;
						var $cmp42 = ((($30)) | 0) == 0;
						if ($cmp42) {
							__label__ = 50;;
						} else {
							__label__ = 14;;
						}
						$for_inc140$$if_end44$21: do {
							if (__label__ == 14) {
								var $31 = $ph;
								var $code = (($31 + 10) & 4294967295);
								var $32 = HEAPU8[($code)];
								var $conv45 = ((($32)) & 255);
								var $cmp46 = ((($conv45)) | 0) == 21;
								var $33 = $switched_language;
								if ($cmp46) {
									__lastLabel__ = 14;
									__label__ = 15;;
								} else {
									__lastLabel__ = 14;
									__label__ = 16;;
								}
								if (__label__ == 15) {
									var $xor = ($33) ^ 1;
									$switched_language = $xor;
									__lastLabel__ = 15;;
								}
								var $34 = __lastLabel__ == 15 ? $xor : ($33);
								var $tobool49 = ((($34)) | 0) != 0;
								if ($tobool49) {
									__label__ = 50;
									break $for_inc140$$if_end44$21;
								}
								var $35 = $ph;
								var $type52 = (($35 + 11) & 4294967295);
								var $36 = HEAPU8[($type52)];
								var $conv53 = ((($36)) & 255);
								$type = $conv53;
								var $37 = $regression;
								var $and54 = ($37) & 2;
								var $tobool55 = ((($and54)) | 0) != 0;
								if ($tobool55) {
									__label__ = 18;;
								} else {
									__label__ = 24;;
								}
								$if_then56$$if_end69$27: do {
									if (__label__ == 18) {
										var $38 = $ph;
										var $mnemonic = (($38) & 4294967295);
										var $39 = HEAP32[(($mnemonic) >> 2)];
										var $cmp57 = ((($39)) | 0) == 118;
										if ($cmp57) {
											__label__ = 21;;
										} else {
											__label__ = 19;;
										}
										$if_then64$$lor_lhs_false$29: do {
											if (__label__ == 19) {
												var $40 = $ph;
												var $mnemonic58 = (($40) & 4294967295);
												var $41 = HEAP32[(($mnemonic58) >> 2)];
												var $cmp59 = ((($41)) | 0) == 15222;
												if ($cmp59) {
													__label__ = 21;
													break $if_then64$$lor_lhs_false$29;
												}
												var $42 = $ph;
												var $mnemonic61 = (($42) & 4294967295);
												var $43 = HEAP32[(($mnemonic61) >> 2)];
												var $and62 = ($43) & 255;
												var $cmp63 = ((($and62)) | 0) == 82;
												if (!($cmp63)) {
													__label__ = 24;
													break $if_then56$$if_end69$27;
												}
											}
										} while (0);
										var $44 = $word_end_devoice;
										var $cmp65 = ((($44)) | 0) == 1;
										if ($cmp65) {
											__label__ = 22;;
										} else {
											__label__ = 23;;
										}
										if (__label__ == 22) {
											$voicing = 0;;
										} else if (__label__ == 23) {
											$type = 3;;
										}
									}
								} while (0);
								var $45 = $type;
								var $cmp70 = ((($45)) | 0) == 4;
								var $46 = $type;
								var $cmp72 = ((($46)) | 0) == 6;
								var $or_cond = ($cmp70) | ($cmp72);
								if ($or_cond) {
									__label__ = 25;;
								} else {
									__label__ = 32;;
								}
								$if_then73$$if_else89$37: do {
									if (__label__ == 25) {
										var $47 = $voicing;
										var $cmp74 = ((($47)) | 0) == 0;
										if ($cmp74) {
											__lastLabel__ = 25;
											__label__ = 26;;
										} else {
											__lastLabel__ = 25;
											__label__ = 29;;
										}
										if (__label__ == 26) {
											var $48 = $regression;
											var $and75 = ($48) & 15;
											var $tobool76 = ((($and75)) | 0) != 0;
											if ($tobool76) {
												__label__ = 27;;
											} else {
												__label__ = 28;;
											}
											if (__label__ == 27) {
												$voicing = 1;
												__label__ = 44;
												break $if_then73$$if_else89$37;
											} else if (__label__ == 28) {
												var $_pr5 = $voicing;
												__lastLabel__ = 28;;
											}
										}
										var $49 = __lastLabel__ == 28 ? $_pr5 : ($47);
										var $cmp79 = ((($49)) | 0) == 2;
										if (!($cmp79)) {
											__label__ = 44;
											break $if_then73$$if_else89$37;
										}
										var $50 = $ph;
										var $end_type = (($50 + 13) & 4294967295);
										var $51 = HEAPU8[($end_type)];
										var $conv81 = ((($51)) & 255);
										var $cmp82 = ((($conv81)) | 0) != 0;
										if (!($cmp82)) {
											__label__ = 44;
											break $if_then73$$if_else89$37;
										}
										var $52 = $ph;
										var $end_type84 = (($52 + 13) & 4294967295);
										var $53 = HEAP8[($end_type84)];
										var $54 = $j;
										var $55 = $plist2;
										var $arrayidx85 = (($55 + 8 * $54) & 4294967295);
										var $phcode86 = (($arrayidx85) & 4294967295);
										HEAP8[($phcode86)] = $53;;
									} else if (__label__ == 32) {
										var $56 = $type;
										var $cmp90 = ((($56)) | 0) == 5;
										var $57 = $type;
										var $cmp92 = ((($57)) | 0) == 7;
										var $or_cond1 = ($cmp90) | ($cmp92);
										if ($or_cond1) {
											__label__ = 33;;
										} else {
											__label__ = 40;;
										}
										if (__label__ == 33) {
											var $58 = $voicing;
											var $cmp94 = ((($58)) | 0) == 0;
											if ($cmp94) {
												__lastLabel__ = 33;
												__label__ = 34;;
											} else {
												__lastLabel__ = 33;
												__label__ = 37;;
											}
											if (__label__ == 34) {
												var $59 = $regression;
												var $and96 = ($59) & 15;
												var $tobool97 = ((($and96)) | 0) != 0;
												if ($tobool97) {
													__label__ = 35;;
												} else {
													__label__ = 36;;
												}
												if (__label__ == 35) {
													$voicing = 2;
													__label__ = 44;
													break $if_then73$$if_else89$37;
												} else if (__label__ == 36) {
													var $_pr6 = $voicing;
													__lastLabel__ = 36;;
												}
											}
											var $60 = __lastLabel__ == 36 ? $_pr6 : ($58);
											var $cmp100 = ((($60)) | 0) == 1;
											if (!($cmp100)) {
												__label__ = 44;
												break $if_then73$$if_else89$37;
											}
											var $61 = $ph;
											var $end_type102 = (($61 + 13) & 4294967295);
											var $62 = HEAPU8[($end_type102)];
											var $conv103 = ((($62)) & 255);
											var $cmp104 = ((($conv103)) | 0) != 0;
											if (!($cmp104)) {
												__label__ = 44;
												break $if_then73$$if_else89$37;
											}
											var $63 = $ph;
											var $end_type106 = (($63 + 13) & 4294967295);
											var $64 = HEAP8[($end_type106)];
											var $65 = $j;
											var $66 = $plist2;
											var $arrayidx107 = (($66 + 8 * $65) & 4294967295);
											var $phcode108 = (($arrayidx107) & 4294967295);
											HEAP8[($phcode108)] = $64;;
										} else if (__label__ == 40) {
											var $67 = $regression;
											var $and112 = ($67) & 8;
											var $tobool113 = ((($and112)) | 0) != 0;
											if ($tobool113) {
												__label__ = 41;;
											} else {
												__label__ = 43;;
											}
											if (__label__ == 41) {
												var $68 = $type;
												var $cmp115 = ((($68)) | 0) == 0;
												var $69 = $type;
												var $cmp117 = ((($69)) | 0) == 2;
												var $or_cond2 = ($cmp115) | ($cmp117);
												if (!($or_cond2)) {
													__label__ = 44;
													break $if_then73$$if_else89$37;
												}
												$voicing = 0;;
											} else if (__label__ == 43) {
												$voicing = 0;;
											}
										}
									}
								} while (0);
								$word_end_devoice = 0;
								var $70 = $j;
								var $71 = $plist2;
								var $arrayidx124 = (($71 + 8 * $70) & 4294967295);
								var $sourceix125 = (($arrayidx124 + 6) & 4294967295);
								var $72 = HEAP16[(($sourceix125) >> 1)];
								var $tobool126 = (tempInt = (($72)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
								if (!($tobool126)) {
									__label__ = 50;
									break $for_inc140$$if_end44$21;
								}
								var $73 = $regression;
								var $and128 = ($73) & 4;
								var $tobool129 = ((($and128)) | 0) != 0;
								if ($tobool129) {
									__label__ = 46;;
								} else {
									__label__ = 47;;
								}
								if (__label__ == 46) {
									$voicing = 0;;
								}
								var $74 = $regression;
								var $and132 = ($74) & 16;
								var $tobool133 = ((($and132)) | 0) != 0;
								if (!($tobool133)) {
									__label__ = 50;
									break $for_inc140$$if_end44$21;
								}
								var $75 = $voicing;
								var $cmp135 = ((($75)) | 0) == 0;
								if (!($cmp135)) {
									__label__ = 50;
									break $for_inc140$$if_end44$21;
								}
								$voicing = 1;
								$word_end_devoice = 1;;
							}
						} while (0);
						var $76 = $j;
						var $dec141 = ((($76) - 1) & 4294967295);
						$j = $dec141;
						var $cmp38 = ((($dec141)) | 0) >= 0;
						if ($cmp38) {
							__label__ = 13;
							continue $for_body39$19;
						} else {
							__label__ = 51;
							break $if_then35$$if_end143$17;
						}
					}
				}
			} while (0);
			var $77 = $tr_addr;
			var $arraydecay = (($ph_list3) & 4294967295);
			var $call = __ZL18SubstitutePhonemesP10TranslatorP12PHONEME_LIST($77, $arraydecay);
			var $sub144 = ((($call) - 2) & 4294967295);
			$n_ph_list3 = $sub144;
			$j = 0;;
			$for_cond145$72: while (1) {
				var $78 = $j;
				var $79 = $n_ph_list3;
				var $cmp146 = ((($78)) | 0) < ((($79)) | 0);
				if (!($cmp146)) {
					__label__ = 64;
					break $for_cond145$72;
				}
				var $80 = $ix;
				var $cmp147 = ((($80)) | 0) < 997;
				if (!($cmp147)) {
					__label__ = 64;
					break $for_cond145$72;
				}
				var $81 = $j;
				var $arrayidx149 = (($ph_list3 + $81 * 24) & 4294967295);
				var $sourceix150 = (($arrayidx149 + 6) & 4294967295);
				var $82 = HEAP16[(($sourceix150) >> 1)];
				var $tobool151 = (tempInt = (($82)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
				if ($tobool151) {
					__label__ = 55;;
				} else {
					__label__ = 63;;
				}
				if (__label__ == 55) {
					$word_stress = 0;
					var $83 = $j;
					$nextw = $83;;
					$for_cond153$78: while (1) {
						var $84 = $nextw;
						var $85 = $n_ph_list3;
						var $cmp154 = ((($84)) | 0) < ((($85)) | 0);
						if (!($cmp154)) {
							__label__ = 60;
							break $for_cond153$78;
						}
						var $86 = $nextw;
						var $arrayidx156 = (($ph_list3 + $86 * 24) & 4294967295);
						var $stresslevel157 = (($arrayidx156 + 1) & 4294967295);
						var $87 = HEAPU8[($stresslevel157)];
						var $conv158 = ((($87)) & 255);
						var $88 = $word_stress;
						var $cmp159 = ((($conv158)) | 0) > ((($88)) | 0);
						if ($cmp159) {
							__label__ = 58;;
						} else {
							__label__ = 59;;
						}
						if (__label__ == 58) {
							var $89 = $nextw;
							var $arrayidx161 = (($ph_list3 + $89 * 24) & 4294967295);
							var $stresslevel162 = (($arrayidx161 + 1) & 4294967295);
							var $90 = HEAPU8[($stresslevel162)];
							var $conv163 = ((($90)) & 255);
							$word_stress = $conv163;;
						}
						var $91 = $nextw;
						var $inc = ((($91) + 1) & 4294967295);
						$nextw = $inc;
						var $92 = $nextw;
						var $arrayidx165 = (($ph_list3 + $92 * 24) & 4294967295);
						var $sourceix166 = (($arrayidx165 + 6) & 4294967295);
						var $93 = HEAP16[(($sourceix166) >> 1)];
						var $tobool167 = (tempInt = (($93)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
						if ($tobool167) {
							__label__ = 60;
							break $for_cond153$78;
						} else {
							__label__ = 56;
							continue $for_cond153$78;
						}
					}
					var $94 = $j;
					$k = $94;
					var $95 = $k;
					var $96 = $nextw;
					var $cmp1728 = ((($95)) | 0) < ((($96)) | 0);
					if ($cmp1728) {
						__label__ = 61;;
					} else {
						__label__ = 62;;
					}
					$for_body173$$for_end178$85: do {
						if (__label__ == 61) {
							while (1) {
								var $97 = $word_stress;
								var $conv174 = ((($97)) & 255);
								var $98 = $k;
								var $arrayidx175 = (($ph_list3 + $98 * 24) & 4294967295);
								var $wordstress = (($arrayidx175 + 2) & 4294967295);
								HEAP8[($wordstress)] = $conv174;
								var $99 = $k;
								var $inc177 = ((($99) + 1) & 4294967295);
								$k = $inc177;
								var $100 = $k;
								var $101 = $nextw;
								var $cmp172 = ((($100)) | 0) < ((($101)) | 0);
								if ($cmp172) {
									__label__ = 61;
									continue;
								} else {
									__label__ = 62;
									break $for_body173$$for_end178$85;
								}
							}
						}
					} while (0);
					var $102 = $nextw;
					$j = $102;
					__label__ = 52;
					continue $for_cond145$72;
				} else if (__label__ == 63) {
					var $103 = $j;
					var $inc180 = ((($103) + 1) & 4294967295);
					$j = $inc180;
					__label__ = 52;
					continue $for_cond145$72;
				}
			}
			var $104 = HEAP32[((((_phoneme_tab + 36) & 4294967295)) >> 2)];
			$ph = $104;
			var $105 = $ph;
			var $arrayidx183 = (($ph_list3) & 4294967295);
			var $ph184 = (($arrayidx183 + 8) & 4294967295);
			HEAP32[(($ph184) >> 2)] = $105;
			$switched_language = 0;
			$j = 0;
			var $pd_param = (($phdata + 4) & 4294967295);
			var $arrayidx233 = (($pd_param + 12) & 4294967295);
			var $pd_param262 = (($phdata + 4) & 4294967295);
			var $arrayidx263 = (($pd_param262 + 4) & 4294967295);
			var $pd_param480 = (($phdata + 4) & 4294967295);
			var $arrayidx481 = (($pd_param480 + 16) & 4294967295);
			var $pd_param484 = (($phdata + 4) & 4294967295);
			var $arrayidx485 = (($pd_param484 + 16) & 4294967295);
			var $pd_param537 = (($phdata + 4) & 4294967295);
			var $arrayidx538 = (($pd_param537 + 40) & 4294967295);;
			$for_cond185$91: while (1) {
				var $106 = $insert_ph;
				var $tobool186 = ((($106)) | 0) != 0;
				if ($tobool186) {
					__lastLabel__ = 65;
					__label__ = 69;;
				} else {
					__lastLabel__ = 65;
					__label__ = 66;;
				}
				if (__label__ == 66) {
					var $107 = $j;
					var $108 = $n_ph_list3;
					var $cmp187 = ((($107)) | 0) < ((($108)) | 0);
					if (!($cmp187)) {
						__label__ = 158;
						break $for_cond185$91;
					}
					var $109 = $ix;
					var $cmp189 = ((($109)) | 0) < 997;
					if (!($cmp189)) {
						__label__ = 158;
						break $for_cond185$91;
					}
					var $_pr7 = $insert_ph;
					__lastLabel__ = 68;;
				}
				var $110 = __lastLabel__ == 68 ? $_pr7 : ($106);
				var $111 = $ph;
				$prev = $111;
				var $112 = $j;
				var $arrayidx192 = (($ph_list3 + $112 * 24) & 4294967295);
				$plist3 = $arrayidx192;
				var $cmp193 = ((($110)) | 0) != 0;
				var $113 = $plist3;
				var $phcode195 = (($113) & 4294967295);
				var $114 = HEAPU8[($phcode195)];
				var $idxprom196 = ((($114)) & 255);
				var $arrayidx197 = ((_phoneme_tab + $idxprom196 * 4) & 4294967295);
				var $115 = HEAP32[(($arrayidx197) >> 2)];
				if ($cmp193) {
					__label__ = 70;;
				} else {
					__label__ = 73;;
				}
				if (__label__ == 70) {
					$next = $115;
					var $116 = $j;
					var $dec198 = ((($116) - 1) & 4294967295);
					$j = $dec198;
					var $117 = $j;
					var $arrayidx199 = (($ph_list3 + $117 * 24) & 4294967295);
					$plist3_inserted = $arrayidx199;
					$plist3 = $arrayidx199;
					var $118 = $j;
					var $cmp200 = ((($118)) | 0) > 0;
					if ($cmp200) {
						__label__ = 71;;
					} else {
						__label__ = 72;;
					}
					if (__label__ == 71) {
						var $119 = $plist3;
						var $arrayidx202 = (($119 + -24) & 4294967295);
						var $120 = $arrayidx202;
						var $121 = $plist3;
						var $arrayidx203 = (($121) & 4294967295);
						var $122 = $arrayidx203;
						var $src$, $dest$, $stop$, $stop4$, $fast$;
						$src$ = $122;
						$dest$ = $120;
						$stop$ = $src$ + 24;
						if (($dest$ % 4) == ($src$ % 4) && 24 > 8) {
							while ($src$ % 4 !== 0 && $src$ < $stop$) {;
								HEAP8[$dest$++] = HEAP8[$src$++];
							}
							$src$ >>= 2;
							$dest$ >>= 2;
							$stop4$ = $stop$ >> 2;
							while ($src$ < $stop4$) {;;;
								HEAP32[$dest$++] = HEAP32[$src$++];
							}
							$src$ <<= 2;
							$dest$ <<= 2;
						}
						while ($src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						};;
					}
					var $123 = $plist3;
					var $arrayidx205 = (($123) & 4294967295);
					var $124 = $arrayidx205;
					var $dest$, $stop$, $stop4$, $fast$, $value4$;
					$dest$ = $124;
					$stop$ = $dest$ + 24;
					$value4$ = 0;
					if ($value4$ < 0) $value4$ += 256;
					$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
					while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					}
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($dest$ < $stop4$) {;;;;;;;
						HEAP32[$dest$++] = $value4$;
					}
					$dest$ <<= 2;
					while ($dest$ < $stop$) {;;
						HEAP8[$dest$++] = 0;
					};
					var $125 = $insert_ph;
					var $conv206 = ((($125)) & 255);
					var $126 = $plist3;
					var $phcode207 = (($126) & 4294967295);
					HEAP8[($phcode207)] = $conv206;
					var $127 = $insert_ph;
					var $arrayidx208 = ((_phoneme_tab + $127 * 4) & 4294967295);
					var $128 = HEAP32[(($arrayidx208) >> 2)];
					$ph = $128;
					var $129 = $ph;
					var $130 = $plist3;
					var $ph209 = (($130 + 8) & 4294967295);
					HEAP32[(($ph209) >> 2)] = $129;
					$insert_ph = 0;;
				} else if (__label__ == 73) {
					$ph = $115;
					var $131 = $ph;
					var $132 = $plist3;
					var $arrayidx214 = (($132) & 4294967295);
					var $ph215 = (($arrayidx214 + 8) & 4294967295);
					HEAP32[(($ph215) >> 2)] = $131;
					var $133 = $plist3;
					var $phcode216 = (($133) & 4294967295);
					var $134 = HEAPU8[($phcode216)];
					var $conv217 = ((($134)) & 255);
					var $cmp218 = ((($conv217)) | 0) == 21;
					if ($cmp218) {
						__label__ = 74;;
					} else {
						__label__ = 75;;
					}
					if (__label__ == 74) {
						var $135 = $plist3;
						var $tone_ph = (($135 + 3) & 4294967295);
						var $136 = HEAPU8[($tone_ph)];
						var $conv220 = ((($136)) & 255);
						__Z18SelectPhonemeTablei($conv220);
						var $137 = $switched_language;
						var $xor221 = ($137) ^ 32;
						$switched_language = $xor221;;
					}
					var $138 = $plist3;
					var $arrayidx223 = (($138 + 24) & 4294967295);
					var $phcode224 = (($arrayidx223) & 4294967295);
					var $139 = HEAPU8[($phcode224)];
					var $idxprom225 = ((($139)) & 255);
					var $arrayidx226 = ((_phoneme_tab + $idxprom225 * 4) & 4294967295);
					var $140 = HEAP32[(($arrayidx226) >> 2)];
					$next = $140;
					var $141 = $next;
					var $142 = $plist3;
					var $arrayidx227 = (($142 + 24) & 4294967295);
					var $ph228 = (($arrayidx227 + 8) & 4294967295);
					HEAP32[(($ph228) >> 2)] = $141;;
				}
				var $143 = $ph;
				var $cmp230 = ((($143)) | 0) == 0;
				if ($cmp230) {
					__label__ = 157;;
				} else {
					__label__ = 77;;
				}
				$for_inc584$$if_end232$108: do {
					if (__label__ == 77) {
						var $144 = $tr_addr;
						var $145 = $plist3;
						__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA($144, 256, $145, $phdata);
						var $146 = HEAP32[(($arrayidx233) >> 2)];
						$alternative = $146;
						var $cmp234 = ((($146)) | 0) > 0;
						if ($cmp234) {
							__label__ = 78;;
						} else {
							__label__ = 83;;
						}
						if (__label__ == 78) {
							var $147 = $ph;
							$ph2 = $147;
							var $148 = $plist3;
							var $phcode236 = (($148) & 4294967295);
							var $149 = HEAPU8[($phcode236)];
							var $conv237 = ((($149)) & 255);
							$insert_ph = $conv237;
							var $150 = $alternative;
							var $arrayidx238 = ((_phoneme_tab + $150 * 4) & 4294967295);
							var $151 = HEAP32[(($arrayidx238) >> 2)];
							$ph = $151;
							var $152 = $ph;
							var $153 = $plist3;
							var $ph239 = (($153 + 8) & 4294967295);
							HEAP32[(($ph239) >> 2)] = $152;
							var $154 = $alternative;
							var $conv240 = ((($154)) & 255);
							var $155 = $plist3;
							var $phcode241 = (($155) & 4294967295);
							HEAP8[($phcode241)] = $conv240;
							var $156 = $ph;
							var $type242 = (($156 + 11) & 4294967295);
							var $157 = HEAPU8[($type242)];
							var $conv243 = ((($157)) & 255);
							var $cmp244 = ((($conv243)) | 0) == 2;
							var $158 = $plist3;
							var $synthflags246 = (($158 + 4) & 4294967295);
							var $159 = HEAPU16[(($synthflags246) >> 1)];
							var $conv247 = ((($159)) & 65535);
							if ($cmp244) {
								__label__ = 79;;
							} else {
								__label__ = 81;;
							}
							$if_then245$$if_else255$112: do {
								if (__label__ == 79) {
									var $or = ($conv247) | 4;
									var $conv248 = ((($or)) & 65535);
									HEAP16[(($synthflags246) >> 1)] = $conv248;
									var $160 = $ph2;
									var $type249 = (($160 + 11) & 4294967295);
									var $161 = HEAPU8[($type249)];
									var $conv250 = ((($161)) & 255);
									var $cmp251 = ((($conv250)) | 0) != 2;
									if (!($cmp251)) {
										__label__ = 82;
										break $if_then245$$if_else255$112;
									}
									var $162 = $plist3;
									var $stresslevel253 = (($162 + 1) & 4294967295);
									HEAP8[($stresslevel253)] = 0;;
								} else if (__label__ == 81) {
									var $and258 = ($conv247) & -5;
									var $conv259 = ((($and258)) & 65535);
									HEAP16[(($synthflags246) >> 1)] = $conv259;;
								}
							} while (0);
							var $163 = $tr_addr;
							var $164 = $plist3;
							__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA($163, 256, $164, $phdata);;
						}
						var $165 = HEAP32[(($arrayidx263) >> 2)];
						$alternative = $165;
						var $cmp264 = ((($165)) | 0) > 0;
						if ($cmp264) {
							__label__ = 84;;
						} else {
							__label__ = 90;;
						}
						if (__label__ == 84) {
							var $166 = $ph;
							$ph2266 = $166;
							var $167 = $alternative;
							var $arrayidx267 = ((_phoneme_tab + $167 * 4) & 4294967295);
							var $168 = HEAP32[(($arrayidx267) >> 2)];
							$ph = $168;
							var $169 = $ph;
							var $170 = $plist3;
							var $ph268 = (($170 + 8) & 4294967295);
							HEAP32[(($ph268) >> 2)] = $169;
							var $171 = $alternative;
							var $conv269 = ((($171)) & 255);
							var $172 = $plist3;
							var $phcode270 = (($172) & 4294967295);
							HEAP8[($phcode270)] = $conv269;
							var $173 = $alternative;
							var $cmp271 = ((($173)) | 0) == 1;
							if ($cmp271) {
								__label__ = 157;
								break $for_inc584$$if_end232$108;
							}
							var $174 = $ph;
							var $type274 = (($174 + 11) & 4294967295);
							var $175 = HEAPU8[($type274)];
							var $conv275 = ((($175)) & 255);
							var $cmp276 = ((($conv275)) | 0) == 2;
							var $176 = $plist3;
							var $synthflags278 = (($176 + 4) & 4294967295);
							var $177 = HEAPU16[(($synthflags278) >> 1)];
							var $conv279 = ((($177)) & 65535);
							if ($cmp276) {
								__label__ = 86;;
							} else {
								__label__ = 88;;
							}
							$if_then277$$if_else288$121: do {
								if (__label__ == 86) {
									var $or280 = ($conv279) | 4;
									var $conv281 = ((($or280)) & 65535);
									HEAP16[(($synthflags278) >> 1)] = $conv281;
									var $178 = $ph2266;
									var $type282 = (($178 + 11) & 4294967295);
									var $179 = HEAPU8[($type282)];
									var $conv283 = ((($179)) & 255);
									var $cmp284 = ((($conv283)) | 0) != 2;
									if (!($cmp284)) {
										__label__ = 89;
										break $if_then277$$if_else288$121;
									}
									var $180 = $plist3;
									var $stresslevel286 = (($180 + 1) & 4294967295);
									HEAP8[($stresslevel286)] = 0;;
								} else if (__label__ == 88) {
									var $and291 = ($conv279) & -5;
									var $conv292 = ((($and291)) & 65535);
									HEAP16[(($synthflags278) >> 1)] = $conv292;;
								}
							} while (0);
							var $181 = $tr_addr;
							var $182 = $plist3;
							__Z16InterpretPhonemeP10TranslatoriP12PHONEME_LISTP12PHONEME_DATA($181, 256, $182, $phdata);;
						}
						var $183 = $ph;
						var $type295 = (($183 + 11) & 4294967295);
						var $184 = HEAPU8[($type295)];
						var $conv296 = ((($184)) & 255);
						var $cmp297 = ((($conv296)) | 0) == 2;
						if ($cmp297) {
							__label__ = 91;;
						} else {
							__label__ = 110;;
						}
						$if_then298$$if_end362$127: do {
							if (__label__ == 91) {
								var $185 = $plist3;
								var $stresslevel299 = (($185 + 1) & 4294967295);
								var $186 = HEAPU8[($stresslevel299)];
								var $conv300 = ((($186)) & 255);
								var $cmp301 = ((($conv300)) | 0) <= 1;
								if ($cmp301) {
									__label__ = 92;;
								} else {
									__label__ = 109;;
								}
								if (__label__ == 92) {
									var $187 = $unstress_count;
									var $inc303 = ((($187) + 1) & 4294967295);
									$unstress_count = $inc303;
									var $188 = $tr_addr;
									var $langopts304 = (($188) & 4294967295);
									var $stress_flags = (($langopts304 + 12) & 4294967295);
									var $189 = HEAP32[(($stress_flags) >> 2)];
									var $and305 = ($189) & 8;
									var $tobool306 = ((($and305)) | 0) != 0;
									if ($tobool306) {
										__label__ = 93;;
									} else {
										__label__ = 102;;
									}
									if (__label__ == 93) {
										var $190 = $plist3;
										var $add_ptr = (($190 + 24) & 4294967295);
										$p = $add_ptr;;
										while (1) {
											var $191 = $p;
											var $type309 = (($191 + 15) & 4294967295);
											var $192 = HEAPU8[($type309)];
											var $conv310 = ((($192)) & 255);
											var $cmp311 = ((($conv310)) | 0) != 0;
											if (!($cmp311)) {
												__label__ = 110;
												break $if_then298$$if_end362$127;
											}
											var $193 = $p;
											var $type313 = (($193 + 15) & 4294967295);
											var $194 = HEAPU8[($type313)];
											var $conv314 = ((($194)) & 255);
											var $cmp315 = ((($conv314)) | 0) == 2;
											var $195 = $p;
											if ($cmp315) {
												__label__ = 96;
												break;
											}
											var $incdec_ptr = (($195 + 24) & 4294967295);
											$p = $incdec_ptr;
											__label__ = 94;
											continue;
										}
										var $stresslevel317 = (($195 + 1) & 4294967295);
										var $196 = HEAPU8[($stresslevel317)];
										var $conv318 = ((($196)) & 255);
										var $cmp319 = ((($conv318)) | 0) <= 1;
										if (!($cmp319)) {
											__label__ = 110;
											break $if_then298$$if_end362$127;
										}
										var $197 = $plist3;
										var $wordstress321 = (($197 + 2) & 4294967295);
										var $198 = HEAPU8[($wordstress321)];
										var $conv322 = ((($198)) & 255);
										var $cmp323 = ((($conv322)) | 0) < 4;
										if ($cmp323) {
											__label__ = 98;;
										} else {
											__label__ = 99;;
										}
										if (__label__ == 98) {
											var $199 = $plist3;
											var $stresslevel325 = (($199 + 1) & 4294967295);
											HEAP8[($stresslevel325)] = 0;;
										}
										var $200 = $p;
										var $wordstress327 = (($200 + 2) & 4294967295);
										var $201 = HEAPU8[($wordstress327)];
										var $conv328 = ((($201)) & 255);
										var $cmp329 = ((($conv328)) | 0) < 4;
										if (!($cmp329)) {
											__label__ = 110;
											break $if_then298$$if_end362$127;
										}
										var $202 = $p;
										var $stresslevel331 = (($202 + 1) & 4294967295);
										HEAP8[($stresslevel331)] = 0;;
									} else if (__label__ == 102) {
										var $203 = $unstress_count;
										var $cmp338 = ((($203)) | 0) > 1;
										if (!($cmp338)) {
											__label__ = 110;
											break $if_then298$$if_end362$127;
										}
										var $204 = $unstress_count;
										var $and340 = ($204) & 1;
										var $cmp341 = ((($and340)) | 0) == 0;
										if (!($cmp341)) {
											__label__ = 110;
											break $if_then298$$if_end362$127;
										}
										var $205 = $tr_addr;
										var $langopts343 = (($205) & 4294967295);
										var $stress_flags344 = (($langopts343 + 12) & 4294967295);
										var $206 = HEAP32[(($stress_flags344) >> 2)];
										var $and345 = ($206) & 2;
										var $tobool346 = ((($and345)) | 0) != 0;
										if ($tobool346) {
											__label__ = 107;;
										} else {
											__label__ = 105;;
										}
										$if_then354$$lor_lhs_false347$146: do {
											if (__label__ == 105) {
												var $207 = $word_stress;
												var $cmp348 = ((($207)) | 0) > 3;
												if ($cmp348) {
													__label__ = 106;;
												} else {
													__label__ = 108;;
												}
												if (__label__ == 106) {
													var $208 = $plist3;
													var $add_ptr350 = (($208 + 24) & 4294967295);
													var $sourceix351 = (($add_ptr350 + 6) & 4294967295);
													var $209 = HEAPU16[(($sourceix351) >> 1)];
													var $conv352 = ((($209)) & 65535);
													var $cmp353 = ((($conv352)) | 0) != 0;
													if ($cmp353) {
														__label__ = 107;
														break $if_then354$$lor_lhs_false347$146;
													}
												}
												var $210 = $plist3;
												var $stresslevel356 = (($210 + 1) & 4294967295);
												HEAP8[($stresslevel356)] = 0;
												__label__ = 110;
												break $if_then298$$if_end362$127;
											}
										} while (0);
										$unstress_count = 1;;
									}
								} else if (__label__ == 109) {
									$unstress_count = 0;;
								}
							}
						} while (0);
						var $211 = $ph;
						var $type363 = (($211 + 11) & 4294967295);
						var $212 = HEAPU8[($type363)];
						var $conv364 = ((($212)) & 255);
						var $cmp365 = ((($conv364)) | 0) == 2;
						if ($cmp365) {
							__label__ = 111;;
						} else {
							__label__ = 112;;
						}
						if (__label__ == 111) {
							$first_vowel = 0;;
						}
						var $213 = $plist3;
						var $add_ptr368 = (($213 + 24) & 4294967295);
						var $synthflags369 = (($add_ptr368 + 4) & 4294967295);
						var $214 = HEAPU16[(($synthflags369) >> 1)];
						var $conv370 = ((($214)) & 65535);
						var $and371 = ($conv370) & 8;
						var $tobool372 = ((($and371)) | 0) != 0;
						if ($tobool372) {
							__label__ = 113;;
						} else {
							__label__ = 115;;
						}
						$if_then373$$if_end387$157: do {
							if (__label__ == 113) {
								var $215 = $next;
								var $type374 = (($215 + 11) & 4294967295);
								var $216 = HEAPU8[($type374)];
								var $conv375 = ((($216)) & 255);
								var $call376 = _strchr(((__ZZ15MakePhonemeListP10TranslatoriiE12types_double) & 4294967295), $conv375);
								var $tobool377 = ((($call376)) | 0) != 0;
								if (!($tobool377)) {
									__label__ = 115;
									break $if_then373$$if_end387$157;
								}
								var $217 = $next;
								var $code379 = (($217 + 10) & 4294967295);
								var $218 = HEAPU8[($code379)];
								var $conv380 = ((($218)) & 255);
								$insert_ph = $conv380;
								var $219 = $plist3;
								var $add_ptr381 = (($219 + 24) & 4294967295);
								var $synthflags382 = (($add_ptr381 + 4) & 4294967295);
								var $220 = HEAPU16[(($synthflags382) >> 1)];
								var $conv383 = ((($220)) & 65535);
								var $xor384 = ($conv383) ^ 8;
								var $conv385 = ((($xor384)) & 65535);
								HEAP16[(($synthflags382) >> 1)] = $conv385;;
							}
						} while (0);
						var $221 = $plist3;
						var $add_ptr388 = (($221 + 24) & 4294967295);
						var $sourceix389 = (($add_ptr388 + 6) & 4294967295);
						var $222 = HEAPU16[(($sourceix389) >> 1)];
						var $conv390 = ((($222)) & 65535);
						var $cmp391 = ((($conv390)) | 0) != 0;
						if ($cmp391) {
							__label__ = 116;;
						} else {
							__label__ = 141;;
						}
						$if_then392$$if_end471$161: do {
							if (__label__ == 116) {
								var $223 = $tr_addr;
								var $langopts393 = (($223) & 4294967295);
								var $vowel_pause = (($langopts393 + 4) & 4294967295);
								var $224 = HEAP32[(($vowel_pause) >> 2)];
								var $tobool394 = ((($224)) | 0) != 0;
								if ($tobool394) {
									__label__ = 117;;
								} else {
									__label__ = 134;;
								}
								$land_lhs_true395$$if_end450$163: do {
									if (__label__ == 117) {
										var $225 = $ph;
										var $type396 = (($225 + 11) & 4294967295);
										var $226 = HEAPU8[($type396)];
										var $conv397 = ((($226)) & 255);
										var $cmp398 = ((($conv397)) | 0) != 0;
										if (!($cmp398)) {
											__label__ = 134;
											break $land_lhs_true395$$if_end450$163;
										}
										var $227 = $ph;
										var $type400 = (($227 + 11) & 4294967295);
										var $228 = HEAPU8[($type400)];
										var $conv401 = ((($228)) & 255);
										var $cmp402 = ((($conv401)) | 0) != 2;
										if ($cmp402) {
											__label__ = 119;;
										} else {
											__label__ = 121;;
										}
										$land_lhs_true403$$if_end409$166: do {
											if (__label__ == 119) {
												var $229 = $tr_addr;
												var $langopts404 = (($229) & 4294967295);
												var $vowel_pause405 = (($langopts404 + 4) & 4294967295);
												var $230 = HEAP32[(($vowel_pause405) >> 2)];
												var $and406 = ($230) & 512;
												var $tobool407 = ((($and406)) | 0) != 0;
												if (!($tobool407)) {
													__label__ = 121;
													break $land_lhs_true403$$if_end409$166;
												}
												$insert_ph = 11;;
											}
										} while (0);
										var $231 = $next;
										var $type410 = (($231 + 11) & 4294967295);
										var $232 = HEAPU8[($type410)];
										var $conv411 = ((($232)) & 255);
										var $cmp412 = ((($conv411)) | 0) == 2;
										if (!($cmp412)) {
											__label__ = 134;
											break $land_lhs_true395$$if_end450$163;
										}
										var $233 = $tr_addr;
										var $langopts414 = (($233) & 4294967295);
										var $vowel_pause415 = (($langopts414 + 4) & 4294967295);
										var $234 = HEAP32[(($vowel_pause415) >> 2)];
										var $and416 = ($234) & 12;
										$x = $and416;
										var $cmp417 = ((($and416)) | 0) != 0;
										if ($cmp417) {
											__label__ = 123;;
										} else {
											__label__ = 126;;
										}
										if (__label__ == 123) {
											var $235 = $x;
											var $cmp419 = ((($235)) | 0) == 12;
											if ($cmp419) {
												__label__ = 124;;
											} else {
												__label__ = 125;;
											}
											if (__label__ == 124) {
												$insert_ph = 11;;
											} else if (__label__ == 125) {
												$insert_ph = 23;;
											}
										}
										var $236 = $ph;
										var $type424 = (($236 + 11) & 4294967295);
										var $237 = HEAPU8[($type424)];
										var $conv425 = ((($237)) & 255);
										var $cmp426 = ((($conv425)) | 0) == 2;
										if ($cmp426) {
											__label__ = 127;;
										} else {
											__label__ = 131;;
										}
										$land_lhs_true427$$if_end437$177: do {
											if (__label__ == 127) {
												var $238 = $tr_addr;
												var $langopts428 = (($238) & 4294967295);
												var $vowel_pause429 = (($langopts428 + 4) & 4294967295);
												var $239 = HEAP32[(($vowel_pause429) >> 2)];
												var $and430 = ($239) & 3;
												$x = $and430;
												var $cmp431 = ((($and430)) | 0) != 0;
												if (!($cmp431)) {
													__label__ = 131;
													break $land_lhs_true427$$if_end437$177;
												}
												var $240 = $x;
												var $cmp433 = ((($240)) | 0) == 2;
												if ($cmp433) {
													__label__ = 129;;
												} else {
													__label__ = 130;;
												}
												if (__label__ == 129) {
													$insert_ph = 10;;
												} else if (__label__ == 130) {
													$insert_ph = 23;;
												}
											}
										} while (0);
										var $241 = $plist3;
										var $add_ptr438 = (($241 + 24) & 4294967295);
										var $stresslevel439 = (($add_ptr438 + 1) & 4294967295);
										var $242 = HEAPU8[($stresslevel439)];
										var $conv440 = ((($242)) & 255);
										var $cmp441 = ((($conv440)) | 0) >= 4;
										if (!($cmp441)) {
											__label__ = 134;
											break $land_lhs_true395$$if_end450$163;
										}
										var $243 = $tr_addr;
										var $langopts443 = (($243) & 4294967295);
										var $vowel_pause444 = (($langopts443 + 4) & 4294967295);
										var $244 = HEAP32[(($vowel_pause444) >> 2)];
										var $and445 = ($244) & 256;
										var $tobool446 = ((($and445)) | 0) != 0;
										if (!($tobool446)) {
											__label__ = 134;
											break $land_lhs_true395$$if_end450$163;
										}
										$insert_ph = 10;;
									}
								} while (0);
								var $245 = $plist3;
								var $246 = $plist3_inserted;
								var $cmp451 = ((($245)) | 0) != ((($246)) | 0);
								if (!($cmp451)) {
									__label__ = 141;
									break $if_then392$$if_end471$161;
								}
								var $247 = $tr_addr;
								var $langopts453 = (($247) & 4294967295);
								var $word_gap = (($langopts453) & 4294967295);
								var $248 = HEAP32[(($word_gap) >> 2)];
								var $and454 = ($248) & 7;
								$x = $and454;
								var $cmp455 = ((($and454)) | 0) != 0;
								if ($cmp455) {
									__label__ = 136;;
								} else {
									__label__ = 139;;
								}
								$if_then456$$if_end466$188: do {
									if (__label__ == 136) {
										var $249 = $x;
										var $cmp457 = ((($249)) | 0) > 1;
										if ($cmp457) {
											__label__ = 138;;
										} else {
											__label__ = 137;;
										}
										if (__label__ == 137) {
											var $250 = $insert_ph;
											var $cmp459 = ((($250)) | 0) != 10;
											var $251 = $insert_ph;
											var $cmp461 = ((($251)) | 0) != 11;
											var $or_cond3 = ($cmp459) & ($cmp461);
											if (!($or_cond3)) {
												__label__ = 139;
												break $if_then456$$if_end466$188;
											}
										}
										var $252 = $x;
										var $arrayidx463 = ((_pause_phonemes + $252) & 4294967295);
										var $253 = HEAPU8[($arrayidx463)];
										var $conv464 = ((($253)) & 255);
										$insert_ph = $conv464;;
									}
								} while (0);
								var $254 = HEAP32[((_option_wordgap) >> 2)];
								var $cmp467 = ((($254)) | 0) > 0;
								if (!($cmp467)) {
									__label__ = 141;
									break $if_then392$$if_end471$161;
								}
								$insert_ph = 24;;
							}
						} while (0);
						var $255 = $plist3;
						var $arrayidx472 = (($255 + 48) & 4294967295);
						var $phcode473 = (($arrayidx472) & 4294967295);
						var $256 = HEAPU8[($phcode473)];
						var $idxprom474 = ((($256)) & 255);
						var $arrayidx475 = ((_phoneme_tab + $idxprom474 * 4) & 4294967295);
						var $257 = HEAP32[(($arrayidx475) >> 2)];
						$next2 = $257;
						var $258 = $next2;
						var $259 = $plist3;
						var $arrayidx476 = (($259 + 48) & 4294967295);
						var $ph477 = (($arrayidx476 + 8) & 4294967295);
						HEAP32[(($ph477) >> 2)] = $258;
						var $260 = $insert_ph;
						var $cmp478 = ((($260)) | 0) == 0;
						if ($cmp478) {
							__label__ = 142;;
						} else {
							__label__ = 144;;
						}
						$land_lhs_true479$$if_end486$196: do {
							if (__label__ == 142) {
								var $261 = HEAP32[(($arrayidx481) >> 2)];
								var $cmp482 = ((($261)) | 0) != 0;
								if (!($cmp482)) {
									__label__ = 144;
									break $land_lhs_true479$$if_end486$196;
								}
								var $262 = HEAP32[(($arrayidx485) >> 2)];
								$insert_ph = $262;;
							}
						} while (0);
						var $263 = $ph;
						var $264 = $ix;
						var $265 = $phlist;
						var $arrayidx491 = (($265 + 24 * $264) & 4294967295);
						var $ph492 = (($arrayidx491 + 8) & 4294967295);
						HEAP32[(($ph492) >> 2)] = $263;
						var $266 = $ph;
						var $type493 = (($266 + 11) & 4294967295);
						var $267 = HEAP8[($type493)];
						var $268 = $ix;
						var $269 = $phlist;
						var $arrayidx494 = (($269 + 24 * $268) & 4294967295);
						var $type495 = (($arrayidx494 + 15) & 4294967295);
						HEAP8[($type495)] = $267;
						var $270 = $ix;
						var $271 = $phlist;
						var $arrayidx496 = (($271 + 24 * $270) & 4294967295);
						var $env = (($arrayidx496 + 14) & 4294967295);
						HEAP8[($env)] = 0;
						var $272 = $plist3;
						var $synthflags497 = (($272 + 4) & 4294967295);
						var $273 = HEAPU16[(($synthflags497) >> 1)];
						var $conv498 = ((($273)) & 65535);
						var $274 = $switched_language;
						var $or499 = ($conv498) | ($274);
						var $conv500 = ((($or499)) & 65535);
						var $275 = $ix;
						var $276 = $phlist;
						var $arrayidx501 = (($276 + 24 * $275) & 4294967295);
						var $synthflags502 = (($arrayidx501 + 4) & 4294967295);
						HEAP16[(($synthflags502) >> 1)] = $conv500;
						var $277 = $plist3;
						var $stresslevel503 = (($277 + 1) & 4294967295);
						var $278 = HEAPU8[($stresslevel503)];
						var $conv504 = ((($278)) & 255);
						var $and505 = ($conv504) & 15;
						var $conv506 = ((($and505)) & 255);
						var $279 = $ix;
						var $280 = $phlist;
						var $arrayidx507 = (($280 + 24 * $279) & 4294967295);
						var $stresslevel508 = (($arrayidx507 + 1) & 4294967295);
						HEAP8[($stresslevel508)] = $conv506;
						var $281 = $plist3;
						var $wordstress509 = (($281 + 2) & 4294967295);
						var $282 = HEAP8[($wordstress509)];
						var $283 = $ix;
						var $284 = $phlist;
						var $arrayidx510 = (($284 + 24 * $283) & 4294967295);
						var $wordstress511 = (($arrayidx510 + 2) & 4294967295);
						HEAP8[($wordstress511)] = $282;
						var $285 = $plist3;
						var $tone_ph512 = (($285 + 3) & 4294967295);
						var $286 = HEAP8[($tone_ph512)];
						var $287 = $ix;
						var $288 = $phlist;
						var $arrayidx513 = (($288 + 24 * $287) & 4294967295);
						var $tone_ph514 = (($arrayidx513 + 3) & 4294967295);
						HEAP8[($tone_ph514)] = $286;
						var $289 = $ix;
						var $290 = $phlist;
						var $arrayidx515 = (($290 + 24 * $289) & 4294967295);
						var $sourceix516 = (($arrayidx515 + 6) & 4294967295);
						HEAP16[(($sourceix516) >> 1)] = 0;
						var $291 = $ph;
						var $code517 = (($291 + 10) & 4294967295);
						var $292 = HEAP8[($code517)];
						var $293 = $ix;
						var $294 = $phlist;
						var $arrayidx518 = (($294 + 24 * $293) & 4294967295);
						var $phcode519 = (($arrayidx518) & 4294967295);
						HEAP8[($phcode519)] = $292;
						var $295 = $plist3;
						var $sourceix520 = (($295 + 6) & 4294967295);
						var $296 = HEAPU16[(($sourceix520) >> 1)];
						var $conv521 = ((($296)) & 65535);
						var $cmp522 = ((($conv521)) | 0) != 0;
						if ($cmp522) {
							__label__ = 145;;
						} else {
							__label__ = 147;;
						}
						$if_then523$$if_else533$200: do {
							if (__label__ == 145) {
								var $297 = $plist3;
								var $sourceix524 = (($297 + 6) & 4294967295);
								var $298 = HEAP16[(($sourceix524) >> 1)];
								var $299 = $ix;
								var $300 = $phlist;
								var $arrayidx525 = (($300 + 24 * $299) & 4294967295);
								var $sourceix526 = (($arrayidx525 + 6) & 4294967295);
								HEAP16[(($sourceix526) >> 1)] = $298;
								var $301 = $ix;
								var $302 = $phlist;
								var $arrayidx527 = (($302 + 24 * $301) & 4294967295);
								var $newword = (($arrayidx527 + 19) & 4294967295);
								HEAP8[($newword)] = 1;
								var $303 = $start_sentence_addr;
								var $tobool528 = ((($303)) | 0) != 0;
								if (!($tobool528)) {
									__label__ = 148;
									break $if_then523$$if_else533$200;
								}
								var $304 = $ix;
								var $305 = $phlist;
								var $arrayidx530 = (($305 + 24 * $304) & 4294967295);
								var $newword531 = (($arrayidx530 + 19) & 4294967295);
								HEAP8[($newword531)] = 5;
								$start_sentence_addr = 0;;
							} else if (__label__ == 147) {
								var $306 = $ix;
								var $307 = $phlist;
								var $arrayidx534 = (($307 + 24 * $306) & 4294967295);
								var $newword535 = (($arrayidx534 + 19) & 4294967295);
								HEAP8[($newword535)] = 0;;
							}
						} while (0);
						var $308 = HEAP32[(($arrayidx538) >> 2)];
						var $mul = ((($308) * 2) & 4294967295);
						var $conv539 = ((($mul)) & 65535);
						var $309 = $ix;
						var $310 = $phlist;
						var $arrayidx540 = (($310 + 24 * $309) & 4294967295);
						var $length = (($arrayidx540 + 12) & 4294967295);
						HEAP16[(($length) >> 1)] = $conv539;
						var $311 = $ph;
						var $code541 = (($311 + 10) & 4294967295);
						var $312 = HEAPU8[($code541)];
						var $conv542 = ((($312)) & 255);
						var $cmp543 = ((($conv542)) | 0) == 24;
						var $313 = HEAP32[((_option_wordgap) >> 2)];
						var $cmp545 = ((($313)) | 0) > 0;
						var $or_cond4 = ($cmp543) & ($cmp545);
						if ($or_cond4) {
							__label__ = 149;;
						} else {
							__label__ = 150;;
						}
						if (__label__ == 149) {
							var $314 = HEAP32[((((_phoneme_tab + 40) & 4294967295)) >> 2)];
							var $315 = $ix;
							var $316 = $phlist;
							var $arrayidx547 = (($316 + 24 * $315) & 4294967295);
							var $ph548 = (($arrayidx547 + 8) & 4294967295);
							HEAP32[(($ph548) >> 2)] = $314;
							var $317 = HEAP32[((_option_wordgap) >> 2)];
							var $mul549 = ((($317) * 14) & 4294967295);
							var $conv550 = ((($mul549)) & 65535);
							var $318 = $ix;
							var $319 = $phlist;
							var $arrayidx551 = (($319 + 24 * $318) & 4294967295);
							var $length552 = (($arrayidx551 + 12) & 4294967295);
							HEAP16[(($length552) >> 1)] = $conv550;;
						}
						var $320 = $ph;
						var $type554 = (($320 + 11) & 4294967295);
						var $321 = HEAPU8[($type554)];
						var $conv555 = ((($321)) & 255);
						var $cmp556 = ((($conv555)) | 0) == 2;
						if ($cmp556) {
							__label__ = 155;;
						} else {
							__label__ = 151;;
						}
						$if_then573$$lor_lhs_false557$208: do {
							if (__label__ == 151) {
								var $322 = $ph;
								var $type558 = (($322 + 11) & 4294967295);
								var $323 = HEAPU8[($type558)];
								var $conv559 = ((($323)) & 255);
								var $cmp560 = ((($conv559)) | 0) == 3;
								if ($cmp560) {
									__label__ = 155;
									break $if_then573$$lor_lhs_false557$208;
								}
								var $324 = $ph;
								var $type562 = (($324 + 11) & 4294967295);
								var $325 = HEAPU8[($type562)];
								var $conv563 = ((($325)) & 255);
								var $cmp564 = ((($conv563)) | 0) == 8;
								if ($cmp564) {
									__label__ = 155;
									break $if_then573$$lor_lhs_false557$208;
								}
								var $326 = $ph;
								var $type566 = (($326 + 11) & 4294967295);
								var $327 = HEAPU8[($type566)];
								var $conv567 = ((($327)) & 255);
								var $cmp568 = ((($conv567)) | 0) == 5;
								if ($cmp568) {
									__label__ = 155;
									break $if_then573$$lor_lhs_false557$208;
								}
								var $328 = $ph;
								var $type570 = (($328 + 11) & 4294967295);
								var $329 = HEAPU8[($type570)];
								var $conv571 = ((($329)) & 255);
								var $cmp572 = ((($conv571)) | 0) == 7;
								if ($cmp572) {
									__label__ = 155;
									break $if_then573$$lor_lhs_false557$208;
								} else {
									__label__ = 156;
									break $if_then573$$lor_lhs_false557$208;
								}
							}
						} while (0);
						if (__label__ == 155) {
							var $330 = $ix;
							var $331 = $phlist;
							var $arrayidx574 = (($331 + 24 * $330) & 4294967295);
							var $length575 = (($arrayidx574 + 12) & 4294967295);
							HEAP16[(($length575) >> 1)] = 128;
							var $332 = $ix;
							var $333 = $phlist;
							var $arrayidx576 = (($333 + 24 * $332) & 4294967295);
							var $env577 = (($arrayidx576 + 14) & 4294967295);
							HEAP8[($env577)] = 0;;
						}
						var $334 = $ix;
						var $335 = $phlist;
						var $arrayidx579 = (($335 + 24 * $334) & 4294967295);
						var $prepause = (($arrayidx579 + 16) & 4294967295);
						HEAP8[($prepause)] = 0;
						var $336 = $ix;
						var $337 = $phlist;
						var $arrayidx580 = (($337 + 24 * $336) & 4294967295);
						var $amp = (($arrayidx580 + 18) & 4294967295);
						HEAP8[($amp)] = 20;
						var $338 = $ix;
						var $339 = $phlist;
						var $arrayidx581 = (($339 + 24 * $338) & 4294967295);
						var $pitch1 = (($arrayidx581 + 20) & 4294967295);
						HEAP8[($pitch1)] = -1;
						var $340 = $ix;
						var $341 = $phlist;
						var $arrayidx582 = (($341 + 24 * $340) & 4294967295);
						var $pitch2 = (($arrayidx582 + 21) & 4294967295);
						HEAP8[($pitch2)] = -1;
						var $342 = $ix;
						var $inc583 = ((($342) + 1) & 4294967295);
						$ix = $inc583;;
					}
				} while (0);
				var $343 = $j;
				var $inc585 = ((($343) + 1) & 4294967295);
				$j = $inc585;
				__label__ = 65;
				continue $for_cond185$91;
			}
			var $344 = $ix;
			var $345 = $phlist;
			var $arrayidx587 = (($345 + 24 * $344) & 4294967295);
			var $newword588 = (($arrayidx587 + 19) & 4294967295);
			HEAP8[($newword588)] = 2;
			var $346 = $ix;
			var $347 = $phlist;
			var $arrayidx589 = (($347 + 24 * $346) & 4294967295);
			var $phcode590 = (($arrayidx589) & 4294967295);
			HEAP8[($phcode590)] = 9;
			var $348 = $ix;
			var $349 = $phlist;
			var $arrayidx591 = (($349 + 24 * $348) & 4294967295);
			var $type592 = (($arrayidx591 + 15) & 4294967295);
			HEAP8[($type592)] = 0;
			var $350 = $post_pause_addr;
			var $conv593 = ((($350)) & 65535);
			var $351 = $ix;
			var $352 = $phlist;
			var $arrayidx594 = (($352 + 24 * $351) & 4294967295);
			var $length595 = (($arrayidx594 + 12) & 4294967295);
			HEAP16[(($length595) >> 1)] = $conv593;
			var $353 = $end_sourceix;
			var $conv596 = ((($353)) & 65535);
			var $354 = $ix;
			var $355 = $phlist;
			var $arrayidx597 = (($355 + 24 * $354) & 4294967295);
			var $sourceix598 = (($arrayidx597 + 6) & 4294967295);
			HEAP16[(($sourceix598) >> 1)] = $conv596;
			var $356 = $ix;
			var $357 = $phlist;
			var $arrayidx599 = (($357 + 24 * $356) & 4294967295);
			var $synthflags600 = (($arrayidx599 + 4) & 4294967295);
			HEAP16[(($synthflags600) >> 1)] = 0;
			var $358 = HEAP32[((((_phoneme_tab + 36) & 4294967295)) >> 2)];
			var $359 = $ix;
			var $inc601 = ((($359) + 1) & 4294967295);
			$ix = $inc601;
			var $360 = $phlist;
			var $arrayidx602 = (($360 + 24 * $359) & 4294967295);
			var $ph603 = (($arrayidx602 + 8) & 4294967295);
			HEAP32[(($ph603) >> 2)] = $358;
			var $361 = $ix;
			var $362 = $phlist;
			var $arrayidx604 = (($362 + 24 * $361) & 4294967295);
			var $phcode605 = (($arrayidx604) & 4294967295);
			HEAP8[($phcode605)] = 9;
			var $363 = $ix;
			var $364 = $phlist;
			var $arrayidx606 = (($364 + 24 * $363) & 4294967295);
			var $type607 = (($arrayidx606 + 15) & 4294967295);
			HEAP8[($type607)] = 0;
			var $365 = $ix;
			var $366 = $phlist;
			var $arrayidx608 = (($366 + 24 * $365) & 4294967295);
			var $length609 = (($arrayidx608 + 12) & 4294967295);
			HEAP16[(($length609) >> 1)] = 0;
			var $367 = $ix;
			var $368 = $phlist;
			var $arrayidx610 = (($368 + 24 * $367) & 4294967295);
			var $sourceix611 = (($arrayidx610 + 6) & 4294967295);
			HEAP16[(($sourceix611) >> 1)] = 0;
			var $369 = $ix;
			var $370 = $phlist;
			var $arrayidx612 = (($370 + 24 * $369) & 4294967295);
			var $synthflags613 = (($arrayidx612 + 4) & 4294967295);
			HEAP16[(($synthflags613) >> 1)] = 0;
			var $371 = HEAP32[((((_phoneme_tab + 40) & 4294967295)) >> 2)];
			var $372 = $ix;
			var $inc614 = ((($372) + 1) & 4294967295);
			$ix = $inc614;
			var $373 = $phlist;
			var $arrayidx615 = (($373 + 24 * $372) & 4294967295);
			var $ph616 = (($arrayidx615 + 8) & 4294967295);
			HEAP32[(($ph616) >> 2)] = $371;
			var $374 = $ix;
			HEAP32[((_n_phoneme_list) >> 2)] = $374;
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL18SubstitutePhonemesP10TranslatorP12PHONEME_LIST($tr, $plist_out) {;
			var __label__;
			var __lastLabel__ = null;
			var $tr_addr;
			var $plist_out_addr;
			var $ix;
			var $k;
			var $replace_flags;
			var $n_plist_out;
			var $word_end;
			var $switched_language;
			var $plist2;
			var $next;
			$tr_addr = $tr;
			$plist_out_addr = $plist_out;
			$n_plist_out = 0;
			$switched_language = 0;
			$next = 0;
			$ix = 0;;
			$for_cond$2: while (1) {
				var $0 = $ix;
				var $1 = HEAP32[((_n_ph_list2) >> 2)];
				var $cmp = ((($0)) | 0) < ((($1)) | 0);
				if (!($cmp)) {
					__label__ = 26;
					break $for_cond$2;
				}
				var $2 = $n_plist_out;
				var $cmp1 = ((($2)) | 0) < 1000;
				if (!($cmp1)) {
					__label__ = 26;
					break $for_cond$2;
				}
				var $3 = $ix;
				var $arrayidx = ((_ph_list2 + $3 * 8) & 4294967295);
				$plist2 = $arrayidx;
				var $4 = $plist2;
				var $phcode = (($4) & 4294967295);
				var $5 = HEAPU8[($phcode)];
				var $conv = ((($5)) & 255);
				var $cmp2 = ((($conv)) | 0) == 21;
				var $6 = $switched_language;
				if ($cmp2) {
					__lastLabel__ = 3;
					__label__ = 4;;
				} else {
					__lastLabel__ = 3;
					__label__ = 5;;
				}
				if (__label__ == 4) {
					var $xor = ($6) ^ 1;
					$switched_language = $xor;
					__lastLabel__ = 4;;
				}
				var $7 = __lastLabel__ == 4 ? $xor : ($6);
				var $cmp3 = ((($7)) | 0) == 0;
				if ($cmp3) {
					__label__ = 6;;
				} else {
					__label__ = 24;;
				}
				$if_then4$$if_end61$9: do {
					if (__label__ == 6) {
						var $8 = $ix;
						var $9 = HEAP32[((_n_ph_list2) >> 2)];
						var $sub = ((($9) - 1) & 4294967295);
						var $cmp5 = ((($8)) | 0) < ((($sub)) | 0);
						if ($cmp5) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							var $10 = $ix;
							var $add = ((($10) + 1) & 4294967295);
							var $arrayidx7 = ((_ph_list2 + $add * 8) & 4294967295);
							var $phcode8 = (($arrayidx7) & 4294967295);
							var $11 = HEAPU8[($phcode8)];
							var $idxprom = ((($11)) & 255);
							var $arrayidx9 = ((_phoneme_tab + $idxprom * 4) & 4294967295);
							var $12 = HEAP32[(($arrayidx9) >> 2)];
							$next = $12;;
						}
						$word_end = 0;
						var $13 = $plist2;
						var $add_ptr = (($13 + 8) & 4294967295);
						var $sourceix = (($add_ptr + 6) & 4294967295);
						var $14 = HEAP16[(($sourceix) >> 1)];
						var $tobool = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt)) != 0;
						if ($tobool) {
							__label__ = 11;;
						} else {
							__label__ = 9;;
						}
						$if_then14$$lor_lhs_false$14: do {
							if (__label__ == 9) {
								var $15 = $next;
								var $cmp11 = ((($15)) | 0) != 0;
								if (!($cmp11)) {
									__label__ = 12;
									break $if_then14$$lor_lhs_false$14;
								}
								var $16 = $next;
								var $type = (($16 + 11) & 4294967295);
								var $17 = HEAPU8[($type)];
								var $conv12 = ((($17)) & 255);
								var $cmp13 = ((($conv12)) | 0) == 0;
								if ($cmp13) {
									__label__ = 11;
									break $if_then14$$lor_lhs_false$14;
								} else {
									__label__ = 12;
									break $if_then14$$lor_lhs_false$14;
								}
							}
						} while (0);
						if (__label__ == 11) {
							$word_end = 1;;
						}
						$k = 0;;
						$for_cond16$20: while (1) {
							var $18 = $k;
							var $19 = HEAP32[((_n_replace_phonemes) >> 2)];
							var $cmp17 = ((($18)) | 0) < ((($19)) | 0);
							if (!($cmp17)) {
								__label__ = 23;
								break $for_cond16$20;
							}
							var $20 = $plist2;
							var $phcode19 = (($20) & 4294967295);
							var $21 = HEAPU8[($phcode19)];
							var $conv20 = ((($21)) & 255);
							var $22 = $k;
							var $arrayidx21 = ((_replace_phonemes + $22 * 3) & 4294967295);
							var $old_ph = (($arrayidx21) & 4294967295);
							var $23 = HEAPU8[($old_ph)];
							var $conv22 = ((($23)) & 255);
							var $cmp23 = ((($conv20)) | 0) == ((($conv22)) | 0);
							if ($cmp23) {
								__label__ = 15;;
							} else {
								__label__ = 22;;
							}
							$if_then24$$for_inc$23: do {
								if (__label__ == 15) {
									var $24 = $k;
									var $arrayidx25 = ((_replace_phonemes + $24 * 3) & 4294967295);
									var $type26 = (($arrayidx25 + 2) & 4294967295);
									var $25 = HEAP8[($type26)];
									var $conv27 = (tempInt = (($25)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									$replace_flags = $conv27;
									var $26 = $replace_flags;
									var $and = ($26) & 1;
									var $tobool28 = ((($and)) | 0) != 0;
									if ($tobool28) {
										__label__ = 16;;
									} else {
										__label__ = 17;;
									}
									if (__label__ == 16) {
										var $27 = $word_end;
										var $cmp30 = ((($27)) | 0) == 0;
										if ($cmp30) {
											__label__ = 22;
											break $if_then24$$for_inc$23;
										}
									}
									var $28 = $replace_flags;
									var $and33 = ($28) & 2;
									var $tobool34 = ((($and33)) | 0) != 0;
									if (!($tobool34)) {
										__label__ = 19;
										break $for_cond16$20;
									}
									var $29 = $plist2;
									var $stresslevel = (($29 + 1) & 4294967295);
									var $30 = HEAPU8[($stresslevel)];
									var $conv36 = ((($30)) & 255);
									var $and37 = ($conv36) & 7;
									var $cmp38 = ((($and37)) | 0) > 3;
									if (!($cmp38)) {
										__label__ = 19;
										break $for_cond16$20;
									}
								}
							} while (0);
							var $41 = $k;
							var $inc = ((($41) + 1) & 4294967295);
							$k = $inc;
							__label__ = 13;
							continue $for_cond16$20;
						}
						$for_end$$if_end40$30: do {
							if (__label__ == 19) {
								var $31 = $k;
								var $arrayidx41 = ((_replace_phonemes + $31 * 3) & 4294967295);
								var $new_ph = (($arrayidx41 + 1) & 4294967295);
								var $32 = HEAP8[($new_ph)];
								var $33 = $plist2;
								var $phcode42 = (($33) & 4294967295);
								HEAP8[($phcode42)] = $32;
								var $34 = $plist2;
								var $stresslevel43 = (($34 + 1) & 4294967295);
								var $35 = HEAPU8[($stresslevel43)];
								var $conv44 = ((($35)) & 255);
								var $cmp45 = ((($conv44)) | 0) > 1;
								if (!($cmp45)) {
									__label__ = 23;
									break $for_end$$if_end40$30;
								}
								var $36 = $plist2;
								var $phcode47 = (($36) & 4294967295);
								var $37 = HEAPU8[($phcode47)];
								var $idxprom48 = ((($37)) & 255);
								var $arrayidx49 = ((_phoneme_tab + $idxprom48 * 4) & 4294967295);
								var $38 = HEAP32[(($arrayidx49) >> 2)];
								var $phflags = (($38 + 4) & 4294967295);
								var $39 = HEAP32[(($phflags) >> 2)];
								var $and50 = ($39) & 2;
								var $tobool51 = ((($and50)) | 0) != 0;
								if (!($tobool51)) {
									__label__ = 23;
									break $for_end$$if_end40$30;
								}
								var $40 = $plist2;
								var $stresslevel53 = (($40 + 1) & 4294967295);
								HEAP8[($stresslevel53)] = 0;;
							}
						} while (0);
						var $42 = $plist2;
						var $phcode56 = (($42) & 4294967295);
						var $43 = HEAPU8[($phcode56)];
						var $conv57 = ((($43)) & 255);
						var $cmp58 = ((($conv57)) | 0) == 0;
						if ($cmp58) {
							__label__ = 25;
							break $if_then4$$if_end61$9;
						} else {
							__label__ = 24;
							break $if_then4$$if_end61$9;
						}
					}
				} while (0);
				if (__label__ == 24) {
					var $44 = $n_plist_out;
					var $45 = $plist_out_addr;
					var $arrayidx62 = (($45 + 24 * $44) & 4294967295);
					var $46 = $arrayidx62;
					var $47 = $plist2;
					var $48 = $47;
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $48;
					$dest$ = $46;
					$stop$ = $src$ + 8;
					if (($dest$ % 4) == ($src$ % 4) && 8 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $49 = $plist2;
					var $phcode63 = (($49) & 4294967295);
					var $50 = HEAPU8[($phcode63)];
					var $idxprom64 = ((($50)) & 255);
					var $arrayidx65 = ((_phoneme_tab + $idxprom64 * 4) & 4294967295);
					var $51 = HEAP32[(($arrayidx65) >> 2)];
					var $52 = $n_plist_out;
					var $53 = $plist_out_addr;
					var $arrayidx66 = (($53 + 24 * $52) & 4294967295);
					var $ph = (($arrayidx66 + 8) & 4294967295);
					HEAP32[(($ph) >> 2)] = $51;
					var $54 = $n_plist_out;
					var $55 = $plist_out_addr;
					var $arrayidx67 = (($55 + 24 * $54) & 4294967295);
					var $ph68 = (($arrayidx67 + 8) & 4294967295);
					var $56 = HEAP32[(($ph68) >> 2)];
					var $type69 = (($56 + 11) & 4294967295);
					var $57 = HEAP8[($type69)];
					var $58 = $n_plist_out;
					var $59 = $plist_out_addr;
					var $arrayidx70 = (($59 + 24 * $58) & 4294967295);
					var $type71 = (($arrayidx70 + 15) & 4294967295);
					HEAP8[($type71)] = $57;
					var $60 = $n_plist_out;
					var $inc72 = ((($60) + 1) & 4294967295);
					$n_plist_out = $inc72;;
				}
				var $61 = $ix;
				var $inc74 = ((($61) + 1) & 4294967295);
				$ix = $inc74;
				__label__ = 1;
				continue $for_cond$2;
			}
			var $62 = $n_plist_out;;
			return $62;
			return null;
		}

		function __Z10KlattReseti($control) {;
			var __label__;
			var __lastLabel__ = null;
			var $control_addr;
			var $r_ix;
			$control_addr = $control;
			var $0 = $control_addr;
			var $cmp = ((($0)) | 0) == 2;
			if ($cmp) {
				__lastLabel__ = 0;
				__label__ = 1;;
			} else {
				__lastLabel__ = 0;
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
				var $mul = ((($1) * 950) & 4294967295);
				var $div = ((((($mul)) | 0) / 10000) | 0);
				HEAP32[((((__ZL10kt_globals + 12) & 4294967295)) >> 2)] = $div;
				var $2 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
				var $mul1 = ((($2) * 630) & 4294967295);
				var $div2 = ((((($mul1)) | 0) / 10000) | 0);
				HEAP32[((((__ZL10kt_globals + 16) & 4294967295)) >> 2)] = $div2;
				var $3 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
				var $conv = ((($3)) | 0);
				var $div3 = -3.1415927 / ($conv);
				HEAPF32[((((__ZL10kt_globals + 72) & 4294967295)) >> 2)] = $div3;
				var $4 = HEAPF32[((((__ZL10kt_globals + 72) & 4294967295)) >> 2)];
				var $mul4 = -2 * ($4);
				HEAPF32[((((__ZL10kt_globals + 80) & 4294967295)) >> 2)] = $mul4;
				var $5 = HEAP32[((((__ZL10kt_globals + 12) & 4294967295)) >> 2)];
				var $6 = HEAP32[((((__ZL10kt_globals + 16) & 4294967295)) >> 2)];
				__ZL6setabcllP11resonator_t($5, $6, ((__ZL10kt_globals + 188 + 1152) & 4294967295));
				var $_pr = $control_addr;
				__lastLabel__ = 1;;
			}
			var $7 = __lastLabel__ == 1 ? $_pr : ($0);
			var $cmp5 = ((($7)) | 0) > 0;
			if ($cmp5) {
				__label__ = 3;;
			} else {
				__label__ = 5;;
			}
			$if_then6$$if_end9$5: do {
				if (__label__ == 3) {
					HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)] = 0;
					HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)] = 0;
					HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)] = 0;
					HEAP32[((((__ZL10kt_globals + 48) & 4294967295)) >> 2)] = 0;
					$r_ix = 17;;
					while (1) {
						var $8 = $r_ix;
						var $arrayidx = ((((__ZL10kt_globals + 188) & 4294967295) + $8 * 64) & 4294967295);
						var $p1 = (($arrayidx + 24) & 4294967295);
						HEAPF32[(($p1) >> 2)] = 0;
						var $9 = $r_ix;
						var $arrayidx8 = ((((__ZL10kt_globals + 188) & 4294967295) + $9 * 64) & 4294967295);
						var $p2 = (($arrayidx8 + 32) & 4294967295);
						HEAPF32[(($p2) >> 2)] = 0;
						var $10 = $r_ix;
						var $inc = ((($10) + 1) & 4294967295);
						$r_ix = $inc;
						var $cmp7 = ((($inc)) | 0) < 20;
						if ($cmp7) {
							__label__ = 4;
							continue;
						} else {
							__label__ = 5;
							break $if_then6$$if_end9$5;
						}
					}
				}
			} while (0);
			$r_ix = 0;;
			while (1) {
				var $11 = $r_ix;
				var $arrayidx13 = ((((__ZL10kt_globals + 188) & 4294967295) + $11 * 64) & 4294967295);
				var $p114 = (($arrayidx13 + 24) & 4294967295);
				HEAPF32[(($p114) >> 2)] = 0;
				var $12 = $r_ix;
				var $arrayidx15 = ((((__ZL10kt_globals + 188) & 4294967295) + $12 * 64) & 4294967295);
				var $p216 = (($arrayidx15 + 32) & 4294967295);
				HEAPF32[(($p216) >> 2)] = 0;
				var $13 = $r_ix;
				var $inc18 = ((($13) + 1) & 4294967295);
				$r_ix = $inc18;
				var $cmp11 = ((($inc18)) | 0) <= 16;
				if ($cmp11) {
					__label__ = 6;
					continue;
				} else {
					__label__ = 7;
					break;
				}
			};
			return;
			return;
		}

		function __ZL6setabcllP11resonator_t($f, $bw, $rp) {;
			var __label__;
			var $f_addr;
			var $bw_addr;
			var $rp_addr;
			var $r;
			var $arg;
			$f_addr = $f;
			$bw_addr = $bw;
			$rp_addr = $rp;
			var $0 = HEAPF32[((((__ZL10kt_globals + 72) & 4294967295)) >> 2)];
			var $1 = $bw_addr;
			var $conv = ((($1)) | 0);
			var $mul = ($0) * ($conv);
			$arg = $mul;
			var $2 = $arg;
			var $call = _exp($2);
			$r = $call;
			var $3 = $r;
			var $4 = $r;
			var $mul1 = ($3) * ($4);
			var $sub = (-($mul1));
			var $5 = $rp_addr;
			var $c = (($5 + 16) & 4294967295);
			HEAPF32[(($c) >> 2)] = $sub;
			var $6 = HEAPF32[((((__ZL10kt_globals + 80) & 4294967295)) >> 2)];
			var $7 = $f_addr;
			var $conv2 = ((($7)) | 0);
			var $mul3 = ($6) * ($conv2);
			$arg = $mul3;
			var $8 = $r;
			var $9 = $arg;
			var $call4 = _cos($9);
			var $mul5 = ($8) * ($call4);
			var $mul6 = ($mul5) * 2;
			var $10 = $rp_addr;
			var $b = (($10 + 8) & 4294967295);
			HEAPF32[(($b) >> 2)] = $mul6;
			var $11 = $rp_addr;
			var $b7 = (($11 + 8) & 4294967295);
			var $12 = HEAPF32[(($b7) >> 2)];
			var $sub8 = 1 - ($12);
			var $13 = $rp_addr;
			var $c9 = (($13 + 16) & 4294967295);
			var $14 = HEAPF32[(($c9) >> 2)];
			var $sub10 = ($sub8) - ($14);
			var $15 = $rp_addr;
			var $a = (($15) & 4294967295);
			HEAPF32[(($a) >> 2)] = $sub10;;
			return;
			return;
		}

		function __Z13Wavegen_Klatti($resume) {;
			var __label__;
			var $retval;
			var $resume_addr;
			var $pk;
			var $x;
			var $ix;
			var $fade;
			$resume_addr = $resume;
			var $0 = $resume_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				HEAP32[((__ZL12sample_count) >> 2)] = 0;;
			}
			$while_cond$4: while (1) {
				var $1 = HEAP32[((__ZL12sample_count) >> 2)];
				var $2 = HEAP32[((__ZL8nsamples802) >> 2)];
				var $cmp1 = ((($1)) | 0) < ((($2)) | 0);
				if (!($cmp1)) {
					__label__ = 23;
					break $while_cond$4;
				}
				var $3 = HEAP32[((((_wdata + 4) & 4294967295)) >> 2)];
				var $mul = ((($3) * 10) & 4294967295);
				var $div = ((((($mul)) | 0) / 4096) | 0);
				HEAP32[((((__ZL8kt_frame) & 4294967295)) >> 2)] = $div;
				$ix = 0;;
				$for_body$7: while (1) {
					var $4 = $ix;
					var $arrayidx = ((__ZL5peaks801 + $4 * 80) & 4294967295);
					var $freq = (($arrayidx) & 4294967295);
					var $5 = HEAP32[(($freq) >> 2)];
					var $6 = $ix;
					var $arrayidx3 = ((((__ZL8kt_frame + 8) & 4294967295) + $6 * 4) & 4294967295);
					HEAP32[(($arrayidx3) >> 2)] = $5;
					var $7 = $ix;
					var $cmp4 = ((($7)) | 0) < 4;
					if ($cmp4) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $8 = $ix;
						var $arrayidx6 = ((__ZL5peaks801 + $8 * 80) & 4294967295);
						var $bw = (($arrayidx6 + 4) & 4294967295);
						var $9 = HEAP32[(($bw) >> 2)];
						var $10 = $ix;
						var $arrayidx7 = ((((__ZL8kt_frame + 48) & 4294967295) + $10 * 4) & 4294967295);
						HEAP32[(($arrayidx7) >> 2)] = $9;;
					}
					var $11 = $ix;
					var $inc = ((($11) + 1) & 4294967295);
					$ix = $inc;
					var $cmp2 = ((($inc)) | 0) < 6;
					if ($cmp2) {
						__label__ = 4;
						continue $for_body$7;
					} else {
						__label__ = 7;
						break $for_body$7;
					}
				}
				$ix = 1;;
				$for_body11$13: while (1) {
					var $12 = $ix;
					var $arrayidx12 = ((((__ZL8kt_frame + 88) & 4294967295) + $12 * 4) & 4294967295);
					HEAP32[(($arrayidx12) >> 2)] = 0;
					var $13 = $ix;
					var $inc14 = ((($13) + 1) & 4294967295);
					$ix = $inc14;
					var $cmp10 = ((($inc14)) | 0) < 7;
					if ($cmp10) {
						__label__ = 8;
						continue $for_body11$13;
					} else {
						__label__ = 9;
						break $for_body11$13;
					}
				}
				var $14 = HEAP32[((((__ZL6klattp) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 4) & 4294967295)) >> 2)] = $14;
				var $15 = HEAP32[((((__ZL6klattp + 24) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 196) & 4294967295)) >> 2)] = $15;
				var $16 = HEAP32[((((__ZL6klattp + 28) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 184) & 4294967295)) >> 2)] = $16;
				var $17 = HEAP32[((((__ZL6klattp + 32) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 192) & 4294967295)) >> 2)] = $17;
				var $18 = HEAP32[((((__ZL6klattp + 12) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 168) & 4294967295)) >> 2)] = $18;
				var $19 = HEAP32[((((__ZL6klattp + 36) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 176) & 4294967295)) >> 2)] = $19;
				var $20 = HEAP32[((((__ZL6klattp + 16) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 188) & 4294967295)) >> 2)] = $20;
				var $21 = HEAP32[((((__ZL6klattp + 8) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 180) & 4294967295)) >> 2)] = $21;
				var $22 = HEAP32[((((__ZL6klattp + 20) & 4294967295)) >> 2)];
				HEAP32[((((__ZL8kt_frame + 172) & 4294967295)) >> 2)] = $22;
				$pk = 0;;
				$for_body18$16: while (1) {
					var $23 = $pk;
					var $arrayidx19 = ((__ZL5peaks801 + $23 * 80) & 4294967295);
					var $freq_inc = (($arrayidx19 + 48) & 4294967295);
					var $24 = HEAPF32[(($freq_inc) >> 2)];
					var $25 = $pk;
					var $arrayidx20 = ((__ZL5peaks801 + $25 * 80) & 4294967295);
					var $freq1 = (($arrayidx20 + 16) & 4294967295);
					var $26 = HEAPF32[(($freq1) >> 2)];
					var $add = ($26) + ($24);
					HEAPF32[(($freq1) >> 2)] = $add;
					var $27 = $pk;
					var $arrayidx21 = ((__ZL5peaks801 + $27 * 80) & 4294967295);
					var $freq122 = (($arrayidx21 + 16) & 4294967295);
					var $28 = HEAPF32[(($freq122) >> 2)];
					var $conv = ((($28)) | 0);
					var $29 = $pk;
					var $arrayidx23 = ((__ZL5peaks801 + $29 * 80) & 4294967295);
					var $freq24 = (($arrayidx23) & 4294967295);
					HEAP32[(($freq24) >> 2)] = $conv;
					var $30 = $pk;
					var $arrayidx25 = ((__ZL5peaks801 + $30 * 80) & 4294967295);
					var $bw_inc = (($arrayidx25 + 56) & 4294967295);
					var $31 = HEAPF32[(($bw_inc) >> 2)];
					var $32 = $pk;
					var $arrayidx26 = ((__ZL5peaks801 + $32 * 80) & 4294967295);
					var $bw1 = (($arrayidx26 + 24) & 4294967295);
					var $33 = HEAPF32[(($bw1) >> 2)];
					var $add27 = ($33) + ($31);
					HEAPF32[(($bw1) >> 2)] = $add27;
					var $34 = $pk;
					var $arrayidx28 = ((__ZL5peaks801 + $34 * 80) & 4294967295);
					var $bw129 = (($arrayidx28 + 24) & 4294967295);
					var $35 = HEAPF32[(($bw129) >> 2)];
					var $conv30 = ((($35)) | 0);
					var $36 = $pk;
					var $arrayidx31 = ((__ZL5peaks801 + $36 * 80) & 4294967295);
					var $bw32 = (($arrayidx31 + 4) & 4294967295);
					HEAP32[(($bw32) >> 2)] = $conv30;
					var $37 = $pk;
					var $arrayidx33 = ((__ZL5peaks801 + $37 * 80) & 4294967295);
					var $bp_inc = (($arrayidx33 + 72) & 4294967295);
					var $38 = HEAPF32[(($bp_inc) >> 2)];
					var $39 = $pk;
					var $arrayidx34 = ((__ZL5peaks801 + $39 * 80) & 4294967295);
					var $bp1 = (($arrayidx34 + 40) & 4294967295);
					var $40 = HEAPF32[(($bp1) >> 2)];
					var $add35 = ($40) + ($38);
					HEAPF32[(($bp1) >> 2)] = $add35;
					var $41 = $pk;
					var $arrayidx36 = ((__ZL5peaks801 + $41 * 80) & 4294967295);
					var $bp137 = (($arrayidx36 + 40) & 4294967295);
					var $42 = HEAPF32[(($bp137) >> 2)];
					var $conv38 = ((($42)) | 0);
					var $43 = $pk;
					var $arrayidx39 = ((__ZL5peaks801 + $43 * 80) & 4294967295);
					var $bp = (($arrayidx39 + 12) & 4294967295);
					HEAP32[(($bp) >> 2)] = $conv38;
					var $44 = $pk;
					var $arrayidx40 = ((__ZL5peaks801 + $44 * 80) & 4294967295);
					var $ap_inc = (($arrayidx40 + 64) & 4294967295);
					var $45 = HEAPF32[(($ap_inc) >> 2)];
					var $46 = $pk;
					var $arrayidx41 = ((__ZL5peaks801 + $46 * 80) & 4294967295);
					var $ap1 = (($arrayidx41 + 32) & 4294967295);
					var $47 = HEAPF32[(($ap1) >> 2)];
					var $add42 = ($47) + ($45);
					HEAPF32[(($ap1) >> 2)] = $add42;
					var $48 = $pk;
					var $arrayidx43 = ((__ZL5peaks801 + $48 * 80) & 4294967295);
					var $ap144 = (($arrayidx43 + 32) & 4294967295);
					var $49 = HEAPF32[(($ap144) >> 2)];
					var $conv45 = ((($49)) | 0);
					var $50 = $pk;
					var $arrayidx46 = ((__ZL5peaks801 + $50 * 80) & 4294967295);
					var $ap = (($arrayidx46 + 8) & 4294967295);
					HEAP32[(($ap) >> 2)] = $conv45;
					var $51 = $pk;
					var $inc48 = ((($51) + 1) & 4294967295);
					$pk = $inc48;
					var $cmp17 = ((($inc48)) | 0) < 9;
					if ($cmp17) {
						__label__ = 10;
						continue $for_body18$16;
					} else {
						__label__ = 11;
						break $for_body18$16;
					}
				}
				$ix = 0;;
				$for_body52$19: while (1) {
					var $52 = $ix;
					var $arrayidx53 = ((__ZL10klattp_inc + $52 * 8) & 4294967295);
					var $53 = HEAPF32[(($arrayidx53) >> 2)];
					var $54 = $ix;
					var $arrayidx54 = ((__ZL7klattp1 + $54 * 8) & 4294967295);
					var $55 = HEAPF32[(($arrayidx54) >> 2)];
					var $add55 = ($55) + ($53);
					HEAPF32[(($arrayidx54) >> 2)] = $add55;
					var $56 = $ix;
					var $arrayidx56 = ((__ZL7klattp1 + $56 * 8) & 4294967295);
					var $57 = HEAPF32[(($arrayidx56) >> 2)];
					var $conv57 = ((($57)) | 0);
					var $58 = $ix;
					var $arrayidx58 = ((__ZL6klattp + $58 * 4) & 4294967295);
					HEAP32[(($arrayidx58) >> 2)] = $conv57;
					var $59 = $ix;
					var $inc60 = ((($59) + 1) & 4294967295);
					$ix = $inc60;
					var $cmp51 = ((($inc60)) | 0) < 10;
					if ($cmp51) {
						__label__ = 12;
						continue $for_body52$19;
					} else {
						__label__ = 13;
						break $for_body52$19;
					}
				}
				$ix = 0;;
				while (1) {
					var $60 = $ix;
					var $arrayidx65 = ((__ZL5peaks801 + $60 * 80) & 4294967295);
					var $freq66 = (($arrayidx65) & 4294967295);
					var $61 = HEAP32[(($freq66) >> 2)];
					var $62 = $ix;
					var $arrayidx67 = ((((__ZL8kt_frame + 208) & 4294967295) + $62 * 4) & 4294967295);
					HEAP32[(($arrayidx67) >> 2)] = $61;
					var $63 = $ix;
					var $cmp68 = ((($63)) | 0) < 4;
					if ($cmp68) {
						__label__ = 15;;
					} else {
						__label__ = 16;;
					}
					if (__label__ == 15) {
						var $64 = $ix;
						var $arrayidx70 = ((__ZL5peaks801 + $64 * 80) & 4294967295);
						var $bw71 = (($arrayidx70 + 4) & 4294967295);
						var $65 = HEAP32[(($bw71) >> 2)];
						var $66 = $ix;
						var $arrayidx72 = ((((__ZL8kt_frame + 248) & 4294967295) + $66 * 4) & 4294967295);
						HEAP32[(($arrayidx72) >> 2)] = $65;;
					}
					var $67 = $ix;
					var $inc75 = ((($67) + 1) & 4294967295);
					$ix = $inc75;
					var $cmp63 = ((($inc75)) | 0) <= 6;
					if ($cmp63) {
						__label__ = 14;
						continue;
					} else {
						__label__ = 17;
						break;
					}
				}
				var $68 = HEAP32[((((_wdata + 12) & 4294967295)) >> 2)];
				var $69 = HEAP32[((((_wdata + 8) & 4294967295)) >> 2)];
				var $add77 = ((($69) + ($68)) & 4294967295);
				HEAP32[((((_wdata + 8) & 4294967295)) >> 2)] = $add77;
				var $70 = HEAP32[((((_wdata + 8) & 4294967295)) >> 2)];
				var $shr = ($70) >> 8;
				$ix = $shr;
				var $cmp78 = ((($shr)) | 0) > 127;
				if ($cmp78) {
					__label__ = 18;;
				} else {
					__label__ = 19;;
				}
				if (__label__ == 18) {
					$ix = 127;;
				}
				var $71 = $ix;
				var $72 = HEAP32[((((_wdata) & 4294967295)) >> 2)];
				var $arrayidx81 = (($72 + $71) & 4294967295);
				var $73 = HEAPU8[($arrayidx81)];
				var $conv82 = ((($73)) & 255);
				var $74 = HEAP32[((((_wdata + 20) & 4294967295)) >> 2)];
				var $mul83 = ((($conv82) * ($74)) & 4294967295);
				$x = $mul83;
				var $75 = $x;
				var $shr84 = ($75) >> 8;
				var $76 = HEAP32[((((_wdata + 16) & 4294967295)) >> 2)];
				var $add85 = ((($shr84) + ($76)) & 4294967295);
				HEAP32[((((_wdata + 4) & 4294967295)) >> 2)] = $add85;
				var $77 = HEAP32[((__ZL8nsamples802) >> 2)];
				var $78 = HEAP32[((__ZL12sample_count) >> 2)];
				var $sub = ((($77) - ($78)) & 4294967295);
				HEAP32[((((__ZL10kt_globals + 28) & 4294967295)) >> 2)] = $sub;
				var $cmp86 = ((($sub)) | 0) > 64;
				if ($cmp86) {
					__label__ = 20;;
				} else {
					__label__ = 21;;
				}
				if (__label__ == 20) {
					HEAP32[((((__ZL10kt_globals + 28) & 4294967295)) >> 2)] = 64;;
				}
				__ZL10frame_initP13klatt_frame_t();
				var $call = __ZL7parwaveP13klatt_frame_t();
				var $cmp89 = ((($call)) | 0) == 1;
				if ($cmp89) {
					__label__ = 22;
					break $while_cond$4;
				} else {
					__label__ = 2;
					continue $while_cond$4;
				}
			}
			$while_end$$if_then90$34: do {
				if (__label__ == 23) {
					var $79 = HEAP32[((__ZL8end_wave803) >> 2)];
					var $cmp92 = ((($79)) | 0) > 0;
					if ($cmp92) {
						__label__ = 24;;
					} else {
						__label__ = 26;;
					}
					$if_then93$$if_end99$36: do {
						if (__label__ == 24) {
							$fade = 64;
							var $80 = $fade;
							HEAP32[((((__ZL10kt_globals + 180) & 4294967295)) >> 2)] = $80;
							HEAP32[((__ZL8end_wave803) >> 2)] = 0;
							var $81 = $fade;
							var $82 = HEAP32[((__ZL12sample_count) >> 2)];
							var $sub94 = ((($82) - ($81)) & 4294967295);
							HEAP32[((__ZL12sample_count) >> 2)] = $sub94;
							var $83 = $fade;
							HEAP32[((((__ZL10kt_globals + 28) & 4294967295)) >> 2)] = $83;
							var $call95 = __ZL7parwaveP13klatt_frame_t();
							var $cmp96 = ((($call95)) | 0) == 1;
							if (!($cmp96)) {
								__label__ = 26;
								break $if_then93$$if_end99$36;
							}
							$retval = 1;
							__label__ = 27;
							break $while_end$$if_then90$34;
						}
					} while (0);
					$retval = 0;;
				} else if (__label__ == 22) {
					$retval = 1;;
				}
			} while (0);
			var $84 = $retval;;
			return $84;
			return null;
		}

		function __ZL10frame_initP13klatt_frame_t() {
			var __stackBase__ = STACKTOP;
			STACKTOP += 56;
			_memset(__stackBase__, 0, 56);
			var __label__;
			var $frame_addr;
			var $amp_par = __stackBase__;
			var $Gain0_tmp;
			var $ix;
			$frame_addr = __ZL8kt_frame;
			var $0 = $frame_addr;
			var $F0hz10 = (($0) & 4294967295);
			var $1 = HEAP32[(($F0hz10) >> 2)];
			var $div = ((((($1)) | 0) / 10) | 0);
			HEAP32[((((__ZL10kt_globals + 176) & 4294967295)) >> 2)] = $div;
			var $2 = $frame_addr;
			var $AVdb = (($2 + 4) & 4294967295);
			var $3 = HEAP32[(($AVdb) >> 2)];
			var $sub = ((($3) - 7) & 4294967295);
			var $4 = $frame_addr;
			var $AVdb_tmp = (($4 + 204) & 4294967295);
			HEAP32[(($AVdb_tmp) >> 2)] = $sub;
			var $5 = $frame_addr;
			var $AVdb_tmp1 = (($5 + 204) & 4294967295);
			var $6 = HEAP32[(($AVdb_tmp1) >> 2)];
			var $cmp = ((($6)) | 0) < 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $7 = $frame_addr;
				var $AVdb_tmp2 = (($7 + 204) & 4294967295);
				HEAP32[(($AVdb_tmp2) >> 2)] = 0;;
			}
			var $8 = $frame_addr;
			var $ASP = (($8 + 168) & 4294967295);
			var $9 = HEAP32[(($ASP) >> 2)];
			var $call = __ZL7DBtoLINl($9);
			var $mul = ($call) * 0.05;
			HEAPF32[((((__ZL10kt_globals + 128) & 4294967295)) >> 2)] = $mul;
			var $10 = $frame_addr;
			var $AF = (($10 + 184) & 4294967295);
			var $11 = HEAP32[(($AF) >> 2)];
			var $call3 = __ZL7DBtoLINl($11);
			var $mul4 = ($call3) * 0.25;
			HEAPF32[((((__ZL10kt_globals + 136) & 4294967295)) >> 2)] = $mul4;
			var $12 = $frame_addr;
			var $AVpdb = (($12 + 196) & 4294967295);
			var $13 = HEAP32[(($AVpdb) >> 2)];
			var $call5 = __ZL7DBtoLINl($13);
			HEAPF32[((((__ZL10kt_globals + 120) & 4294967295)) >> 2)] = $call5;
			var $14 = $frame_addr;
			var $AB = (($14 + 192) & 4294967295);
			var $15 = HEAP32[(($AB) >> 2)];
			var $call6 = __ZL7DBtoLINl($15);
			var $mul7 = ($call6) * 0.05;
			HEAPF32[((((__ZL10kt_globals + 104) & 4294967295)) >> 2)] = $mul7;
			$ix = 0;;
			$for_body$5: while (1) {
				var $16 = $ix;
				var $17 = $frame_addr;
				var $Ap = (($17 + 88) & 4294967295);
				var $arrayidx = (($Ap + $16 * 4) & 4294967295);
				var $18 = HEAP32[(($arrayidx) >> 2)];
				var $call9 = __ZL7DBtoLINl($18);
				var $19 = $ix;
				var $arrayidx10 = ((__ZZL10frame_initP13klatt_frame_tE14amp_par_factor + $19 * 8) & 4294967295);
				var $20 = HEAPF32[(($arrayidx10) >> 2)];
				var $mul11 = ($call9) * ($20);
				var $21 = $ix;
				var $arrayidx12 = (($amp_par + $21 * 8) & 4294967295);
				HEAPF32[(($arrayidx12) >> 2)] = $mul11;
				var $22 = $ix;
				var $inc = ((($22) + 1) & 4294967295);
				$ix = $inc;
				var $cmp8 = ((($inc)) | 0) <= 6;
				if ($cmp8) {
					__label__ = 3;
					continue $for_body$5;
				} else {
					__label__ = 4;
					break $for_body$5;
				}
			}
			var $23 = $frame_addr;
			var $Gain0 = (($23 + 200) & 4294967295);
			var $24 = HEAP32[(($Gain0) >> 2)];
			var $sub13 = ((($24) - 3) & 4294967295);
			$Gain0_tmp = $sub13;
			var $25 = $Gain0_tmp;
			var $cmp14 = ((($25)) | 0) <= 0;
			if ($cmp14) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				$Gain0_tmp = 57;;
			}
			var $26 = $Gain0_tmp;
			var $call17 = __ZL7DBtoLINl($26);
			var $27 = HEAP32[((((__ZL10kt_globals + 184) & 4294967295)) >> 2)];
			var $conv = ((($27)) | 0);
			var $div18 = ($call17) / ($conv);
			HEAPF32[((((__ZL10kt_globals + 152) & 4294967295)) >> 2)] = $div18;
			$ix = 1;;
			$for_body21$11: while (1) {
				var $28 = $ix;
				var $29 = $frame_addr;
				var $Fhz = (($29 + 8) & 4294967295);
				var $arrayidx22 = (($Fhz + $28 * 4) & 4294967295);
				var $30 = HEAP32[(($arrayidx22) >> 2)];
				var $31 = $ix;
				var $32 = $frame_addr;
				var $Bhz = (($32 + 48) & 4294967295);
				var $arrayidx23 = (($Bhz + $31 * 4) & 4294967295);
				var $33 = HEAP32[(($arrayidx23) >> 2)];
				var $34 = $ix;
				var $arrayidx24 = ((((__ZL10kt_globals + 188) & 4294967295) + $34 * 64) & 4294967295);
				__ZL6setabcllP11resonator_t($30, $33, $arrayidx24);
				var $35 = $ix;
				var $cmp25 = ((($35)) | 0) <= 5;
				if ($cmp25) {
					__label__ = 8;;
				} else {
					__label__ = 9;;
				}
				if (__label__ == 8) {
					var $36 = $ix;
					var $37 = $frame_addr;
					var $Fhz_next = (($37 + 208) & 4294967295);
					var $arrayidx27 = (($Fhz_next + $36 * 4) & 4294967295);
					var $38 = HEAP32[(($arrayidx27) >> 2)];
					var $39 = $ix;
					var $40 = $frame_addr;
					var $Bhz_next = (($40 + 248) & 4294967295);
					var $arrayidx28 = (($Bhz_next + $39 * 4) & 4294967295);
					var $41 = HEAP32[(($arrayidx28) >> 2)];
					var $42 = $ix;
					var $arrayidx29 = ((((__ZL10kt_globals + 1468) & 4294967295) + $42 * 64) & 4294967295);
					__ZL6setabcllP11resonator_t($38, $41, $arrayidx29);
					var $43 = $ix;
					var $arrayidx30 = ((((__ZL10kt_globals + 1468) & 4294967295) + $43 * 64) & 4294967295);
					var $a = (($arrayidx30) & 4294967295);
					var $44 = HEAPF32[(($a) >> 2)];
					var $45 = $ix;
					var $arrayidx31 = ((((__ZL10kt_globals + 188) & 4294967295) + $45 * 64) & 4294967295);
					var $a32 = (($arrayidx31) & 4294967295);
					var $46 = HEAPF32[(($a32) >> 2)];
					var $sub33 = ($44) - ($46);
					var $div34 = ($sub33) / 64;
					var $47 = $ix;
					var $arrayidx35 = ((((__ZL10kt_globals + 188) & 4294967295) + $47 * 64) & 4294967295);
					var $a_inc = (($arrayidx35 + 40) & 4294967295);
					HEAPF32[(($a_inc) >> 2)] = $div34;
					var $48 = $ix;
					var $arrayidx36 = ((((__ZL10kt_globals + 1468) & 4294967295) + $48 * 64) & 4294967295);
					var $b = (($arrayidx36 + 8) & 4294967295);
					var $49 = HEAPF32[(($b) >> 2)];
					var $50 = $ix;
					var $arrayidx37 = ((((__ZL10kt_globals + 188) & 4294967295) + $50 * 64) & 4294967295);
					var $b38 = (($arrayidx37 + 8) & 4294967295);
					var $51 = HEAPF32[(($b38) >> 2)];
					var $sub39 = ($49) - ($51);
					var $div40 = ($sub39) / 64;
					var $52 = $ix;
					var $arrayidx41 = ((((__ZL10kt_globals + 188) & 4294967295) + $52 * 64) & 4294967295);
					var $b_inc = (($arrayidx41 + 48) & 4294967295);
					HEAPF32[(($b_inc) >> 2)] = $div40;
					var $53 = $ix;
					var $arrayidx42 = ((((__ZL10kt_globals + 1468) & 4294967295) + $53 * 64) & 4294967295);
					var $c = (($arrayidx42 + 16) & 4294967295);
					var $54 = HEAPF32[(($c) >> 2)];
					var $55 = $ix;
					var $arrayidx43 = ((((__ZL10kt_globals + 188) & 4294967295) + $55 * 64) & 4294967295);
					var $c44 = (($arrayidx43 + 16) & 4294967295);
					var $56 = HEAPF32[(($c44) >> 2)];
					var $sub45 = ($54) - ($56);
					var $div46 = ($sub45) / 64;
					var $57 = $ix;
					var $arrayidx47 = ((((__ZL10kt_globals + 188) & 4294967295) + $57 * 64) & 4294967295);
					var $c_inc = (($arrayidx47 + 56) & 4294967295);
					HEAPF32[(($c_inc) >> 2)] = $div46;;
				}
				var $58 = $ix;
				var $inc50 = ((($58) + 1) & 4294967295);
				$ix = $inc50;
				var $cmp20 = ((($inc50)) | 0) <= 9;
				if ($cmp20) {
					__label__ = 7;
					continue $for_body21$11;
				} else {
					__label__ = 10;
					break $for_body21$11;
				}
			}
			var $59 = $frame_addr;
			var $Fhz52 = (($59 + 8) & 4294967295);
			var $arrayidx53 = (($Fhz52) & 4294967295);
			var $60 = HEAP32[(($arrayidx53) >> 2)];
			var $61 = $frame_addr;
			var $Bhz54 = (($61 + 48) & 4294967295);
			var $arrayidx55 = (($Bhz54) & 4294967295);
			var $62 = HEAP32[(($arrayidx55) >> 2)];
			__ZL10setzeroabcllP11resonator_t($60, $62, ((__ZL10kt_globals + 188) & 4294967295));
			var $63 = $frame_addr;
			var $Fhz_next56 = (($63 + 208) & 4294967295);
			var $arrayidx57 = (($Fhz_next56) & 4294967295);
			var $64 = HEAP32[(($arrayidx57) >> 2)];
			var $65 = $frame_addr;
			var $Bhz_next58 = (($65 + 248) & 4294967295);
			var $arrayidx59 = (($Bhz_next58) & 4294967295);
			var $66 = HEAP32[(($arrayidx59) >> 2)];
			__ZL10setzeroabcllP11resonator_t($64, $66, ((__ZL10kt_globals + 1468) & 4294967295));
			var $67 = HEAPF32[((((__ZL10kt_globals + 1468) & 4294967295)) >> 2)];
			var $68 = HEAPF32[((((__ZL10kt_globals + 188) & 4294967295)) >> 2)];
			var $sub60 = ($67) - ($68);
			var $div61 = ($sub60) / 64;
			HEAPF32[((((__ZL10kt_globals + 188 + 40) & 4294967295)) >> 2)] = $div61;
			var $69 = HEAPF32[((((__ZL10kt_globals + 1468 + 8) & 4294967295)) >> 2)];
			var $70 = HEAPF32[((((__ZL10kt_globals + 188 + 8) & 4294967295)) >> 2)];
			var $sub62 = ($69) - ($70);
			var $div63 = ($sub62) / 64;
			HEAPF32[((((__ZL10kt_globals + 188 + 48) & 4294967295)) >> 2)] = $div63;
			var $71 = HEAPF32[((((__ZL10kt_globals + 1468 + 16) & 4294967295)) >> 2)];
			var $72 = HEAPF32[((((__ZL10kt_globals + 188 + 16) & 4294967295)) >> 2)];
			var $sub64 = ($71) - ($72);
			var $div65 = ($sub64) / 64;
			HEAPF32[((((__ZL10kt_globals + 188 + 56) & 4294967295)) >> 2)] = $div65;
			$ix = 0;;
			while (1) {
				var $73 = $ix;
				var $74 = $frame_addr;
				var $Fhz69 = (($74 + 8) & 4294967295);
				var $arrayidx70 = (($Fhz69 + $73 * 4) & 4294967295);
				var $75 = HEAP32[(($arrayidx70) >> 2)];
				var $76 = $ix;
				var $77 = $frame_addr;
				var $Bphz = (($77 + 128) & 4294967295);
				var $arrayidx71 = (($Bphz + $76 * 4) & 4294967295);
				var $78 = HEAP32[(($arrayidx71) >> 2)];
				var $79 = $ix;
				var $add = ((($79) + 10) & 4294967295);
				var $arrayidx72 = ((((__ZL10kt_globals + 188) & 4294967295) + $add * 64) & 4294967295);
				__ZL6setabcllP11resonator_t($75, $78, $arrayidx72);
				var $80 = $ix;
				var $arrayidx73 = (($amp_par + $80 * 8) & 4294967295);
				var $81 = HEAPF32[(($arrayidx73) >> 2)];
				var $82 = $ix;
				var $add74 = ((($82) + 10) & 4294967295);
				var $arrayidx75 = ((((__ZL10kt_globals + 188) & 4294967295) + $add74 * 64) & 4294967295);
				var $a76 = (($arrayidx75) & 4294967295);
				var $83 = HEAPF32[(($a76) >> 2)];
				var $mul77 = ($83) * ($81);
				HEAPF32[(($a76) >> 2)] = $mul77;
				var $84 = $ix;
				var $inc79 = ((($84) + 1) & 4294967295);
				$ix = $inc79;
				var $cmp67 = ((($inc79)) | 0) <= 6;
				if ($cmp67) {
					__label__ = 11;
					continue;
				} else {
					__label__ = 12;
					break;
				}
			}
			var $85 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
			var $div81 = ((((($85)) | 0) / 2) | 0);
			__ZL6setabcllP11resonator_t(0, $div81, ((__ZL10kt_globals + 188 + 1216) & 4294967295));
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function __ZL7parwaveP13klatt_frame_t() {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $frame_addr;
			var $temp;
			var $value;
			var $outbypas;
			var $out;
			var $n4;
			var $frics;
			var $glotout;
			var $aspiration;
			var $casc_next_in;
			var $par_glotout;
			var $ix;
			var $z2;
			var $c;
			var $sample;
			$frame_addr = __ZL8kt_frame;
			var $0 = $frame_addr;
			__ZL7flutterP13klatt_frame_t($0);
			HEAP32[((((__ZL10kt_globals + 36) & 4294967295)) >> 2)] = 0;;
			$for_cond$2: while (1) {
				var $1 = HEAP32[((((__ZL10kt_globals + 36) & 4294967295)) >> 2)];
				var $2 = HEAP32[((((__ZL10kt_globals + 28) & 4294967295)) >> 2)];
				var $cmp = ((($1)) | 0) < ((($2)) | 0);
				if (!($cmp)) {
					__label__ = 36;
					break $for_cond$2;
				}
				var $3 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5noise) >> 2)];
				var $call = __ZL9gen_noised($3);
				HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5noise) >> 2)] = $call;
				var $4 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
				var $5 = HEAP32[((((__ZL10kt_globals + 48) & 4294967295)) >> 2)];
				var $cmp1 = ((($4)) | 0) > ((($5)) | 0);
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $6 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5noise) >> 2)];
					var $mul = ($6) * 0.5;
					HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5noise) >> 2)] = $mul;;
				}
				var $7 = HEAPF32[((((__ZL10kt_globals + 136) & 4294967295)) >> 2)];
				var $8 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5noise) >> 2)];
				var $mul2 = ($7) * ($8);
				$frics = $mul2;
				$n4 = 0;;
				$for_body5$8: while (1) {
					var $9 = HEAP32[((((__ZL10kt_globals + 20) & 4294967295)) >> 2)];
					if ($9 == 1) {
						__label__ = 6;;
					} else if ($9 == 2) {
						__label__ = 7;;
					} else if ($9 == 3) {
						__label__ = 8;;
					} else {
						__label__ = 9;;
					}
					if (__label__ == 6) {
						var $call6 = __ZL16impulsive_sourcev();
						HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)] = $call6;;
					} else if (__label__ == 7) {
						var $call8 = __ZL14natural_sourcev();
						HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)] = $call8;;
					} else if (__label__ == 8) {
						var $call10 = __ZL14sampled_sourcev();
						HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)] = $call10;;
					}
					var $10 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
					var $11 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
					var $cmp11 = ((($10)) | 0) >= ((($11)) | 0);
					if ($cmp11) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					if (__label__ == 10) {
						HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)] = 0;
						var $12 = $frame_addr;
						__ZL21pitch_synch_par_resetP13klatt_frame_t($12);;
					}
					var $13 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)];
					var $call14 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 1152) & 4294967295), $13);
					HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)] = $call14;
					var $14 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
					var $inc = ((($14) + 1) & 4294967295);
					HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)] = $inc;
					var $15 = $n4;
					var $inc15 = ((($15) + 1) & 4294967295);
					$n4 = $inc15;
					var $cmp4 = ((($inc15)) | 0) < 4;
					if ($cmp4) {
						__label__ = 5;
						continue $for_body5$8;
					} else {
						__label__ = 12;
						break $for_body5$8;
					}
				}
				var $16 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)];
				var $17 = HEAPF32[((((__ZL10kt_globals + 88) & 4294967295)) >> 2)];
				var $mul16 = ($16) * ($17);
				var $18 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5vlast) >> 2)];
				var $19 = HEAPF32[((((__ZL10kt_globals + 96) & 4294967295)) >> 2)];
				var $mul17 = ($18) * ($19);
				var $add = ($mul16) + ($mul17);
				HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)] = $add;
				var $20 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)];
				HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5vlast) >> 2)] = $20;
				var $21 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
				var $22 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $cmp18 = ((($21)) | 0) < ((($22)) | 0);
				if ($cmp18) {
					__label__ = 13;;
				} else {
					__label__ = 14;;
				}
				if (__label__ == 13) {
					var $23 = HEAPF32[((((__ZL10kt_globals + 144) & 4294967295)) >> 2)];
					var $24 = HEAP32[((((__ZL10kt_globals + 52) & 4294967295)) >> 2)];
					var $conv = ((($24)) | 0);
					var $mul20 = ($23) * ($conv);
					var $25 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)];
					var $add21 = ($25) + ($mul20);
					HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)] = $add21;;
				}
				var $26 = HEAPF32[((((__ZL10kt_globals + 112) & 4294967295)) >> 2)];
				var $27 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)];
				var $mul23 = ($26) * ($27);
				$glotout = $mul23;
				var $28 = HEAPF32[((((__ZL10kt_globals + 120) & 4294967295)) >> 2)];
				var $29 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5voice) >> 2)];
				var $mul24 = ($28) * ($29);
				$par_glotout = $mul24;
				var $30 = HEAPF32[((((__ZL10kt_globals + 128) & 4294967295)) >> 2)];
				var $31 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5noise) >> 2)];
				var $mul25 = ($30) * ($31);
				$aspiration = $mul25;
				var $32 = $aspiration;
				var $33 = $glotout;
				var $add26 = ($33) + ($32);
				$glotout = $add26;
				var $34 = $aspiration;
				var $35 = $par_glotout;
				var $add27 = ($35) + ($34);
				$par_glotout = $add27;
				$out = 0;
				var $36 = HEAP32[((((__ZL10kt_globals) & 4294967295)) >> 2)];
				var $cmp28 = ((($36)) | 0) != 2;
				if ($cmp28) {
					__label__ = 15;;
				} else {
					__label__ = 16;;
				}
				if (__label__ == 15) {
					var $37 = $glotout;
					var $call30 = __ZL14antiresonator2P11resonator_td($37);
					$casc_next_in = $call30;
					var $38 = $casc_next_in;
					var $call31 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 576) & 4294967295), $38);
					$casc_next_in = $call31;
					var $39 = $casc_next_in;
					var $call32 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 512) & 4294967295), $39);
					$casc_next_in = $call32;
					var $40 = $casc_next_in;
					var $call33 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 448) & 4294967295), $40);
					$casc_next_in = $call33;
					var $41 = $casc_next_in;
					var $call34 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 384) & 4294967295), $41);
					$casc_next_in = $call34;
					var $42 = $casc_next_in;
					var $call35 = __ZL10resonator2P11resonator_td(((__ZL10kt_globals + 188 + 320) & 4294967295), $42);
					$casc_next_in = $call35;
					var $43 = $casc_next_in;
					var $call36 = __ZL10resonator2P11resonator_td(((__ZL10kt_globals + 188 + 256) & 4294967295), $43);
					$casc_next_in = $call36;
					var $44 = $casc_next_in;
					var $call37 = __ZL10resonator2P11resonator_td(((__ZL10kt_globals + 188 + 192) & 4294967295), $44);
					$casc_next_in = $call37;
					var $45 = $casc_next_in;
					var $call38 = __ZL10resonator2P11resonator_td(((__ZL10kt_globals + 188 + 128) & 4294967295), $45);
					$casc_next_in = $call38;
					var $46 = $casc_next_in;
					var $call39 = __ZL10resonator2P11resonator_td(((__ZL10kt_globals + 188 + 64) & 4294967295), $46);
					$out = $call39;;
				}
				var $47 = $par_glotout;
				HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5sourc) >> 2)] = $47;
				var $48 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5sourc) >> 2)];
				var $call41 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 704) & 4294967295), $48);
				var $49 = $out;
				var $add42 = ($49) + ($call41);
				$out = $add42;
				var $50 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5sourc) >> 2)];
				var $call43 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 640) & 4294967295), $50);
				var $51 = $out;
				var $add44 = ($51) + ($call43);
				$out = $add44;
				var $52 = $frics;
				var $53 = $par_glotout;
				var $add45 = ($52) + ($53);
				var $54 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE8glotlast) >> 2)];
				var $sub = ($add45) - ($54);
				HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5sourc) >> 2)] = $sub;
				var $55 = $par_glotout;
				HEAPF32[((__ZZL7parwaveP13klatt_frame_tE8glotlast) >> 2)] = $55;
				$ix = 12;;
				$for_body48$25: while (1) {
					var $56 = $ix;
					var $arrayidx = ((((__ZL10kt_globals + 188) & 4294967295) + $56 * 64) & 4294967295);
					var $57 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5sourc) >> 2)];
					var $call49 = __ZL9resonatorP11resonator_td($arrayidx, $57);
					var $58 = $out;
					var $sub50 = ($call49) - ($58);
					$out = $sub50;
					var $59 = $ix;
					var $inc52 = ((($59) + 1) & 4294967295);
					$ix = $inc52;
					var $cmp47 = ((($inc52)) | 0) <= 16;
					if ($cmp47) {
						__label__ = 17;
						continue $for_body48$25;
					} else {
						__label__ = 18;
						break $for_body48$25;
					}
				}
				var $60 = HEAPF32[((((__ZL10kt_globals + 104) & 4294967295)) >> 2)];
				var $61 = HEAPF32[((__ZZL7parwaveP13klatt_frame_tE5sourc) >> 2)];
				var $mul54 = ($60) * ($61);
				$outbypas = $mul54;
				var $62 = $outbypas;
				var $63 = $out;
				var $sub55 = ($62) - ($63);
				$out = $sub55;
				var $64 = $out;
				var $call56 = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 1216) & 4294967295), $64);
				$out = $call56;
				var $65 = $out;
				var $66 = HEAP32[((((_wdata + 52) & 4294967295)) >> 2)];
				var $conv57 = ((($66)) | 0);
				var $mul58 = ($65) * ($conv57);
				var $67 = HEAPF32[((((__ZL10kt_globals + 152) & 4294967295)) >> 2)];
				var $mul59 = ($mul58) * ($67);
				var $conv60 = ((($mul59)) | 0);
				var $conv61 = ((($conv60)) | 0);
				$temp = $conv61;
				$z2 = 0;
				var $68 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
				var $69 = HEAP32[((((_wdata + 28) & 4294967295)) >> 2)];
				var $cmp62 = ((($68)) | 0) < ((($69)) | 0);
				if ($cmp62) {
					__label__ = 19;;
				} else {
					__label__ = 23;;
				}
				if (__label__ == 19) {
					var $70 = HEAP32[((((_wdata + 32) & 4294967295)) >> 2)];
					var $cmp64 = ((($70)) | 0) == 0;
					var $71 = HEAPU32[((((_wdata + 40) & 4294967295)) >> 2)];
					var $add66 = ((($71) + 1) & 4294967295);
					if ($cmp64) {
						__label__ = 20;;
					} else {
						__label__ = 21;;
					}
					if (__label__ == 20) {
						var $72 = HEAP32[((((_wdata + 24) & 4294967295)) >> 2)];
						var $arrayidx67 = (($72 + $add66) & 4294967295);
						var $73 = HEAP8[($arrayidx67)];
						$c = $73;
						var $74 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
						var $75 = HEAP32[((((_wdata + 24) & 4294967295)) >> 2)];
						var $arrayidx68 = (($75 + $74) & 4294967295);
						var $76 = HEAPU8[($arrayidx68)];
						var $conv69 = ((($76)) & 255);
						var $77 = $c;
						var $conv70 = (tempInt = (($77)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $mul71 = ((($conv70) * 256) & 4294967295);
						var $add72 = ((($mul71) + ($conv69)) & 4294967295);
						$sample = $add72;
						var $78 = HEAP32[((((_wdata + 40) & 4294967295)) >> 2)];
						var $add73 = ((($78) + 2) & 4294967295);
						HEAP32[((((_wdata + 40) & 4294967295)) >> 2)] = $add73;;
					} else if (__label__ == 21) {
						HEAP32[((((_wdata + 40) & 4294967295)) >> 2)] = $add66;
						var $79 = HEAP32[((((_wdata + 24) & 4294967295)) >> 2)];
						var $arrayidx75 = (($79 + $71) & 4294967295);
						var $80 = HEAP8[($arrayidx75)];
						var $conv76 = (tempInt = (($80)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						var $81 = HEAP32[((((_wdata + 32) & 4294967295)) >> 2)];
						var $mul77 = ((($conv76) * ($81)) & 4294967295);
						$sample = $mul77;;
					}
					var $82 = $sample;
					var $83 = HEAP32[((((_wdata + 56) & 4294967295)) >> 2)];
					var $mul79 = ((($83) * ($82)) & 4294967295);
					var $div = ((((($mul79)) | 0) / 1024) | 0);
					$z2 = $div;
					var $84 = $z2;
					var $85 = HEAP32[((((_wdata + 36) & 4294967295)) >> 2)];
					var $mul80 = ((($85) * ($84)) & 4294967295);
					var $div81 = ((((($mul80)) | 0) / 40) | 0);
					$z2 = $div81;
					var $86 = $z2;
					var $conv82 = ((($86)) | 0);
					var $87 = $temp;
					var $add83 = ($87) + ($conv82);
					$temp = $add83;;
				}
				var $88 = HEAP32[((((__ZL10kt_globals + 180) & 4294967295)) >> 2)];
				var $cmp85 = ((($88)) | 0) > 0;
				if ($cmp85) {
					__label__ = 24;;
				} else {
					__label__ = 25;;
				}
				if (__label__ == 24) {
					var $89 = HEAP32[((((__ZL10kt_globals + 180) & 4294967295)) >> 2)];
					var $dec = ((($89) - 1) & 4294967295);
					HEAP32[((((__ZL10kt_globals + 180) & 4294967295)) >> 2)] = $dec;
					var $90 = $temp;
					var $91 = HEAP32[((((__ZL10kt_globals + 180) & 4294967295)) >> 2)];
					var $conv87 = ((($91)) | 0);
					var $mul88 = ($90) * ($conv87);
					var $div89 = ($mul88) / 64;
					$temp = $div89;;
				}
				var $92 = $temp;
				var $conv91 = ((($92)) | 0);
				var $93 = HEAP32[((_echo_tail) >> 2)];
				var $inc92 = ((($93) + 1) & 4294967295);
				HEAP32[((_echo_tail) >> 2)] = $inc92;
				var $arrayidx93 = ((_echo_buf + $93 * 2) & 4294967295);
				var $94 = HEAP16[(($arrayidx93) >> 1)];
				var $conv94 = (tempInt = (($94)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $95 = HEAP32[((_echo_amp) >> 2)];
				var $mul95 = ((($conv94) * ($95)) & 4294967295);
				var $shr = ($mul95) >> 8;
				var $add96 = ((($shr) + ($conv91)) & 4294967295);
				$value = $add96;
				var $96 = HEAP32[((_echo_tail) >> 2)];
				var $cmp97 = ((($96)) | 0) >= 5500;
				if ($cmp97) {
					__lastLabel__ = 25;
					__label__ = 26;;
				} else {
					__lastLabel__ = 25;
					__label__ = 27;;
				}
				if (__label__ == 26) {
					HEAP32[((_echo_tail) >> 2)] = 0;
					var $_pr = $value;
					__lastLabel__ = 26;;
				}
				var $97 = __lastLabel__ == 26 ? $_pr : ($add96);
				var $cmp100 = ((($97)) | 0) < -32768;
				if ($cmp100) {
					__label__ = 28;;
				} else {
					__label__ = 29;;
				}
				$if_end102_thread$$if_end102$41: do {
					if (__label__ == 28) {
						$value = -32768;;
					} else if (__label__ == 29) {
						var $_pr1 = $value;
						var $cmp103 = ((($_pr1)) | 0) > 32767;
						if (!($cmp103)) {
							__label__ = 31;
							break $if_end102_thread$$if_end102$41;
						}
						$value = 32767;;
					}
				} while (0);
				var $98 = $value;
				var $conv106 = ((($98)) & 255);
				var $99 = HEAP32[((_out_ptr) >> 2)];
				var $incdec_ptr = (($99 + 1) & 4294967295);
				HEAP32[((_out_ptr) >> 2)] = $incdec_ptr;
				HEAP8[($99)] = $conv106;
				var $100 = $value;
				var $shr107 = ($100) >> 8;
				var $conv108 = ((($shr107)) & 255);
				var $101 = HEAP32[((_out_ptr) >> 2)];
				var $incdec_ptr109 = (($101 + 1) & 4294967295);
				HEAP32[((_out_ptr) >> 2)] = $incdec_ptr109;
				HEAP8[($101)] = $conv108;
				var $102 = $value;
				var $conv110 = ((($102)) & 65535);
				var $103 = HEAP32[((_echo_head) >> 2)];
				var $inc111 = ((($103) + 1) & 4294967295);
				HEAP32[((_echo_head) >> 2)] = $inc111;
				var $arrayidx112 = ((_echo_buf + $103 * 2) & 4294967295);
				HEAP16[(($arrayidx112) >> 1)] = $conv110;
				var $104 = HEAP32[((_echo_head) >> 2)];
				var $cmp113 = ((($104)) | 0) >= 5500;
				if ($cmp113) {
					__label__ = 32;;
				} else {
					__label__ = 33;;
				}
				if (__label__ == 32) {
					HEAP32[((_echo_head) >> 2)] = 0;;
				}
				var $105 = HEAP32[((__ZL12sample_count) >> 2)];
				var $inc116 = ((($105) + 1) & 4294967295);
				HEAP32[((__ZL12sample_count) >> 2)] = $inc116;
				var $106 = HEAPU32[((_out_ptr) >> 2)];
				var $107 = HEAPU32[((_out_end) >> 2)];
				var $cmp117 = ((($106)) >>> 0) >= ((($107)) >>> 0);
				if ($cmp117) {
					__label__ = 34;
					break $for_cond$2;
				}
				var $108 = HEAP32[((((__ZL10kt_globals + 36) & 4294967295)) >> 2)];
				var $inc121 = ((($108) + 1) & 4294967295);
				HEAP32[((((__ZL10kt_globals + 36) & 4294967295)) >> 2)] = $inc121;
				__label__ = 1;
				continue $for_cond$2;
			}
			if (__label__ == 36) {
				$retval = 0;;
			} else if (__label__ == 34) {
				$retval = 1;;
			}
			var $109 = $retval;;
			return $109;
			return null;
		}

		function __Z14SetSynth_KlattiiP7frame_tS0_P7voice_ti($length, $modn, $fr1, $fr2, $v, $control) {;
			var __label__;
			var __lastLabel__ = null;
			var $length_addr;
			var $modn_addr;
			var $fr1_addr;
			var $fr2_addr;
			var $v_addr;
			var $control_addr;
			var $ix;
			var $next;
			var $qix;
			var $cmd;
			var $fr3;
			$length_addr = $length;
			$modn_addr = $modn;
			$fr1_addr = $fr1;
			$fr2_addr = $fr2;
			$v_addr = $v;
			$control_addr = $control;
			var $0 = HEAP32[((_wvoice) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 5;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((_wvoice) >> 2)];
				var $klattv = (($1 + 112) & 4294967295);
				var $arrayidx = (($klattv) & 4294967295);
				var $2 = HEAP32[(($arrayidx) >> 2)];
				var $cmp1 = ((($2)) | 0) > 0;
				if ($cmp1) {
					__label__ = 2;;
				} else {
					__label__ = 4;;
				}
				$land_lhs_true$$if_end$4: do {
					if (__label__ == 2) {
						var $3 = HEAP32[((_wvoice) >> 2)];
						var $klattv2 = (($3 + 112) & 4294967295);
						var $arrayidx3 = (($klattv2) & 4294967295);
						var $4 = HEAP32[(($arrayidx3) >> 2)];
						var $cmp4 = ((($4)) | 0) <= 3;
						if (!($cmp4)) {
							__label__ = 4;
							break $land_lhs_true$$if_end$4;
						}
						var $5 = HEAP32[((_wvoice) >> 2)];
						var $klattv6 = (($5 + 112) & 4294967295);
						var $arrayidx7 = (($klattv6) & 4294967295);
						var $6 = HEAP32[(($arrayidx7) >> 2)];
						HEAP32[((((__ZL10kt_globals + 20) & 4294967295)) >> 2)] = $6;
						var $7 = HEAP32[((((__ZL10kt_globals + 20) & 4294967295)) >> 2)];
						var $arrayidx8 = ((__ZL13scale_wav_tab + $7 * 4) & 4294967295);
						var $8 = HEAP32[(($arrayidx8) >> 2)];
						HEAP32[((((__ZL10kt_globals + 184) & 4294967295)) >> 2)] = $8;;
					}
				} while (0);
				var $9 = HEAP32[((_wvoice) >> 2)];
				var $flutter = (($9 + 68) & 4294967295);
				var $10 = HEAP32[(($flutter) >> 2)];
				var $div = ((((($10)) | 0) / 32) | 0);
				HEAP32[((((__ZL10kt_globals + 24) & 4294967295)) >> 2)] = $div;;
			}
			HEAP32[((__ZL8end_wave803) >> 2)] = 0;
			var $11 = $control_addr;
			var $and = ($11) & 2;
			var $tobool = ((($and)) | 0) != 0;
			if ($tobool) {
				__label__ = 6;;
			} else {
				__label__ = 7;;
			}
			if (__label__ == 6) {
				HEAP32[((__ZL8end_wave803) >> 2)] = 1;;
			}
			var $12 = $control_addr;
			var $and12 = ($12) & 1;
			var $tobool13 = ((($and12)) | 0) != 0;
			if ($tobool13) {
				__label__ = 8;;
			} else {
				__label__ = 20;;
			}
			$if_then14$$if_end44$12: do {
				if (__label__ == 8) {
					HEAP32[((__ZL8end_wave803) >> 2)] = 1;
					var $13 = HEAP32[((_wcmdq_head) >> 2)];
					var $add = ((($13) + 1) & 4294967295);
					$qix = $add;
					__lastLabel__ = 8;;
					$for_cond$14: while (1) {
						var $14 = __lastLabel__ == 19 ? $inc42 : ($add);
						var $cmp15 = ((($14)) | 0) >= 160;
						if ($cmp15) {
							__label__ = 10;;
						} else {
							__label__ = 11;;
						}
						if (__label__ == 10) {
							$qix = 0;;
						}
						var $15 = $qix;
						var $16 = HEAP32[((_wcmdq_tail) >> 2)];
						var $cmp18 = ((($15)) | 0) == ((($16)) | 0);
						if ($cmp18) {
							__label__ = 20;
							break $if_then14$$if_end44$12;
						}
						var $17 = $qix;
						var $arrayidx21 = ((_wcmdq + $17 * 16) & 4294967295);
						var $arrayidx22 = (($arrayidx21) & 4294967295);
						var $18 = HEAP32[(($arrayidx22) >> 2)];
						$cmd = $18;
						var $19 = $cmd;
						var $cmp23 = ((($19)) | 0) == 1;
						if ($cmp23) {
							__label__ = 13;
							break $for_cond$14;
						}
						var $31 = $cmd;
						var $cmp37 = ((($31)) | 0) == 6;
						var $32 = $cmd;
						var $cmp38 = ((($32)) | 0) == 5;
						var $or_cond = ($cmp37) | ($cmp38);
						if ($or_cond) {
							__label__ = 20;
							break $if_then14$$if_end44$12;
						}
						var $33 = $qix;
						var $inc42 = ((($33) + 1) & 4294967295);
						$qix = $inc42;
						__lastLabel__ = 19;
						__label__ = 9;
						continue $for_cond$14;
					}
					HEAP32[((__ZL8end_wave803) >> 2)] = 0;
					var $20 = $qix;
					var $arrayidx25 = ((_wcmdq + $20 * 16) & 4294967295);
					var $arrayidx26 = (($arrayidx25 + 8) & 4294967295);
					var $21 = HEAP32[(($arrayidx26) >> 2)];
					var $22 = ($21);
					$fr3 = $22;
					$ix = 1;
					__lastLabel__ = 13;;
					while (1) {
						var $23 = __lastLabel__ == 17 ? $inc : (1);
						var $cmp28 = ((($23)) | 0) < 6;
						if (!($cmp28)) {
							__label__ = 20;
							break $if_then14$$if_end44$12;
						}
						var $24 = $ix;
						var $25 = $fr3;
						var $ffreq = (($25 + 2) & 4294967295);
						var $arrayidx29 = (($ffreq + $24 * 2) & 4294967295);
						var $26 = HEAP16[(($arrayidx29) >> 1)];
						var $conv = (tempInt = (($26)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $27 = $ix;
						var $28 = $fr2_addr;
						var $ffreq30 = (($28 + 2) & 4294967295);
						var $arrayidx31 = (($ffreq30 + $27 * 2) & 4294967295);
						var $29 = HEAP16[(($arrayidx31) >> 1)];
						var $conv32 = (tempInt = (($29)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $cmp33 = ((($conv)) | 0) != ((($conv32)) | 0);
						if ($cmp33) {
							__label__ = 16;
							break;
						}
						var $30 = $ix;
						var $inc = ((($30) + 1) & 4294967295);
						$ix = $inc;
						__lastLabel__ = 17;
						__label__ = 14;
						continue;
					}
					HEAP32[((__ZL8end_wave803) >> 2)] = 2;;
				}
			} while (0);
			var $34 = $control_addr;
			var $and45 = ($34) & 1;
			var $tobool46 = ((($and45)) | 0) != 0;
			if ($tobool46) {
				__label__ = 21;;
			} else {
				__label__ = 27;;
			}
			if (__label__ == 21) {
				$ix = 1;
				__lastLabel__ = 21;;
				while (1) {
					var $35 = __lastLabel__ == 25 ? $inc60 : (1);
					var $cmp49 = ((($35)) | 0) < 6;
					if (!($cmp49)) {
						__label__ = 26;
						break;
					}
					var $36 = $ix;
					var $arrayidx51 = ((((__ZZ14SetSynth_KlattiiP7frame_tS0_P7voice_tiE7prev_fr + 2) & 4294967295) + $36 * 2) & 4294967295);
					var $37 = HEAP16[(($arrayidx51) >> 1)];
					var $conv52 = (tempInt = (($37)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $38 = $ix;
					var $39 = $fr1_addr;
					var $ffreq53 = (($39 + 2) & 4294967295);
					var $arrayidx54 = (($ffreq53 + $38 * 2) & 4294967295);
					var $40 = HEAP16[(($arrayidx54) >> 1)];
					var $conv55 = (tempInt = (($40)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
					var $cmp56 = ((($conv52)) | 0) != ((($conv55)) | 0);
					if ($cmp56) {
						__label__ = 24;
						break;
					}
					var $41 = $ix;
					var $inc60 = ((($41) + 1) & 4294967295);
					$ix = $inc60;
					__lastLabel__ = 25;
					__label__ = 22;
					continue;
				}
				if (__label__ == 24) {
					__Z10KlattReseti(0);;
				}
				var $42 = $fr2_addr;
				var $43 = $42;
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $43;
				$dest$ = __ZZ14SetSynth_KlattiiP7frame_tS0_P7voice_tiE7prev_fr;
				$stop$ = $src$ + 64;
				if (($dest$ % 4) == ($src$ % 4) && 64 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};;
			}
			$ix = 0;
			__lastLabel__ = 27;;
			$for_body65$39: while (1) {
				var $44 = __lastLabel__ == 27 ? 0 : ($inc90);
				var $cmp66 = ((($44)) | 0) >= 5;
				if ($cmp66) {
					__label__ = 29;;
				} else {
					__label__ = 31;;
				}
				$land_lhs_true67$$if_else$41: do {
					if (__label__ == 29) {
						var $45 = $fr1_addr;
						var $frflags = (($45) & 4294967295);
						var $46 = HEAP16[(($frflags) >> 1)];
						var $conv68 = (tempInt = (($46)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $and69 = ($conv68) & 1;
						var $cmp70 = ((($and69)) | 0) == 0;
						if (!($cmp70)) {
							__label__ = 31;
							break $land_lhs_true67$$if_else$41;
						}
						var $47 = $ix;
						var $arrayidx72 = ((__ZL6klattp + $47 * 4) & 4294967295);
						HEAP32[(($arrayidx72) >> 2)] = 0;
						var $48 = $ix;
						var $arrayidx73 = ((__ZL7klattp1 + $48 * 8) & 4294967295);
						HEAPF32[(($arrayidx73) >> 2)] = 0;
						var $49 = $ix;
						var $arrayidx74 = ((__ZL10klattp_inc + $49 * 8) & 4294967295);
						HEAPF32[(($arrayidx74) >> 2)] = 0;
						__label__ = 32;
						break $land_lhs_true67$$if_else$41;
					}
				} while (0);
				if (__label__ == 31) {
					var $50 = $ix;
					var $51 = $fr1_addr;
					var $klattp = (($51 + 39) & 4294967295);
					var $arrayidx75 = (($klattp + $50) & 4294967295);
					var $52 = HEAPU8[($arrayidx75)];
					var $conv76 = ((($52)) & 255);
					var $53 = $ix;
					var $arrayidx77 = ((__ZL6klattp + $53 * 4) & 4294967295);
					HEAP32[(($arrayidx77) >> 2)] = $conv76;
					var $conv78 = ((($conv76)) | 0);
					var $54 = $ix;
					var $arrayidx79 = ((__ZL7klattp1 + $54 * 8) & 4294967295);
					HEAPF32[(($arrayidx79) >> 2)] = $conv78;
					var $55 = $ix;
					var $56 = $fr2_addr;
					var $klattp80 = (($56 + 39) & 4294967295);
					var $arrayidx81 = (($klattp80 + $55) & 4294967295);
					var $57 = HEAPU8[($arrayidx81)];
					var $conv82 = ((($57)) & 255);
					var $58 = $ix;
					var $arrayidx83 = ((__ZL6klattp + $58 * 4) & 4294967295);
					var $59 = HEAP32[(($arrayidx83) >> 2)];
					var $sub = ((($conv82) - ($59)) & 4294967295);
					var $mul = ((($sub) * 64) & 4294967295);
					var $conv84 = ((($mul)) | 0);
					var $60 = $length_addr;
					var $conv85 = ((($60)) | 0);
					var $div86 = ($conv84) / ($conv85);
					var $61 = $ix;
					var $arrayidx87 = ((__ZL10klattp_inc + $61 * 8) & 4294967295);
					HEAPF32[(($arrayidx87) >> 2)] = $div86;;
				}
				var $62 = $ix;
				var $inc90 = ((($62) + 1) & 4294967295);
				$ix = $inc90;
				var $cmp64 = ((($inc90)) | 0) < 10;
				if ($cmp64) {
					__lastLabel__ = 32;
					__label__ = 28;
					continue $for_body65$39;
				} else {
					__lastLabel__ = 32;
					__label__ = 33;
					break $for_body65$39;
				}
			}
			var $63 = $length_addr;
			HEAP32[((__ZL8nsamples802) >> 2)] = $63;
			$ix = 1;;
			$for_body94$48: while (1) {
				var $64 = $ix;
				var $65 = $fr1_addr;
				var $ffreq95 = (($65 + 2) & 4294967295);
				var $arrayidx96 = (($ffreq95 + $64 * 2) & 4294967295);
				var $66 = HEAP16[(($arrayidx96) >> 1)];
				var $conv97 = (tempInt = (($66)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $67 = $ix;
				var $68 = $v_addr;
				var $freq = (($68 + 144) & 4294967295);
				var $arrayidx98 = (($freq + $67 * 2) & 4294967295);
				var $69 = HEAP16[(($arrayidx98) >> 1)];
				var $conv99 = (tempInt = (($69)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $mul100 = ((($conv99) * ($conv97)) & 4294967295);
				var $conv101 = ((($mul100)) | 0);
				var $div102 = ($conv101) / 256;
				var $70 = $ix;
				var $71 = $v_addr;
				var $freqadd = (($71 + 198) & 4294967295);
				var $arrayidx103 = (($freqadd + $70 * 2) & 4294967295);
				var $72 = HEAP16[(($arrayidx103) >> 1)];
				var $conv104 = (tempInt = (($72)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $conv105 = ((($conv104)) | 0);
				var $add106 = ($div102) + ($conv105);
				var $73 = $ix;
				var $arrayidx107 = ((__ZL5peaks801 + $73 * 80) & 4294967295);
				var $freq1 = (($arrayidx107 + 16) & 4294967295);
				HEAPF32[(($freq1) >> 2)] = $add106;
				var $74 = $ix;
				var $arrayidx108 = ((__ZL5peaks801 + $74 * 80) & 4294967295);
				var $freq1109 = (($arrayidx108 + 16) & 4294967295);
				var $75 = HEAPF32[(($freq1109) >> 2)];
				var $conv110 = ((($75)) | 0);
				var $76 = $ix;
				var $arrayidx111 = ((__ZL5peaks801 + $76 * 80) & 4294967295);
				var $freq112 = (($arrayidx111) & 4294967295);
				HEAP32[(($freq112) >> 2)] = $conv110;
				var $77 = $ix;
				var $78 = $fr2_addr;
				var $ffreq113 = (($78 + 2) & 4294967295);
				var $arrayidx114 = (($ffreq113 + $77 * 2) & 4294967295);
				var $79 = HEAP16[(($arrayidx114) >> 1)];
				var $conv115 = (tempInt = (($79)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $80 = $ix;
				var $81 = $v_addr;
				var $freq116 = (($81 + 144) & 4294967295);
				var $arrayidx117 = (($freq116 + $80 * 2) & 4294967295);
				var $82 = HEAP16[(($arrayidx117) >> 1)];
				var $conv118 = (tempInt = (($82)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $mul119 = ((($conv118) * ($conv115)) & 4294967295);
				var $conv120 = ((($mul119)) | 0);
				var $div121 = ($conv120) / 256;
				var $83 = $ix;
				var $84 = $v_addr;
				var $freqadd122 = (($84 + 198) & 4294967295);
				var $arrayidx123 = (($freqadd122 + $83 * 2) & 4294967295);
				var $85 = HEAP16[(($arrayidx123) >> 1)];
				var $conv124 = (tempInt = (($85)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $conv125 = ((($conv124)) | 0);
				var $add126 = ($div121) + ($conv125);
				$next = $add126;
				var $86 = $next;
				var $87 = $ix;
				var $arrayidx127 = ((__ZL5peaks801 + $87 * 80) & 4294967295);
				var $freq1128 = (($arrayidx127 + 16) & 4294967295);
				var $88 = HEAPF32[(($freq1128) >> 2)];
				var $sub129 = ($86) - ($88);
				var $mul130 = ($sub129) * 64;
				var $89 = $length_addr;
				var $conv131 = ((($89)) | 0);
				var $div132 = ($mul130) / ($conv131);
				var $90 = $ix;
				var $arrayidx133 = ((__ZL5peaks801 + $90 * 80) & 4294967295);
				var $freq_inc = (($arrayidx133 + 48) & 4294967295);
				HEAPF32[(($freq_inc) >> 2)] = $div132;
				var $91 = $ix;
				var $cmp134 = ((($91)) | 0) < 4;
				if ($cmp134) {
					__label__ = 35;;
				} else {
					__label__ = 36;;
				}
				if (__label__ == 35) {
					var $92 = $ix;
					var $93 = $fr1_addr;
					var $bw = (($93 + 35) & 4294967295);
					var $arrayidx136 = (($bw + $92) & 4294967295);
					var $94 = HEAPU8[($arrayidx136)];
					var $conv137 = ((($94)) & 255);
					var $mul138 = ((($conv137) * 2) & 4294967295);
					var $conv139 = ((($mul138)) | 0);
					var $95 = $ix;
					var $arrayidx140 = ((__ZL5peaks801 + $95 * 80) & 4294967295);
					var $bw1 = (($arrayidx140 + 24) & 4294967295);
					HEAPF32[(($bw1) >> 2)] = $conv139;
					var $96 = $ix;
					var $arrayidx141 = ((__ZL5peaks801 + $96 * 80) & 4294967295);
					var $bw1142 = (($arrayidx141 + 24) & 4294967295);
					var $97 = HEAPF32[(($bw1142) >> 2)];
					var $conv143 = ((($97)) | 0);
					var $98 = $ix;
					var $arrayidx144 = ((__ZL5peaks801 + $98 * 80) & 4294967295);
					var $bw145 = (($arrayidx144 + 4) & 4294967295);
					HEAP32[(($bw145) >> 2)] = $conv143;
					var $99 = $ix;
					var $100 = $fr2_addr;
					var $bw146 = (($100 + 35) & 4294967295);
					var $arrayidx147 = (($bw146 + $99) & 4294967295);
					var $101 = HEAPU8[($arrayidx147)];
					var $conv148 = ((($101)) & 255);
					var $mul149 = ((($conv148) * 2) & 4294967295);
					var $conv150 = ((($mul149)) | 0);
					$next = $conv150;
					var $102 = $next;
					var $103 = $ix;
					var $arrayidx151 = ((__ZL5peaks801 + $103 * 80) & 4294967295);
					var $bw1152 = (($arrayidx151 + 24) & 4294967295);
					var $104 = HEAPF32[(($bw1152) >> 2)];
					var $sub153 = ($102) - ($104);
					var $mul154 = ($sub153) * 64;
					var $105 = $length_addr;
					var $conv155 = ((($105)) | 0);
					var $div156 = ($mul154) / ($conv155);
					var $106 = $ix;
					var $arrayidx157 = ((__ZL5peaks801 + $106 * 80) & 4294967295);
					var $bw_inc = (($arrayidx157 + 56) & 4294967295);
					HEAPF32[(($bw_inc) >> 2)] = $div156;;
				}
				var $107 = $ix;
				var $inc160 = ((($107) + 1) & 4294967295);
				$ix = $inc160;
				var $cmp93 = ((($inc160)) | 0) < 6;
				if ($cmp93) {
					__label__ = 34;
					continue $for_body94$48;
				} else {
					__label__ = 37;
					break $for_body94$48;
				}
			}
			var $108 = $fr1_addr;
			var $klattp162 = (($108 + 39) & 4294967295);
			var $arrayidx163 = (($klattp162 + 1) & 4294967295);
			var $109 = HEAPU8[($arrayidx163)];
			var $conv164 = ((($109)) & 255);
			var $mul165 = ((($conv164) * 2) & 4294967295);
			var $conv166 = ((($mul165)) | 0);
			HEAPF32[((((__ZL5peaks801 + 16) & 4294967295)) >> 2)] = $conv166;
			var $110 = HEAPF32[((((__ZL5peaks801 + 16) & 4294967295)) >> 2)];
			var $cmp167 = ($110) == 0;
			if ($cmp167) {
				__label__ = 38;;
			} else {
				__label__ = 39;;
			}
			if (__label__ == 38) {
				var $111 = HEAP32[((((__ZL8kt_frame + 8 + 36) & 4294967295)) >> 2)];
				var $conv169 = ((($111)) | 0);
				HEAPF32[((((__ZL5peaks801 + 16) & 4294967295)) >> 2)] = $conv169;;
			}
			var $112 = HEAPF32[((((__ZL5peaks801 + 16) & 4294967295)) >> 2)];
			var $conv171 = ((($112)) | 0);
			HEAP32[((((__ZL5peaks801) & 4294967295)) >> 2)] = $conv171;
			var $113 = $fr2_addr;
			var $klattp172 = (($113 + 39) & 4294967295);
			var $arrayidx173 = (($klattp172 + 1) & 4294967295);
			var $114 = HEAPU8[($arrayidx173)];
			var $conv174 = ((($114)) & 255);
			var $mul175 = ((($conv174) * 2) & 4294967295);
			var $conv176 = ((($mul175)) | 0);
			$next = $conv176;
			var $cmp177 = ($conv176) == 0;
			if ($cmp177) {
				__label__ = 40;;
			} else {
				__label__ = 41;;
			}
			if (__label__ == 40) {
				var $115 = HEAP32[((((__ZL8kt_frame + 8 + 36) & 4294967295)) >> 2)];
				var $conv179 = ((($115)) | 0);
				$next = $conv179;;
			}
			var $116 = $next;
			var $117 = HEAPF32[((((__ZL5peaks801 + 16) & 4294967295)) >> 2)];
			var $sub181 = ($116) - ($117);
			var $mul182 = ($sub181) * 64;
			var $118 = $length_addr;
			var $conv183 = ((($118)) | 0);
			var $div184 = ($mul182) / ($conv183);
			HEAPF32[((((__ZL5peaks801 + 48) & 4294967295)) >> 2)] = $div184;
			HEAPF32[((((__ZL5peaks801 + 24) & 4294967295)) >> 2)] = 89;
			HEAP32[((((__ZL5peaks801 + 4) & 4294967295)) >> 2)] = 89;
			HEAPF32[((((__ZL5peaks801 + 56) & 4294967295)) >> 2)] = 0;
			var $119 = $fr1_addr;
			var $frflags185 = (($119) & 4294967295);
			var $120 = HEAP16[(($frflags185) >> 1)];
			var $conv186 = (tempInt = (($120)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
			var $and187 = ($conv186) & 1;
			var $tobool188 = ((($and187)) | 0) != 0;
			if ($tobool188) {
				__label__ = 42;;
			} else {
				__label__ = 44;;
			}
			$if_then189$$if_end236$60: do {
				if (__label__ == 42) {
					$ix = 1;;
					while (1) {
						var $121 = $ix;
						var $122 = $fr1_addr;
						var $klatt_bp = (($122 + 56) & 4294967295);
						var $arrayidx193 = (($klatt_bp + $121) & 4294967295);
						var $123 = HEAPU8[($arrayidx193)];
						var $conv194 = ((($123)) & 255);
						var $mul195 = ((($conv194) * 4) & 4294967295);
						var $conv196 = ((($mul195)) | 0);
						var $124 = $ix;
						var $arrayidx197 = ((__ZL5peaks801 + $124 * 80) & 4294967295);
						var $bp1 = (($arrayidx197 + 40) & 4294967295);
						HEAPF32[(($bp1) >> 2)] = $conv196;
						var $125 = $ix;
						var $arrayidx198 = ((__ZL5peaks801 + $125 * 80) & 4294967295);
						var $bp1199 = (($arrayidx198 + 40) & 4294967295);
						var $126 = HEAPF32[(($bp1199) >> 2)];
						var $conv200 = ((($126)) | 0);
						var $127 = $ix;
						var $arrayidx201 = ((__ZL5peaks801 + $127 * 80) & 4294967295);
						var $bp = (($arrayidx201 + 12) & 4294967295);
						HEAP32[(($bp) >> 2)] = $conv200;
						var $128 = $ix;
						var $129 = $fr2_addr;
						var $klatt_bp202 = (($129 + 56) & 4294967295);
						var $arrayidx203 = (($klatt_bp202 + $128) & 4294967295);
						var $130 = HEAPU8[($arrayidx203)];
						var $conv204 = ((($130)) & 255);
						var $mul205 = ((($conv204) * 2) & 4294967295);
						var $conv206 = ((($mul205)) | 0);
						$next = $conv206;
						var $131 = $next;
						var $132 = $ix;
						var $arrayidx207 = ((__ZL5peaks801 + $132 * 80) & 4294967295);
						var $bp1208 = (($arrayidx207 + 40) & 4294967295);
						var $133 = HEAPF32[(($bp1208) >> 2)];
						var $sub209 = ($131) - ($133);
						var $mul210 = ($sub209) * 64;
						var $134 = $length_addr;
						var $conv211 = ((($134)) | 0);
						var $div212 = ($mul210) / ($conv211);
						var $135 = $ix;
						var $arrayidx213 = ((__ZL5peaks801 + $135 * 80) & 4294967295);
						var $bp_inc = (($arrayidx213 + 72) & 4294967295);
						HEAPF32[(($bp_inc) >> 2)] = $div212;
						var $136 = $ix;
						var $137 = $fr1_addr;
						var $klatt_ap = (($137 + 49) & 4294967295);
						var $arrayidx214 = (($klatt_ap + $136) & 4294967295);
						var $138 = HEAPU8[($arrayidx214)];
						var $conv215 = ((($138)) & 255);
						var $139 = $ix;
						var $arrayidx216 = ((__ZL5peaks801 + $139 * 80) & 4294967295);
						var $ap1 = (($arrayidx216 + 32) & 4294967295);
						HEAPF32[(($ap1) >> 2)] = $conv215;
						var $140 = $ix;
						var $arrayidx217 = ((__ZL5peaks801 + $140 * 80) & 4294967295);
						var $ap1218 = (($arrayidx217 + 32) & 4294967295);
						var $141 = HEAPF32[(($ap1218) >> 2)];
						var $conv219 = ((($141)) | 0);
						var $142 = $ix;
						var $arrayidx220 = ((__ZL5peaks801 + $142 * 80) & 4294967295);
						var $ap = (($arrayidx220 + 8) & 4294967295);
						HEAP32[(($ap) >> 2)] = $conv219;
						var $143 = $ix;
						var $144 = $fr2_addr;
						var $klatt_ap221 = (($144 + 49) & 4294967295);
						var $arrayidx222 = (($klatt_ap221 + $143) & 4294967295);
						var $145 = HEAPU8[($arrayidx222)];
						var $conv223 = ((($145)) & 255);
						var $mul224 = ((($conv223) * 2) & 4294967295);
						var $conv225 = ((($mul224)) | 0);
						$next = $conv225;
						var $146 = $next;
						var $147 = $ix;
						var $arrayidx226 = ((__ZL5peaks801 + $147 * 80) & 4294967295);
						var $ap1227 = (($arrayidx226 + 32) & 4294967295);
						var $148 = HEAPF32[(($ap1227) >> 2)];
						var $sub228 = ($146) - ($148);
						var $mul229 = ($sub228) * 64;
						var $149 = $length_addr;
						var $conv230 = ((($149)) | 0);
						var $div231 = ($mul229) / ($conv230);
						var $150 = $ix;
						var $arrayidx232 = ((__ZL5peaks801 + $150 * 80) & 4294967295);
						var $ap_inc = (($arrayidx232 + 64) & 4294967295);
						HEAPF32[(($ap_inc) >> 2)] = $div231;
						var $151 = $ix;
						var $inc234 = ((($151) + 1) & 4294967295);
						$ix = $inc234;
						var $cmp191 = ((($inc234)) | 0) < 7;
						if ($cmp191) {
							__label__ = 43;
							continue;
						} else {
							__label__ = 44;
							break $if_then189$$if_end236$60;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __Z14Wavegen_Klatt2iiiP7frame_tS0_($length, $modulation, $resume, $fr1, $fr2) {;
			var __label__;
			var $length_addr;
			var $modulation_addr;
			var $resume_addr;
			var $fr1_addr;
			var $fr2_addr;
			$length_addr = $length;
			$modulation_addr = $modulation;
			$resume_addr = $resume;
			$fr1_addr = $fr1;
			$fr2_addr = $fr2;
			var $0 = $resume_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = $length_addr;
				var $2 = $modulation_addr;
				var $3 = $fr1_addr;
				var $4 = $fr2_addr;
				var $5 = HEAP32[((_wvoice) >> 2)];
				__Z14SetSynth_KlattiiP7frame_tS0_P7voice_ti($1, $2, $3, $4, $5, 1);;
			}
			var $6 = $resume_addr;
			var $call = __Z13Wavegen_Klatti($6);;
			return $call;
			return null;
		}

		function __Z9KlattInitv() {;
			var __label__;
			var $ix;
			HEAP32[((__ZL12sample_count) >> 2)] = 0;
			HEAP32[((((__ZL10kt_globals) & 4294967295)) >> 2)] = 1;
			HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)] = 22050;
			HEAP32[((((__ZL10kt_globals + 20) & 4294967295)) >> 2)] = 1;
			var $0 = HEAP32[((((__ZL10kt_globals + 20) & 4294967295)) >> 2)];
			var $arrayidx = ((__ZL13scale_wav_tab + $0 * 4) & 4294967295);
			var $1 = HEAP32[(($arrayidx) >> 2)];
			HEAP32[((((__ZL10kt_globals + 184) & 4294967295)) >> 2)] = $1;
			HEAP32[((((__ZL10kt_globals + 172) & 4294967295)) >> 2)] = ((__ZZ9KlattInitvE15natural_samples) & 4294967295);
			HEAP32[((((__ZL10kt_globals + 160) & 4294967295)) >> 2)] = 100;
			HEAPF32[((((__ZL10kt_globals + 164) & 4294967295)) >> 2)] = 3;
			var $2 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
			var $mul = ((($2) * 10) & 4294967295);
			var $div = ((((($mul)) | 0) / 1000) | 0);
			HEAP32[((((__ZL10kt_globals + 28) & 4294967295)) >> 2)] = $div;
			HEAP32[((((__ZL10kt_globals + 4) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL10kt_globals + 24) & 4294967295)) >> 2)] = 20;
			__Z10KlattReseti(2);
			$ix = 0;;
			while (1) {
				var $3 = $ix;
				var $arrayidx1 = ((__ZZ9KlattInitvE10formant_hz + $3 * 2) & 4294967295);
				var $4 = HEAP16[(($arrayidx1) >> 1)];
				var $conv = (tempInt = (($4)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $5 = $ix;
				var $arrayidx2 = ((((__ZL8kt_frame + 8) & 4294967295) + $5 * 4) & 4294967295);
				HEAP32[(($arrayidx2) >> 2)] = $conv;
				var $6 = $ix;
				var $arrayidx3 = ((__ZZ9KlattInitvE9bandwidth + $6 * 2) & 4294967295);
				var $7 = HEAP16[(($arrayidx3) >> 1)];
				var $conv4 = (tempInt = (($7)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $8 = $ix;
				var $arrayidx5 = ((((__ZL8kt_frame + 48) & 4294967295) + $8 * 4) & 4294967295);
				HEAP32[(($arrayidx5) >> 2)] = $conv4;
				var $9 = $ix;
				var $arrayidx6 = ((__ZZ9KlattInitvE12parallel_amp + $9 * 2) & 4294967295);
				var $10 = HEAP16[(($arrayidx6) >> 1)];
				var $conv7 = (tempInt = (($10)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $11 = $ix;
				var $arrayidx8 = ((((__ZL8kt_frame + 88) & 4294967295) + $11 * 4) & 4294967295);
				HEAP32[(($arrayidx8) >> 2)] = $conv7;
				var $12 = $ix;
				var $arrayidx9 = ((__ZZ9KlattInitvE11parallel_bw + $12 * 2) & 4294967295);
				var $13 = HEAP16[(($arrayidx9) >> 1)];
				var $conv10 = (tempInt = (($13)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $14 = $ix;
				var $arrayidx11 = ((((__ZL8kt_frame + 128) & 4294967295) + $14 * 4) & 4294967295);
				HEAP32[(($arrayidx11) >> 2)] = $conv10;
				var $15 = $ix;
				var $inc = ((($15) + 1) & 4294967295);
				$ix = $inc;
				var $cmp = ((($inc)) | 0) <= 9;
				if ($cmp) {
					__label__ = 1;
					continue;
				} else {
					__label__ = 2;
					break;
				}
			}
			HEAP32[((((__ZL8kt_frame + 248) & 4294967295)) >> 2)] = 89;
			HEAP32[((((__ZL8kt_frame) & 4294967295)) >> 2)] = 1000;
			HEAP32[((((__ZL8kt_frame + 4) & 4294967295)) >> 2)] = 59;
			HEAP32[((((__ZL8kt_frame + 168) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL8kt_frame + 172) & 4294967295)) >> 2)] = 40;
			HEAP32[((((__ZL8kt_frame + 176) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL8kt_frame + 180) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL8kt_frame + 184) & 4294967295)) >> 2)] = 50;
			HEAP32[((((__ZL8kt_frame + 188) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL8kt_frame + 192) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL8kt_frame + 196) & 4294967295)) >> 2)] = 0;
			HEAP32[((((__ZL8kt_frame + 200) & 4294967295)) >> 2)] = 62;;
			return;
			return;
		}

		function __ZL7flutterP13klatt_frame_t($frame) {;
			var __label__;
			var $frame_addr;
			var $delta_f0;
			var $fla;
			var $flb;
			var $flc;
			var $fld;
			var $fle;
			$frame_addr = $frame;
			var $0 = HEAP32[((((__ZL10kt_globals + 24) & 4294967295)) >> 2)];
			var $conv = ((($0)) | 0);
			var $div = ($conv) / 50;
			$fla = $div;
			var $1 = HEAP32[((((__ZL10kt_globals + 176) & 4294967295)) >> 2)];
			var $conv1 = ((($1)) | 0);
			var $div2 = ($conv1) / 100;
			$flb = $div2;
			var $2 = HEAP32[((__ZZL7flutterP13klatt_frame_tE10time_count) >> 2)];
			var $conv3 = ((($2)) | 0);
			var $mul = 39.898227289999994 * ($conv3);
			var $call = _sin($mul);
			$flc = $call;
			var $3 = HEAP32[((__ZZL7flutterP13klatt_frame_tE10time_count) >> 2)];
			var $conv4 = ((($3)) | 0);
			var $mul5 = 22.305308169999996 * ($conv4);
			var $call6 = _sin($mul5);
			$fld = $call6;
			var $4 = HEAP32[((__ZZL7flutterP13klatt_frame_tE10time_count) >> 2)];
			var $conv7 = ((($4)) | 0);
			var $mul8 = 14.76548569 * ($conv7);
			var $call9 = _sin($mul8);
			$fle = $call9;
			var $5 = $fla;
			var $6 = $flb;
			var $mul10 = ($5) * ($6);
			var $7 = $flc;
			var $8 = $fld;
			var $add = ($7) + ($8);
			var $9 = $fle;
			var $add11 = ($add) + ($9);
			var $mul12 = ($mul10) * ($add11);
			var $mul13 = ($mul12) * 10;
			$delta_f0 = $mul13;
			var $10 = $frame_addr;
			var $F0hz10 = (($10) & 4294967295);
			var $11 = HEAP32[(($F0hz10) >> 2)];
			var $12 = $delta_f0;
			var $conv14 = ((($12)) | 0);
			var $add15 = ((($conv14) + ($11)) & 4294967295);
			var $13 = $frame_addr;
			var $F0hz1016 = (($13) & 4294967295);
			HEAP32[(($F0hz1016) >> 2)] = $add15;
			var $14 = HEAP32[((__ZZL7flutterP13klatt_frame_tE10time_count) >> 2)];
			var $inc = ((($14) + 1) & 4294967295);
			HEAP32[((__ZZL7flutterP13klatt_frame_tE10time_count) >> 2)] = $inc;;
			return;
			return;
		}

		function __ZL9gen_noised($noise) {;
			var __label__;
			var $noise_addr;
			var $temp;
			$noise_addr = $noise;
			var $call = _rand();
			var $rem = ((($call)) | 0) % 16383;
			var $add = ((($rem) - 8191) & 4294967295);
			$temp = $add;
			var $0 = $temp;
			HEAP32[((((__ZL10kt_globals + 52) & 4294967295)) >> 2)] = $0;
			var $1 = HEAP32[((((__ZL10kt_globals + 52) & 4294967295)) >> 2)];
			var $conv = ((($1)) | 0);
			var $2 = HEAPF32[((__ZZL9gen_noisedE5nlast) >> 2)];
			var $mul = 0.75 * ($2);
			var $add1 = ($conv) + ($mul);
			$noise_addr = $add1;
			var $3 = $noise_addr;
			HEAPF32[((__ZZL9gen_noisedE5nlast) >> 2)] = $3;
			var $4 = $noise_addr;;
			return $4;
			return null;
		}

		function __ZL16impulsive_sourcev() {;
			var __label__;
			var $0 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
			var $cmp = ((($0)) | 0) < 3;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
				var $arrayidx = ((__ZZL16impulsive_sourcevE7doublet + $1 * 8) & 4294967295);
				var $2 = HEAPF32[(($arrayidx) >> 2)];
				HEAPF32[((__ZZL16impulsive_sourcevE5vwave) >> 2)] = $2;;
			} else if (__label__ == 2) {
				HEAPF32[((__ZZL16impulsive_sourcevE5vwave) >> 2)] = 0;;
			}
			var $3 = HEAPF32[((__ZZL16impulsive_sourcevE5vwave) >> 2)];
			var $call = __ZL9resonatorP11resonator_td(((__ZL10kt_globals + 188 + 1088) & 4294967295), $3);;
			return $call;
			return null;
		}

		function __ZL14natural_sourcev() {;
			var __label__;
			var $retval;
			var $lgtemp;
			var $0 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
			var $1 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
			var $cmp = ((($0)) | 0) < ((($1)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = HEAPF32[((((__ZL10kt_globals + 64) & 4294967295)) >> 2)];
				var $3 = HEAPF32[((((__ZL10kt_globals + 56) & 4294967295)) >> 2)];
				var $sub = ($3) - ($2);
				HEAPF32[((((__ZL10kt_globals + 56) & 4294967295)) >> 2)] = $sub;
				var $4 = HEAPF32[((((__ZL10kt_globals + 56) & 4294967295)) >> 2)];
				var $5 = HEAPF32[((__ZZL14natural_sourcevE5vwave) >> 2)];
				var $add = ($5) + ($4);
				HEAPF32[((__ZZL14natural_sourcevE5vwave) >> 2)] = $add;
				var $6 = HEAPF32[((__ZZL14natural_sourcevE5vwave) >> 2)];
				var $mul = ($6) * 0.028;
				$lgtemp = $mul;
				var $7 = $lgtemp;
				$retval = $7;;
			} else if (__label__ == 2) {
				HEAPF32[((__ZZL14natural_sourcevE5vwave) >> 2)] = 0;
				$retval = 0;;
			}
			var $8 = $retval;;
			return $8;
			return null;
		}

		function __ZL14sampled_sourcev() {;
			var __label__;
			var $itemp;
			var $ftemp;
			var $result;
			var $diff_value;
			var $current_value;
			var $next_value;
			var $temp_diff;
			var $0 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
			var $cmp = ((($0)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $1 = HEAP32[((((__ZL10kt_globals + 32) & 4294967295)) >> 2)];
				var $conv = ((($1)) | 0);
				$ftemp = $conv;
				var $2 = $ftemp;
				var $3 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
				var $conv1 = ((($3)) | 0);
				var $div = ($2) / ($conv1);
				$ftemp = $div;
				var $4 = $ftemp;
				var $5 = HEAP32[((((__ZL10kt_globals + 160) & 4294967295)) >> 2)];
				var $conv2 = ((($5)) | 0);
				var $mul = ($4) * ($conv2);
				$ftemp = $mul;
				var $6 = $ftemp;
				var $conv3 = ((($6)) | 0);
				$itemp = $conv3;
				var $7 = $ftemp;
				var $8 = $itemp;
				var $conv4 = ((($8)) | 0);
				var $sub = ($7) - ($conv4);
				$temp_diff = $sub;
				var $9 = $itemp;
				var $10 = HEAP32[((((__ZL10kt_globals + 172) & 4294967295)) >> 2)];
				var $arrayidx = (($10 + 2 * $9) & 4294967295);
				var $11 = HEAP16[(($arrayidx) >> 1)];
				var $conv5 = (tempInt = (($11)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				$current_value = $conv5;
				var $12 = $itemp;
				var $add = ((($12) + 1) & 4294967295);
				var $13 = HEAP32[((((__ZL10kt_globals + 172) & 4294967295)) >> 2)];
				var $arrayidx6 = (($13 + 2 * $add) & 4294967295);
				var $14 = HEAP16[(($arrayidx6) >> 1)];
				var $conv7 = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				$next_value = $conv7;
				var $15 = $next_value;
				var $conv8 = ((($15)) | 0);
				var $16 = $current_value;
				var $conv9 = ((($16)) | 0);
				var $sub10 = ($conv8) - ($conv9);
				$diff_value = $sub10;
				var $17 = $diff_value;
				var $18 = $temp_diff;
				var $mul11 = ($17) * ($18);
				$diff_value = $mul11;
				var $19 = $itemp;
				var $20 = HEAP32[((((__ZL10kt_globals + 172) & 4294967295)) >> 2)];
				var $arrayidx12 = (($20 + 2 * $19) & 4294967295);
				var $21 = HEAP16[(($arrayidx12) >> 1)];
				var $conv13 = (tempInt = (($21)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $conv14 = ((($conv13)) | 0);
				var $22 = $diff_value;
				var $add15 = ($conv14) + ($22);
				$result = $add15;
				var $23 = $result;
				var $24 = HEAPF32[((((__ZL10kt_globals + 164) & 4294967295)) >> 2)];
				var $mul16 = ($23) * ($24);
				$result = $mul16;;
			} else if (__label__ == 2) {
				$result = 0;;
			}
			var $25 = $result;;
			return $25;
			return null;
		}

		function __ZL21pitch_synch_par_resetP13klatt_frame_t($frame) {;
			var __label__;
			var __lastLabel__ = null;
			var $frame_addr;
			var $temp;
			var $temp1;
			$frame_addr = $frame;
			var $0 = $frame_addr;
			var $F0hz10 = (($0) & 4294967295);
			var $1 = HEAP32[(($F0hz10) >> 2)];
			var $cmp = ((($1)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 15;;
			}
			if (__label__ == 1) {
				var $2 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
				var $mul = ((($2) * 40) & 4294967295);
				var $3 = $frame_addr;
				var $F0hz101 = (($3) & 4294967295);
				var $4 = HEAP32[(($F0hz101) >> 2)];
				var $div = ((((($mul)) | 0) / ((($4)) | 0)) | 0);
				HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)] = $div;
				var $5 = $frame_addr;
				var $AVdb_tmp = (($5 + 204) & 4294967295);
				var $6 = HEAP32[(($AVdb_tmp) >> 2)];
				var $call = __ZL7DBtoLINl($6);
				HEAPF32[((((__ZL10kt_globals + 112) & 4294967295)) >> 2)] = $call;
				var $7 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
				HEAP32[((((__ZL10kt_globals + 48) & 4294967295)) >> 2)] = $7;
				var $8 = $frame_addr;
				var $AVdb_tmp2 = (($8 + 204) & 4294967295);
				var $9 = HEAP32[(($AVdb_tmp2) >> 2)];
				var $cmp3 = ((($9)) | 0) > 0;
				if ($cmp3) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $10 = HEAP32[((((__ZL10kt_globals + 48) & 4294967295)) >> 2)];
					var $shr = ($10) >> 1;
					HEAP32[((((__ZL10kt_globals + 48) & 4294967295)) >> 2)] = $shr;;
				}
				var $11 = $frame_addr;
				var $Aturb = (($11 + 176) & 4294967295);
				var $12 = HEAP32[(($Aturb) >> 2)];
				var $call5 = __ZL7DBtoLINl($12);
				var $mul6 = ($call5) * 0.1;
				HEAPF32[((((__ZL10kt_globals + 144) & 4294967295)) >> 2)] = $mul6;
				var $13 = $frame_addr;
				var $Kopen = (($13 + 172) & 4294967295);
				var $14 = HEAP32[(($Kopen) >> 2)];
				var $mul7 = ((($14) * 4) & 4294967295);
				HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)] = $mul7;
				var $15 = HEAP32[((((__ZL10kt_globals + 20) & 4294967295)) >> 2)];
				var $cmp8 = ((($15)) | 0) == 1;
				var $16 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $cmp9 = ((($16)) | 0) > 263;
				var $or_cond = ($cmp8) & ($cmp9);
				if ($or_cond) {
					__label__ = 4;;
				} else {
					__label__ = 5;;
				}
				if (__label__ == 4) {
					HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)] = 263;;
				}
				var $17 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $18 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
				var $sub = ((($18) - 1) & 4294967295);
				var $cmp12 = ((($17)) | 0) >= ((($sub)) | 0);
				if ($cmp12) {
					__lastLabel__ = 5;
					__label__ = 6;;
				} else {
					__lastLabel__ = 5;
					__label__ = 7;;
				}
				if (__label__ == 6) {
					var $19 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
					var $sub14 = ((($19) - 2) & 4294967295);
					HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)] = $sub14;
					__lastLabel__ = 6;;
				}
				var $20 = __lastLabel__ == 6 ? $sub14 : ($17);
				var $cmp16 = ((($20)) | 0) < 40;
				if ($cmp16) {
					__label__ = 8;;
				} else {
					__label__ = 9;;
				}
				if (__label__ == 8) {
					HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)] = 40;;
				}
				var $21 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $sub19 = ((($21) - 40) & 4294967295);
				var $arrayidx = ((__ZZL21pitch_synch_par_resetP13klatt_frame_tE2B0 + $sub19 * 2) & 4294967295);
				var $22 = HEAP16[(($arrayidx) >> 1)];
				var $conv = (tempInt = (($22)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				HEAPF32[((((__ZL10kt_globals + 64) & 4294967295)) >> 2)] = $conv;
				var $23 = HEAPF32[((((__ZL10kt_globals + 64) & 4294967295)) >> 2)];
				var $24 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $conv20 = ((($24)) | 0);
				var $mul21 = ($23) * ($conv20);
				var $mul22 = ($mul21) * 0.333;
				HEAPF32[((((__ZL10kt_globals + 56) & 4294967295)) >> 2)] = $mul22;
				var $25 = HEAP32[((((__ZL10kt_globals + 8) & 4294967295)) >> 2)];
				var $26 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $div23 = ((((($25)) | 0) / ((($26)) | 0)) | 0);
				$temp = $div23;
				var $27 = $temp;
				__ZL6setabcllP11resonator_t(0, $27, ((__ZL10kt_globals + 188 + 1088) & 4294967295));
				var $28 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $conv24 = ((($28)) | 0);
				var $mul25 = ($conv24) * 0.00833;
				$temp1 = $mul25;
				var $29 = $temp1;
				var $30 = $temp1;
				var $mul26 = ($29) * ($30);
				var $31 = HEAPF32[((((__ZL10kt_globals + 188 + 1088) & 4294967295)) >> 2)];
				var $mul27 = ($31) * ($mul26);
				HEAPF32[((((__ZL10kt_globals + 188 + 1088) & 4294967295)) >> 2)] = $mul27;
				var $32 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
				var $33 = HEAP32[((((__ZL10kt_globals + 44) & 4294967295)) >> 2)];
				var $sub28 = ((($32) - ($33)) & 4294967295);
				$temp = $sub28;
				var $34 = $frame_addr;
				var $Kskew = (($34 + 188) & 4294967295);
				var $35 = HEAP32[(($Kskew) >> 2)];
				var $36 = $temp;
				var $cmp29 = ((($35)) | 0) > ((($36)) | 0);
				if ($cmp29) {
					__label__ = 10;;
				} else {
					__label__ = 11;;
				}
				if (__label__ == 10) {
					var $37 = $temp;
					var $38 = $frame_addr;
					var $Kskew31 = (($38 + 188) & 4294967295);
					HEAP32[(($Kskew31) >> 2)] = $37;;
				}
				var $39 = HEAP32[((__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew) >> 2)];
				var $cmp33 = ((($39)) | 0) >= 0;
				var $40 = $frame_addr;
				var $Kskew35 = (($40 + 188) & 4294967295);
				var $41 = HEAP32[(($Kskew35) >> 2)];
				if ($cmp33) {
					__label__ = 12;;
				} else {
					__label__ = 13;;
				}
				if (__label__ == 12) {
					HEAP32[((__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew) >> 2)] = $41;;
				} else if (__label__ == 13) {
					var $sub37 = (((-($41))) & 4294967295);
					HEAP32[((__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew) >> 2)] = $sub37;;
				}
				var $42 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
				var $43 = HEAP32[((__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew) >> 2)];
				var $add = ((($43) + ($42)) & 4294967295);
				HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)] = $add;
				var $44 = HEAP32[((__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew) >> 2)];
				var $sub39 = (((-($44))) & 4294967295);
				HEAP32[((__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew) >> 2)] = $sub39;;
			} else if (__label__ == 15) {
				HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)] = 4;
				HEAPF32[((((__ZL10kt_globals + 112) & 4294967295)) >> 2)] = 0;
				var $45 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
				HEAP32[((((__ZL10kt_globals + 48) & 4294967295)) >> 2)] = $45;
				HEAPF32[((((__ZL10kt_globals + 144) & 4294967295)) >> 2)] = 0;
				HEAPF32[((((__ZL10kt_globals + 56) & 4294967295)) >> 2)] = 0;
				HEAPF32[((((__ZL10kt_globals + 64) & 4294967295)) >> 2)] = 0;;
			}
			var $46 = HEAP32[((((__ZL10kt_globals + 40) & 4294967295)) >> 2)];
			var $cmp42 = ((($46)) | 0) != 4;
			var $47 = HEAP32[((((__ZL10kt_globals + 36) & 4294967295)) >> 2)];
			var $cmp43 = ((($47)) | 0) == 0;
			var $or_cond1 = ($cmp42) | ($cmp43);
			if ($or_cond1) {
				__label__ = 17;;
			} else {
				__label__ = 20;;
			}
			if (__label__ == 17) {
				var $48 = $frame_addr;
				var $TLTdb = (($48 + 180) & 4294967295);
				var $49 = HEAP32[(($TLTdb) >> 2)];
				var $conv45 = ((($49)) | 0);
				var $mul46 = 0.033 * ($conv45);
				HEAPF32[((((__ZL10kt_globals + 96) & 4294967295)) >> 2)] = $mul46;
				var $50 = HEAPF32[((((__ZL10kt_globals + 96) & 4294967295)) >> 2)];
				var $cmp47 = ($50) > 0;
				if ($cmp47) {
					__label__ = 18;;
				} else {
					__label__ = 19;;
				}
				if (__label__ == 18) {
					var $51 = HEAPF32[((((__ZL10kt_globals + 96) & 4294967295)) >> 2)];
					var $sub49 = 1 - ($51);
					HEAPF32[((((__ZL10kt_globals + 88) & 4294967295)) >> 2)] = $sub49;;
				} else if (__label__ == 19) {
					HEAPF32[((((__ZL10kt_globals + 88) & 4294967295)) >> 2)] = 1;;
				}
			};
			return;
			return;
		}

		function __ZL9resonatorP11resonator_td($r, $input) {;
			var __label__;
			var $r_addr;
			var $input_addr;
			var $x;
			$r_addr = $r;
			$input_addr = $input;
			var $0 = $r_addr;
			var $a = (($0) & 4294967295);
			var $1 = HEAPF32[(($a) >> 2)];
			var $2 = $input_addr;
			var $mul = ($1) * ($2);
			var $3 = $r_addr;
			var $b = (($3 + 8) & 4294967295);
			var $4 = HEAPF32[(($b) >> 2)];
			var $5 = $r_addr;
			var $p1 = (($5 + 24) & 4294967295);
			var $6 = HEAPF32[(($p1) >> 2)];
			var $mul1 = ($4) * ($6);
			var $add = ($mul) + ($mul1);
			var $7 = $r_addr;
			var $c = (($7 + 16) & 4294967295);
			var $8 = HEAPF32[(($c) >> 2)];
			var $9 = $r_addr;
			var $p2 = (($9 + 32) & 4294967295);
			var $10 = HEAPF32[(($p2) >> 2)];
			var $mul2 = ($8) * ($10);
			var $add3 = ($add) + ($mul2);
			$x = $add3;
			var $11 = $r_addr;
			var $p14 = (($11 + 24) & 4294967295);
			var $12 = HEAPF32[(($p14) >> 2)];
			var $13 = $r_addr;
			var $p25 = (($13 + 32) & 4294967295);
			HEAPF32[(($p25) >> 2)] = $12;
			var $14 = $x;
			var $15 = $r_addr;
			var $p16 = (($15 + 24) & 4294967295);
			HEAPF32[(($p16) >> 2)] = $14;
			var $16 = $x;;
			return $16;
			return null;
		}

		function __ZL14antiresonator2P11resonator_td($input) {;
			var __label__;
			var $r_addr;
			var $input_addr;
			var $x;
			$r_addr = ((__ZL10kt_globals + 188) & 4294967295);
			$input_addr = $input;
			var $0 = $r_addr;
			var $a = (($0) & 4294967295);
			var $1 = HEAPF32[(($a) >> 2)];
			var $2 = $input_addr;
			var $mul = ($1) * ($2);
			var $3 = $r_addr;
			var $b = (($3 + 8) & 4294967295);
			var $4 = HEAPF32[(($b) >> 2)];
			var $5 = $r_addr;
			var $p1 = (($5 + 24) & 4294967295);
			var $6 = HEAPF32[(($p1) >> 2)];
			var $mul1 = ($4) * ($6);
			var $add = ($mul) + ($mul1);
			var $7 = $r_addr;
			var $c = (($7 + 16) & 4294967295);
			var $8 = HEAPF32[(($c) >> 2)];
			var $9 = $r_addr;
			var $p2 = (($9 + 32) & 4294967295);
			var $10 = HEAPF32[(($p2) >> 2)];
			var $mul2 = ($8) * ($10);
			var $add3 = ($add) + ($mul2);
			$x = $add3;
			var $11 = $r_addr;
			var $p14 = (($11 + 24) & 4294967295);
			var $12 = HEAPF32[(($p14) >> 2)];
			var $13 = $r_addr;
			var $p25 = (($13 + 32) & 4294967295);
			HEAPF32[(($p25) >> 2)] = $12;
			var $14 = $input_addr;
			var $15 = $r_addr;
			var $p16 = (($15 + 24) & 4294967295);
			HEAPF32[(($p16) >> 2)] = $14;
			var $16 = $r_addr;
			var $a_inc = (($16 + 40) & 4294967295);
			var $17 = HEAPF32[(($a_inc) >> 2)];
			var $18 = $r_addr;
			var $a7 = (($18) & 4294967295);
			var $19 = HEAPF32[(($a7) >> 2)];
			var $add8 = ($19) + ($17);
			HEAPF32[(($a7) >> 2)] = $add8;
			var $20 = $r_addr;
			var $b_inc = (($20 + 48) & 4294967295);
			var $21 = HEAPF32[(($b_inc) >> 2)];
			var $22 = $r_addr;
			var $b9 = (($22 + 8) & 4294967295);
			var $23 = HEAPF32[(($b9) >> 2)];
			var $add10 = ($23) + ($21);
			HEAPF32[(($b9) >> 2)] = $add10;
			var $24 = $r_addr;
			var $c_inc = (($24 + 56) & 4294967295);
			var $25 = HEAPF32[(($c_inc) >> 2)];
			var $26 = $r_addr;
			var $c11 = (($26 + 16) & 4294967295);
			var $27 = HEAPF32[(($c11) >> 2)];
			var $add12 = ($27) + ($25);
			HEAPF32[(($c11) >> 2)] = $add12;
			var $28 = $x;;
			return $28;
			return null;
		}

		function __ZL10resonator2P11resonator_td($r, $input) {;
			var __label__;
			var $r_addr;
			var $input_addr;
			var $x;
			$r_addr = $r;
			$input_addr = $input;
			var $0 = $r_addr;
			var $a = (($0) & 4294967295);
			var $1 = HEAPF32[(($a) >> 2)];
			var $2 = $input_addr;
			var $mul = ($1) * ($2);
			var $3 = $r_addr;
			var $b = (($3 + 8) & 4294967295);
			var $4 = HEAPF32[(($b) >> 2)];
			var $5 = $r_addr;
			var $p1 = (($5 + 24) & 4294967295);
			var $6 = HEAPF32[(($p1) >> 2)];
			var $mul1 = ($4) * ($6);
			var $add = ($mul) + ($mul1);
			var $7 = $r_addr;
			var $c = (($7 + 16) & 4294967295);
			var $8 = HEAPF32[(($c) >> 2)];
			var $9 = $r_addr;
			var $p2 = (($9 + 32) & 4294967295);
			var $10 = HEAPF32[(($p2) >> 2)];
			var $mul2 = ($8) * ($10);
			var $add3 = ($add) + ($mul2);
			$x = $add3;
			var $11 = $r_addr;
			var $p14 = (($11 + 24) & 4294967295);
			var $12 = HEAPF32[(($p14) >> 2)];
			var $13 = $r_addr;
			var $p25 = (($13 + 32) & 4294967295);
			HEAPF32[(($p25) >> 2)] = $12;
			var $14 = $x;
			var $15 = $r_addr;
			var $p16 = (($15 + 24) & 4294967295);
			HEAPF32[(($p16) >> 2)] = $14;
			var $16 = $r_addr;
			var $a_inc = (($16 + 40) & 4294967295);
			var $17 = HEAPF32[(($a_inc) >> 2)];
			var $18 = $r_addr;
			var $a7 = (($18) & 4294967295);
			var $19 = HEAPF32[(($a7) >> 2)];
			var $add8 = ($19) + ($17);
			HEAPF32[(($a7) >> 2)] = $add8;
			var $20 = $r_addr;
			var $b_inc = (($20 + 48) & 4294967295);
			var $21 = HEAPF32[(($b_inc) >> 2)];
			var $22 = $r_addr;
			var $b9 = (($22 + 8) & 4294967295);
			var $23 = HEAPF32[(($b9) >> 2)];
			var $add10 = ($23) + ($21);
			HEAPF32[(($b9) >> 2)] = $add10;
			var $24 = $r_addr;
			var $c_inc = (($24 + 56) & 4294967295);
			var $25 = HEAPF32[(($c_inc) >> 2)];
			var $26 = $r_addr;
			var $c11 = (($26 + 16) & 4294967295);
			var $27 = HEAPF32[(($c11) >> 2)];
			var $add12 = ($27) + ($25);
			HEAPF32[(($c11) >> 2)] = $add12;
			var $28 = $x;;
			return $28;
			return null;
		}

		function __ZL7DBtoLINl($dB) {;
			var __label__;
			var $retval;
			var $dB_addr;
			$dB_addr = $dB;
			var $0 = $dB_addr;
			var $cmp = ((($0)) | 0) < 0;
			var $1 = $dB_addr;
			var $cmp1 = ((($1)) | 0) > 87;
			var $or_cond = ($cmp) | ($cmp1);
			if ($or_cond) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $2 = $dB_addr;
				var $arrayidx = ((__ZZL7DBtoLINlE8amptable + $2 * 2) & 4294967295);
				var $3 = HEAP16[(($arrayidx) >> 1)];
				var $conv = (tempInt = (($3)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
				var $mul = ($conv) * 0.001;
				$retval = $mul;;
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function __ZL10setzeroabcllP11resonator_t($f, $bw, $rp) {;
			var __label__;
			var $f_addr;
			var $bw_addr;
			var $rp_addr;
			var $r;
			var $arg;
			$f_addr = $f;
			$bw_addr = $bw;
			$rp_addr = $rp;
			var $0 = $f_addr;
			var $sub = (((-($0))) & 4294967295);
			$f_addr = $sub;
			var $1 = $f_addr;
			var $cmp = ((($1)) | 0) >= 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$f_addr = -1;;
			}
			var $2 = HEAPF32[((((__ZL10kt_globals + 72) & 4294967295)) >> 2)];
			var $3 = $bw_addr;
			var $conv = ((($3)) | 0);
			var $mul = ($2) * ($conv);
			$arg = $mul;
			var $4 = $arg;
			var $call = _exp($4);
			$r = $call;
			var $5 = $r;
			var $6 = $r;
			var $mul1 = ($5) * ($6);
			var $sub2 = (-($mul1));
			var $7 = $rp_addr;
			var $c = (($7 + 16) & 4294967295);
			HEAPF32[(($c) >> 2)] = $sub2;
			var $8 = HEAPF32[((((__ZL10kt_globals + 80) & 4294967295)) >> 2)];
			var $9 = $f_addr;
			var $conv3 = ((($9)) | 0);
			var $mul4 = ($8) * ($conv3);
			$arg = $mul4;
			var $10 = $r;
			var $11 = $arg;
			var $call5 = _cos($11);
			var $mul6 = ($10) * ($call5);
			var $mul7 = ($mul6) * 2;
			var $12 = $rp_addr;
			var $b = (($12 + 8) & 4294967295);
			HEAPF32[(($b) >> 2)] = $mul7;
			var $13 = $rp_addr;
			var $b8 = (($13 + 8) & 4294967295);
			var $14 = HEAPF32[(($b8) >> 2)];
			var $sub9 = 1 - ($14);
			var $15 = $rp_addr;
			var $c10 = (($15 + 16) & 4294967295);
			var $16 = HEAPF32[(($c10) >> 2)];
			var $sub11 = ($sub9) - ($16);
			var $17 = $rp_addr;
			var $a = (($17) & 4294967295);
			HEAPF32[(($a) >> 2)] = $sub11;
			var $18 = $rp_addr;
			var $a12 = (($18) & 4294967295);
			var $19 = HEAPF32[(($a12) >> 2)];
			var $div = 1 / ($19);
			var $20 = $rp_addr;
			var $a13 = (($20) & 4294967295);
			HEAPF32[(($a13) >> 2)] = $div;
			var $21 = $rp_addr;
			var $a14 = (($21) & 4294967295);
			var $22 = HEAPF32[(($a14) >> 2)];
			var $sub15 = (-($22));
			var $23 = $rp_addr;
			var $c16 = (($23 + 16) & 4294967295);
			var $24 = HEAPF32[(($c16) >> 2)];
			var $mul17 = ($24) * ($sub15);
			HEAPF32[(($c16) >> 2)] = $mul17;
			var $25 = $rp_addr;
			var $a18 = (($25) & 4294967295);
			var $26 = HEAPF32[(($a18) >> 2)];
			var $sub19 = (-($26));
			var $27 = $rp_addr;
			var $b20 = (($27 + 8) & 4294967295);
			var $28 = HEAPF32[(($b20) >> 2)];
			var $mul21 = ($28) * ($sub19);
			HEAPF32[(($b20) >> 2)] = $mul21;;
			return;
			return;
		}

		function __Z8sonicMSGPcz($format) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4100;
			_memset(__stackBase__, 0, 4100);
			var __label__;
			var $format_addr;
			var $buffer = __stackBase__;
			var $ap = __stackBase__ + 4096;
			var $file;
			$format_addr = $format;
			var $ap1 = $ap;
			HEAP32[(($ap1) >> 2)] = arguments[__Z8sonicMSGPcz.length];;
			var $arraydecay = (($buffer) & 4294967295);
			var $0 = $format_addr;
			var $1 = HEAP32[(($ap) >> 2)];
			var $call = _vsprintf($arraydecay, $0, $1);
			var $ap2 = $ap;;
			var $call3 = _fopen(((__str810) & 4294967295), ((__str1811) & 4294967295));
			$file = $call3;
			var $2 = $file;
			var $arraydecay4 = (($buffer) & 4294967295);
			var $fputs = _fputs($arraydecay4, $2);
			var $3 = $file;
			var $call6 = _fclose($3);
			STACKTOP = __stackBase__;
			return;
			return;
		}

		function _sonicGetSpeed($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $speed = (($0 + 16) & 4294967295);
			var $1 = HEAPF32[(($speed) >> 2)];;
			return $1;
			return null;
		}

		function _sonicSetSpeed($stream, $speed) {;
			var __label__;
			var $stream_addr;
			var $speed_addr;
			$stream_addr = $stream;
			$speed_addr = $speed;
			var $0 = $speed_addr;
			var $1 = $stream_addr;
			var $speed1 = (($1 + 16) & 4294967295);
			HEAPF32[(($speed1) >> 2)] = $0;;
			return;
			return;
		}

		function _sonicGetPitch($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $pitch = (($0 + 24) & 4294967295);
			var $1 = HEAPF32[(($pitch) >> 2)];;
			return $1;
			return null;
		}

		function _sonicSetPitch($stream, $pitch) {;
			var __label__;
			var $stream_addr;
			var $pitch_addr;
			$stream_addr = $stream;
			$pitch_addr = $pitch;
			var $0 = $pitch_addr;
			var $1 = $stream_addr;
			var $pitch1 = (($1 + 24) & 4294967295);
			HEAPF32[(($pitch1) >> 2)] = $0;;
			return;
			return;
		}

		function _sonicGetVolume($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $volume = (($0 + 20) & 4294967295);
			var $1 = HEAPF32[(($volume) >> 2)];;
			return $1;
			return null;
		}

		function _sonicSetVolume($stream, $volume) {;
			var __label__;
			var $stream_addr;
			var $volume_addr;
			$stream_addr = $stream;
			$volume_addr = $volume;
			var $0 = $volume_addr;
			var $1 = $stream_addr;
			var $volume1 = (($1 + 20) & 4294967295);
			HEAPF32[(($volume1) >> 2)] = $0;;
			return;
			return;
		}

		function _sonicGetSampleRate($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $sampleRate = (($0 + 72) & 4294967295);
			var $1 = HEAP32[(($sampleRate) >> 2)];;
			return $1;
			return null;
		}

		function _sonicGetNumChannels($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $numChannels = (($0 + 28) & 4294967295);
			var $1 = HEAP32[(($numChannels) >> 2)];;
			return $1;
			return null;
		}

		function _sonicDestroyStream($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $inputBuffer = (($0) & 4294967295);
			var $1 = HEAP32[(($inputBuffer) >> 2)];
			var $cmp = ((($1)) | 0) != 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $2 = $stream_addr;
				var $inputBuffer1 = (($2) & 4294967295);
				var $3 = HEAP32[(($inputBuffer1) >> 2)];
				var $4 = $3;;;
			}
			var $5 = $stream_addr;
			var $outputBuffer = (($5 + 4) & 4294967295);
			var $6 = HEAP32[(($outputBuffer) >> 2)];
			var $cmp2 = ((($6)) | 0) != 0;
			if ($cmp2) {
				__label__ = 3;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 3) {
				var $7 = $stream_addr;
				var $outputBuffer4 = (($7 + 4) & 4294967295);
				var $8 = HEAP32[(($outputBuffer4) >> 2)];
				var $9 = $8;;;
			}
			var $10 = $stream_addr;
			var $pitchBuffer = (($10 + 8) & 4294967295);
			var $11 = HEAP32[(($pitchBuffer) >> 2)];
			var $cmp6 = ((($11)) | 0) != 0;
			if ($cmp6) {
				__label__ = 5;;
			} else {
				__label__ = 6;;
			}
			if (__label__ == 5) {
				var $12 = $stream_addr;
				var $pitchBuffer8 = (($12 + 8) & 4294967295);
				var $13 = HEAP32[(($pitchBuffer8) >> 2)];
				var $14 = $13;;;
			}
			var $15 = $stream_addr;
			var $downSampleBuffer = (($15 + 12) & 4294967295);
			var $16 = HEAP32[(($downSampleBuffer) >> 2)];
			var $cmp10 = ((($16)) | 0) != 0;
			if ($cmp10) {
				__label__ = 7;;
			} else {
				__label__ = 8;;
			}
			if (__label__ == 7) {
				var $17 = $stream_addr;
				var $downSampleBuffer12 = (($17 + 12) & 4294967295);
				var $18 = HEAP32[(($downSampleBuffer12) >> 2)];
				var $19 = $18;;;
			}
			var $20 = $stream_addr;
			var $21 = $20;;;
			return;
			return;
		}

		function _sonicCreateStream($sampleRate, $numChannels) {;
			var __label__;
			var $retval;
			var $sampleRate_addr;
			var $numChannels_addr;
			var $stream;
			var $minPeriod;
			var $maxPeriod;
			var $maxRequired;
			$sampleRate_addr = $sampleRate;
			$numChannels_addr = $numChannels;
			var $call = _calloc(1, 88);
			var $0 = $call;
			$stream = $0;
			var $1 = $sampleRate_addr;
			var $div = ((((($1)) | 0) / 400) | 0);
			$minPeriod = $div;
			var $2 = $sampleRate_addr;
			var $div1 = ((((($2)) | 0) / 65) | 0);
			$maxPeriod = $div1;
			var $3 = $maxPeriod;
			var $mul = ((($3) * 2) & 4294967295);
			$maxRequired = $mul;
			var $4 = $stream;
			var $cmp = ((($4)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $5 = $maxRequired;
				var $6 = $stream;
				var $inputBufferSize = (($6 + 32) & 4294967295);
				HEAP32[(($inputBufferSize) >> 2)] = $5;
				var $7 = $maxRequired;
				var $8 = $numChannels_addr;
				var $mul2 = ((($8) * 2) & 4294967295);
				var $call3 = _calloc($7, $mul2);
				var $9 = $call3;
				var $10 = $stream;
				var $inputBuffer = (($10) & 4294967295);
				HEAP32[(($inputBuffer) >> 2)] = $9;
				var $11 = $stream;
				var $inputBuffer4 = (($11) & 4294967295);
				var $12 = HEAP32[(($inputBuffer4) >> 2)];
				var $cmp5 = ((($12)) | 0) == 0;
				if ($cmp5) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $13 = $stream;
					_sonicDestroyStream($13);
					$retval = 0;;
				} else if (__label__ == 4) {
					var $14 = $maxRequired;
					var $15 = $stream;
					var $outputBufferSize = (($15 + 40) & 4294967295);
					HEAP32[(($outputBufferSize) >> 2)] = $14;
					var $16 = $maxRequired;
					var $17 = $numChannels_addr;
					var $mul8 = ((($17) * 2) & 4294967295);
					var $call9 = _calloc($16, $mul8);
					var $18 = $call9;
					var $19 = $stream;
					var $outputBuffer = (($19 + 4) & 4294967295);
					HEAP32[(($outputBuffer) >> 2)] = $18;
					var $20 = $stream;
					var $outputBuffer10 = (($20 + 4) & 4294967295);
					var $21 = HEAP32[(($outputBuffer10) >> 2)];
					var $cmp11 = ((($21)) | 0) == 0;
					if ($cmp11) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					if (__label__ == 5) {
						var $22 = $stream;
						_sonicDestroyStream($22);
						$retval = 0;;
					} else if (__label__ == 6) {
						var $23 = $maxRequired;
						var $24 = $stream;
						var $pitchBufferSize = (($24 + 36) & 4294967295);
						HEAP32[(($pitchBufferSize) >> 2)] = $23;
						var $25 = $maxRequired;
						var $26 = $numChannels_addr;
						var $mul14 = ((($26) * 2) & 4294967295);
						var $call15 = _calloc($25, $mul14);
						var $27 = $call15;
						var $28 = $stream;
						var $pitchBuffer = (($28 + 8) & 4294967295);
						HEAP32[(($pitchBuffer) >> 2)] = $27;
						var $29 = $stream;
						var $pitchBuffer16 = (($29 + 8) & 4294967295);
						var $30 = HEAP32[(($pitchBuffer16) >> 2)];
						var $cmp17 = ((($30)) | 0) == 0;
						if ($cmp17) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							var $31 = $stream;
							_sonicDestroyStream($31);
							$retval = 0;;
						} else if (__label__ == 8) {
							var $32 = $maxRequired;
							var $call20 = _calloc($32, 2);
							var $33 = $call20;
							var $34 = $stream;
							var $downSampleBuffer = (($34 + 12) & 4294967295);
							HEAP32[(($downSampleBuffer) >> 2)] = $33;
							var $35 = $stream;
							var $speed = (($35 + 16) & 4294967295);
							HEAPF32[(($speed) >> 2)] = 1;
							var $36 = $stream;
							var $pitch = (($36 + 24) & 4294967295);
							HEAPF32[(($pitch) >> 2)] = 1;
							var $37 = $stream;
							var $volume = (($37 + 20) & 4294967295);
							HEAPF32[(($volume) >> 2)] = 1;
							var $38 = $sampleRate_addr;
							var $39 = $stream;
							var $sampleRate21 = (($39 + 72) & 4294967295);
							HEAP32[(($sampleRate21) >> 2)] = $38;
							var $40 = $numChannels_addr;
							var $41 = $stream;
							var $numChannels22 = (($41 + 28) & 4294967295);
							HEAP32[(($numChannels22) >> 2)] = $40;
							var $42 = $minPeriod;
							var $43 = $stream;
							var $minPeriod23 = (($43 + 56) & 4294967295);
							HEAP32[(($minPeriod23) >> 2)] = $42;
							var $44 = $maxPeriod;
							var $45 = $stream;
							var $maxPeriod24 = (($45 + 60) & 4294967295);
							HEAP32[(($maxPeriod24) >> 2)] = $44;
							var $46 = $maxRequired;
							var $47 = $stream;
							var $maxRequired25 = (($47 + 64) & 4294967295);
							HEAP32[(($maxRequired25) >> 2)] = $46;
							var $48 = $stream;
							$retval = $48;;
						}
					}
				}
			}
			var $49 = $retval;;
			return $49;
			return null;
		}

		function _sonicReadFloatFromStream($stream, $samples, $maxSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $maxSamples_addr;
			var $numSamples;
			var $remainingSamples;
			var $buffer;
			var $count;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$maxSamples_addr = $maxSamples;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];
			$numSamples = $1;
			$remainingSamples = 0;
			var $2 = $numSamples;
			var $cmp = ((($2)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $3 = $numSamples;
				var $4 = $maxSamples_addr;
				var $cmp1 = ((($3)) | 0) > ((($4)) | 0);
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $5 = $numSamples;
					var $6 = $maxSamples_addr;
					var $sub = ((($5) - ($6)) & 4294967295);
					$remainingSamples = $sub;
					var $7 = $maxSamples_addr;
					$numSamples = $7;;
				}
				var $8 = $stream_addr;
				var $outputBuffer = (($8 + 4) & 4294967295);
				var $9 = HEAP32[(($outputBuffer) >> 2)];
				$buffer = $9;
				var $10 = $numSamples;
				var $11 = $stream_addr;
				var $numChannels = (($11 + 28) & 4294967295);
				var $12 = HEAP32[(($numChannels) >> 2)];
				var $mul = ((($12) * ($10)) & 4294967295);
				var $dec1 = ((($mul) - 1) & 4294967295);
				$count = $dec1;
				var $tobool2 = ((($mul)) | 0) != 0;
				if ($tobool2) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				$while_body$$while_end$8: do {
					if (__label__ == 5) {
						while (1) {
							var $13 = $buffer;
							var $incdec_ptr = (($13 + 2) & 4294967295);
							$buffer = $incdec_ptr;
							var $14 = HEAP16[(($13) >> 1)];
							var $conv = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $conv4 = ((($conv)) | 0);
							var $div = ($conv4) / 32767;
							var $15 = $samples_addr;
							var $incdec_ptr5 = (($15 + 4) & 4294967295);
							$samples_addr = $incdec_ptr5;
							HEAPF32[(($15) >> 2)] = $div;
							var $_pr = $count;
							var $dec = ((($_pr) - 1) & 4294967295);
							$count = $dec;
							var $tobool = ((($_pr)) | 0) != 0;
							if ($tobool) {
								__label__ = 5;
								continue;
							} else {
								__label__ = 6;
								break $while_body$$while_end$8;
							}
						}
					}
				} while (0);
				var $16 = $remainingSamples;
				var $cmp6 = ((($16)) | 0) > 0;
				if ($cmp6) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $17 = $stream_addr;
					var $outputBuffer8 = (($17 + 4) & 4294967295);
					var $18 = HEAP32[(($outputBuffer8) >> 2)];
					var $19 = $18;
					var $20 = $stream_addr;
					var $outputBuffer9 = (($20 + 4) & 4294967295);
					var $21 = HEAP32[(($outputBuffer9) >> 2)];
					var $22 = $numSamples;
					var $23 = $stream_addr;
					var $numChannels10 = (($23 + 28) & 4294967295);
					var $24 = HEAP32[(($numChannels10) >> 2)];
					var $mul11 = ((($24) * ($22)) & 4294967295);
					var $add_ptr = (($21 + 2 * $mul11) & 4294967295);
					var $25 = $add_ptr;
					var $26 = $remainingSamples;
					var $27 = $stream_addr;
					var $numChannels13 = (($27 + 28) & 4294967295);
					var $28 = HEAP32[(($numChannels13) >> 2)];
					var $mul12 = ((($26) * 2) & 4294967295);
					var $mul14 = ((($mul12) * ($28)) & 4294967295);
					_llvm_memmove_p0i8_p0i8_i32($19, $25, $mul14, 1, 0);;
				}
				var $29 = $remainingSamples;
				var $30 = $stream_addr;
				var $numOutputSamples16 = (($30 + 48) & 4294967295);
				HEAP32[(($numOutputSamples16) >> 2)] = $29;
				var $31 = $numSamples;
				$retval = $31;;
			}
			var $32 = $retval;;
			return $32;
			return null;
		}

		function _sonicReadShortFromStream($stream, $samples, $maxSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $maxSamples_addr;
			var $numSamples;
			var $remainingSamples;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$maxSamples_addr = $maxSamples;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];
			$numSamples = $1;
			$remainingSamples = 0;
			var $2 = $numSamples;
			var $cmp = ((($2)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $3 = $numSamples;
				var $4 = $maxSamples_addr;
				var $cmp1 = ((($3)) | 0) > ((($4)) | 0);
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $5 = $numSamples;
					var $6 = $maxSamples_addr;
					var $sub = ((($5) - ($6)) & 4294967295);
					$remainingSamples = $sub;
					var $7 = $maxSamples_addr;
					$numSamples = $7;;
				}
				var $8 = $samples_addr;
				var $9 = $8;
				var $10 = $stream_addr;
				var $outputBuffer = (($10 + 4) & 4294967295);
				var $11 = HEAP32[(($outputBuffer) >> 2)];
				var $12 = $11;
				var $13 = $numSamples;
				var $14 = $stream_addr;
				var $numChannels = (($14 + 28) & 4294967295);
				var $15 = HEAP32[(($numChannels) >> 2)];
				var $mul = ((($13) * 2) & 4294967295);
				var $mul4 = ((($mul) * ($15)) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $12;
				$dest$ = $9;
				$stop$ = $src$ + $mul4;
				if (($dest$ % 4) == ($src$ % 4) && $mul4 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $16 = $remainingSamples;
				var $cmp5 = ((($16)) | 0) > 0;
				if ($cmp5) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				if (__label__ == 5) {
					var $17 = $stream_addr;
					var $outputBuffer7 = (($17 + 4) & 4294967295);
					var $18 = HEAP32[(($outputBuffer7) >> 2)];
					var $19 = $18;
					var $20 = $stream_addr;
					var $outputBuffer8 = (($20 + 4) & 4294967295);
					var $21 = HEAP32[(($outputBuffer8) >> 2)];
					var $22 = $numSamples;
					var $23 = $stream_addr;
					var $numChannels9 = (($23 + 28) & 4294967295);
					var $24 = HEAP32[(($numChannels9) >> 2)];
					var $mul10 = ((($24) * ($22)) & 4294967295);
					var $add_ptr = (($21 + 2 * $mul10) & 4294967295);
					var $25 = $add_ptr;
					var $26 = $remainingSamples;
					var $27 = $stream_addr;
					var $numChannels12 = (($27 + 28) & 4294967295);
					var $28 = HEAP32[(($numChannels12) >> 2)];
					var $mul11 = ((($26) * 2) & 4294967295);
					var $mul13 = ((($mul11) * ($28)) & 4294967295);
					_llvm_memmove_p0i8_p0i8_i32($19, $25, $mul13, 1, 0);;
				}
				var $29 = $remainingSamples;
				var $30 = $stream_addr;
				var $numOutputSamples15 = (($30 + 48) & 4294967295);
				HEAP32[(($numOutputSamples15) >> 2)] = $29;
				var $31 = $numSamples;
				$retval = $31;;
			}
			var $32 = $retval;;
			return $32;
			return null;
		}

		function _sonicReadUnsignedCharFromStream($stream, $samples, $maxSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $maxSamples_addr;
			var $numSamples;
			var $remainingSamples;
			var $buffer;
			var $count;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$maxSamples_addr = $maxSamples;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];
			$numSamples = $1;
			$remainingSamples = 0;
			var $2 = $numSamples;
			var $cmp = ((($2)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 0;;
			} else if (__label__ == 2) {
				var $3 = $numSamples;
				var $4 = $maxSamples_addr;
				var $cmp1 = ((($3)) | 0) > ((($4)) | 0);
				if ($cmp1) {
					__label__ = 3;;
				} else {
					__label__ = 4;;
				}
				if (__label__ == 3) {
					var $5 = $numSamples;
					var $6 = $maxSamples_addr;
					var $sub = ((($5) - ($6)) & 4294967295);
					$remainingSamples = $sub;
					var $7 = $maxSamples_addr;
					$numSamples = $7;;
				}
				var $8 = $stream_addr;
				var $outputBuffer = (($8 + 4) & 4294967295);
				var $9 = HEAP32[(($outputBuffer) >> 2)];
				$buffer = $9;
				var $10 = $numSamples;
				var $11 = $stream_addr;
				var $numChannels = (($11 + 28) & 4294967295);
				var $12 = HEAP32[(($numChannels) >> 2)];
				var $mul = ((($12) * ($10)) & 4294967295);
				var $dec1 = ((($mul) - 1) & 4294967295);
				$count = $dec1;
				var $tobool2 = ((($mul)) | 0) != 0;
				if ($tobool2) {
					__label__ = 5;;
				} else {
					__label__ = 6;;
				}
				$while_body$$while_end$8: do {
					if (__label__ == 5) {
						while (1) {
							var $13 = $buffer;
							var $incdec_ptr = (($13 + 2) & 4294967295);
							$buffer = $incdec_ptr;
							var $14 = HEAP16[(($13) >> 1)];
							var $conv = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
							var $shr = ($conv) >> 8;
							var $conv4 = ((($shr)) & 255);
							var $conv5 = (tempInt = (($conv4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $add = ((($conv5) + 128) & 4294967295);
							var $conv6 = ((($add)) & 255);
							var $15 = $samples_addr;
							var $incdec_ptr7 = (($15 + 1) & 4294967295);
							$samples_addr = $incdec_ptr7;
							HEAP8[($15)] = $conv6;
							var $_pr = $count;
							var $dec = ((($_pr) - 1) & 4294967295);
							$count = $dec;
							var $tobool = ((($_pr)) | 0) != 0;
							if ($tobool) {
								__label__ = 5;
								continue;
							} else {
								__label__ = 6;
								break $while_body$$while_end$8;
							}
						}
					}
				} while (0);
				var $16 = $remainingSamples;
				var $cmp8 = ((($16)) | 0) > 0;
				if ($cmp8) {
					__label__ = 7;;
				} else {
					__label__ = 8;;
				}
				if (__label__ == 7) {
					var $17 = $stream_addr;
					var $outputBuffer10 = (($17 + 4) & 4294967295);
					var $18 = HEAP32[(($outputBuffer10) >> 2)];
					var $19 = $18;
					var $20 = $stream_addr;
					var $outputBuffer11 = (($20 + 4) & 4294967295);
					var $21 = HEAP32[(($outputBuffer11) >> 2)];
					var $22 = $numSamples;
					var $23 = $stream_addr;
					var $numChannels12 = (($23 + 28) & 4294967295);
					var $24 = HEAP32[(($numChannels12) >> 2)];
					var $mul13 = ((($24) * ($22)) & 4294967295);
					var $add_ptr = (($21 + 2 * $mul13) & 4294967295);
					var $25 = $add_ptr;
					var $26 = $remainingSamples;
					var $27 = $stream_addr;
					var $numChannels15 = (($27 + 28) & 4294967295);
					var $28 = HEAP32[(($numChannels15) >> 2)];
					var $mul14 = ((($26) * 2) & 4294967295);
					var $mul16 = ((($mul14) * ($28)) & 4294967295);
					_llvm_memmove_p0i8_p0i8_i32($19, $25, $mul16, 1, 0);;
				}
				var $29 = $remainingSamples;
				var $30 = $stream_addr;
				var $numOutputSamples18 = (($30 + 48) & 4294967295);
				HEAP32[(($numOutputSamples18) >> 2)] = $29;
				var $31 = $numSamples;
				$retval = $31;;
			}
			var $32 = $retval;;
			return $32;
			return null;
		}

		function _sonicFlushStream($stream) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $maxRequired;
			var $numSamples;
			var $remainingSpace;
			var $numOutputSamples;
			var $expectedSamples;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $maxRequired1 = (($0 + 64) & 4294967295);
			var $1 = HEAP32[(($maxRequired1) >> 2)];
			$maxRequired = $1;
			var $2 = $stream_addr;
			var $numInputSamples = (($2 + 44) & 4294967295);
			var $3 = HEAP32[(($numInputSamples) >> 2)];
			$numSamples = $3;
			var $4 = $numSamples;
			var $cmp = ((($4)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_end$2: do {
				if (__label__ == 1) {
					$retval = 1;;
				} else if (__label__ == 2) {
					var $5 = $numSamples;
					var $6 = $maxRequired;
					var $cmp2 = ((($5)) | 0) >= ((($6)) | 0);
					if ($cmp2) {
						__label__ = 3;;
					} else {
						__label__ = 5;;
					}
					$land_lhs_true$$if_end4$5: do {
						if (__label__ == 3) {
							var $7 = $stream_addr;
							var $call = _sonicWriteShortToStream($7, 0, 0);
							var $tobool = ((($call)) | 0) != 0;
							if ($tobool) {
								__label__ = 5;
								break $land_lhs_true$$if_end4$5;
							}
							$retval = 0;
							__label__ = 12;
							break $if_then$$if_end$2;
						}
					} while (0);
					var $8 = $stream_addr;
					var $numInputSamples5 = (($8 + 44) & 4294967295);
					var $9 = HEAP32[(($numInputSamples5) >> 2)];
					$numSamples = $9;
					var $cmp6 = ((($9)) | 0) == 0;
					if ($cmp6) {
						__label__ = 6;;
					} else {
						__label__ = 7;;
					}
					if (__label__ == 6) {
						$retval = 1;;
					} else if (__label__ == 7) {
						var $10 = $maxRequired;
						var $11 = $numSamples;
						var $sub = ((($10) - ($11)) & 4294967295);
						$remainingSpace = $sub;
						var $12 = $stream_addr;
						var $inputBuffer = (($12) & 4294967295);
						var $13 = HEAP32[(($inputBuffer) >> 2)];
						var $14 = $numSamples;
						var $15 = $stream_addr;
						var $numChannels = (($15 + 28) & 4294967295);
						var $16 = HEAP32[(($numChannels) >> 2)];
						var $mul = ((($16) * ($14)) & 4294967295);
						var $add_ptr = (($13 + 2 * $mul) & 4294967295);
						var $17 = $add_ptr;
						var $18 = $remainingSpace;
						var $19 = $stream_addr;
						var $numChannels10 = (($19 + 28) & 4294967295);
						var $20 = HEAP32[(($numChannels10) >> 2)];
						var $mul9 = ((($18) * 2) & 4294967295);
						var $mul11 = ((($mul9) * ($20)) & 4294967295);
						var $dest$, $stop$, $stop4$, $fast$, $value4$;
						$dest$ = $17;
						$stop$ = $dest$ + $mul11;
						$value4$ = 0;
						if ($value4$ < 0) $value4$ += 256;
						$value4$ = $value4$ + ($value4$ << 8) + ($value4$ << 16) + ($value4$ * 16777216);
						while ($dest$ % 4 !== 0 && $dest$ < $stop$) {;;
							HEAP8[$dest$++] = 0;
						}
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($dest$ < $stop4$) {;;;;;;;
							HEAP32[$dest$++] = $value4$;
						}
						$dest$ <<= 2;
						while ($dest$ < $stop$) {;;
							HEAP8[$dest$++] = 0;
						};
						var $21 = $maxRequired;
						var $22 = $stream_addr;
						var $numInputSamples12 = (($22 + 44) & 4294967295);
						HEAP32[(($numInputSamples12) >> 2)] = $21;
						var $23 = $stream_addr;
						var $numOutputSamples13 = (($23 + 48) & 4294967295);
						var $24 = HEAP32[(($numOutputSamples13) >> 2)];
						$numOutputSamples = $24;
						var $25 = $stream_addr;
						var $call14 = _sonicWriteShortToStream($25, 0, 0);
						var $tobool15 = ((($call14)) | 0) != 0;
						if ($tobool15) {
							__label__ = 9;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 9) {
							var $26 = $numSamples;
							var $conv = ((($26)) | 0);
							var $27 = $stream_addr;
							var $speed = (($27 + 16) & 4294967295);
							var $28 = HEAPF32[(($speed) >> 2)];
							var $mul18 = ($conv) * ($28);
							var $conv19 = ($mul18);
							var $add = ($conv19) + 0.5;
							var $conv20 = ((($add)) | 0);
							$expectedSamples = $conv20;
							var $29 = $stream_addr;
							var $numOutputSamples21 = (($29 + 48) & 4294967295);
							var $30 = HEAP32[(($numOutputSamples21) >> 2)];
							var $31 = $numOutputSamples;
							var $32 = $expectedSamples;
							var $add22 = ((($32) + ($31)) & 4294967295);
							var $cmp23 = ((($30)) | 0) > ((($add22)) | 0);
							if ($cmp23) {
								__label__ = 10;;
							} else {
								__label__ = 11;;
							}
							if (__label__ == 10) {
								var $33 = $numOutputSamples;
								var $34 = $expectedSamples;
								var $add25 = ((($34) + ($33)) & 4294967295);
								var $35 = $stream_addr;
								var $numOutputSamples26 = (($35 + 48) & 4294967295);
								HEAP32[(($numOutputSamples26) >> 2)] = $add25;;
							}
							$retval = 1;;
						} else if (__label__ == 8) {
							$retval = 0;;
						}
					}
				}
			} while (0);
			var $36 = $retval;;
			return $36;
			return null;
		}

		function _sonicWriteShortToStream($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $1 = $samples_addr;
			var $2 = $numSamples_addr;
			var $call = __ZL28addShortSamplesToInputBufferP17sonicStreamStructPsi($0, $1, $2);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 2) {
				var $3 = $stream_addr;
				var $call1 = __ZL18processStreamInputP17sonicStreamStruct($3);
				$retval = $call1;;
			} else if (__label__ == 1) {
				$retval = 0;;
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function _sonicSamplesAvailable($stream) {;
			var __label__;
			var $stream_addr;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];;
			return $1;
			return null;
		}

		function _sonicWriteFloatToStream($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $1 = $samples_addr;
			var $2 = $numSamples_addr;
			var $call = __ZL28addFloatSamplesToInputBufferP17sonicStreamStructPfi($0, $1, $2);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 2) {
				var $3 = $stream_addr;
				var $call1 = __ZL18processStreamInputP17sonicStreamStruct($3);
				$retval = $call1;;
			} else if (__label__ == 1) {
				$retval = 0;;
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function __ZL28addFloatSamplesToInputBufferP17sonicStreamStructPfi($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			var $buffer;
			var $count;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $numSamples_addr;
			var $1 = $stream_addr;
			var $numChannels = (($1 + 28) & 4294967295);
			var $2 = HEAP32[(($numChannels) >> 2)];
			var $mul = ((($2) * ($0)) & 4294967295);
			$count = $mul;
			var $3 = $numSamples_addr;
			var $cmp = ((($3)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $4 = $stream_addr;
				var $5 = $numSamples_addr;
				var $call = __ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($4, $5);
				var $tobool = ((($call)) | 0) != 0;
				if ($tobool) {
					__label__ = 4;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 4) {
					var $6 = $stream_addr;
					var $inputBuffer = (($6) & 4294967295);
					var $7 = HEAP32[(($inputBuffer) >> 2)];
					var $8 = $stream_addr;
					var $numInputSamples = (($8 + 44) & 4294967295);
					var $9 = HEAP32[(($numInputSamples) >> 2)];
					var $10 = $stream_addr;
					var $numChannels3 = (($10 + 28) & 4294967295);
					var $11 = HEAP32[(($numChannels3) >> 2)];
					var $mul4 = ((($11) * ($9)) & 4294967295);
					var $add_ptr = (($7 + 2 * $mul4) & 4294967295);
					$buffer = $add_ptr;
					var $12 = $count;
					var $dec1 = ((($12) - 1) & 4294967295);
					$count = $dec1;
					var $tobool52 = ((($12)) | 0) != 0;
					if ($tobool52) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					$while_body$$while_end$7: do {
						if (__label__ == 5) {
							while (1) {
								var $13 = $samples_addr;
								var $incdec_ptr = (($13 + 4) & 4294967295);
								$samples_addr = $incdec_ptr;
								var $14 = HEAPF32[(($13) >> 2)];
								var $mul6 = ($14) * 32767;
								var $conv = ((($mul6)) | 0);
								var $15 = $buffer;
								var $incdec_ptr7 = (($15 + 2) & 4294967295);
								$buffer = $incdec_ptr7;
								HEAP16[(($15) >> 1)] = $conv;
								var $16 = $count;
								var $dec = ((($16) - 1) & 4294967295);
								$count = $dec;
								var $tobool5 = ((($16)) | 0) != 0;
								if ($tobool5) {
									__label__ = 5;
									continue;
								} else {
									__label__ = 6;
									break $while_body$$while_end$7;
								}
							}
						}
					} while (0);
					var $17 = $numSamples_addr;
					var $18 = $stream_addr;
					var $numInputSamples8 = (($18 + 44) & 4294967295);
					var $19 = HEAP32[(($numInputSamples8) >> 2)];
					var $add = ((($19) + ($17)) & 4294967295);
					HEAP32[(($numInputSamples8) >> 2)] = $add;
					$retval = 1;;
				} else if (__label__ == 3) {
					$retval = 0;;
				}
			}
			var $20 = $retval;;
			return $20;
			return null;
		}

		function __ZL18processStreamInputP17sonicStreamStruct($stream) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $originalNumOutputSamples;
			var $speed;
			$stream_addr = $stream;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];
			$originalNumOutputSamples = $1;
			var $2 = $stream_addr;
			var $speed1 = (($2 + 16) & 4294967295);
			var $3 = HEAPF32[(($speed1) >> 2)];
			var $4 = $stream_addr;
			var $pitch = (($4 + 24) & 4294967295);
			var $5 = HEAPF32[(($pitch) >> 2)];
			var $div = ($3) / ($5);
			$speed = $div;
			var $6 = $speed;
			var $conv = ($6);
			var $cmp = ($conv) > 1.00001;
			if ($cmp) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			$if_then$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $7 = $speed;
					var $conv2 = ($7);
					var $cmp3 = ($conv2) < 0.99999;
					if ($cmp3) {
						__label__ = 2;
						break $if_then$$lor_lhs_false$2;
					}
					var $10 = $stream_addr;
					var $11 = $stream_addr;
					var $inputBuffer = (($11) & 4294967295);
					var $12 = HEAP32[(($inputBuffer) >> 2)];
					var $13 = $stream_addr;
					var $numInputSamples = (($13 + 44) & 4294967295);
					var $14 = HEAP32[(($numInputSamples) >> 2)];
					var $call4 = __ZL12copyToOutputP17sonicStreamStructPsi($10, $12, $14);
					var $tobool = ((($call4)) | 0) != 0;
					if ($tobool) {
						__label__ = 5;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 5) {
						var $15 = $stream_addr;
						var $numInputSamples6 = (($15 + 44) & 4294967295);
						HEAP32[(($numInputSamples6) >> 2)] = 0;
						__label__ = 6;
						break $if_then$$lor_lhs_false$2;
					} else if (__label__ == 4) {
						$retval = 0;
						__label__ = 12;
						break $if_then$$lor_lhs_false$2;
					}
				}
			} while (0);
			$if_then$$if_end7$$return$8: do {
				if (__label__ == 2) {
					var $8 = $stream_addr;
					var $9 = $speed;
					__ZL11changeSpeedP17sonicStreamStructf($8, $9);
					__label__ = 6;
					break $if_then$$if_end7$$return$8;
				}
			} while (0);
			$if_end7$$return$10: do {
				if (__label__ == 6) {
					var $16 = $stream_addr;
					var $pitch8 = (($16 + 24) & 4294967295);
					var $17 = HEAPF32[(($pitch8) >> 2)];
					var $cmp9 = ($17) != 1;
					if ($cmp9) {
						__label__ = 7;;
					} else {
						__label__ = 9;;
					}
					$if_then10$$if_end15$12: do {
						if (__label__ == 7) {
							var $18 = $stream_addr;
							var $19 = $originalNumOutputSamples;
							var $call11 = __ZL11adjustPitchP17sonicStreamStructi($18, $19);
							var $tobool12 = ((($call11)) | 0) != 0;
							if ($tobool12) {
								__label__ = 9;
								break $if_then10$$if_end15$12;
							}
							$retval = 0;
							__label__ = 12;
							break $if_end7$$return$10;
						}
					} while (0);
					var $20 = $stream_addr;
					var $volume = (($20 + 20) & 4294967295);
					var $21 = HEAPF32[(($volume) >> 2)];
					var $cmp16 = ($21) != 1;
					if ($cmp16) {
						__label__ = 10;;
					} else {
						__label__ = 11;;
					}
					if (__label__ == 10) {
						var $22 = $stream_addr;
						var $outputBuffer = (($22 + 4) & 4294967295);
						var $23 = HEAP32[(($outputBuffer) >> 2)];
						var $24 = $originalNumOutputSamples;
						var $25 = $stream_addr;
						var $numChannels = (($25 + 28) & 4294967295);
						var $26 = HEAP32[(($numChannels) >> 2)];
						var $mul = ((($26) * ($24)) & 4294967295);
						var $add_ptr = (($23 + 2 * $mul) & 4294967295);
						var $27 = $stream_addr;
						var $numOutputSamples18 = (($27 + 48) & 4294967295);
						var $28 = HEAP32[(($numOutputSamples18) >> 2)];
						var $29 = $originalNumOutputSamples;
						var $sub = ((($28) - ($29)) & 4294967295);
						var $30 = $stream_addr;
						var $numChannels19 = (($30 + 28) & 4294967295);
						var $31 = HEAP32[(($numChannels19) >> 2)];
						var $mul20 = ((($31) * ($sub)) & 4294967295);
						var $32 = $stream_addr;
						var $volume21 = (($32 + 20) & 4294967295);
						var $33 = HEAPF32[(($volume21) >> 2)];
						__ZL12scaleSamplesPsif($add_ptr, $mul20, $33);;
					}
					$retval = 1;;
				}
			} while (0);
			var $34 = $retval;;
			return $34;
			return null;
		}

		function __ZL28addShortSamplesToInputBufferP17sonicStreamStructPsi($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $numSamples_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $1 = $stream_addr;
				var $2 = $numSamples_addr;
				var $call = __ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($1, $2);
				var $tobool = ((($call)) | 0) != 0;
				if ($tobool) {
					__label__ = 4;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 4) {
					var $3 = $stream_addr;
					var $inputBuffer = (($3) & 4294967295);
					var $4 = HEAP32[(($inputBuffer) >> 2)];
					var $5 = $stream_addr;
					var $numInputSamples = (($5 + 44) & 4294967295);
					var $6 = HEAP32[(($numInputSamples) >> 2)];
					var $7 = $stream_addr;
					var $numChannels = (($7 + 28) & 4294967295);
					var $8 = HEAP32[(($numChannels) >> 2)];
					var $mul = ((($8) * ($6)) & 4294967295);
					var $add_ptr = (($4 + 2 * $mul) & 4294967295);
					var $9 = $add_ptr;
					var $10 = $samples_addr;
					var $11 = $10;
					var $12 = $numSamples_addr;
					var $13 = $stream_addr;
					var $numChannels4 = (($13 + 28) & 4294967295);
					var $14 = HEAP32[(($numChannels4) >> 2)];
					var $mul3 = ((($12) * 2) & 4294967295);
					var $mul5 = ((($mul3) * ($14)) & 4294967295);
					var $src$, $dest$, $stop$, $stop4$, $fast$;
					$src$ = $11;
					$dest$ = $9;
					$stop$ = $src$ + $mul5;
					if (($dest$ % 4) == ($src$ % 4) && $mul5 > 8) {
						while ($src$ % 4 !== 0 && $src$ < $stop$) {;
							HEAP8[$dest$++] = HEAP8[$src$++];
						}
						$src$ >>= 2;
						$dest$ >>= 2;
						$stop4$ = $stop$ >> 2;
						while ($src$ < $stop4$) {;;;
							HEAP32[$dest$++] = HEAP32[$src$++];
						}
						$src$ <<= 2;
						$dest$ <<= 2;
					}
					while ($src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					};
					var $15 = $numSamples_addr;
					var $16 = $stream_addr;
					var $numInputSamples6 = (($16 + 44) & 4294967295);
					var $17 = HEAP32[(($numInputSamples6) >> 2)];
					var $add = ((($17) + ($15)) & 4294967295);
					HEAP32[(($numInputSamples6) >> 2)] = $add;
					$retval = 1;;
				} else if (__label__ == 3) {
					$retval = 0;;
				}
			}
			var $18 = $retval;;
			return $18;
			return null;
		}

		function _sonicWriteUnsignedCharToStream($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $1 = $samples_addr;
			var $2 = $numSamples_addr;
			var $call = __ZL35addUnsignedCharSamplesToInputBufferP17sonicStreamStructPhi($0, $1, $2);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 2) {
				var $3 = $stream_addr;
				var $call1 = __ZL18processStreamInputP17sonicStreamStruct($3);
				$retval = $call1;;
			} else if (__label__ == 1) {
				$retval = 0;;
			}
			var $4 = $retval;;
			return $4;
			return null;
		}

		function __ZL35addUnsignedCharSamplesToInputBufferP17sonicStreamStructPhi($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			var $buffer;
			var $count;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $numSamples_addr;
			var $1 = $stream_addr;
			var $numChannels = (($1 + 28) & 4294967295);
			var $2 = HEAP32[(($numChannels) >> 2)];
			var $mul = ((($2) * ($0)) & 4294967295);
			$count = $mul;
			var $3 = $numSamples_addr;
			var $cmp = ((($3)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $4 = $stream_addr;
				var $5 = $numSamples_addr;
				var $call = __ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($4, $5);
				var $tobool = ((($call)) | 0) != 0;
				if ($tobool) {
					__label__ = 4;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 4) {
					var $6 = $stream_addr;
					var $inputBuffer = (($6) & 4294967295);
					var $7 = HEAP32[(($inputBuffer) >> 2)];
					var $8 = $stream_addr;
					var $numInputSamples = (($8 + 44) & 4294967295);
					var $9 = HEAP32[(($numInputSamples) >> 2)];
					var $10 = $stream_addr;
					var $numChannels3 = (($10 + 28) & 4294967295);
					var $11 = HEAP32[(($numChannels3) >> 2)];
					var $mul4 = ((($11) * ($9)) & 4294967295);
					var $add_ptr = (($7 + 2 * $mul4) & 4294967295);
					$buffer = $add_ptr;
					var $12 = $count;
					var $dec1 = ((($12) - 1) & 4294967295);
					$count = $dec1;
					var $tobool52 = ((($12)) | 0) != 0;
					if ($tobool52) {
						__label__ = 5;;
					} else {
						__label__ = 6;;
					}
					$while_body$$while_end$7: do {
						if (__label__ == 5) {
							while (1) {
								var $13 = $samples_addr;
								var $incdec_ptr = (($13 + 1) & 4294967295);
								$samples_addr = $incdec_ptr;
								var $14 = HEAPU8[($13)];
								var $conv = ((($14)) & 255);
								var $sub = ((($conv) - 128) & 4294967295);
								var $shl = ($sub) << 8;
								var $conv6 = ((($shl)) & 65535);
								var $15 = $buffer;
								var $incdec_ptr7 = (($15 + 2) & 4294967295);
								$buffer = $incdec_ptr7;
								HEAP16[(($15) >> 1)] = $conv6;
								var $16 = $count;
								var $dec = ((($16) - 1) & 4294967295);
								$count = $dec;
								var $tobool5 = ((($16)) | 0) != 0;
								if ($tobool5) {
									__label__ = 5;
									continue;
								} else {
									__label__ = 6;
									break $while_body$$while_end$7;
								}
							}
						}
					} while (0);
					var $17 = $numSamples_addr;
					var $18 = $stream_addr;
					var $numInputSamples8 = (($18 + 44) & 4294967295);
					var $19 = HEAP32[(($numInputSamples8) >> 2)];
					var $add = ((($19) + ($17)) & 4294967295);
					HEAP32[(($numInputSamples8) >> 2)] = $add;
					$retval = 1;;
				} else if (__label__ == 3) {
					$retval = 0;;
				}
			}
			var $20 = $retval;;
			return $20;
			return null;
		}

		function _sonicChangeFloatSpeed($samples, $numSamples, $speed, $pitch, $volume, $sampleRate, $numChannels) {;
			var __label__;
			var $samples_addr;
			var $numSamples_addr;
			var $speed_addr;
			var $pitch_addr;
			var $volume_addr;
			var $sampleRate_addr;
			var $numChannels_addr;
			var $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			$speed_addr = $speed;
			$pitch_addr = $pitch;
			$volume_addr = $volume;
			$sampleRate_addr = $sampleRate;
			$numChannels_addr = $numChannels;
			var $0 = $sampleRate_addr;
			var $1 = $numChannels_addr;
			var $call = _sonicCreateStream($0, $1);
			$stream = $call;
			var $2 = $stream;
			var $3 = $speed_addr;
			_sonicSetSpeed($2, $3);
			var $4 = $stream;
			var $5 = $pitch_addr;
			_sonicSetPitch($4, $5);
			var $6 = $stream;
			var $7 = $volume_addr;
			_sonicSetVolume($6, $7);
			var $8 = $stream;
			var $9 = $samples_addr;
			var $10 = $numSamples_addr;
			var $call1 = _sonicWriteFloatToStream($8, $9, $10);
			var $11 = $stream;
			var $call2 = _sonicFlushStream($11);
			var $12 = $stream;
			var $call3 = _sonicSamplesAvailable($12);
			$numSamples_addr = $call3;
			var $13 = $stream;
			var $14 = $samples_addr;
			var $15 = $numSamples_addr;
			var $call4 = _sonicReadFloatFromStream($13, $14, $15);
			var $16 = $stream;
			_sonicDestroyStream($16);
			var $17 = $numSamples_addr;;
			return $17;
			return null;
		}

		function _sonicChangeShortSpeed($samples, $numSamples, $speed, $pitch, $volume, $sampleRate, $numChannels) {;
			var __label__;
			var $samples_addr;
			var $numSamples_addr;
			var $speed_addr;
			var $pitch_addr;
			var $volume_addr;
			var $sampleRate_addr;
			var $numChannels_addr;
			var $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			$speed_addr = $speed;
			$pitch_addr = $pitch;
			$volume_addr = $volume;
			$sampleRate_addr = $sampleRate;
			$numChannels_addr = $numChannels;
			var $0 = $sampleRate_addr;
			var $1 = $numChannels_addr;
			var $call = _sonicCreateStream($0, $1);
			$stream = $call;
			var $2 = $stream;
			var $3 = $speed_addr;
			_sonicSetSpeed($2, $3);
			var $4 = $stream;
			var $5 = $pitch_addr;
			_sonicSetPitch($4, $5);
			var $6 = $stream;
			var $7 = $volume_addr;
			_sonicSetVolume($6, $7);
			var $8 = $stream;
			var $9 = $samples_addr;
			var $10 = $numSamples_addr;
			var $call1 = _sonicWriteShortToStream($8, $9, $10);
			var $11 = $stream;
			var $call2 = _sonicFlushStream($11);
			var $12 = $stream;
			var $call3 = _sonicSamplesAvailable($12);
			$numSamples_addr = $call3;
			var $13 = $stream;
			var $14 = $samples_addr;
			var $15 = $numSamples_addr;
			var $call4 = _sonicReadShortFromStream($13, $14, $15);
			var $16 = $stream;
			_sonicDestroyStream($16);
			var $17 = $numSamples_addr;;
			return $17;
			return null;
		}

		function __ZL26enlargeInputBufferIfNeededP17sonicStreamStructi($stream, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $numInputSamples = (($0 + 44) & 4294967295);
			var $1 = HEAP32[(($numInputSamples) >> 2)];
			var $2 = $numSamples_addr;
			var $add = ((($2) + ($1)) & 4294967295);
			var $3 = $stream_addr;
			var $inputBufferSize = (($3 + 32) & 4294967295);
			var $4 = HEAP32[(($inputBufferSize) >> 2)];
			var $cmp = ((($add)) | 0) > ((($4)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end11$2: do {
				if (__label__ == 1) {
					var $5 = $stream_addr;
					var $inputBufferSize1 = (($5 + 32) & 4294967295);
					var $6 = HEAP32[(($inputBufferSize1) >> 2)];
					var $shr = ($6) >> 1;
					var $7 = $numSamples_addr;
					var $8 = $stream_addr;
					var $inputBufferSize3 = (($8 + 32) & 4294967295);
					var $9 = HEAP32[(($inputBufferSize3) >> 2)];
					var $add2 = ((($shr) + ($7)) & 4294967295);
					var $add4 = ((($add2) + ($9)) & 4294967295);
					HEAP32[(($inputBufferSize3) >> 2)] = $add4;
					var $10 = $stream_addr;
					var $inputBuffer = (($10) & 4294967295);
					var $11 = HEAP32[(($inputBuffer) >> 2)];
					var $12 = $11;
					var $13 = $stream_addr;
					var $inputBufferSize5 = (($13 + 32) & 4294967295);
					var $14 = HEAP32[(($inputBufferSize5) >> 2)];
					var $15 = $stream_addr;
					var $numChannels = (($15 + 28) & 4294967295);
					var $16 = HEAP32[(($numChannels) >> 2)];
					var $mul = ((($14) * 2) & 4294967295);
					var $mul6 = ((($mul) * ($16)) & 4294967295);
					var $call = _realloc($12, $mul6);
					var $17 = $call;
					var $18 = $stream_addr;
					var $inputBuffer7 = (($18) & 4294967295);
					HEAP32[(($inputBuffer7) >> 2)] = $17;
					var $19 = $stream_addr;
					var $inputBuffer8 = (($19) & 4294967295);
					var $20 = HEAP32[(($inputBuffer8) >> 2)];
					var $cmp9 = ((($20)) | 0) == 0;
					if (!($cmp9)) {
						__label__ = 3;
						break $if_then$$if_end11$2;
					}
					$retval = 0;
					__label__ = 4;
					break $if_then$$if_end11$2;
				}
			} while (0);
			if (__label__ == 3) {
				$retval = 1;;
			}
			var $21 = $retval;;
			return $21;
			return null;
		}

		function __ZL11changeSpeedP17sonicStreamStructf($stream, $speed) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $stream_addr;
			var $speed_addr;
			var $samples;
			var $numSamples;
			var $position;
			var $period;
			var $newSamples;
			var $maxRequired;
			$stream_addr = $stream;
			$speed_addr = $speed;
			var $0 = $stream_addr;
			var $numInputSamples = (($0 + 44) & 4294967295);
			var $1 = HEAP32[(($numInputSamples) >> 2)];
			$numSamples = $1;
			$position = 0;
			var $2 = $stream_addr;
			var $maxRequired1 = (($2 + 64) & 4294967295);
			var $3 = HEAP32[(($maxRequired1) >> 2)];
			$maxRequired = $3;
			var $4 = $stream_addr;
			var $numInputSamples2 = (($4 + 44) & 4294967295);
			var $5 = HEAP32[(($numInputSamples2) >> 2)];
			var $6 = $maxRequired;
			var $cmp = ((($5)) | 0) < ((($6)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				while (1) {
					var $7 = $stream_addr;
					var $remainingInputToCopy = (($7 + 68) & 4294967295);
					var $8 = HEAP32[(($remainingInputToCopy) >> 2)];
					var $cmp3 = ((($8)) | 0) > 0;
					var $9 = $stream_addr;
					if ($cmp3) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $10 = $position;
						var $call = __ZL17copyInputToOutputP17sonicStreamStructi($9, $10);
						$newSamples = $call;
						var $11 = $newSamples;
						var $12 = $position;
						var $add = ((($12) + ($11)) & 4294967295);
						$position = $add;
						__lastLabel__ = 3;;
					} else if (__label__ == 4) {
						var $inputBuffer = (($9) & 4294967295);
						var $13 = HEAP32[(($inputBuffer) >> 2)];
						var $14 = $position;
						var $15 = $stream_addr;
						var $numChannels = (($15 + 28) & 4294967295);
						var $16 = HEAP32[(($numChannels) >> 2)];
						var $mul = ((($16) * ($14)) & 4294967295);
						var $add_ptr = (($13 + 2 * $mul) & 4294967295);
						$samples = $add_ptr;
						var $17 = $stream_addr;
						var $18 = $samples;
						var $call5 = __ZL15findPitchPeriodP17sonicStreamStructPs($17, $18);
						$period = $call5;
						var $19 = $speed_addr;
						var $conv = ($19);
						var $cmp6 = ($conv) > 1;
						var $20 = $stream_addr;
						var $21 = $samples;
						var $22 = $speed_addr;
						var $23 = $period;
						if ($cmp6) {
							__label__ = 5;;
						} else {
							__label__ = 6;;
						}
						if (__label__ == 5) {
							var $call8 = __ZL15skipPitchPeriodP17sonicStreamStructPsfi($20, $21, $22, $23);
							$newSamples = $call8;
							var $24 = $period;
							var $25 = $newSamples;
							var $26 = $position;
							var $add9 = ((($25) + ($24)) & 4294967295);
							var $add10 = ((($add9) + ($26)) & 4294967295);
							$position = $add10;
							__lastLabel__ = 5;;
						} else if (__label__ == 6) {
							var $call12 = __ZL17insertPitchPeriodP17sonicStreamStructPsfi($20, $21, $22, $23);
							$newSamples = $call12;
							var $27 = $newSamples;
							var $28 = $position;
							var $add13 = ((($28) + ($27)) & 4294967295);
							$position = $add13;
							__lastLabel__ = 6;;
						}
					}
					var $29 = __lastLabel__ == 5 ? $25 : (__lastLabel__ == 6 ? $27 : ($11));
					var $cmp16 = ((($29)) | 0) == 0;
					if ($cmp16) {
						__label__ = 8;
						break;
					}
					var $30 = $position;
					var $31 = $maxRequired;
					var $add19 = ((($31) + ($30)) & 4294967295);
					var $32 = $numSamples;
					var $cmp20 = ((($add19)) | 0) <= ((($32)) | 0);
					if ($cmp20) {
						__label__ = 2;
						continue;
					} else {
						__label__ = 10;
						break;
					}
				}
				if (__label__ == 8) {
					$retval = 0;;
				} else if (__label__ == 10) {
					var $33 = $stream_addr;
					var $34 = $position;
					__ZL18removeInputSamplesP17sonicStreamStructi($33, $34);
					$retval = 1;;
				}
			};
			return;
			return;
		}

		function __ZL12copyToOutputP17sonicStreamStructPsi($stream, $samples, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $1 = $numSamples_addr;
			var $call = __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($0, $1);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 2;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 2) {
				var $2 = $stream_addr;
				var $outputBuffer = (($2 + 4) & 4294967295);
				var $3 = HEAP32[(($outputBuffer) >> 2)];
				var $4 = $stream_addr;
				var $numOutputSamples = (($4 + 48) & 4294967295);
				var $5 = HEAP32[(($numOutputSamples) >> 2)];
				var $6 = $stream_addr;
				var $numChannels = (($6 + 28) & 4294967295);
				var $7 = HEAP32[(($numChannels) >> 2)];
				var $mul = ((($7) * ($5)) & 4294967295);
				var $add_ptr = (($3 + 2 * $mul) & 4294967295);
				var $8 = $add_ptr;
				var $9 = $samples_addr;
				var $10 = $9;
				var $11 = $numSamples_addr;
				var $12 = $stream_addr;
				var $numChannels2 = (($12 + 28) & 4294967295);
				var $13 = HEAP32[(($numChannels2) >> 2)];
				var $mul1 = ((($11) * 2) & 4294967295);
				var $mul3 = ((($mul1) * ($13)) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $10;
				$dest$ = $8;
				$stop$ = $src$ + $mul3;
				if (($dest$ % 4) == ($src$ % 4) && $mul3 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $14 = $numSamples_addr;
				var $15 = $stream_addr;
				var $numOutputSamples4 = (($15 + 48) & 4294967295);
				var $16 = HEAP32[(($numOutputSamples4) >> 2)];
				var $add = ((($16) + ($14)) & 4294967295);
				HEAP32[(($numOutputSamples4) >> 2)] = $add;
				var $17 = $numSamples_addr;
				$retval = $17;;
			} else if (__label__ == 1) {
				$retval = 0;;
			}
			var $18 = $retval;;
			return $18;
			return null;
		}

		function __ZL11adjustPitchP17sonicStreamStructi($stream, $originalNumOutputSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $originalNumOutputSamples_addr;
			var $pitch;
			var $numChannels;
			var $period;
			var $newPeriod;
			var $separation;
			var $position;
			var $out;
			var $rampDown;
			var $rampUp;
			$stream_addr = $stream;
			$originalNumOutputSamples_addr = $originalNumOutputSamples;
			var $0 = $stream_addr;
			var $pitch1 = (($0 + 24) & 4294967295);
			var $1 = HEAPF32[(($pitch1) >> 2)];
			$pitch = $1;
			var $2 = $stream_addr;
			var $numChannels2 = (($2 + 28) & 4294967295);
			var $3 = HEAP32[(($numChannels2) >> 2)];
			$numChannels = $3;
			$position = 0;
			var $4 = $stream_addr;
			var $numOutputSamples = (($4 + 48) & 4294967295);
			var $5 = HEAP32[(($numOutputSamples) >> 2)];
			var $6 = $originalNumOutputSamples_addr;
			var $cmp = ((($5)) | 0) == ((($6)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				$retval = 1;;
			} else if (__label__ == 2) {
				var $7 = $stream_addr;
				var $8 = $originalNumOutputSamples_addr;
				var $call = __ZL27moveNewSamplesToPitchBufferP17sonicStreamStructi($7, $8);
				var $tobool = ((($call)) | 0) != 0;
				if ($tobool) {
					__label__ = 4;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 4) {
					while (1) {
						var $9 = $stream_addr;
						var $numPitchSamples = (($9 + 52) & 4294967295);
						var $10 = HEAP32[(($numPitchSamples) >> 2)];
						var $11 = $position;
						var $sub = ((($10) - ($11)) & 4294967295);
						var $12 = $stream_addr;
						var $maxRequired = (($12 + 64) & 4294967295);
						var $13 = HEAP32[(($maxRequired) >> 2)];
						var $cmp5 = ((($sub)) | 0) >= ((($13)) | 0);
						var $14 = $stream_addr;
						if (!($cmp5)) {
							__label__ = 11;
							break;
						}
						var $15 = $stream_addr;
						var $pitchBuffer = (($15 + 8) & 4294967295);
						var $16 = HEAP32[(($pitchBuffer) >> 2)];
						var $17 = $position;
						var $18 = $numChannels;
						var $mul = ((($18) * ($17)) & 4294967295);
						var $add_ptr = (($16 + 2 * $mul) & 4294967295);
						var $call6 = __ZL15findPitchPeriodP17sonicStreamStructPs($14, $add_ptr);
						$period = $call6;
						var $19 = $period;
						var $conv = ((($19)) | 0);
						var $20 = $pitch;
						var $div = ($conv) / ($20);
						var $conv7 = ((($div)) | 0);
						$newPeriod = $conv7;
						var $21 = $stream_addr;
						var $22 = $newPeriod;
						var $call8 = __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($21, $22);
						var $tobool9 = ((($call8)) | 0) != 0;
						if (!($tobool9)) {
							__label__ = 6;
							break;
						}
						var $23 = $stream_addr;
						var $outputBuffer = (($23 + 4) & 4294967295);
						var $24 = HEAP32[(($outputBuffer) >> 2)];
						var $25 = $stream_addr;
						var $numOutputSamples12 = (($25 + 48) & 4294967295);
						var $26 = HEAP32[(($numOutputSamples12) >> 2)];
						var $27 = $numChannels;
						var $mul13 = ((($27) * ($26)) & 4294967295);
						var $add_ptr14 = (($24 + 2 * $mul13) & 4294967295);
						$out = $add_ptr14;
						var $28 = $pitch;
						var $cmp15 = ($28) >= 1;
						var $29 = $stream_addr;
						var $pitchBuffer17 = (($29 + 8) & 4294967295);
						var $30 = HEAP32[(($pitchBuffer17) >> 2)];
						var $31 = $position;
						var $32 = $numChannels;
						var $mul18 = ((($32) * ($31)) & 4294967295);
						var $add_ptr19 = (($30 + 2 * $mul18) & 4294967295);
						$rampDown = $add_ptr19;
						var $33 = $stream_addr;
						var $pitchBuffer20 = (($33 + 8) & 4294967295);
						var $34 = HEAP32[(($pitchBuffer20) >> 2)];
						var $35 = $position;
						if ($cmp15) {
							__label__ = 8;;
						} else {
							__label__ = 9;;
						}
						if (__label__ == 8) {
							var $36 = $period;
							var $37 = $newPeriod;
							var $_neg = (((-($37))) & 4294967295);
							var $add = ((($36) + ($35)) & 4294967295);
							var $sub21 = ((($add) + ($_neg)) & 4294967295);
							var $38 = $numChannels;
							var $mul22 = ((($sub21) * ($38)) & 4294967295);
							var $add_ptr23 = (($34 + 2 * $mul22) & 4294967295);
							$rampUp = $add_ptr23;
							var $39 = $newPeriod;
							var $40 = $numChannels;
							var $41 = $out;
							var $42 = $rampDown;
							var $43 = $rampUp;
							__ZL10overlapAddiiPsS_S_($39, $40, $41, $42, $43);;
						} else if (__label__ == 9) {
							var $44 = $numChannels;
							var $mul28 = ((($44) * ($35)) & 4294967295);
							var $add_ptr29 = (($34 + 2 * $mul28) & 4294967295);
							$rampUp = $add_ptr29;
							var $45 = $newPeriod;
							var $46 = $period;
							var $sub30 = ((($45) - ($46)) & 4294967295);
							$separation = $sub30;
							var $47 = $period;
							var $48 = $numChannels;
							var $49 = $separation;
							var $50 = $out;
							var $51 = $rampDown;
							var $52 = $rampUp;
							__ZL24overlapAddWithSeparationiiiPsS_S_($47, $48, $49, $50, $51, $52);;
						}
						var $53 = $newPeriod;
						var $54 = $stream_addr;
						var $numOutputSamples32 = (($54 + 48) & 4294967295);
						var $55 = HEAP32[(($numOutputSamples32) >> 2)];
						var $add33 = ((($55) + ($53)) & 4294967295);
						HEAP32[(($numOutputSamples32) >> 2)] = $add33;
						var $56 = $period;
						var $57 = $position;
						var $add34 = ((($57) + ($56)) & 4294967295);
						$position = $add34;
						__label__ = 4;
						continue;
					}
					if (__label__ == 11) {
						var $58 = $position;
						__ZL18removePitchSamplesP17sonicStreamStructi($14, $58);
						$retval = 1;;
					} else if (__label__ == 6) {
						$retval = 0;;
					}
				} else if (__label__ == 3) {
					$retval = 0;;
				}
			}
			var $59 = $retval;;
			return $59;
			return null;
		}

		function __ZL12scaleSamplesPsif($samples, $numSamples, $volume) {;
			var __label__;
			var $samples_addr;
			var $numSamples_addr;
			var $volume_addr;
			var $fixedPointVolume;
			var $value;
			$samples_addr = $samples;
			$numSamples_addr = $numSamples;
			$volume_addr = $volume;
			var $0 = $volume_addr;
			var $mul = ($0) * 4096;
			var $conv = ((($mul)) | 0);
			$fixedPointVolume = $conv;
			var $1 = $numSamples_addr;
			var $dec1 = ((($1) - 1) & 4294967295);
			$numSamples_addr = $dec1;
			var $tobool2 = ((($1)) | 0) != 0;
			if ($tobool2) {
				__label__ = 1;;
			} else {
				__label__ = 6;;
			}
			$while_body$$while_end$2: do {
				if (__label__ == 1) {
					$while_body$3: while (1) {
						var $2 = $samples_addr;
						var $3 = HEAP16[(($2) >> 1)];
						var $conv1 = (tempInt = (($3)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
						var $4 = $fixedPointVolume;
						var $mul2 = ((($conv1) * ($4)) & 4294967295);
						var $shr = ($mul2) >> 12;
						$value = $shr;
						var $cmp = ((($shr)) | 0) > 32767;
						if ($cmp) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						$if_then$$if_else$5: do {
							if (__label__ == 2) {
								$value = 32767;;
							} else if (__label__ == 3) {
								var $5 = $value;
								var $cmp3 = ((($5)) | 0) < -32767;
								if (!($cmp3)) {
									__label__ = 5;
									break $if_then$$if_else$5;
								}
								$value = -32767;;
							}
						} while (0);
						var $6 = $value;
						var $conv6 = ((($6)) & 65535);
						var $7 = $samples_addr;
						var $incdec_ptr = (($7 + 2) & 4294967295);
						$samples_addr = $incdec_ptr;
						HEAP16[(($7) >> 1)] = $conv6;
						var $8 = $numSamples_addr;
						var $dec = ((($8) - 1) & 4294967295);
						$numSamples_addr = $dec;
						var $tobool = ((($8)) | 0) != 0;
						if ($tobool) {
							__label__ = 1;
							continue $while_body$3;
						} else {
							__label__ = 6;
							break $while_body$$while_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL27moveNewSamplesToPitchBufferP17sonicStreamStructi($stream, $originalNumOutputSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $originalNumOutputSamples_addr;
			var $numSamples;
			var $numChannels;
			$stream_addr = $stream;
			$originalNumOutputSamples_addr = $originalNumOutputSamples;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];
			var $2 = $originalNumOutputSamples_addr;
			var $sub = ((($1) - ($2)) & 4294967295);
			$numSamples = $sub;
			var $3 = $stream_addr;
			var $numChannels1 = (($3 + 28) & 4294967295);
			var $4 = HEAP32[(($numChannels1) >> 2)];
			$numChannels = $4;
			var $5 = $stream_addr;
			var $numPitchSamples = (($5 + 52) & 4294967295);
			var $6 = HEAP32[(($numPitchSamples) >> 2)];
			var $7 = $numSamples;
			var $add = ((($7) + ($6)) & 4294967295);
			var $8 = $stream_addr;
			var $pitchBufferSize = (($8 + 36) & 4294967295);
			var $9 = HEAP32[(($pitchBufferSize) >> 2)];
			var $cmp = ((($add)) | 0) > ((($9)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end12$2: do {
				if (__label__ == 1) {
					var $10 = $stream_addr;
					var $pitchBufferSize2 = (($10 + 36) & 4294967295);
					var $11 = HEAP32[(($pitchBufferSize2) >> 2)];
					var $shr = ($11) >> 1;
					var $12 = $numSamples;
					var $13 = $stream_addr;
					var $pitchBufferSize4 = (($13 + 36) & 4294967295);
					var $14 = HEAP32[(($pitchBufferSize4) >> 2)];
					var $add3 = ((($shr) + ($12)) & 4294967295);
					var $add5 = ((($add3) + ($14)) & 4294967295);
					HEAP32[(($pitchBufferSize4) >> 2)] = $add5;
					var $15 = $stream_addr;
					var $pitchBuffer = (($15 + 8) & 4294967295);
					var $16 = HEAP32[(($pitchBuffer) >> 2)];
					var $17 = $16;
					var $18 = $stream_addr;
					var $pitchBufferSize6 = (($18 + 36) & 4294967295);
					var $19 = HEAP32[(($pitchBufferSize6) >> 2)];
					var $20 = $numChannels;
					var $mul = ((($19) * 2) & 4294967295);
					var $mul7 = ((($mul) * ($20)) & 4294967295);
					var $call = _realloc($17, $mul7);
					var $21 = $call;
					var $22 = $stream_addr;
					var $pitchBuffer8 = (($22 + 8) & 4294967295);
					HEAP32[(($pitchBuffer8) >> 2)] = $21;
					var $23 = $stream_addr;
					var $pitchBuffer9 = (($23 + 8) & 4294967295);
					var $24 = HEAP32[(($pitchBuffer9) >> 2)];
					var $cmp10 = ((($24)) | 0) == 0;
					if (!($cmp10)) {
						__label__ = 3;
						break $if_then$$if_end12$2;
					}
					$retval = 0;
					__label__ = 4;
					break $if_then$$if_end12$2;
				}
			} while (0);
			if (__label__ == 3) {
				var $25 = $stream_addr;
				var $pitchBuffer13 = (($25 + 8) & 4294967295);
				var $26 = HEAP32[(($pitchBuffer13) >> 2)];
				var $27 = $stream_addr;
				var $numPitchSamples14 = (($27 + 52) & 4294967295);
				var $28 = HEAP32[(($numPitchSamples14) >> 2)];
				var $29 = $numChannels;
				var $mul15 = ((($29) * ($28)) & 4294967295);
				var $add_ptr = (($26 + 2 * $mul15) & 4294967295);
				var $30 = $add_ptr;
				var $31 = $stream_addr;
				var $outputBuffer = (($31 + 4) & 4294967295);
				var $32 = HEAP32[(($outputBuffer) >> 2)];
				var $33 = $originalNumOutputSamples_addr;
				var $34 = $numChannels;
				var $mul16 = ((($34) * ($33)) & 4294967295);
				var $add_ptr17 = (($32 + 2 * $mul16) & 4294967295);
				var $35 = $add_ptr17;
				var $36 = $numSamples;
				var $37 = $numChannels;
				var $mul18 = ((($36) * 2) & 4294967295);
				var $mul19 = ((($mul18) * ($37)) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $35;
				$dest$ = $30;
				$stop$ = $src$ + $mul19;
				if (($dest$ % 4) == ($src$ % 4) && $mul19 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $38 = $originalNumOutputSamples_addr;
				var $39 = $stream_addr;
				var $numOutputSamples20 = (($39 + 48) & 4294967295);
				HEAP32[(($numOutputSamples20) >> 2)] = $38;
				var $40 = $numSamples;
				var $41 = $stream_addr;
				var $numPitchSamples21 = (($41 + 52) & 4294967295);
				var $42 = HEAP32[(($numPitchSamples21) >> 2)];
				var $add22 = ((($42) + ($40)) & 4294967295);
				HEAP32[(($numPitchSamples21) >> 2)] = $add22;
				$retval = 1;;
			}
			var $43 = $retval;;
			return $43;
			return null;
		}

		function __ZL15findPitchPeriodP17sonicStreamStructPs($stream, $samples) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 8;
			_memset(__stackBase__, 0, 8);
			var __label__;
			var $stream_addr;
			var $samples_addr;
			var $minPeriod;
			var $maxPeriod;
			var $sampleRate;
			var $minDiff = __stackBase__;
			var $maxDiff = __stackBase__ + 4;
			var $retPeriod;
			var $skip;
			var $period;
			$stream_addr = $stream;
			$samples_addr = $samples;
			var $0 = $stream_addr;
			var $minPeriod1 = (($0 + 56) & 4294967295);
			var $1 = HEAP32[(($minPeriod1) >> 2)];
			$minPeriod = $1;
			var $2 = $stream_addr;
			var $maxPeriod2 = (($2 + 60) & 4294967295);
			var $3 = HEAP32[(($maxPeriod2) >> 2)];
			$maxPeriod = $3;
			var $4 = $stream_addr;
			var $sampleRate3 = (($4 + 72) & 4294967295);
			var $5 = HEAP32[(($sampleRate3) >> 2)];
			$sampleRate = $5;
			$skip = 1;
			var $6 = $sampleRate;
			var $cmp = ((($6)) | 0) > 4000;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $7 = $sampleRate;
				var $div = ((((($7)) | 0) / 4000) | 0);
				$skip = $div;;
			}
			var $8 = $stream_addr;
			var $numChannels = (($8 + 28) & 4294967295);
			var $9 = HEAP32[(($numChannels) >> 2)];
			var $cmp4 = ((($9)) | 0) == 1;
			if ($cmp4) {
				__label__ = 3;;
			} else {
				__label__ = 5;;
			}
			$land_lhs_true$$if_else$5: do {
				if (__label__ == 3) {
					var $10 = $skip;
					var $cmp5 = ((($10)) | 0) == 1;
					if (!($cmp5)) {
						__label__ = 5;
						break $land_lhs_true$$if_else$5;
					}
					var $11 = $samples_addr;
					var $12 = $minPeriod;
					var $13 = $maxPeriod;
					var $call = __ZL22findPitchPeriodInRangePsiiPiS0_($11, $12, $13, $minDiff, $maxDiff);
					$period = $call;
					__label__ = 13;
					break $land_lhs_true$$if_else$5;
				}
			} while (0);
			$if_end32$$if_else$8: do {
				if (__label__ == 5) {
					var $14 = $stream_addr;
					var $15 = $samples_addr;
					var $16 = $skip;
					__ZL15downSampleInputP17sonicStreamStructPsi($14, $15, $16);
					var $17 = $stream_addr;
					var $downSampleBuffer = (($17 + 12) & 4294967295);
					var $18 = HEAP32[(($downSampleBuffer) >> 2)];
					var $19 = $minPeriod;
					var $20 = $skip;
					var $div7 = ((((($19)) | 0) / ((($20)) | 0)) | 0);
					var $21 = $maxPeriod;
					var $22 = $skip;
					var $div8 = ((((($21)) | 0) / ((($22)) | 0)) | 0);
					var $call9 = __ZL22findPitchPeriodInRangePsiiPiS0_($18, $div7, $div8, $minDiff, $maxDiff);
					$period = $call9;
					var $23 = $skip;
					var $cmp10 = ((($23)) | 0) != 1;
					if (!($cmp10)) {
						__label__ = 13;
						break $if_end32$$if_else$8;
					}
					var $24 = $skip;
					var $25 = $period;
					var $mul = ((($25) * ($24)) & 4294967295);
					$period = $mul;
					var $26 = $period;
					var $27 = $skip;
					var $shl = ($27) << 2;
					var $sub = ((($26) - ($shl)) & 4294967295);
					$minPeriod = $sub;
					var $28 = $period;
					var $29 = $skip;
					var $shl12 = ((($29) * 4) & 4294967295);
					var $add = ((($shl12) + ($28)) & 4294967295);
					$maxPeriod = $add;
					var $30 = $minPeriod;
					var $31 = $stream_addr;
					var $minPeriod13 = (($31 + 56) & 4294967295);
					var $32 = HEAP32[(($minPeriod13) >> 2)];
					var $cmp14 = ((($30)) | 0) < ((($32)) | 0);
					if ($cmp14) {
						__label__ = 7;;
					} else {
						__label__ = 8;;
					}
					if (__label__ == 7) {
						var $33 = $stream_addr;
						var $minPeriod16 = (($33 + 56) & 4294967295);
						var $34 = HEAP32[(($minPeriod16) >> 2)];
						$minPeriod = $34;;
					}
					var $35 = $maxPeriod;
					var $36 = $stream_addr;
					var $maxPeriod18 = (($36 + 60) & 4294967295);
					var $37 = HEAP32[(($maxPeriod18) >> 2)];
					var $cmp19 = ((($35)) | 0) > ((($37)) | 0);
					if ($cmp19) {
						__label__ = 9;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 9) {
						var $38 = $stream_addr;
						var $maxPeriod21 = (($38 + 60) & 4294967295);
						var $39 = HEAP32[(($maxPeriod21) >> 2)];
						$maxPeriod = $39;;
					}
					var $40 = $stream_addr;
					var $numChannels23 = (($40 + 28) & 4294967295);
					var $41 = HEAP32[(($numChannels23) >> 2)];
					var $cmp24 = ((($41)) | 0) == 1;
					if ($cmp24) {
						__label__ = 11;;
					} else {
						__label__ = 12;;
					}
					if (__label__ == 11) {
						var $42 = $samples_addr;
						var $43 = $minPeriod;
						var $44 = $maxPeriod;
						var $call26 = __ZL22findPitchPeriodInRangePsiiPiS0_($42, $43, $44, $minDiff, $maxDiff);
						$period = $call26;;
					} else if (__label__ == 12) {
						var $45 = $stream_addr;
						var $46 = $samples_addr;
						__ZL15downSampleInputP17sonicStreamStructPsi($45, $46, 1);
						var $47 = $stream_addr;
						var $downSampleBuffer28 = (($47 + 12) & 4294967295);
						var $48 = HEAP32[(($downSampleBuffer28) >> 2)];
						var $49 = $minPeriod;
						var $50 = $maxPeriod;
						var $call29 = __ZL22findPitchPeriodInRangePsiiPiS0_($48, $49, $50, $minDiff, $maxDiff);
						$period = $call29;;
					}
				}
			} while (0);
			var $51 = $stream_addr;
			var $52 = $period;
			var $53 = HEAP32[(($minDiff) >> 2)];
			var $54 = HEAP32[(($maxDiff) >> 2)];
			var $call33 = __ZL16prevPeriodBetterP17sonicStreamStructiii($51, $52, $53, $54);
			var $tobool = ((($call33)) | 0) != 0;
			if ($tobool) {
				__label__ = 14;;
			} else {
				__label__ = 15;;
			}
			if (__label__ == 14) {
				var $55 = $stream_addr;
				var $prevPeriod = (($55 + 76) & 4294967295);
				var $56 = HEAP32[(($prevPeriod) >> 2)];
				$retPeriod = $56;;
			} else if (__label__ == 15) {
				var $57 = $period;
				$retPeriod = $57;;
			}
			var $58 = HEAP32[(($minDiff) >> 2)];
			var $59 = $stream_addr;
			var $prevMinDiff = (($59 + 84) & 4294967295);
			HEAP32[(($prevMinDiff) >> 2)] = $58;
			var $60 = HEAP32[(($maxDiff) >> 2)];
			var $61 = $stream_addr;
			var $prevMaxDiff = (($61 + 80) & 4294967295);
			HEAP32[(($prevMaxDiff) >> 2)] = $60;
			var $62 = $period;
			var $63 = $stream_addr;
			var $prevPeriod37 = (($63 + 76) & 4294967295);
			HEAP32[(($prevPeriod37) >> 2)] = $62;
			var $64 = $retPeriod;
			STACKTOP = __stackBase__;
			return $64;
			return null;
		}

		function __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($stream, $numSamples) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $numSamples_addr;
			$stream_addr = $stream;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $numOutputSamples = (($0 + 48) & 4294967295);
			var $1 = HEAP32[(($numOutputSamples) >> 2)];
			var $2 = $numSamples_addr;
			var $add = ((($2) + ($1)) & 4294967295);
			var $3 = $stream_addr;
			var $outputBufferSize = (($3 + 40) & 4294967295);
			var $4 = HEAP32[(($outputBufferSize) >> 2)];
			var $cmp = ((($add)) | 0) > ((($4)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$if_then$$if_end11$2: do {
				if (__label__ == 1) {
					var $5 = $stream_addr;
					var $outputBufferSize1 = (($5 + 40) & 4294967295);
					var $6 = HEAP32[(($outputBufferSize1) >> 2)];
					var $shr = ($6) >> 1;
					var $7 = $numSamples_addr;
					var $8 = $stream_addr;
					var $outputBufferSize3 = (($8 + 40) & 4294967295);
					var $9 = HEAP32[(($outputBufferSize3) >> 2)];
					var $add2 = ((($shr) + ($7)) & 4294967295);
					var $add4 = ((($add2) + ($9)) & 4294967295);
					HEAP32[(($outputBufferSize3) >> 2)] = $add4;
					var $10 = $stream_addr;
					var $outputBuffer = (($10 + 4) & 4294967295);
					var $11 = HEAP32[(($outputBuffer) >> 2)];
					var $12 = $11;
					var $13 = $stream_addr;
					var $outputBufferSize5 = (($13 + 40) & 4294967295);
					var $14 = HEAP32[(($outputBufferSize5) >> 2)];
					var $15 = $stream_addr;
					var $numChannels = (($15 + 28) & 4294967295);
					var $16 = HEAP32[(($numChannels) >> 2)];
					var $mul = ((($14) * 2) & 4294967295);
					var $mul6 = ((($mul) * ($16)) & 4294967295);
					var $call = _realloc($12, $mul6);
					var $17 = $call;
					var $18 = $stream_addr;
					var $outputBuffer7 = (($18 + 4) & 4294967295);
					HEAP32[(($outputBuffer7) >> 2)] = $17;
					var $19 = $stream_addr;
					var $outputBuffer8 = (($19 + 4) & 4294967295);
					var $20 = HEAP32[(($outputBuffer8) >> 2)];
					var $cmp9 = ((($20)) | 0) == 0;
					if (!($cmp9)) {
						__label__ = 3;
						break $if_then$$if_end11$2;
					}
					$retval = 0;
					__label__ = 4;
					break $if_then$$if_end11$2;
				}
			} while (0);
			if (__label__ == 3) {
				$retval = 1;;
			}
			var $21 = $retval;;
			return $21;
			return null;
		}

		function __ZL10overlapAddiiPsS_S_($numSamples, $numChannels, $out, $rampDown, $rampUp) {;
			var __label__;
			var $numSamples_addr;
			var $numChannels_addr;
			var $out_addr;
			var $rampDown_addr;
			var $rampUp_addr;
			var $o;
			var $u;
			var $d;
			var $i;
			var $t;
			$numSamples_addr = $numSamples;
			$numChannels_addr = $numChannels;
			$out_addr = $out;
			$rampDown_addr = $rampDown;
			$rampUp_addr = $rampUp;
			$i = 0;
			var $0 = $i;
			var $1 = $numChannels_addr;
			var $cmp2 = ((($0)) | 0) < ((($1)) | 0);
			if ($cmp2) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$for_body$$for_end14$2: do {
				if (__label__ == 1) {
					$for_body$3: while (1) {
						var $2 = $out_addr;
						var $3 = $i;
						var $add_ptr = (($2 + 2 * $3) & 4294967295);
						$o = $add_ptr;
						var $4 = $rampUp_addr;
						var $5 = $i;
						var $add_ptr1 = (($4 + 2 * $5) & 4294967295);
						$u = $add_ptr1;
						var $6 = $rampDown_addr;
						var $7 = $i;
						var $add_ptr2 = (($6 + 2 * $7) & 4294967295);
						$d = $add_ptr2;
						$t = 0;
						var $8 = $t;
						var $9 = $numSamples_addr;
						var $cmp41 = ((($8)) | 0) < ((($9)) | 0);
						if ($cmp41) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						$for_body5$$for_inc12$5: do {
							if (__label__ == 2) {
								while (1) {
									var $10 = $d;
									var $11 = HEAP16[(($10) >> 1)];
									var $conv = (tempInt = (($11)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $12 = $numSamples_addr;
									var $13 = $t;
									var $sub = ((($12) - ($13)) & 4294967295);
									var $mul = ((($sub) * ($conv)) & 4294967295);
									var $14 = $u;
									var $15 = HEAP16[(($14) >> 1)];
									var $conv6 = (tempInt = (($15)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $16 = $t;
									var $mul7 = ((($conv6) * ($16)) & 4294967295);
									var $add = ((($mul7) + ($mul)) & 4294967295);
									var $17 = $numSamples_addr;
									var $div = ((((($add)) | 0) / ((($17)) | 0)) | 0);
									var $conv8 = ((($div)) & 65535);
									var $18 = $o;
									HEAP16[(($18) >> 1)] = $conv8;
									var $19 = $numChannels_addr;
									var $20 = $o;
									var $add_ptr9 = (($20 + 2 * $19) & 4294967295);
									$o = $add_ptr9;
									var $21 = $numChannels_addr;
									var $22 = $d;
									var $add_ptr10 = (($22 + 2 * $21) & 4294967295);
									$d = $add_ptr10;
									var $23 = $numChannels_addr;
									var $24 = $u;
									var $add_ptr11 = (($24 + 2 * $23) & 4294967295);
									$u = $add_ptr11;
									var $25 = $t;
									var $inc = ((($25) + 1) & 4294967295);
									$t = $inc;
									var $26 = $t;
									var $27 = $numSamples_addr;
									var $cmp4 = ((($26)) | 0) < ((($27)) | 0);
									if ($cmp4) {
										__label__ = 2;
										continue;
									} else {
										__label__ = 3;
										break $for_body5$$for_inc12$5;
									}
								}
							}
						} while (0);
						var $28 = $i;
						var $inc13 = ((($28) + 1) & 4294967295);
						$i = $inc13;
						var $29 = $i;
						var $30 = $numChannels_addr;
						var $cmp = ((($29)) | 0) < ((($30)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue $for_body$3;
						} else {
							__label__ = 4;
							break $for_body$$for_end14$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL24overlapAddWithSeparationiiiPsS_S_($numSamples, $numChannels, $separation, $out, $rampDown, $rampUp) {;
			var __label__;
			var $numSamples_addr;
			var $numChannels_addr;
			var $separation_addr;
			var $out_addr;
			var $rampDown_addr;
			var $rampUp_addr;
			var $o;
			var $u;
			var $d;
			var $i;
			var $t;
			$numSamples_addr = $numSamples;
			$numChannels_addr = $numChannels;
			$separation_addr = $separation;
			$out_addr = $out;
			$rampDown_addr = $rampDown;
			$rampUp_addr = $rampUp;
			$i = 0;
			var $0 = $i;
			var $1 = $numChannels_addr;
			var $cmp3 = ((($0)) | 0) < ((($1)) | 0);
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 9;;
			}
			$for_body$$for_end33$2: do {
				if (__label__ == 1) {
					$for_body$3: while (1) {
						var $2 = $out_addr;
						var $3 = $i;
						var $add_ptr = (($2 + 2 * $3) & 4294967295);
						$o = $add_ptr;
						var $4 = $rampUp_addr;
						var $5 = $i;
						var $add_ptr1 = (($4 + 2 * $5) & 4294967295);
						$u = $add_ptr1;
						var $6 = $rampDown_addr;
						var $7 = $i;
						var $add_ptr2 = (($6 + 2 * $7) & 4294967295);
						$d = $add_ptr2;
						$t = 0;
						var $8 = $t;
						var $9 = $numSamples_addr;
						var $10 = $separation_addr;
						var $add1 = ((($10) + ($9)) & 4294967295);
						var $cmp42 = ((($8)) | 0) < ((($add1)) | 0);
						if ($cmp42) {
							__label__ = 2;;
						} else {
							__label__ = 8;;
						}
						$for_body5$$for_inc31$5: do {
							if (__label__ == 2) {
								while (1) {
									var $11 = $t;
									var $12 = $separation_addr;
									var $cmp6 = ((($11)) | 0) < ((($12)) | 0);
									if ($cmp6) {
										__label__ = 3;;
									} else {
										__label__ = 4;;
									}
									if (__label__ == 3) {
										var $13 = $d;
										var $14 = HEAP16[(($13) >> 1)];
										var $conv = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $15 = $numSamples_addr;
										var $16 = $t;
										var $sub = ((($15) - ($16)) & 4294967295);
										var $mul = ((($sub) * ($conv)) & 4294967295);
										var $17 = $numSamples_addr;
										var $div = ((((($mul)) | 0) / ((($17)) | 0)) | 0);
										var $conv7 = ((($div)) & 65535);
										var $18 = $o;
										HEAP16[(($18) >> 1)] = $conv7;
										var $19 = $numChannels_addr;
										var $20 = $d;
										var $add_ptr8 = (($20 + 2 * $19) & 4294967295);
										$d = $add_ptr8;;
									} else if (__label__ == 4) {
										var $21 = $t;
										var $22 = $numSamples_addr;
										var $cmp9 = ((($21)) | 0) < ((($22)) | 0);
										if ($cmp9) {
											__label__ = 5;;
										} else {
											__label__ = 6;;
										}
										if (__label__ == 5) {
											var $23 = $d;
											var $24 = HEAP16[(($23) >> 1)];
											var $conv11 = (tempInt = (($24)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $25 = $numSamples_addr;
											var $26 = $t;
											var $sub12 = ((($25) - ($26)) & 4294967295);
											var $mul13 = ((($sub12) * ($conv11)) & 4294967295);
											var $27 = $u;
											var $28 = HEAP16[(($27) >> 1)];
											var $conv14 = (tempInt = (($28)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $29 = $t;
											var $30 = $separation_addr;
											var $sub15 = ((($29) - ($30)) & 4294967295);
											var $mul16 = ((($sub15) * ($conv14)) & 4294967295);
											var $add17 = ((($mul16) + ($mul13)) & 4294967295);
											var $31 = $numSamples_addr;
											var $div18 = ((((($add17)) | 0) / ((($31)) | 0)) | 0);
											var $conv19 = ((($div18)) & 65535);
											var $32 = $o;
											HEAP16[(($32) >> 1)] = $conv19;
											var $33 = $numChannels_addr;
											var $34 = $d;
											var $add_ptr20 = (($34 + 2 * $33) & 4294967295);
											$d = $add_ptr20;
											var $35 = $numChannels_addr;
											var $36 = $u;
											var $add_ptr21 = (($36 + 2 * $35) & 4294967295);
											$u = $add_ptr21;;
										} else if (__label__ == 6) {
											var $37 = $u;
											var $38 = HEAP16[(($37) >> 1)];
											var $conv23 = (tempInt = (($38)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
											var $39 = $t;
											var $40 = $separation_addr;
											var $sub24 = ((($39) - ($40)) & 4294967295);
											var $mul25 = ((($sub24) * ($conv23)) & 4294967295);
											var $41 = $numSamples_addr;
											var $div26 = ((((($mul25)) | 0) / ((($41)) | 0)) | 0);
											var $conv27 = ((($div26)) & 65535);
											var $42 = $o;
											HEAP16[(($42) >> 1)] = $conv27;
											var $43 = $numChannels_addr;
											var $44 = $u;
											var $add_ptr28 = (($44 + 2 * $43) & 4294967295);
											$u = $add_ptr28;;
										}
									}
									var $45 = $numChannels_addr;
									var $46 = $o;
									var $add_ptr30 = (($46 + 2 * $45) & 4294967295);
									$o = $add_ptr30;
									var $47 = $t;
									var $inc = ((($47) + 1) & 4294967295);
									$t = $inc;
									var $48 = $t;
									var $49 = $numSamples_addr;
									var $50 = $separation_addr;
									var $add = ((($50) + ($49)) & 4294967295);
									var $cmp4 = ((($48)) | 0) < ((($add)) | 0);
									if ($cmp4) {
										__label__ = 2;
										continue;
									} else {
										__label__ = 8;
										break $for_body5$$for_inc31$5;
									}
								}
							}
						} while (0);
						var $51 = $i;
						var $inc32 = ((($51) + 1) & 4294967295);
						$i = $inc32;
						var $52 = $i;
						var $53 = $numChannels_addr;
						var $cmp = ((($52)) | 0) < ((($53)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue $for_body$3;
						} else {
							__label__ = 9;
							break $for_body$$for_end33$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL18removePitchSamplesP17sonicStreamStructi($stream, $numSamples) {;
			var __label__;
			var $stream_addr;
			var $numSamples_addr;
			var $numChannels;
			var $source;
			$stream_addr = $stream;
			$numSamples_addr = $numSamples;
			var $0 = $stream_addr;
			var $numChannels1 = (($0 + 28) & 4294967295);
			var $1 = HEAP32[(($numChannels1) >> 2)];
			$numChannels = $1;
			var $2 = $stream_addr;
			var $pitchBuffer = (($2 + 8) & 4294967295);
			var $3 = HEAP32[(($pitchBuffer) >> 2)];
			var $4 = $numSamples_addr;
			var $5 = $numChannels;
			var $mul = ((($5) * ($4)) & 4294967295);
			var $add_ptr = (($3 + 2 * $mul) & 4294967295);
			$source = $add_ptr;
			var $6 = $numSamples_addr;
			var $cmp = ((($6)) | 0) == 0;
			if ($cmp) {
				__label__ = 4;;
			} else {
				__label__ = 1;;
			}
			if (__label__ == 1) {
				var $7 = $numSamples_addr;
				var $8 = $stream_addr;
				var $numPitchSamples = (($8 + 52) & 4294967295);
				var $9 = HEAP32[(($numPitchSamples) >> 2)];
				var $cmp2 = ((($7)) | 0) != ((($9)) | 0);
				if ($cmp2) {
					__label__ = 2;;
				} else {
					__label__ = 3;;
				}
				if (__label__ == 2) {
					var $10 = $stream_addr;
					var $pitchBuffer4 = (($10 + 8) & 4294967295);
					var $11 = HEAP32[(($pitchBuffer4) >> 2)];
					var $12 = $11;
					var $13 = $source;
					var $14 = $13;
					var $15 = $stream_addr;
					var $numPitchSamples5 = (($15 + 52) & 4294967295);
					var $16 = HEAP32[(($numPitchSamples5) >> 2)];
					var $17 = $numSamples_addr;
					var $sub = ((($16) - ($17)) & 4294967295);
					var $18 = $numChannels;
					var $mul6 = ((($18) * 2) & 4294967295);
					var $mul7 = ((($mul6) * ($sub)) & 4294967295);
					_llvm_memmove_p0i8_p0i8_i32($12, $14, $mul7, 1, 0);;
				}
				var $19 = $numSamples_addr;
				var $20 = $stream_addr;
				var $numPitchSamples9 = (($20 + 52) & 4294967295);
				var $21 = HEAP32[(($numPitchSamples9) >> 2)];
				var $sub10 = ((($21) - ($19)) & 4294967295);
				HEAP32[(($numPitchSamples9) >> 2)] = $sub10;;
			};
			return;
			return;
		}

		function __ZL22findPitchPeriodInRangePsiiPiS0_($samples, $minPeriod, $maxPeriod, $retMinDiff, $retMaxDiff) {;
			var __label__;
			var __lastLabel__ = null;
			var $samples_addr;
			var $minPeriod_addr;
			var $maxPeriod_addr;
			var $retMinDiff_addr;
			var $retMaxDiff_addr;
			var $period;
			var $bestPeriod;
			var $s;
			var $p;
			var $sVal;
			var $pVal;
			var $diff;
			var $minDiff;
			var $maxDiff;
			var $i;
			$samples_addr = $samples;
			$minPeriod_addr = $minPeriod;
			$maxPeriod_addr = $maxPeriod;
			$retMinDiff_addr = $retMinDiff;
			$retMaxDiff_addr = $retMaxDiff;
			$bestPeriod = 0;
			$minDiff = 1;
			$maxDiff = 0;
			var $0 = $minPeriod_addr;
			$period = $0;
			var $1 = $period;
			var $2 = $maxPeriod_addr;
			var $cmp3 = ((($1)) | 0) <= ((($2)) | 0);
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 11;;
			}
			$for_body$$for_end24$2: do {
				if (__label__ == 1) {
					$for_body$3: while (1) {
						$diff = 0;
						var $3 = $samples_addr;
						$s = $3;
						var $4 = $samples_addr;
						var $5 = $period;
						var $add_ptr = (($4 + 2 * $5) & 4294967295);
						$p = $add_ptr;
						$i = 0;
						var $6 = $i;
						var $7 = $period;
						var $cmp21 = ((($6)) | 0) < ((($7)) | 0);
						if ($cmp21) {
							__label__ = 2;;
						} else {
							__label__ = 6;;
						}
						$for_body3$$for_end$5: do {
							if (__label__ == 2) {
								while (1) {
									var $8 = $s;
									var $incdec_ptr = (($8 + 2) & 4294967295);
									$s = $incdec_ptr;
									var $9 = HEAP16[(($8) >> 1)];
									$sVal = $9;
									var $10 = $p;
									var $incdec_ptr4 = (($10 + 2) & 4294967295);
									$p = $incdec_ptr4;
									var $11 = HEAP16[(($10) >> 1)];
									$pVal = $11;
									var $12 = $sVal;
									var $conv = (tempInt = (($12)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $13 = $pVal;
									var $conv5 = (tempInt = (($13)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $cmp6 = ((($conv)) | 0) >= ((($conv5)) | 0);
									if ($cmp6) {
										__label__ = 3;;
									} else {
										__label__ = 4;;
									}
									if (__label__ == 3) {
										var $14 = $sVal;
										var $conv7 = (tempInt = (($14)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $15 = $pVal;
										var $conv8 = (tempInt = (($15)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $sub = ((($conv7) - ($conv8)) & 4294967295);
										var $conv9 = ((($sub)) & 65535);
										__lastLabel__ = 3;;
									} else if (__label__ == 4) {
										var $16 = $pVal;
										var $conv10 = (tempInt = (($16)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $17 = $sVal;
										var $conv11 = (tempInt = (($17)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
										var $sub12 = ((($conv10) - ($conv11)) & 4294967295);
										var $conv13 = ((($sub12)) & 65535);
										__lastLabel__ = 4;;
									}
									var $cond = __lastLabel__ == 3 ? $conv9 : ($conv13);
									var $conv14 = ((($cond)) & 65535);
									var $18 = $diff;
									var $add = ((($18) + ($conv14)) & 4294967295);
									$diff = $add;
									var $19 = $i;
									var $inc = ((($19) + 1) & 4294967295);
									$i = $inc;
									var $20 = $i;
									var $21 = $period;
									var $cmp2 = ((($20)) | 0) < ((($21)) | 0);
									if ($cmp2) {
										__label__ = 2;
										continue;
									} else {
										__label__ = 6;
										break $for_body3$$for_end$5;
									}
								}
							}
						} while (0);
						var $22 = $diff;
						var $23 = $bestPeriod;
						var $mul = ((($23) * ($22)) & 4294967295);
						var $24 = $minDiff;
						var $25 = $period;
						var $mul15 = ((($25) * ($24)) & 4294967295);
						var $cmp16 = ((($mul)) >>> 0) < ((($mul15)) >>> 0);
						if ($cmp16) {
							__label__ = 7;;
						} else {
							__label__ = 8;;
						}
						if (__label__ == 7) {
							var $26 = $diff;
							$minDiff = $26;
							var $27 = $period;
							$bestPeriod = $27;;
						}
						var $28 = $diff;
						var $29 = $bestPeriod;
						var $mul17 = ((($29) * ($28)) & 4294967295);
						var $30 = $maxDiff;
						var $31 = $period;
						var $mul18 = ((($31) * ($30)) & 4294967295);
						var $cmp19 = ((($mul17)) >>> 0) > ((($mul18)) >>> 0);
						if ($cmp19) {
							__label__ = 9;;
						} else {
							__label__ = 10;;
						}
						if (__label__ == 9) {
							var $32 = $diff;
							$maxDiff = $32;;
						}
						var $33 = $period;
						var $inc23 = ((($33) + 1) & 4294967295);
						$period = $inc23;
						var $34 = $period;
						var $35 = $maxPeriod_addr;
						var $cmp = ((($34)) | 0) <= ((($35)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue $for_body$3;
						} else {
							__label__ = 11;
							break $for_body$$for_end24$2;
						}
					}
				}
			} while (0);
			var $36 = $minDiff;
			var $37 = $retMinDiff_addr;
			HEAP32[(($37) >> 2)] = $36;
			var $38 = $maxDiff;
			var $39 = $retMaxDiff_addr;
			HEAP32[(($39) >> 2)] = $38;
			var $40 = $bestPeriod;;
			return $40;
			return null;
		}

		function __ZL15downSampleInputP17sonicStreamStructPsi($stream, $samples, $skip) {;
			var __label__;
			var $stream_addr;
			var $samples_addr;
			var $skip_addr;
			var $numSamples;
			var $samplesPerValue;
			var $i;
			var $j;
			var $value;
			var $downSamples;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$skip_addr = $skip;
			var $0 = $stream_addr;
			var $maxRequired = (($0 + 64) & 4294967295);
			var $1 = HEAP32[(($maxRequired) >> 2)];
			var $2 = $skip_addr;
			var $div = ((((($1)) | 0) / ((($2)) | 0)) | 0);
			$numSamples = $div;
			var $3 = $stream_addr;
			var $numChannels = (($3 + 28) & 4294967295);
			var $4 = HEAP32[(($numChannels) >> 2)];
			var $5 = $skip_addr;
			var $mul = ((($5) * ($4)) & 4294967295);
			$samplesPerValue = $mul;
			var $6 = $stream_addr;
			var $downSampleBuffer = (($6 + 12) & 4294967295);
			var $7 = HEAP32[(($downSampleBuffer) >> 2)];
			$downSamples = $7;
			$i = 0;
			var $8 = $i;
			var $9 = $numSamples;
			var $cmp3 = ((($8)) | 0) < ((($9)) | 0);
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 4;;
			}
			$for_body$$for_end9$2: do {
				if (__label__ == 1) {
					$for_body$3: while (1) {
						$value = 0;
						$j = 0;
						var $10 = $j;
						var $11 = $samplesPerValue;
						var $cmp21 = ((($10)) | 0) < ((($11)) | 0);
						if ($cmp21) {
							__label__ = 2;;
						} else {
							__label__ = 3;;
						}
						$for_body3$$for_end$5: do {
							if (__label__ == 2) {
								while (1) {
									var $12 = $samples_addr;
									var $incdec_ptr = (($12 + 2) & 4294967295);
									$samples_addr = $incdec_ptr;
									var $13 = HEAP16[(($12) >> 1)];
									var $conv = (tempInt = (($13)), (tempInt >= 32768 ? tempInt - 65536 : tempInt));
									var $14 = $value;
									var $add = ((($14) + ($conv)) & 4294967295);
									$value = $add;
									var $15 = $j;
									var $inc = ((($15) + 1) & 4294967295);
									$j = $inc;
									var $16 = $j;
									var $17 = $samplesPerValue;
									var $cmp2 = ((($16)) | 0) < ((($17)) | 0);
									if ($cmp2) {
										__label__ = 2;
										continue;
									} else {
										__label__ = 3;
										break $for_body3$$for_end$5;
									}
								}
							}
						} while (0);
						var $18 = $samplesPerValue;
						var $19 = $value;
						var $div4 = ((((($19)) | 0) / ((($18)) | 0)) | 0);
						$value = $div4;
						var $20 = $value;
						var $conv5 = ((($20)) & 65535);
						var $21 = $downSamples;
						var $incdec_ptr6 = (($21 + 2) & 4294967295);
						$downSamples = $incdec_ptr6;
						HEAP16[(($21) >> 1)] = $conv5;
						var $22 = $i;
						var $inc8 = ((($22) + 1) & 4294967295);
						$i = $inc8;
						var $23 = $i;
						var $24 = $numSamples;
						var $cmp = ((($23)) | 0) < ((($24)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue $for_body$3;
						} else {
							__label__ = 4;
							break $for_body$$for_end9$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function __ZL16prevPeriodBetterP17sonicStreamStructiii($stream, $period, $minDiff, $maxDiff) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $period_addr;
			var $minDiff_addr;
			var $maxDiff_addr;
			$stream_addr = $stream;
			$period_addr = $period;
			$minDiff_addr = $minDiff;
			$maxDiff_addr = $maxDiff;
			var $0 = $maxDiff_addr;
			var $mul = ((($0) * 3) & 4294967295);
			var $div = ((((($mul)) | 0) / 2) | 0);
			var $1 = $stream_addr;
			var $prevMaxDiff = (($1 + 80) & 4294967295);
			var $2 = HEAP32[(($prevMaxDiff) >> 2)];
			var $cmp = ((($div)) | 0) < ((($2)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$land_lhs_true$$if_end$2: do {
				if (__label__ == 1) {
					var $3 = $maxDiff_addr;
					var $conv = ((($3)) | 0);
					var $mul1 = ($conv) * 3;
					var $4 = $stream_addr;
					var $prevMinDiff = (($4 + 84) & 4294967295);
					var $5 = HEAP32[(($prevMinDiff) >> 2)];
					var $conv2 = ((($5)) | 0);
					var $mul3 = ($mul1) * ($conv2);
					var $6 = $stream_addr;
					var $prevMaxDiff4 = (($6 + 80) & 4294967295);
					var $7 = HEAP32[(($prevMaxDiff4) >> 2)];
					var $conv5 = ((($7)) | 0);
					var $8 = $minDiff_addr;
					var $conv6 = ((($8)) | 0);
					var $mul7 = ($conv5) * ($conv6);
					var $mul8 = ($mul7) * 2;
					var $cmp9 = ($mul3) < ($mul8);
					if (!($cmp9)) {
						__label__ = 3;
						break $land_lhs_true$$if_end$2;
					}
					$retval = 1;
					__label__ = 4;
					break $land_lhs_true$$if_end$2;
				}
			} while (0);
			if (__label__ == 3) {
				$retval = 0;;
			}
			var $9 = $retval;;
			return $9;
			return null;
		}

		function __ZL17copyInputToOutputP17sonicStreamStructi($stream, $position) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $position_addr;
			var $numSamples;
			$stream_addr = $stream;
			$position_addr = $position;
			var $0 = $stream_addr;
			var $remainingInputToCopy = (($0 + 68) & 4294967295);
			var $1 = HEAP32[(($remainingInputToCopy) >> 2)];
			$numSamples = $1;
			var $2 = $numSamples;
			var $3 = $stream_addr;
			var $maxRequired = (($3 + 64) & 4294967295);
			var $4 = HEAP32[(($maxRequired) >> 2)];
			var $cmp = ((($2)) | 0) > ((($4)) | 0);
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $5 = $stream_addr;
				var $maxRequired1 = (($5 + 64) & 4294967295);
				var $6 = HEAP32[(($maxRequired1) >> 2)];
				$numSamples = $6;;
			}
			var $7 = $stream_addr;
			var $8 = $stream_addr;
			var $inputBuffer = (($8) & 4294967295);
			var $9 = HEAP32[(($inputBuffer) >> 2)];
			var $10 = $position_addr;
			var $11 = $stream_addr;
			var $numChannels = (($11 + 28) & 4294967295);
			var $12 = HEAP32[(($numChannels) >> 2)];
			var $mul = ((($12) * ($10)) & 4294967295);
			var $add_ptr = (($9 + 2 * $mul) & 4294967295);
			var $13 = $numSamples;
			var $call = __ZL12copyToOutputP17sonicStreamStructPsi($7, $add_ptr, $13);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 4;;
			} else {
				__label__ = 3;;
			}
			if (__label__ == 4) {
				var $14 = $numSamples;
				var $15 = $stream_addr;
				var $remainingInputToCopy4 = (($15 + 68) & 4294967295);
				var $16 = HEAP32[(($remainingInputToCopy4) >> 2)];
				var $sub = ((($16) - ($14)) & 4294967295);
				HEAP32[(($remainingInputToCopy4) >> 2)] = $sub;
				var $17 = $numSamples;
				$retval = $17;;
			} else if (__label__ == 3) {
				$retval = 0;;
			}
			var $18 = $retval;;
			return $18;
			return null;
		}

		function __ZL15skipPitchPeriodP17sonicStreamStructPsfi($stream, $samples, $speed, $period) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $speed_addr;
			var $period_addr;
			var $newSamples;
			var $numChannels;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$speed_addr = $speed;
			$period_addr = $period;
			var $0 = $stream_addr;
			var $numChannels1 = (($0 + 28) & 4294967295);
			var $1 = HEAP32[(($numChannels1) >> 2)];
			$numChannels = $1;
			var $2 = $speed_addr;
			var $cmp = ($2) >= 2;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$if_then$$if_else$2: do {
				if (__label__ == 1) {
					var $3 = $period_addr;
					var $conv = ((($3)) | 0);
					var $4 = $speed_addr;
					var $sub = ($4) - 1;
					var $div = ($conv) / ($sub);
					var $conv2 = ((($div)) | 0);
					$newSamples = $conv2;;
				} else if (__label__ == 2) {
					var $5 = $speed_addr;
					var $cmp3 = ($5) > 1;
					if (!($cmp3)) {
						__label__ = 4;
						break $if_then$$if_else$2;
					}
					var $6 = $period_addr;
					$newSamples = $6;
					var $7 = $period_addr;
					var $conv5 = ((($7)) | 0);
					var $8 = $speed_addr;
					var $sub6 = 2 - ($8);
					var $mul = ($conv5) * ($sub6);
					var $9 = $speed_addr;
					var $sub7 = ($9) - 1;
					var $div8 = ($mul) / ($sub7);
					var $conv9 = ((($div8)) | 0);
					var $10 = $stream_addr;
					var $remainingInputToCopy = (($10 + 68) & 4294967295);
					HEAP32[(($remainingInputToCopy) >> 2)] = $conv9;;
				}
			} while (0);
			var $11 = $stream_addr;
			var $12 = $newSamples;
			var $call = __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($11, $12);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 6;;
			} else {
				__label__ = 5;;
			}
			if (__label__ == 6) {
				var $13 = $newSamples;
				var $14 = $numChannels;
				var $15 = $stream_addr;
				var $outputBuffer = (($15 + 4) & 4294967295);
				var $16 = HEAP32[(($outputBuffer) >> 2)];
				var $17 = $stream_addr;
				var $numOutputSamples = (($17 + 48) & 4294967295);
				var $18 = HEAP32[(($numOutputSamples) >> 2)];
				var $19 = $numChannels;
				var $mul13 = ((($19) * ($18)) & 4294967295);
				var $add_ptr = (($16 + 2 * $mul13) & 4294967295);
				var $20 = $samples_addr;
				var $21 = $samples_addr;
				var $22 = $period_addr;
				var $23 = $numChannels;
				var $mul14 = ((($23) * ($22)) & 4294967295);
				var $add_ptr15 = (($21 + 2 * $mul14) & 4294967295);
				__ZL10overlapAddiiPsS_S_($13, $14, $add_ptr, $20, $add_ptr15);
				var $24 = $newSamples;
				var $25 = $stream_addr;
				var $numOutputSamples16 = (($25 + 48) & 4294967295);
				var $26 = HEAP32[(($numOutputSamples16) >> 2)];
				var $add = ((($26) + ($24)) & 4294967295);
				HEAP32[(($numOutputSamples16) >> 2)] = $add;
				var $27 = $newSamples;
				$retval = $27;;
			} else if (__label__ == 5) {
				$retval = 0;;
			}
			var $28 = $retval;;
			return $28;
			return null;
		}

		function __ZL17insertPitchPeriodP17sonicStreamStructPsfi($stream, $samples, $speed, $period) {;
			var __label__;
			var $retval;
			var $stream_addr;
			var $samples_addr;
			var $speed_addr;
			var $period_addr;
			var $newSamples;
			var $out;
			var $numChannels;
			$stream_addr = $stream;
			$samples_addr = $samples;
			$speed_addr = $speed;
			$period_addr = $period;
			var $0 = $stream_addr;
			var $numChannels1 = (($0 + 28) & 4294967295);
			var $1 = HEAP32[(($numChannels1) >> 2)];
			$numChannels = $1;
			var $2 = $speed_addr;
			var $cmp = ($2) < 0.5;
			var $3 = $period_addr;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $conv = ((($3)) | 0);
				var $4 = $speed_addr;
				var $mul = ($conv) * ($4);
				var $5 = $speed_addr;
				var $sub = 1 - ($5);
				var $div = ($mul) / ($sub);
				var $conv2 = ((($div)) | 0);
				$newSamples = $conv2;;
			} else if (__label__ == 2) {
				$newSamples = $3;
				var $6 = $period_addr;
				var $conv3 = ((($6)) | 0);
				var $7 = $speed_addr;
				var $mul4 = 2 * ($7);
				var $sub5 = ($mul4) - 1;
				var $mul6 = ($conv3) * ($sub5);
				var $8 = $speed_addr;
				var $sub7 = 1 - ($8);
				var $div8 = ($mul6) / ($sub7);
				var $conv9 = ((($div8)) | 0);
				var $9 = $stream_addr;
				var $remainingInputToCopy = (($9 + 68) & 4294967295);
				HEAP32[(($remainingInputToCopy) >> 2)] = $conv9;;
			}
			var $10 = $stream_addr;
			var $11 = $period_addr;
			var $12 = $newSamples;
			var $add = ((($12) + ($11)) & 4294967295);
			var $call = __ZL27enlargeOutputBufferIfNeededP17sonicStreamStructi($10, $add);
			var $tobool = ((($call)) | 0) != 0;
			if ($tobool) {
				__label__ = 5;;
			} else {
				__label__ = 4;;
			}
			if (__label__ == 5) {
				var $13 = $stream_addr;
				var $outputBuffer = (($13 + 4) & 4294967295);
				var $14 = HEAP32[(($outputBuffer) >> 2)];
				var $15 = $stream_addr;
				var $numOutputSamples = (($15 + 48) & 4294967295);
				var $16 = HEAP32[(($numOutputSamples) >> 2)];
				var $17 = $numChannels;
				var $mul12 = ((($17) * ($16)) & 4294967295);
				var $add_ptr = (($14 + 2 * $mul12) & 4294967295);
				$out = $add_ptr;
				var $18 = $out;
				var $19 = $18;
				var $20 = $samples_addr;
				var $21 = $20;
				var $22 = $period_addr;
				var $23 = $numChannels;
				var $mul13 = ((($22) * 2) & 4294967295);
				var $mul14 = ((($mul13) * ($23)) & 4294967295);
				var $src$, $dest$, $stop$, $stop4$, $fast$;
				$src$ = $21;
				$dest$ = $19;
				$stop$ = $src$ + $mul14;
				if (($dest$ % 4) == ($src$ % 4) && $mul14 > 8) {
					while ($src$ % 4 !== 0 && $src$ < $stop$) {;
						HEAP8[$dest$++] = HEAP8[$src$++];
					}
					$src$ >>= 2;
					$dest$ >>= 2;
					$stop4$ = $stop$ >> 2;
					while ($src$ < $stop4$) {;;;
						HEAP32[$dest$++] = HEAP32[$src$++];
					}
					$src$ <<= 2;
					$dest$ <<= 2;
				}
				while ($src$ < $stop$) {;
					HEAP8[$dest$++] = HEAP8[$src$++];
				};
				var $24 = $stream_addr;
				var $outputBuffer15 = (($24 + 4) & 4294967295);
				var $25 = HEAP32[(($outputBuffer15) >> 2)];
				var $26 = $stream_addr;
				var $numOutputSamples16 = (($26 + 48) & 4294967295);
				var $27 = HEAP32[(($numOutputSamples16) >> 2)];
				var $28 = $period_addr;
				var $add17 = ((($28) + ($27)) & 4294967295);
				var $29 = $numChannels;
				var $mul18 = ((($add17) * ($29)) & 4294967295);
				var $add_ptr19 = (($25 + 2 * $mul18) & 4294967295);
				$out = $add_ptr19;
				var $30 = $newSamples;
				var $31 = $numChannels;
				var $32 = $out;
				var $33 = $samples_addr;
				var $34 = $period_addr;
				var $35 = $numChannels;
				var $mul20 = ((($35) * ($34)) & 4294967295);
				var $add_ptr21 = (($33 + 2 * $mul20) & 4294967295);
				var $36 = $samples_addr;
				__ZL10overlapAddiiPsS_S_($30, $31, $32, $add_ptr21, $36);
				var $37 = $period_addr;
				var $38 = $newSamples;
				var $39 = $stream_addr;
				var $numOutputSamples23 = (($39 + 48) & 4294967295);
				var $40 = HEAP32[(($numOutputSamples23) >> 2)];
				var $add22 = ((($38) + ($37)) & 4294967295);
				var $add24 = ((($add22) + ($40)) & 4294967295);
				HEAP32[(($numOutputSamples23) >> 2)] = $add24;
				var $41 = $newSamples;
				$retval = $41;;
			} else if (__label__ == 4) {
				$retval = 0;;
			}
			var $42 = $retval;;
			return $42;
			return null;
		}

		function __ZL18removeInputSamplesP17sonicStreamStructi($stream, $position) {;
			var __label__;
			var $stream_addr;
			var $position_addr;
			var $remainingSamples;
			$stream_addr = $stream;
			$position_addr = $position;
			var $0 = $stream_addr;
			var $numInputSamples = (($0 + 44) & 4294967295);
			var $1 = HEAP32[(($numInputSamples) >> 2)];
			var $2 = $position_addr;
			var $sub = ((($1) - ($2)) & 4294967295);
			$remainingSamples = $sub;
			var $3 = $remainingSamples;
			var $cmp = ((($3)) | 0) > 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			if (__label__ == 1) {
				var $4 = $stream_addr;
				var $inputBuffer = (($4) & 4294967295);
				var $5 = HEAP32[(($inputBuffer) >> 2)];
				var $6 = $5;
				var $7 = $stream_addr;
				var $inputBuffer1 = (($7) & 4294967295);
				var $8 = HEAP32[(($inputBuffer1) >> 2)];
				var $9 = $position_addr;
				var $10 = $stream_addr;
				var $numChannels = (($10 + 28) & 4294967295);
				var $11 = HEAP32[(($numChannels) >> 2)];
				var $mul = ((($11) * ($9)) & 4294967295);
				var $add_ptr = (($8 + 2 * $mul) & 4294967295);
				var $12 = $add_ptr;
				var $13 = $remainingSamples;
				var $14 = $stream_addr;
				var $numChannels3 = (($14 + 28) & 4294967295);
				var $15 = HEAP32[(($numChannels3) >> 2)];
				var $mul2 = ((($13) * 2) & 4294967295);
				var $mul4 = ((($mul2) * ($15)) & 4294967295);
				_llvm_memmove_p0i8_p0i8_i32($6, $12, $mul4, 1, 0);;
			}
			var $16 = $remainingSamples;
			var $17 = $stream_addr;
			var $numInputSamples5 = (($17 + 44) & 4294967295);
			HEAP32[(($numInputSamples5) >> 2)] = $16;;
			return;
			return;
		}

		function _getopt($argc, $argv, $optstring) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 20;
			_memset(__stackBase__, 0, 20);
			var __label__;
			var $argc_addr;
			var $argv_addr;
			var $optstring_addr;
			var $data = __stackBase__;
			var $r;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$optstring_addr = $optstring;
			__ZL12read_globalsP11getopt_data($data);
			var $0 = $argc_addr;
			var $1 = $argv_addr;
			var $2 = $optstring_addr;
			var $call = __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($0, $1, $2, 0, 0, 0, $data);
			$r = $call;
			__ZL13write_globalsP11getopt_data($data);
			var $3 = $r;
			STACKTOP = __stackBase__;
			return $3;
			return null;
		}

		function __ZL12read_globalsP11getopt_data($data) {;
			var __label__;
			var $data_addr;
			$data_addr = $data;
			var $0 = HEAP32[((_optarg) >> 2)];
			var $1 = $data_addr;
			var $optarg = (($1) & 4294967295);
			HEAP32[(($optarg) >> 2)] = $0;
			var $2 = HEAP32[((_optind) >> 2)];
			var $3 = $data_addr;
			var $optind = (($3 + 4) & 4294967295);
			HEAP32[(($optind) >> 2)] = $2;
			var $4 = HEAP32[((_opterr) >> 2)];
			var $5 = $data_addr;
			var $opterr = (($5 + 8) & 4294967295);
			HEAP32[(($opterr) >> 2)] = $4;
			var $6 = HEAP32[((_optopt) >> 2)];
			var $7 = $data_addr;
			var $optopt = (($7 + 12) & 4294967295);
			HEAP32[(($optopt) >> 2)] = $6;
			var $8 = HEAP32[((__ZL8optwhere) >> 2)];
			var $9 = $data_addr;
			var $optwhere = (($9 + 16) & 4294967295);
			HEAP32[(($optwhere) >> 2)] = $8;;
			return;
			return;
		}

		function __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($argc, $argv, $shortopts, $longopts, $longind, $only, $data) {;
			var __label__;
			var __lastLabel__ = null;
			var $retval;
			var $argc_addr;
			var $argv_addr;
			var $shortopts_addr;
			var $longopts_addr;
			var $longind_addr;
			var $only_addr;
			var $data_addr;
			var $ordering;
			var $permute_from;
			var $num_nonopts;
			var $optindex;
			var $match_chars;
			var $possible_arg;
			var $longopt_match;
			var $has_arg;
			var $cp;
			var $arg_next;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$shortopts_addr = $shortopts;
			$longopts_addr = $longopts;
			$longind_addr = $longind;
			$only_addr = $only;
			$data_addr = $data;
			$ordering = 0;
			$permute_from = 0;
			$num_nonopts = 0;
			$optindex = 0;
			$match_chars = 0;
			$possible_arg = 0;
			$longopt_match = -1;
			$has_arg = -1;
			$cp = 0;
			$arg_next = 0;
			var $0 = $argc_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 6;;
			} else {
				__label__ = 1;;
			}
			$if_then$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $1 = $argv_addr;
					var $cmp1 = ((($1)) | 0) == 0;
					if ($cmp1) {
						__label__ = 6;
						break $if_then$$lor_lhs_false$2;
					}
					var $2 = $shortopts_addr;
					var $cmp3 = ((($2)) | 0) == 0;
					if ($cmp3) {
						__label__ = 3;;
					} else {
						__label__ = 4;;
					}
					if (__label__ == 3) {
						var $3 = $longopts_addr;
						var $cmp4 = ((($3)) | 0) == 0;
						if ($cmp4) {
							__label__ = 6;
							break $if_then$$lor_lhs_false$2;
						}
					}
					var $4 = $data_addr;
					var $optind = (($4 + 4) & 4294967295);
					var $5 = HEAP32[(($optind) >> 2)];
					var $6 = $argc_addr;
					var $cmp6 = ((($5)) | 0) >= ((($6)) | 0);
					if ($cmp6) {
						__label__ = 6;
						break $if_then$$lor_lhs_false$2;
					}
					var $7 = $data_addr;
					var $optind8 = (($7 + 4) & 4294967295);
					var $8 = HEAP32[(($optind8) >> 2)];
					var $9 = $argv_addr;
					var $arrayidx = (($9 + 4 * $8) & 4294967295);
					var $10 = HEAP32[(($arrayidx) >> 2)];
					var $cmp9 = ((($10)) | 0) == 0;
					if ($cmp9) {
						__label__ = 6;
						break $if_then$$lor_lhs_false$2;
					}
					var $11 = $data_addr;
					var $optind10 = (($11 + 4) & 4294967295);
					var $12 = HEAP32[(($optind10) >> 2)];
					var $13 = $argv_addr;
					var $arrayidx11 = (($13 + 4 * $12) & 4294967295);
					var $14 = HEAP32[(($arrayidx11) >> 2)];
					var $call = _strcmp($14, ((__str831) & 4294967295));
					var $cmp12 = ((($call)) | 0) == 0;
					var $15 = $data_addr;
					var $optind14 = (($15 + 4) & 4294967295);
					var $16 = HEAP32[(($optind14) >> 2)];
					if ($cmp12) {
						__label__ = 8;;
					} else {
						__label__ = 9;;
					}
					if (__label__ == 8) {
						var $inc = ((($16) + 1) & 4294967295);
						HEAP32[(($optind14) >> 2)] = $inc;
						$retval = -1;
						__label__ = 96;
						break $if_then$$lor_lhs_false$2;
					} else if (__label__ == 9) {
						var $cmp17 = ((($16)) | 0) == 0;
						if ($cmp17) {
							__label__ = 10;;
						} else {
							__label__ = 11;;
						}
						if (__label__ == 10) {
							var $17 = $data_addr;
							var $optwhere = (($17 + 16) & 4294967295);
							HEAP32[(($optwhere) >> 2)] = 1;
							var $18 = $data_addr;
							var $optind19 = (($18 + 4) & 4294967295);
							HEAP32[(($optind19) >> 2)] = 1;;
						}
						var $19 = $shortopts_addr;
						var $cmp21 = ((($19)) | 0) != 0;
						if ($cmp21) {
							__label__ = 12;;
						} else {
							__label__ = 15;;
						}
						$land_lhs_true22$$if_else$16: do {
							if (__label__ == 12) {
								var $20 = $shortopts_addr;
								var $21 = HEAP8[($20)];
								var $conv = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp23 = ((($conv)) | 0) == 45;
								if ($cmp23) {
									__label__ = 14;;
								} else {
									__label__ = 13;;
								}
								if (__label__ == 13) {
									var $22 = $shortopts_addr;
									var $23 = HEAP8[($22)];
									var $conv25 = (tempInt = (($23)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp26 = ((($conv25)) | 0) == 43;
									if (!($cmp26)) {
										__label__ = 15;
										break $land_lhs_true22$$if_else$16;
									}
								}
								var $24 = $shortopts_addr;
								var $25 = HEAP8[($24)];
								var $conv28 = (tempInt = (($25)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $cmp29 = ((($conv28)) | 0) == 45;
								var $cond = ($cmp29) ? 1 : 2;
								$ordering = $cond;
								var $26 = $shortopts_addr;
								var $incdec_ptr = (($26 + 1) & 4294967295);
								$shortopts_addr = $incdec_ptr;
								__label__ = 16;
								break $land_lhs_true22$$if_else$16;
							}
						} while (0);
						if (__label__ == 15) {
							var $call30 = _getenv(((__str1832) & 4294967295));
							var $cmp31 = ((($call30)) | 0) != 0;
							var $cond32 = ($cmp31) ? 2 : 0;
							$ordering = $cond32;;
						}
						var $27 = $data_addr;
						var $optwhere34 = (($27 + 16) & 4294967295);
						var $28 = HEAP32[(($optwhere34) >> 2)];
						var $cmp35 = ((($28)) | 0) == 1;
						if ($cmp35) {
							__label__ = 17;;
						} else {
							__label__ = 28;;
						}
						$if_then36$$if_end75$24: do {
							if (__label__ == 17) {
								var $29 = $ordering;
								if ($29 == 2) {
									__label__ = 26;;
								} else if ($29 == 1) {
									__label__ = 24;;
								} else {
									__label__ = 18;;
								}
								if (__label__ == 18) {
									var $30 = $data_addr;
									var $optind37 = (($30 + 4) & 4294967295);
									var $31 = HEAP32[(($optind37) >> 2)];
									$permute_from = $31;
									$num_nonopts = 0;
									var $32 = $data_addr;
									var $optind381 = (($32 + 4) & 4294967295);
									var $33 = HEAP32[(($optind381) >> 2)];
									var $34 = $argv_addr;
									var $arrayidx392 = (($34 + 4 * $33) & 4294967295);
									var $35 = HEAP32[(($arrayidx392) >> 2)];
									var $36 = $only_addr;
									var $call403 = __ZL9is_optionPci($35, $36);
									var $tobool4 = ((($call403)) | 0) != 0;
									var $lnot5 = ($tobool4) ^ 1;
									var $37 = $data_addr;
									var $optind416 = (($37 + 4) & 4294967295);
									var $38 = HEAP32[(($optind416) >> 2)];
									if ($lnot5) {
										__lastLabel__ = 18;
										__label__ = 19;;
									} else {
										__lastLabel__ = 18;
										__label__ = 20;;
									}
									$while_body$$while_end$28: do {
										if (__label__ == 19) {
											while (1) {
												var $39 = __lastLabel__ == 19 ? $47 : ($38);
												var $optind417 = __lastLabel__ == 19 ? $optind41 : ($optind416);
												var $inc42 = ((($39) + 1) & 4294967295);
												HEAP32[(($optind417) >> 2)] = $inc42;
												var $40 = $num_nonopts;
												var $inc43 = ((($40) + 1) & 4294967295);
												$num_nonopts = $inc43;
												var $41 = $data_addr;
												var $optind38 = (($41 + 4) & 4294967295);
												var $42 = HEAP32[(($optind38) >> 2)];
												var $43 = $argv_addr;
												var $arrayidx39 = (($43 + 4 * $42) & 4294967295);
												var $44 = HEAP32[(($arrayidx39) >> 2)];
												var $45 = $only_addr;
												var $call40 = __ZL9is_optionPci($44, $45);
												var $tobool = ((($call40)) | 0) != 0;
												var $lnot = ($tobool) ^ 1;
												var $46 = $data_addr;
												var $optind41 = (($46 + 4) & 4294967295);
												var $47 = HEAP32[(($optind41) >> 2)];
												if ($lnot) {
													__lastLabel__ = 19;
													__label__ = 19;
													continue;
												} else {
													__lastLabel__ = 19;
													__label__ = 20;
													break $while_body$$while_end$28;
												}
											}
										}
									} while (0);
									var $_lcssa = __lastLabel__ == 18 ? $38 : ($47);
									var $48 = $argv_addr;
									var $arrayidx45 = (($48 + 4 * $_lcssa) & 4294967295);
									var $49 = HEAP32[(($arrayidx45) >> 2)];
									var $cmp46 = ((($49)) | 0) == 0;
									if ($cmp46) {
										__label__ = 21;;
									} else {
										__label__ = 22;;
									}
									if (__label__ == 21) {
										var $50 = $permute_from;
										var $51 = $data_addr;
										var $optind48 = (($51 + 4) & 4294967295);
										HEAP32[(($optind48) >> 2)] = $50;
										$retval = -1;
										__label__ = 96;
										break $if_then$$lor_lhs_false$2;
									} else if (__label__ == 22) {
										var $52 = $data_addr;
										var $optind50 = (($52 + 4) & 4294967295);
										var $53 = HEAP32[(($optind50) >> 2)];
										var $54 = $argv_addr;
										var $arrayidx51 = (($54 + 4 * $53) & 4294967295);
										var $55 = HEAP32[(($arrayidx51) >> 2)];
										var $call52 = _strcmp($55, ((__str831) & 4294967295));
										var $cmp53 = ((($call52)) | 0) == 0;
										if (!($cmp53)) {
											__label__ = 28;
											break $if_then36$$if_end75$24;
										}
										var $56 = $argv_addr;
										var $57 = $permute_from;
										var $add_ptr = (($56 + 4 * $57) & 4294967295);
										var $58 = $num_nonopts;
										__ZL7permutePKPcii($add_ptr, $58, 1);
										var $59 = $permute_from;
										var $add = ((($59) + 1) & 4294967295);
										var $60 = $data_addr;
										var $optind55 = (($60 + 4) & 4294967295);
										HEAP32[(($optind55) >> 2)] = $add;
										$retval = -1;
										__label__ = 96;
										break $if_then$$lor_lhs_false$2;
									}
								} else if (__label__ == 26) {
									var $72 = $data_addr;
									var $optind69 = (($72 + 4) & 4294967295);
									var $73 = HEAP32[(($optind69) >> 2)];
									var $74 = $argv_addr;
									var $arrayidx70 = (($74 + 4 * $73) & 4294967295);
									var $75 = HEAP32[(($arrayidx70) >> 2)];
									var $76 = $only_addr;
									var $call71 = __ZL9is_optionPci($75, $76);
									var $tobool72 = ((($call71)) | 0) != 0;
									if ($tobool72) {
										__label__ = 28;
										break $if_then36$$if_end75$24;
									}
									$retval = -1;
									__label__ = 96;
									break $if_then$$lor_lhs_false$2;
								} else if (__label__ == 24) {
									var $61 = $data_addr;
									var $optind59 = (($61 + 4) & 4294967295);
									var $62 = HEAP32[(($optind59) >> 2)];
									var $63 = $argv_addr;
									var $arrayidx60 = (($63 + 4 * $62) & 4294967295);
									var $64 = HEAP32[(($arrayidx60) >> 2)];
									var $65 = $only_addr;
									var $call61 = __ZL9is_optionPci($64, $65);
									var $tobool62 = ((($call61)) | 0) != 0;
									if ($tobool62) {
										__label__ = 28;
										break $if_then36$$if_end75$24;
									}
									var $66 = $data_addr;
									var $optind64 = (($66 + 4) & 4294967295);
									var $67 = HEAP32[(($optind64) >> 2)];
									var $inc65 = ((($67) + 1) & 4294967295);
									HEAP32[(($optind64) >> 2)] = $inc65;
									var $68 = $argv_addr;
									var $arrayidx66 = (($68 + 4 * $67) & 4294967295);
									var $69 = HEAP32[(($arrayidx66) >> 2)];
									var $70 = $data_addr;
									var $optarg = (($70) & 4294967295);
									HEAP32[(($optarg) >> 2)] = $69;
									var $71 = $data_addr;
									var $optopt = (($71 + 12) & 4294967295);
									HEAP32[(($optopt) >> 2)] = 1;
									$retval = 1;
									__label__ = 96;
									break $if_then$$lor_lhs_false$2;
								}
							}
						} while (0);
						var $77 = $longopts_addr;
						var $cmp76 = ((($77)) | 0) != 0;
						if ($cmp76) {
							__label__ = 29;;
						} else {
							__label__ = 52;;
						}
						$land_lhs_true77$$if_end162$41: do {
							if (__label__ == 29) {
								var $78 = $data_addr;
								var $optind78 = (($78 + 4) & 4294967295);
								var $79 = HEAP32[(($optind78) >> 2)];
								var $80 = $argv_addr;
								var $arrayidx79 = (($80 + 4 * $79) & 4294967295);
								var $81 = HEAP32[(($arrayidx79) >> 2)];
								var $call80 = _memcmp($81, ((__str831) & 4294967295), 2);
								var $cmp81 = ((($call80)) | 0) == 0;
								if ($cmp81) {
									__label__ = 32;;
								} else {
									__label__ = 30;;
								}
								if (__label__ == 30) {
									var $82 = $only_addr;
									var $tobool83 = ((($82)) | 0) != 0;
									if (!($tobool83)) {
										__label__ = 52;
										break $land_lhs_true77$$if_end162$41;
									}
									var $83 = $data_addr;
									var $optind85 = (($83 + 4) & 4294967295);
									var $84 = HEAP32[(($optind85) >> 2)];
									var $85 = $argv_addr;
									var $arrayidx86 = (($85 + 4 * $84) & 4294967295);
									var $86 = HEAP32[(($arrayidx86) >> 2)];
									var $arrayidx87 = (($86) & 4294967295);
									var $87 = HEAP8[($arrayidx87)];
									var $conv88 = (tempInt = (($87)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp89 = ((($conv88)) | 0) == 43;
									if (!($cmp89)) {
										__label__ = 52;
										break $land_lhs_true77$$if_end162$41;
									}
								}
								var $88 = $data_addr;
								var $optwhere91 = (($88 + 16) & 4294967295);
								var $89 = HEAP32[(($optwhere91) >> 2)];
								var $cmp92 = ((($89)) | 0) == 1;
								if (!($cmp92)) {
									__label__ = 52;
									break $land_lhs_true77$$if_end162$41;
								}
								var $90 = $data_addr;
								var $optind94 = (($90 + 4) & 4294967295);
								var $91 = HEAP32[(($optind94) >> 2)];
								var $92 = $argv_addr;
								var $arrayidx95 = (($92 + 4 * $91) & 4294967295);
								var $93 = HEAP32[(($arrayidx95) >> 2)];
								var $call96 = _memcmp($93, ((__str831) & 4294967295), 2);
								var $cmp97 = ((($call96)) | 0) == 0;
								if ($cmp97) {
									__label__ = 34;;
								} else {
									__label__ = 35;;
								}
								if (__label__ == 34) {
									var $94 = $data_addr;
									var $optwhere99 = (($94 + 16) & 4294967295);
									HEAP32[(($optwhere99) >> 2)] = 2;;
								}
								$longopt_match = -1;
								var $95 = $data_addr;
								var $optind101 = (($95 + 4) & 4294967295);
								var $96 = HEAP32[(($optind101) >> 2)];
								var $97 = $argv_addr;
								var $arrayidx102 = (($97 + 4 * $96) & 4294967295);
								var $98 = HEAP32[(($arrayidx102) >> 2)];
								var $99 = $data_addr;
								var $optwhere103 = (($99 + 16) & 4294967295);
								var $100 = HEAP32[(($optwhere103) >> 2)];
								var $add_ptr104 = (($98 + $100) & 4294967295);
								var $call105 = _strchr($add_ptr104, 61);
								$possible_arg = $call105;
								var $cmp106 = ((($call105)) | 0) == 0;
								if ($cmp106) {
									__label__ = 36;;
								} else {
									__label__ = 37;;
								}
								if (__label__ == 36) {
									var $101 = $data_addr;
									var $optind108 = (($101 + 4) & 4294967295);
									var $102 = HEAP32[(($optind108) >> 2)];
									var $103 = $argv_addr;
									var $arrayidx109 = (($103 + 4 * $102) & 4294967295);
									var $104 = HEAP32[(($arrayidx109) >> 2)];
									var $call110 = _strlen($104);
									$match_chars = $call110;
									var $105 = $data_addr;
									var $optind111 = (($105 + 4) & 4294967295);
									var $106 = HEAP32[(($optind111) >> 2)];
									var $107 = $argv_addr;
									var $arrayidx112 = (($107 + 4 * $106) & 4294967295);
									var $108 = HEAP32[(($arrayidx112) >> 2)];
									var $109 = $match_chars;
									var $add_ptr113 = (($108 + $109) & 4294967295);
									$possible_arg = $add_ptr113;
									var $110 = $match_chars;
									var $111 = $data_addr;
									var $optwhere114 = (($111 + 16) & 4294967295);
									var $112 = HEAP32[(($optwhere114) >> 2)];
									var $sub = ((($110) - ($112)) & 4294967295);
									$match_chars = $sub;;
								} else if (__label__ == 37) {
									var $113 = $possible_arg;
									var $114 = $data_addr;
									var $optind116 = (($114 + 4) & 4294967295);
									var $115 = HEAP32[(($optind116) >> 2)];
									var $116 = $argv_addr;
									var $arrayidx117 = (($116 + 4 * $115) & 4294967295);
									var $117 = HEAP32[(($arrayidx117) >> 2)];
									var $sub_ptr_lhs_cast = ($113);
									var $sub_ptr_rhs_cast = ($117);
									var $sub_ptr_rhs_cast_neg = (((-($sub_ptr_rhs_cast))) & 4294967295);
									var $118 = $data_addr;
									var $optwhere118 = (($118 + 16) & 4294967295);
									var $119 = HEAP32[(($optwhere118) >> 2)];
									var $_neg = (((-($119))) & 4294967295);
									var $sub_ptr_sub = ((($sub_ptr_rhs_cast_neg) + ($sub_ptr_lhs_cast)) & 4294967295);
									var $sub119 = ((($sub_ptr_sub) + ($_neg)) & 4294967295);
									$match_chars = $sub119;;
								}
								$optindex = 0;;
								while (1) {
									var $120 = $optindex;
									var $121 = $longopts_addr;
									var $arrayidx121 = (($121 + 16 * $120) & 4294967295);
									var $name = (($arrayidx121) & 4294967295);
									var $122 = HEAP32[(($name) >> 2)];
									var $cmp122 = ((($122)) | 0) != 0;
									if (!($cmp122)) {
										__label__ = 49;
										break;
									}
									var $123 = $data_addr;
									var $optind123 = (($123 + 4) & 4294967295);
									var $124 = HEAP32[(($optind123) >> 2)];
									var $125 = $argv_addr;
									var $arrayidx124 = (($125 + 4 * $124) & 4294967295);
									var $126 = HEAP32[(($arrayidx124) >> 2)];
									var $127 = $data_addr;
									var $optwhere125 = (($127 + 16) & 4294967295);
									var $128 = HEAP32[(($optwhere125) >> 2)];
									var $add_ptr126 = (($126 + $128) & 4294967295);
									var $129 = $optindex;
									var $130 = $longopts_addr;
									var $arrayidx127 = (($130 + 16 * $129) & 4294967295);
									var $name128 = (($arrayidx127) & 4294967295);
									var $131 = HEAP32[(($name128) >> 2)];
									var $132 = $match_chars;
									var $call129 = _memcmp($add_ptr126, $131, $132);
									var $cmp130 = ((($call129)) | 0) == 0;
									if ($cmp130) {
										__label__ = 41;;
									} else {
										__label__ = 48;;
									}
									if (__label__ == 41) {
										var $133 = $match_chars;
										var $134 = $optindex;
										var $135 = $longopts_addr;
										var $arrayidx132 = (($135 + 16 * $134) & 4294967295);
										var $name133 = (($arrayidx132) & 4294967295);
										var $136 = HEAP32[(($name133) >> 2)];
										var $call134 = _strlen($136);
										var $cmp135 = ((($133)) | 0) == ((($call134)) | 0);
										if ($cmp135) {
											__label__ = 42;
											break;
										}
										var $138 = $longopt_match;
										var $cmp138 = ((($138)) | 0) < 0;
										if (!($cmp138)) {
											__label__ = 45;
											break;
										}
										var $139 = $optindex;
										$longopt_match = $139;;
									}
									var $157 = $optindex;
									var $inc156 = ((($157) + 1) & 4294967295);
									$optindex = $inc156;
									__label__ = 39;
									continue;
								}
								if (__label__ == 49) {
									var $_pr = $longopt_match;
									__lastLabel__ = 49;;
								} else if (__label__ == 42) {
									var $137 = $optindex;
									$longopt_match = $137;
									__lastLabel__ = 42;;
								} else if (__label__ == 45) {
									var $140 = $data_addr;
									var $opterr = (($140 + 8) & 4294967295);
									var $141 = HEAP32[(($opterr) >> 2)];
									var $tobool141 = ((($141)) | 0) != 0;
									if ($tobool141) {
										__label__ = 46;;
									} else {
										__label__ = 47;;
									}
									if (__label__ == 46) {
										var $142 = HEAP32[((__impure_ptr) >> 2)];
										var $_stderr = (($142 + 12) & 4294967295);
										var $143 = HEAP32[(($_stderr) >> 2)];
										var $144 = $argv_addr;
										var $arrayidx143 = (($144) & 4294967295);
										var $145 = HEAP32[(($arrayidx143) >> 2)];
										var $146 = $data_addr;
										var $optind144 = (($146 + 4) & 4294967295);
										var $147 = HEAP32[(($optind144) >> 2)];
										var $148 = $argv_addr;
										var $arrayidx145 = (($148 + 4 * $147) & 4294967295);
										var $149 = HEAP32[(($arrayidx145) >> 2)];
										var $150 = $longopt_match;
										var $151 = $longopts_addr;
										var $arrayidx146 = (($151 + 16 * $150) & 4294967295);
										var $name147 = (($arrayidx146) & 4294967295);
										var $152 = HEAP32[(($name147) >> 2)];
										var $153 = $optindex;
										var $154 = $longopts_addr;
										var $arrayidx148 = (($154 + 16 * $153) & 4294967295);
										var $name149 = (($arrayidx148) & 4294967295);
										var $155 = HEAP32[(($name149) >> 2)];
										var $call150 = _fprintf($143, ((__str2833) & 4294967295), allocate([$145, 0, 0, 0, $149, 0, 0, 0, $152, 0, 0, 0, $155, 0, 0, 0], ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STACK));;
									}
									var $156 = $data_addr;
									var $optopt152 = (($156 + 12) & 4294967295);
									HEAP32[(($optopt152) >> 2)] = 63;
									$retval = 63;
									__label__ = 96;
									break $if_then$$lor_lhs_false$2;
								}
								var $158 = __lastLabel__ == 49 ? $_pr : ($137);
								var $cmp157 = ((($158)) | 0) >= 0;
								if (!($cmp157)) {
									__label__ = 52;
									break $land_lhs_true77$$if_end162$41;
								}
								var $159 = $longopt_match;
								var $160 = $longopts_addr;
								var $arrayidx159 = (($160 + 16 * $159) & 4294967295);
								var $has_arg160 = (($arrayidx159 + 4) & 4294967295);
								var $161 = HEAP32[(($has_arg160) >> 2)];
								$has_arg = $161;;
							}
						} while (0);
						var $162 = $longopt_match;
						var $cmp163 = ((($162)) | 0) < 0;
						if ($cmp163) {
							__label__ = 53;;
						} else {
							__label__ = 63;;
						}
						$land_lhs_true164$$if_end217$73: do {
							if (__label__ == 53) {
								var $163 = $shortopts_addr;
								var $cmp165 = ((($163)) | 0) != 0;
								if (!($cmp165)) {
									__label__ = 63;
									break $land_lhs_true164$$if_end217$73;
								}
								var $164 = $shortopts_addr;
								var $165 = $data_addr;
								var $optwhere167 = (($165 + 16) & 4294967295);
								var $166 = HEAP32[(($optwhere167) >> 2)];
								var $167 = $data_addr;
								var $optind168 = (($167 + 4) & 4294967295);
								var $168 = HEAP32[(($optind168) >> 2)];
								var $169 = $argv_addr;
								var $arrayidx169 = (($169 + 4 * $168) & 4294967295);
								var $170 = HEAP32[(($arrayidx169) >> 2)];
								var $arrayidx170 = (($170 + $166) & 4294967295);
								var $171 = HEAP8[($arrayidx170)];
								var $conv171 = (tempInt = (($171)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								var $call172 = _strchr($164, $conv171);
								$cp = $call172;
								var $172 = $cp;
								var $cmp173 = ((($172)) | 0) == 0;
								if ($cmp173) {
									__label__ = 55;;
								} else {
									__label__ = 60;;
								}
								if (__label__ == 55) {
									var $173 = $data_addr;
									var $opterr175 = (($173 + 8) & 4294967295);
									var $174 = HEAP32[(($opterr175) >> 2)];
									var $tobool176 = ((($174)) | 0) != 0;
									if ($tobool176) {
										__label__ = 56;;
									} else {
										__label__ = 57;;
									}
									if (__label__ == 56) {
										var $175 = HEAP32[((__impure_ptr) >> 2)];
										var $_stderr178 = (($175 + 12) & 4294967295);
										var $176 = HEAP32[(($_stderr178) >> 2)];
										var $177 = $argv_addr;
										var $arrayidx179 = (($177) & 4294967295);
										var $178 = HEAP32[(($arrayidx179) >> 2)];
										var $179 = $data_addr;
										var $optwhere180 = (($179 + 16) & 4294967295);
										var $180 = HEAP32[(($optwhere180) >> 2)];
										var $181 = $data_addr;
										var $optind181 = (($181 + 4) & 4294967295);
										var $182 = HEAP32[(($optind181) >> 2)];
										var $183 = $argv_addr;
										var $arrayidx182 = (($183 + 4 * $182) & 4294967295);
										var $184 = HEAP32[(($arrayidx182) >> 2)];
										var $arrayidx183 = (($184 + $180) & 4294967295);
										var $185 = HEAP8[($arrayidx183)];
										var $conv184 = (tempInt = (($185)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $call185 = _fprintf($176, ((__str3834) & 4294967295), allocate([$178, 0, 0, 0, $conv184, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STACK));;
									}
									var $186 = $data_addr;
									var $optwhere187 = (($186 + 16) & 4294967295);
									var $187 = HEAP32[(($optwhere187) >> 2)];
									var $inc188 = ((($187) + 1) & 4294967295);
									HEAP32[(($optwhere187) >> 2)] = $inc188;
									var $188 = $data_addr;
									var $optwhere189 = (($188 + 16) & 4294967295);
									var $189 = HEAP32[(($optwhere189) >> 2)];
									var $190 = $data_addr;
									var $optind190 = (($190 + 4) & 4294967295);
									var $191 = HEAP32[(($optind190) >> 2)];
									var $192 = $argv_addr;
									var $arrayidx191 = (($192 + 4 * $191) & 4294967295);
									var $193 = HEAP32[(($arrayidx191) >> 2)];
									var $arrayidx192 = (($193 + $189) & 4294967295);
									var $194 = HEAP8[($arrayidx192)];
									var $conv193 = (tempInt = (($194)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp194 = ((($conv193)) | 0) == 0;
									if ($cmp194) {
										__label__ = 58;;
									} else {
										__label__ = 59;;
									}
									if (__label__ == 58) {
										var $195 = $data_addr;
										var $optind196 = (($195 + 4) & 4294967295);
										var $196 = HEAP32[(($optind196) >> 2)];
										var $inc197 = ((($196) + 1) & 4294967295);
										HEAP32[(($optind196) >> 2)] = $inc197;
										var $197 = $data_addr;
										var $optwhere198 = (($197 + 16) & 4294967295);
										HEAP32[(($optwhere198) >> 2)] = 1;;
									}
									var $198 = $data_addr;
									var $optopt200 = (($198 + 12) & 4294967295);
									HEAP32[(($optopt200) >> 2)] = 63;
									$retval = 63;
									__label__ = 96;
									break $if_then$$lor_lhs_false$2;
								} else if (__label__ == 60) {
									var $199 = $cp;
									var $arrayidx202 = (($199 + 1) & 4294967295);
									var $200 = HEAP8[($arrayidx202)];
									var $conv203 = (tempInt = (($200)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp204 = ((($conv203)) | 0) == 58;
									if ($cmp204) {
										__lastLabel__ = 60;
										__label__ = 61;;
									} else {
										__lastLabel__ = 60;
										__label__ = 62;;
									}
									if (__label__ == 61) {
										var $201 = $cp;
										var $arrayidx205 = (($201 + 2) & 4294967295);
										var $202 = HEAP8[($arrayidx205)];
										var $conv206 = (tempInt = (($202)), (tempInt >= 128 ? tempInt - 256 : tempInt));
										var $cmp207 = ((($conv206)) | 0) == 58;
										var $cond208 = ($cmp207) ? 2 : 1;
										__lastLabel__ = 61;;
									}
									var $cond209 = __lastLabel__ == 61 ? $cond208 : (0);
									$has_arg = $cond209;
									var $203 = $data_addr;
									var $optind210 = (($203 + 4) & 4294967295);
									var $204 = HEAP32[(($optind210) >> 2)];
									var $205 = $argv_addr;
									var $arrayidx211 = (($205 + 4 * $204) & 4294967295);
									var $206 = HEAP32[(($arrayidx211) >> 2)];
									var $207 = $data_addr;
									var $optwhere212 = (($207 + 16) & 4294967295);
									var $208 = HEAP32[(($optwhere212) >> 2)];
									var $add_ptr213 = (($206 + $208) & 4294967295);
									var $add_ptr214 = (($add_ptr213 + 1) & 4294967295);
									$possible_arg = $add_ptr214;
									var $209 = $cp;
									var $210 = HEAP8[($209)];
									var $conv215 = (tempInt = (($210)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $211 = $data_addr;
									var $optopt216 = (($211 + 12) & 4294967295);
									HEAP32[(($optopt216) >> 2)] = $conv215;;
								}
							}
						} while (0);
						$arg_next = 0;
						var $212 = $has_arg;
						if ($212 == 2) {
							__label__ = 64;;
						} else if ($212 == 1) {
							__label__ = 67;;
						} else {
							__label__ = 78;;
						}
						if (__label__ == 78) {
							var $254 = $longopt_match;
							var $cmp279 = ((($254)) | 0) < 0;
							var $255 = $data_addr;
							var $optwhere281 = (($255 + 16) & 4294967295);
							if ($cmp279) {
								__label__ = 79;;
							} else {
								__label__ = 81;;
							}
							$if_then280$$if_else292$91: do {
								if (__label__ == 79) {
									var $256 = HEAP32[(($optwhere281) >> 2)];
									var $inc282 = ((($256) + 1) & 4294967295);
									HEAP32[(($optwhere281) >> 2)] = $inc282;
									var $257 = $data_addr;
									var $optwhere283 = (($257 + 16) & 4294967295);
									var $258 = HEAP32[(($optwhere283) >> 2)];
									var $259 = $data_addr;
									var $optind284 = (($259 + 4) & 4294967295);
									var $260 = HEAP32[(($optind284) >> 2)];
									var $261 = $argv_addr;
									var $arrayidx285 = (($261 + 4 * $260) & 4294967295);
									var $262 = HEAP32[(($arrayidx285) >> 2)];
									var $arrayidx286 = (($262 + $258) & 4294967295);
									var $263 = HEAP8[($arrayidx286)];
									var $conv287 = (tempInt = (($263)), (tempInt >= 128 ? tempInt - 256 : tempInt));
									var $cmp288 = ((($conv287)) | 0) == 0;
									if (!($cmp288)) {
										__label__ = 82;
										break $if_then280$$if_else292$91;
									}
									var $264 = $data_addr;
									var $optwhere290 = (($264 + 16) & 4294967295);
									HEAP32[(($optwhere290) >> 2)] = 1;;
								} else if (__label__ == 81) {
									HEAP32[(($optwhere281) >> 2)] = 1;;
								}
							} while (0);
							var $265 = $data_addr;
							var $optarg295 = (($265) & 4294967295);
							HEAP32[(($optarg295) >> 2)] = 0;;
						} else if (__label__ == 64) {
							var $213 = $possible_arg;
							var $214 = HEAP8[($213)];
							var $conv219 = (tempInt = (($214)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp220 = ((($conv219)) | 0) == 61;
							if ($cmp220) {
								__label__ = 65;;
							} else {
								__label__ = 66;;
							}
							if (__label__ == 65) {
								var $215 = $possible_arg;
								var $incdec_ptr222 = (($215 + 1) & 4294967295);
								$possible_arg = $incdec_ptr222;;
							}
							var $216 = $possible_arg;
							var $217 = HEAP8[($216)];
							var $conv224 = (tempInt = (($217)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp225 = ((($conv224)) | 0) != 0;
							var $218 = $possible_arg;
							var $cond229 = ($cmp225) ? ($218) : 0;
							var $219 = $data_addr;
							var $optarg230 = (($219) & 4294967295);
							HEAP32[(($optarg230) >> 2)] = $cond229;
							var $220 = $data_addr;
							var $optwhere231 = (($220 + 16) & 4294967295);
							HEAP32[(($optwhere231) >> 2)] = 1;;
						} else if (__label__ == 67) {
							var $221 = $possible_arg;
							var $222 = HEAP8[($221)];
							var $conv233 = (tempInt = (($222)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp234 = ((($conv233)) | 0) == 61;
							if ($cmp234) {
								__label__ = 68;;
							} else {
								__label__ = 69;;
							}
							if (__label__ == 68) {
								var $223 = $possible_arg;
								var $incdec_ptr236 = (($223 + 1) & 4294967295);
								$possible_arg = $incdec_ptr236;;
							}
							var $224 = $possible_arg;
							var $225 = HEAP8[($224)];
							var $conv238 = (tempInt = (($225)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							var $cmp239 = ((($conv238)) | 0) != 0;
							if ($cmp239) {
								__label__ = 70;;
							} else {
								__label__ = 71;;
							}
							if (__label__ == 70) {
								var $226 = $possible_arg;
								var $227 = $data_addr;
								var $optarg241 = (($227) & 4294967295);
								HEAP32[(($optarg241) >> 2)] = $226;
								var $228 = $data_addr;
								var $optwhere242 = (($228 + 16) & 4294967295);
								HEAP32[(($optwhere242) >> 2)] = 1;;
							} else if (__label__ == 71) {
								var $229 = $data_addr;
								var $optind244 = (($229 + 4) & 4294967295);
								var $230 = HEAP32[(($optind244) >> 2)];
								var $add245 = ((($230) + 1) & 4294967295);
								var $231 = $argc_addr;
								var $cmp246 = ((($add245)) | 0) >= ((($231)) | 0);
								var $232 = $data_addr;
								if ($cmp246) {
									__label__ = 72;;
								} else {
									__label__ = 77;;
								}
								if (__label__ == 72) {
									var $opterr248 = (($232 + 8) & 4294967295);
									var $233 = HEAP32[(($opterr248) >> 2)];
									var $tobool249 = ((($233)) | 0) != 0;
									if ($tobool249) {
										__label__ = 73;;
									} else {
										__label__ = 76;;
									}
									if (__label__ == 73) {
										var $234 = HEAP32[((__impure_ptr) >> 2)];
										var $_stderr251 = (($234 + 12) & 4294967295);
										var $235 = HEAP32[(($_stderr251) >> 2)];
										var $236 = $argv_addr;
										var $arrayidx252 = (($236) & 4294967295);
										var $237 = HEAP32[(($arrayidx252) >> 2)];
										var $call253 = _fprintf($235, ((__str4835) & 4294967295), allocate([$237, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));
										var $238 = $longopt_match;
										var $cmp254 = ((($238)) | 0) >= 0;
										var $239 = HEAP32[((__impure_ptr) >> 2)];
										var $_stderr256 = (($239 + 12) & 4294967295);
										var $240 = HEAP32[(($_stderr256) >> 2)];
										if ($cmp254) {
											__label__ = 74;;
										} else {
											__label__ = 75;;
										}
										if (__label__ == 74) {
											var $241 = $longopt_match;
											var $242 = $longopts_addr;
											var $arrayidx257 = (($242 + 16 * $241) & 4294967295);
											var $name258 = (($arrayidx257) & 4294967295);
											var $243 = HEAP32[(($name258) >> 2)];
											var $call259 = _fprintf($240, ((__str5836) & 4294967295), allocate([$243, 0, 0, 0], ["i8*", 0, 0, 0], ALLOC_STACK));;
										} else if (__label__ == 75) {
											var $244 = $cp;
											var $245 = HEAP8[($244)];
											var $conv262 = (tempInt = (($245)), (tempInt >= 128 ? tempInt - 256 : tempInt));
											var $call263 = _fprintf($240, ((__str6837) & 4294967295), allocate([$conv262, 0, 0, 0], ["i32", 0, 0, 0], ALLOC_STACK));;
										}
									}
									var $246 = $data_addr;
									var $optind266 = (($246 + 4) & 4294967295);
									var $247 = HEAP32[(($optind266) >> 2)];
									var $inc267 = ((($247) + 1) & 4294967295);
									HEAP32[(($optind266) >> 2)] = $inc267;
									var $248 = $data_addr;
									var $optopt268 = (($248 + 12) & 4294967295);
									HEAP32[(($optopt268) >> 2)] = 58;
									$retval = 58;
									__label__ = 96;
									break $if_then$$lor_lhs_false$2;
								} else if (__label__ == 77) {
									var $optind270 = (($232 + 4) & 4294967295);
									var $249 = HEAP32[(($optind270) >> 2)];
									var $add271 = ((($249) + 1) & 4294967295);
									var $250 = $argv_addr;
									var $arrayidx272 = (($250 + 4 * $add271) & 4294967295);
									var $251 = HEAP32[(($arrayidx272) >> 2)];
									var $252 = $data_addr;
									var $optarg273 = (($252) & 4294967295);
									HEAP32[(($optarg273) >> 2)] = $251;
									$arg_next = 1;
									var $253 = $data_addr;
									var $optwhere274 = (($253 + 16) & 4294967295);
									HEAP32[(($optwhere274) >> 2)] = 1;;
								}
							}
						}
						var $266 = $ordering;
						var $cmp297 = ((($266)) | 0) == 0;
						if ($cmp297) {
							__label__ = 84;;
						} else {
							__label__ = 87;;
						}
						$land_lhs_true298$$if_else309$117: do {
							if (__label__ == 84) {
								var $267 = $data_addr;
								var $optwhere299 = (($267 + 16) & 4294967295);
								var $268 = HEAP32[(($optwhere299) >> 2)];
								var $cmp300 = ((($268)) | 0) == 1;
								if (!($cmp300)) {
									__label__ = 87;
									break $land_lhs_true298$$if_else309$117;
								}
								var $269 = $num_nonopts;
								var $cmp302 = ((($269)) | 0) != 0;
								if (!($cmp302)) {
									__label__ = 87;
									break $land_lhs_true298$$if_else309$117;
								}
								var $270 = $argv_addr;
								var $271 = $permute_from;
								var $add_ptr304 = (($270 + 4 * $271) & 4294967295);
								var $272 = $num_nonopts;
								var $273 = $arg_next;
								var $add305 = ((($273) + 1) & 4294967295);
								__ZL7permutePKPcii($add_ptr304, $272, $add305);
								var $274 = $permute_from;
								var $275 = $arg_next;
								var $add306 = ((($274) + 1) & 4294967295);
								var $add307 = ((($add306) + ($275)) & 4294967295);
								var $276 = $data_addr;
								var $optind308 = (($276 + 4) & 4294967295);
								HEAP32[(($optind308) >> 2)] = $add307;
								__label__ = 89;
								break $land_lhs_true298$$if_else309$117;
							}
						} while (0);
						$if_end318$$if_else309$121: do {
							if (__label__ == 87) {
								var $277 = $data_addr;
								var $optwhere310 = (($277 + 16) & 4294967295);
								var $278 = HEAP32[(($optwhere310) >> 2)];
								var $cmp311 = ((($278)) | 0) == 1;
								if (!($cmp311)) {
									__label__ = 89;
									break $if_end318$$if_else309$121;
								}
								var $279 = $data_addr;
								var $optind313 = (($279 + 4) & 4294967295);
								var $280 = HEAP32[(($optind313) >> 2)];
								var $281 = $arg_next;
								var $add314 = ((($280) + 1) & 4294967295);
								var $add315 = ((($add314) + ($281)) & 4294967295);
								var $282 = $data_addr;
								var $optind316 = (($282 + 4) & 4294967295);
								HEAP32[(($optind316) >> 2)] = $add315;;
							}
						} while (0);
						var $283 = $longopt_match;
						var $cmp319 = ((($283)) | 0) >= 0;
						if ($cmp319) {
							__label__ = 90;;
						} else {
							__label__ = 95;;
						}
						if (__label__ == 90) {
							var $284 = $longind_addr;
							var $cmp321 = ((($284)) | 0) != 0;
							if ($cmp321) {
								__label__ = 91;;
							} else {
								__label__ = 92;;
							}
							if (__label__ == 91) {
								var $285 = $longopt_match;
								var $286 = $longind_addr;
								HEAP32[(($286) >> 2)] = $285;;
							}
							var $287 = $longopt_match;
							var $288 = $longopts_addr;
							var $arrayidx324 = (($288 + 16 * $287) & 4294967295);
							var $flag = (($arrayidx324 + 8) & 4294967295);
							var $289 = HEAP32[(($flag) >> 2)];
							var $cmp325 = ((($289)) | 0) != 0;
							var $290 = $longopt_match;
							var $291 = $longopts_addr;
							var $arrayidx327 = (($291 + 16 * $290) & 4294967295);
							var $val = (($arrayidx327 + 12) & 4294967295);
							var $292 = HEAP32[(($val) >> 2)];
							if ($cmp325) {
								__label__ = 93;;
							} else {
								__label__ = 94;;
							}
							if (__label__ == 93) {
								var $293 = $longopt_match;
								var $294 = $longopts_addr;
								var $arrayidx328 = (($294 + 16 * $293) & 4294967295);
								var $flag329 = (($arrayidx328 + 8) & 4294967295);
								var $295 = HEAP32[(($flag329) >> 2)];
								HEAP32[(($295) >> 2)] = $292;
								$retval = 0;
								__label__ = 96;
								break $if_then$$lor_lhs_false$2;
							} else if (__label__ == 94) {
								$retval = $292;
								__label__ = 96;
								break $if_then$$lor_lhs_false$2;
							}
						} else if (__label__ == 95) {
							var $296 = $data_addr;
							var $optopt334 = (($296 + 12) & 4294967295);
							var $297 = HEAP32[(($optopt334) >> 2)];
							$retval = $297;
							__label__ = 96;
							break $if_then$$lor_lhs_false$2;
						}
					}
				}
			} while (0);
			if (__label__ == 6) {
				$retval = -1;;
			}
			var $298 = $retval;;
			return $298;
			return null;
		}

		function __ZL13write_globalsP11getopt_data($data) {;
			var __label__;
			var $data_addr;
			$data_addr = $data;
			var $0 = $data_addr;
			var $optarg = (($0) & 4294967295);
			var $1 = HEAP32[(($optarg) >> 2)];
			HEAP32[((_optarg) >> 2)] = $1;
			var $2 = $data_addr;
			var $optind = (($2 + 4) & 4294967295);
			var $3 = HEAP32[(($optind) >> 2)];
			HEAP32[((_optind) >> 2)] = $3;
			var $4 = $data_addr;
			var $opterr = (($4 + 8) & 4294967295);
			var $5 = HEAP32[(($opterr) >> 2)];
			HEAP32[((_opterr) >> 2)] = $5;
			var $6 = $data_addr;
			var $optopt = (($6 + 12) & 4294967295);
			var $7 = HEAP32[(($optopt) >> 2)];
			HEAP32[((_optopt) >> 2)] = $7;
			var $8 = $data_addr;
			var $optwhere = (($8 + 16) & 4294967295);
			var $9 = HEAP32[(($optwhere) >> 2)];
			HEAP32[((__ZL8optwhere) >> 2)] = $9;;
			return;
			return;
		}

		function _getopt_long($argc, $argv, $shortopts, $longopts, $longind) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 20;
			_memset(__stackBase__, 0, 20);
			var __label__;
			var $argc_addr;
			var $argv_addr;
			var $shortopts_addr;
			var $longopts_addr;
			var $longind_addr;
			var $data = __stackBase__;
			var $r;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$shortopts_addr = $shortopts;
			$longopts_addr = $longopts;
			$longind_addr = $longind;
			__ZL12read_globalsP11getopt_data($data);
			var $0 = $argc_addr;
			var $1 = $argv_addr;
			var $2 = $shortopts_addr;
			var $3 = $longopts_addr;
			var $4 = $longind_addr;
			var $call = __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($0, $1, $2, $3, $4, 0, $data);
			$r = $call;
			__ZL13write_globalsP11getopt_data($data);
			var $5 = $r;
			STACKTOP = __stackBase__;
			return $5;
			return null;
		}

		function _getopt_long_only($argc, $argv, $shortopts, $longopts, $longind) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 20;
			_memset(__stackBase__, 0, 20);
			var __label__;
			var $argc_addr;
			var $argv_addr;
			var $shortopts_addr;
			var $longopts_addr;
			var $longind_addr;
			var $data = __stackBase__;
			var $r;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$shortopts_addr = $shortopts;
			$longopts_addr = $longopts;
			$longind_addr = $longind;
			__ZL12read_globalsP11getopt_data($data);
			var $0 = $argc_addr;
			var $1 = $argv_addr;
			var $2 = $shortopts_addr;
			var $3 = $longopts_addr;
			var $4 = $longind_addr;
			var $call = __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($0, $1, $2, $3, $4, 1, $data);
			$r = $call;
			__ZL13write_globalsP11getopt_data($data);
			var $5 = $r;
			STACKTOP = __stackBase__;
			return $5;
			return null;
		}

		function ___getopt_r($argc, $argv, $optstring, $data) {;
			var __label__;
			var $argc_addr;
			var $argv_addr;
			var $optstring_addr;
			var $data_addr;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$optstring_addr = $optstring;
			$data_addr = $data;
			var $0 = $argc_addr;
			var $1 = $argv_addr;
			var $2 = $optstring_addr;
			var $3 = $data_addr;
			var $call = __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($0, $1, $2, 0, 0, 0, $3);;
			return $call;
			return null;
		}

		function ___getopt_long_r($argc, $argv, $shortopts, $longopts, $longind, $data) {;
			var __label__;
			var $argc_addr;
			var $argv_addr;
			var $shortopts_addr;
			var $longopts_addr;
			var $longind_addr;
			var $data_addr;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$shortopts_addr = $shortopts;
			$longopts_addr = $longopts;
			$longind_addr = $longind;
			$data_addr = $data;
			var $0 = $argc_addr;
			var $1 = $argv_addr;
			var $2 = $shortopts_addr;
			var $3 = $longopts_addr;
			var $4 = $longind_addr;
			var $5 = $data_addr;
			var $call = __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($0, $1, $2, $3, $4, 0, $5);;
			return $call;
			return null;
		}

		function ___getopt_long_only_r($argc, $argv, $shortopts, $longopts, $longind, $data) {;
			var __label__;
			var $argc_addr;
			var $argv_addr;
			var $shortopts_addr;
			var $longopts_addr;
			var $longind_addr;
			var $data_addr;
			$argc_addr = $argc;
			$argv_addr = $argv;
			$shortopts_addr = $shortopts;
			$longopts_addr = $longopts;
			$longind_addr = $longind;
			$data_addr = $data;
			var $0 = $argc_addr;
			var $1 = $argv_addr;
			var $2 = $shortopts_addr;
			var $3 = $longopts_addr;
			var $4 = $longind_addr;
			var $5 = $data_addr;
			var $call = __ZL15getopt_internaliPKPcPKcPK6optionPiiP11getopt_data($0, $1, $2, $3, $4, 1, $5);;
			return $call;
			return null;
		}

		function __ZL9is_optionPci($argv_element, $only) {;
			var __label__;
			var __lastLabel__ = null;
			var $argv_element_addr;
			var $only_addr;
			$argv_element_addr = $argv_element;
			$only_addr = $only;
			var $0 = $argv_element_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__lastLabel__ = 0;
				__label__ = 4;;
			} else {
				__lastLabel__ = 0;
				__label__ = 1;;
			}
			$lor_end$$lor_lhs_false$2: do {
				if (__label__ == 1) {
					var $1 = $argv_element_addr;
					var $arrayidx = (($1) & 4294967295);
					var $2 = HEAP8[($arrayidx)];
					var $conv = (tempInt = (($2)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp1 = ((($conv)) | 0) == 45;
					if ($cmp1) {
						__lastLabel__ = 1;
						__label__ = 4;
						break $lor_end$$lor_lhs_false$2;
					} else {
						__lastLabel__ = 1;;
					}
					var $3 = $only_addr;
					var $tobool = ((($3)) | 0) != 0;
					if ($tobool) {
						__lastLabel__ = 2;;
					} else {
						__lastLabel__ = 2;
						__label__ = 4;
						break $lor_end$$lor_lhs_false$2;
					}
					var $4 = $argv_element_addr;
					var $arrayidx2 = (($4) & 4294967295);
					var $5 = HEAP8[($arrayidx2)];
					var $conv3 = (tempInt = (($5)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					var $cmp4 = ((($conv3)) | 0) == 43;
					__lastLabel__ = 3;;
				}
			} while (0);
			var $6 = __lastLabel__ == 1 ? 1 : (__lastLabel__ == 0 ? 1 : (__lastLabel__ == 2 ? 0 : ($cmp4)));
			var $conv5 = ((($6)) & 1);;
			return $conv5;
			return null;
		}

		function __ZL7permutePKPcii($argv, $len1, $len2) {;
			var __label__;
			var $argv_addr;
			var $len1_addr;
			var $len2_addr;
			$argv_addr = $argv;
			$len1_addr = $len1;
			$len2_addr = $len2;
			var $0 = $argv_addr;
			var $1 = $len1_addr;
			__ZL21reverse_argv_elementsPPci($0, $1);
			var $2 = $argv_addr;
			var $3 = $len1_addr;
			var $4 = $len2_addr;
			var $add = ((($4) + ($3)) & 4294967295);
			__ZL21reverse_argv_elementsPPci($2, $add);
			var $5 = $argv_addr;
			var $6 = $len2_addr;
			__ZL21reverse_argv_elementsPPci($5, $6);;
			return;
			return;
		}

		function __ZL21reverse_argv_elementsPPci($argv, $num) {;
			var __label__;
			var $argv_addr;
			var $num_addr;
			var $i;
			var $tmp;
			$argv_addr = $argv;
			$num_addr = $num;
			$i = 0;
			var $0 = $i;
			var $1 = $num_addr;
			var $shr2 = ($1) >> 1;
			var $cmp3 = ((($0)) | 0) < ((($shr2)) | 0);
			if ($cmp3) {
				__label__ = 1;;
			} else {
				__label__ = 2;;
			}
			$for_body$$for_end$2: do {
				if (__label__ == 1) {
					while (1) {
						var $2 = $i;
						var $3 = $argv_addr;
						var $arrayidx = (($3 + 4 * $2) & 4294967295);
						var $4 = HEAP32[(($arrayidx) >> 2)];
						$tmp = $4;
						var $5 = $num_addr;
						var $6 = $i;
						var $_neg = (((-($6))) & 4294967295);
						var $sub = ((($5) - 1) & 4294967295);
						var $sub1 = ((($sub) + ($_neg)) & 4294967295);
						var $7 = $argv_addr;
						var $arrayidx2 = (($7 + 4 * $sub1) & 4294967295);
						var $8 = HEAP32[(($arrayidx2) >> 2)];
						var $9 = $i;
						var $10 = $argv_addr;
						var $arrayidx3 = (($10 + 4 * $9) & 4294967295);
						HEAP32[(($arrayidx3) >> 2)] = $8;
						var $11 = $tmp;
						var $12 = $num_addr;
						var $13 = $i;
						var $_neg1 = (((-($13))) & 4294967295);
						var $sub4 = ((($12) - 1) & 4294967295);
						var $sub5 = ((($sub4) + ($_neg1)) & 4294967295);
						var $14 = $argv_addr;
						var $arrayidx6 = (($14 + 4 * $sub5) & 4294967295);
						HEAP32[(($arrayidx6) >> 2)] = $11;
						var $15 = $i;
						var $inc = ((($15) + 1) & 4294967295);
						$i = $inc;
						var $16 = $i;
						var $17 = $num_addr;
						var $shr = ($17) >> 1;
						var $cmp = ((($16)) | 0) < ((($shr)) | 0);
						if ($cmp) {
							__label__ = 1;
							continue;
						} else {
							__label__ = 2;
							break $for_body$$for_end$2;
						}
					}
				}
			} while (0);;
			return;
			return;
		}

		function ___strtok_r($s, $delim, $lasts, $skip_leading_delim) {;
			var __label__;
			var $retval;
			var $s_addr;
			var $delim_addr;
			var $lasts_addr;
			var $skip_leading_delim_addr;
			var $spanp;
			var $c;
			var $sc;
			var $tok;
			$s_addr = $s;
			$delim_addr = $delim;
			$lasts_addr = $lasts;
			$skip_leading_delim_addr = $skip_leading_delim;
			var $0 = $s_addr;
			var $cmp = ((($0)) | 0) == 0;
			if ($cmp) {
				__label__ = 1;;
			} else {
				__label__ = 3;;
			}
			$land_lhs_true$$cont$2: do {
				if (__label__ == 1) {
					var $1 = $lasts_addr;
					var $2 = HEAP32[(($1) >> 2)];
					$s_addr = $2;
					var $cmp1 = ((($2)) | 0) == 0;
					if (!($cmp1)) {
						__label__ = 3;
						break $land_lhs_true$$cont$2;
					}
					$retval = 0;
					__label__ = 18;
					break $land_lhs_true$$cont$2;
				}
			} while (0);
			if (__label__ == 3) {
				$cont$6: while (1) {
					var $3 = $s_addr;
					var $incdec_ptr = (($3 + 1) & 4294967295);
					$s_addr = $incdec_ptr;
					var $4 = HEAP8[($3)];
					var $conv = (tempInt = (($4)), (tempInt >= 128 ? tempInt - 256 : tempInt));
					$c = $conv;
					var $5 = $delim_addr;
					$spanp = $5;;
					while (1) {
						var $6 = $spanp;
						var $incdec_ptr2 = (($6 + 1) & 4294967295);
						$spanp = $incdec_ptr2;
						var $7 = HEAP8[($6)];
						var $conv3 = (tempInt = (($7)), (tempInt >= 128 ? tempInt - 256 : tempInt));
						$sc = $conv3;
						var $cmp4 = ((($conv3)) | 0) != 0;
						var $8 = $c;
						if (!($cmp4)) {
							__label__ = 8;
							break $cont$6;
						}
						var $9 = $sc;
						var $cmp5 = ((($8)) | 0) == ((($9)) | 0);
						if ($cmp5) {
							__label__ = 6;
							break;
						} else {
							__label__ = 4;
							continue;
						}
					}
					var $10 = $skip_leading_delim_addr;
					var $tobool = ((($10)) | 0) != 0;
					if ($tobool) {
						__label__ = 3;
						continue $cont$6;
					} else {
						__label__ = 7;
						break $cont$6;
					}
				}
				if (__label__ == 8) {
					var $cmp9 = ((($8)) | 0) == 0;
					if ($cmp9) {
						__label__ = 9;;
					} else {
						__label__ = 10;;
					}
					if (__label__ == 9) {
						var $15 = $lasts_addr;
						HEAP32[(($15) >> 2)] = 0;
						$retval = 0;;
					} else if (__label__ == 10) {
						var $16 = $s_addr;
						var $add_ptr12 = (($16 + -1) & 4294967295);
						$tok = $add_ptr12;;
						$for_cond13$17: while (1) {
							var $17 = $s_addr;
							var $incdec_ptr14 = (($17 + 1) & 4294967295);
							$s_addr = $incdec_ptr14;
							var $18 = HEAP8[($17)];
							var $conv15 = (tempInt = (($18)), (tempInt >= 128 ? tempInt - 256 : tempInt));
							$c = $conv15;
							var $19 = $delim_addr;
							$spanp = $19;;
							while (1) {
								var $20 = $spanp;
								var $incdec_ptr16 = (($20 + 1) & 4294967295);
								$spanp = $incdec_ptr16;
								var $21 = HEAP8[($20)];
								var $conv17 = (tempInt = (($21)), (tempInt >= 128 ? tempInt - 256 : tempInt));
								$sc = $conv17;
								var $22 = $c;
								var $cmp18 = ((($conv17)) | 0) == ((($22)) | 0);
								if ($cmp18) {
									__label__ = 13;
									break $for_cond13$17;
								}
								var $28 = $sc;
								var $cmp26 = ((($28)) | 0) != 0;
								if ($cmp26) {
									__label__ = 12;
									continue;
								} else {
									__label__ = 11;
									continue $for_cond13$17;
								}
							}
						}
						var $23 = $c;
						var $cmp20 = ((($23)) | 0) == 0;
						if ($cmp20) {
							__label__ = 14;;
						} else {
							__label__ = 15;;
						}
						if (__label__ == 14) {
							$s_addr = 0;;
						} else if (__label__ == 15) {
							var $24 = $s_addr;
							var $arrayidx23 = (($24 + -1) & 4294967295);
							HEAP8[($arrayidx23)] = 0;;
						}
						var $25 = $s_addr;
						var $26 = $lasts_addr;
						HEAP32[(($26) >> 2)] = $25;
						var $27 = $tok;
						$retval = $27;;
					}
				} else if (__label__ == 7) {
					var $11 = $s_addr;
					var $12 = $lasts_addr;
					HEAP32[(($12) >> 2)] = $11;
					var $13 = $s_addr;
					var $arrayidx = (($13 + -1) & 4294967295);
					HEAP8[($arrayidx)] = 0;
					var $14 = $s_addr;
					var $add_ptr = (($14 + -1) & 4294967295);
					$retval = $add_ptr;;
				}
			}
			var $29 = $retval;;
			return $29;
			return null;
		}

		function _strtok_r($s, $delim, $lasts) {;
			var __label__;
			var $s_addr;
			var $delim_addr;
			var $lasts_addr;
			$s_addr = $s;
			$delim_addr = $delim;
			$lasts_addr = $lasts;
			var $0 = $s_addr;
			var $1 = $delim_addr;
			var $2 = $lasts_addr;
			var $call = ___strtok_r($0, $1, $2, 1);;
			return $call;
			return null;
		}

		function _strtok($s, $delim) {
			var __stackBase__ = STACKTOP;
			STACKTOP += 4;
			_memset(__stackBase__, 0, 4);
			var __label__;
			var $s_addr;
			var $delim_addr;
			var $chr = __stackBase__;
			$s_addr = $s;
			$delim_addr = $delim;
			var $0 = $s_addr;
			var $1 = $delim_addr;
			var $call = ___strtok_r($0, $1, $chr, 1);
			STACKTOP = __stackBase__;
			return $call;
			return null;
		}
		Module.callMain = function callMain(args) {
			var argc = args.length + 1;

			function pad() {
				for (var i = 0; i < 4 - 1; i++) {
					argv.push(0);
				}
			}
			var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC)];
			pad();
			for (var i = 0; i < argc - 1; i = i + 1) {
				argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
				pad();
			}
			argv.push(0);
			argv = allocate(argv, 'i32', ALLOC_STATIC);
			return _main(argc, argv, 0);
		}

		function run(args) {
			args = args || Module.arguments;
			_path_home = allocate(150, "i8", ALLOC_STATIC);
			_filetype = allocate(5, "i8", ALLOC_STATIC);
			_wavefile = allocate(200, "i8", ALLOC_STATIC);
			_uri_callback = allocate(1, "i32 (i32, i8*, i8*)*", ALLOC_STATIC);
			_phoneme_callback = allocate(1, "i32 (i8*)*", ALLOC_STATIC);
			_f_wave = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			_quiet = allocate(1, "i32", ALLOC_STATIC);
			_samples_total = allocate(1, "i32", ALLOC_STATIC);
			_samples_split = allocate(1, "i32", ALLOC_STATIC);
			_wavefile_count = allocate(1, "i32", ALLOC_STATIC);
			_end_of_sentence = allocate(1, "i32", ALLOC_STATIC);
			_voice_pcnt = allocate(60, "i16", ALLOC_STATIC);
			__ZZ13DisplayVoicesP7__sFILEPcE7genders = allocate([32, 77, 70, 32], "i8", ALLOC_STATIC);
			__str1 = allocate([80, 116, 121, 32, 76, 97, 110, 103, 117, 97, 103, 101, 32, 65, 103, 101, 47, 71, 101, 110, 100, 101, 114, 32, 86, 111, 105, 99, 101, 78, 97, 109, 101, 32, 32, 32, 32, 32, 32, 32, 70, 105, 108, 101, 32, 32, 32, 32, 32, 32, 32, 32, 79, 116, 104, 101, 114, 32, 76, 97, 110, 103, 115, 10, 0], "i8", ALLOC_STATIC);
			__str3 = allocate([37, 51, 100, 0], "i8", ALLOC_STATIC);
			__str4 = allocate([37, 50, 100, 32, 32, 37, 45, 49, 50, 115, 37, 115, 37, 99, 32, 32, 37, 45, 49, 55, 115, 32, 37, 45, 49, 49, 115, 32, 0], "i8", ALLOC_STATIC);
			__str5 = allocate([40, 37, 115, 32, 37, 100, 41, 0], "i8", ALLOC_STATIC);
			__ZZ4mainE12long_options = allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 256, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 258, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 264, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 265, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 266, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str6 = allocate([104, 101, 108, 112, 0], "i8", ALLOC_STATIC);
			__str7 = allocate([115, 116, 100, 105, 110, 0], "i8", ALLOC_STATIC);
			__str8 = allocate([99, 111, 109, 112, 105, 108, 101, 45, 100, 101, 98, 117, 103, 0], "i8", ALLOC_STATIC);
			__str9 = allocate([99, 111, 109, 112, 105, 108, 101, 0], "i8", ALLOC_STATIC);
			__str10 = allocate([112, 117, 110, 99, 116, 0], "i8", ALLOC_STATIC);
			__str11 = allocate([118, 111, 105, 99, 101, 115, 0], "i8", ALLOC_STATIC);
			__str12 = allocate([115, 116, 100, 111, 117, 116, 0], "i8", ALLOC_STATIC);
			__str13 = allocate([115, 112, 108, 105, 116, 0], "i8", ALLOC_STATIC);
			__str14 = allocate([112, 97, 116, 104, 0], "i8", ALLOC_STATIC);
			__str15 = allocate([112, 104, 111, 110, 111, 117, 116, 0], "i8", ALLOC_STATIC);
			__str16 = allocate([112, 104, 111, 0], "i8", ALLOC_STATIC);
			__str17 = allocate([105, 112, 97, 0], "i8", ALLOC_STATIC);
			__str18 = allocate([70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 114, 101, 97, 100, 32, 0], "i8", ALLOC_STATIC);
			__str19 = allocate([97, 58, 98, 58, 102, 58, 103, 58, 104, 107, 58, 108, 58, 112, 58, 113, 115, 58, 118, 58, 119, 58, 120, 88, 109, 122, 0], "i8", ALLOC_STATIC);
			__str21 = allocate([10, 115, 112, 101, 97, 107, 32, 116, 101, 120, 116, 45, 116, 111, 45, 115, 112, 101, 101, 99, 104, 58, 32, 37, 115, 32, 32, 32, 68, 97, 116, 97, 32, 97, 116, 58, 32, 37, 115, 10, 37, 115, 0], "i8", ALLOC_STATIC);
			__str23 = allocate([67, 97, 110, 39, 116, 32, 119, 114, 105, 116, 101, 32, 116, 111, 58, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str25 = allocate([37, 115, 118, 111, 105, 99, 101, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str27 = allocate([37, 115, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str28 = allocate([67, 97, 110, 39, 116, 32, 119, 114, 105, 116, 101, 32, 116, 111, 32, 111, 117, 116, 112, 117, 116, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 39, 0], "i8", ALLOC_STATIC);
			__str29 = allocate([45, 119, 32, 111, 112, 116, 105, 111, 110, 32, 109, 117, 115, 116, 32, 98, 101, 32, 117, 115, 101, 100, 32, 98, 101, 99, 97, 117, 115, 101, 32, 116, 104, 101, 32, 112, 114, 111, 103, 114, 97, 109, 32, 119, 97, 115, 32, 98, 117, 105, 108, 116, 32, 119, 105, 116, 104, 111, 117, 116, 32, 97, 32, 115, 111, 117, 110, 100, 32, 105, 110, 116, 101, 114, 102, 97, 99, 101, 10, 0], "i8", ALLOC_STATIC);
			__str30 = allocate([37, 115, 95, 37, 46, 50, 100, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZZL12OpenWaveFilePKciE8wave_hdr = allocate([82, 73, 70, 70, 36, 240, 255, 127, 87, 65, 86, 69, 102, 109, 116, 32, 16, 0, 0, 0, 1, 0, 1, 0, 9, 61, 0, 0, 18, 122, 0, 0, 2, 0, 16, 0, 100, 97, 116, 97, 0, 240, 255, 127], "i8", ALLOC_STATIC);
			__str32 = allocate([101, 110, 95, 85, 83, 46, 85, 84, 70, 45, 56, 0], "i8", ALLOC_STATIC);
			__str33 = allocate([85, 84, 70, 45, 56, 0], "i8", ALLOC_STATIC);
			__str35 = allocate([70, 97, 105, 108, 101, 100, 32, 116, 111, 32, 108, 111, 97, 100, 32, 101, 115, 112, 101, 97, 107, 45, 100, 97, 116, 97, 10, 0], "i8", ALLOC_STATIC);
			__str36 = allocate([87, 114, 111, 110, 103, 32, 118, 101, 114, 115, 105, 111, 110, 32, 111, 102, 32, 101, 115, 112, 101, 97, 107, 45, 100, 97, 116, 97, 32, 48, 120, 37, 120, 32, 40, 101, 120, 112, 101, 99, 116, 115, 32, 48, 120, 37, 120, 41, 32, 97, 116, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str37 = allocate([10, 115, 112, 101, 97, 107, 32, 91, 111, 112, 116, 105, 111, 110, 115, 93, 32, 91, 34, 60, 119, 111, 114, 100, 115, 62, 34, 93, 10, 10, 45, 102, 32, 60, 116, 101, 120, 116, 32, 102, 105, 108, 101, 62, 32, 32, 32, 84, 101, 120, 116, 32, 102, 105, 108, 101, 32, 116, 111, 32, 115, 112, 101, 97, 107, 10, 45, 45, 115, 116, 100, 105, 110, 32, 32, 32, 32, 82, 101, 97, 100, 32, 116, 101, 120, 116, 32, 105, 110, 112, 117, 116, 32, 102, 114, 111, 109, 32, 115, 116, 100, 105, 110, 32, 105, 110, 115, 116, 101, 97, 100, 32, 111, 102, 32, 97, 32, 102, 105, 108, 101, 10, 10, 73, 102, 32, 110, 101, 105, 116, 104, 101, 114, 32, 45, 102, 32, 110, 111, 114, 32, 45, 45, 115, 116, 100, 105, 110, 44, 32, 116, 104, 101, 110, 32, 60, 119, 111, 114, 100, 115, 62, 32, 97, 114, 101, 32, 115, 112, 111, 107, 101, 110, 44, 32, 111, 114, 32, 105, 102, 32, 110, 111, 110, 101, 32, 116, 104, 101, 110, 32, 116, 101, 120, 116, 10, 105, 115, 32, 115, 112, 111, 107, 101, 110, 32, 102, 114, 111, 109, 32, 115, 116, 100, 105, 110, 44, 32, 101, 97, 99, 104, 32, 108, 105, 110, 101, 32, 115, 101, 112, 97, 114, 97, 116, 101, 108, 121, 46, 10, 10, 45, 97, 32, 60, 105, 110, 116, 101, 103, 101, 114, 62, 10, 9, 32, 32, 32, 65, 109, 112, 108, 105, 116, 117, 100, 101, 44, 32, 48, 32, 116, 111, 32, 50, 48, 48, 44, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 49, 48, 48, 10, 45, 103, 32, 60, 105, 110, 116, 101, 103, 101, 114, 62, 10, 9, 32, 32, 32, 87, 111, 114, 100, 32, 103, 97, 112, 46, 32, 80, 97, 117, 115, 101, 32, 98, 101, 116, 119, 101, 101, 110, 32, 119, 111, 114, 100, 115, 44, 32, 117, 110, 105, 116, 115, 32, 111, 102, 32, 49, 48, 109, 83, 32, 97, 116, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 32, 115, 112, 101, 101, 100, 10, 45, 107, 32, 60, 105, 110, 116, 101, 103, 101, 114, 62, 10, 9, 32, 32, 32, 73, 110, 100, 105, 99, 97, 116, 101, 32, 99, 97, 112, 105, 116, 97, 108, 32, 108, 101, 116, 116, 101, 114, 115, 32, 119, 105, 116, 104, 58, 32, 49, 61, 115, 111, 117, 110, 100, 44, 32, 50, 61, 116, 104, 101, 32, 119, 111, 114, 100, 32, 34, 99, 97, 112, 105, 116, 97, 108, 115, 34, 44, 10, 9, 32, 32, 32, 104, 105, 103, 104, 101, 114, 32, 118, 97, 108, 117, 101, 115, 32, 105, 110, 100, 105, 99, 97, 116, 101, 32, 97, 32, 112, 105, 116, 99, 104, 32, 105, 110, 99, 114, 101, 97, 115, 101, 32, 40, 116, 114, 121, 32, 45, 107, 50, 48, 41, 46, 10, 45, 108, 32, 60, 105, 110, 116, 101, 103, 101, 114, 62, 10, 9, 32, 32, 32, 76, 105, 110, 101, 32, 108, 101, 110, 103, 116, 104, 46, 32, 73, 102, 32, 110, 111, 116, 32, 122, 101, 114, 111, 32, 40, 119, 104, 105, 99, 104, 32, 105, 115, 32, 116, 104, 101, 32, 100, 101, 102, 97, 117, 108, 116, 41, 44, 32, 99, 111, 110, 115, 105, 100, 101, 114, 10, 9, 32, 32, 32, 108, 105, 110, 101, 115, 32, 108, 101, 115, 115, 32, 116, 104, 97, 110, 32, 116, 104, 105, 115, 32, 108, 101, 110, 103, 116, 104, 32, 97, 115, 32, 101, 110, 100, 45, 111, 102, 45, 99, 108, 97, 117, 115, 101, 10, 45, 112, 32, 60, 105, 110, 116, 101, 103, 101, 114, 62, 10, 9, 32, 32, 32, 80, 105, 116, 99, 104, 32, 97, 100, 106, 117, 115, 116, 109, 101, 110, 116, 44, 32, 48, 32, 116, 111, 32, 57, 57, 44, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 53, 48, 10, 45, 115, 32, 60, 105, 110, 116, 101, 103, 101, 114, 62, 10, 9, 32, 32, 32, 83, 112, 101, 101, 100, 32, 105, 110, 32, 119, 111, 114, 100, 115, 32, 112, 101, 114, 32, 109, 105, 110, 117, 116, 101, 44, 32, 56, 48, 32, 116, 111, 32, 52, 53, 48, 44, 32, 100, 101, 102, 97, 117, 108, 116, 32, 105, 115, 32, 49, 55, 53, 10, 45, 118, 32, 60, 118, 111, 105, 99, 101, 32, 110, 97, 109, 101, 62, 10, 9, 32, 32, 32, 85, 115, 101, 32, 118, 111, 105, 99, 101, 32, 102, 105, 108, 101, 32, 111, 102, 32, 116, 104, 105, 115, 32, 110, 97, 109, 101, 32, 102, 114, 111, 109, 32, 101, 115, 112, 101, 97, 107, 45, 100, 97, 116, 97, 47, 118, 111, 105, 99, 101, 115, 10, 45, 119, 32, 60, 119, 97, 118, 101, 32, 102, 105, 108, 101, 32, 110, 97, 109, 101, 62, 10, 9, 32, 32, 32, 87, 114, 105, 116, 101, 32, 115, 112, 101, 101, 99, 104, 32, 116, 111, 32, 116, 104, 105, 115, 32, 87, 65, 86, 32, 102, 105, 108, 101, 44, 32, 114, 97, 116, 104, 101, 114, 32, 116, 104, 97, 110, 32, 115, 112, 101, 97, 107, 105, 110, 103, 32, 105, 116, 32, 100, 105, 114, 101, 99, 116, 108, 121, 10, 45, 98, 9, 32, 32, 32, 73, 110, 112, 117, 116, 32, 116, 101, 120, 116, 32, 101, 110, 99, 111, 100, 105, 110, 103, 44, 32, 49, 61, 85, 84, 70, 56, 44, 32, 50, 61, 56, 32, 98, 105, 116, 44, 32, 52, 61, 49, 54, 32, 98, 105, 116, 32, 10, 45, 109, 9, 32, 32, 32, 73, 110, 116, 101, 114, 112, 114, 101, 116, 32, 83, 83, 77, 76, 32, 109, 97, 114, 107, 117, 112, 44, 32, 97, 110, 100, 32, 105, 103, 110, 111, 114, 101, 32, 111, 116, 104, 101, 114, 32, 60, 32, 62, 32, 116, 97, 103, 115, 10, 45, 113, 9, 32, 32, 32, 81, 117, 105, 101, 116, 44, 32, 100, 111, 110, 39, 116, 32, 112, 114, 111, 100, 117, 99, 101, 32, 97, 110, 121, 32, 115, 112, 101, 101, 99, 104, 32, 40, 109, 97, 121, 32, 98, 101, 32, 117, 115, 101, 102, 117, 108, 32, 119, 105, 116, 104, 32, 45, 120, 41, 10, 45, 120, 9, 32, 32, 32, 87, 114, 105, 116, 101, 32, 112, 104, 111, 110, 101, 109, 101, 32, 109, 110, 101, 109, 111, 110, 105, 99, 115, 32, 116, 111, 32, 115, 116, 100, 111, 117, 116, 10, 45, 88, 9, 32, 32, 32, 87, 114, 105, 116, 101, 32, 112, 104, 111, 110, 101, 109, 101, 115, 32, 109, 110, 101, 109, 111, 110, 105, 99, 115, 32, 97, 110, 100, 32, 116, 114, 97, 110, 115, 108, 97, 116, 105, 111, 110, 32, 116, 114, 97, 99, 101, 32, 116, 111, 32, 115, 116, 100, 111, 117, 116, 10, 45, 122, 9, 32, 32, 32, 78, 111, 32, 102, 105, 110, 97, 108, 32, 115, 101, 110, 116, 101, 110, 99, 101, 32, 112, 97, 117, 115, 101, 32, 97, 116, 32, 116, 104, 101, 32, 101, 110, 100, 32, 111, 102, 32, 116, 104, 101, 32, 116, 101, 120, 116, 10, 45, 45, 99, 111, 109, 112, 105, 108, 101, 61, 60, 118, 111, 105, 99, 101, 32, 110, 97, 109, 101, 62, 10, 9, 32, 32, 32, 67, 111, 109, 112, 105, 108, 101, 32, 112, 114, 111, 110, 117, 110, 99, 105, 97, 116, 105, 111, 110, 32, 114, 117, 108, 101, 115, 32, 97, 110, 100, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 102, 114, 111, 109, 32, 116, 104, 101, 32, 99, 117, 114, 114, 101, 110, 116, 10, 9, 32, 32, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 46, 32, 60, 118, 111, 105, 99, 101, 32, 110, 97, 109, 101, 62, 32, 115, 112, 101, 99, 105, 102, 105, 101, 115, 32, 116, 104, 101, 32, 108, 97, 110, 103, 117, 97, 103, 101, 10, 45, 45, 105, 112, 97, 32, 32, 32, 32, 32, 32, 87, 114, 105, 116, 101, 32, 112, 104, 111, 110, 101, 109, 101, 115, 32, 116, 111, 32, 115, 116, 100, 111, 117, 116, 32, 117, 115, 105, 110, 103, 32, 73, 110, 116, 101, 114, 110, 97, 116, 105, 111, 110, 97, 108, 32, 80, 104, 111, 110, 101, 116, 105, 99, 32, 65, 108, 112, 104, 97, 98, 101, 116, 10, 45, 45, 112, 97, 116, 104, 61, 34, 60, 112, 97, 116, 104, 62, 34, 10, 9, 32, 32, 32, 83, 112, 101, 99, 105, 102, 105, 101, 115, 32, 116, 104, 101, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 32, 99, 111, 110, 116, 97, 105, 110, 105, 110, 103, 32, 116, 104, 101, 32, 101, 115, 112, 101, 97, 107, 45, 100, 97, 116, 97, 32, 100, 105, 114, 101, 99, 116, 111, 114, 121, 10, 45, 45, 112, 104, 111, 32, 32, 32, 32, 32, 32, 87, 114, 105, 116, 101, 32, 109, 98, 114, 111, 108, 97, 32, 112, 104, 111, 110, 101, 109, 101, 32, 100, 97, 116, 97, 32, 40, 46, 112, 104, 111, 41, 32, 116, 111, 32, 115, 116, 100, 111, 117, 116, 32, 111, 114, 32, 116, 111, 32, 116, 104, 101, 32, 102, 105, 108, 101, 32, 105, 110, 32, 45, 45, 112, 104, 111, 110, 111, 117, 116, 10, 45, 45, 112, 104, 111, 110, 111, 117, 116, 61, 34, 60, 102, 105, 108, 101, 110, 97, 109, 101, 62, 34, 10, 9, 32, 32, 32, 87, 114, 105, 116, 101, 32, 112, 104, 111, 110, 101, 109, 101, 32, 111, 117, 116, 112, 117, 116, 32, 102, 114, 111, 109, 32, 45, 120, 32, 45, 88, 32, 45, 45, 105, 112, 97, 32, 97, 110, 100, 32, 45, 45, 112, 104, 111, 32, 116, 111, 32, 116, 104, 105, 115, 32, 102, 105, 108, 101, 10, 45, 45, 112, 117, 110, 99, 116, 61, 34, 60, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 62, 34, 10, 9, 32, 32, 32, 83, 112, 101, 97, 107, 32, 116, 104, 101, 32, 110, 97, 109, 101, 115, 32, 111, 102, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 32, 100, 117, 114, 105, 110, 103, 32, 115, 112, 101, 97, 107, 105, 110, 103, 46, 32, 32, 73, 102, 10, 9, 32, 32, 32, 61, 60, 99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 62, 32, 105, 115, 32, 111, 109, 105, 116, 116, 101, 100, 44, 32, 97, 108, 108, 32, 112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 32, 105, 115, 32, 115, 112, 111, 107, 101, 110, 46, 10, 45, 45, 115, 112, 108, 105, 116, 61, 34, 60, 109, 105, 110, 117, 116, 101, 115, 62, 34, 10, 9, 32, 32, 32, 83, 116, 97, 114, 116, 115, 32, 97, 32, 110, 101, 119, 32, 87, 65, 86, 32, 102, 105, 108, 101, 32, 101, 118, 101, 114, 121, 32, 60, 109, 105, 110, 117, 116, 101, 115, 62, 46, 32, 32, 85, 115, 101, 100, 32, 119, 105, 116, 104, 32, 45, 119, 10, 45, 45, 115, 116, 100, 111, 117, 116, 32, 32, 32, 87, 114, 105, 116, 101, 32, 115, 112, 101, 101, 99, 104, 32, 111, 117, 116, 112, 117, 116, 32, 116, 111, 32, 115, 116, 100, 111, 117, 116, 10, 45, 45, 118, 111, 105, 99, 101, 115, 61, 60, 108, 97, 110, 103, 117, 97, 103, 101, 62, 10, 9, 32, 32, 32, 76, 105, 115, 116, 32, 116, 104, 101, 32, 97, 118, 97, 105, 108, 97, 98, 108, 101, 32, 118, 111, 105, 99, 101, 115, 32, 102, 111, 114, 32, 116, 104, 101, 32, 115, 112, 101, 99, 105, 102, 105, 101, 100, 32, 108, 97, 110, 103, 117, 97, 103, 101, 46, 10, 9, 32, 32, 32, 73, 102, 32, 60, 108, 97, 110, 103, 117, 97, 103, 101, 62, 32, 105, 115, 32, 111, 109, 105, 116, 116, 101, 100, 44, 32, 116, 104, 101, 110, 32, 108, 105, 115, 116, 32, 97, 108, 108, 32, 118, 111, 105, 99, 101, 115, 46, 10, 0], "i8", ALLOC_STATIC);
			__str38 = allocate([37, 115, 47, 101, 115, 112, 101, 97, 107, 45, 100, 97, 116, 97, 0], "i8", ALLOC_STATIC);
			__str39 = allocate([69, 83, 80, 69, 65, 75, 95, 68, 65, 84, 65, 95, 80, 65, 84, 72, 0], "i8", ALLOC_STATIC);
			__str40 = allocate([72, 79, 77, 69, 0], "i8", ALLOC_STATIC);
			__str41 = allocate([47, 117, 115, 114, 47, 115, 104, 97, 114, 101, 47, 101, 115, 112, 101, 97, 107, 45, 100, 97, 116, 97, 0], "i8", ALLOC_STATIC);
			__ZL5f_log = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			__str42 = allocate([117, 110, 112, 114, 0], "i8", ALLOC_STATIC);
			__str143 = allocate([119, 95, 97, 108, 116, 50, 0], "i8", ALLOC_STATIC);
			__str244 = allocate([119, 95, 97, 108, 116, 51, 0], "i8", ALLOC_STATIC);
			__str345 = allocate([119, 95, 97, 108, 116, 0], "i8", ALLOC_STATIC);
			__str446 = allocate([112, 95, 97, 108, 116, 50, 0], "i8", ALLOC_STATIC);
			__str547 = allocate([112, 95, 97, 108, 116, 51, 0], "i8", ALLOC_STATIC);
			__str648 = allocate([112, 95, 97, 108, 116, 0], "i8", ALLOC_STATIC);
			_mnem_rules = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str749 = allocate([36, 49, 0], "i8", ALLOC_STATIC);
			__str850 = allocate([36, 50, 0], "i8", ALLOC_STATIC);
			__str951 = allocate([36, 51, 0], "i8", ALLOC_STATIC);
			__str1052 = allocate([36, 52, 0], "i8", ALLOC_STATIC);
			__str1153 = allocate([36, 53, 0], "i8", ALLOC_STATIC);
			__str1254 = allocate([36, 54, 0], "i8", ALLOC_STATIC);
			__str1355 = allocate([36, 55, 0], "i8", ALLOC_STATIC);
			__str1456 = allocate([36, 117, 0], "i8", ALLOC_STATIC);
			__str1557 = allocate([36, 117, 49, 0], "i8", ALLOC_STATIC);
			__str1658 = allocate([36, 117, 50, 0], "i8", ALLOC_STATIC);
			__str1759 = allocate([36, 117, 51, 0], "i8", ALLOC_STATIC);
			__str1860 = allocate([36, 117, 43, 0], "i8", ALLOC_STATIC);
			__str1961 = allocate([36, 117, 49, 43, 0], "i8", ALLOC_STATIC);
			__str2062 = allocate([36, 117, 50, 43, 0], "i8", ALLOC_STATIC);
			__str2163 = allocate([36, 117, 51, 43, 0], "i8", ALLOC_STATIC);
			__str2264 = allocate([36, 112, 97, 117, 115, 101, 0], "i8", ALLOC_STATIC);
			__str2365 = allocate([36, 111, 110, 108, 121, 0], "i8", ALLOC_STATIC);
			__str2466 = allocate([36, 111, 110, 108, 121, 115, 0], "i8", ALLOC_STATIC);
			__str2567 = allocate([36, 115, 116, 114, 101, 110, 100, 0], "i8", ALLOC_STATIC);
			__str2668 = allocate([36, 115, 116, 114, 101, 110, 100, 50, 0], "i8", ALLOC_STATIC);
			__str2769 = allocate([36, 117, 110, 115, 116, 114, 101, 115, 115, 101, 110, 100, 0], "i8", ALLOC_STATIC);
			__str2870 = allocate([36, 97, 116, 101, 110, 100, 0], "i8", ALLOC_STATIC);
			__str2971 = allocate([36, 97, 116, 115, 116, 97, 114, 116, 0], "i8", ALLOC_STATIC);
			__str3072 = allocate([36, 97, 98, 98, 114, 101, 118, 0], "i8", ALLOC_STATIC);
			__str3173 = allocate([36, 115, 116, 101, 109, 0], "i8", ALLOC_STATIC);
			__str3274 = allocate([36, 100, 111, 117, 98, 108, 101, 0], "i8", ALLOC_STATIC);
			__str3375 = allocate([36, 97, 108, 116, 0], "i8", ALLOC_STATIC);
			__str3476 = allocate([36, 97, 108, 116, 49, 0], "i8", ALLOC_STATIC);
			__str3577 = allocate([36, 97, 108, 116, 50, 0], "i8", ALLOC_STATIC);
			__str3678 = allocate([36, 97, 108, 116, 51, 0], "i8", ALLOC_STATIC);
			__str3779 = allocate([36, 99, 111, 109, 98, 105, 110, 101, 0], "i8", ALLOC_STATIC);
			__str3880 = allocate([36, 100, 111, 116, 0], "i8", ALLOC_STATIC);
			__str3981 = allocate([36, 104, 97, 115, 100, 111, 116, 0], "i8", ALLOC_STATIC);
			__str4082 = allocate([36, 109, 97, 120, 51, 0], "i8", ALLOC_STATIC);
			__str4183 = allocate([36, 98, 114, 107, 0], "i8", ALLOC_STATIC);
			__str4284 = allocate([36, 116, 101, 120, 116, 0], "i8", ALLOC_STATIC);
			__str43 = allocate([36, 118, 101, 114, 98, 102, 0], "i8", ALLOC_STATIC);
			__str44 = allocate([36, 118, 101, 114, 98, 115, 102, 0], "i8", ALLOC_STATIC);
			__str45 = allocate([36, 110, 111, 117, 110, 102, 0], "i8", ALLOC_STATIC);
			__str46 = allocate([36, 112, 97, 115, 116, 102, 0], "i8", ALLOC_STATIC);
			__str47 = allocate([36, 118, 101, 114, 98, 0], "i8", ALLOC_STATIC);
			__str48 = allocate([36, 110, 111, 117, 110, 0], "i8", ALLOC_STATIC);
			__str49 = allocate([36, 112, 97, 115, 116, 0], "i8", ALLOC_STATIC);
			__str50 = allocate([36, 118, 101, 114, 98, 101, 120, 116, 101, 110, 100, 0], "i8", ALLOC_STATIC);
			__str51 = allocate([36, 99, 97, 112, 105, 116, 97, 108, 0], "i8", ALLOC_STATIC);
			__str52 = allocate([36, 97, 108, 108, 99, 97, 112, 115, 0], "i8", ALLOC_STATIC);
			__str53 = allocate([36, 97, 99, 99, 101, 110, 116, 0], "i8", ALLOC_STATIC);
			__str54 = allocate([36, 115, 101, 110, 116, 101, 110, 99, 101, 0], "i8", ALLOC_STATIC);
			__str55 = allocate([36, 63, 0], "i8", ALLOC_STATIC);
			__str56 = allocate([36, 116, 101, 120, 116, 109, 111, 100, 101, 0], "i8", ALLOC_STATIC);
			__str57 = allocate([36, 112, 104, 111, 110, 101, 109, 101, 109, 111, 100, 101, 0], "i8", ALLOC_STATIC);
			_mnem_flags = allocate([0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 66, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 68, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 72, 0, 0, 0, 0, 0, 0, 0, 73, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 35, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 40, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 45, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ22print_dictionary_flagsPjE3buf = allocate(20, "i8", ALLOC_STATIC);
			__str59 = allocate([37, 115, 32, 32, 48, 120, 37, 120, 47, 37, 120, 0], "i8", ALLOC_STATIC);
			__ZZ10DecodeRulePKciPciE6output = allocate(60, "i8", ALLOC_STATIC);
			__ZZ10DecodeRulePKciPciE7symbols = allocate([32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 38, 37, 43, 35, 83, 68, 90, 65, 76, 33, 32, 64, 63, 74, 78, 75, 86, 63, 84, 88, 63, 87], "i8", ALLOC_STATIC);
			__ZZ10DecodeRulePKciPciE10symbols_lg = allocate([65, 66, 67, 72, 70, 71, 89], "i8", ALLOC_STATIC);
			__str60 = allocate([32, 40, 0], "i8", ALLOC_STATIC);
			__str61 = allocate([101, 105, 112, 118, 100, 102, 113, 32, 116, 98, 97, 32, 0], "i8", ALLOC_STATIC);
			__str62 = allocate([37, 99, 37, 100, 0], "i8", ALLOC_STATIC);
			__str64 = allocate([37, 53, 100, 58, 9, 0], "i8", ALLOC_STATIC);
			__str65 = allocate([63, 37, 100, 32, 0], "i8", ALLOC_STATIC);
			__ZL11error_count = allocate(1, "i32", ALLOC_STATIC);
			__ZL21error_need_dictionary = allocate(1, "i32", ALLOC_STATIC);
			__ZL19letterGroupsDefined = allocate(26, "i8", ALLOC_STATIC);
			__ZL10debug_flag = allocate(1, "i32", ALLOC_STATIC);
			__str66 = allocate([37, 115, 37, 115, 95, 0], "i8", ALLOC_STATIC);
			__str67 = allocate([37, 115, 114, 117, 108, 101, 115, 46, 116, 120, 116, 0], "i8", ALLOC_STATIC);
			__str69 = allocate([37, 115, 114, 117, 108, 101, 115, 0], "i8", ALLOC_STATIC);
			__str71 = allocate([119, 98, 43, 0], "i8", ALLOC_STATIC);
			__str72 = allocate([37, 115, 37, 99, 116, 101, 109, 112, 0], "i8", ALLOC_STATIC);
			__str73 = allocate([85, 115, 105, 110, 103, 32, 112, 104, 111, 110, 101, 109, 101, 116, 97, 98, 108, 101, 58, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str74 = allocate([114, 111, 111, 116, 115, 0], "i8", ALLOC_STATIC);
			__str75 = allocate([108, 105, 115, 116, 0], "i8", ALLOC_STATIC);
			__str76 = allocate([108, 105, 115, 116, 120, 0], "i8", ALLOC_STATIC);
			__str77 = allocate([101, 120, 116, 114, 97, 0], "i8", ALLOC_STATIC);
			__str78 = allocate([67, 111, 109, 112, 105, 108, 105, 110, 103, 58, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__ZL7linenum = allocate(1, "i32", ALLOC_STATIC);
			__ZL10group_name = allocate(13, "i8", ALLOC_STATIC);
			__str79 = allocate([119, 98, 0], "i8", ALLOC_STATIC);
			__ZL9group3_ix = allocate(1, "i32", ALLOC_STATIC);
			__str81 = allocate([46, 76, 0], "i8", ALLOC_STATIC);
			__str82 = allocate([46, 114, 101, 112, 108, 97, 99, 101, 0], "i8", ALLOC_STATIC);
			__str83 = allocate([46, 103, 114, 111, 117, 112, 0], "i8", ALLOC_STATIC);
			__str84 = allocate([48, 120, 37, 120, 0], "i8", ALLOC_STATIC);
			__str85 = allocate([37, 53, 100, 58, 32, 71, 114, 111, 117, 112, 32, 110, 97, 109, 101, 32, 108, 111, 110, 103, 101, 114, 32, 116, 104, 97, 110, 32, 50, 32, 98, 121, 116, 101, 115, 32, 40, 85, 84, 70, 56, 41, 0], "i8", ALLOC_STATIC);
			__str89 = allocate([9, 37, 100, 32, 114, 117, 108, 101, 115, 44, 32, 37, 100, 32, 103, 114, 111, 117, 112, 115, 32, 40, 37, 100, 41, 10, 10, 0], "i8", ALLOC_STATIC);
			__ZL9rule_cond = allocate(80, "i8", ALLOC_STATIC);
			__ZL8rule_pre = allocate(80, "i8", ALLOC_STATIC);
			__ZL9rule_post = allocate(80, "i8", ALLOC_STATIC);
			__ZL10rule_match = allocate(80, "i8", ALLOC_STATIC);
			__ZL13rule_phonemes = allocate(80, "i8", ALLOC_STATIC);
			__str90 = allocate([37, 53, 100, 58, 32, 83, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 46, 32, 83, 112, 97, 99, 101, 32, 97, 102, 116, 101, 114, 32, 40, 10, 0], "i8", ALLOC_STATIC);
			__str91 = allocate([36, 103, 114, 111, 117, 112, 0], "i8", ALLOC_STATIC);
			__str92 = allocate([37, 53, 100, 58, 32, 83, 121, 110, 116, 97, 120, 32, 101, 114, 114, 111, 114, 10, 0], "i8", ALLOC_STATIC);
			__str93 = allocate([37, 53, 100, 58, 32, 66, 97, 100, 32, 112, 104, 111, 110, 101, 109, 101, 32, 91, 37, 99, 93, 32, 105, 110, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str94 = allocate([37, 53, 100, 58, 32, 87, 114, 111, 110, 103, 32, 105, 110, 105, 116, 105, 97, 108, 32, 108, 101, 116, 116, 101, 114, 115, 32, 39, 37, 115, 39, 32, 102, 111, 114, 32, 103, 114, 111, 117, 112, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str95 = allocate([37, 53, 100, 58, 32, 98, 97, 100, 32, 99, 111, 110, 100, 105, 116, 105, 111, 110, 32, 110, 117, 109, 98, 101, 114, 32, 63, 37, 100, 10, 0], "i8", ALLOC_STATIC);
			__ZZL16copy_rule_stringPcRiE6outbuf = allocate(20, "i8*", ALLOC_STATIC);
			__ZZL16copy_rule_stringPcRiE10next_state = allocate([2, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZL16copy_rule_stringPcRiE16lettergp_letters = allocate([0, 1, 2, 0, 0, 4, 5, 3, 6], "i8", ALLOC_STATIC);
			__str97 = allocate([37, 53, 100, 58, 32, 69, 120, 112, 101, 99, 116, 101, 100, 32, 50, 32, 100, 105, 103, 105, 116, 115, 32, 97, 102, 116, 101, 114, 32, 39, 76, 39, 10, 0], "i8", ALLOC_STATIC);
			__str98 = allocate([37, 53, 100, 58, 32, 76, 101, 116, 116, 101, 114, 32, 103, 114, 111, 117, 112, 32, 76, 37, 46, 50, 100, 32, 110, 111, 116, 32, 100, 101, 102, 105, 110, 101, 100, 10, 0], "i8", ALLOC_STATIC);
			__str99 = allocate([37, 53, 100, 58, 32, 36, 32, 99, 111, 109, 109, 97, 110, 100, 32, 110, 111, 116, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 10, 0], "i8", ALLOC_STATIC);
			__str100 = allocate([37, 53, 100, 58, 32, 69, 120, 112, 101, 99, 116, 101, 100, 32, 50, 32, 100, 105, 103, 105, 116, 115, 32, 97, 102, 116, 101, 114, 32, 39, 46, 76, 39, 10, 0], "i8", ALLOC_STATIC);
			__str101 = allocate([37, 53, 100, 58, 32, 108, 101, 116, 116, 101, 114, 103, 114, 111, 117, 112, 32, 111, 117, 116, 32, 111, 102, 32, 114, 97, 110, 103, 101, 32, 40, 48, 49, 45, 37, 46, 50, 100, 41, 10, 0], "i8", ALLOC_STATIC);
			__str102 = allocate([37, 53, 100, 58, 32, 108, 101, 116, 116, 101, 114, 103, 114, 111, 117, 112, 32, 76, 37, 46, 50, 100, 32, 105, 115, 32, 97, 108, 114, 101, 97, 100, 121, 32, 100, 101, 102, 105, 110, 101, 100, 10, 0], "i8", ALLOC_STATIC);
			__str103 = allocate([57, 0], "i8", ALLOC_STATIC);
			__ZL11hash_chains = allocate(4096, "i8*", ALLOC_STATIC);
			__ZL11hash_counts = allocate(4096, "i32", ALLOC_STATIC);
			__ZL9text_mode_b = allocate(1, "i1", ALLOC_STATIC);
			__str104 = allocate([37, 115, 37, 115, 46, 116, 120, 116, 0], "i8", ALLOC_STATIC);
			__str106 = allocate([67, 97, 110, 39, 116, 32, 97, 108, 108, 111, 99, 97, 116, 101, 32, 109, 101, 109, 111, 114, 121, 10, 0], "i8", ALLOC_STATIC);
			__str107 = allocate([9, 37, 100, 32, 101, 110, 116, 114, 105, 101, 115, 10, 0], "i8", ALLOC_STATIC);
			__ZZL12compile_linePcS_PiE10nullstring = allocate(1, "i8", ALLOC_STATIC);
			__str108 = allocate([95, 45, 0], "i8", ALLOC_STATIC);
			__str109 = allocate([37, 53, 100, 58, 32, 85, 110, 107, 110, 111, 119, 110, 32, 107, 101, 121, 119, 111, 114, 100, 58, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str110 = allocate([32, 0], "i8", ALLOC_STATIC);
			__str111 = allocate([37, 53, 100, 58, 32, 78, 101, 101, 100, 32, 116, 111, 32, 99, 111, 109, 112, 105, 108, 101, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 97, 103, 97, 105, 110, 10, 0], "i8", ALLOC_STATIC);
			__str112 = allocate([37, 53, 100, 58, 32, 66, 97, 100, 32, 112, 104, 111, 110, 101, 109, 101, 32, 91, 37, 99, 93, 32, 40, 48, 120, 37, 120, 41, 32, 105, 110, 58, 32, 37, 115, 32, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str113 = allocate([85, 43, 37, 120, 0], "i8", ALLOC_STATIC);
			__str114 = allocate([37, 53, 100, 58, 32, 84, 119, 111, 32, 109, 97, 110, 121, 32, 112, 97, 114, 116, 115, 32, 105, 110, 32, 97, 32, 109, 117, 108, 116, 105, 45, 119, 111, 114, 100, 32, 101, 110, 116, 114, 121, 58, 32, 37, 100, 10, 0], "i8", ALLOC_STATIC);
			__str115 = allocate([67, 97, 110, 39, 116, 32, 97, 99, 99, 101, 115, 115, 32, 40, 37, 115, 41, 32, 102, 105, 108, 101, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			_dictionary_skipwords = allocate(1, "i32", ALLOC_STATIC);
			_dictionary_name = allocate(40, "i8", ALLOC_STATIC);
			__ZL13remove_accent = allocate([97, 97, 97, 97, 97, 97, 97, 99, 101, 101, 101, 101, 105, 105, 105, 105, 100, 110, 111, 111, 111, 111, 111, 0, 111, 117, 117, 117, 117, 121, 116, 115, 97, 97, 97, 97, 97, 97, 97, 99, 101, 101, 101, 101, 105, 105, 105, 105, 100, 110, 111, 111, 111, 111, 111, 0, 111, 117, 117, 117, 117, 121, 116, 121, 97, 97, 97, 97, 97, 97, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 103, 103, 103, 103, 103, 103, 103, 103, 104, 104, 104, 104, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 105, 106, 106, 107, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 110, 110, 110, 110, 110, 110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 111, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115, 115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 119, 119, 121, 121, 121, 122, 122, 122, 122, 122, 122, 115, 98, 98, 98, 98, 0, 0, 111, 99, 99, 100, 100, 100, 100, 100, 101, 101, 101, 102, 102, 103, 103, 104, 105, 105, 107, 107, 108, 108, 109, 110, 110, 111, 111, 111, 111, 111, 112, 112, 121, 0, 0, 115, 115, 116, 116, 116, 116, 117, 117, 117, 118, 121, 121, 122, 122, 122, 122, 122, 122, 122, 0, 0, 0, 119, 116, 116, 116, 107, 100, 100, 100, 108, 108, 108, 110, 110, 110, 97, 97, 105, 105, 111, 111, 117, 117, 117, 117, 117, 117, 117, 117, 117, 117, 101, 97, 97, 97, 97, 97, 97, 103, 103, 103, 103, 107, 107, 111, 111, 111, 111, 122, 122, 106, 100, 100, 100, 103, 103, 119, 119, 110, 110, 97, 97, 97, 97, 111, 111, 97, 97, 97, 97, 101, 101, 101, 101, 105, 105, 105, 105, 111, 111, 111, 111, 114, 114, 114, 114, 117, 117, 117, 117, 115, 115, 116, 116, 121, 121, 104, 104, 110, 100, 111, 111, 122, 122, 97, 97, 101, 101, 111, 111, 111, 111, 111, 111, 111, 111, 121, 121, 108, 110, 116, 106, 100, 113, 97, 99, 99, 108, 116, 115, 122, 0, 0, 98, 117, 118, 101, 101, 106, 106, 113, 113, 114, 114, 121, 121, 97, 97, 97, 98, 111, 99, 100, 100, 101, 101, 101, 101, 101, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__str116 = allocate([37, 115, 37, 99, 37, 115, 95, 100, 105, 99, 116, 0], "i8", ALLOC_STATIC);
			__str2118 = allocate([67, 97, 110, 39, 116, 32, 114, 101, 97, 100, 32, 100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 32, 102, 105, 108, 101, 58, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str3119 = allocate([69, 109, 112, 116, 121, 32, 95, 100, 105, 99, 116, 32, 102, 105, 108, 101, 58, 32, 39, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str4120 = allocate([66, 97, 100, 32, 100, 97, 116, 97, 58, 32, 39, 37, 115, 39, 32, 40, 37, 120, 32, 108, 101, 110, 103, 116, 104, 61, 37, 120, 41, 10, 0], "i8", ALLOC_STATIC);
			__str5121 = allocate([69, 114, 114, 111, 114, 32, 105, 110, 32, 37, 115, 95, 114, 117, 108, 101, 115, 44, 32, 110, 111, 32, 100, 101, 102, 97, 117, 108, 116, 32, 114, 117, 108, 101, 32, 103, 114, 111, 117, 112, 10, 0], "i8", ALLOC_STATIC);
			__str7123 = allocate([61, 61, 44, 44, 39, 42, 32, 32, 0], "i8", ALLOC_STATIC);
			_ipa1 = allocate([32, 0, 33, 0, 34, 0, 688, 0, 36, 0, 37, 0, 230, 0, 712, 0, 40, 0, 638, 0, 42, 0, 43, 0, 716, 0, 45, 0, 46, 0, 47, 0, 594, 0, 49, 0, 50, 0, 604, 0, 52, 0, 53, 0, 54, 0, 55, 0, 629, 0, 57, 0, 720, 0, 690, 0, 60, 0, 61, 0, 62, 0, 660, 0, 601, 0, 593, 0, 946, 0, 231, 0, 240, 0, 603, 0, 70, 0, 610, 0, 295, 0, 618, 0, 607, 0, 75, 0, 76, 0, 625, 0, 331, 0, 596, 0, 934, 0, 611, 0, 640, 0, 643, 0, 952, 0, 650, 0, 652, 0, 339, 0, 967, 0, 248, 0, 658, 0, 810, 0, 92, 0, 93, 0, 94, 0, 95, 0, 96, 0, 97, 0, 98, 0, 99, 0, 100, 0, 101, 0, 102, 0, 609, 0, 104, 0, 105, 0, 106, 0, 107, 0, 108, 0, 109, 0, 110, 0, 111, 0, 112, 0, 113, 0, 114, 0, 115, 0, 116, 0, 117, 0, 118, 0, 119, 0, 120, 0, 121, 0, 122, 0, 123, 0, 124, 0, 125, 0, 771, 0, 127, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__str8124 = allocate([61, 61, 44, 44, 39, 39, 0], "i8", ALLOC_STATIC);
			__str9125 = allocate([40, 37, 115, 41, 0], "i8", ALLOC_STATIC);
			__ZL15stress_phonemes = allocate([3, 2, 4, 5, 6, 7, 26], "i8", ALLOC_STATIC);
			__ZZ13SetWordStressP10TranslatorPcPjiiE15consonant_types = allocate([0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZZ13SetWordStressP10TranslatorPcPjiiE8guess_ru = allocate([0, 0, 1, 1, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10, 11], "i8", ALLOC_STATIC);
			__ZZ13SetWordStressP10TranslatorPcPjiiE10guess_ru_v = allocate([0, 0, 1, 1, 2, 2, 3, 3, 4, 5, 6, 7, 7, 8, 9, 10], "i8", ALLOC_STATIC);
			__ZZ13SetWordStressP10TranslatorPcPjiiE10guess_ru_t = allocate([0, 0, 1, 2, 3, 3, 3, 4, 5, 6, 7, 7, 7, 8, 9, 10], "i8", ALLOC_STATIC);
			__ZZ14TranslateRulesP10TranslatorPcS1_iS1_iPjE9str_pause = allocate([11, 0], "i8", ALLOC_STATIC);
			__str10126 = allocate([85, 110, 112, 114, 111, 110, 111, 117, 110, 99, 97, 98, 108, 101, 63, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str11127 = allocate([84, 114, 97, 110, 115, 108, 97, 116, 101, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__ZL13diereses_list = allocate([228, 0, 235, 0, 239, 0, 246, 0, 252, 0, 255, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ14LookupDictListP10TranslatorPPcS1_PjiP8WORD_TABE16word_replacement = allocate(160, "i8", ALLOC_STATIC);
			__str15131 = allocate([37, 115, 32, 0], "i8", ALLOC_STATIC);
			__str16132 = allocate([82, 101, 112, 108, 97, 99, 101, 58, 32, 37, 115, 32, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__ZZ11LookupFlagsP10TranslatorPKcE5flags = allocate(8, "i32", ALLOC_STATIC);
			__ZZ12RemoveEndingP10TranslatorPciS1_E6ending = allocate(12, "i8", ALLOC_STATIC);
			__ZZ12RemoveEndingP10TranslatorPciS1_E16add_e_exceptions = allocate(8, "i8*", ALLOC_STATIC);
			__str17133 = allocate([105, 111, 110, 0], "i8", ALLOC_STATIC);
			__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions = allocate(32, "i8*", ALLOC_STATIC);
			__str18134 = allocate([99, 0], "i8", ALLOC_STATIC);
			__str19135 = allocate([114, 115, 0], "i8", ALLOC_STATIC);
			__str20136 = allocate([105, 114, 0], "i8", ALLOC_STATIC);
			__str21137 = allocate([117, 114, 0], "i8", ALLOC_STATIC);
			__str22138 = allocate([97, 116, 104, 0], "i8", ALLOC_STATIC);
			__str23139 = allocate([110, 115, 0], "i8", ALLOC_STATIC);
			__str24140 = allocate([117, 0], "i8", ALLOC_STATIC);
			__str25141 = allocate([97, 100, 100, 32, 101, 10, 0], "i8", ALLOC_STATIC);
			__str27143 = allocate([101, 115, 0], "i8", ALLOC_STATIC);
			__str28144 = allocate([70, 108, 97, 103, 115, 58, 32, 32, 37, 115, 32, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str29145 = allocate([70, 111, 117, 110, 100, 58, 32, 39, 37, 115, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str30146 = allocate([70, 111, 117, 110, 100, 58, 32, 39, 37, 115, 0], "i8", ALLOC_STATIC);
			__str31147 = allocate([39, 32, 91, 37, 115, 93, 32, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__ZZL9MatchRuleP10TranslatorPPcS1_iS1_P11MatchRecordiiE4best = allocate(16, ["i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STATIC);
			__str32148 = allocate([37, 51, 100, 9, 37, 115, 32, 91, 37, 115, 93, 10, 0], "i8", ALLOC_STATIC);
			__str34150 = allocate([66, 97, 100, 32, 114, 117, 108, 101, 115, 32, 100, 97, 116, 97, 32, 105, 110, 32, 39, 37, 115, 95, 100, 105, 99, 116, 39, 32, 97, 116, 32, 48, 120, 37, 120, 10, 0], "i8", ALLOC_STATIC);
			_env_fall = allocate([255, 253, 250, 248, 246, 244, 242, 240, 238, 236, 234, 232, 230, 228, 226, 224, 222, 220, 218, 216, 214, 212, 210, 208, 206, 204, 202, 200, 198, 196, 194, 192, 190, 188, 186, 184, 182, 180, 178, 176, 174, 172, 170, 168, 166, 164, 162, 160, 158, 156, 154, 152, 150, 148, 146, 144, 142, 140, 138, 136, 134, 132, 130, 128, 126, 124, 122, 120, 118, 116, 114, 112, 110, 108, 106, 104, 102, 100, 98, 96, 94, 92, 90, 88, 86, 84, 82, 80, 78, 76, 74, 72, 70, 68, 66, 64, 62, 60, 58, 56, 54, 52, 50, 48, 46, 44, 42, 40, 38, 36, 34, 32, 30, 28, 26, 24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 2, 0], "i8", ALLOC_STATIC);
			_env_rise = allocate([0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 253, 255], "i8", ALLOC_STATIC);
			_env_frise = allocate([255, 244, 234, 224, 214, 204, 195, 186, 177, 168, 159, 151, 143, 135, 127, 120, 113, 106, 99, 92, 86, 80, 74, 68, 63, 57, 52, 47, 43, 38, 34, 30, 26, 23, 19, 16, 13, 11, 8, 6, 4, 2, 1, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 7, 8, 10, 12, 14, 16, 19, 21, 23, 26, 29, 31, 34, 37, 40, 44, 46, 48, 50, 52, 54, 57, 59, 61, 64, 66, 69, 71, 74, 76, 79, 81, 84, 87, 90, 93, 95, 98, 101, 104, 107, 110, 113, 116, 120, 123, 126, 129, 133, 136, 139, 143, 146, 150, 153, 157, 160, 164, 168, 172, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 224], "i8", ALLOC_STATIC);
			__ZL11env_r_frise = allocate([207, 204, 201, 198, 195, 192, 189, 185, 180, 176, 171, 167, 162, 156, 151, 146, 140, 134, 129, 123, 117, 111, 105, 99, 93, 87, 80, 74, 68, 62, 56, 51, 45, 39, 34, 28, 23, 18, 13, 8, 4, 2, 2, 1, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 7, 8, 10, 12, 13, 15, 18, 20, 22, 25, 27, 30, 33, 36, 39, 42, 45, 48, 52, 54, 56, 58, 60, 63, 65, 67, 70, 72, 75, 77, 80, 82, 85, 88, 90, 93, 96, 99, 102, 105, 108, 111, 114, 117, 120, 123, 126, 129, 133, 136, 139, 143, 146, 150, 153, 157, 160, 164, 168, 172, 175, 179, 183, 187, 191, 195, 199, 203, 207, 211, 215, 219, 224], "i8", ALLOC_STATIC);
			__ZL10env_frise2 = allocate([255, 249, 244, 238, 233, 228, 223, 218, 213, 208, 203, 198, 193, 189, 184, 179, 175, 170, 166, 161, 157, 153, 149, 144, 140, 136, 132, 128, 125, 121, 117, 113, 110, 106, 103, 99, 96, 93, 89, 86, 83, 80, 77, 74, 71, 68, 65, 62, 60, 57, 55, 52, 50, 47, 45, 43, 40, 38, 36, 34, 32, 30, 28, 26, 25, 23, 21, 20, 18, 17, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 24, 26, 28, 30, 32], "i8", ALLOC_STATIC);
			__ZL12env_r_frise2 = allocate([208, 206, 205, 204, 202, 200, 199, 197, 195, 193, 192, 189, 187, 184, 181, 179, 176, 173, 170, 167, 163, 160, 157, 153, 150, 146, 143, 139, 135, 132, 128, 124, 120, 116, 112, 109, 105, 101, 97, 93, 89, 85, 81, 77, 74, 70, 66, 62, 59, 55, 52, 49, 47, 45, 42, 40, 38, 36, 34, 32, 30, 28, 26, 25, 23, 21, 20, 18, 17, 15, 14, 13, 12, 10, 9, 8, 7, 6, 5, 5, 4, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 18, 19, 21, 23, 24, 26, 28, 30, 32], "i8", ALLOC_STATIC);
			__ZL12env_risefall = allocate([152, 153, 153, 154, 156, 157, 159, 161, 164, 167, 169, 172, 176, 179, 182, 186, 190, 193, 197, 201, 205, 209, 212, 216, 220, 223, 227, 230, 234, 237, 240, 242, 245, 247, 249, 251, 252, 253, 254, 254, 255, 255, 255, 255, 255, 255, 254, 253, 251, 250, 248, 246, 243, 241, 238, 236, 233, 230, 228, 224, 221, 218, 215, 211, 208, 204, 200, 196, 192, 188, 184, 180, 176, 172, 167, 163, 159, 154, 150, 145, 141, 136, 132, 127, 123, 118, 114, 109, 105, 101, 96, 92, 88, 84, 80, 76, 72, 68, 64, 60, 57, 53, 50, 47, 43, 40, 38, 35, 32, 29, 26, 23, 21, 18, 15, 13, 10, 8, 7, 5, 3, 2, 1, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL13env_fallrise3 = allocate([254, 255, 255, 255, 255, 255, 254, 253, 252, 250, 248, 246, 244, 241, 238, 235, 232, 229, 225, 222, 218, 214, 210, 205, 201, 196, 191, 186, 182, 176, 171, 166, 161, 156, 150, 145, 139, 134, 128, 123, 117, 111, 106, 100, 95, 89, 84, 79, 73, 68, 63, 58, 53, 48, 43, 38, 34, 29, 25, 21, 17, 13, 10, 7, 4, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 4, 5, 7, 9, 11, 13, 16, 18, 21, 24, 27, 30, 34, 37, 41, 45, 49, 53, 58, 62, 67, 72, 76, 81, 87, 91, 94, 98, 101, 104, 107, 110, 113, 116, 118, 120, 123, 124, 126, 128, 129, 130, 131, 131, 132, 132, 131, 131, 130, 129], "i8", ALLOC_STATIC);
			__ZL13env_fallrise4 = allocate([114, 114, 113, 113, 112, 111, 109, 108, 106, 104, 102, 100, 97, 95, 92, 90, 87, 84, 81, 78, 75, 72, 69, 66, 63, 59, 56, 53, 50, 47, 44, 41, 38, 35, 32, 29, 27, 24, 22, 20, 18, 16, 14, 12, 11, 10, 9, 8, 7, 7, 7, 7, 7, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 9, 10, 12, 13, 15, 16, 18, 20, 22, 24, 27, 29, 32, 35, 38, 41, 44, 47, 51, 55, 59, 63, 67, 71, 76, 81, 86, 91, 96, 101, 106, 111, 116, 121, 127, 132, 137, 143, 149, 155, 161, 167, 173, 179, 186, 192, 199, 206, 213, 220, 227, 234, 241, 245, 247, 250, 252, 253, 254, 255, 255], "i8", ALLOC_STATIC);
			__ZL9env_fall2 = allocate([254, 254, 253, 253, 252, 251, 251, 250, 250, 249, 248, 248, 247, 247, 246, 246, 245, 244, 244, 243, 243, 242, 242, 241, 240, 240, 239, 238, 238, 237, 236, 235, 234, 234, 233, 232, 231, 230, 229, 228, 227, 226, 225, 224, 222, 221, 220, 219, 217, 216, 214, 213, 211, 210, 208, 206, 204, 203, 201, 199, 197, 195, 192, 190, 188, 185, 183, 181, 178, 175, 173, 170, 167, 164, 161, 158, 154, 151, 148, 144, 141, 137, 133, 129, 125, 121, 117, 113, 109, 104, 100, 97, 94, 91, 87, 84, 81, 77, 74, 70, 67, 64, 60, 57, 53, 50, 46, 42, 39, 35, 31, 28, 24, 20, 17, 13, 11, 9, 7, 5, 4, 3, 2, 1, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL9env_rise2 = allocate([0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 29, 31, 32, 34, 35, 37, 38, 40, 41, 43, 45, 47, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 71, 73, 75, 78, 80, 82, 85, 87, 90, 93, 95, 98, 101, 103, 106, 109, 112, 115, 118, 121, 124, 127, 130, 134, 137, 140, 144, 147, 150, 154, 157, 160, 163, 166, 169, 172, 175, 178, 181, 184, 187, 190, 193, 196, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 228, 231, 233, 236, 238, 240, 242, 244, 246, 248, 250, 251, 253], "i8", ALLOC_STATIC);
			__ZL16env_risefallrise = allocate([127, 127, 127, 128, 129, 131, 132, 135, 137, 140, 143, 146, 150, 153, 157, 161, 165, 170, 174, 178, 183, 187, 192, 197, 201, 205, 210, 214, 218, 222, 226, 230, 234, 237, 240, 243, 245, 248, 250, 251, 252, 253, 254, 254, 253, 252, 251, 249, 247, 244, 240, 236, 231, 226, 220, 213, 206, 198, 189, 180, 169, 158, 146, 136, 130, 125, 119, 114, 108, 102, 96, 90, 84, 78, 73, 66, 60, 55, 50, 45, 40, 36, 31, 27, 24, 20, 17, 14, 12, 9, 7, 6, 5, 4, 4, 4, 4, 5, 6, 8, 10, 13, 16, 20, 24, 29, 35, 41, 47, 55, 62, 71, 80, 90, 100, 112, 124, 131, 133, 136, 138, 140, 142, 143, 145, 146, 147, 147], "i8", ALLOC_STATIC);
			_envelope_data = allocate(80, "i8*", ALLOC_STATIC);
			__ZL18tone_nucleus_table = allocate([0, 64, 8, 0, 70, 18, 0, 0, 0, 0, 0, 0, 24, 12, 0, undef, 4, 80, 18, 6, 78, 22, 0, 0, 0, 0, 0, 0, 34, 52, 0, undef, 4, 88, 22, 6, 82, 22, 0, 0, 0, 0, 0, 0, 34, 64, 0, undef, 0, 92, 8, 0, 92, 80, 0, 0, 0, 0, 0, 0, 76, 8, 1, undef, 0, 86, 4, 0, 94, 66, 0, 0, 0, 0, 0, 0, 34, 10, 0, undef, 0, 62, 10, 0, 62, 20, 0, 0, 0, 0, 0, 0, 28, 16, 0, undef, 4, 68, 18, 6, 68, 22, 0, 0, 0, 0, 0, 0, 30, 44, 0, undef, 6, 64, 16, 0, 66, 32, 0, 0, 0, 0, 0, 0, 32, 18, 0, undef, 2, 68, 46, 0, 42, 32, 0, 0, 0, 0, 0, 0, 46, 58, 0, undef, 4, 78, 24, 6, 72, 22, 0, 0, 0, 0, 0, 0, 42, 52, 0, undef, 4, 88, 34, 0, 64, 32, 0, 0, 0, 0, 0, 0, 46, 82, 0, undef, 0, 56, 12, 0, 56, 20, 0, 0, 0, 0, 0, 0, 24, 12, 0, undef, 0, 70, 18, 0, 70, 24, 0, 0, 0, 0, 0, 0, 32, 20, 0, undef], ["i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i16*", 0, 0, 0, "i8", "i8", "i8", "i8"], ALLOC_STATIC);
			_punctuation_to_tone = allocate([0, 1, 2, 3, 0, 4, 0, 1, 2, 3, 0, 4, 5, 6, 2, 3, 0, 4, 5, 7, 1, 3, 0, 4, 8, 9, 10, 3, 0, 0, 8, 8, 10, 3, 0, 0, 11, 11, 11, 11, 0, 0, 12, 12, 12, 12, 0, 0], "i8", ALLOC_STATIC);
			_n_tunes = allocate(1, "i32", ALLOC_STATIC);
			_tunes = allocate(1, "%struct.TUNE*", ALLOC_STATIC);
			__ZL12syllable_tab = allocate(1, "%struct.SYLLABLE*", ALLOC_STATIC);
			__ZL8no_tonic_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL15tone_head_table = allocate([46, 57, 78, 50, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 78, 46, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 78, 46, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 90, 50, 0, 0, 0, 0, 3, 9, 5, 0, 0, 0, 0, 0, 46, 57, 78, 50, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 74, 55, 0, 0, 0, 0, 4, 7, 5, 0, 0, 0, 0, 0, 46, 57, 74, 55, 0, 0, 0, 0, 4, 7, 5, 0, 0, 0, 0, 0, 46, 57, 74, 55, 0, 0, 0, 0, 4, 7, 5, 0, 0, 0, 0, 0, 46, 57, 78, 50, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 78, 46, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 78, 50, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 34, 41, 41, 32, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0, 46, 57, 55, 50, 0, 0, 0, 0, 3, 7, 5, 0, 0, 0, 0, 0], ["i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32*", 0, 0, 0, "i8", "i8", "i8", 0, "i8*", 0, 0, 0], ALLOC_STATIC);
			__ZL10number_pre = allocate(1, "i32", ALLOC_STATIC);
			__ZL10tone_posn2 = allocate(1, "i32", ALLOC_STATIC);
			__ZL9tone_posn = allocate(1, "i32", ALLOC_STATIC);
			__ZL11number_tail = allocate(1, "i32", ALLOC_STATIC);
			__ZL14tone_pitch_env = allocate(1, "i32", ALLOC_STATIC);
			__ZZL18calc_pitch_segmentiiP9TONE_HEADP12TONE_NUCLEUSiiE12continue_tab = allocate([230, 32, 20, 8, 0], "i8", ALLOC_STATIC);
			__ZL8min_drop = allocate([6, 0, 0, 0, 7, 0, 0, 0, 9, 0, 0, 0, 9, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 20, 0, 0, 0, 25, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL7drops_0 = allocate([9, 0, 0, 0, 9, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 16, 0, 0, 0, 23, 0, 0, 0, 55, 0, 0, 0, 32, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL5oflow = allocate([0, 40, 24, 8, 0], "i8", ALLOC_STATIC);
			__ZL9oflow_emf = allocate([10, 52, 32, 20, 10], "i8", ALLOC_STATIC);
			__ZL10oflow_less = allocate([6, 38, 24, 14, 4], "i8", ALLOC_STATIC);
			__ZL12last_primary = allocate(1, "i32", ALLOC_STATIC);
			_namedata = allocate(1, "i8*", ALLOC_STATIC);
			__ZL7f_input = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			_p_textinput = allocate(1, "i8*", ALLOC_STATIC);
			_p_wchar_input = allocate(1, "i32*", ALLOC_STATIC);
			__ZL10ungot_word = allocate(1, "i8*", ALLOC_STATIC);
			_count_characters = allocate(1, "i32", ALLOC_STATIC);
			__ZL10ssml_stack = allocate(1520, ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8"], ALLOC_STATIC);
			__ZL16current_voice_id = allocate(40, "i8", ALLOC_STATIC);
			_param_stack = allocate(1280, "i32", ALLOC_STATIC);
			_param_defaults = allocate([0, 0, 0, 0, 175, 0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			_walpha_tab = allocate([1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 254, 255, 1, 255, 1, 255, 1, 255, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 255, 1, 255, 1, 255, 1, 255, 255, 255, 210, 1, 255, 1, 255, 206, 1, 255, 205, 205, 1, 255, 255, 79, 202, 203, 1, 255, 205, 207, 255, 211, 209, 1, 255, 255, 255, 211, 213, 255, 214, 1, 255, 1, 255, 1, 255, 218, 1, 255, 218, 255, 255, 1, 255, 218, 1, 255, 217, 217, 1, 255, 1, 255, 219, 1, 255, 255, 255, 1, 255, 255, 255, 255, 255, 255, 255, 2, 1, 255, 2, 1, 255, 2, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 255, 2, 1, 255, 1, 255, 255, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 255, 0, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255, 1, 255], "i8", ALLOC_STATIC);
			__ZL10ungot_char = allocate(1, "i32", ALLOC_STATIC);
			__ZL12end_of_input_b = allocate(1, "i1", ALLOC_STATIC);
			__str167 = allocate([115, 112, 101, 97, 107, 0], "i8", ALLOC_STATIC);
			__str1168 = allocate([118, 111, 105, 99, 101, 0], "i8", ALLOC_STATIC);
			__str2169 = allocate([112, 114, 111, 115, 111, 100, 121, 0], "i8", ALLOC_STATIC);
			__str3170 = allocate([115, 97, 121, 45, 97, 115, 0], "i8", ALLOC_STATIC);
			__str4171 = allocate([109, 97, 114, 107, 0], "i8", ALLOC_STATIC);
			__str5172 = allocate([115, 0], "i8", ALLOC_STATIC);
			__str6173 = allocate([112, 0], "i8", ALLOC_STATIC);
			__str7174 = allocate([112, 104, 111, 110, 101, 109, 101, 0], "i8", ALLOC_STATIC);
			__str8175 = allocate([115, 117, 98, 0], "i8", ALLOC_STATIC);
			__str9176 = allocate([116, 116, 115, 58, 115, 116, 121, 108, 101, 0], "i8", ALLOC_STATIC);
			__str10177 = allocate([97, 117, 100, 105, 111, 0], "i8", ALLOC_STATIC);
			__str11178 = allocate([101, 109, 112, 104, 97, 115, 105, 115, 0], "i8", ALLOC_STATIC);
			__str12179 = allocate([98, 114, 101, 97, 107, 0], "i8", ALLOC_STATIC);
			__str13180 = allocate([109, 101, 116, 97, 100, 97, 116, 97, 0], "i8", ALLOC_STATIC);
			__str14181 = allocate([98, 114, 0], "i8", ALLOC_STATIC);
			__str15182 = allocate([108, 105, 0], "i8", ALLOC_STATIC);
			__str16183 = allocate([100, 100, 0], "i8", ALLOC_STATIC);
			__str17184 = allocate([105, 109, 103, 0], "i8", ALLOC_STATIC);
			__str18185 = allocate([116, 100, 0], "i8", ALLOC_STATIC);
			__str19186 = allocate([104, 49, 0], "i8", ALLOC_STATIC);
			__str20187 = allocate([104, 50, 0], "i8", ALLOC_STATIC);
			__str21188 = allocate([104, 51, 0], "i8", ALLOC_STATIC);
			__str22189 = allocate([104, 52, 0], "i8", ALLOC_STATIC);
			__str23190 = allocate([104, 114, 0], "i8", ALLOC_STATIC);
			__str24191 = allocate([115, 99, 114, 105, 112, 116, 0], "i8", ALLOC_STATIC);
			__str25192 = allocate([115, 116, 121, 108, 101, 0], "i8", ALLOC_STATIC);
			__str26193 = allocate([102, 111, 110, 116, 0], "i8", ALLOC_STATIC);
			__str27194 = allocate([98, 0], "i8", ALLOC_STATIC);
			__str28195 = allocate([105, 0], "i8", ALLOC_STATIC);
			__str29196 = allocate([115, 116, 114, 111, 110, 103, 0], "i8", ALLOC_STATIC);
			__str30197 = allocate([101, 109, 0], "i8", ALLOC_STATIC);
			__str31198 = allocate([99, 111, 100, 101, 0], "i8", ALLOC_STATIC);
			__ZL8ssmltags = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL10n_namedata = allocate(1, "i32", ALLOC_STATIC);
			__ZL11namedata_ix = allocate(1, "i32", ALLOC_STATIC);
			__str32199 = allocate([103, 116, 0], "i8", ALLOC_STATIC);
			__str33200 = allocate([108, 116, 0], "i8", ALLOC_STATIC);
			__str34201 = allocate([97, 109, 112, 0], "i8", ALLOC_STATIC);
			__str35202 = allocate([113, 117, 111, 116, 0], "i8", ALLOC_STATIC);
			__str36203 = allocate([110, 98, 115, 112, 0], "i8", ALLOC_STATIC);
			__str37204 = allocate([97, 112, 111, 115, 0], "i8", ALLOC_STATIC);
			__ZL18xml_char_mnemonics = allocate([0, 0, 0, 0, 62, 0, 0, 0, 0, 0, 0, 0, 57404, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E12ungot_string = allocate(24, "i8", ALLOC_STATIC);
			__ZZ10ReadClauseP10TranslatorP7__sFILEPcPsPiiS5_S3_E15ungot_string_ix = allocate([-1], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL19clear_skipping_text_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL11ungot_char2 = allocate(1, "i32", ALLOC_STATIC);
			__ZL19ssml_ignore_l_angle = allocate(1, "i32", ALLOC_STATIC);
			__str38205 = allocate([37, 115, 37, 99, 37, 99, 0], "i8", ALLOC_STATIC);
			__ZL10sayas_mode = allocate(1, "i32", ALLOC_STATIC);
			__ZL11ignore_text_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL11punct_chars = allocate([44, 0, 46, 0, 63, 0, 33, 0, 58, 0, 59, 0, 8211, 0, 8212, 0, 8230, 0, 894, 0, 903, 0, 2404, 0, 1417, 0, 1373, 0, 1372, 0, 1374, 0, 1371, 0, 2843, 0, 1567, 0, 4962, 0, 4963, 0, 4964, 0, 4965, 0, 4966, 0, 4967, 0, 4968, 0, 4347, 0, 12289, 0, 12290, 0, -255, 0, -244, 0, -242, 0, -230, 0, -229, 0, -225, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL16punct_attributes = allocate([0, 0, 0, 0, 266260, 0, 0, 0, 524328, 0, 0, 0, 532520, 0, 0, 0, 536621, 0, 0, 0, 262174, 0, 0, 0, 266270, 0, 0, 0, 266270, 0, 0, 0, 266270, 0, 0, 0, 2396190, 0, 0, 0, 532520, 0, 0, 0, 266270, 0, 0, 0, 557096, 0, 0, 0, 557096, 0, 0, 0, 266260, 0, 0, 0, 1585197, 0, 0, 0, 1581096, 0, 0, 0, 1572904, 0, 0, 0, 266270, 0, 0, 0, 532520, 0, 0, 0, 524328, 0, 0, 0, 266260, 0, 0, 0, 266270, 0, 0, 0, 262174, 0, 0, 0, 262174, 0, 0, 0, 532520, 0, 0, 0, 524358, 0, 0, 0, 524358, 0, 0, 0, 299028, 0, 0, 0, 557096, 0, 0, 0, 569389, 0, 0, 0, 299028, 0, 0, 0, 557096, 0, 0, 0, 294942, 0, 0, 0, 299038, 0, 0, 0, 565288, 0, 0, 0, 266270, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str41208 = allocate([32, 32, 32, 0], "i8", ALLOC_STATIC);
			__ZL12chars_ignore = allocate([8204, 0, 8205, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__str42209 = allocate([105, 32, 0], "i8", ALLOC_STATIC);
			__ZL10audio_text_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL17speech_parameters = allocate(60, "i32", ALLOC_STATIC);
			__ZL12n_ssml_stack = allocate(1, "i32", ALLOC_STATIC);
			__ZL13n_param_stack = allocate(1, "i32", ALLOC_STATIC);
			__ZL7xmlbase = allocate(1, "i8*", ALLOC_STATIC);
			__ZZL14LookupCharNameP10TranslatoriiE3buf = allocate(60, "i8", ALLOC_STATIC);
			__str47214 = allocate([91, 2, 95, 94, 95, 37, 115, 32, 37, 115, 32, 95, 94, 95, 37, 115, 93, 93, 0], "i8", ALLOC_STATIC);
			__str48215 = allocate([91, 2, 37, 115, 93, 93, 32, 0], "i8", ALLOC_STATIC);
			__str49216 = allocate([91, 2, 40, 88, 49, 41, 40, 88, 49, 41, 40, 88, 49, 41, 93, 93, 0], "i8", ALLOC_STATIC);
			__ZZL13WordToString2jE3buf = allocate(5, "i8", ALLOC_STATIC);
			__str50217 = allocate([1, 37, 100, 73, 32, 0], "i8", ALLOC_STATIC);
			__str51218 = allocate([32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str52219 = allocate([1, 43, 49, 48, 83, 0], "i8", ALLOC_STATIC);
			__str53220 = allocate([32, 1, 45, 49, 48, 83, 0], "i8", ALLOC_STATIC);
			__str54221 = allocate([32, 37, 115, 32, 37, 100, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str55222 = allocate([37, 115, 37, 99, 115, 111, 117, 110, 100, 105, 99, 111, 110, 115, 37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__str57224 = allocate([112, 111, 108, 121, 112, 104, 97, 115, 101, 0], "i8", ALLOC_STATIC);
			__str58225 = allocate([47, 116, 109, 112, 47, 101, 115, 112, 101, 97, 107, 88, 88, 88, 88, 88, 88, 0], "i8", ALLOC_STATIC);
			__str59226 = allocate([115, 111, 120, 32, 34, 37, 115, 34, 32, 45, 114, 32, 37, 100, 32, 45, 119, 32, 45, 115, 32, 45, 99, 49, 32, 37, 115, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str60227 = allocate([91, 2, 37, 115, 93, 93, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_punct = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str61228 = allocate([110, 111, 110, 101, 0], "i8", ALLOC_STATIC);
			__str62229 = allocate([97, 108, 108, 0], "i8", ALLOC_STATIC);
			__str63230 = allocate([115, 111, 109, 101, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals = allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str64231 = allocate([110, 111, 0], "i8", ALLOC_STATIC);
			__str65232 = allocate([115, 112, 101, 108, 108, 105, 110, 103, 0], "i8", ALLOC_STATIC);
			__str66233 = allocate([105, 99, 111, 110, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as = allocate([0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 193, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str68235 = allocate([99, 104, 97, 114, 97, 99, 116, 101, 114, 115, 0], "i8", ALLOC_STATIC);
			__str69236 = allocate([116, 116, 115, 58, 99, 104, 97, 114, 0], "i8", ALLOC_STATIC);
			__str70237 = allocate([116, 116, 115, 58, 107, 101, 121, 0], "i8", ALLOC_STATIC);
			__str71238 = allocate([116, 116, 115, 58, 100, 105, 103, 105, 116, 115, 0], "i8", ALLOC_STATIC);
			__str72239 = allocate([116, 101, 108, 101, 112, 104, 111, 110, 101, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_sayas_format = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str73240 = allocate([103, 108, 121, 112, 104, 115, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break = allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str74241 = allocate([120, 45, 119, 101, 97, 107, 0], "i8", ALLOC_STATIC);
			__str75242 = allocate([119, 101, 97, 107, 0], "i8", ALLOC_STATIC);
			__str76243 = allocate([109, 101, 100, 105, 117, 109, 0], "i8", ALLOC_STATIC);
			__str77244 = allocate([120, 45, 115, 116, 114, 111, 110, 103, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str78245 = allocate([114, 101, 100, 117, 99, 101, 100, 0], "i8", ALLOC_STATIC);
			__str79246 = allocate([109, 111, 100, 101, 114, 97, 116, 101, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr = allocate(20, "i8*", ALLOC_STATIC);
			__str80247 = allocate([114, 97, 116, 101, 0], "i8", ALLOC_STATIC);
			__str81248 = allocate([118, 111, 108, 117, 109, 101, 0], "i8", ALLOC_STATIC);
			__str82249 = allocate([114, 97, 110, 103, 101, 0], "i8", ALLOC_STATIC);
			__ZL22ignore_if_self_closing = allocate([0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 0, 1, 0, 1, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__str83250 = allocate([102, 105, 101, 108, 100, 0], "i8", ALLOC_STATIC);
			__str84251 = allocate([109, 111, 100, 101, 0], "i8", ALLOC_STATIC);
			__str85252 = allocate([112, 117, 110, 99, 116, 117, 97, 116, 105, 111, 110, 0], "i8", ALLOC_STATIC);
			__str86253 = allocate([99, 97, 112, 105, 116, 97, 108, 95, 108, 101, 116, 116, 101, 114, 115, 0], "i8", ALLOC_STATIC);
			__str87254 = allocate([108, 101, 118, 101, 108, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE23emphasis_to_pitch_range = allocate([50, 50, 40, 70, 90, 90], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE18emphasis_to_volume = allocate([100, 100, 70, 110, 140, 140], "i8", ALLOC_STATIC);
			__str88255 = allocate([105, 110, 116, 101, 114, 112, 114, 101, 116, 45, 97, 115, 0], "i8", ALLOC_STATIC);
			__str89256 = allocate([102, 111, 114, 109, 97, 116, 0], "i8", ALLOC_STATIC);
			__str90257 = allocate([100, 101, 116, 97, 105, 108, 0], "i8", ALLOC_STATIC);
			__str91258 = allocate([37, 99, 37, 100, 89, 0], "i8", ALLOC_STATIC);
			__ZL11sayas_start = allocate(1, "i32", ALLOC_STATIC);
			__str92259 = allocate([97, 108, 105, 97, 115, 0], "i8", ALLOC_STATIC);
			__str94261 = allocate([37, 99, 37, 100, 77, 0], "i8", ALLOC_STATIC);
			__str95262 = allocate([115, 114, 99, 0], "i8", ALLOC_STATIC);
			__str96263 = allocate([37, 115, 47, 37, 115, 0], "i8", ALLOC_STATIC);
			__str97264 = allocate([37, 99, 37, 100, 73, 0], "i8", ALLOC_STATIC);
			__str98265 = allocate([37, 99, 37, 100, 85, 0], "i8", ALLOC_STATIC);
			__str99266 = allocate([115, 116, 114, 101, 110, 103, 116, 104, 0], "i8", ALLOC_STATIC);
			__ZZL14ProcessSsmlTagPwPcRiiiE11break_value = allocate([0, 0, 0, 0, 7, 0, 0, 0, 14, 0, 0, 0, 21, 0, 0, 0, 40, 0, 0, 0, 80, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str100267 = allocate([37, 99, 37, 100, 66, 0], "i8", ALLOC_STATIC);
			__str101268 = allocate([116, 105, 109, 101, 0], "i8", ALLOC_STATIC);
			__str102269 = allocate([120, 109, 108, 58, 98, 97, 115, 101, 0], "i8", ALLOC_STATIC);
			__ZZL18GetVoiceAttributesPwiE11mnem_gender = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str105272 = allocate([110, 101, 117, 116, 114, 97, 108, 0], "i8", ALLOC_STATIC);
			__str106273 = allocate([120, 109, 108, 58, 108, 97, 110, 103, 0], "i8", ALLOC_STATIC);
			__str108275 = allocate([97, 103, 101, 0], "i8", ALLOC_STATIC);
			__ZZL14LoadSoundFile2PKcE4slot = allocate([-1], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__str111278 = allocate([115, 112, 97, 99, 101, 32, 0], "i8", ALLOC_STATIC);
			__str112279 = allocate([116, 97, 98, 32, 0], "i8", ALLOC_STATIC);
			__str113280 = allocate([117, 110, 100, 101, 114, 115, 99, 111, 114, 101, 32, 0], "i8", ALLOC_STATIC);
			__str114281 = allocate([100, 111, 117, 98, 108, 101, 45, 113, 117, 111, 116, 101, 32, 0], "i8", ALLOC_STATIC);
			__ZZL14ReplaceKeyNamePciRiE8keynames = allocate([0, 0, 0, 0, 57376, 0, 0, 0, 0, 0, 0, 0, 57353, 0, 0, 0, 0, 0, 0, 0, 57439, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume = allocate([0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 230, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str115282 = allocate([115, 105, 108, 101, 110, 116, 0], "i8", ALLOC_STATIC);
			__str116283 = allocate([120, 45, 115, 111, 102, 116, 0], "i8", ALLOC_STATIC);
			__str117 = allocate([115, 111, 102, 116, 0], "i8", ALLOC_STATIC);
			__str118 = allocate([108, 111, 117, 100, 0], "i8", ALLOC_STATIC);
			__str119 = allocate([120, 45, 108, 111, 117, 100, 0], "i8", ALLOC_STATIC);
			__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate = allocate([0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 125, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str120 = allocate([120, 45, 115, 108, 111, 119, 0], "i8", ALLOC_STATIC);
			__str121 = allocate([115, 108, 111, 119, 0], "i8", ALLOC_STATIC);
			__str122 = allocate([102, 97, 115, 116, 0], "i8", ALLOC_STATIC);
			__str123 = allocate([120, 45, 102, 97, 115, 116, 0], "i8", ALLOC_STATIC);
			__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch = allocate([0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 120, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str124 = allocate([120, 45, 108, 111, 119, 0], "i8", ALLOC_STATIC);
			__str125 = allocate([108, 111, 119, 0], "i8", ALLOC_STATIC);
			__str126 = allocate([104, 105, 103, 104, 0], "i8", ALLOC_STATIC);
			__str127 = allocate([120, 45, 104, 105, 103, 104, 0], "i8", ALLOC_STATIC);
			__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range = allocate([0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 0, 0, 180, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs = allocate(20, "%struct.MNEM_TAB*", ALLOC_STATIC);
			__ZZL17ProcessParamStackPcRiE10cmd_letter = allocate([0, 83, 65, 80, 82, 0, 67, 0, 0, 0, 0, 0, 70, 0, 0], "i8", ALLOC_STATIC);
			__str128 = allocate([37, 99, 37, 100, 37, 99, 0], "i8", ALLOC_STATIC);
			__ZZL16GetSsmlAttributePwPKcE5empty = allocate(4, "i32", ALLOC_STATIC);
			__ZZL4GetCvE6ungot2 = allocate(1, "i32", ALLOC_STATIC);
			__ZZL4GetCvE5mask2 = allocate([0, 128, 32, 48], "i8", ALLOC_STATIC);
			__ZL6speed1 = allocate([130], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL6speed2 = allocate([121], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL6speed3 = allocate([118], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL12speed_lookup = allocate([255, 255, 255, 255, 255, 253, 249, 245, 242, 238, 235, 232, 228, 225, 222, 218, 216, 213, 210, 207, 204, 201, 198, 196, 193, 191, 188, 186, 183, 181, 179, 176, 174, 172, 169, 168, 165, 163, 161, 159, 158, 155, 153, 152, 150, 148, 146, 145, 143, 141, 139, 137, 136, 135, 133, 131, 130, 129, 127, 126, 124, 123, 122, 120, 119, 118, 117, 115, 114, 113, 112, 111, 110, 109, 107, 106, 105, 104, 103, 102, 101, 100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 90, 89, 89, 88, 87, 86, 85, 84, 83, 82, 82, 81, 80, 80, 79, 78, 77, 76, 76, 75, 75, 74, 73, 72, 71, 71, 70, 69, 69, 68, 67, 67, 66, 66, 65, 64, 64, 63, 62, 62, 61, 61, 60, 59, 59, 58, 58, 57, 57, 56, 56, 55, 54, 54, 53, 53, 52, 52, 52, 51, 50, 50, 49, 49, 48, 48, 47, 47, 46, 46, 46, 45, 45, 44, 44, 44, 43, 43, 42, 41, 40, 40, 40, 39, 39, 39, 38, 38, 38, 37, 37, 37, 36, 36, 35, 35, 35, 35, 34, 34, 34, 33, 33, 33, 32, 32, 31, 31, 31, 30, 30, 30, 29, 29, 29, 29, 28, 28, 27, 27, 27, 27, 26, 26, 26, 26, 25, 25, 25, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 18, 18, 17, 17, 17, 16, 16, 16, 16, 16, 16, 15, 15, 15, 15, 14, 14, 14, 13, 13, 13, 12, 12, 12, 12, 11, 11, 11, 11, 10, 10, 10, 9, 9, 9, 8, 8, 8], "i8", ALLOC_STATIC);
			__ZL14wav_factor_350 = allocate([120, 121, 120, 119, 119, 118, 118, 117, 116, 116, 115, 114, 113, 112, 112, 111, 111, 110, 109, 108, 107, 106, 106, 104, 103, 103, 102, 102, 102, 101, 101, 99, 98, 98, 97, 96, 96, 95, 94, 93, 91, 90, 91, 90, 89, 88, 86, 85, 86, 85, 85, 84, 82, 81, 80, 79, 77, 78, 78, 76, 77, 75, 75, 74, 73, 71, 72, 70, 69, 69, 69, 67, 65, 64, 63, 63, 63, 61, 61, 59, 59, 59, 58, 56, 57, 58, 56, 54, 53, 52, 52, 53, 52, 52, 50, 48, 47, 47, 45, 46, 45], "i8", ALLOC_STATIC);
			__ZL16pause_factor_350 = allocate([22, 22, 22, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 19, 19, 18, 17, 16, 15, 15, 15, 15, 15, 15, 15], "i8", ALLOC_STATIC);
			__ZZ11CalcLengthsP10TranslatorE14more_syllables = allocate(1, "i32", ALLOC_STATIC);
			__str294 = allocate([101, 115, 112, 101, 97, 107, 58, 32, 66, 97, 100, 32, 105, 110, 116, 111, 110, 97, 116, 105, 111, 110, 32, 100, 97, 116, 97, 10, 0], "i8", ALLOC_STATIC);
			__ZL18letter_accents_0e0 = allocate([870, 0, 358, 0, 614, 0, 1190, 0, 678, 0, 1062, 0, -30042, 0, 552, 0, 874, 0, 362, 0, 618, 0, 682, 0, 878, 0, 366, 0, 622, 0, 686, 0, 41, 0, 1203, 0, 884, 0, 372, 0, 628, 0, 1204, 0, 692, 0, 0, 0, 1140, 0, 890, 0, 378, 0, 634, 0, 698, 0, 382, 0, 57, 0, 702, 0, 0, 0, 934, 0, 0, 0, 422, 0, 0, 0, 998, 0, 0, 0, 360, 0, 0, 0, 616, 0, 0, 0, 808, 0, 0, 0, 488, 0, 0, 0, 489, 0, 0, 0, 1129, 0, 0, 0, 938, 0, 0, 0, 426, 0, 0, 0, 810, 0, 0, 0, 1002, 0, 0, 0, 490, 0, 0, 0, 620, 0, 0, 0, 428, 0, 0, 0, 812, 0, 0, 0, 556, 0, 0, 0, 621, 0, 0, 0, 1133, 0, 0, 0, 1198, 0, 0, 0, 942, 0, 0, 0, 430, 0, 0, 0, 1006, 0, 0, 0, 46, 0, 0, 0, -29714, 0, 0, 0, 623, 0, 0, 0, 560, 0, 48, 0, 0, 0, 369, 0, 0, 0, 561, 0, 0, 0, 497, 0, 0, 0, 817, 0, 0, 0, 1137, 0, 0, 0, 371, 0, 0, 0, 563, 0, 0, 0, 499, 0, 51, 0, 0, 0, 51, 0, 0, 0, 948, 0, 0, 0, 436, 0, 0, 0, 756, 0, 0, 0, -30028, 0, 0, 0, 375, 0, 0, 0, 567, 0, 0, 0, 503, 0, 0, 0, 376, 0, 0, 0, 632, 0, 0, 0, 568, 0, 0, 0, 504, 0, 0, 0, 569, 0, 0, 0, 505, 0, 0, 0, 1145, 0, 0, 0, 1210, 0, 0, 0, 954, 0, 0, 0, 442, 0, 0, 0, 1082, 0, 0, 0, 762, 0, 0, 0, 1018, 0, 0, 0, 636, 0, 0, 0, 638, 0, 0, 0, 0, 0, 383, 0, 0, 0, 831, 0, 0, 0, 511, 0, 56, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL18letter_accents_250 = allocate([166, 0, 1, 0, 129, 0, 1383, 0, 0, 0, 296, 0, 1321, 0, 1385, 0, 234, 0, 0, 0, 1346, 0, 0, 0, 195, 0, 7491, 0, 0, 0, 1263, 0, 1388, 0, 44, 0, 108, 0, 4, 0, 0, 0, 173, 0, 1389, 0, 0, 0, 1262, 0, 5, 0, 110, 0, 1201, 0, 1265, 0, 1329, 0, -28687, 0, 178, 0, 0, 0, 1394, 0, 0, 0, 1331, 0, 115, 0, 1268, 0, -25932, 0, 0, 0, 8, 0, 183, 0, 0, 0, 5431, 0, 0, 0, 1335, 0, 0, 0, 205, 0, 119, 0, 2231, 0, 1336, 0, 0, 0, 0, 0, 201, 0, 265, 0, 185, 0, 1337, 0, 1274, 0, 10, 0, 1403, 0, 187, 0, 188, 0, 190, 0, 126, 0, 1343, 0, 319, 0, 0, 0, 267, 0, 0, 0, 204, 0, 140, 0, 0, 0, 0, 0, 103, 0, 0, 0, 3436, 0, 109, 0, 303, 0, 176, 0, 113, 0, 1398, 0, 1100, 0, 7244, 0, -28695, 0, 0, 0, -12311, 0, -29127, 0, 0, 0, -12743, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL13non_ascii_tab = allocate([0, 0, 945, 0, 601, 0, 603, 0, 947, 0, 953, 0, 339, 0, 969, 0, 966, 0, 643, 0, 965, 0, 658, 0, 660, 0, 638, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL11accents_tab = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str297 = allocate([37, 115, 37, 99, 37, 115, 37, 99, 37, 115, 37, 115, 0], "i8", ALLOC_STATIC);
			__str1298 = allocate([37, 115, 37, 99, 37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__str2299 = allocate([37, 99, 37, 115, 37, 99, 37, 115, 37, 99, 0], "i8", ALLOC_STATIC);
			__ZZ12LookupLetterP10TranslatorjiPciE13single_letter = allocate(10, "i8", ALLOC_STATIC);
			__str5302 = allocate([95, 35, 37, 100, 32, 0], "i8", ALLOC_STATIC);
			__str6303 = allocate([95, 99, 97, 112, 0], "i8", ALLOC_STATIC);
			__str7304 = allocate([37, 99, 101, 110, 0], "i8", ALLOC_STATIC);
			__str8305 = allocate([95, 63, 65, 0], "i8", ALLOC_STATIC);
			__str9306 = allocate([95, 63, 63, 0], "i8", ALLOC_STATIC);
			__str10307 = allocate([37, 120, 0], "i8", ALLOC_STATIC);
			__str11308 = allocate([37, 99, 37, 115, 37, 115, 0], "i8", ALLOC_STATIC);
			__str12309 = allocate([105, 120, 99, 109, 118, 108, 100, 0], "i8", ALLOC_STATIC);
			__ZZ14TranslateRomanP10TranslatorPcS1_P8WORD_TABE12roman_values = allocate([1, 0, 0, 0, 10, 0, 0, 0, 100, 0, 0, 0, 1000, 0, 0, 0, 5, 0, 0, 0, 50, 0, 0, 0, 500, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str13310 = allocate([95, 114, 111, 109, 97, 110, 0], "i8", ALLOC_STATIC);
			__str14311 = allocate([32, 32, 37, 100, 32, 32, 32, 32, 0], "i8", ALLOC_STATIC);
			__ZZL17TranslateNumber_1P10TranslatorPcS1_PjP8WORD_TABiE9str_pause = allocate([11, 0], "i8", ALLOC_STATIC);
			__ZL14n_digit_lookup = allocate(1, "i32", ALLOC_STATIC);
			__ZL12digit_lookup = allocate(1, "i8*", ALLOC_STATIC);
			__ZL14number_control = allocate(1, "i32", ALLOC_STATIC);
			__ZL23speak_missing_thousands = allocate(1, "i32", ALLOC_STATIC);
			__ZL11ph_ordinal2 = allocate(12, "i8", ALLOC_STATIC);
			__str15312 = allocate([95, 35, 37, 115, 0], "i8", ALLOC_STATIC);
			__str16313 = allocate([95, 48, 0], "i8", ALLOC_STATIC);
			__str17314 = allocate([95, 100, 112, 116, 0], "i8", ALLOC_STATIC);
			__str18315 = allocate([95, 48, 77, 37, 100, 0], "i8", ALLOC_STATIC);
			__str19316 = allocate([95, 46, 0], "i8", ALLOC_STATIC);
			__str20317 = allocate([37, 115, 37, 115, 37, 115, 37, 115, 0], "i8", ALLOC_STATIC);
			__str21318 = allocate([95, 48, 90, 37, 100, 0], "i8", ALLOC_STATIC);
			__str22319 = allocate([95, 100, 112, 116, 50, 0], "i8", ALLOC_STATIC);
			__str23320 = allocate([95, 37, 100, 102, 0], "i8", ALLOC_STATIC);
			__str24321 = allocate([95, 37, 100, 37, 99, 120, 0], "i8", ALLOC_STATIC);
			__str25322 = allocate([95, 37, 100, 37, 99, 0], "i8", ALLOC_STATIC);
			__str26323 = allocate([95, 37, 100, 101, 0], "i8", ALLOC_STATIC);
			__str27324 = allocate([95, 37, 100, 97, 0], "i8", ALLOC_STATIC);
			__str28325 = allocate([95, 37, 100, 0], "i8", ALLOC_STATIC);
			__str29326 = allocate([95, 37, 100, 88, 37, 99, 0], "i8", ALLOC_STATIC);
			__str30327 = allocate([95, 37, 100, 88, 0], "i8", ALLOC_STATIC);
			__str31328 = allocate([95, 111, 114, 100, 50, 48, 0], "i8", ALLOC_STATIC);
			__str32329 = allocate([95, 111, 114, 100, 0], "i8", ALLOC_STATIC);
			__str33330 = allocate([95, 48, 97, 110, 100, 0], "i8", ALLOC_STATIC);
			__str35332 = allocate([95, 48, 67, 111, 0], "i8", ALLOC_STATIC);
			__str36333 = allocate([95, 48, 67, 48, 0], "i8", ALLOC_STATIC);
			__str37334 = allocate([95, 48, 67, 0], "i8", ALLOC_STATIC);
			__str39336 = allocate([95, 37, 100, 67, 111, 0], "i8", ALLOC_STATIC);
			__str40337 = allocate([95, 37, 100, 67, 48, 0], "i8", ALLOC_STATIC);
			__str41338 = allocate([95, 37, 100, 67, 0], "i8", ALLOC_STATIC);
			__str42339 = allocate([95, 37, 100, 77, 37, 100, 111, 0], "i8", ALLOC_STATIC);
			__str43340 = allocate([95, 37, 100, 77, 37, 100, 101, 0], "i8", ALLOC_STATIC);
			__str44341 = allocate([95, 37, 100, 77, 37, 100, 120, 0], "i8", ALLOC_STATIC);
			__str45342 = allocate([95, 37, 100, 77, 37, 100, 0], "i8", ALLOC_STATIC);
			__str46343 = allocate([95, 48, 111, 102, 0], "i8", ALLOC_STATIC);
			__str47344 = allocate([95, 37, 115, 37, 100, 111, 0], "i8", ALLOC_STATIC);
			__str48345 = allocate([95, 37, 115, 37, 100, 101, 0], "i8", ALLOC_STATIC);
			__str49346 = allocate([95, 37, 115, 37, 100, 120, 0], "i8", ALLOC_STATIC);
			__str50347 = allocate([95, 37, 115, 37, 100, 0], "i8", ALLOC_STATIC);
			__str51348 = allocate([95, 48, 77, 50, 0], "i8", ALLOC_STATIC);
			__str52349 = allocate([95, 37, 100, 77, 49, 0], "i8", ALLOC_STATIC);
			__str53350 = allocate([95, 48, 77, 49, 0], "i8", ALLOC_STATIC);
			__str54351 = allocate([48, 77, 65, 0], "i8", ALLOC_STATIC);
			__str55352 = allocate([49, 77, 65, 0], "i8", ALLOC_STATIC);
			__str56353 = allocate([48, 77, 0], "i8", ALLOC_STATIC);
			__str57354 = allocate([95, 108, 105, 103, 0], "i8", ALLOC_STATIC);
			__str58355 = allocate([95, 115, 109, 99, 0], "i8", ALLOC_STATIC);
			__str59356 = allocate([95, 116, 117, 114, 0], "i8", ALLOC_STATIC);
			__str60357 = allocate([95, 114, 101, 118, 0], "i8", ALLOC_STATIC);
			__str61358 = allocate([95, 99, 114, 108, 0], "i8", ALLOC_STATIC);
			__str62359 = allocate([95, 97, 99, 117, 0], "i8", ALLOC_STATIC);
			__str63360 = allocate([95, 98, 114, 118, 0], "i8", ALLOC_STATIC);
			__str64361 = allocate([95, 104, 97, 99, 0], "i8", ALLOC_STATIC);
			__str65362 = allocate([95, 99, 101, 100, 0], "i8", ALLOC_STATIC);
			__str66363 = allocate([95, 99, 105, 114, 0], "i8", ALLOC_STATIC);
			__str67364 = allocate([95, 100, 105, 97, 0], "i8", ALLOC_STATIC);
			__str68365 = allocate([95, 97, 99, 50, 0], "i8", ALLOC_STATIC);
			__str69366 = allocate([95, 100, 111, 116, 0], "i8", ALLOC_STATIC);
			__str70367 = allocate([95, 103, 114, 118, 0], "i8", ALLOC_STATIC);
			__str71368 = allocate([95, 109, 99, 110, 0], "i8", ALLOC_STATIC);
			__str72369 = allocate([95, 111, 103, 111, 0], "i8", ALLOC_STATIC);
			__str73370 = allocate([95, 114, 110, 103, 0], "i8", ALLOC_STATIC);
			__str74371 = allocate([95, 115, 116, 107, 0], "i8", ALLOC_STATIC);
			__str75372 = allocate([95, 116, 108, 100, 0], "i8", ALLOC_STATIC);
			__str76373 = allocate([95, 98, 97, 114, 0], "i8", ALLOC_STATIC);
			__str77374 = allocate([95, 114, 102, 120, 0], "i8", ALLOC_STATIC);
			__str78375 = allocate([95, 104, 111, 107, 0], "i8", ALLOC_STATIC);
			_option_mbrola_phonemes = allocate(1, "i32", ALLOC_STATIC);
			__ZL10mbrola_tab = allocate(1, "%struct.MBROLA_TAB*", ALLOC_STATIC);
			__ZL15mbr_name_prefix = allocate(1, "i32", ALLOC_STATIC);
			__str382 = allocate([37, 115, 47, 109, 98, 114, 111, 108, 97, 47, 37, 115, 0], "i8", ALLOC_STATIC);
			__str1383 = allocate([47, 117, 115, 114, 47, 115, 104, 97, 114, 101, 47, 109, 98, 114, 111, 108, 97, 47, 37, 115, 0], "i8", ALLOC_STATIC);
			__str2384 = allocate([47, 117, 115, 114, 47, 115, 104, 97, 114, 101, 47, 109, 98, 114, 111, 108, 97, 47, 37, 115, 47, 37, 115, 0], "i8", ALLOC_STATIC);
			__str3385 = allocate([47, 117, 115, 114, 47, 115, 104, 97, 114, 101, 47, 109, 98, 114, 111, 108, 97, 47, 118, 111, 105, 99, 101, 115, 47, 37, 115, 0], "i8", ALLOC_STATIC);
			__str4386 = allocate([37, 115, 47, 109, 98, 114, 111, 108, 97, 95, 112, 104, 47, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZL14mbrola_control = allocate(1, "i32", ALLOC_STATIC);
			__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE4phix = allocate(1, "i32", ALLOC_STATIC);
			__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE11embedded_ix = allocate(1, "i32", ALLOC_STATIC);
			__ZZ15MbrolaTranslateP12PHONEME_LISTiiP7__sFILEE10word_count = allocate(1, "i32", ALLOC_STATIC);
			__str6388 = allocate([37, 115, 9, 0], "i8", ALLOC_STATIC);
			__str8390 = allocate([37, 100, 9, 37, 115, 0], "i8", ALLOC_STATIC);
			__str9391 = allocate([37, 115, 9, 37, 100, 9, 37, 115, 0], "i8", ALLOC_STATIC);
			__str10392 = allocate([37, 100, 10, 37, 115, 9, 0], "i8", ALLOC_STATIC);
			__str11393 = allocate([37, 100, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str12394 = allocate([95, 32, 9, 37, 100, 10, 0], "i8", ALLOC_STATIC);
			__ZZ10MbrolaFilliiE9n_samples = allocate(1, "i32", ALLOC_STATIC);
			__ZZL10WritePitchiiiiiE6output = allocate(50, "i8", ALLOC_STATIC);
			__str13395 = allocate([32, 48, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str14396 = allocate([32, 37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str15397 = allocate([10, 0], "i8", ALLOC_STATIC);
			__str16398 = allocate([9, 49, 48, 48, 32, 37, 100, 10, 0], "i8", ALLOC_STATIC);
			__ZZL10GetMbrNameP12PHONEME_LISTP11PHONEME_TABS2_S2_PiS3_S3_E4mnem = allocate(1, "i32", ALLOC_STATIC);
			__str399 = allocate([49, 46, 52, 53, 46, 48, 52, 32, 32, 50, 53, 46, 65, 112, 114, 46, 49, 49, 0], "i8", ALLOC_STATIC);
			_version_string = allocate(1, "i8*", ALLOC_STATIC);
			_version_phdata = allocate([83200], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			_option_device_number = allocate([-1], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			_f_logespeak = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			_logging_type = allocate(1, "i32", ALLOC_STATIC);
			_n_phoneme_tab = allocate(1, "i32", ALLOC_STATIC);
			_current_phoneme_table = allocate(1, "i32", ALLOC_STATIC);
			_phoneme_tab = allocate(1024, "%struct.PHONEME_TAB*", ALLOC_STATIC);
			_phoneme_tab_flags = allocate(256, "i8", ALLOC_STATIC);
			_phoneme_index = allocate(1, "i16*", ALLOC_STATIC);
			_phondata_ptr = allocate(1, "i8*", ALLOC_STATIC);
			_wavefile_data = allocate(1, "i8*", ALLOC_STATIC);
			__ZL16phoneme_tab_data = allocate(1, "i8*", ALLOC_STATIC);
			_n_phoneme_tables = allocate(1, "i32", ALLOC_STATIC);
			_phoneme_tab_list = allocate(4800, ["i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "%struct.PHONEME_TAB*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			_phoneme_tab_number = allocate(1, "i32", ALLOC_STATIC);
			_wavefile_ix = allocate(1, "i32", ALLOC_STATIC);
			_wavefile_amp = allocate(1, "i32", ALLOC_STATIC);
			_wavefile_ix2 = allocate(1, "i32", ALLOC_STATIC);
			_wavefile_amp2 = allocate(1, "i32", ALLOC_STATIC);
			_seq_len_adjust = allocate(1, "i32", ALLOC_STATIC);
			_vowel_transition = allocate(16, "i32", ALLOC_STATIC);
			_vowel_transition0 = allocate(1, "i32", ALLOC_STATIC);
			_vowel_transition1 = allocate(1, "i32", ALLOC_STATIC);
			__str1412 = allocate([112, 104, 111, 110, 116, 97, 98, 0], "i8", ALLOC_STATIC);
			__str2413 = allocate([112, 104, 111, 110, 105, 110, 100, 101, 120, 0], "i8", ALLOC_STATIC);
			__str3414 = allocate([112, 104, 111, 110, 100, 97, 116, 97, 0], "i8", ALLOC_STATIC);
			__str4415 = allocate([105, 110, 116, 111, 110, 97, 116, 105, 111, 110, 115, 0], "i8", ALLOC_STATIC);
			__ZZ11LookupSpectP11PHONEME_TABiP10FMT_PARAMSPiP12PHONEME_LISTE10frames_buf = allocate(200, ["i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0, "i16", 0, "i16", 0, "%struct.frame_t*", 0, 0, 0], ALLOC_STATIC);
			__str5416 = allocate([101, 115, 112, 101, 97, 107, 58, 32, 78, 111, 32, 101, 110, 118, 101, 108, 111, 112, 101, 10, 0], "i8", ALLOC_STATIC);
			__str7418 = allocate([99, 111, 110, 102, 105, 103, 0], "i8", ALLOC_STATIC);
			__str9420 = allocate([108, 111, 103, 0], "i8", ALLOC_STATIC);
			__str10421 = allocate([37, 100, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str11422 = allocate([119, 0], "i8", ALLOC_STATIC);
			__str13424 = allocate([112, 97, 95, 100, 101, 118, 105, 99, 101, 0], "i8", ALLOC_STATIC);
			__str15426 = allocate([115, 111, 117, 110, 100, 105, 99, 111, 110, 0], "i8", ALLOC_STATIC);
			__str16427 = allocate([95, 37, 99, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			_this_ph_data = allocate(152, ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0], ALLOC_STATIC);
			__ZZL13NumInstnWordsPtE7n_words = allocate([1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 4], "i8", ALLOC_STATIC);
			__ZZL18InterpretConditionP10TranslatoriP12PHONEME_LISTiE11ph_position = allocate([0, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 3, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZL15StressConditionP10TranslatorP12PHONEME_LISTiiE15condition_level = allocate([1, 0, 0, 0, 2, 0, 0, 0, 4, 0, 0, 0, 15, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str17428 = allocate([73, 110, 118, 97, 108, 105, 100, 32, 105, 110, 115, 116, 114, 117, 99, 116, 105, 111, 110, 32, 37, 46, 52, 120, 32, 102, 111, 114, 32, 112, 104, 111, 110, 101, 109, 101, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str18429 = allocate([114, 98, 0], "i8", ALLOC_STATIC);
			__str19430 = allocate([67, 97, 110, 39, 116, 32, 114, 101, 97, 100, 32, 100, 97, 116, 97, 32, 102, 105, 108, 101, 58, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			_n_phoneme_list = allocate(1, "i32", ALLOC_STATIC);
			_phoneme_list = allocate(24000, ["i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "%struct.PHONEME_TAB*", 0, 0, 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", 0, 0], ALLOC_STATIC);
			_mbrola_delay = allocate(1, "i32", ALLOC_STATIC);
			_mbrola_name = allocate(20, "i8", ALLOC_STATIC);
			_speed = allocate(64, "i32", ALLOC_STATIC);
			__ZL9new_voice = allocate(1, "%struct.voice_t*", ALLOC_STATIC);
			_n_soundicon_tab = allocate([4], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			_soundicon_tab = allocate(1280, ["i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STATIC);
			__ZZ12WordToStringjE3buf = allocate(5, "i8", ALLOC_STATIC);
			__ZL14last_pitch_cmd = allocate(1, "i32", ALLOC_STATIC);
			__ZL12last_amp_cmd = allocate(1, "i32", ALLOC_STATIC);
			__ZL10last_frame = allocate(1, "%struct.frame_t*", ALLOC_STATIC);
			__ZL15syllable_centre = allocate(1, "i32", ALLOC_STATIC);
			__ZZ18FormantTransition2P10frameref_tRijjP11PHONEME_TABiE10vcolouring = allocate([243, 0, 272, 0, 256, 0, 256, 0, 256, 0, 256, 0, 256, 0, 240, 0, 240, 0, 240, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10modn_flags = allocate(1, "i32", ALLOC_STATIC);
			__ZZ8DoSpect2P11PHONEME_TABiP10FMT_PARAMSP12PHONEME_LISTiE9wave_flag_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL13fmt_amplitude = allocate(1, "i32", ALLOC_STATIC);
			__ZL10last_wcmdq = allocate(1, "i32", ALLOC_STATIC);
			__ZL12pitch_length = allocate(1, "i32", ALLOC_STATIC);
			__ZL10amp_length = allocate(1, "i32", ALLOC_STATIC);
			__ZZ8GenerateP12PHONEME_LISTPiiE2ix = allocate(1, "i32", ALLOC_STATIC);
			__ZZ8GenerateP12PHONEME_LISTPiiE11embedded_ix = allocate(1, "i32", ALLOC_STATIC);
			__ZZ8GenerateP12PHONEME_LISTPiiE10word_count = allocate(1, "i32", ALLOC_STATIC);
			__ZZ8GenerateP12PHONEME_LISTPiiE8sourceix = allocate(1, "i32", ALLOC_STATIC);
			__ZL14syllable_start = allocate(1, "i32", ALLOC_STATIC);
			__ZL12syllable_end = allocate(1, "i32", ALLOC_STATIC);
			__ZL8timer_on_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL6paused_b = allocate(1, "i1", ALLOC_STATIC);
			__ZZ15SpeakNextClauseP7__sFILEPKviE6f_text = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			__ZZ15SpeakNextClauseP7__sFILEPKviE6p_text = allocate(1, "i8*", ALLOC_STATIC);
			__str459 = allocate([37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str1460 = allocate([87, 97, 114, 110, 105, 110, 103, 58, 32, 65, 99, 99, 101, 110, 116, 101, 100, 32, 108, 101, 116, 116, 101, 114, 115, 32, 97, 114, 101, 32, 110, 111, 116, 32, 114, 101, 99, 111, 103, 110, 105, 122, 101, 100, 44, 32, 101, 103, 58, 32, 85, 43, 48, 49, 48, 68, 10, 83, 101, 116, 32, 76, 67, 95, 67, 84, 89, 80, 69, 32, 116, 111, 32, 97, 32, 85, 84, 70, 45, 56, 32, 108, 111, 99, 97, 108, 101, 10, 0], "i8", ALLOC_STATIC);
			__ZZL13set_frame_rmsP7frame_tiE8sqrt_tab = allocate([0, 0, 64, 0, 90, 0, 110, 0, 128, 0, 143, 0, 156, 0, 169, 0, 181, 0, 192, 0, 202, 0, 212, 0, 221, 0, 230, 0, 239, 0, 247, 0, 256, 0, 263, 0, 271, 0, 278, 0, 286, 0, 293, 0, 300, 0, 306, 0, 313, 0, 320, 0, 326, 0, 332, 0, 338, 0, 344, 0, 350, 0, 356, 0, 362, 0, 367, 0, 373, 0, 378, 0, 384, 0, 389, 0, 394, 0, 399, 0, 404, 0, 409, 0, 414, 0, 419, 0, 424, 0, 429, 0, 434, 0, 438, 0, 443, 0, 448, 0, 452, 0, 457, 0, 461, 0, 465, 0, 470, 0, 474, 0, 478, 0, 483, 0, 487, 0, 491, 0, 495, 0, 499, 0, 503, 0, 507, 0, 512, 0, 515, 0, 519, 0, 523, 0, 527, 0, 531, 0, 535, 0, 539, 0, 543, 0, 546, 0, 550, 0, 554, 0, 557, 0, 561, 0, 565, 0, 568, 0, 572, 0, 576, 0, 579, 0, 583, 0, 586, 0, 590, 0, 593, 0, 596, 0, 600, 0, 603, 0, 607, 0, 610, 0, 613, 0, 617, 0, 620, 0, 623, 0, 627, 0, 630, 0, 633, 0, 636, 0, 640, 0, 643, 0, 646, 0, 649, 0, 652, 0, 655, 0, 658, 0, 662, 0, 665, 0, 668, 0, 671, 0, 674, 0, 677, 0, 680, 0, 683, 0, 686, 0, 689, 0, 692, 0, 695, 0, 698, 0, 701, 0, 704, 0, 706, 0, 709, 0, 712, 0, 715, 0, 718, 0, 721, 0, 724, 0, 726, 0, 729, 0, 732, 0, 735, 0, 738, 0, 740, 0, 743, 0, 746, 0, 749, 0, 751, 0, 754, 0, 757, 0, 759, 0, 762, 0, 765, 0, 768, 0, 770, 0, 773, 0, 775, 0, 778, 0, 781, 0, 783, 0, 786, 0, 789, 0, 791, 0, 794, 0, 796, 0, 799, 0, 801, 0, 804, 0, 807, 0, 809, 0, 812, 0, 814, 0, 817, 0, 819, 0, 822, 0, 824, 0, 827, 0, 829, 0, 832, 0, 834, 0, 836, 0, 839, 0, 841, 0, 844, 0, 846, 0, 849, 0, 851, 0, 853, 0, 856, 0, 858, 0, 861, 0, 863, 0, 865, 0, 868, 0, 870, 0, 872, 0, 875, 0, 877, 0, 879, 0, 882, 0, 884, 0, 886, 0, 889, 0, 891, 0, 893, 0, 896, 0, 898, 0, 900, 0, 902, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL10AllocFramevE2ix = allocate(1, "i32", ALLOC_STATIC);
			__ZZL10AllocFramevE10frame_pool = allocate(10240, ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8"], ALLOC_STATIC);
			_translator = allocate(1, "%struct.Translator*", ALLOC_STATIC);
			_translator2 = allocate(1, "%struct.Translator*", ALLOC_STATIC);
			__ZL20translator2_language = allocate(20, "i8", ALLOC_STATIC);
			_f_trans = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			_option_tone2 = allocate(1, "i32", ALLOC_STATIC);
			_option_tone_flags = allocate(1, "i32", ALLOC_STATIC);
			_option_phonemes = allocate(1, "i32", ALLOC_STATIC);
			_option_phoneme_events = allocate(1, "i32", ALLOC_STATIC);
			_option_quiet = allocate(1, "i32", ALLOC_STATIC);
			_option_endpause = allocate(1, "i32", ALLOC_STATIC);
			_option_capitals = allocate(1, "i32", ALLOC_STATIC);
			_option_punctuation = allocate(1, "i32", ALLOC_STATIC);
			_option_sayas = allocate(1, "i32", ALLOC_STATIC);
			_option_ssml = allocate(1, "i32", ALLOC_STATIC);
			_option_phoneme_input = allocate(1, "i32", ALLOC_STATIC);
			_option_phoneme_variants = allocate(1, "i32", ALLOC_STATIC);
			_option_wordgap = allocate(1, "i32", ALLOC_STATIC);
			_skip_sentences = allocate(1, "i32", ALLOC_STATIC);
			_skip_words = allocate(1, "i32", ALLOC_STATIC);
			_skip_characters = allocate(1, "i32", ALLOC_STATIC);
			_skip_marker = allocate(50, "i8", ALLOC_STATIC);
			_skipping_text = allocate(1, "i32", ALLOC_STATIC);
			_end_character_position = allocate(1, "i32", ALLOC_STATIC);
			_count_sentences = allocate(1, "i32", ALLOC_STATIC);
			_count_words = allocate(1, "i32", ALLOC_STATIC);
			_clause_start_char = allocate(1, "i32", ALLOC_STATIC);
			_clause_start_word = allocate(1, "i32", ALLOC_STATIC);
			_new_sentence = allocate(1, "i32", ALLOC_STATIC);
			_pre_pause = allocate(1, "i32", ALLOC_STATIC);
			_word_phonemes = allocate(160, "i8", ALLOC_STATIC);
			_n_ph_list2 = allocate(1, "i32", ALLOC_STATIC);
			_ph_list2 = allocate(8000, ["i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i16", 0, "i16", 0], ALLOC_STATIC);
			_option_punctlist = allocate(240, "i32", ALLOC_STATIC);
			_ctrl_embedded = allocate([1], ["i8", 0, 0, 0, 0], ALLOC_STATIC);
			_option_multibyte = allocate(1, "i32", ALLOC_STATIC);
			_option_linelength = allocate(1, "i32", ALLOC_STATIC);
			_embedded_list = allocate(1000, "i32", ALLOC_STATIC);
			_n_replace_phonemes = allocate(1, "i32", ALLOC_STATIC);
			_replace_phonemes = allocate(180, "i8", ALLOC_STATIC);
			__ZL10ISO_8859_1 = allocate([160, 0, 161, 0, 162, 0, 163, 0, 164, 0, 165, 0, 166, 0, 167, 0, 168, 0, 169, 0, 170, 0, 171, 0, 172, 0, 173, 0, 174, 0, 175, 0, 176, 0, 177, 0, 178, 0, 179, 0, 180, 0, 181, 0, 182, 0, 183, 0, 184, 0, 185, 0, 186, 0, 187, 0, 188, 0, 189, 0, 190, 0, 191, 0, 192, 0, 193, 0, 194, 0, 195, 0, 196, 0, 197, 0, 198, 0, 199, 0, 200, 0, 201, 0, 202, 0, 203, 0, 204, 0, 205, 0, 206, 0, 207, 0, 208, 0, 209, 0, 210, 0, 211, 0, 212, 0, 213, 0, 214, 0, 215, 0, 216, 0, 217, 0, 218, 0, 219, 0, 220, 0, 221, 0, 222, 0, 223, 0, 224, 0, 225, 0, 226, 0, 227, 0, 228, 0, 229, 0, 230, 0, 231, 0, 232, 0, 233, 0, 234, 0, 235, 0, 236, 0, 237, 0, 238, 0, 239, 0, 240, 0, 241, 0, 242, 0, 243, 0, 244, 0, 245, 0, 246, 0, 247, 0, 248, 0, 249, 0, 250, 0, 251, 0, 252, 0, 253, 0, 254, 0, 255, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10ISO_8859_2 = allocate([160, 0, 260, 0, 728, 0, 321, 0, 164, 0, 317, 0, 346, 0, 167, 0, 168, 0, 352, 0, 350, 0, 356, 0, 377, 0, 173, 0, 381, 0, 379, 0, 176, 0, 261, 0, 731, 0, 322, 0, 180, 0, 318, 0, 347, 0, 711, 0, 184, 0, 353, 0, 351, 0, 357, 0, 378, 0, 733, 0, 382, 0, 380, 0, 340, 0, 193, 0, 194, 0, 258, 0, 196, 0, 313, 0, 262, 0, 199, 0, 268, 0, 201, 0, 280, 0, 203, 0, 282, 0, 205, 0, 206, 0, 270, 0, 272, 0, 323, 0, 327, 0, 211, 0, 212, 0, 336, 0, 214, 0, 215, 0, 344, 0, 366, 0, 218, 0, 368, 0, 220, 0, 221, 0, 354, 0, 223, 0, 341, 0, 225, 0, 226, 0, 259, 0, 228, 0, 314, 0, 263, 0, 231, 0, 269, 0, 233, 0, 281, 0, 235, 0, 283, 0, 237, 0, 238, 0, 271, 0, 273, 0, 324, 0, 328, 0, 243, 0, 244, 0, 337, 0, 246, 0, 247, 0, 345, 0, 367, 0, 250, 0, 369, 0, 252, 0, 253, 0, 355, 0, 729, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10ISO_8859_3 = allocate([160, 0, 294, 0, 728, 0, 163, 0, 164, 0, 0, 0, 292, 0, 167, 0, 168, 0, 304, 0, 350, 0, 286, 0, 308, 0, 173, 0, 0, 0, 379, 0, 176, 0, 295, 0, 178, 0, 179, 0, 180, 0, 181, 0, 293, 0, 183, 0, 184, 0, 305, 0, 351, 0, 287, 0, 309, 0, 189, 0, 0, 0, 380, 0, 192, 0, 193, 0, 194, 0, 0, 0, 196, 0, 266, 0, 264, 0, 199, 0, 200, 0, 201, 0, 202, 0, 203, 0, 204, 0, 205, 0, 206, 0, 207, 0, 0, 0, 209, 0, 210, 0, 211, 0, 212, 0, 288, 0, 214, 0, 215, 0, 284, 0, 217, 0, 218, 0, 219, 0, 220, 0, 364, 0, 348, 0, 223, 0, 224, 0, 225, 0, 226, 0, 0, 0, 228, 0, 267, 0, 265, 0, 231, 0, 232, 0, 233, 0, 234, 0, 235, 0, 236, 0, 237, 0, 238, 0, 239, 0, 0, 0, 241, 0, 242, 0, 243, 0, 244, 0, 289, 0, 246, 0, 247, 0, 285, 0, 249, 0, 250, 0, 251, 0, 252, 0, 365, 0, 349, 0, 729, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10ISO_8859_4 = allocate([160, 0, 260, 0, 312, 0, 342, 0, 164, 0, 296, 0, 315, 0, 167, 0, 168, 0, 352, 0, 274, 0, 290, 0, 358, 0, 173, 0, 381, 0, 175, 0, 176, 0, 261, 0, 731, 0, 343, 0, 180, 0, 297, 0, 316, 0, 711, 0, 184, 0, 353, 0, 275, 0, 291, 0, 359, 0, 330, 0, 382, 0, 331, 0, 256, 0, 193, 0, 194, 0, 195, 0, 196, 0, 197, 0, 198, 0, 302, 0, 268, 0, 201, 0, 280, 0, 203, 0, 278, 0, 205, 0, 206, 0, 298, 0, 272, 0, 325, 0, 332, 0, 310, 0, 212, 0, 213, 0, 214, 0, 215, 0, 216, 0, 370, 0, 218, 0, 219, 0, 220, 0, 360, 0, 362, 0, 223, 0, 257, 0, 225, 0, 226, 0, 227, 0, 228, 0, 229, 0, 230, 0, 303, 0, 269, 0, 233, 0, 281, 0, 235, 0, 279, 0, 237, 0, 238, 0, 299, 0, 273, 0, 326, 0, 333, 0, 311, 0, 244, 0, 245, 0, 246, 0, 247, 0, 248, 0, 371, 0, 250, 0, 251, 0, 252, 0, 361, 0, 363, 0, 729, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10ISO_8859_5 = allocate([160, 0, 1025, 0, 1026, 0, 1027, 0, 1028, 0, 1029, 0, 1030, 0, 1031, 0, 1032, 0, 1033, 0, 1034, 0, 1035, 0, 1036, 0, 173, 0, 1038, 0, 1039, 0, 1040, 0, 1041, 0, 1042, 0, 1043, 0, 1044, 0, 1045, 0, 1046, 0, 1047, 0, 1048, 0, 1049, 0, 1050, 0, 1051, 0, 1052, 0, 1053, 0, 1054, 0, 1055, 0, 1056, 0, 1057, 0, 1058, 0, 1059, 0, 1060, 0, 1061, 0, 1062, 0, 1063, 0, 1064, 0, 1065, 0, 1066, 0, 1067, 0, 1068, 0, 1069, 0, 1070, 0, 1071, 0, 1072, 0, 1073, 0, 1074, 0, 1075, 0, 1076, 0, 1077, 0, 1078, 0, 1079, 0, 1080, 0, 1081, 0, 1082, 0, 1083, 0, 1084, 0, 1085, 0, 1086, 0, 1087, 0, 1088, 0, 1089, 0, 1090, 0, 1091, 0, 1092, 0, 1093, 0, 1094, 0, 1095, 0, 1096, 0, 1097, 0, 1098, 0, 1099, 0, 1100, 0, 1101, 0, 1102, 0, 1103, 0, 8470, 0, 1105, 0, 1106, 0, 1107, 0, 1108, 0, 1109, 0, 1110, 0, 1111, 0, 1112, 0, 1113, 0, 1114, 0, 1115, 0, 1116, 0, 167, 0, 1118, 0, 1119, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10ISO_8859_7 = allocate([160, 0, 8216, 0, 8217, 0, 163, 0, 8364, 0, 8367, 0, 166, 0, 167, 0, 168, 0, 169, 0, 890, 0, 171, 0, 172, 0, 173, 0, 0, 0, 8213, 0, 176, 0, 177, 0, 178, 0, 179, 0, 900, 0, 901, 0, 902, 0, 183, 0, 904, 0, 905, 0, 906, 0, 187, 0, 908, 0, 189, 0, 910, 0, 911, 0, 912, 0, 913, 0, 914, 0, 915, 0, 916, 0, 917, 0, 918, 0, 919, 0, 920, 0, 921, 0, 922, 0, 923, 0, 924, 0, 925, 0, 926, 0, 927, 0, 928, 0, 929, 0, 0, 0, 931, 0, 932, 0, 933, 0, 934, 0, 935, 0, 936, 0, 937, 0, 938, 0, 939, 0, 940, 0, 941, 0, 942, 0, 943, 0, 944, 0, 945, 0, 946, 0, 947, 0, 948, 0, 949, 0, 950, 0, 951, 0, 952, 0, 953, 0, 954, 0, 955, 0, 956, 0, 957, 0, 958, 0, 959, 0, 960, 0, 961, 0, 962, 0, 963, 0, 964, 0, 965, 0, 966, 0, 967, 0, 968, 0, 969, 0, 970, 0, 971, 0, 972, 0, 973, 0, 974, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL10ISO_8859_9 = allocate([160, 0, 161, 0, 162, 0, 163, 0, 164, 0, 165, 0, 166, 0, 167, 0, 168, 0, 169, 0, 170, 0, 171, 0, 172, 0, 173, 0, 174, 0, 175, 0, 176, 0, 177, 0, 178, 0, 179, 0, 180, 0, 181, 0, 182, 0, 183, 0, 184, 0, 185, 0, 186, 0, 187, 0, 188, 0, 189, 0, 190, 0, 191, 0, 192, 0, 193, 0, 194, 0, 195, 0, 196, 0, 197, 0, 198, 0, 199, 0, 200, 0, 201, 0, 202, 0, 203, 0, 204, 0, 205, 0, 206, 0, 207, 0, 286, 0, 209, 0, 210, 0, 211, 0, 212, 0, 213, 0, 214, 0, 215, 0, 216, 0, 217, 0, 218, 0, 219, 0, 220, 0, 304, 0, 350, 0, 223, 0, 224, 0, 225, 0, 226, 0, 227, 0, 228, 0, 229, 0, 230, 0, 231, 0, 232, 0, 233, 0, 234, 0, 235, 0, 236, 0, 237, 0, 238, 0, 239, 0, 287, 0, 241, 0, 242, 0, 243, 0, 244, 0, 245, 0, 246, 0, 247, 0, 248, 0, 249, 0, 250, 0, 251, 0, 252, 0, 305, 0, 351, 0, 255, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL11ISO_8859_14 = allocate([160, 0, 7682, 0, 7683, 0, 163, 0, 266, 0, 267, 0, 7690, 0, 167, 0, 7808, 0, 169, 0, 7810, 0, 7691, 0, 7922, 0, 173, 0, 174, 0, 376, 0, 7710, 0, 7711, 0, 288, 0, 289, 0, 7744, 0, 7745, 0, 182, 0, 7766, 0, 7809, 0, 7767, 0, 7811, 0, 7776, 0, 7923, 0, 7812, 0, 7813, 0, 7777, 0, 192, 0, 193, 0, 194, 0, 195, 0, 196, 0, 197, 0, 198, 0, 199, 0, 200, 0, 201, 0, 202, 0, 203, 0, 204, 0, 205, 0, 206, 0, 207, 0, 372, 0, 209, 0, 210, 0, 211, 0, 212, 0, 213, 0, 214, 0, 7786, 0, 216, 0, 217, 0, 218, 0, 219, 0, 220, 0, 221, 0, 374, 0, 223, 0, 224, 0, 225, 0, 226, 0, 227, 0, 228, 0, 229, 0, 230, 0, 231, 0, 232, 0, 233, 0, 234, 0, 235, 0, 236, 0, 237, 0, 238, 0, 239, 0, 373, 0, 241, 0, 242, 0, 243, 0, 244, 0, 245, 0, 246, 0, 7787, 0, 248, 0, 249, 0, 250, 0, 251, 0, 252, 0, 253, 0, 375, 0, 255, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL6KOI8_R = allocate([9552, 0, 9553, 0, 9554, 0, 1105, 0, 9555, 0, 9556, 0, 9557, 0, 9558, 0, 9559, 0, 9560, 0, 9561, 0, 9562, 0, 9563, 0, 9564, 0, 9565, 0, 9566, 0, 9567, 0, 9568, 0, 9569, 0, 1025, 0, 9570, 0, 9571, 0, 9572, 0, 9573, 0, 9574, 0, 9575, 0, 9576, 0, 9577, 0, 9578, 0, 9579, 0, 9580, 0, 169, 0, 1102, 0, 1072, 0, 1073, 0, 1094, 0, 1076, 0, 1077, 0, 1092, 0, 1075, 0, 1093, 0, 1080, 0, 1081, 0, 1082, 0, 1083, 0, 1084, 0, 1085, 0, 1086, 0, 1087, 0, 1103, 0, 1088, 0, 1089, 0, 1090, 0, 1091, 0, 1078, 0, 1074, 0, 1100, 0, 1099, 0, 1079, 0, 1096, 0, 1101, 0, 1097, 0, 1095, 0, 1098, 0, 1070, 0, 1040, 0, 1041, 0, 1062, 0, 1044, 0, 1045, 0, 1060, 0, 1043, 0, 1061, 0, 1048, 0, 1049, 0, 1050, 0, 1051, 0, 1052, 0, 1053, 0, 1054, 0, 1055, 0, 1071, 0, 1056, 0, 1057, 0, 1058, 0, 1059, 0, 1046, 0, 1042, 0, 1068, 0, 1067, 0, 1047, 0, 1064, 0, 1069, 0, 1065, 0, 1063, 0, 1066, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL5ISCII = allocate([32, 0, 2305, 0, 2306, 0, 2307, 0, 2309, 0, 2310, 0, 2311, 0, 2312, 0, 2313, 0, 2314, 0, 2315, 0, 2318, 0, 2319, 0, 2320, 0, 2317, 0, 2322, 0, 2323, 0, 2324, 0, 2321, 0, 2325, 0, 2326, 0, 2327, 0, 2328, 0, 2329, 0, 2330, 0, 2331, 0, 2332, 0, 2333, 0, 2334, 0, 2335, 0, 2336, 0, 2337, 0, 2338, 0, 2339, 0, 2340, 0, 2341, 0, 2342, 0, 2343, 0, 2344, 0, 2345, 0, 2346, 0, 2347, 0, 2348, 0, 2349, 0, 2350, 0, 2351, 0, 2399, 0, 2352, 0, 2353, 0, 2354, 0, 2355, 0, 2356, 0, 2357, 0, 2358, 0, 2359, 0, 2360, 0, 2361, 0, 32, 0, 2366, 0, 2367, 0, 2368, 0, 2369, 0, 2370, 0, 2371, 0, 2374, 0, 2375, 0, 2376, 0, 2373, 0, 2378, 0, 2379, 0, 2380, 0, 2377, 0, 2381, 0, 2364, 0, 2404, 0, 32, 0, 32, 0, 32, 0, 32, 0, 32, 0, 32, 0, 48, 0, 49, 0, 50, 0, 51, 0, 52, 0, 53, 0, 54, 0, 55, 0, 56, 0, 57, 0, 32, 0, 32, 0, 32, 0, 32, 0, 32, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			_charsets = allocate(80, "i16*", ALLOC_STATIC);
			__ZL15length_mod_tabs = allocate(24, "i8*", ALLOC_STATIC);
			__ZZ7IsAlphajE18extra_indic_alphas = allocate([2672, 0, 2673, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL8brackets = allocate([40, 0, 41, 0, 91, 0, 93, 0, 123, 0, 125, 0, 60, 0, 62, 0, 34, 0, 39, 0, 96, 0, 171, 0, 187, 0, 12298, 0, 12299, 0, -8132, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ8utf8_outjPcE4code = allocate([0, 192, 224, 240], "i8", ALLOC_STATIC);
			__ZZ8utf8_in2PiPKciE4mask = allocate([255, 31, 15, 7], "i8", ALLOC_STATIC);
			__str543 = allocate([40, 37, 115, 41, 32, 37, 115, 32, 32, 45, 62, 32, 40, 37, 115, 41, 32, 0], "i8", ALLOC_STATIC);
			__str1544 = allocate([37, 115, 10, 10, 0], "i8", ALLOC_STATIC);
			__ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_zz = allocate([0, 122, 122, 0], "i8", ALLOC_STATIC);
			__ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_iz = allocate([0, 105, 122, 0], "i8", ALLOC_STATIC);
			__ZZ13TranslateWordP10TranslatorPciP8WORD_TABE7word_ss = allocate([0, 115, 115, 0], "i8", ALLOC_STATIC);
			__str2545 = allocate([95, 48, 108, 97, 110, 103, 0], "i8", ALLOC_STATIC);
			__str4547 = allocate([32, 32, 115, 117, 102, 102, 105, 120, 32, 91, 37, 115, 93, 10, 10, 0], "i8", ALLOC_STATIC);
			__str5548 = allocate([104, 115, 120, 0], "i8", ALLOC_STATIC);
			__str6549 = allocate([37, 115, 37, 115, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZL18any_stressed_words_b = allocate(1, "i1", ALLOC_STATIC);
			__ZZ15TranslateClauseP10TranslatorP7__sFILEPKvPiPPcE17voice_change_name = allocate(40, "i8", ALLOC_STATIC);
			__ZL11embedded_ix = allocate(1, "i32", ALLOC_STATIC);
			__ZL13embedded_read = allocate(1, "i32", ALLOC_STATIC);
			__ZL6source = allocate(740, "i8", ALLOC_STATIC);
			__str7550 = allocate([67, 76, 65, 85, 83, 69, 32, 37, 120, 58, 10, 0], "i8", ALLOC_STATIC);
			__str8551 = allocate([69, 78, 68, 67, 76, 65, 85, 83, 69, 10, 0], "i8", ALLOC_STATIC);
			__ZL16max_clause_pause = allocate(1, "i32", ALLOC_STATIC);
			__ZL13option_sayas2 = allocate(1, "i32", ALLOC_STATIC);
			__ZL18count_sayas_digits = allocate(1, "i32", ALLOC_STATIC);
			__ZL6breaks = allocate([95, 0, 0, 0], ["i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL13word_emphasis_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL15option_emphasis = allocate(1, "i32", ALLOC_STATIC);
			__ZL13embedded_flag_b = allocate(1, "i1", ALLOC_STATIC);
			__str9552 = allocate([87, 79, 82, 68, 58, 32, 102, 108, 103, 61, 37, 46, 53, 120, 32, 108, 101, 110, 61, 37, 100, 32, 32, 39, 0], "i8", ALLOC_STATIC);
			__str10553 = allocate([39, 10, 0], "i8", ALLOC_STATIC);
			__str11554 = allocate([95, 94, 95, 0], "i8", ALLOC_STATIC);
			__ZZL13TranslateCharP10TranslatorPcijjPiE20hangul_compatibility = allocate([0, 0, 1, 170, 2, 172, 173, 3, 4, 5, 176, 177, 178, 179, 180, 180, 182, 6, 7, 8, 185, 9, 10, 188, 12, 13, 14, 15, 16, 17, 18, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "i8", ALLOC_STATIC);
			__ZZL14SubstituteCharP10TranslatorjjPiE11ignore_next_b = allocate(1, "i1", ALLOC_STATIC);
			__str12555 = allocate([80, 83, 65, 82, 72, 84, 73, 86, 89, 77, 85, 66, 70, 0], "i8", ALLOC_STATIC);
			__ZL14length_mods_en = allocate([100, 120, 100, 105, 100, 110, 110, 100, 95, 100, 105, 120, 105, 110, 125, 130, 135, 115, 125, 100, 105, 120, 75, 100, 75, 105, 120, 85, 75, 100, 105, 120, 85, 105, 95, 115, 120, 100, 95, 100, 110, 120, 95, 105, 100, 115, 120, 100, 100, 100, 105, 120, 100, 105, 95, 115, 120, 110, 95, 100, 105, 120, 100, 105, 105, 122, 125, 110, 105, 100, 105, 120, 100, 105, 105, 122, 125, 110, 105, 100, 105, 120, 95, 105, 100, 115, 120, 110, 100, 100, 100, 120, 100, 100, 100, 100, 100, 100, 100, 100], "i8", ALLOC_STATIC);
			__ZL15length_mods_en0 = allocate([100, 150, 100, 105, 110, 115, 110, 110, 110, 100, 105, 150, 105, 110, 125, 135, 140, 115, 135, 100, 105, 150, 90, 105, 90, 122, 135, 100, 90, 100, 105, 150, 100, 105, 100, 122, 135, 100, 100, 100, 105, 150, 100, 105, 105, 115, 135, 110, 105, 100, 105, 150, 100, 105, 105, 122, 130, 120, 125, 100, 105, 150, 100, 105, 110, 122, 125, 115, 110, 100, 105, 150, 100, 105, 105, 122, 135, 120, 105, 100, 105, 150, 100, 105, 105, 115, 135, 110, 105, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100], "i8", ALLOC_STATIC);
			__ZL17length_mods_equal = allocatei8", ALLOC_STATIC);
			__str580 = allocate([35, 10, 0], "i8", ALLOC_STATIC);
			__str1581 = allocate([117, 110, 97, 98, 108, 101, 32, 116, 111, 32, 103, 101, 116, 32, 46, 119, 97, 118, 32, 104, 101, 97, 100, 101, 114, 32, 102, 114, 111, 109, 32, 109, 98, 114, 111, 108, 97, 0], "i8", ALLOC_STATIC);
			__str2582 = allocate([82, 73, 70, 70, 0], "i8", ALLOC_STATIC);
			__str3583 = allocate([87, 65, 86, 69, 102, 109, 116, 32, 0], "i8", ALLOC_STATIC);
			__str4584 = allocate([109, 98, 114, 111, 108, 97, 32, 100, 105, 100, 32, 110, 111, 116, 32, 114, 101, 116, 117, 114, 110, 32, 97, 32, 46, 119, 97, 118, 32, 104, 101, 97, 100, 101, 114, 0], "i8", ALLOC_STATIC);
			__ZL14mbr_samplerate = allocate(1, "i32", ALLOC_STATIC);
			__ZL14mbr_voice_path = allocate(1, "i8*", ALLOC_STATIC);
			__ZL10mbr_volume = allocate([1], ["float", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL9mbr_state = allocate(1, "i32", ALLOC_STATIC);
			__ZL7mbr_pid = allocate(1, "i32", ALLOC_STATIC);
			__ZL10mbr_cmd_fd = allocate(1, "i32", ALLOC_STATIC);
			__str5585 = allocate([10, 35, 10, 0], "i8", ALLOC_STATIC);
			__ZL12mbr_audio_fd = allocate(1, "i32", ALLOC_STATIC);
			__ZL12mbr_errorbuf = allocate(160, "i8", ALLOC_STATIC);
			__ZL12mbr_error_fd = allocate(1, "i32", ALLOC_STATIC);
			__str7587 = allocate([114, 101, 97, 100, 40, 101, 114, 114, 111, 114, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str8588 = allocate([71, 111, 116, 32, 97, 32, 114, 101, 115, 101, 116, 32, 115, 105, 103, 110, 97, 108, 0], "i8", ALLOC_STATIC);
			__str9589 = allocate([73, 110, 112, 117, 116, 32, 70, 108, 117, 115, 104, 32, 83, 105, 103, 110, 97, 108, 0], "i8", ALLOC_STATIC);
			__str10590 = allocate([109, 98, 114, 111, 108, 97, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str11591 = allocate([109, 98, 114, 111, 108, 97, 32, 99, 108, 111, 115, 101, 100, 32, 115, 116, 100, 101, 114, 114, 32, 97, 110, 100, 32, 100, 105, 100, 32, 110, 111, 116, 32, 101, 120, 105, 116, 0], "i8", ALLOC_STATIC);
			__str12592 = allocate([119, 97, 105, 116, 112, 105, 100, 40, 41, 32, 105, 115, 32, 99, 111, 110, 102, 117, 115, 101, 100, 0], "i8", ALLOC_STATIC);
			__str13593 = allocate([109, 98, 114, 111, 108, 97, 32, 100, 105, 101, 100, 32, 98, 121, 32, 115, 105, 103, 110, 97, 108, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str14594 = allocate([109, 98, 114, 111, 108, 97, 32, 101, 120, 105, 116, 101, 100, 32, 119, 105, 116, 104, 32, 115, 116, 97, 116, 117, 115, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str15595 = allocate([109, 98, 114, 111, 108, 97, 32, 100, 105, 101, 100, 32, 97, 110, 100, 32, 119, 97, 105, 116, 32, 115, 116, 97, 116, 117, 115, 32, 105, 115, 32, 119, 101, 105, 114, 100, 0], "i8", ALLOC_STATIC);
			__str16596 = allocate([109, 98, 114, 111, 119, 114, 97, 112, 32, 101, 114, 114, 111, 114, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str17597 = allocate([44, 32, 40, 37, 115, 41, 0], "i8", ALLOC_STATIC);
			__ZL21mbr_pending_data_head = allocate(1, "%struct.datablock*", ALLOC_STATIC);
			__ZL21mbr_pending_data_tail = allocate(1, "%struct.datablock*", ALLOC_STATIC);
			__str18598 = allocate([112, 111, 108, 108, 40, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str19599 = allocate([109, 98, 114, 111, 108, 97, 32, 112, 114, 111, 99, 101, 115, 115, 32, 105, 115, 32, 115, 116, 97, 108, 108, 101, 100, 0], "i8", ALLOC_STATIC);
			__str20600 = allocate([119, 114, 105, 116, 101, 40, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str21601 = allocate([114, 101, 97, 100, 40, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZL13mbr_proc_stat = allocate(1, "i32", ALLOC_STATIC);
			__str22602 = allocate([109, 98, 114, 111, 108, 97, 32, 105, 110, 105, 116, 32, 114, 101, 113, 117, 101, 115, 116, 32, 119, 104, 101, 110, 32, 97, 108, 114, 101, 97, 100, 121, 32, 105, 110, 105, 116, 105, 97, 108, 105, 122, 101, 100, 0], "i8", ALLOC_STATIC);
			__str23603 = allocate([102, 111, 114, 107, 40, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str24604 = allocate([100, 117, 112, 50, 40, 41, 58, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str25605 = allocate([37, 103, 0], "i8", ALLOC_STATIC);
			__str27607 = allocate([45, 101, 0], "i8", ALLOC_STATIC);
			__str28608 = allocate([45, 118, 0], "i8", ALLOC_STATIC);
			__str30610 = allocate([45, 46, 119, 97, 118, 0], "i8", ALLOC_STATIC);
			__str31611 = allocate([109, 98, 114, 111, 108, 97, 58, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str32612 = allocate([47, 112, 114, 111, 99, 47, 37, 100, 47, 115, 116, 97, 116, 0], "i8", ALLOC_STATIC);
			__str33613 = allocate([47, 112, 114, 111, 99, 32, 105, 115, 32, 117, 110, 97, 99, 99, 101, 115, 115, 105, 98, 108, 101, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str34614 = allocate([102, 99, 110, 116, 108, 40, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str35615 = allocate([112, 105, 112, 101, 40, 41, 58, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZZ15SetIndicLettersP10TranslatorE15dev_consonants2 = allocate([2, 3, 88, 89, 90, 91, 92, 93, 94, 95], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_fr = allocate([190, 0, 170, 0, 190, 0, 200, 0, 0, 0, 0, 0, 190, 0, 240, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_fr = allocate([18, 16, 18, 18, 18, 18, 18, 18], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_sk = allocate([17, 17, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_sk = allocate([190, 0, 190, 0, 210, 0, 210, 0, 0, 0, 0, 0, 210, 0, 210, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_ta = allocate([200, 0, 200, 0, 210, 0, 210, 0, 0, 0, 0, 0, 230, 0, 230, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_ta = allocate([18, 18, 18, 18, 20, 20, 22, 22], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_af = allocate([170, 0, 140, 0, 220, 0, 220, 0, 0, 0, 0, 0, 250, 0, 270, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_bn = allocate([180, 0, 180, 0, 210, 0, 210, 0, 0, 0, 0, 0, 230, 0, 240, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_bn = allocate([18, 18, 18, 18, 20, 20, 22, 22], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_cy = allocate([170, 0, 220, 0, 180, 0, 180, 0, 0, 0, 0, 0, 250, 0, 270, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_cy = allocate([17, 15, 18, 18, 0, 0, 22, 20], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_da = allocate([160, 0, 140, 0, 200, 0, 200, 0, 0, 0, 0, 0, 220, 0, 230, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_de = allocate([150, 0, 130, 0, 200, 0, 200, 0, 0, 0, 0, 0, 270, 0, 270, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_de = allocate([20, 20, 20, 20, 20, 22, 22, 20], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_en = allocate([182, 0, 140, 0, 220, 0, 220, 0, 0, 0, 0, 0, 248, 0, 275, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__str630 = allocate([97, 101, 105, 111, 117, 121, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_el = allocate([155, 0, 180, 0, 210, 0, 210, 0, 0, 0, 0, 0, 270, 0, 300, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_el = allocate([15, 12, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE9el_vowels = allocate([16, 44, 45, 46, 47, 48, 49, 53, 55, 57, 63, 69, 73, 74, 75, 76, 77, 78, 79, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE10el_fvowels = allocate([45, 46, 47, 53, 55, 57, 69, 77, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE12el_voiceless = allocate([56, 58, 62, 64, 66, 67, 68, 70, 71, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE13el_consonants = allocate([50, 51, 52, 54, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 70, 71, 72, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE18el_char_apostrophe = allocate([963, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_eo = allocate([150, 0, 150, 0, 230, 0, 180, 0, 0, 0, 0, 0, 300, 0, 320, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_eo = allocate([16, 14, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE18eo_char_apostrophe = allocate([108, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_es = allocate([180, 0, 210, 0, 190, 0, 190, 0, 0, 0, 0, 0, 230, 0, 260, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_es = allocate([16, 12, 18, 18, 20, 20, 20, 20], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE20ca_punct_within_word = allocate([39, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_eu = allocate([200, 0, 200, 0, 200, 0, 200, 0, 0, 0, 0, 0, 210, 0, 230, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_eu = allocate([16, 16, 18, 18, 18, 18, 18, 18], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_fi = allocate([18, 16, 22, 22, 20, 22, 22, 22], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_fi = allocate([150, 0, 180, 0, 200, 0, 200, 0, 0, 0, 0, 0, 210, 0, 250, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_hi = allocate([190, 0, 190, 0, 210, 0, 210, 0, 0, 0, 0, 0, 230, 0, 250, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_hi = allocate([17, 14, 20, 19, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_hr = allocate([17, 17, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_hr = allocate([180, 0, 160, 0, 200, 0, 200, 0, 0, 0, 0, 0, 220, 0, 230, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_sr = allocate([160, 0, 150, 0, 200, 0, 200, 0, 0, 0, 0, 0, 250, 0, 260, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZL22replace_cyrillic_latin = allocate([1072, 0, 0, 0, 97, 0, 0, 0, 1073, 0, 0, 0, 98, 0, 0, 0, 1094, 0, 0, 0, 99, 0, 0, 0, 1115, 0, 0, 0, 263, 0, 0, 0, 1095, 0, 0, 0, 269, 0, 0, 0, 1119, 0, 0, 0, 25034852, 0, 0, 0, 1109, 0, 0, 0, 7995492, 0, 0, 0, 1076, 0, 0, 0, 100, 0, 0, 0, 1106, 0, 0, 0, 273, 0, 0, 0, 1077, 0, 0, 0, 101, 0, 0, 0, 1092, 0, 0, 0, 102, 0, 0, 0, 1075, 0, 0, 0, 103, 0, 0, 0, 1093, 0, 0, 0, 104, 0, 0, 0, 1080, 0, 0, 0, 105, 0, 0, 0, 1112, 0, 0, 0, 106, 0, 0, 0, 1082, 0, 0, 0, 107, 0, 0, 0, 1113, 0, 0, 0, 6946924, 0, 0, 0, 1083, 0, 0, 0, 108, 0, 0, 0, 1084, 0, 0, 0, 109, 0, 0, 0, 1114, 0, 0, 0, 6946926, 0, 0, 0, 1085, 0, 0, 0, 110, 0, 0, 0, 1086, 0, 0, 0, 111, 0, 0, 0, 1087, 0, 0, 0, 112, 0, 0, 0, 1088, 0, 0, 0, 114, 0, 0, 0, 1089, 0, 0, 0, 115, 0, 0, 0, 1096, 0, 0, 0, 353, 0, 0, 0, 1090, 0, 0, 0, 116, 0, 0, 0, 1091, 0, 0, 0, 117, 0, 0, 0, 1074, 0, 0, 0, 118, 0, 0, 0, 1079, 0, 0, 0, 122, 0, 0, 0, 1078, 0, 0, 0, 382, 0, 0, 0, 1107, 0, 0, 0, 273, 0, 0, 0, 1116, 0, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_hu = allocate([17, 17, 19, 19, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_hu = allocate([185, 0, 195, 0, 195, 0, 190, 0, 0, 0, 0, 0, 210, 0, 220, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_hy = allocate([250, 0, 200, 0, 250, 0, 250, 0, 0, 0, 0, 0, 250, 0, 250, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE9hy_vowels = allocate([49, 53, 55, 56, 59, 72, 85, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE13hy_consonants = allocate([50, 51, 52, 54, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_id = allocate([160, 0, 200, 0, 180, 0, 180, 0, 0, 0, 0, 0, 220, 0, 240, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_id = allocate([16, 18, 18, 18, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_is = allocate([180, 0, 160, 0, 200, 0, 200, 0, 0, 0, 0, 0, 240, 0, 250, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE16is_lettergroup_B = allocate([99, 0, 0, 0, 102, 0, 0, 0, 104, 0, 0, 0, 107, 0, 0, 0, 112, 0, 0, 0, 116, 0, 0, 0, 120, 0, 0, 0, 254, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str1631 = allocate([107, 112, 115, 116, 0], "i8", ALLOC_STATIC);
			__str2632 = allocate([106, 118, 114, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_it = allocate([150, 0, 140, 0, 170, 0, 170, 0, 0, 0, 0, 0, 300, 0, 330, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_it = allocate([15, 14, 19, 19, 20, 22, 22, 20], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE18stress_lengths_jbo = allocate([145, 0, 145, 0, 170, 0, 160, 0, 0, 0, 0, 0, 330, 0, 350, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE21jbo_punct_within_word = allocate([46, 0, 0, 0, 44, 0, 0, 0, 39, 0, 0, 0, 712, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE9ka_vowels = allocate([80, 84, 88, 93, 99, 117, 119, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE13ka_consonants = allocate([81, 82, 83, 85, 86, 87, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 118, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE10ko_ivowels = allocate([99, 100, 103, 104, 109, 114, 116, 117, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE9ko_voiced = allocate([2, 5, 6, 171, 175, 183, 188, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_ku = allocate([18, 18, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_ku = allocate([180, 0, 180, 0, 190, 0, 180, 0, 0, 0, 0, 0, 230, 0, 240, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_lv = allocate([17, 13, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_lv = allocate([180, 0, 130, 0, 210, 0, 210, 0, 0, 0, 0, 0, 210, 0, 210, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE15vowels_cyrillic = allocate([1088, 0, 0, 0, 1072, 0, 0, 0, 1077, 0, 0, 0, 1080, 0, 0, 0, 1081, 0, 0, 0, 1086, 0, 0, 0, 1091, 0, 0, 0, 1099, 0, 0, 0, 1101, 0, 0, 0, 1102, 0, 0, 0, 1103, 0, 0, 0, 1104, 0, 0, 0, 1105, 0, 0, 0, 1110, 0, 0, 0, 1111, 0, 0, 0, 1117, 0, 0, 0, 1118, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_mk = allocate([17, 17, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_mk = allocate([180, 0, 160, 0, 200, 0, 200, 0, 0, 0, 0, 0, 220, 0, 230, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_nl = allocate([160, 0, 135, 0, 210, 0, 210, 0, 0, 0, 0, 0, 260, 0, 280, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__str3633 = allocate([101, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_no = allocate([160, 0, 140, 0, 200, 0, 200, 0, 0, 0, 0, 0, 220, 0, 230, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_om = allocate([18, 15, 20, 20, 20, 22, 22, 22], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_om = allocate([200, 0, 200, 0, 200, 0, 200, 0, 0, 0, 0, 0, 200, 0, 200, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_pl = allocate([160, 0, 190, 0, 175, 0, 175, 0, 0, 0, 0, 0, 200, 0, 210, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_pl = allocate([17, 13, 19, 19, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_pt = allocate([170, 0, 115, 0, 210, 0, 240, 0, 0, 0, 0, 0, 260, 0, 280, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_pt = allocate([16, 11, 19, 21, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__str4634 = allocate([98, 99, 100, 102, 103, 106, 107, 109, 110, 112, 113, 115, 116, 118, 120, 122, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_ro = allocate([170, 0, 170, 0, 180, 0, 180, 0, 0, 0, 0, 0, 240, 0, 260, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_ro = allocate([15, 13, 18, 18, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__str5635 = allocate([98, 100, 103, 106, 108, 109, 110, 114, 118, 119, 122, 97, 101, 105, 111, 117, 121, 0], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_sq = allocate([150, 0, 150, 0, 180, 0, 180, 0, 0, 0, 0, 0, 300, 0, 300, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_sq = allocate([16, 12, 16, 16, 20, 20, 21, 19], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_sv = allocate([16, 16, 20, 20, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_sv = allocate([160, 0, 135, 0, 220, 0, 220, 0, 0, 0, 0, 0, 250, 0, 280, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_sw = allocate([160, 0, 170, 0, 200, 0, 200, 0, 0, 0, 0, 0, 320, 0, 340, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_sw = allocate([16, 12, 19, 19, 20, 22, 22, 21], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_tr = allocate([18, 16, 20, 21, 20, 21, 21, 20], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_tr = allocate([190, 0, 180, 0, 200, 0, 230, 0, 0, 0, 0, 0, 240, 0, 250, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_vi = allocate([150, 0, 150, 0, 180, 0, 180, 0, 210, 0, 230, 0, 230, 0, 240, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_vi = allocate([16, 16, 16, 16, 22, 22, 22, 22], "i8", ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE9vowels_vi = allocate([97, 0, 0, 0, 224, 0, 0, 0, 225, 0, 0, 0, 7843, 0, 0, 0, 227, 0, 0, 0, 7841, 0, 0, 0, 259, 0, 0, 0, 7857, 0, 0, 0, 7855, 0, 0, 0, 7859, 0, 0, 0, 7861, 0, 0, 0, 7863, 0, 0, 0, 226, 0, 0, 0, 7847, 0, 0, 0, 7845, 0, 0, 0, 7849, 0, 0, 0, 7851, 0, 0, 0, 7853, 0, 0, 0, 101, 0, 0, 0, 232, 0, 0, 0, 233, 0, 0, 0, 7867, 0, 0, 0, 7869, 0, 0, 0, 7865, 0, 0, 0, 234, 0, 0, 0, 7873, 0, 0, 0, 7871, 0, 0, 0, 7875, 0, 0, 0, 7877, 0, 0, 0, 7879, 0, 0, 0, 105, 0, 0, 0, 236, 0, 0, 0, 237, 0, 0, 0, 7881, 0, 0, 0, 297, 0, 0, 0, 7883, 0, 0, 0, 111, 0, 0, 0, 242, 0, 0, 0, 243, 0, 0, 0, 7887, 0, 0, 0, 245, 0, 0, 0, 7885, 0, 0, 0, 244, 0, 0, 0, 7891, 0, 0, 0, 7889, 0, 0, 0, 7893, 0, 0, 0, 7895, 0, 0, 0, 7897, 0, 0, 0, 417, 0, 0, 0, 7901, 0, 0, 0, 7899, 0, 0, 0, 7903, 0, 0, 0, 7905, 0, 0, 0, 7907, 0, 0, 0, 117, 0, 0, 0, 249, 0, 0, 0, 250, 0, 0, 0, 7911, 0, 0, 0, 361, 0, 0, 0, 7909, 0, 0, 0, 432, 0, 0, 0, 7915, 0, 0, 0, 7913, 0, 0, 0, 7917, 0, 0, 0, 7919, 0, 0, 0, 7921, 0, 0, 0, 121, 0, 0, 0, 7923, 0, 0, 0, 253, 0, 0, 0, 7927, 0, 0, 0, 7929, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE17stress_lengths_zh = allocate([230, 0, 150, 0, 230, 0, 230, 0, 230, 0, 0, 0, 240, 0, 250, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ16SelectTranslatorPKcE14stress_amps_zh = allocate([22, 16, 22, 22, 22, 22, 22, 22], "i8", ALLOC_STATIC);
			__ZZL18Translator_RussianP10TranslatorE14stress_amps_ru = allocate([16, 16, 18, 18, 20, 24, 24, 22], "i8", ALLOC_STATIC);
			__ZZL18Translator_RussianP10TranslatorE17stress_lengths_ru = allocate([150, 0, 140, 0, 220, 0, 220, 0, 0, 0, 0, 0, 260, 0, 280, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL18Translator_RussianP10TranslatorE11ru_ivowels2 = allocate([44, 21, 24, 46, 47, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE9ru_vowels = allocate([16, 21, 49, 24, 30, 35, 43, 45, 46, 47, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE13ru_consonants = allocate([17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 44, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE7ru_soft = allocate([44, 25, 39, 41, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE7ru_hard = allocate([42, 22, 38, 40, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE10ru_nothard = allocate([17, 18, 19, 20, 23, 25, 26, 27, 28, 29, 31, 32, 33, 34, 36, 37, 39, 41, 44, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE9ru_voiced = allocate([17, 18, 19, 20, 22, 23, 0], "i8", ALLOC_STATIC);
			__ZZL18SetCyrillicLettersP10TranslatorE10ru_ivowels = allocate([44, 46, 47, 49, 0], "i8", ALLOC_STATIC);
			__ZL8pairs_ru = allocate([268, 0, 270, 0, 275, 0, 769, 0, 783, 0, 1550, 0, 1553, 0, 2307, 0, 2817, 0, 2831, 0, 3073, 0, 3081, 0, 3585, 0, 3590, 0, 3593, 0, 3598, 0, 3599, 0, 3612, 0, 3843, 0, 3857, 0, 3858, 0, 4111, 0, 4113, 0, 4353, 0, 4358, 0, 4361, 0, 4367, 0, 4627, 0, 4640, 0, 32767, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL13NewTranslatorvE12stress_amps2 = allocate([18, 18, 20, 20, 20, 22, 22, 20], "i8", ALLOC_STATIC);
			__ZZL13NewTranslatorvE15stress_lengths2 = allocate([182, 0, 140, 0, 220, 0, 220, 0, 220, 0, 240, 0, 260, 0, 280, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL13NewTranslatorvE13empty_wstring = allocate(4, "i32", ALLOC_STATIC);
			__ZZL13NewTranslatorvE13punct_in_word = allocate([39, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZL13NewTranslatorvE13default_tunes = allocate([0, 1, 2, 3, 0, 0], "i8", ALLOC_STATIC);
			__str6636 = allocate([97, 101, 105, 111, 117, 0], "i8", ALLOC_STATIC);
			__str7637 = allocate([98, 99, 100, 102, 103, 106, 107, 108, 109, 110, 112, 113, 115, 116, 118, 120, 122, 0], "i8", ALLOC_STATIC);
			__str8638 = allocate([98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 122, 0], "i8", ALLOC_STATIC);
			__str9639 = allocate([104, 108, 109, 110, 114, 0], "i8", ALLOC_STATIC);
			__str10640 = allocate([99, 102, 104, 107, 112, 113, 115, 116, 120, 0], "i8", ALLOC_STATIC);
			__str11641 = allocate([98, 100, 103, 106, 108, 109, 110, 114, 118, 119, 121, 122, 0], "i8", ALLOC_STATIC);
			__str12642 = allocate([101, 105, 121, 0], "i8", ALLOC_STATIC);
			__str13643 = allocate(1, "i8", ALLOC_STATIC);
			__str646 = allocate([117, 110, 107, 110, 111, 119, 110, 0], "i8", ALLOC_STATIC);
			__str1647 = allocate([109, 97, 108, 101, 0], "i8", ALLOC_STATIC);
			__str2648 = allocate([102, 101, 109, 97, 108, 101, 0], "i8", ALLOC_STATIC);
			_genders = allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			_tone_points = allocate([600, 0, 0, 0, 170, 0, 0, 0, 1200, 0, 0, 0, 135, 0, 0, 0, 2000, 0, 0, 0, 110, 0, 0, 0, 3000, 0, 0, 0, 110, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			_formant_rate = allocate(36, "i32", ALLOC_STATIC);
			_voice_selected = allocate(24, ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STATIC);
			__str3653 = allocate([114, 101, 100, 117, 99, 101, 95, 116, 0], "i8", ALLOC_STATIC);
			__str4654 = allocate([98, 114, 97, 99, 107, 101, 116, 0], "i8", ALLOC_STATIC);
			__ZL11options_tab = allocate([0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__str5655 = allocate([110, 97, 109, 101, 0], "i8", ALLOC_STATIC);
			__str6656 = allocate([108, 97, 110, 103, 117, 97, 103, 101, 0], "i8", ALLOC_STATIC);
			__str7657 = allocate([103, 101, 110, 100, 101, 114, 0], "i8", ALLOC_STATIC);
			__str8658 = allocate([102, 111, 114, 109, 97, 110, 116, 0], "i8", ALLOC_STATIC);
			__str9659 = allocate([112, 105, 116, 99, 104, 0], "i8", ALLOC_STATIC);
			__str10660 = allocate([112, 104, 111, 110, 101, 109, 101, 115, 0], "i8", ALLOC_STATIC);
			__str11661 = allocate([116, 114, 97, 110, 115, 108, 97, 116, 111, 114, 0], "i8", ALLOC_STATIC);
			__str12662 = allocate([100, 105, 99, 116, 105, 111, 110, 97, 114, 121, 0], "i8", ALLOC_STATIC);
			__str13663 = allocate([115, 116, 114, 101, 115, 115, 76, 101, 110, 103, 116, 104, 0], "i8", ALLOC_STATIC);
			__str14664 = allocate([115, 116, 114, 101, 115, 115, 65, 109, 112, 0], "i8", ALLOC_STATIC);
			__str15665 = allocate([115, 116, 114, 101, 115, 115, 65, 100, 100, 0], "i8", ALLOC_STATIC);
			__str16666 = allocate([105, 110, 116, 111, 110, 97, 116, 105, 111, 110, 0], "i8", ALLOC_STATIC);
			__str17667 = allocate([116, 117, 110, 101, 115, 0], "i8", ALLOC_STATIC);
			__str18668 = allocate([100, 105, 99, 116, 114, 117, 108, 101, 115, 0], "i8", ALLOC_STATIC);
			__str19669 = allocate([115, 116, 114, 101, 115, 115, 114, 117, 108, 101, 0], "i8", ALLOC_STATIC);
			__str20670 = allocate([99, 104, 97, 114, 115, 101, 116, 0], "i8", ALLOC_STATIC);
			__str21671 = allocate([114, 101, 112, 108, 97, 99, 101, 0], "i8", ALLOC_STATIC);
			__str22672 = allocate([119, 111, 114, 100, 115, 0], "i8", ALLOC_STATIC);
			__str23673 = allocate([101, 99, 104, 111, 0], "i8", ALLOC_STATIC);
			__str24674 = allocate([102, 108, 117, 116, 116, 101, 114, 0], "i8", ALLOC_STATIC);
			__str25675 = allocate([114, 111, 117, 103, 104, 110, 101, 115, 115, 0], "i8", ALLOC_STATIC);
			__str26676 = allocate([99, 108, 97, 114, 105, 116, 121, 0], "i8", ALLOC_STATIC);
			__str27677 = allocate([116, 111, 110, 101, 0], "i8", ALLOC_STATIC);
			__str28678 = allocate([118, 111, 105, 99, 105, 110, 103, 0], "i8", ALLOC_STATIC);
			__str29679 = allocate([98, 114, 101, 97, 116, 104, 0], "i8", ALLOC_STATIC);
			__str30680 = allocate([98, 114, 101, 97, 116, 104, 119, 0], "i8", ALLOC_STATIC);
			__str31681 = allocate([110, 117, 109, 98, 101, 114, 115, 0], "i8", ALLOC_STATIC);
			__str32682 = allocate([111, 112, 116, 105, 111, 110, 0], "i8", ALLOC_STATIC);
			__str33683 = allocate([109, 98, 114, 111, 108, 97, 0], "i8", ALLOC_STATIC);
			__str34684 = allocate([99, 111, 110, 115, 111, 110, 97, 110, 116, 115, 0], "i8", ALLOC_STATIC);
			__str35685 = allocate([107, 108, 97, 116, 116, 0], "i8", ALLOC_STATIC);
			__str36686 = allocate([102, 97, 115, 116, 95, 116, 101, 115, 116, 50, 0], "i8", ALLOC_STATIC);
			__str37687 = allocate([115, 112, 101, 101, 100, 0], "i8", ALLOC_STATIC);
			__str38688 = allocate([108, 95, 100, 105, 101, 114, 101, 115, 105, 115, 0], "i8", ALLOC_STATIC);
			__str39689 = allocate([108, 95, 112, 114, 101, 102, 105, 120, 0], "i8", ALLOC_STATIC);
			__str40690 = allocate([108, 95, 114, 101, 103, 114, 101, 115, 115, 105, 118, 101, 95, 118, 0], "i8", ALLOC_STATIC);
			__str41691 = allocate([108, 95, 117, 110, 112, 114, 111, 110, 111, 117, 110, 99, 97, 98, 108, 101, 0], "i8", ALLOC_STATIC);
			__str42692 = allocate([108, 95, 115, 111, 110, 111, 114, 97, 110, 116, 95, 109, 105, 110, 0], "i8", ALLOC_STATIC);
			__str43693 = allocate([108, 95, 108, 101, 110, 103, 116, 104, 95, 109, 111, 100, 115, 0], "i8", ALLOC_STATIC);
			__ZL11keyword_tab = allocate([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 28, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 257, 0, 0, 0, 0, 0, 0, 0, 259, 0, 0, 0, 0, 0, 0, 0, 260, 0, 0, 0, 0, 0, 0, 0, 261, 0, 0, 0, 0, 0, 0, 0, 263, 0, 0, 0, 0, 0, 0, 0, 262, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL15variants_either = allocate([1, 2, 12, 3, 13, 4, 14, 5, 11, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL13variants_male = allocate([1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL15variants_female = allocate([11, 12, 13, 14, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			_variant_lists = allocate(12, "i8*", ALLOC_STATIC);
			__ZL9voicedata = allocate(1344, ["i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8"], ALLOC_STATIC);
			_voice = allocate(1, "%struct.voice_t*", ALLOC_STATIC);
			__str44696 = allocate([37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__ZZ10VoiceResetiE15default_heights = allocate([128, 128, 120, 120, 110, 110, 128, 128, 128], "i8", ALLOC_STATIC);
			__ZZ10VoiceResetiE14default_widths = allocate([128, 128, 128, 160, 171, 171, 128, 128, 128], "i8", ALLOC_STATIC);
			__ZZ10VoiceResetiE13breath_widths = allocate([0, 0, 0, 0, 200, 0, 0, 0, 200, 0, 0, 0, 400, 0, 0, 0, 400, 0, 0, 0, 400, 0, 0, 0, 600, 0, 0, 0, 600, 0, 0, 0, 600, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL18formant_rate_22050 = allocate([240, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0, 170, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ9LoadVoicePKciE16voice_identifier = allocate(40, "i8", ALLOC_STATIC);
			__ZZ9LoadVoicePKciE10voice_name = allocate(40, "i8", ALLOC_STATIC);
			__ZZ9LoadVoicePKciE15voice_languages = allocate(100, "i8", ALLOC_STATIC);
			__str45697 = allocate([100, 101, 102, 97, 117, 108, 116, 0], "i8", ALLOC_STATIC);
			__str46698 = allocate([37, 115, 37, 99, 118, 111, 105, 99, 101, 115, 37, 99, 0], "i8", ALLOC_STATIC);
			__str47699 = allocate([37, 115, 37, 115, 0], "i8", ALLOC_STATIC);
			__str48700 = allocate([37, 115, 37, 115, 37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__str49701 = allocate([37, 115, 101, 120, 116, 114, 97, 37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__str50702 = allocate([37, 115, 116, 101, 115, 116, 37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__str51703 = allocate([114, 0], "i8", ALLOC_STATIC);
			__str52704 = allocate([101, 110, 0], "i8", ALLOC_STATIC);
			__str53705 = allocate([43, 37, 115, 0], "i8", ALLOC_STATIC);
			__str54706 = allocate([37, 115, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str55707 = allocate([118, 97, 114, 105, 97, 110, 116, 0], "i8", ALLOC_STATIC);
			__str56708 = allocate([45, 0], "i8", ALLOC_STATIC);
			__str57709 = allocate([37, 115, 0], "i8", ALLOC_STATIC);
			__str58710 = allocate([37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str59711 = allocate([37, 115, 32, 37, 115, 32, 37, 115, 32, 37, 115, 32, 37, 115, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str60712 = allocate([78, 85, 76, 76, 0], "i8", ALLOC_STATIC);
			__str61713 = allocate([85, 110, 107, 110, 111, 119, 110, 32, 116, 117, 110, 101, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str62714 = allocate([37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str63715 = allocate([37, 100, 0], "i8", ALLOC_STATIC);
			__str64716 = allocate([37, 115, 32, 37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str65717 = allocate([66, 97, 100, 32, 118, 111, 105, 99, 101, 32, 111, 112, 116, 105, 111, 110, 58, 32, 37, 115, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str66718 = allocate([37, 115, 32, 37, 115, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str67719 = allocate([109, 98, 114, 111, 108, 97, 32, 118, 111, 105, 99, 101, 32, 110, 111, 116, 32, 102, 111, 117, 110, 100, 10, 0], "i8", ALLOC_STATIC);
			__str68720 = allocate([66, 97, 100, 32, 118, 111, 105, 99, 101, 32, 97, 116, 116, 114, 105, 98, 117, 116, 101, 58, 32, 37, 115, 10, 0], "i8", ALLOC_STATIC);
			__str69721 = allocate([85, 110, 107, 110, 111, 119, 110, 32, 112, 104, 111, 110, 101, 109, 101, 32, 116, 97, 98, 108, 101, 58, 32, 39, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__ZL13n_voices_list = allocate(1, "i32", ALLOC_STATIC);
			__ZL11voices_list = allocate(600, "%struct.espeak_VOICE*", ALLOC_STATIC);
			__str70722 = allocate([37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZZ11SelectVoiceP12espeak_VOICEPiE14voice_variants = allocate(288, ["i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8*", 0, 0, 0, "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i8*", 0, 0, 0], ALLOC_STATIC);
			__ZZ11SelectVoiceP12espeak_VOICEPiE8voice_id = allocate(50, "i8", ALLOC_STATIC);
			__ZZ11SelectVoiceP12espeak_VOICEPiE3buf = allocate(60, "i8", ALLOC_STATIC);
			__str71723 = allocate([37, 115, 43, 37, 115, 0], "i8", ALLOC_STATIC);
			__ZZ14SetVoiceByNamePKcE3buf = allocate(60, "i8", ALLOC_STATIC);
			__ZZ17espeak_ListVoicesE6voices = allocate(600, "%struct.espeak_VOICE*", ALLOC_STATIC);
			__str72724 = allocate([37, 115, 37, 99, 118, 111, 105, 99, 101, 115, 0], "i8", ALLOC_STATIC);
			__ZL15len_path_voices = allocate(1, "i32", ALLOC_STATIC);
			__str73725 = allocate([109, 98, 47, 0], "i8", ALLOC_STATIC);
			__str74726 = allocate([37, 115, 37, 99, 37, 115, 0], "i8", ALLOC_STATIC);
			__str75727 = allocate([118, 97, 114, 105, 97, 110, 116, 115, 0], "i8", ALLOC_STATIC);
			__ZZL23ExtractVoiceVariantNamePciE12variant_name = allocate(20, "i8", ALLOC_STATIC);
			__str76728 = allocate([33, 118, 37, 99, 0], "i8", ALLOC_STATIC);
			__str77729 = allocate([37, 115, 109, 37, 100, 0], "i8", ALLOC_STATIC);
			__str78730 = allocate([37, 115, 102, 37, 100, 0], "i8", ALLOC_STATIC);
			__str79731 = allocate([37, 100, 32, 37, 115, 32, 37, 115, 0], "i8", ALLOC_STATIC);
			__str80732 = allocate([37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str81733 = allocate([37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 32, 37, 100, 0], "i8", ALLOC_STATIC);
			__str82734 = allocate([47, 47, 0], "i8", ALLOC_STATIC);
			_sin_tab = allocate([0, 0, -25, 0, -50, 0, -75, 0, -100, 0, -125, 0, -150, 0, -175, 0, -201, 0, -226, 0, -251, 0, -276, 0, -301, 0, -326, 0, -351, 0, -376, 0, -401, 0, -427, 0, -452, 0, -477, 0, -502, 0, -527, 0, -552, 0, -577, 0, -602, 0, -627, 0, -652, 0, -677, 0, -702, 0, -727, 0, -752, 0, -777, 0, -802, 0, -827, 0, -852, 0, -877, 0, -902, 0, -927, 0, -952, 0, -977, 0, -1002, 0, -1027, 0, -1052, 0, -1077, 0, -1102, 0, -1127, 0, -1152, 0, -1177, 0, -1201, 0, -1226, 0, -1251, 0, -1276, 0, -1301, 0, -1326, 0, -1350, 0, -1375, 0, -1400, 0, -1425, 0, -1449, 0, -1474, 0, -1499, 0, -1523, 0, -1548, 0, -1573, 0, -1597, 0, -1622, 0, -1647, 0, -1671, 0, -1696, 0, -1721, 0, -1745, 0, -1770, 0, -1794, 0, -1819, 0, -1843, 0, -1868, 0, -1892, 0, -1917, 0, -1941, 0, -1965, 0, -1990, 0, -2014, 0, -2038, 0, -2063, 0, -2087, 0, -2111, 0, -2136, 0, -2160, 0, -2184, 0, -2208, 0, -2233, 0, -2257, 0, -2281, 0, -2305, 0, -2329, 0, -2353, 0, -2377, 0, -2401, 0, -2425, 0, -2449, 0, -2473, 0, -2497, 0, -2521, 0, -2545, 0, -2569, 0, -2593, 0, -2617, 0, -2640, 0, -2664, 0, -2688, 0, -2712, 0, -2735, 0, -2759, 0, -2783, 0, -2806, 0, -2830, 0, -2853, 0, -2877, 0, -2900, 0, -2924, 0, -2947, 0, -2971, 0, -2994, 0, -3018, 0, -3041, 0, -3064, 0, -3088, 0, -3111, 0, -3134, 0, -3157, 0, -3180, 0, -3204, 0, -3227, 0, -3250, 0, -3273, 0, -3296, 0, -3319, 0, -3342, 0, -3365, 0, -3388, 0, -3410, 0, -3433, 0, -3456, 0, -3479, 0, -3502, 0, -3524, 0, -3547, 0, -3570, 0, -3592, 0, -3615, 0, -3637, 0, -3660, 0, -3682, 0, -3705, 0, -3727, 0, -3749, 0, -3772, 0, -3794, 0, -3816, 0, -3839, 0, -3861, 0, -3883, 0, -3905, 0, -3927, 0, -3949, 0, -3971, 0, -3993, 0, -4015, 0, -4037, 0, -4059, 0, -4080, 0, -4102, 0, -4124, 0, -4146, 0, -4167, 0, -4189, 0, -4211, 0, -4232, 0, -4254, 0, -4275, 0, -4296, 0, -4318, 0, -4339, 0, -4360, 0, -4382, 0, -4403, 0, -4424, 0, -4445, 0, -4466, 0, -4487, 0, -4508, 0, -4529, 0, -4550, 0, -4571, 0, -4592, 0, -4613, 0, -4633, 0, -4654, 0, -4675, 0, -4695, 0, -4716, 0, -4736, 0, -4757, 0, -4777, 0, -4798, 0, -4818, 0, -4838, 0, -4859, 0, -4879, 0, -4899, 0, -4919, 0, -4939, 0, -4959, 0, -4979, 0, -4999, 0, -5019, 0, -5039, 0, -5059, 0, -5078, 0, -5098, 0, -5118, 0, -5137, 0, -5157, 0, -5176, 0, -5196, 0, -5215, 0, -5235, 0, -5254, 0, -5273, 0, -5292, 0, -5311, 0, -5331, 0, -5350, 0, -5369, 0, -5388, 0, -5406, 0, -5425, 0, -5444, 0, -5463, 0, -5482, 0, -5500, 0, -5519, 0, -5537, 0, -5556, 0, -5574, 0, -5593, 0, -5611, 0, -5629, 0, -5648, 0, -5666, 0, -5684, 0, -5702, 0, -5720, 0, -5738, 0, -5756, 0, -5774, 0, -5791, 0, -5809, 0, -5827, 0, -5844, 0, -5862, 0, -5880, 0, -5897, 0, -5914, 0, -5932, 0, -5949, 0, -5966, 0, -5984, 0, -6001, 0, -6018, 0, -6035, 0, -6052, 0, -6069, 0, -6085, 0, -6102, 0, -6119, 0, -6136, 0, -6152, 0, -6169, 0, -6185, 0, -6202, 0, -6218, 0, -6235, 0, -6251, 0, -6267, 0, -6283, 0, -6299, 0, -6315, 0, -6331, 0, -6347, 0, -6363, 0, -6379, 0, -6395, 0, -6410, 0, -6426, 0, -6441, 0, -6457, 0, -6472, 0, -6488, 0, -6503, 0, -6518, 0, -6533, 0, -6549, 0, -6564, 0, -6579, 0, -6594, 0, -6608, 0, -6623, 0, -6638, 0, -6653, 0, -6667, 0, -6682, 0, -6696, 0, -6711, 0, -6725, 0, -6739, 0, -6754, 0, -6768, 0, -6782, 0, -6796, 0, -6810, 0, -6824, 0, -6838, 0, -6852, 0, -6865, 0, -6879, 0, -6893, 0, -6906, 0, -6920, 0, -6933, 0, -6946, 0, -6960, 0, -6973, 0, -6986, 0, -6999, 0, -7012, 0, -7025, 0, -7038, 0, -7051, 0, -7064, 0, -7076, 0, -7089, 0, -7101, 0, -7114, 0, -7126, 0, -7139, 0, -7151, 0, -7163, 0, -7175, 0, -7187, 0, -7199, 0, -7211, 0, -7223, 0, -7235, 0, -7247, 0, -7259, 0, -7270, 0, -7282, 0, -7293, 0, -7305, 0, -7316, 0, -7327, 0, -7338, 0, -7349, 0, -7361, 0, -7372, 0, -7382, 0, -7393, 0, -7404, 0, -7415, 0, -7425, 0, -7436, 0, -7446, 0, -7457, 0, -7467, 0, -7478, 0, -7488, 0, -7498, 0, -7508, 0, -7518, 0, -7528, 0, -7538, 0, -7548, 0, -7557, 0, -7567, 0, -7577, 0, -7586, 0, -7596, 0, -7605, 0, -7614, 0, -7623, 0, -7633, 0, -7642, 0, -7651, 0, -7660, 0, -7668, 0, -7677, 0, -7686, 0, -7695, 0, -7703, 0, -7712, 0, -7720, 0, -7728, 0, -7737, 0, -7745, 0, -7753, 0, -7761, 0, -7769, 0, -7777, 0, -7785, 0, -7793, 0, -7800, 0, -7808, 0, -7816, 0, -7823, 0, -7830, 0, -7838, 0, -7845, 0, -7852, 0, -7859, 0, -7866, 0, -7873, 0, -7880, 0, -7887, 0, -7894, 0, -7900, 0, -7907, 0, -7914, 0, -7920, 0, -7926, 0, -7933, 0, -7939, 0, -7945, 0, -7951, 0, -7957, 0, -7963, 0, -7969, 0, -7975, 0, -7980, 0, -7986, 0, -7991, 0, -7997, 0, -8002, 0, -8008, 0, -8013, 0, -8018, 0, -8023, 0, -8028, 0, -8033, 0, -8038, 0, -8043, 0, -8047, 0, -8052, 0, -8057, 0, -8061, 0, -8066, 0, -8070, 0, -8074, 0, -8078, 0, -8082, 0, -8086, 0, -8090, 0, -8094, 0, -8098, 0, -8102, 0, -8105, 0, -8109, 0, -8113, 0, -8116, 0, -8119, 0, -8123, 0, -8126, 0, -8129, 0, -8132, 0, -8135, 0, -8138, 0, -8141, 0, -8143, 0, -8146, 0, -8149, 0, -8151, 0, -8153, 0, -8156, 0, -8158, 0, -8160, 0, -8162, 0, -8164, 0, -8166, 0, -8168, 0, -8170, 0, -8172, 0, -8174, 0, -8175, 0, -8177, 0, -8178, 0, -8179, 0, -8181, 0, -8182, 0, -8183, 0, -8184, 0, -8185, 0, -8186, 0, -8187, 0, -8187, 0, -8188, 0, -8189, 0, -8189, 0, -8190, 0, -8190, 0, -8190, 0, -8190, 0, -8190, 0, -8191, 0, -8190, 0, -8190, 0, -8190, 0, -8190, 0, -8190, 0, -8189, 0, -8189, 0, -8188, 0, -8187, 0, -8187, 0, -8186, 0, -8185, 0, -8184, 0, -8183, 0, -8182, 0, -8181, 0, -8179, 0, -8178, 0, -8177, 0, -8175, 0, -8174, 0, -8172, 0, -8170, 0, -8168, 0, -8166, 0, -8164, 0, -8162, 0, -8160, 0, -8158, 0, -8156, 0, -8153, 0, -8151, 0, -8149, 0, -8146, 0, -8143, 0, -8141, 0, -8138, 0, -8135, 0, -8132, 0, -8129, 0, -8126, 0, -8123, 0, -8119, 0, -8116, 0, -8113, 0, -8109, 0, -8105, 0, -8102, 0, -8098, 0, -8094, 0, -8090, 0, -8086, 0, -8082, 0, -8078, 0, -8074, 0, -8070, 0, -8066, 0, -8061, 0, -8057, 0, -8052, 0, -8047, 0, -8043, 0, -8038, 0, -8033, 0, -8028, 0, -8023, 0, -8018, 0, -8013, 0, -8008, 0, -8002, 0, -7997, 0, -7991, 0, -7986, 0, -7980, 0, -7975, 0, -7969, 0, -7963, 0, -7957, 0, -7951, 0, -7945, 0, -7939, 0, -7933, 0, -7926, 0, -7920, 0, -7914, 0, -7907, 0, -7900, 0, -7894, 0, -7887, 0, -7880, 0, -7873, 0, -7866, 0, -7859, 0, -7852, 0, -7845, 0, -7838, 0, -7830, 0, -7823, 0, -7816, 0, -7808, 0, -7800, 0, -7793, 0, -7785, 0, -7777, 0, -7769, 0, -7761, 0, -7753, 0, -7745, 0, -7737, 0, -7728, 0, -7720, 0, -7712, 0, -7703, 0, -7695, 0, -7686, 0, -7677, 0, -7668, 0, -7660, 0, -7651, 0, -7642, 0, -7633, 0, -7623, 0, -7614, 0, -7605, 0, -7596, 0, -7586, 0, -7577, 0, -7567, 0, -7557, 0, -7548, 0, -7538, 0, -7528, 0, -7518, 0, -7508, 0, -7498, 0, -7488, 0, -7478, 0, -7467, 0, -7457, 0, -7446, 0, -7436, 0, -7425, 0, -7415, 0, -7404, 0, -7393, 0, -7382, 0, -7372, 0, -7361, 0, -7349, 0, -7338, 0, -7327, 0, -7316, 0, -7305, 0, -7293, 0, -7282, 0, -7270, 0, -7259, 0, -7247, 0, -7235, 0, -7223, 0, -7211, 0, -7199, 0, -7187, 0, -7175, 0, -7163, 0, -7151, 0, -7139, 0, -7126, 0, -7114, 0, -7101, 0, -7089, 0, -7076, 0, -7064, 0, -7051, 0, -7038, 0, -7025, 0, -7012, 0, -6999, 0, -6986, 0, -6973, 0, -6960, 0, -6946, 0, -6933, 0, -6920, 0, -6906, 0, -6893, 0, -6879, 0, -6865, 0, -6852, 0, -6838, 0, -6824, 0, -6810, 0, -6796, 0, -6782, 0, -6768, 0, -6754, 0, -6739, 0, -6725, 0, -6711, 0, -6696, 0, -6682, 0, -6667, 0, -6653, 0, -6638, 0, -6623, 0, -6608, 0, -6594, 0, -6579, 0, -6564, 0, -6549, 0, -6533, 0, -6518, 0, -6503, 0, -6488, 0, -6472, 0, -6457, 0, -6441, 0, -6426, 0, -6410, 0, -6395, 0, -6379, 0, -6363, 0, -6347, 0, -6331, 0, -6315, 0, -6299, 0, -6283, 0, -6267, 0, -6251, 0, -6235, 0, -6218, 0, -6202, 0, -6185, 0, -6169, 0, -6152, 0, -6136, 0, -6119, 0, -6102, 0, -6085, 0, -6069, 0, -6052, 0, -6035, 0, -6018, 0, -6001, 0, -5984, 0, -5966, 0, -5949, 0, -5932, 0, -5914, 0, -5897, 0, -5880, 0, -5862, 0, -5844, 0, -5827, 0, -5809, 0, -5791, 0, -5774, 0, -5756, 0, -5738, 0, -5720, 0, -5702, 0, -5684, 0, -5666, 0, -5648, 0, -5629, 0, -5611, 0, -5593, 0, -5574, 0, -5556, 0, -5537, 0, -5519, 0, -5500, 0, -5482, 0, -5463, 0, -5444, 0, -5425, 0, -5406, 0, -5388, 0, -5369, 0, -5350, 0, -5331, 0, -5311, 0, -5292, 0, -5273, 0, -5254, 0, -5235, 0, -5215, 0, -5196, 0, -5176, 0, -5157, 0, -5137, 0, -5118, 0, -5098, 0, -5078, 0, -5059, 0, -5039, 0, -5019, 0, -4999, 0, -4979, 0, -4959, 0, -4939, 0, -4919, 0, -4899, 0, -4879, 0, -4859, 0, -4838, 0, -4818, 0, -4798, 0, -4777, 0, -4757, 0, -4736, 0, -4716, 0, -4695, 0, -4675, 0, -4654, 0, -4633, 0, -4613, 0, -4592, 0, -4571, 0, -4550, 0, -4529, 0, -4508, 0, -4487, 0, -4466, 0, -4445, 0, -4424, 0, -4403, 0, -4382, 0, -4360, 0, -4339, 0, -4318, 0, -4296, 0, -4275, 0, -4254, 0, -4232, 0, -4211, 0, -4189, 0, -4167, 0, -4146, 0, -4124, 0, -4102, 0, -4080, 0, -4059, 0, -4037, 0, -4015, 0, -3993, 0, -3971, 0, -3949, 0, -3927, 0, -3905, 0, -3883, 0, -3861, 0, -3839, 0, -3816, 0, -3794, 0, -3772, 0, -3749, 0, -3727, 0, -3705, 0, -3682, 0, -3660, 0, -3637, 0, -3615, 0, -3592, 0, -3570, 0, -3547, 0, -3524, 0, -3502, 0, -3479, 0, -3456, 0, -3433, 0, -3410, 0, -3388, 0, -3365, 0, -3342, 0, -3319, 0, -3296, 0, -3273, 0, -3250, 0, -3227, 0, -3204, 0, -3180, 0, -3157, 0, -3134, 0, -3111, 0, -3088, 0, -3064, 0, -3041, 0, -3018, 0, -2994, 0, -2971, 0, -2947, 0, -2924, 0, -2900, 0, -2877, 0, -2853, 0, -2830, 0, -2806, 0, -2783, 0, -2759, 0, -2735, 0, -2712, 0, -2688, 0, -2664, 0, -2640, 0, -2617, 0, -2593, 0, -2569, 0, -2545, 0, -2521, 0, -2497, 0, -2473, 0, -2449, 0, -2425, 0, -2401, 0, -2377, 0, -2353, 0, -2329, 0, -2305, 0, -2281, 0, -2257, 0, -2233, 0, -2208, 0, -2184, 0, -2160, 0, -2136, 0, -2111, 0, -2087, 0, -2063, 0, -2038, 0, -2014, 0, -1990, 0, -1965, 0, -1941, 0, -1917, 0, -1892, 0, -1868, 0, -1843, 0, -1819, 0, -1794, 0, -1770, 0, -1745, 0, -1721, 0, -1696, 0, -1671, 0, -1647, 0, -1622, 0, -1597, 0, -1573, 0, -1548, 0, -1523, 0, -1499, 0, -1474, 0, -1449, 0, -1425, 0, -1400, 0, -1375, 0, -1350, 0, -1326, 0, -1301, 0, -1276, 0, -1251, 0, -1226, 0, -1201, 0, -1177, 0, -1152, 0, -1127, 0, -1102, 0, -1077, 0, -1052, 0, -1027, 0, -1002, 0, -977, 0, -952, 0, -927, 0, -902, 0, -877, 0, -852, 0, -827, 0, -802, 0, -777, 0, -752, 0, -727, 0, -702, 0, -677, 0, -652, 0, -627, 0, -602, 0, -577, 0, -552, 0, -527, 0, -502, 0, -477, 0, -452, 0, -427, 0, -401, 0, -376, 0, -351, 0, -326, 0, -301, 0, -276, 0, -251, 0, -226, 0, -201, 0, -175, 0, -150, 0, -125, 0, -100, 0, -75, 0, -50, 0, -25, 0, 0, 0, 25, 0, 50, 0, 75, 0, 100, 0, 125, 0, 150, 0, 175, 0, 201, 0, 226, 0, 251, 0, 276, 0, 301, 0, 326, 0, 351, 0, 376, 0, 401, 0, 427, 0, 452, 0, 477, 0, 502, 0, 527, 0, 552, 0, 577, 0, 602, 0, 627, 0, 652, 0, 677, 0, 702, 0, 727, 0, 752, 0, 777, 0, 802, 0, 827, 0, 852, 0, 877, 0, 902, 0, 927, 0, 952, 0, 977, 0, 1002, 0, 1027, 0, 1052, 0, 1077, 0, 1102, 0, 1127, 0, 1152, 0, 1177, 0, 1201, 0, 1226, 0, 1251, 0, 1276, 0, 1301, 0, 1326, 0, 1350, 0, 1375, 0, 1400, 0, 1425, 0, 1449, 0, 1474, 0, 1499, 0, 1523, 0, 1548, 0, 1573, 0, 1597, 0, 1622, 0, 1647, 0, 1671, 0, 1696, 0, 1721, 0, 1745, 0, 1770, 0, 1794, 0, 1819, 0, 1843, 0, 1868, 0, 1892, 0, 1917, 0, 1941, 0, 1965, 0, 1990, 0, 2014, 0, 2038, 0, 2063, 0, 2087, 0, 2111, 0, 2136, 0, 2160, 0, 2184, 0, 2208, 0, 2233, 0, 2257, 0, 2281, 0, 2305, 0, 2329, 0, 2353, 0, 2377, 0, 2401, 0, 2425, 0, 2449, 0, 2473, 0, 2497, 0, 2521, 0, 2545, 0, 2569, 0, 2593, 0, 2617, 0, 2640, 0, 2664, 0, 2688, 0, 2712, 0, 2735, 0, 2759, 0, 2783, 0, 2806, 0, 2830, 0, 2853, 0, 2877, 0, 2900, 0, 2924, 0, 2947, 0, 2971, 0, 2994, 0, 3018, 0, 3041, 0, 3064, 0, 3088, 0, 3111, 0, 3134, 0, 3157, 0, 3180, 0, 3204, 0, 3227, 0, 3250, 0, 3273, 0, 3296, 0, 3319, 0, 3342, 0, 3365, 0, 3388, 0, 3410, 0, 3433, 0, 3456, 0, 3479, 0, 3502, 0, 3524, 0, 3547, 0, 3570, 0, 3592, 0, 3615, 0, 3637, 0, 3660, 0, 3682, 0, 3705, 0, 3727, 0, 3749, 0, 3772, 0, 3794, 0, 3816, 0, 3839, 0, 3861, 0, 3883, 0, 3905, 0, 3927, 0, 3949, 0, 3971, 0, 3993, 0, 4015, 0, 4037, 0, 4059, 0, 4080, 0, 4102, 0, 4124, 0, 4146, 0, 4167, 0, 4189, 0, 4211, 0, 4232, 0, 4254, 0, 4275, 0, 4296, 0, 4318, 0, 4339, 0, 4360, 0, 4382, 0, 4403, 0, 4424, 0, 4445, 0, 4466, 0, 4487, 0, 4508, 0, 4529, 0, 4550, 0, 4571, 0, 4592, 0, 4613, 0, 4633, 0, 4654, 0, 4675, 0, 4695, 0, 4716, 0, 4736, 0, 4757, 0, 4777, 0, 4798, 0, 4818, 0, 4838, 0, 4859, 0, 4879, 0, 4899, 0, 4919, 0, 4939, 0, 4959, 0, 4979, 0, 4999, 0, 5019, 0, 5039, 0, 5059, 0, 5078, 0, 5098, 0, 5118, 0, 5137, 0, 5157, 0, 5176, 0, 5196, 0, 5215, 0, 5235, 0, 5254, 0, 5273, 0, 5292, 0, 5311, 0, 5331, 0, 5350, 0, 5369, 0, 5388, 0, 5406, 0, 5425, 0, 5444, 0, 5463, 0, 5482, 0, 5500, 0, 5519, 0, 5537, 0, 5556, 0, 5574, 0, 5593, 0, 5611, 0, 5629, 0, 5648, 0, 5666, 0, 5684, 0, 5702, 0, 5720, 0, 5738, 0, 5756, 0, 5774, 0, 5791, 0, 5809, 0, 5827, 0, 5844, 0, 5862, 0, 5880, 0, 5897, 0, 5914, 0, 5932, 0, 5949, 0, 5966, 0, 5984, 0, 6001, 0, 6018, 0, 6035, 0, 6052, 0, 6069, 0, 6085, 0, 6102, 0, 6119, 0, 6136, 0, 6152, 0, 6169, 0, 6185, 0, 6202, 0, 6218, 0, 6235, 0, 6251, 0, 6267, 0, 6283, 0, 6299, 0, 6315, 0, 6331, 0, 6347, 0, 6363, 0, 6379, 0, 6395, 0, 6410, 0, 6426, 0, 6441, 0, 6457, 0, 6472, 0, 6488, 0, 6503, 0, 6518, 0, 6533, 0, 6549, 0, 6564, 0, 6579, 0, 6594, 0, 6608, 0, 6623, 0, 6638, 0, 6653, 0, 6667, 0, 6682, 0, 6696, 0, 6711, 0, 6725, 0, 6739, 0, 6754, 0, 6768, 0, 6782, 0, 6796, 0, 6810, 0, 6824, 0, 6838, 0, 6852, 0, 6865, 0, 6879, 0, 6893, 0, 6906, 0, 6920, 0, 6933, 0, 6946, 0, 6960, 0, 6973, 0, 6986, 0, 6999, 0, 7012, 0, 7025, 0, 7038, 0, 7051, 0, 7064, 0, 7076, 0, 7089, 0, 7101, 0, 7114, 0, 7126, 0, 7139, 0, 7151, 0, 7163, 0, 7175, 0, 7187, 0, 7199, 0, 7211, 0, 7223, 0, 7235, 0, 7247, 0, 7259, 0, 7270, 0, 7282, 0, 7293, 0, 7305, 0, 7316, 0, 7327, 0, 7338, 0, 7349, 0, 7361, 0, 7372, 0, 7382, 0, 7393, 0, 7404, 0, 7415, 0, 7425, 0, 7436, 0, 7446, 0, 7457, 0, 7467, 0, 7478, 0, 7488, 0, 7498, 0, 7508, 0, 7518, 0, 7528, 0, 7538, 0, 7548, 0, 7557, 0, 7567, 0, 7577, 0, 7586, 0, 7596, 0, 7605, 0, 7614, 0, 7623, 0, 7633, 0, 7642, 0, 7651, 0, 7660, 0, 7668, 0, 7677, 0, 7686, 0, 7695, 0, 7703, 0, 7712, 0, 7720, 0, 7728, 0, 7737, 0, 7745, 0, 7753, 0, 7761, 0, 7769, 0, 7777, 0, 7785, 0, 7793, 0, 7800, 0, 7808, 0, 7816, 0, 7823, 0, 7830, 0, 7838, 0, 7845, 0, 7852, 0, 7859, 0, 7866, 0, 7873, 0, 7880, 0, 7887, 0, 7894, 0, 7900, 0, 7907, 0, 7914, 0, 7920, 0, 7926, 0, 7933, 0, 7939, 0, 7945, 0, 7951, 0, 7957, 0, 7963, 0, 7969, 0, 7975, 0, 7980, 0, 7986, 0, 7991, 0, 7997, 0, 8002, 0, 8008, 0, 8013, 0, 8018, 0, 8023, 0, 8028, 0, 8033, 0, 8038, 0, 8043, 0, 8047, 0, 8052, 0, 8057, 0, 8061, 0, 8066, 0, 8070, 0, 8074, 0, 8078, 0, 8082, 0, 8086, 0, 8090, 0, 8094, 0, 8098, 0, 8102, 0, 8105, 0, 8109, 0, 8113, 0, 8116, 0, 8119, 0, 8123, 0, 8126, 0, 8129, 0, 8132, 0, 8135, 0, 8138, 0, 8141, 0, 8143, 0, 8146, 0, 8149, 0, 8151, 0, 8153, 0, 8156, 0, 8158, 0, 8160, 0, 8162, 0, 8164, 0, 8166, 0, 8168, 0, 8170, 0, 8172, 0, 8174, 0, 8175, 0, 8177, 0, 8178, 0, 8179, 0, 8181, 0, 8182, 0, 8183, 0, 8184, 0, 8185, 0, 8186, 0, 8187, 0, 8187, 0, 8188, 0, 8189, 0, 8189, 0, 8190, 0, 8190, 0, 8190, 0, 8190, 0, 8190, 0, 8191, 0, 8190, 0, 8190, 0, 8190, 0, 8190, 0, 8190, 0, 8189, 0, 8189, 0, 8188, 0, 8187, 0, 8187, 0, 8186, 0, 8185, 0, 8184, 0, 8183, 0, 8182, 0, 8181, 0, 8179, 0, 8178, 0, 8177, 0, 8175, 0, 8174, 0, 8172, 0, 8170, 0, 8168, 0, 8166, 0, 8164, 0, 8162, 0, 8160, 0, 8158, 0, 8156, 0, 8153, 0, 8151, 0, 8149, 0, 8146, 0, 8143, 0, 8141, 0, 8138, 0, 8135, 0, 8132, 0, 8129, 0, 8126, 0, 8123, 0, 8119, 0, 8116, 0, 8113, 0, 8109, 0, 8105, 0, 8102, 0, 8098, 0, 8094, 0, 8090, 0, 8086, 0, 8082, 0, 8078, 0, 8074, 0, 8070, 0, 8066, 0, 8061, 0, 8057, 0, 8052, 0, 8047, 0, 8043, 0, 8038, 0, 8033, 0, 8028, 0, 8023, 0, 8018, 0, 8013, 0, 8008, 0, 8002, 0, 7997, 0, 7991, 0, 7986, 0, 7980, 0, 7975, 0, 7969, 0, 7963, 0, 7957, 0, 7951, 0, 7945, 0, 7939, 0, 7933, 0, 7926, 0, 7920, 0, 7914, 0, 7907, 0, 7900, 0, 7894, 0, 7887, 0, 7880, 0, 7873, 0, 7866, 0, 7859, 0, 7852, 0, 7845, 0, 7838, 0, 7830, 0, 7823, 0, 7816, 0, 7808, 0, 7800, 0, 7793, 0, 7785, 0, 7777, 0, 7769, 0, 7761, 0, 7753, 0, 7745, 0, 7737, 0, 7728, 0, 7720, 0, 7712, 0, 7703, 0, 7695, 0, 7686, 0, 7677, 0, 7668, 0, 7660, 0, 7651, 0, 7642, 0, 7633, 0, 7623, 0, 7614, 0, 7605, 0, 7596, 0, 7586, 0, 7577, 0, 7567, 0, 7557, 0, 7548, 0, 7538, 0, 7528, 0, 7518, 0, 7508, 0, 7498, 0, 7488, 0, 7478, 0, 7467, 0, 7457, 0, 7446, 0, 7436, 0, 7425, 0, 7415, 0, 7404, 0, 7393, 0, 7382, 0, 7372, 0, 7361, 0, 7349, 0, 7338, 0, 7327, 0, 7316, 0, 7305, 0, 7293, 0, 7282, 0, 7270, 0, 7259, 0, 7247, 0, 7235, 0, 7223, 0, 7211, 0, 7199, 0, 7187, 0, 7175, 0, 7163, 0, 7151, 0, 7139, 0, 7126, 0, 7114, 0, 7101, 0, 7089, 0, 7076, 0, 7064, 0, 7051, 0, 7038, 0, 7025, 0, 7012, 0, 6999, 0, 6986, 0, 6973, 0, 6960, 0, 6946, 0, 6933, 0, 6920, 0, 6906, 0, 6893, 0, 6879, 0, 6865, 0, 6852, 0, 6838, 0, 6824, 0, 6810, 0, 6796, 0, 6782, 0, 6768, 0, 6754, 0, 6739, 0, 6725, 0, 6711, 0, 6696, 0, 6682, 0, 6667, 0, 6653, 0, 6638, 0, 6623, 0, 6608, 0, 6594, 0, 6579, 0, 6564, 0, 6549, 0, 6533, 0, 6518, 0, 6503, 0, 6488, 0, 6472, 0, 6457, 0, 6441, 0, 6426, 0, 6410, 0, 6395, 0, 6379, 0, 6363, 0, 6347, 0, 6331, 0, 6315, 0, 6299, 0, 6283, 0, 6267, 0, 6251, 0, 6235, 0, 6218, 0, 6202, 0, 6185, 0, 6169, 0, 6152, 0, 6136, 0, 6119, 0, 6102, 0, 6085, 0, 6069, 0, 6052, 0, 6035, 0, 6018, 0, 6001, 0, 5984, 0, 5966, 0, 5949, 0, 5932, 0, 5914, 0, 5897, 0, 5880, 0, 5862, 0, 5844, 0, 5827, 0, 5809, 0, 5791, 0, 5774, 0, 5756, 0, 5738, 0, 5720, 0, 5702, 0, 5684, 0, 5666, 0, 5648, 0, 5629, 0, 5611, 0, 5593, 0, 5574, 0, 5556, 0, 5537, 0, 5519, 0, 5500, 0, 5482, 0, 5463, 0, 5444, 0, 5425, 0, 5406, 0, 5388, 0, 5369, 0, 5350, 0, 5331, 0, 5311, 0, 5292, 0, 5273, 0, 5254, 0, 5235, 0, 5215, 0, 5196, 0, 5176, 0, 5157, 0, 5137, 0, 5118, 0, 5098, 0, 5078, 0, 5059, 0, 5039, 0, 5019, 0, 4999, 0, 4979, 0, 4959, 0, 4939, 0, 4919, 0, 4899, 0, 4879, 0, 4859, 0, 4838, 0, 4818, 0, 4798, 0, 4777, 0, 4757, 0, 4736, 0, 4716, 0, 4695, 0, 4675, 0, 4654, 0, 4633, 0, 4613, 0, 4592, 0, 4571, 0, 4550, 0, 4529, 0, 4508, 0, 4487, 0, 4466, 0, 4445, 0, 4424, 0, 4403, 0, 4382, 0, 4360, 0, 4339, 0, 4318, 0, 4296, 0, 4275, 0, 4254, 0, 4232, 0, 4211, 0, 4189, 0, 4167, 0, 4146, 0, 4124, 0, 4102, 0, 4080, 0, 4059, 0, 4037, 0, 4015, 0, 3993, 0, 3971, 0, 3949, 0, 3927, 0, 3905, 0, 3883, 0, 3861, 0, 3839, 0, 3816, 0, 3794, 0, 3772, 0, 3749, 0, 3727, 0, 3705, 0, 3682, 0, 3660, 0, 3637, 0, 3615, 0, 3592, 0, 3570, 0, 3547, 0, 3524, 0, 3502, 0, 3479, 0, 3456, 0, 3433, 0, 3410, 0, 3388, 0, 3365, 0, 3342, 0, 3319, 0, 3296, 0, 3273, 0, 3250, 0, 3227, 0, 3204, 0, 3180, 0, 3157, 0, 3134, 0, 3111, 0, 3088, 0, 3064, 0, 3041, 0, 3018, 0, 2994, 0, 2971, 0, 2947, 0, 2924, 0, 2900, 0, 2877, 0, 2853, 0, 2830, 0, 2806, 0, 2783, 0, 2759, 0, 2735, 0, 2712, 0, 2688, 0, 2664, 0, 2640, 0, 2617, 0, 2593, 0, 2569, 0, 2545, 0, 2521, 0, 2497, 0, 2473, 0, 2449, 0, 2425, 0, 2401, 0, 2377, 0, 2353, 0, 2329, 0, 2305, 0, 2281, 0, 2257, 0, 2233, 0, 2208, 0, 2184, 0, 2160, 0, 2136, 0, 2111, 0, 2087, 0, 2063, 0, 2038, 0, 2014, 0, 1990, 0, 1965, 0, 1941, 0, 1917, 0, 1892, 0, 1868, 0, 1843, 0, 1819, 0, 1794, 0, 1770, 0, 1745, 0, 1721, 0, 1696, 0, 1671, 0, 1647, 0, 1622, 0, 1597, 0, 1573, 0, 1548, 0, 1523, 0, 1499, 0, 1474, 0, 1449, 0, 1425, 0, 1400, 0, 1375, 0, 1350, 0, 1326, 0, 1301, 0, 1276, 0, 1251, 0, 1226, 0, 1201, 0, 1177, 0, 1152, 0, 1127, 0, 1102, 0, 1077, 0, 1052, 0, 1027, 0, 1002, 0, 977, 0, 952, 0, 927, 0, 902, 0, 877, 0, 852, 0, 827, 0, 802, 0, 777, 0, 752, 0, 727, 0, 702, 0, 677, 0, 652, 0, 627, 0, 602, 0, 577, 0, 552, 0, 527, 0, 502, 0, 477, 0, 452, 0, 427, 0, 401, 0, 376, 0, 351, 0, 326, 0, 301, 0, 276, 0, 251, 0, 226, 0, 201, 0, 175, 0, 150, 0, 125, 0, 100, 0, 75, 0, 50, 0, 25, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			_wvoice = allocate(1, "%struct.voice_t*", ALLOC_STATIC);
			_f_log = allocate(1, "%struct.__sFILE*", ALLOC_STATIC);
			_option_waveout = allocate(1, "i32", ALLOC_STATIC);
			_option_log_frames = allocate(1, "i32", ALLOC_STATIC);
			_embedded_value = allocate(60, "i32", ALLOC_STATIC);
			_samplerate = allocate(1, "i32", ALLOC_STATIC);
			_samplerate_native = allocate(1, "i32", ALLOC_STATIC);
			__ZL5peaks = allocate(720, ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0], ALLOC_STATIC);
			_echo_head = allocate(1, "i32", ALLOC_STATIC);
			_echo_tail = allocate(1, "i32", ALLOC_STATIC);
			_echo_amp = allocate(1, "i32", ALLOC_STATIC);
			_echo_buf = allocate(11000, "i16", ALLOC_STATIC);
			__ZL7rbreath = allocate(360, "double", ALLOC_STATIC);
			_wdata = allocate(64, ["i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL13amplitude_env = allocate(1, "i8*", ALLOC_STATIC);
			_out_ptr = allocate(1, "i8*", ALLOC_STATIC);
			_out_start = allocate(1, "i8*", ALLOC_STATIC);
			_out_end = allocate(1, "i8*", ALLOC_STATIC);
			_outbuf_size = allocate(1, "i32", ALLOC_STATIC);
			_wcmdq = allocate(2560, "i32", ALLOC_STATIC);
			_wcmdq_head = allocate(1, "i32", ALLOC_STATIC);
			_wcmdq_tail = allocate(1, "i32", ALLOC_STATIC);
			_embedded_default = allocate([0, 0, 0, 0, 50, 0, 0, 0, 175, 0, 0, 0, 100, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			_current_source_index = allocate(1, "i32", ALLOC_STATIC);
			__ZL18sonicSpeedupStream = allocate(1, "%struct.sonicStreamStruct*", ALLOC_STATIC);
			_sonicSpeed = allocate([1], ["double", 0, 0, 0, 0, 0, 0, 0, 0], ALLOC_STATIC);
			_pitch_adjust_tab = allocate([64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 103, 104, 105, 107, 108, 110, 111, 113, 115, 116, 118, 119, 121, 123, 124, 126, 128, 130, 132, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 158, 160, 162, 164, 167, 169, 171, 174, 176, 179, 181, 184, 186, 189, 191, 194, 197, 199, 202, 205, 208, 211, 214, 217, 220, 223, 226, 229, 232, 236, 239, 242, 246, 249, 252, 254, 255], "i8", ALLOC_STATIC);
			_pk_shape1 = allocate([255, 254, 254, 254, 254, 254, 253, 253, 252, 251, 251, 250, 249, 248, 247, 246, 245, 244, 242, 241, 239, 238, 236, 234, 233, 231, 229, 227, 225, 223, 220, 218, 216, 213, 211, 209, 207, 205, 203, 201, 199, 197, 195, 193, 191, 189, 187, 185, 183, 180, 178, 176, 173, 171, 169, 166, 164, 161, 159, 156, 154, 151, 148, 146, 143, 140, 138, 135, 132, 129, 126, 123, 120, 118, 115, 112, 108, 105, 102, 99, 96, 95, 93, 91, 90, 88, 86, 85, 83, 82, 80, 79, 77, 76, 74, 73, 72, 70, 69, 68, 67, 66, 64, 63, 62, 61, 60, 59, 58, 57, 56, 55, 55, 54, 53, 52, 52, 51, 50, 50, 49, 48, 48, 47, 47, 46, 46, 46, 45, 45, 45, 44, 44, 44, 44, 44, 44, 44, 43, 43, 43, 43, 44, 43, 42, 42, 41, 40, 40, 39, 38, 38, 37, 36, 36, 35, 35, 34, 33, 33, 32, 32, 31, 30, 30, 29, 29, 28, 28, 27, 26, 26, 25, 25, 24, 24, 23, 23, 22, 22, 21, 21, 20, 20, 19, 19, 18, 18, 18, 17, 17, 16, 16, 15, 15, 15, 14, 14, 13, 13, 13, 12, 12, 11, 11, 11, 10, 10, 10, 9, 9, 9, 8, 8, 8, 7, 7, 7, 7, 6, 6, 6, 5, 5, 5, 5, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL16PHASE_INC_FACTOR = allocate(1, "i32", ALLOC_STATIC);
			__ZL11Flutter_inc = allocate(1, "i32", ALLOC_STATIC);
			__ZL11samplecount = allocate(1, "i32", ALLOC_STATIC);
			__ZL8nsamples = allocate(1, "i32", ALLOC_STATIC);
			__ZL9wavephase = allocate(1, "i32", ALLOC_STATIC);
			__ZL12wavemult_max = allocate(1, "i32", ALLOC_STATIC);
			__ZL15wavemult_offset = allocate(1, "i32", ALLOC_STATIC);
			__ZL8wavemult = allocate([0, 0, 0, 2, 3, 5, 8, 11, 14, 18, 22, 27, 32, 37, 43, 49, 55, 62, 69, 76, 83, 90, 98, 105, 113, 121, 128, 136, 144, 152, 159, 166, 174, 181, 188, 194, 201, 207, 213, 218, 224, 228, 233, 237, 240, 244, 246, 249, 251, 252, 253, 253, 253, 253, 252, 251, 249, 246, 244, 240, 237, 233, 228, 224, 218, 213, 207, 201, 194, 188, 181, 174, 166, 159, 152, 144, 136, 128, 121, 113, 105, 98, 90, 83, 76, 69, 62, 55, 49, 43, 37, 32, 27, 22, 18, 14, 11, 8, 5, 3, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL9pk_shape2 = allocate([255, 254, 254, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 253, 252, 252, 252, 251, 251, 251, 250, 250, 249, 249, 248, 248, 247, 247, 246, 245, 245, 244, 243, 243, 242, 241, 239, 237, 235, 233, 231, 229, 227, 225, 223, 221, 218, 216, 213, 211, 208, 205, 203, 200, 197, 194, 191, 187, 184, 181, 178, 174, 171, 167, 163, 160, 156, 152, 148, 144, 140, 136, 132, 127, 123, 119, 114, 110, 105, 100, 96, 94, 91, 88, 86, 83, 81, 78, 76, 74, 71, 69, 66, 64, 62, 60, 57, 55, 53, 51, 49, 47, 44, 42, 40, 38, 36, 34, 32, 30, 29, 27, 25, 23, 21, 19, 18, 16, 14, 12, 11, 9, 7, 6, 4, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], "i8", ALLOC_STATIC);
			__ZL8pk_shape = allocate(1, "i8*", ALLOC_STATIC);
			__ZZ12GetAmplitudevE12amp_emphasis = allocate([16, 16, 10, 16, 22], "i8", ALLOC_STATIC);
			__ZL17general_amplitude = allocate([60], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL11peak_height = allocate(36, "i32", ALLOC_STATIC);
			__ZL13peak_harmonic = allocate(36, "i32", ALLOC_STATIC);
			__ZL16option_harmonic1_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL9harmspect = allocate(1, "i32*", ALLOC_STATIC);
			__ZL8harm_inc = allocate(120, "i32", ALLOC_STATIC);
			__ZL10minus_pi_t = allocate(1, "double", ALLOC_STATIC);
			__ZL8two_pi_t = allocate(1, "double", ALLOC_STATIC);
			__ZZ7WavegenvE4maxh = allocate(1, "i32", ALLOC_STATIC);
			__ZZ7WavegenvE5maxh2 = allocate(1, "i32", ALLOC_STATIC);
			__ZZ7WavegenvE3agc = allocate([256], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZZ7WavegenvE13h_switch_sign = allocate(1, "i32", ALLOC_STATIC);
			__ZZ7WavegenvE11cycle_count = allocate(1, "i32", ALLOC_STATIC);
			__ZZ7WavegenvE10amplitude2 = allocate(1, "i32", ALLOC_STATIC);
			__ZL8end_wave_b = allocate(1, "i1", ALLOC_STATIC);
			__ZL7hswitch = allocate(1, "i32", ALLOC_STATIC);
			__ZL6hspect = allocate(3200, "i32", ALLOC_STATIC);
			__ZL8phaseinc = allocate(1, "i32", ALLOC_STATIC);
			__ZL13cycle_samples = allocate(1, "i32", ALLOC_STATIC);
			__ZL9hf_factor = allocate(1, "i32", ALLOC_STATIC);
			__ZL6cbytes = allocate(1, "i32", ALLOC_STATIC);
			__ZL12glottal_flag = allocate(1, "i32", ALLOC_STATIC);
			__ZL14glottal_reduce = allocate(1, "i32", ALLOC_STATIC);
			__ZL6amp_ix = allocate(1, "i32", ALLOC_STATIC);
			__ZL15modulation_type = allocate(1, "i32", ALLOC_STATIC);
			__ZL14modulation_tab = allocate([0, 0, 0, 0, 0, 70, 242, 41, 0, 47, 0, 47, 0, 69, 242, 41, 0, 47, 0, 46, 0, 69, 242, 40, 0, 46, 0, 45, 0, 52, 242, 40, 0, 45, 45, 44, 0, 52, 242, 40, 0, 43, 43, 43, 0, 52, 242, 40, 0, 42, 42, 42, 0, 52, 242, 40, 0, 41, 41, 41, 0, 52, 242, 40], "i8", ALLOC_STATIC);
			__ZL7voicing = allocate(1, "i32", ALLOC_STATIC);
			__ZL12embedded_max = allocate([0, 0, 0, 0, 32767, 0, 0, 0, 750, 0, 0, 0, 300, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 99, 0, 0, 0, 0, 0, 0, 0, 750, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ15WavegenSetVoiceP7voice_tE2v2 = allocate(1344, ["i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8"], ALLOC_STATIC);
			__ZL13consonant_amp = allocate([26], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL11flutter_amp = allocate([64], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZZ8SetSynthiiP7frame_tS0_P7voice_tE19glottal_reduce_tab1 = allocate([48, 0, 0, 0, 48, 0, 0, 0, 64, 0, 0, 0, 80, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ8SetSynthiiP7frame_tS0_P7voice_tE19glottal_reduce_tab2 = allocate([144, 0, 0, 0, 160, 0, 0, 0, 176, 0, 0, 0, 192, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZL17samplecount_start = allocate(1, "i32", ALLOC_STATIC);
			__ZZ12WavegenFill2iE6resume = allocate(1, "i32", ALLOC_STATIC);
			__ZZ12WavegenFill2iE13echo_complete = allocate(1, "i32", ALLOC_STATIC);
			__ZL11echo_length = allocate(1, "i32", ALLOC_STATIC);
			__ZL7amp_inc = allocate(1, "i32", ALLOC_STATIC);
			__ZZL8PlayWaveiiPhiiE9n_samples = allocate(1, "i32", ALLOC_STATIC);
			__ZZL8PlayWaveiiPhiiE2ix = allocate(1, "i32", ALLOC_STATIC);
			__ZZL11PlaySilenceiiE9n_samples = allocate(1, "i32", ALLOC_STATIC);
			__ZZL17AdvanceParametersvE10Flutter_ix = allocate(1, "i32", ALLOC_STATIC);
			__ZL11Flutter_tab = allocate([128, 155, 181, 203, 220, 232, 237, 236, 230, 220, 206, 191, 176, 163, 152, 144, 140, 139, 140, 143, 146, 148, 149, 146, 140, 131, 120, 105, 89, 73, 60, 49, 42, 41, 45, 54, 68, 86, 105, 125, 143, 159, 170, 177, 178, 173, 164, 150, 135, 120, 105, 92, 83, 79, 79, 85, 94, 107, 122, 136, 150, 162, 171, 176, 177, 174, 168, 160, 152, 145, 139, 136, 137, 141, 148, 157, 168, 178, 187, 192, 193, 189, 180, 165, 146, 124, 99, 74, 50, 30, 14, 5, 2, 5, 15, 30, 48, 68, 89, 109, 127, 140, 150, 156, 159, 159, 157, 155, 153, 153, 156, 161, 169, 179, 191, 202, 213, 220, 224, 222, 216, 204, 187, 166, 143, 119, 96, 75, 58, 46, 40, 41, 47, 58, 72, 89, 106, 122, 134, 144, 148, 149, 145, 137, 128, 117, 107, 98, 92, 90, 92, 97, 105, 116, 128, 138, 148, 154, 158, 157, 152, 144, 134, 124, 113, 104, 98, 96, 99, 107, 120, 136, 155, 175, 194, 210, 223, 230, 231, 226, 215, 198, 178, 156, 132, 111, 91, 75, 64, 57, 55, 56, 61, 67, 74, 80, 84, 86, 85, 82, 77, 72, 66, 63, 62, 65, 73, 86, 103, 124, 147, 171, 195, 217, 234, 246, 252, 251, 244, 231, 213, 192, 170, 148, 128, 113, 100, 93, 90, 92, 97, 104, 112, 119, 125, 127, 127, 123, 116, 107, 97, 87, 78, 72, 70, 72, 78, 89, 102, 117, 132, 147, 159, 167, 171, 170, 164, 153, 139, 123, 106, 91, 78, 70, 67, 69, 77, 90, 107, 127, 146, 166, 184, 197, 207, 211, 210, 205, 196, 185, 173, 161, 150, 142, 137, 135, 135, 138, 141, 145, 146, 145, 140, 132, 120, 104, 85, 65, 46, 28, 14, 5, 1, 5, 15, 31, 52, 77, 104, 129, 154, 176, 193, 205, 211, 211, 208, 200, 191, 181, 171, 164, 159, 156, 157, 160, 165, 170, 174, 177, 176, 171, 163, 150, 135, 118, 99, 81, 66, 54, 47, 45, 49, 58, 72, 89, 107, 126, 142, 156, 166, 170, 169, 163, 152, 138, 123, 108, 93, 82, 74, 72, 74, 80, 90, 103, 117, 130], "i8", ALLOC_STATIC);
			_pause_phonemes = allocate([0, 23, 10, 9, 24, 19, 24, 24], "i8", ALLOC_STATIC);
			__ZZ15MakePhonemeListP10TranslatoriiE12types_double = allocate([6, 7, 8, 3, 0], "i8", ALLOC_STATIC);
			__ZL8kt_frame = allocate(288, "i32", ALLOC_STATIC);
			__ZL10kt_globals = allocate(2748, ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i16*", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0], ALLOC_STATIC);
			__ZL5peaks801 = allocate(720, ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0], ALLOC_STATIC);
			__ZL12sample_count = allocate(1, "i32", ALLOC_STATIC);
			__ZL8nsamples802 = allocate(1, "i32", ALLOC_STATIC);
			__ZL6klattp = allocate(40, "i32", ALLOC_STATIC);
			__ZL10klattp_inc = allocate(80, "double", ALLOC_STATIC);
			__ZL7klattp1 = allocate(80, "double", ALLOC_STATIC);
			__ZL8end_wave803 = allocate(1, "i32", ALLOC_STATIC);
			__ZZ14SetSynth_KlattiiP7frame_tS0_P7voice_tiE7prev_fr = allocate(64, ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8", "i8"], ALLOC_STATIC);
			__ZL13scale_wav_tab = allocate([45, 0, 0, 0, 38, 0, 0, 0, 45, 0, 0, 0, 45, 0, 0, 0], ["i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0, "i32", 0, 0, 0], ALLOC_STATIC);
			__ZZ9KlattInitvE15natural_samples = allocate([-310, 0, -400, 0, 530, 0, 356, 0, 224, 0, 89, 0, 23, 0, -10, 0, -58, 0, -16, 0, 461, 0, 599, 0, 536, 0, 701, 0, 770, 0, 605, 0, 497, 0, 461, 0, 560, 0, 404, 0, 110, 0, 224, 0, 131, 0, 104, 0, -97, 0, 155, 0, 278, 0, -154, 0, -1165, 0, -598, 0, 737, 0, 125, 0, -592, 0, 41, 0, 11, 0, -247, 0, -10, 0, 65, 0, 92, 0, 80, 0, -304, 0, 71, 0, 167, 0, -1, 0, 122, 0, 233, 0, 161, 0, -43, 0, 278, 0, 479, 0, 485, 0, 407, 0, 266, 0, 650, 0, 134, 0, 80, 0, 236, 0, 68, 0, 260, 0, 269, 0, 179, 0, 53, 0, 140, 0, 275, 0, 293, 0, 296, 0, 104, 0, 257, 0, 152, 0, 311, 0, 182, 0, 263, 0, 245, 0, 125, 0, 314, 0, 140, 0, 44, 0, 203, 0, 230, 0, -235, 0, -286, 0, 23, 0, 107, 0, 92, 0, -91, 0, 38, 0, 464, 0, 443, 0, 176, 0, 98, 0, -784, 0, -2449, 0, -1891, 0, -1045, 0, -1600, 0, -1462, 0, -1384, 0, -1261, 0, -949, 0, -730, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ9KlattInitvE10formant_hz = allocate([280, 0, 688, 0, 1064, 0, 2806, 0, 3260, 0, 3700, 0, 6500, 0, 7000, 0, 8000, 0, 280, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ9KlattInitvE9bandwidth = allocate([89, 0, 160, 0, 70, 0, 160, 0, 200, 0, 200, 0, 500, 0, 500, 0, 500, 0, 89, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ9KlattInitvE12parallel_amp = allocate([0, 0, 59, 0, 59, 0, 59, 0, 59, 0, 59, 0, 59, 0, 0, 0, 0, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZ9KlattInitvE11parallel_bw = allocate([59, 0, 59, 0, 89, 0, 149, 0, 200, 0, 200, 0, 500, 0, 0, 0, 0, 0, 0, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL7parwaveP13klatt_frame_tE5noise = allocate(1, "double", ALLOC_STATIC);
			__ZZL7parwaveP13klatt_frame_tE5voice = allocate(1, "double", ALLOC_STATIC);
			__ZZL7parwaveP13klatt_frame_tE5vlast = allocate(1, "double", ALLOC_STATIC);
			__ZZL7parwaveP13klatt_frame_tE8glotlast = allocate(1, "double", ALLOC_STATIC);
			__ZZL7parwaveP13klatt_frame_tE5sourc = allocate(1, "double", ALLOC_STATIC);
			__ZZL21pitch_synch_par_resetP13klatt_frame_tE4skew = allocate(1, "i32", ALLOC_STATIC);
			__ZZL21pitch_synch_par_resetP13klatt_frame_tE2B0 = allocate([1200, 0, 1142, 0, 1088, 0, 1038, 0, 991, 0, 948, 0, 907, 0, 869, 0, 833, 0, 799, 0, 768, 0, 738, 0, 710, 0, 683, 0, 658, 0, 634, 0, 612, 0, 590, 0, 570, 0, 551, 0, 533, 0, 515, 0, 499, 0, 483, 0, 468, 0, 454, 0, 440, 0, 427, 0, 415, 0, 403, 0, 391, 0, 380, 0, 370, 0, 360, 0, 350, 0, 341, 0, 332, 0, 323, 0, 315, 0, 307, 0, 300, 0, 292, 0, 285, 0, 278, 0, 272, 0, 265, 0, 259, 0, 253, 0, 247, 0, 242, 0, 237, 0, 231, 0, 226, 0, 221, 0, 217, 0, 212, 0, 208, 0, 204, 0, 199, 0, 195, 0, 192, 0, 188, 0, 184, 0, 180, 0, 177, 0, 174, 0, 170, 0, 167, 0, 164, 0, 161, 0, 158, 0, 155, 0, 153, 0, 150, 0, 147, 0, 145, 0, 142, 0, 140, 0, 137, 0, 135, 0, 133, 0, 131, 0, 128, 0, 126, 0, 124, 0, 122, 0, 120, 0, 119, 0, 117, 0, 115, 0, 113, 0, 111, 0, 110, 0, 108, 0, 106, 0, 105, 0, 103, 0, 102, 0, 100, 0, 99, 0, 97, 0, 96, 0, 95, 0, 93, 0, 92, 0, 91, 0, 90, 0, 88, 0, 87, 0, 86, 0, 85, 0, 84, 0, 83, 0, 82, 0, 80, 0, 79, 0, 78, 0, 77, 0, 76, 0, 75, 0, 75, 0, 74, 0, 73, 0, 72, 0, 71, 0, 70, 0, 69, 0, 68, 0, 68, 0, 67, 0, 66, 0, 65, 0, 64, 0, 64, 0, 63, 0, 62, 0, 61, 0, 61, 0, 60, 0, 59, 0, 59, 0, 58, 0, 57, 0, 57, 0, 56, 0, 56, 0, 55, 0, 55, 0, 54, 0, 54, 0, 53, 0, 53, 0, 52, 0, 52, 0, 51, 0, 51, 0, 50, 0, 50, 0, 49, 0, 49, 0, 48, 0, 48, 0, 47, 0, 47, 0, 46, 0, 46, 0, 45, 0, 45, 0, 44, 0, 44, 0, 43, 0, 43, 0, 42, 0, 42, 0, 41, 0, 41, 0, 41, 0, 41, 0, 40, 0, 40, 0, 39, 0, 39, 0, 38, 0, 38, 0, 38, 0, 38, 0, 37, 0, 37, 0, 36, 0, 36, 0, 36, 0, 36, 0, 35, 0, 35, 0, 35, 0, 35, 0, 34, 0, 34, 0, 33, 0, 33, 0, 33, 0, 33, 0, 32, 0, 32, 0, 32, 0, 32, 0, 31, 0, 31, 0, 31, 0, 31, 0, 30, 0, 30, 0, 30, 0, 30, 0, 29, 0, 29, 0, 29, 0, 29, 0, 28, 0, 28, 0, 28, 0, 28, 0, 27, 0, 27, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL7DBtoLINlE8amptable = allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0, 11, 0, 13, 0, 14, 0, 16, 0, 18, 0, 20, 0, 22, 0, 25, 0, 28, 0, 32, 0, 35, 0, 40, 0, 45, 0, 51, 0, 57, 0, 64, 0, 71, 0, 80, 0, 90, 0, 101, 0, 114, 0, 128, 0, 142, 0, 159, 0, 179, 0, 202, 0, 227, 0, 256, 0, 284, 0, 318, 0, 359, 0, 405, 0, 455, 0, 512, 0, 568, 0, 638, 0, 719, 0, 881, 0, 911, 0, 1024, 0, 1137, 0, 1276, 0, 1438, 0, 1622, 0, 1823, 0, 2048, 0, 2273, 0, 2552, 0, 2875, 0, 3244, 0, 3645, 0, 4096, 0, 4547, 0, 5104, 0, 5751, 0, 6488, 0, 7291, 0, 8192, 0, 9093, 0, 10207, 0, 11502, 0, 12976, 0, 14582, 0, 16384, 0, 18350, 0, 20644, 0, 23429, 0, 26214, 0, 29491, 0, 32767, 0], ["i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0, "i16", 0], ALLOC_STATIC);
			__ZZL14natural_sourcevE5vwave = allocate(1, "double", ALLOC_STATIC);
			__ZZL16impulsive_sourcevE7doublet = allocate([0, 0, 0, 0, 0, 0, 0, 0, 13000000, 0, 0, 0, 0, 0, 0, 0, -13000000, 0, 0, 0, 0, 0, 0, 0], ["double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0], ALLOC_STATIC);
			__ZZL16impulsive_sourcevE5vwave = allocate(1, "double", ALLOC_STATIC);
			__ZZL9gen_noisedE5nlast = allocate(1, "double", ALLOC_STATIC);
			__ZZL7flutterP13klatt_frame_tE10time_count = allocate(1, "i32", ALLOC_STATIC);
			__ZZL10frame_initP13klatt_frame_tE14amp_par_factor = allocate([0.6, 0, 0, 0, 0, 0, 0, 0, 0.4, 0, 0, 0, 0, 0, 0, 0, 0.15, 0, 0, 0, 0, 0, 0, 0, 0.06, 0, 0, 0, 0, 0, 0, 0, 0.04, 0, 0, 0, 0, 0, 0, 0, 0.022, 0, 0, 0, 0, 0, 0, 0, 0.03, 0, 0, 0, 0, 0, 0, 0], ["double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0, "double", 0, 0, 0, 0, 0, 0, 0], ALLOC_STATIC);
			__str810 = allocate([47, 116, 109, 112, 47, 115, 111, 110, 105, 99, 46, 108, 111, 103, 0], "i8", ALLOC_STATIC);
			__str1811 = allocate([97, 0], "i8", ALLOC_STATIC);
			_optarg = allocate(1, "i8*", ALLOC_STATIC);
			_optind = allocate(1, "i32", ALLOC_STATIC);
			_opterr = allocate([1], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			_optopt = allocate([63], ["i32", 0, 0, 0, 0], ALLOC_STATIC);
			__ZL8optwhere = allocate(1, "i32", ALLOC_STATIC);
			__str831 = allocate([45, 45, 0], "i8", ALLOC_STATIC);
			__str1832 = allocate([80, 79, 83, 73, 88, 76, 89, 95, 67, 79, 82, 82, 69, 67, 84, 0], "i8", ALLOC_STATIC);
			__str2833 = allocate([37, 115, 58, 32, 111, 112, 116, 105, 111, 110, 32, 96, 37, 115, 39, 32, 105, 115, 32, 97, 109, 98, 105, 103, 117, 111, 117, 115, 32, 40, 99, 111, 117, 108, 100, 32, 98, 101, 32, 96, 45, 45, 37, 115, 39, 32, 111, 114, 32, 96, 45, 45, 37, 115, 39, 41, 10, 0], "i8", ALLOC_STATIC);
			__str3834 = allocate([37, 115, 58, 32, 105, 110, 118, 97, 108, 105, 100, 32, 111, 112, 116, 105, 111, 110, 32, 45, 45, 32, 96, 45, 37, 99, 39, 10, 0], "i8", ALLOC_STATIC);
			__str4835 = allocate([37, 115, 58, 32, 97, 114, 103, 117, 109, 101, 110, 116, 32, 114, 101, 113, 117, 105, 114, 101, 100, 32, 102, 111, 114, 32, 111, 112, 116, 105, 111, 110, 32, 96, 0], "i8", ALLOC_STATIC);
			__str5836 = allocate([45, 45, 37, 115, 39, 10, 0], "i8", ALLOC_STATIC);
			__str6837 = allocate([45, 37, 99, 39, 10, 0], "i8", ALLOC_STATIC);
			HEAP32[((__ZZ4mainE12long_options) >> 2)] = ((__str6) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 16) >> 2)] = ((__str7) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 32) >> 2)] = ((__str8) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 48) >> 2)] = ((__str9) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 64) >> 2)] = ((__str10) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 80) >> 2)] = ((__str11) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 96) >> 2)] = ((__str12) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 112) >> 2)] = ((__str13) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 128) >> 2)] = ((__str14) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 144) >> 2)] = ((__str15) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 160) >> 2)] = ((__str16) & 4294967295);
			HEAP32[((__ZZ4mainE12long_options + 176) >> 2)] = ((__str17) & 4294967295);
			HEAP32[((_mnem_rules) >> 2)] = ((__str42) & 4294967295);
			HEAP32[((_mnem_rules + 8) >> 2)] = ((__str143) & 4294967295);
			HEAP32[((_mnem_rules + 16) >> 2)] = ((__str244) & 4294967295);
			HEAP32[((_mnem_rules + 24) >> 2)] = ((__str345) & 4294967295);
			HEAP32[((_mnem_rules + 32) >> 2)] = ((__str446) & 4294967295);
			HEAP32[((_mnem_rules + 40) >> 2)] = ((__str547) & 4294967295);
			HEAP32[((_mnem_rules + 48) >> 2)] = ((__str648) & 4294967295);
			HEAP32[((_mnem_flags) >> 2)] = ((__str749) & 4294967295);
			HEAP32[((_mnem_flags + 8) >> 2)] = ((__str850) & 4294967295);
			HEAP32[((_mnem_flags + 16) >> 2)] = ((__str951) & 4294967295);
			HEAP32[((_mnem_flags + 24) >> 2)] = ((__str1052) & 4294967295);
			HEAP32[((_mnem_flags + 32) >> 2)] = ((__str1153) & 4294967295);
			HEAP32[((_mnem_flags + 40) >> 2)] = ((__str1254) & 4294967295);
			HEAP32[((_mnem_flags + 48) >> 2)] = ((__str1355) & 4294967295);
			HEAP32[((_mnem_flags + 56) >> 2)] = ((__str1456) & 4294967295);
			HEAP32[((_mnem_flags + 64) >> 2)] = ((__str1557) & 4294967295);
			HEAP32[((_mnem_flags + 72) >> 2)] = ((__str1658) & 4294967295);
			HEAP32[((_mnem_flags + 80) >> 2)] = ((__str1759) & 4294967295);
			HEAP32[((_mnem_flags + 88) >> 2)] = ((__str1860) & 4294967295);
			HEAP32[((_mnem_flags + 96) >> 2)] = ((__str1961) & 4294967295);
			HEAP32[((_mnem_flags + 104) >> 2)] = ((__str2062) & 4294967295);
			HEAP32[((_mnem_flags + 112) >> 2)] = ((__str2163) & 4294967295);
			HEAP32[((_mnem_flags + 120) >> 2)] = ((__str2264) & 4294967295);
			HEAP32[((_mnem_flags + 128) >> 2)] = ((__str2365) & 4294967295);
			HEAP32[((_mnem_flags + 136) >> 2)] = ((__str2466) & 4294967295);
			HEAP32[((_mnem_flags + 144) >> 2)] = ((__str2567) & 4294967295);
			HEAP32[((_mnem_flags + 152) >> 2)] = ((__str2668) & 4294967295);
			HEAP32[((_mnem_flags + 160) >> 2)] = ((__str2769) & 4294967295);
			HEAP32[((_mnem_flags + 168) >> 2)] = ((__str2870) & 4294967295);
			HEAP32[((_mnem_flags + 176) >> 2)] = ((__str2971) & 4294967295);
			HEAP32[((_mnem_flags + 184) >> 2)] = ((__str3072) & 4294967295);
			HEAP32[((_mnem_flags + 192) >> 2)] = ((__str3173) & 4294967295);
			HEAP32[((_mnem_flags + 200) >> 2)] = ((__str3274) & 4294967295);
			HEAP32[((_mnem_flags + 208) >> 2)] = ((__str3375) & 4294967295);
			HEAP32[((_mnem_flags + 216) >> 2)] = ((__str3476) & 4294967295);
			HEAP32[((_mnem_flags + 224) >> 2)] = ((__str3577) & 4294967295);
			HEAP32[((_mnem_flags + 232) >> 2)] = ((__str3678) & 4294967295);
			HEAP32[((_mnem_flags + 240) >> 2)] = ((__str3779) & 4294967295);
			HEAP32[((_mnem_flags + 248) >> 2)] = ((__str3880) & 4294967295);
			HEAP32[((_mnem_flags + 256) >> 2)] = ((__str3981) & 4294967295);
			HEAP32[((_mnem_flags + 264) >> 2)] = ((__str4082) & 4294967295);
			HEAP32[((_mnem_flags + 272) >> 2)] = ((__str4183) & 4294967295);
			HEAP32[((_mnem_flags + 280) >> 2)] = ((__str4284) & 4294967295);
			HEAP32[((_mnem_flags + 288) >> 2)] = ((__str43) & 4294967295);
			HEAP32[((_mnem_flags + 296) >> 2)] = ((__str44) & 4294967295);
			HEAP32[((_mnem_flags + 304) >> 2)] = ((__str45) & 4294967295);
			HEAP32[((_mnem_flags + 312) >> 2)] = ((__str46) & 4294967295);
			HEAP32[((_mnem_flags + 320) >> 2)] = ((__str47) & 4294967295);
			HEAP32[((_mnem_flags + 328) >> 2)] = ((__str48) & 4294967295);
			HEAP32[((_mnem_flags + 336) >> 2)] = ((__str49) & 4294967295);
			HEAP32[((_mnem_flags + 344) >> 2)] = ((__str50) & 4294967295);
			HEAP32[((_mnem_flags + 352) >> 2)] = ((__str51) & 4294967295);
			HEAP32[((_mnem_flags + 360) >> 2)] = ((__str52) & 4294967295);
			HEAP32[((_mnem_flags + 368) >> 2)] = ((__str53) & 4294967295);
			HEAP32[((_mnem_flags + 376) >> 2)] = ((__str54) & 4294967295);
			HEAP32[((_mnem_flags + 384) >> 2)] = ((__str55) & 4294967295);
			HEAP32[((_mnem_flags + 392) >> 2)] = ((__str56) & 4294967295);
			HEAP32[((_mnem_flags + 400) >> 2)] = ((__str57) & 4294967295);
			HEAP32[((__ZZL16copy_rule_stringPcRiE6outbuf) >> 2)] = ((__ZL9rule_cond) & 4294967295);
			HEAP32[((__ZZL16copy_rule_stringPcRiE6outbuf + 4) >> 2)] = ((__ZL8rule_pre) & 4294967295);
			HEAP32[((__ZZL16copy_rule_stringPcRiE6outbuf + 8) >> 2)] = ((__ZL10rule_match) & 4294967295);
			HEAP32[((__ZZL16copy_rule_stringPcRiE6outbuf + 12) >> 2)] = ((__ZL9rule_post) & 4294967295);
			HEAP32[((__ZZL16copy_rule_stringPcRiE6outbuf + 16) >> 2)] = ((__ZL13rule_phonemes) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E16add_e_exceptions) >> 2)] = ((__str17133) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions) >> 2)] = ((__str18134) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + 4) >> 2)] = ((__str19135) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + 8) >> 2)] = ((__str20136) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + 12) >> 2)] = ((__str21137) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + 16) >> 2)] = ((__str22138) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + 20) >> 2)] = ((__str23139) & 4294967295);
			HEAP32[((__ZZ12RemoveEndingP10TranslatorPciS1_E15add_e_additions + 24) >> 2)] = ((__str24140) & 4294967295);
			HEAP32[((_envelope_data) >> 2)] = ((_env_fall) & 4294967295);
			HEAP32[((_envelope_data + 4) >> 2)] = ((_env_fall) & 4294967295);
			HEAP32[((_envelope_data + 8) >> 2)] = ((_env_rise) & 4294967295);
			HEAP32[((_envelope_data + 12) >> 2)] = ((_env_rise) & 4294967295);
			HEAP32[((_envelope_data + 16) >> 2)] = ((_env_frise) & 4294967295);
			HEAP32[((_envelope_data + 20) >> 2)] = ((__ZL11env_r_frise) & 4294967295);
			HEAP32[((_envelope_data + 24) >> 2)] = ((__ZL10env_frise2) & 4294967295);
			HEAP32[((_envelope_data + 28) >> 2)] = ((__ZL12env_r_frise2) & 4294967295);
			HEAP32[((_envelope_data + 32) >> 2)] = ((__ZL12env_risefall) & 4294967295);
			HEAP32[((_envelope_data + 36) >> 2)] = ((__ZL12env_risefall) & 4294967295);
			HEAP32[((_envelope_data + 40) >> 2)] = ((__ZL13env_fallrise3) & 4294967295);
			HEAP32[((_envelope_data + 44) >> 2)] = ((__ZL13env_fallrise3) & 4294967295);
			HEAP32[((_envelope_data + 48) >> 2)] = ((__ZL13env_fallrise4) & 4294967295);
			HEAP32[((_envelope_data + 52) >> 2)] = ((__ZL13env_fallrise4) & 4294967295);
			HEAP32[((_envelope_data + 56) >> 2)] = ((__ZL9env_fall2) & 4294967295);
			HEAP32[((_envelope_data + 60) >> 2)] = ((__ZL9env_fall2) & 4294967295);
			HEAP32[((_envelope_data + 64) >> 2)] = ((__ZL9env_rise2) & 4294967295);
			HEAP32[((_envelope_data + 68) >> 2)] = ((__ZL9env_rise2) & 4294967295);
			HEAP32[((_envelope_data + 72) >> 2)] = ((__ZL16env_risefallrise) & 4294967295);
			HEAP32[((_envelope_data + 76) >> 2)] = ((__ZL16env_risefallrise) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 4) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 12) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 20) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 28) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 36) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 44) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 52) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 60) >> 2)] = ((__ZL9oflow_emf) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 68) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 76) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 84) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 92) >> 2)] = ((__ZL10oflow_less) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 100) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 108) >> 2)] = ((__ZL10oflow_less) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 116) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 124) >> 2)] = ((__ZL10oflow_less) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 132) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 140) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 148) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 156) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 164) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 172) >> 2)] = ((__ZL5oflow) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 180) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 188) >> 2)] = ((__ZL10oflow_less) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 196) >> 2)] = ((__ZL7drops_0) & 4294967295);
			HEAP32[((__ZL15tone_head_table + 204) >> 2)] = ((__ZL10oflow_less) & 4294967295);
			HEAP32[((__ZL8ssmltags) >> 2)] = ((__str167) & 4294967295);
			HEAP32[((__ZL8ssmltags + 8) >> 2)] = ((__str1168) & 4294967295);
			HEAP32[((__ZL8ssmltags + 16) >> 2)] = ((__str2169) & 4294967295);
			HEAP32[((__ZL8ssmltags + 24) >> 2)] = ((__str3170) & 4294967295);
			HEAP32[((__ZL8ssmltags + 32) >> 2)] = ((__str4171) & 4294967295);
			HEAP32[((__ZL8ssmltags + 40) >> 2)] = ((__str5172) & 4294967295);
			HEAP32[((__ZL8ssmltags + 48) >> 2)] = ((__str6173) & 4294967295);
			HEAP32[((__ZL8ssmltags + 56) >> 2)] = ((__str7174) & 4294967295);
			HEAP32[((__ZL8ssmltags + 64) >> 2)] = ((__str8175) & 4294967295);
			HEAP32[((__ZL8ssmltags + 72) >> 2)] = ((__str9176) & 4294967295);
			HEAP32[((__ZL8ssmltags + 80) >> 2)] = ((__str10177) & 4294967295);
			HEAP32[((__ZL8ssmltags + 88) >> 2)] = ((__str11178) & 4294967295);
			HEAP32[((__ZL8ssmltags + 96) >> 2)] = ((__str12179) & 4294967295);
			HEAP32[((__ZL8ssmltags + 104) >> 2)] = ((__str13180) & 4294967295);
			HEAP32[((__ZL8ssmltags + 112) >> 2)] = ((__str14181) & 4294967295);
			HEAP32[((__ZL8ssmltags + 120) >> 2)] = ((__str15182) & 4294967295);
			HEAP32[((__ZL8ssmltags + 128) >> 2)] = ((__str16183) & 4294967295);
			HEAP32[((__ZL8ssmltags + 136) >> 2)] = ((__str17184) & 4294967295);
			HEAP32[((__ZL8ssmltags + 144) >> 2)] = ((__str18185) & 4294967295);
			HEAP32[((__ZL8ssmltags + 152) >> 2)] = ((__str19186) & 4294967295);
			HEAP32[((__ZL8ssmltags + 160) >> 2)] = ((__str20187) & 4294967295);
			HEAP32[((__ZL8ssmltags + 168) >> 2)] = ((__str21188) & 4294967295);
			HEAP32[((__ZL8ssmltags + 176) >> 2)] = ((__str22189) & 4294967295);
			HEAP32[((__ZL8ssmltags + 184) >> 2)] = ((__str23190) & 4294967295);
			HEAP32[((__ZL8ssmltags + 192) >> 2)] = ((__str24191) & 4294967295);
			HEAP32[((__ZL8ssmltags + 200) >> 2)] = ((__str25192) & 4294967295);
			HEAP32[((__ZL8ssmltags + 208) >> 2)] = ((__str26193) & 4294967295);
			HEAP32[((__ZL8ssmltags + 216) >> 2)] = ((__str27194) & 4294967295);
			HEAP32[((__ZL8ssmltags + 224) >> 2)] = ((__str28195) & 4294967295);
			HEAP32[((__ZL8ssmltags + 232) >> 2)] = ((__str29196) & 4294967295);
			HEAP32[((__ZL8ssmltags + 240) >> 2)] = ((__str30197) & 4294967295);
			HEAP32[((__ZL8ssmltags + 248) >> 2)] = ((__str31198) & 4294967295);
			HEAP32[((__ZL18xml_char_mnemonics) >> 2)] = ((__str32199) & 4294967295);
			HEAP32[((__ZL18xml_char_mnemonics + 8) >> 2)] = ((__str33200) & 4294967295);
			HEAP32[((__ZL18xml_char_mnemonics + 16) >> 2)] = ((__str34201) & 4294967295);
			HEAP32[((__ZL18xml_char_mnemonics + 24) >> 2)] = ((__str35202) & 4294967295);
			HEAP32[((__ZL18xml_char_mnemonics + 32) >> 2)] = ((__str36203) & 4294967295);
			HEAP32[((__ZL18xml_char_mnemonics + 40) >> 2)] = ((__str37204) & 4294967295);
			HEAP32[((__ZL7xmlbase) >> 2)] = ((__str13643) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_punct) >> 2)] = ((__str61228) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_punct + 8) >> 2)] = ((__str62229) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_punct + 16) >> 2)] = ((__str63230) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals) >> 2)] = ((__str64231) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals + 8) >> 2)] = ((__str65232) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals + 16) >> 2)] = ((__str66233) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_capitals + 24) >> 2)] = ((__str9659) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as) >> 2)] = ((__str68235) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as + 8) >> 2)] = ((__str69236) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as + 16) >> 2)] = ((__str70237) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as + 24) >> 2)] = ((__str71238) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_interpret_as + 32) >> 2)] = ((__str72239) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE17mnem_sayas_format) >> 2)] = ((__str73240) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break) >> 2)] = ((__str61228) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break + 8) >> 2)] = ((__str74241) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break + 16) >> 2)] = ((__str75242) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break + 24) >> 2)] = ((__str76243) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break + 32) >> 2)] = ((__str29196) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE10mnem_break + 40) >> 2)] = ((__str77244) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis) >> 2)] = ((__str61228) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis + 8) >> 2)] = ((__str78245) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis + 16) >> 2)] = ((__str79246) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE13mnem_emphasis + 24) >> 2)] = ((__str29196) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr + 4) >> 2)] = ((__str80247) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr + 8) >> 2)] = ((__str81248) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr + 12) >> 2)] = ((__str9659) & 4294967295);
			HEAP32[((__ZZL14ProcessSsmlTagPwPcRiiiE12prosody_attr + 16) >> 2)] = ((__str82249) & 4294967295);
			HEAP32[((__ZZL18GetVoiceAttributesPwiE11mnem_gender) >> 2)] = ((__str1647) & 4294967295);
			HEAP32[((__ZZL18GetVoiceAttributesPwiE11mnem_gender + 8) >> 2)] = ((__str2648) & 4294967295);
			HEAP32[((__ZZL18GetVoiceAttributesPwiE11mnem_gender + 16) >> 2)] = ((__str105272) & 4294967295);
			HEAP32[((__ZZL14ReplaceKeyNamePciRiE8keynames) >> 2)] = ((__str111278) & 4294967295);
			HEAP32[((__ZZL14ReplaceKeyNamePciRiE8keynames + 8) >> 2)] = ((__str112279) & 4294967295);
			HEAP32[((__ZZL14ReplaceKeyNamePciRiE8keynames + 16) >> 2)] = ((__str113280) & 4294967295);
			HEAP32[((__ZZL14ReplaceKeyNamePciRiE8keynames + 24) >> 2)] = ((__str114281) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume) >> 2)] = ((__str45697) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume + 8) >> 2)] = ((__str115282) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume + 16) >> 2)] = ((__str116283) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume + 24) >> 2)] = ((__str117) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume + 32) >> 2)] = ((__str76243) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume + 40) >> 2)] = ((__str118) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume + 48) >> 2)] = ((__str119) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate) >> 2)] = ((__str45697) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate + 8) >> 2)] = ((__str120) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate + 16) >> 2)] = ((__str121) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate + 24) >> 2)] = ((__str76243) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate + 32) >> 2)] = ((__str122) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate + 40) >> 2)] = ((__str123) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch) >> 2)] = ((__str45697) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch + 8) >> 2)] = ((__str124) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch + 16) >> 2)] = ((__str125) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch + 24) >> 2)] = ((__str76243) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch + 32) >> 2)] = ((__str126) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch + 40) >> 2)] = ((__str127) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range) >> 2)] = ((__str45697) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range + 8) >> 2)] = ((__str124) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range + 16) >> 2)] = ((__str125) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range + 24) >> 2)] = ((__str76243) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range + 32) >> 2)] = ((__str126) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range + 40) >> 2)] = ((__str127) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs + 4) >> 2)] = ((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_rate) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs + 8) >> 2)] = ((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE11mnem_volume) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs + 12) >> 2)] = ((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_pitch) & 4294967295);
			HEAP32[((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE9mnem_tabs + 16) >> 2)] = ((__ZZL19SetProsodyParameteriPwP11PARAM_STACKE10mnem_range) & 4294967295);
			HEAP32[((__ZL11accents_tab) >> 2)] = ((__str57354) & 4294967295);
			HEAP32[((__ZL11accents_tab + 8) >> 2)] = ((__str58355) & 4294967295);
			HEAP32[((__ZL11accents_tab + 16) >> 2)] = ((__str59356) & 4294967295);
			HEAP32[((__ZL11accents_tab + 24) >> 2)] = ((__str60357) & 4294967295);
			HEAP32[((__ZL11accents_tab + 32) >> 2)] = ((__str61358) & 4294967295);
			HEAP32[((__ZL11accents_tab + 40) >> 2)] = ((__str62359) & 4294967295);
			HEAP32[((__ZL11accents_tab + 48) >> 2)] = ((__str63360) & 4294967295);
			HEAP32[((__ZL11accents_tab + 56) >> 2)] = ((__str64361) & 4294967295);
			HEAP32[((__ZL11accents_tab + 64) >> 2)] = ((__str65362) & 4294967295);
			HEAP32[((__ZL11accents_tab + 72) >> 2)] = ((__str66363) & 4294967295);
			HEAP32[((__ZL11accents_tab + 80) >> 2)] = ((__str67364) & 4294967295);
			HEAP32[((__ZL11accents_tab + 88) >> 2)] = ((__str68365) & 4294967295);
			HEAP32[((__ZL11accents_tab + 96) >> 2)] = ((__str69366) & 4294967295);
			HEAP32[((__ZL11accents_tab + 104) >> 2)] = ((__str70367) & 4294967295);
			HEAP32[((__ZL11accents_tab + 112) >> 2)] = ((__str71368) & 4294967295);
			HEAP32[((__ZL11accents_tab + 120) >> 2)] = ((__str72369) & 4294967295);
			HEAP32[((__ZL11accents_tab + 128) >> 2)] = ((__str73370) & 4294967295);
			HEAP32[((__ZL11accents_tab + 136) >> 2)] = ((__str74371) & 4294967295);
			HEAP32[((__ZL11accents_tab + 144) >> 2)] = ((__str75372) & 4294967295);
			HEAP32[((__ZL11accents_tab + 152) >> 2)] = ((__str76373) & 4294967295);
			HEAP32[((__ZL11accents_tab + 160) >> 2)] = ((__str77374) & 4294967295);
			HEAP32[((__ZL11accents_tab + 168) >> 2)] = ((__str78375) & 4294967295);
			HEAP32[((_version_string) >> 2)] = ((__str399) & 4294967295);
			HEAP32[((_charsets) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 4) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 8) >> 2)] = ((__ZL10ISO_8859_2) & 4294967295);
			HEAP32[((_charsets + 12) >> 2)] = ((__ZL10ISO_8859_3) & 4294967295);
			HEAP32[((_charsets + 16) >> 2)] = ((__ZL10ISO_8859_4) & 4294967295);
			HEAP32[((_charsets + 20) >> 2)] = ((__ZL10ISO_8859_5) & 4294967295);
			HEAP32[((_charsets + 24) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 28) >> 2)] = ((__ZL10ISO_8859_7) & 4294967295);
			HEAP32[((_charsets + 32) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 36) >> 2)] = ((__ZL10ISO_8859_9) & 4294967295);
			HEAP32[((_charsets + 40) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 44) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 48) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 52) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 56) >> 2)] = ((__ZL11ISO_8859_14) & 4294967295);
			HEAP32[((_charsets + 60) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 64) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 68) >> 2)] = ((__ZL10ISO_8859_1) & 4294967295);
			HEAP32[((_charsets + 72) >> 2)] = ((__ZL6KOI8_R) & 4294967295);
			HEAP32[((_charsets + 76) >> 2)] = ((__ZL5ISCII) & 4294967295);
			HEAP32[((__ZL15length_mod_tabs) >> 2)] = ((__ZL14length_mods_en) & 4294967295);
			HEAP32[((__ZL15length_mod_tabs + 4) >> 2)] = ((__ZL14length_mods_en) & 4294967295);
			HEAP32[((__ZL15length_mod_tabs + 8) >> 2)] = ((__ZL15length_mods_en0) & 4294967295);
			HEAP32[((__ZL15length_mod_tabs + 12) >> 2)] = ((__ZL17length_mods_equal) & 4294967295);
			HEAP32[((__ZL15length_mod_tabs + 16) >> 2)] = ((__ZL17length_mods_equal) & 4294967295);
			HEAP32[((__ZL15length_mod_tabs + 20) >> 2)] = ((__ZL17length_mods_equal) & 4294967295);
			HEAP32[((_genders) >> 2)] = ((__str646) & 4294967295);
			HEAP32[((_genders + 8) >> 2)] = ((__str1647) & 4294967295);
			HEAP32[((_genders + 16) >> 2)] = ((__str2648) & 4294967295);
			HEAP32[((__ZL11options_tab) >> 2)] = ((__str3653) & 4294967295);
			HEAP32[((__ZL11options_tab + 8) >> 2)] = ((__str4654) & 4294967295);
			HEAP32[((__ZL11keyword_tab) >> 2)] = ((__str5655) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 8) >> 2)] = ((__str6656) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 16) >> 2)] = ((__str7657) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 24) >> 2)] = ((__str8658) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 32) >> 2)] = ((__str9659) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 40) >> 2)] = ((__str10660) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 48) >> 2)] = ((__str11661) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 56) >> 2)] = ((__str12662) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 64) >> 2)] = ((__str13663) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 72) >> 2)] = ((__str14664) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 80) >> 2)] = ((__str15665) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 88) >> 2)] = ((__str16666) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 96) >> 2)] = ((__str17667) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 104) >> 2)] = ((__str18668) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 112) >> 2)] = ((__str19669) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 120) >> 2)] = ((__str20670) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 128) >> 2)] = ((__str21671) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 136) >> 2)] = ((__str22672) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 144) >> 2)] = ((__str23673) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 152) >> 2)] = ((__str24674) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 160) >> 2)] = ((__str25675) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 168) >> 2)] = ((__str26676) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 176) >> 2)] = ((__str27677) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 184) >> 2)] = ((__str28678) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 192) >> 2)] = ((__str29679) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 200) >> 2)] = ((__str30680) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 208) >> 2)] = ((__str31681) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 216) >> 2)] = ((__str32682) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 224) >> 2)] = ((__str33683) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 232) >> 2)] = ((__str34684) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 240) >> 2)] = ((__str35685) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 248) >> 2)] = ((__str36686) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 256) >> 2)] = ((__str37687) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 264) >> 2)] = ((__str38688) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 272) >> 2)] = ((__str39689) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 280) >> 2)] = ((__str40690) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 288) >> 2)] = ((__str41691) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 296) >> 2)] = ((__str42692) & 4294967295);
			HEAP32[((__ZL11keyword_tab + 304) >> 2)] = ((__str43693) & 4294967295);
			HEAP32[((_variant_lists) >> 2)] = ((__ZL15variants_either) & 4294967295);
			HEAP32[((_variant_lists + 4) >> 2)] = ((__ZL13variants_male) & 4294967295);
			HEAP32[((_variant_lists + 8) >> 2)] = ((__ZL15variants_female) & 4294967295);
			HEAP32[((_voice) >> 2)] = __ZL9voicedata;
			FS.init();
			__ATEXIT__.push({
				func: function () {
					FS.quit()
				}
			});
			___setErrNo(0);
			_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
			___buildEnvironment(ENV);
			_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
			FUNCTION_TABLE = [0, 0, __ZL13rgroup_sorterP6RGROUPS0_, 0, __Z13string_sorterPPcS0_, 0, __ZL15VoiceNameSorterPKvS0_, 0, __ZL16VoiceScoreSorterPKvS0_, 0];
			Module["FUNCTION_TABLE"] = FUNCTION_TABLE;
			__globalConstructor__();
			var ret = null;
			if (Module._main) {
				ret = Module.callMain(args);
				__shutdownRuntime__();
			}
			return ret;
		}
		Module.run = run;
		if (!Module.noInitialRun) {
			run();
		}
		return {
			Module: Module,
			FS: FS,
			run: run
		};
	}
	var eSpeakDir = '/espeak',
		eSpeakDataDir = '/espeak/espeak-data',
		eSpeakVoicesDir = '/espeak/espeak-data/voices',
		eSpeak = new ESpeak(),
		fileRegistry = [],
		fsErrorDetected = false,
		configDataLoaded = false,
		unloading = false,
		speakQueue = [],
		voicesLoaded = {},
		defaultVoice = '',
		AudioAPI = null,
		canPlay = false,
		playbackVolume = 1,
		masterGain = null,
		audioContext = null,
		audioPool = {},
		webSoundPool = {},
		wsUseTimeout = false,
		wsStartFromCallback = false;
	const data_voice = {
		"voice_id": "es-la",
		"dict_id": "es_dict",
		"dict": "AAQAAPcSAAAAAAAAAAZBBCMADgXBBEgcAAAAAAZBCEUkAAAAAAAGQQxVJAAAAAfDRVFASAgNBF8IAQMxI0MGbDIAAAAGQRBGJAAAAArHFTUBSFNPTEgJhhMFEsOtAUgAAAAFwmTwTAAQBF8wQw9VazIvBmtXJT8AAAmGEwUSw6EOSAAIQRgXa1EkAAAAAAAGQRxjJAAAABAEXzNYDy9DJWMGa1clPwAAAAdBICNKJAAACocUBQ7DqQkTSAnGWVFTUSPATAnGOVFTUSPATAAADwEjIzc/bCNUBiVgIwAbAAmGEwUSw6ETSAAKhwgBAsOpCRNIDwElMGxDVTkGazIvJwAbAA4BJiM/MGszVwYjMi8AAAAIQShjbC8jAAAAB8NA9IBICA8BKiNXL2sQBiVXMScAGwAJASs/BiNXABsABkEsMSMAAAAKAS4wKDIvJwAbAAkBL0UjEDMjAAAIQTAXazckAAAAAAyJCAECw60BDQ8TSAAIQTQXaz8kAAnGWVFTUSPTTAnGOVFTUSPTTAAKh8OpEgENDxNIAAAACEE4F2syJAAJBV8wAQ4EJQAAAAAABkE8JwAOBcE8SAgACwE9JWI6BiM3ABsAAAAGQUAwJAALAUAjEDMGJ1AjAAAKhwMVw6EMBRMIAAAABkFEMSgAAAqHCAEDw6kJE0wABsNU4EBIAAAIQUgXa0MkAAAADIkFExQBEsOtAQ5IAAAIQUwXa1ckAAAAAAAGQVAvJAAAAAAACcY49M9RI9NMAAAQBF8xQw9VazIvBmtXJT8AAAAIQVgXKFAkAAAFwgUwTAAAEgRfMU00BigyRSU5DAZsMgBmEARfMU00BigyRSVgBmwyAAAPQVwEKFAkD0YGbFA3JAAACcYgEMU09MBMABABXlUlMzEoP1E3BiRjJwAAAAlBYBdrMSVXAAASBF8xTTIGKDI/JTkMBmwyAGYQBF8xTTIGKDI/JWAGbDIAAAAHxCAQhUhIAA5BZAQlT0MGJWtiIwAOB0FkAiUACAAABsMw9MBIAAyJBRMUARLDrQETSAAIQWhVay8jAAAJxgUVRTDAQEwAAAAAAAAAAAAAAAAAAAAABsNU4FNIAAAACocTBRLDrQEOSAAJxiFQiTT0wEgAAAAACocTBRLDrQETSAAAAAAAEwRfMTkPVCRVJT8nMidQBiQyAAAAAAAAAAAAAAwEXzFDMFUGJSQyAAAAAAAAAAAAAAnGIBCSFNPTSAAAAAAJxlj0z1EgU0wJxgUVRTDAU0wAABIEXzE4D1QkVSU/bDEvBiNQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADosFExQBEsOtAQ0PE0gAAAAAAAAAAAAAAAAAAAAAAArHIVCJTUFJTEgPBF8xMQ8oMkYGa1UlPwAAAAAAAAfEMJOVYEEACcYZUlNQUlNIAAAAAAAOQhBQRgQkNyMAUWxhIAXCEFBIBsNU49NIAAAHxBUgSUxIAAjFBMHVOBBIBsMQUwBIAAAUBF8xMw9UJFUlPycvazNVBmtDAAALBF8EEBQxJz8jAAAIxRU1AQgQSAjFFTUBCBBIAAXCFTBIAAAAAAANBF8xMA9UBmtVJT8AAAAIxRlSTT0wSAAHQgyASiQABsIEwEgcAAANBF8UDAQvBiU3RiQAAAAAEgRfMTUPVCRVJT8nMQYlMi8AAAfEUFOHPEgAAAAACcYhUIkVI85IAAAAEARfMTIPVDonVAZrVSU/AAAAAAAGwyAWQEgAAAnGBRVFMMPTTAAAFARfMTcPVCRVJT8nVwZrMC8lPwAAB8QUww9MTAAAAAAAAAATBF8xNA9UJFUlPycxOgYjQy8AAAAAAAAAB8RQU4VISAAAAAAHxBTDAUxMAAAABsMZUUBIAAATBF8xNg9UJFUlPydXBmsxVy8AAAAAAAAFwiAQSAAGwxlSQEgAAAAAAAAAEAVfME0xDz8lNwZrVyU/AAAGwyATgEgAABMEXzdYD1drMC86I2MGa1clPwAAAAAAC4gIAQISw6kJE0gAB8NAFIFICAAAAAAMiQUTFAESw6kJE0gAAAvIFTUVWJFSPOBIAAAAAAAAAAAAAAAJxlj0z1Ej00wAAAAAAAAACocFExQBEsOpSAAAAAAAAAAACocFExQBEsOhSAAAAAAGwyAQxUwAAAbDIBHPTA0DXzEPMEMlPwZrQwAACocIAQLDrQEOSAAACQPigqxxQycAAAAAAAANA18yD1ckYgYoMkYAAAAFwiBQSAAAAAjFQPSRVFAIAAAADQNfMw8vazNVBmtDAAgEXw8SBCcAAAAAAAAAAAAAAAXCFMBIAAbDIBTASAwDXzIwRQZ0Mi8kAAAKhwgBAsOtARNIAAAABsMwFMBIAAoDXzUPMSUyLwAAAA4EXw0DDj8jMUMGbDIAAAAAAAAADANfNg9XBmsxVy8AAAAAB4QBE8OtCAAAAAAADANfNw9XBmsvJT8AAAAAAAAAAAAAAAbCFOBIHAANA18zWC9DBnQyLyMAAA4DXzBDVTkGazIvbFcAAAAAAAwDXzkPMidQBiQyAAAAAAANA18xQ1UGJSQyLycAAAAAC4gFExQBEsOtAUgAAAAFwjAQSAgEXyPCqiMAAAAACMUVNRVYUEgAAAAAAAsDXzExBmwyVSQAAAAMA18xMy9DBiRVJAAACwNfMTJGBidVJAAADANfMTUxBiUyVSQAAA4DXzE0MSMvBmwzVSQAAAwDXzQPMToGI0MvAAAACARfI8K6JwAADgNfN1hXay8GazIvIwAAAAAAAAAAAAAQA181QzElMjkGazIvbFcAAAmGCAECw60BSAAAAAAAAAsDXzFYRjkGa1UAAAAADIkTBRLDrQENDxNIAAAAAAALA18yWEUGdDIvAAAHxAUVRTBMEwNfN0NXBCQvJFU5BmsyL2xXAAAAAAAMA184D2wxLwYjUAAAAAAAAAjFGVFSPOBIAAAADgNfPz9XBiU/RWw3JwAAAAAPA180WDE6IxAGazIvIwAAEwNfOUMyBGxQJFU5BmsyL2xXAAAAAAAAAAAQA181WFUlMjE6BmsyLyMAAAAAAAAAAAAOA182WFdrVwZrMi8jAAAADwRfMlgPUCVjBmtXJT8AAAAACYYBDAfDug5IAAAAAAAAAAAAAAANA184WGxKBmsyLyMAAAAKhwgBAhLDoQ5IAAuIBRMUARLDoQ5IAAAAAAXCNFBMAA4DXzlYMmxQBmsyLyMAAAAAAAAAAAAAAAAAAAALiAUTFAESw6ETSAAAAAAAAAAOBF8PBw8xJzcGJS8jAAAIxBTlEhRICAAAAAAAAAAAAAAAAAAAAAAAEUY0VgkME48/a2MlMSMyJwAABcI9MEwAABIEXzBNNApFJTkMBicya1cAZhAEXzBNNApFJWAGJzJrVwAAAAqHCAECEsOhE0gRBF8wTTI/JTkMBicyJFcAZg8EXzBNMj8lYAYnMiRXAAAAAAsEXzBNMT8GJTcAAA0EXwISFkVDBiRQJAAAAAAAAAbDTFSASAAAAAAJxkyUVSRUgQgAAAAAAAAACEI0kD8lAEwAAAAIxRU1FVjwSAAAAAAAAAAAAAALiAgBAsOtAQkTSAAADYoFExQBEsOtAQkTSAAKQjDAazkMJABmCEIwwGtgJAAAAAfEUJFOFEgAAAAAAAAAAAAAAAAAAAAGg8OpDEwAB8QgEMU4TAAAAAAACcUFU5FUUEgIAAATBF80WA8xOiNUQyNjBmtXJT8AAAAIxVCRThUwSAATBF8DCRJVJTMxKD9RNwYkYycAAAAAAAAGwzSUwEwAB8QgEMVITAAAAAbDOPTATAAHxCAQxUxMAAAJxgTB1Tj0wEgADQRfExQLRQYjEDMjAAAADQRfAQMVI2IGKFQnAAATA1/DswYnDyNVazIvOgYjVCMAGQNfwqsxJz8GJWAjVw8lVTFgBmszVCNXAAAAAAAFwjDwSAAAAAAADQRfEg4HIzIGJWAnAAAXA1/CoSNQQwYlMyNUPyVDI1U5BmwyAAAAAAAAAAiFBRMUw6FIAAAAAAiFEwUSw6FIAAAAAAAGwxUgQEgAAAbDFSBOSAAIhRMFEsOpSAAAAAAUBF8BAzJGBmxFNyQPI2IGKFQnAAAAAAAAAAANigUTFMOhAgENDxNIAAbDFSBTSAbDFSBTSAAAAAAbA1/CvyNQQwYlMyUyL2sQMwQnYiNVOQZsMgAAEwRfNVgPMSUyMTojYwZrVyU/AAAAABcDX8K7MSc/BiVgI1cPRmtDBmtKI1cAAAAAAAAAAAAABsNNVMBMAAAAAAAAAAAAAA0CwqdXazFVOQZsMgAABcI48EgFwkxQTAAAAAsCwqM3JVBDI1cAAAAAAAAFwk1QTAAAAAAKhxMFEsOpCRNIABICw6EGIw8jVWsyLzoGI1QjAA4CwqkxJzAlEDMGcy8AAA0CwrYwBiMQMyNRJwAAAAbDTPJTSAASAsOtBiUPI1VrMi86BiNUIwAAAAAAEgLDqQYkDyNVazIvOgYjVCMACscVNRVYk09MSAAAAAAADgRfAwUEVSRUBiVgIwAAEwLDswYnDyNVazIvOgYjVCMADgAACQLDsRdrQSQAEARfDAkHNyViI1QGKEMjAAAAABACw7wEKFQ5a0MGa1clVwAFwlBQTAAAEgLDugYoDyNVazIvOgYjVCMAAAAAAAAABcJRUEwFwlFQTAASBF82WA9XJGJXI2MGa1clPwAAAAAAAAAABcJUQEwAAAfEIFNPTEgHxEzzT0xIAAjFUJFOFOBIAAAAAAAAAAbDFTUFTAAAAAAGwxU1AUwAAAbDFTUPTAAGw0z2QEgAAAAAAAAAAAYCXwEjAAAAAAAAAAAAAAYCXw8nAAAAAAAJxhU1AQgSU0gGwxUwQEwAAAAAAAAAAAbDFTFATAAADgJfGQQlT0MGJWtiIwAAAAAGwxUwU0wAAAAADQJfIjEnPwYlYCNXAAAXAl8hVWsQMwYjMyNUPyVDI1U5BmwyAAAGwxTDAUwABsNM84BIB8MM84BICA8CXycjMGxXL0MGJ1EnAAAAAAATAl8rVwYlYjJsRiRXKD8GIzMAAA0EXwMBED8GI2AoVwAAFwJfKVU5BGsQMyMwI0MGazIvJFclVwAAFQJfKAQjUEMkMCNDBmsyLyRXJVcAAAoCXy9FIxAzIwAACgJfLjAoMi8nAAAJAl8tT2BsMgAACQJfLDEnPyMAAAoCXzMvQwYkVwAACQJfMkYGbFcAAAmGCAECEsOpSAkCXzEGKDInAAAJAl8wVSQQJwAACwJfN1c5BiQvJAAACQJfNlcGdFcAAAsCXzVVBiUyMScAFARfBAEDRgZsRTckDyNiBihUJwAADAJfNDE6BiMvQycAABECXzswBCgyLyclMQYnPyMAABACXzpGBGxXMAYoMi9sVwAACwJfOTI6BiRQJAAACQJfOAZsSicAABsCXz9VaxAzBiMzJTIvaxAzBCdiI1U5BmwyAAANAl8+PyNgBmwzMSQAAAANAl88PyQyBmwzMSQAAAAHxBBUxBQIAAAAAAAAAAAACYYIAQISw6FIAAnGFTUBCBOASAAAAAAGwyFQhUgJxlU1BRBUwEwAAAAMyRU1FViU1BSUwEgACcYVNQEIFMBICcYVNQE09MBIAAANBF8EDxQwBigyLycAAAAAEgJfWwQjUEMkMWwzSgYkLyQAAAAAB0JYkEUlAAAPAl9fVyhQQyNgBiNUJwAAABQCX11VOQRrEDMjMWwzSgYkLyQAABUCX1xFBiMQMyMlP0VrMy8GJVQjAAAAABEEXzhYD2wxLydjBmtXJT8AABICX2AjVQZrMi9sT0MGI1AkAAAABsMhUI9IAAAAAAAADQRfBxIWT0MGI1AkAAAAEAcNw6kYCQMPP2tjJTEnAAAAAAbDMFTASAAAAAnGUFOFNPTASAnGTFSFNPTASAAAAAAADwJfewQjUEMkYAYjUCQAEARfBAkBRjkGa0MkVyVXAAAAAAAAABECX31VOQRrEDMjYAYjUCQAAAAAAAAAAAAAAAAHxFU1BRBMAAAFwlTgSAAAAAAJxllRU1EgQEwJxjlRU1EgQEwAAAAAAAAAAAnGIVCJTUFASA8EXyMzMmtXMAYjVTknAAAAAAAACcZZUVNRIFNMCcY5UVNRIFNMAAAIxRlSU1BQSAAIhQPDsw0PCAAAABEEXzlYDzInMiNjBmtXJT8AAAAAAAuIEwUSw60BCRNIAAAGwxUzwEwAAAAAAAAAAAbDUVTATAAAAAAABsMVM9NMAAAAAAAAAAnGOPTPUSBTTAAAAAAAAAAACscVNRVYlNQUSAAAAAAACocFExTDoQkTSAALiAQFExAVw6kTCAaDFMO6TAAAAAfEFTUPTEwACIUDFcOhDAgAAAAAAAAAAAAAAAAAAAAHxBU1AUxMAAAAAAfEFTUBSEgAAAAAAAAAAAAAAAAAAAAGw1REwEwAAAAAAAAAAAAAAAAAAAAAAAmGBRMUw6EOSAAAAAmGBRMUw6ETSAAHxBU1D2RIAAYSQmwAcgB5AAcGEkNiAGQAZwBuAG0ABwYSRGYAaABqAHMAeQB6AHIABwYSRWIAdgBmAHAABwYSRmcAawAHBhJHagB3AGwAcgBiAGQAZwBuAG0AcAB0AGsAYwAHBmEAdQIgAwZwAHkCIAMGcwADIwB1A3AABGkDcwB5AhkABwZiAAQDRQABbQABbgACaRFBAAJ1EUEACAISQhFBAAgCHAEABAIRQQNQAAISRAACYxFHAAcGYwAEAzEACAISQhFBAARoA0oAaAgCEUEAAhFHA1UABwZkAAQDRgABbAABbQABbgABcgAIAhwBAAgCchFBAAQCEUEDVAACEkQAAmMRRwAHBmUAdQIgAwZxAHkCIAMGdAAEAyQAAhFDaAAEAXIRQQNrAAIRQxkAAnIAdQNxAARpA3QAeQIZAAcGZgAEA1EACAISQhFBAAcGZwBuCAIRQQMyAAQDTwABbQABbgAIAhJCEUEACAIcAQBoCAIRQQAEAhFBA2IAAhJEAAJjEUcAAhFHDANjAAcGaAADAAcGaQAEAWwCEUEDAiUAAXICEUEAAyUAARFDAhFBAzkAAhFBA2AABwZqAANjAAcGawAEAzEACAISQhFBAAcGbAADNwBsBQIBEUECEUEDOQwABGwDYABsCAIRQQAHBm0ABAIZAzIAbggCZW0ABAM/AAISRQACIBJFAAQCEkYDQgACIBJGAAJqAAcGbgADMgAEAhJFAz8AAiASRQAEAhJGA0IAAiASRgACagAHBm8AeQIgAwZ2AAQDJwACEUNoAAQBchFBA2wAAhFDGQACcgAEaQN2AHkCGQAHBnAABHQIAmVybwMvAHQIAm9sAAQDMAAIAhJCEUEAAnQDMAwABGgCGQNRAGgIAARzCAJldWRvA1cAcwgCaQAHBnEABAMxAHUABwZyAAIgAxAABAMzAAFsAhFBAAFtAhFBAAFuAhFBAAFzAhFBAHIDMzQABAERQQIRQQNDAAERQwIRQQACdAAHBnMACAIRQwMCa1cABANXAAEKAiAOgICBAARoAhkDWQBoCAIRQQBoCAISQhFBAAcGdAAEAy8ACAISQhFBAARoAhkDVQBoCAAHBnUAAWcCEUcDAAQBbAIRQQMCKAABcgIRQQADKAAEAhFBAzoAAnkgAAcGdgAEBQEBbQNFAAUBAW4ABQECEkcABQECaRFBAAUBAnURQQAIAhJCEUEAA1AABAUCAhJHA1IABQICaRFBAAUCAmoABQICdRFBAAUCCAAFAgNTAAcGdwAEAzoAaAgCEUEABwZ4AAIgAwhiVwADMVcACAIcAQNWAAUBARFBAhFBA2JXAAcGeQADJQAFAgERQQIRQQM5DAAEAW4DTQAIAhwBAAhsAAhtAAIRQQNgAAcGegADVQAFAgISQwNWAAcGAMOhAwcjAMOtAwclAMO6AwcoAMOpAwdrAMOzAwdsAAQtASARQQIgDwMKAC0BIBFDAiAPAMO8AygALAIPAzFsPyMALQgCIA8DPwZrMmxXAMOxA0EAJANGBmw3IxAABwA=",
		"voice": "bmFtZSBzcGFuaXNoLWxhdGluLWFtZXJpY2FuCmxhbmd1YWdlIGVzLWxhCmxhbmd1YWdlIGVzLW14IDYKZ2VuZGVyIG1hbGUKCnBob25lbWVzIGVzLWxhCmRpY3RydWxlcyAyCmludG9uYXRpb24gMgpzdHJlc3NMZW5ndGggMTcwIDIwMCAgMTgwIDE4MCAgMCAwICAyNTAgMjgwCgpyZXBsYWNlIDAwIFQgcwo="
	}
	const data_config = {
		"config": "Ly9wYV9kZXZpY2UgNwoKLy8gcGxheSBhIHNvdW5kIGZvciBwdW5jdHVhdGlvbiwgcmF0aGVyIHRoYW4gc3BlYWsgaXRzIG5hbWUKLy9zb3VuZGljb24gXyggL3Vzci9zaGFyZS9zb3VuZHMvc291bmQtaWNvbnMvbGVmdC1yb3VuZC1icmFja2V0Ci8vc291bmRpY29uIF8pIC91c3Ivc2hhcmUvc291bmRzL3NvdW5kLWljb25zL3JpZ2h0LXJvdW5kLWJyYWNrZXQKLy9zb3VuZGljb24gX1sgL3Vzci9zaGFyZS9zb3VuZHMvc291bmQtaWNvbnMvbGVmdC1zcXVhcmUtYnJhY2tldAovL3NvdW5kaWNvbiBfXSAvdXNyL3NoYXJlL3NvdW5kcy9zb3VuZC1pY29ucy9yaWdodC1zcXVhcmUtYnJhY2tldAovL3NvdW5kaWNvbiBfeyAvdXNyL3NoYXJlL3NvdW5kcy9zb3VuZC1pY29ucy9sZWZ0LWJyYWNlCi8vc291bmRpY29uIF99IC91c3Ivc2hhcmUvc291bmRzL3NvdW5kLWljb25zL3JpZ2h0LWJyYWNlCg==",
		"phontab": "",
		"phonindex": "",
		"phondata": "",
		"intonations": "czEAAAAAAAAAAAAAAAAAAAAoGAgAAAAALjkAEAAA/1Ay/wQF+Pj4+/v7AEAIAEYSGAwARhIYDAAAAAAAAAAAAAAAAABjMQAAAAAAAAAAAAAAAAAAACgYCAAAAAAuOQAQAAD/UC7/BAX4+Pj7+/sEUBIGThYiNAZOFiI0AAAAAAAAAAAAAAAAAHExAAAAAAAAAAAAAAAAAAAQKBgIAAAAAC45ABAAAP9LK/8EBfn5+QAAAARYFgZSFiJCBlIWIkIAAAAAAAAAAAAAAAAAZTEAAAAAAAAAAAAAAAAAAAo0IBQKAAAALjkAEAAA/1oy/wMF9/f3AAAAAFwIAFxQTAgAXFBMCAAAAAAAAAAAAAAAAABzMgAAAAAAAAAAAAAAAAAAACEYCAAAAAAuOQAQAABLQTz/BAX7+Pj7+/sALBwAMioiHAAyKiIcAAAAAAAAAAAAAAAAAGMyAAAAAAAAAAAAAAAAAAAAKBgIAAAAAC45ABAAAP9BMv8EBfn4+Pn7+wI8KgI3KiI0AjcqIjQAAAAAAAAAAAAAAAAAcTIAAAAAAAAAAAAAAAAAABAoGAgAAAAAKEsAEAAA/0sr/wQF+fn5+QAAAkYyAiMtPEYCIy08RgAAAAAAAAAAAAAAAABlMgAAAAAAAAAAAAAAAAAACjQgFAoAAAAuOQAQAAD/WjL/AwX59/f5AAAAXAgAXFBMCABcUEwIAAAAAAAAAAAAAAAAAHMzAAAAAAAAAAAAAAAAAAAAKBgIAAAAAC45ABAAAP9QMv8EBfn4+Pn7+wBACABGEhgMAEYSGAwAAAAAAAAAAAAAAAAAYzMAAAAAAAAAAAAAAAAAAAAoGAgAAAAALjkAEAAA/0Ye/wQF+fj4+fv7BEsyAEYSGAwARhIYDAAAAAAAAAAAAAAAAABxMwAAAAAAAAAAAAAAAAAAECgYCAAAAAAuOQAQAAD/Syv/BAX5+fn5AAAEWBYGUhYiQgZSFiJCAAAAAAAAAAAAAAAAAGUzAAAAAAAAAAAAAAAAAAAKNCAUCgAAAC45ABAAAP9aMv8DBfn39/kAAABcCABcUEwIAFxQTAgAAAAAAAAAAAAAAAAA"
	}
	
	if (typeof navigator !== 'undefined' && navigator.userAgent) {
		if (navigator.userAgent.indexOf('Chrome') !== -1) {
			if (parseInt(navigator.userAgent.replace(/^.*?\bChrome\/([0-9]+).*$/, '$1'), 10) >= 32) {
				wsUseTimeout = wsStartFromCallback = true;
			}
		} else if (navigator.userAgent.match(/\bVersion\/[0-9]+\.[0-9\.]+ (Mobile\/\w+ )?Safari\//)) {
			if (parseInt(navigator.userAgent.replace(/^.*?\bVersion\/([0-9]+).*$/, '$1'), 10) >= 9) {
				wsStartFromCallback = true;
			}
		}
	}

	function fsCreateDataFile(path, fname, data, doNotRegister) {
		if (!eSpeak.FS.findObject(path)) eSpeak.FS.createPath('/', path.substring(1), true, true);
		eSpeak.FS.createDataFile(path, fname, data, true, false);
		if (!doNotRegister) fileRegistry.push({
			path: path,
			fname: fname
		});
	}

	function recoverFromFSError(message) {
		console.log('meSpeak -- recovering from error:', message);
		var files = [],
			f, i, l = fileRegistry.length;
		for (i = 0; i < l; i++) {
			f = fileRegistry[i];
			files.push(eSpeak.FS.findObject(f.path + '/' + f.fname).contents);
		}
		eSpeak = new ESpeak();
		setUpVFS();
		for (i = 0; i < l; i++) {
			f = fileRegistry[i];
			fsCreateDataFile(f.path, f.fname, files[i], true);
		}
		fsErrorDetected = true;
	}

	function setUpVFS() {
		var optionFiles = {
			'croak': 'language variant\nname croak\ngender male 70\npitch 85 117\nflutter 20\nformant 0 100 80 110\n',
			'f1': 'language variant\nname female1\ngender female 70\npitch 140 200\nflutter 8\nroughness 4\nformant 0 115 80 150\nformant 1 120 80 180\nformant 2 100 70 150 150\nformant 3 115 70 150\nformant 4 110 80 150\nformant 5 110 90 150\nformant 6 105 80 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAdd -10 -10 -20 -20 0 0 40 60\n',
			'f2': 'language variant\nname female2\ngender female\npitch 142 220\nroughness 3\nformant 0 105 80 150\nformant 1 110 80 160\nformant 2 110 70 150\nformant 3 110 70 150\nformant 4 115 80 150\nformant 5 115 80 150\nformant 6 110 70 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAdd 0 0 -10 -10 0 0 10 40\nbreath 0 2 3 3 3 3 3 2\necho 140 10\nconsonants 125 125\n',
			'f3': 'language variant\nname female3\ngender female\npitch 140 240\nformant 0 105 80 150\nformant 1 120 75 150 -50\nformant 2 135 70 150 -250\nformant 3 125 80 150\nformant 4 125 80 150\nformant 5 125 80 150\nformant 6 120 70 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAmp 18 18 20 20 20 20 20 20\n//breath 0 2 4 4 4 4 4 4\nbreath 0 2 3 3 3 3 3 2\necho 120 10\nroughness 4\n',
			'f4': 'language variant\nname female4\ngender female\necho 130 15\npitch 142 200\nformant 0 120 80 150\nformant 1 115 80 160 -20\nformant 2 130 75 150 -200\nformant 3 123 75 150\nformant 4 125 80 150\nformant 5 125 80 150\nformant 6 110 80 150\nformant 7 110 75 150\nformant 8 110 75 150\nstressAdd -20 -20 -20 -20 0 0 20 120\nstressAmp 18 16 20 20 20 20 20 20\n',
			'f5': 'language variant\nname female5\ngender female\npitch 160 228\nroughness 0\nformant 0 105 80 150\nformant 1 110 80 160\nformant 2 110 70 150\nformant 3 110 70 150\nformant 4 115 80 200\nformant 5 115 80 100\nformant 6 110 70 150\nformant 7 110 70 100\nformant 8 110 70 150\nstressAdd 0 0 -10 -10 0 0 10 40\nbreath 0 4 6   6 6   6 0 10\necho 140 10\nvoicing 75\nconsonants 150 150\nbreathw 150 150 200 200 400 400\n',
			'klatt': 'language variant\nname klatt\nklatt 1\n',
			'klatt2': 'language variant\nname klatt2\nklatt 2\n',
			'klatt3': 'language variant\nname klatt3\nklatt 3\n',
			'm1': 'language variant\nname male1\ngender male 70\npitch 75 109\nflutter 5\nroughness 4\nconsonants 80 100\nformant 0 98 100 100\nformant 1 97 100 100\nformant 2 97 95 100\nformant 3 97 95 100\nformant 4 97 85 100\nformant 5 105 80 100\nformant 6 95 80 100\nformant 7 100 100 100\nformant 8 100 100 100\n//stressAdd -10 -10 -20 -20 0 0 40 70\n',
			'm2': 'language variant\nname male2\ngender male\npitch 88 115\necho 130 15\nformant 0 100 80 120\nformant 1 90 85 120\nformant 2 110 85 120\nformant 3 105 90 120\nformant 4 100 90 120\nformant 5 100 90 120\nformant 6 100 90 120\nformant 7 100 90 120\nformant 8 100 90 120\n',
			'm3': 'language variant\nname male3\ngender male\npitch 80 122\nformant 0 100 100 100\nformant 1 96 97 100\nformant 2 96 97 100\nformant 3 96 103 100\nformant 4 95 103 100\nformant 5 95 103 100\nformant 6 100 100 100\nformant 7 100 100 100\nformant 8 100 100 100\nstressAdd 10 10 0 0 0 0 -30 -30\n',
			'm4': 'language variant\nname male4\ngender male\npitch 70 110\nformant 0 103 100 100\nformant 1 103 100 100\nformant 2 103 100 100\nformant 3 103 100 100\nformant 4 106 100 100\nformant 5 106 100 100\nformant 6 106 100 100\nformant 7 103 100 100\nformant 8 103 100 100\nstressAdd -10 -10 -30 -30 0 0 60 90\n',
			'm5': 'language variant\nname male5\ngender male\nformant 0 100 85 130\nformant 1 90 85 130 40\nformant 2 80 85 130 310\nformant 3 105 85 130\nformant 4 105 85 130\nformant 5 105 85 130\nformant 6 105 85 150\nformant 7 105 85 150\nformant 8 105 85 150\nintonation 2\n',
			'm6': 'language variant\nname male6\ngender male\npitch 82 117\nformant 0 100 90 120\nformant 1 100 90 140\nformant 2 100 70 140\nformant 3 100 75 140\nformant 4 100 80 140\nformant 5 100 80 140\n',
			'm7': 'language variant\nname male7\npitch 75 125\nformant 0 100 125 100\nformant 1 100 90 80\nformant 2 100 70 90\nformant 3 100 60 90\nformant 4 100 60 90\nformant 5 75 50 90\nformant 6 90 50 100\nformant 7 100 50 100\nformant 8 100 50 100\nvoicing 155\n',
			'whisper': 'language variant\nname whisper\npitch 75 125\nformant 0 100 125 100\nformant 1 100 90 80\nformant 2 100 70 90\nformant 3 100 60 90\nformant 4 100 60 90\nformant 5 75 50 90\nformant 6 90 50 100\nformant 7 100 50 100\nformant 8 100 50 100\nvoicing 155\n',
			'whisperf': 'language variant\nname female whisper\ngender female\npitch 160 220\nroughness 3\nformant 0 105 0 150\nformant 1 110 40 160\nformant 2 110 70 150\nformant 3 110 70 150\nformant 4 115 80 150\nformant 5 115 80 150\nformant 6 110 70 150\nformant 7 110 70 150\nformant 8 110 70 150\nstressAdd 0 0 -10 -10 0 0 10 40\n// whisper\nvoicing 20\nbreath 75 75 50 40 15 10\nbreathw 150 150 200 200 400 400\n'
		};
		var dir = eSpeakVoicesDir + '/!v';
		eSpeak.FS.createPath('/', dir.substring(1), true, true);
		eSpeak.FS.root.write = true;
		for (var fn in optionFiles) {
			eSpeak.FS.createDataFile(dir, fn, decodeStringToArray(optionFiles[fn]), true, true);
		}
	}
	if (eSpeak && eSpeak.FS) setUpVFS();

	function setConfigData(data) {
		console.log(data);
		data = data_config;
		[
			['config', decodeBase64ToArray(data.config)],
			['phontab', decodeBase64ToArray(data.phontab)],
			['phonindex', decodeBase64ToArray(data.phonindex)],
			['phondata', decodeBase64ToArray(data.phondata)],
			['intonations', decodeBase64ToArray(data.intonations)]
		].forEach(function (pair) {
			var id = pair[0];
			var data = pair[1];
			fsCreateDataFile(eSpeakDataDir, id, data);
		});
		configDataLoaded = true;
		var voice = data.voice;
		if (typeof voice == 'object' && typeof voice.voice_id == 'string' && typeof voice.dict_id == 'string' && typeof voice.dict == 'string' && typeof voice.voice == 'string') {
			setVoiceData(voice);
		}
		executeQueuedCalls();
	}
	setConfigData();
	function setVoiceData(data) {
		data = data_voice;
		var parts, path, fname, f;
		if (!voicesLoaded[data.voice_id]) {
			if (data.dict_id && !eSpeak.FS.findObject(eSpeakDataDir + '/' + data.dict_id)) fsCreateDataFile(eSpeakDataDir, data.dict_id, decodeBase64ToArray(data.dict));
			parts = data.voice_id.split('/');
			path = eSpeakVoicesDir;
			if (parts.length > 1) {
				path += '/' + parts.slice(0, parts.length - 1).join('/');
			}
			fname = parts[parts.length - 1];
			if (data.voice_encoding == 'text') {
				fsCreateDataFile(path, fname, decodeStringToArray(data.voice));
			} else {
				fsCreateDataFile(path, fname, decodeBase64ToArray(data.voice));
			}
			if (data.files && Array.isArray(data.files)) {
				for (var i = 0, l = data.files.length; i < l; i++) {
					f = data.files[i];
					if (typeof f == 'object' && typeof f.path == 'string' && f.path.length && typeof f.data == 'string' && f.data.length) {
						parts = f.path.split('/');
						if (parts.length > 1) {
							path = eSpeakDataDir + '/' + parts.slice(0, parts.length - 1).join('/');
						} else {
							path = eSpeakDataDir;
						}
						fname = parts[parts.length - 1];
						if (f.encoding == 'text') {
							fsCreateDataFile(path, fname, decodeStringToArray(f.data));
						} else {
							fsCreateDataFile(path, fname, decodeBase64ToArray(f.data));
						}
					}
				}
			}
			voicesLoaded[data.voice_id] = true;
		}
		setDefaultVoice(data.voice_id);
		executeQueuedCalls();
	}
	setVoiceData();
	function decodeBase64ToArray(str) {
		function f(c) {
			if (c == 43) {
				return 62;
			} else if (c == 47) {
				return 63;
			} else if (c == 61) {
				return 64;
			} else if (c <= 57) {
				return c + 4;
			} else if (c <= 90) {
				return c - 65;
			} else {
				return c - 71;
			}
		}
		var h1, h2, h3, h4, out = [],
			i = 0,
			l = str.length;
		while (i < l) {
			h1 = f(str.charCodeAt(i++));
			h2 = f(str.charCodeAt(i++));
			h3 = f(str.charCodeAt(i++));
			h4 = f(str.charCodeAt(i++));
			out.push((h1 << 2) | (h2 >> 4));
			if (h3 != 64) out.push(((h2 & 15) << 4) | (h3 >> 2));
			if (h4 != 64) out.push(((h3 & 3) << 6) | h4);
		}
		return out;
	}

	function encode64(data) {
		var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
		var PAD = '=';
		var ret = '';
		var leftchar = 0;
		var leftbits = 0;
		for (var i = 0, l = data.length; i < l; i++) {
			leftchar = (leftchar << 8) | data[i];
			leftbits += 8;
			while (leftbits >= 6) {
				var curr = (leftchar >> (leftbits - 6)) & 0x3f;
				leftbits -= 6;
				ret += BASE[curr];
			}
		}
		if (leftbits == 2) {
			ret += BASE[(leftchar & 3) << 4];
			ret += PAD + PAD;
		} else if (leftbits == 4) {
			ret += BASE[(leftchar & 0xf) << 2];
			ret += PAD;
		}
		return ret;
	}

	function decodeStringToArray(str) {
		var out = [],
			l = str.length,
			i;
		for (i = 0; i < l; i++) out.push(str.charCodeAt(i));
		return out;
	}

	function executeQueuedCalls() {
		if (configDataLoaded && defaultVoice) {
			for (var i = 0, l = speakQueue.length; i < l; i++) {
				var args = speakQueue[i];
				if (args[3].multipart) {
					speakMultipart(args[0], args[1], args[2], args[3]);
				} else {
					speak(args[0], args[1], args[2], args[3]);
				}
			}
			speakQueue.length = 0;
		}
	}

	function resetQueue() {
		speakQueue.length = 0;
	}

	function speak(text, args, callback, _id) {
		if (typeof args !== 'object') args = {};
		if (!canPlay && !args.rawdata) {
			if (self.console) console.log('meSpeak: Can\'t play; No audio support.');
			return 0;
		}
		if (!_id || !isValidJobId(_id)) _id = getJobId();
		if (!configDataLoaded || !defaultVoice) {
			if (self.console) console.log(((!configDataLoaded) ? 'No config-data loaded' : 'No voice module loaded') + ', deferring call.');
			if (args.rawdata) {
				return null;
			} else {
				speakQueue.push([text, args, callback, _id]);
				return _id.number;
			}
		}
		if (args && args.voice && !voicesLoaded[args.voice]) {
			if (self.console) console.log('Voice ' + args.voice + ' not available. Using default voice: ' + defaultVoice);
			args.voice = defaultVoice;
		}
		var varg = (args.voice) ? String(args.voice) : (args.v) ? String(args.v) : defaultVoice;
		if (varg.indexOf('mb/mb-') == 0) varg = varg.substring(3);
		if (args.variant) varg += '+' + String(args.variant).replace(/\+/g, '');
		var argstack = ['-w', 'wav.wav', '-a', (typeof args.amplitude !== 'undefined') ? String(args.amplitude) : (typeof args.a !== 'undefined') ? String(args.a) : '100', '-g', (typeof args.wordgap !== 'undefined') ? String(args.wordgap) : (typeof args.g !== 'undefined') ? String(args.g) : '0', '-p', (typeof args.pitch !== 'undefined') ? String(args.pitch) : (typeof args.p !== 'undefined') ? String(args.p) : '50', '-s', (typeof args.speed !== 'undefined') ? String(args.speed) : (typeof args.s !== 'undefined') ? String(args.s) : '175', '-b', args.utf16 ? '4' : (typeof args.b !== 'undefined') ? String(args.b) : '1', '-v', varg];
		var a = args.linebreak || args.l;
		if (a) argstack.push('-l', String(a));
		a = args.capitals || args.k;
		if (a) argstack.push('-k', String(a));
		a = args.nostop || args.z;
		if (a) argstack.push('-z');
		if (typeof args.punct !== 'undefined') {
			if (typeof args.punct == 'string') {
				if (args.punct.length) {
					argstack.push('--punct="' + String(args.punct).replace(/([\\"'])/g, '\\$1') + '"');
				} else {
					argstack.push('--punct');
				}
			} else if (args.punct) {
				argstack.push('--punct');
			}
		}
		a = args.ssml || args.m || args.markup;
		if (a) argstack.push('-m');
		argstack.push('--path=' + eSpeakDir, String(text));
		if (args.log && self.console) console.log('executing espeak ' + argstack.join(' '));
		eSpeak.Module.arguments = argstack;
		if (typeof callback !== 'function') callback = null;
		if (!callback && typeof args.callback == 'function') callback = args.callback;
		fsErrorDetected = false;
		eSpeak.run();
		if (fsErrorDetected) {
			fsErrorDetected = false;
			eSpeak.Module.arguments = argstack;
			eSpeak.run();
		}
		var outfile = eSpeak.FS.root.contents['wav.wav'].contents,
			wav = unsignedStream(outfile);
		outfile.length = 0;
		argstack = null;
		return (args.rawdata) ? exportStream(wav, args.rawdata) : playSound(wav, args.volume, callback, _id);
	}

	function exportStream(stream, format) {
		switch (String(format).toLowerCase()) {
			case 'array':
				return stream;
			case 'base64':
				return encode64(stream);
			case 'data-url':
			case 'data-uri':
			case 'dataurl':
			case 'datauri':
			case 'mime':
				return 'data:audio/x-wav;base64,' + encode64(stream);
			default:
				var buffer = new ArrayBuffer(stream.length);
				new Uint8Array(buffer).set(stream);
				return buffer;
		}
	}

	function speakMultipart(parts, args, callback, _id) {
		if (typeof args !== 'object') args = {};
		if (!canPlay && !args.rawdata) {
			if (self.console) console.log('meSpeak: Can\'t play; No audio support.');
			return 0;
		}
		var failed = false;
		if (typeof callback !== 'function') callback = null;
		if (!callback && typeof args.callback == 'function') callback = args.callback;
		if (Object.prototype.toString.call(parts) != '[object Array]' || !parts.length) {
			if (self.console) console.log('meSpeak.speakMultipart: First argument must be an array of objects.');
			failed = true;
		}
		if (!failed) {
			for (var i = 0, l = parts.length; i < l; i++) {
				if (typeof parts[i] != 'object') {
					if (self.console) console.log('meSpeak.speakMultipart: First argument must be an array of objects (part #' + i + ').');
					failed = true;
					break;
				}
			}
		}
		if (failed) {
			if (args.rawdata) {
				return null;
			} else {
				if (callback) callback(false);
				return 0;
			}
		}
		if (!_id || !isValidJobId(_id)) _id = getJobId();
		if (!configDataLoaded || !defaultVoice) {
			if (self.console) console.log(((!configDataLoaded) ? 'No config-data loaded' : 'No voice module loaded') + ', deferring call.');
			if (args.rawdata) {
				return null;
			} else {
				_id.multipart = true;
				speakQueue.push([parts, args, callback, _id]);
				return _id.number;
			}
		}
		var wav, sampleLength;
		for (var i = 0, l = parts.length; i < l; i++) {
			var n, part = parts[i],
				opts = {};
			for (n in args) opts[n] = args[n];
			for (n in part) opts[n] = part[n];
			opts.rawdata = 'array';
			opts.callback = null;
			var buffer = meSpeak.speak(part.text, opts);
			if (!buffer) {
				if (args.rawdata) {
					return null;
				} else {
					if (callback) callback(false);
					return 0;
				}
			}
			if (i == 0) {
				wav = buffer;
				sampleLength = readBytes(buffer, 40, 4);
			} else {
				sampleLength += readBytes(buffer, 40, 4);
				wav = wav.concat(buffer.slice(44));
			}
			buffer = null;
		}
		writeBytes(wav, 4, 4, sampleLength);
		writeBytes(wav, 40, 4, sampleLength);
		return (args.rawdata) ? exportStream(wav, args.rawdata) : playSound(wav, args.volume, callback, _id);
	}

	function writeBytes(f, p, n, value) {
		while (n) {
			f[p++] = value & 0xff;
			value = value >> 8;
			n--;
		}
	}

	function readBytes(f, p, n) {
		var value = 0,
			shft = 0;
		while (n) {
			value |= f[p++] << shft;
			shft += 8;
			n--;
		}
		return value;
	}

	function unsignedStream(wav) {
		var i, l = wav.length,
			v, out = new Array(l);
		for (i = 0; i < l; i++) {
			v = wav[i];
			out[i] = (v >= 0) ? v : 256 + v;
		}
		return out;
	}

	function getJobId() {
		var n, s;
		while (!n || audioPool[s] || webSoundPool[s]) {
			n = Math.floor(Math.random() * Math.pow(2, 32));
			s = n.toString(16);
		}
		return {
			number: n,
			string: s
		}
	}

	function isValidJobId(id) {
		return !(Object.prototype.toString.call(id) !== '[object Object]' || Object.prototype.toString.call(id.number) !== '[object Number]' || Object.prototype.toString.call(id.string) !== '[object String]' || !id.number || id.string !== id.number.toString(16));
	}

	function playSound(stream, relVolume, callback, _id) {
		if (callback && (typeof callback !== 'function')) callback = null;
		if (!_id || !isValidJobId(_id)) _id = getJobId();
		var streamType = Object.prototype.toString.call(stream);
		if (!(streamType == '[object Array]' || streamType == '[object ArrayBuffer]' || streamType == '[object String]')) {
			if (self.console) console.log('meSpeak: Can\'t play, not an Array, or ArrayBuffer, or base64-String: ' + streamType);
			if (callback) callback(false);
			return 0;
		}
		if (typeof relVolume !== 'undefined') {
			relVolume = parseFloat(relVolume);
			if (isNaN(relVolume) || relVolume < 0 || relVolume > 1) relVolume = undefined;
		}
		if (AudioAPI) {
			if (streamType == '[object String]') {
				if (stream.indexOf('data:audio/x-wav;base64,', 0) == 0) stream = stream.substring(24);
				stream = stream.replace(/=+$/, '');
				if (stream.match(/[^A-Za-z0-9\+\/]/)) {
					if (self.console) console.log('meSpeak: Can\'t play, not a proper base64-String.');
					if (callback) callback(false);
					return 0;
				}
				stream = decodeBase64ToArray(stream);
				if (!stream.length) {
					if (self.console) console.log('meSpeak: Can\'t play, empty sound data.');
					if (callback) callback(false);
					return 0;
				}
				streamType = '[object Array]';
			}
			var buffer;
			if (streamType == '[object Array]') {
				var buffer = new ArrayBuffer(stream.length);
				new Uint8Array(buffer).set(stream);
			} else {
				buffer = stream;
			}
			return playWebSound(buffer, relVolume, callback, _id);
		} else if (canPlay) {
			var isDataUrl = false;
			if (streamType == '[object String]') {
				if (stream.indexOf('data:audio/x-wav;base64,', 0) < 0) {
					if (stream.match(/[^A-Za-z0-9\+\/]/)) {
						if (self.console) console.log('meSpeak: Can\'t play, not a proper base64-String.');
						if (callback) callback(false);
						return 0;
					}
					stream = 'data:audio/x-wav;base64,' + stream;
				}
				isDataUrl = true;
			} else if (streamType == '[object ArrayBuffer]') {
				stream = new Uint8Array(stream);
			}
			return (new AudioPlayback(stream, relVolume, isDataUrl, callback, _id).started) ? _id.number : 0;
		} else {
			if (self.console) console.log('meSpeak: Can\'t play; No audio support.');
			if (callback) callback(false);
			return 0;
		}
	}

	function stopSound() {
		var id, i, k, kl, l, item, n, stopped = 0;
		if (arguments.length > 0) {
			for (i = 0, l = arguments.length; i < l; i++) {
				n = parseInt(arguments[i]);
				if (n && !isNaN(n)) {
					id = n.toString(16);
					if (audioPool[id]) {
						audioPool[id].stop();
						stopped++;
					} else if (webSoundPool[id]) {
						stopWebSound(webSoundPool[id]);
						stopped++;
					} else {
						for (k = 0, kl = speakQueue.length; k < kl; k++) {
							item = speakQueue[i];
							if (item[3].string === id) {
								if (!unloading && typeof item[2] == 'function') item[2](false);
								speakQueue.splice(k, 1);
								stopped++;
								break;
							}
						}
					}
				}
			}
		} else {
			for (id in audioPool) {
				audioPool[id].stop();
				stopped++;
			}
			for (id in webSoundPool) {
				stopWebSound(webSoundPool[id]);
				stopped++;
			}
			for (i = 0, l = speakQueue.length; i < l; i++) {
				item = speakQueue[i];
				if (!unloading && typeof item[2] == 'function') item[2](false);
				stopped++;
			}
			speakQueue.length = 0;
		}
		return stopped;
	}

	function setVolume(vol) {
		var id, i, l, n, v;
		v = parseFloat(vol);
		if (!isNaN(v) && v >= 0 && v <= 1 && v != playbackVolume) {
			if (arguments.length == 1) playbackVolume = v;
			if (AudioAPI) {
				if (arguments.length > 1) {
					for (i = 0, l = arguments.length; i < l; i++) {
						n = parseInt(arguments[i]);
						if (n && !isNaN(n)) {
							id = n.toString(16);
							if (webSoundPool[id]) setWebSoundVolume(webSoundPool[id], v);
						}
					}
				} else if (masterGain) {
					masterGain.gain.value = playbackVolume;
				}
			} else if (canPlay) {
				if (arguments.length > 1) {
					for (i = 0, l = arguments.length; i < l; i++) {
						n = parseInt(arguments[i]);
						if (n && !isNaN(n)) {
							id = n.toString(16);
							if (audioPool[id]) audioPool[id].setVolume(v);
						}
					}
				} else {
					for (id in audioPool) audioPool[id].adjustVolume();
				}
			}
		}
		return vol;
	}

	function getVolume() {
		if (arguments.length) {
			var n = parseInt(arguments[0]);
			if (n && !isNaN(n)) {
				var id = n.toString(16);
				if (webSoundPool[id]) return webSoundPool[id].relVolume;
				if (audioPool[id]) return audioPool[id].relVolume;
			}
			return undefined;
		} else {
			return playbackVolume;
		}
	}

	function resolveAudioApi() {
		if (self.AudioContext) {
			AudioAPI = self.AudioContext;
			canPlay = true;
			return;
		} else {
			var vendors = ['webkit', 'moz', 'o', 'ms'];
			for (var i = 0; i < vendors.length; i++) {
				var api = self[vendors[i] + 'AudioContext'];
				if (api) {
					AudioAPI = api;
					canPlay = true;
					return;
				}
			}
		}
		if (!AudioAPI) {
			var audioElement = document.createElement('audio');
			if (audioElement && audioElement.canPlayType && (audioElement.canPlayType('audio/wav') || audioElement.canPlayType('audio/x-wav'))) {
				canPlay = true;
			} else {
				canPlay = false;
				if (self.console) console.log('meSpeak: Muted. No support for HTMLAudioElement with MIME "audio/x-wav" dected.');
			}
		}
	}
	resolveAudioApi();

	function canPlaybackWav() {
		return canPlay;
	}

	function AudioPlayback(stream, relVolume, isDataUrl, callback, id) {
		this.relVolume = relVolume;
		this.audio = null;
		this.id = id.string;
		this.callback = (typeof callback == 'function') ? callback : null;
		this.playing = false;
		this.started = false;
		this.play(stream, isDataUrl);
	}
	AudioPlayback.prototype = {
		play: function (stream, isDataUrl) {
			try {
				audioPool[this.id] = this;
				this.audio = document.createElement('audio');
				this.adjustVolume();
				var that = this;
				this.audio.addEventListener('ended', function () {
					that.remove();
				}, false);
				this.audio.addEventListener('canplaythrough', function () {
					that.audio.play();
					that.playing = true;
				}, false);
				if (isDataUrl) {
					this.audio.src = stream;
				} else {
					this.audio.src = 'data:audio/x-wav;base64,' + encode64(stream);
				}
				this.audio.load();
				this.started = true;
			} catch (e) {
				if (self.console) console.log('meSpeak: HTMLAudioElement Exception: ' + e.message);
				this.started = false;
				this.remove();
			}
		},
		adjustVolume: function () {
			this.audio.volume = (typeof this.relVolume !== 'undefined') ? this.relVolume * playbackVolume : playbackVolume;
		},
		setVolume: function (v) {
			this.relVolume = v;
			this.adjustVolume();
		},
		remove: function (stopped) {
			if (this.id) delete audioPool[this.id];
			if (this.callback) {
				var f = this.callback;
				this.callback = null;
				if (!unloading) f(!stopped);
			}
		},
		stop: function () {
			try {
				if (this.playing) this.audio.pause();
			} catch (e) {}
			this.remove(true);
		}
	};

	function playWebSound(stream, volume, callback, id) {
		try {
			var source, gainNode, timer, relVolume;
			if (!audioContext) audioContext = new AudioAPI();
			if (!masterGain) {
				masterGain = (audioContext.createGain) ? audioContext.createGain() : audioContext.createGainNode();
				masterGain.connect(audioContext.destination);
				masterGain.gain.value = playbackVolume;
			}
			source = audioContext.createBufferSource();
			relVolume = parseFloat(volume);
			if (typeof relVolume === 'undefined' || isNaN(relVolume) || relVolume < 0 || relVolume > 1) relVolume = 1;
			gainNode = (audioContext.createGain) ? audioContext.createGain() : audioContext.createGainNode();
			gainNode.connect(masterGain);
			gainNode.gain.value = relVolume;
			source.connect(gainNode);
			audioContext.decodeAudioData(stream, function (audioData) {
				var f = function () {
					webSoundEndHandler(source, gainNode, callback, true, id.string);
				};
				if (wsUseTimeout || typeof source.onended === 'undefined') {
					var duration = audioData.duration;
					timer = setTimeout(f, duration ? Math.ceil(duration * 1000) : 10);
				} else {
					source.onended = f;
				}
				source.buffer = audioData;
				if (wsStartFromCallback) {
					if (source.start) {
						source.start(0);
					} else {
						source.noteOn(0);
					}
				}
			}, function (err) {
				console.log('meSpeak: Web Audio Decoding Error: ' + ((typeof err == 'object') ? err.message : err));
				if (timer) clearTimeout(timer);
				if (source) source.disconnect();
				if (gainNode) gainNode.disconnect();
				if (webSoundPool[id.string]) delete webSoundPool[id.string];
				if (!unloading && typeof callback == 'function') callback(false);
				return 0;
			});
			webSoundPool[id.string] = {
				'source': source,
				'gainNode': gainNode,
				'callback': callback,
				'id': id.string,
				'relVolume': relVolume,
				'timer': timer
			};
			if (!wsStartFromCallback) {
				if (source.start) {
					source.start(0);
				} else {
					source.noteOn(0);
				}
			}
			return id.number;
		} catch (e) {
			if (self.console) console.log('meSpeak: Web Audio Exception: ' + e.message);
			if (timer) {
				clearTimeout(timer);
				timer = 0;
			}
			webSoundEndHandler(source, gainNode, callback, false, id.string);
			return 0;
		}
	}

	function webSoundEndHandler(source, gainNode, callback, success, id) {
		if (id && webSoundPool[id] && webSoundPool[id].timer) clearTimeout(webSoundPool[id].timer);
		if (!unloading && typeof callback == 'function') callback(success);
		var f = function () {
			if (source) {
				if (typeof source.onended !== 'undefined') source.onended = null;
				source.disconnect();
			}
			if (gainNode) gainNode.disconnect();
			if (id && webSoundPool[id]) delete webSoundPool[id];
		};
		if (!success) {
			f();
		} else {
			setTimeout(f, 500);
		}
	}

	function stopWebSound(obj) {
		try {
			if (obj.source.stop) {
				obj.source.stop(0);
			} else {
				obj.sourcesource.noteOff(0);
			}
		} catch (e) {}
		webSoundEndHandler(obj.source, obj.gainNode, obj.callback, false, obj.id);
	}

	function setWebSoundVolume(obj, v) {
		obj.gainNode.gain.value = v;
		obj.relVolume = v;
	}

	function setDefaultVoice(voice) {
		if (voice && voicesLoaded[voice]) defaultVoice = voice;
	}

	function getDefaultVoice() {
		return defaultVoice;
	}

	function loadVoice(url, callback) {
		if (url) new HttpRequest(url, voiceRequestCallback, callback);
	}

	function loadConfig(url) {
		if (url) new HttpRequest(url, configDataRequestCallback, null);
	}

	function isVoiceLoaded(voice) {
		return (voicesLoaded[voice]) ? true : false;
	}

	function isConfigLoaded() {
		return (configDataLoaded) ? true : false;
	}

	function HttpRequest(url, loadCallback, userCallback) {
		var req = this.request = new XMLHttpRequest();
		this.handler = loadCallback;
		this.url = url;
		this.localmode = Boolean(self.location.href.search(/^file:/i) == 0);
		this.userCallback = userCallback;
		var objref = this;
		try {
			req.open('GET', url);
			req.onreadystatechange = function () {
				objref.handler();
			};
			req.send('');
		} catch (e) {
			if (self.console) console.log('Failed to load resource from ' + url + ': Network error.');
			if (typeof userCallback == 'function') userCallback(false, 'network error');
			this.request = this.handler = this.userCallback = null;
		}
	}

	function voiceRequestCallback() {
		var req = this.request;
		if (req.readyState == 4) {
			if (this.localmode || req.status == 200) {
				var data = JSON.parse(req.responseText);
				if (typeof data == 'object' && typeof data.voice_id == 'string' && typeof data.voice == 'string' && (((!data.dict_id && !data.dict_id) || (typeof data.dict_id == 'string' && typeof data.dict == 'string')) || (!data.files || (typeof data.files == 'object' && Array.isArray(data.files))))) {
					setVoiceData(data);
					if (typeof this.userCallback == 'function') this.userCallback(true, data.voice_id);
				} else {
					if (self.console) console.log('Failed to load voice from ' + this.url + ': Not a voice module.');
					if (typeof this.userCallback == 'function') this.userCallback(false, 'data error');
				}
			} else {
				if (self.console) console.log('Failed to load voice from ' + this.url + ': Received status ' + req.status + '.');
				if (typeof this.userCallback == 'function') this.userCallback(false, 'file error');
			}
			this.request = this.handler = this.userCallback = null;
		}
	}

	function configDataRequestCallback() {
		var req = this.request;
		if (req.readyState == 4) {
			if (this.localmode || req.status == 200) {
				var data = JSON.parse(req.responseText);
				if (typeof data == 'object' && typeof data.config == 'string' && typeof data.phontab == 'string' && typeof data.phonindex == 'string' && typeof data.phondata == 'string' && typeof data.intonations == 'string') {
					setConfigData(data);
				} else {
					if (self.console) console.log('Failed to load config-data from ' + this.url + ': No valid data.');
				}
			} else {
				if (self.console) console.log('Failed to load config-data from ' + this.url + ': Received status ' + req.status + '.');
			}
			this.request = this.handler = this.userCallback = null;
		}
	}

	function unloadHandler(event) {
		unloading = true;
		stopSound();
		audioPool = {};
		webSoundPool = {};
	}
	window.addEventListener('unload', unloadHandler, false);
	return {
		speak: speak,
		speakMultipart: speakMultipart,
		loadConfig: loadConfig,
		loadVoice: loadVoice,
		setDefaultVoice: setDefaultVoice,
		getDefaultVoice: getDefaultVoice,
		setVolume: setVolume,
		getVolume: getVolume,
		play: playSound,
		isConfigLoaded: isConfigLoaded,
		isVoiceLoaded: isVoiceLoaded,
		resetQueue: resetQueue,
		canPlay: canPlaybackWav,
		stop: stopSound,
	}
})();